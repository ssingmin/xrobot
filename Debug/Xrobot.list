
Xrobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001187c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b28  08011a10  08011a10  00021a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012538  08012538  00030270  2**0
                  CONTENTS
  4 .ARM          00000008  08012538  08012538  00022538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012540  08012540  00030270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012540  08012540  00022540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012544  08012544  00022544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  08012548  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030270  2**0
                  CONTENTS
 10 .bss          0000534c  20000270  20000270  00030270  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200055bc  200055bc  00030270  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022c39  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f1d  00000000  00000000  00052ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a90  00000000  00000000  00057df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001898  00000000  00000000  00059888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000737a  00000000  00000000  0005b120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f6fd  00000000  00000000  0006249a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d23ba  00000000  00000000  00081b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00153f51  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000814c  00000000  00000000  00153fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080119f4 	.word	0x080119f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	080119f4 	.word	0x080119f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ws2812NumOn>:

uint16_t g_led_data[(TOTALNUM*24)+CYCLE_RESET]={0,};//CYCLE_RESET of data = 0, not BIT_HIGH or BIT_LOW


void ws2812NumOn(uint32_t led_cnt)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint16_t *)g_led_data, (TOTALNUM*24)+CYCLE_RESET);
 8000eb4:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <ws2812NumOn+0x20>)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <ws2812NumOn+0x24>)
 8000ebe:	f005 ff8f 	bl	8006de0 <HAL_TIM_PWM_Start_DMA>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2000028c 	.word	0x2000028c
 8000ed0:	200009a8 	.word	0x200009a8

08000ed4 <ws2812SetColor>:


void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b09d      	sub	sp, #116	; 0x74
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	4608      	mov	r0, r1
 8000ede:	4611      	mov	r1, r2
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	70fb      	strb	r3, [r7, #3]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	70bb      	strb	r3, [r7, #2]
 8000eea:	4613      	mov	r3, r2
 8000eec:	707b      	strb	r3, [r7, #1]
	uint32_t buf[TOTALNUM];

	buf[index] = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 8000eee:	78bb      	ldrb	r3, [r7, #2]
 8000ef0:	021a      	lsls	r2, r3, #8
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	021a      	lsls	r2, r3, #8
 8000ef8:	787b      	ldrb	r3, [r7, #1]
 8000efa:	4413      	add	r3, r2
 8000efc:	461a      	mov	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	3370      	adds	r3, #112	; 0x70
 8000f04:	443b      	add	r3, r7
 8000f06:	f843 2c64 	str.w	r2, [r3, #-100]

	for(int i=0;i<24;i++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f0e:	e02c      	b.n	8000f6a <ws2812SetColor+0x96>
	{
		if(buf[index]&(1<<i)) {g_led_data[(TOTALNUM-index)*24-i] = BIT_HIGH;}
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	3370      	adds	r3, #112	; 0x70
 8000f16:	443b      	add	r3, r7
 8000f18:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	4013      	ands	r3, r2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00e      	beq.n	8000f48 <ws2812SetColor+0x74>
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	1a9b      	subs	r3, r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	461a      	mov	r2, r3
 8000f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000f3e:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <ws2812SetColor+0xac>)
 8000f40:	2143      	movs	r1, #67	; 0x43
 8000f42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f46:	e00d      	b.n	8000f64 <ws2812SetColor+0x90>
		else {g_led_data[(TOTALNUM-index)*24-i] = BIT_LOW;}
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	1a9b      	subs	r3, r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	461a      	mov	r2, r3
 8000f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000f5c:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <ws2812SetColor+0xac>)
 8000f5e:	2121      	movs	r1, #33	; 0x21
 8000f60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<24;i++)
 8000f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f66:	3301      	adds	r3, #1
 8000f68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f6c:	2b17      	cmp	r3, #23
 8000f6e:	ddcf      	ble.n	8000f10 <ws2812SetColor+0x3c>
	}
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3774      	adds	r7, #116	; 0x74
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	2000028c 	.word	0x2000028c

08000f84 <ws2812AllColor>:


void ws2812AllColor(uint8_t red, uint8_t green, uint8_t blue)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	71bb      	strb	r3, [r7, #6]
 8000f92:	4613      	mov	r3, r2
 8000f94:	717b      	strb	r3, [r7, #5]
	uint32_t buf;

	buf = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	021a      	lsls	r2, r3, #8
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	021a      	lsls	r2, r3, #8
 8000fa0:	797b      	ldrb	r3, [r7, #5]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]

	for(int j=TOTALNUM;j>0;j--)
 8000fa6:	2318      	movs	r3, #24
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e02d      	b.n	8001008 <ws2812AllColor+0x84>
	{
		for(int i=0;i<24;i++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	e024      	b.n	8000ffc <ws2812AllColor+0x78>
		{
			if(buf&(1<<i)) {g_led_data[(j*24)-i] = BIT_HIGH;}
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00c      	beq.n	8000fde <ws2812AllColor+0x5a>
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	4a11      	ldr	r2, [pc, #68]	; (800101c <ws2812AllColor+0x98>)
 8000fd6:	2143      	movs	r1, #67	; 0x43
 8000fd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000fdc:	e00b      	b.n	8000ff6 <ws2812AllColor+0x72>
			else {g_led_data[(j*24)-i] = BIT_LOW;}
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <ws2812AllColor+0x98>)
 8000ff0:	2121      	movs	r1, #33	; 0x21
 8000ff2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<24;i++)
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	2b17      	cmp	r3, #23
 8001000:	ddd7      	ble.n	8000fb2 <ws2812AllColor+0x2e>
	for(int j=TOTALNUM;j>0;j--)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3b01      	subs	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2b00      	cmp	r3, #0
 800100c:	dcce      	bgt.n	8000fac <ws2812AllColor+0x28>
		}
	}
}
 800100e:	bf00      	nop
 8001010:	bf00      	nop
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	2000028c 	.word	0x2000028c

08001020 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_CAN1_Init+0x64>)
 8001026:	4a18      	ldr	r2, [pc, #96]	; (8001088 <MX_CAN1_Init+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_CAN1_Init+0x64>)
 800102c:	2206      	movs	r2, #6
 800102e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_CAN1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <MX_CAN1_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_CAN1_Init+0x64>)
 800103e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001042:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_CAN1_Init+0x64>)
 8001046:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800104a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800104c:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <MX_CAN1_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_CAN1_Init+0x64>)
 8001054:	2201      	movs	r2, #1
 8001056:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <MX_CAN1_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_CAN1_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <MX_CAN1_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_CAN1_Init+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_CAN1_Init+0x64>)
 8001072:	f003 f9cf 	bl	8004414 <HAL_CAN_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800107c:	f002 fa54 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200007d4 	.word	0x200007d4
 8001088:	40006400 	.word	0x40006400

0800108c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <HAL_CAN_MspInit+0x94>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d134      	bne.n	8001118 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <HAL_CAN_MspInit+0x98>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <HAL_CAN_MspInit+0x98>)
 80010b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_CAN_MspInit+0x98>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_CAN_MspInit+0x98>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <HAL_CAN_MspInit+0x98>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_CAN_MspInit+0x98>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010f8:	2309      	movs	r3, #9
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4809      	ldr	r0, [pc, #36]	; (8001128 <HAL_CAN_MspInit+0x9c>)
 8001104:	f004 fd34 	bl	8005b70 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2105      	movs	r1, #5
 800110c:	2014      	movs	r0, #20
 800110e:	f004 f8f5 	bl	80052fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001112:	2014      	movs	r0, #20
 8001114:	f004 f90e 	bl	8005334 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40006400 	.word	0x40006400
 8001124:	40023800 	.word	0x40023800
 8001128:	40020400 	.word	0x40020400

0800112c <CAN_disableirq>:
  }
}

/* USER CODE BEGIN 1 */

void CAN_disableirq(void){HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);}
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
 8001130:	2014      	movs	r0, #20
 8001132:	f004 f90d 	bl	8005350 <HAL_NVIC_DisableIRQ>
 8001136:	2015      	movs	r0, #21
 8001138:	f004 f90a 	bl	8005350 <HAL_NVIC_DisableIRQ>
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <CAN_enableirq>:
void CAN_enableirq(void){HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);/*HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);*/}
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
 8001144:	2014      	movs	r0, #20
 8001146:	f004 f8f5 	bl	8005334 <HAL_NVIC_EnableIRQ>
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <CanInit>:

void CanInit(uint32_t id, uint32_t mask, uint8_t EXT_Select)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	4613      	mov	r3, r2
 800115c:	71fb      	strb	r3, [r7, #7]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <CanInit+0x88>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001164:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <CanInit+0x88>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <CanInit+0x88>)
 800116c:	2201      	movs	r2, #1
 800116e:	61da      	str	r2, [r3, #28]
//    sFilterConfig.FilterIdHigh = (id<<3)>>16;
//    sFilterConfig.FilterIdLow = ((id<<3)&0xffff)|(EXT_Select<<2);//(0x1<<2) is extended id check register
//    sFilterConfig.FilterMaskIdHigh = (mask<<3)>>16;
//    sFilterConfig.FilterMaskIdLow = ((mask<<3)&0xffff)|(EXT_Select<<2);
    sFilterConfig.FilterIdHigh = (id<<5);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	015b      	lsls	r3, r3, #5
 8001174:	4a18      	ldr	r2, [pc, #96]	; (80011d8 <CanInit+0x88>)
 8001176:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = 0;//(0x1<<2) is extended id check register
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <CanInit+0x88>)
 800117a:	2200      	movs	r2, #0
 800117c:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh = (mask<<5);
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	015b      	lsls	r3, r3, #5
 8001182:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <CanInit+0x88>)
 8001184:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = 0;
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <CanInit+0x88>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <CanInit+0x88>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <CanInit+0x88>)
 8001194:	2201      	movs	r2, #1
 8001196:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <CanInit+0x88>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 800119e:	480f      	ldr	r0, [pc, #60]	; (80011dc <CanInit+0x8c>)
 80011a0:	f003 fb14 	bl	80047cc <HAL_CAN_Start>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <CanInit+0x5e>
 80011aa:	f002 f9bd 	bl	8003528 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 80011ae:	2102      	movs	r1, #2
 80011b0:	480a      	ldr	r0, [pc, #40]	; (80011dc <CanInit+0x8c>)
 80011b2:	f003 fd71 	bl	8004c98 <HAL_CAN_ActivateNotification>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d000      	beq.n	80011be <CanInit+0x6e>
 80011bc:	e7fe      	b.n	80011bc <CanInit+0x6c>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80011be:	4906      	ldr	r1, [pc, #24]	; (80011d8 <CanInit+0x88>)
 80011c0:	4806      	ldr	r0, [pc, #24]	; (80011dc <CanInit+0x8c>)
 80011c2:	f003 fa23 	bl	800460c <HAL_CAN_ConfigFilter>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <CanInit+0x80>
    {
		/* Filter configuration Error */
		Error_Handler();
 80011cc:	f002 f9ac 	bl	8003528 <Error_Handler>
    }
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200007ac 	.word	0x200007ac
 80011dc:	200007d4 	.word	0x200007d4

080011e0 <sendCan>:
		Error_Handler();
    }
}

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	; 0x30
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	4611      	mov	r1, r2
 80011ec:	461a      	mov	r2, r3
 80011ee:	460b      	mov	r3, r1
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	4613      	mov	r3, r2
 80011f4:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <sendCan+0x2c>
 8001208:	2304      	movs	r3, #4
 800120a:	e000      	b.n	800120e <sendCan+0x2e>
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <sendCan+0x74>)
 800121c:	f003 fbf5 	bl	8004a0a <HAL_CAN_GetTxMailboxesFreeLevel>
 8001220:	4603      	mov	r3, r0
 8001222:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00d      	beq.n	8001246 <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	f107 0114 	add.w	r1, r7, #20
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	4807      	ldr	r0, [pc, #28]	; (8001254 <sendCan+0x74>)
 8001236:	f003 fb0d 	bl	8004854 <HAL_CAN_AddTxMessage>
 800123a:	4603      	mov	r3, r0
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 800123e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001240:	2b00      	cmp	r3, #0
 8001242:	d000      	beq.n	8001246 <sendCan+0x66>
 8001244:	e7fe      	b.n	8001244 <sendCan+0x64>
    }
    osDelay(1);//must be
 8001246:	2001      	movs	r0, #1
 8001248:	f008 fc36 	bl	8009ab8 <osDelay>
}
 800124c:	bf00      	nop
 800124e:	3730      	adds	r7, #48	; 0x30
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200007d4 	.word	0x200007d4

08001258 <SDOMsg>:

void SDOMsg(uint8_t Node_id,uint16_t index, uint8_t subindex, uint32_t msg, uint8_t len)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
 8001264:	460b      	mov	r3, r1
 8001266:	80bb      	strh	r3, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[8]={0,};
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]

	switch (len) {
 8001274:	7e3b      	ldrb	r3, [r7, #24]
 8001276:	3b01      	subs	r3, #1
 8001278:	2b03      	cmp	r3, #3
 800127a:	d817      	bhi.n	80012ac <SDOMsg+0x54>
 800127c:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <SDOMsg+0x2c>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	08001295 	.word	0x08001295
 8001288:	0800129b 	.word	0x0800129b
 800128c:	080012a1 	.word	0x080012a1
 8001290:	080012a7 	.word	0x080012a7
		case 1:
			buf[0]=0x2f;	break;	//1byte
 8001294:	232f      	movs	r3, #47	; 0x2f
 8001296:	723b      	strb	r3, [r7, #8]
 8001298:	e008      	b.n	80012ac <SDOMsg+0x54>
		case 2:
			buf[0]=0x2b;	break;	//2byte
 800129a:	232b      	movs	r3, #43	; 0x2b
 800129c:	723b      	strb	r3, [r7, #8]
 800129e:	e005      	b.n	80012ac <SDOMsg+0x54>
		case 3:
			buf[0]=0x27;	break;	//3byte
 80012a0:	2327      	movs	r3, #39	; 0x27
 80012a2:	723b      	strb	r3, [r7, #8]
 80012a4:	e002      	b.n	80012ac <SDOMsg+0x54>
		case 4:
			buf[0]=0x23;	break;	//4byte
 80012a6:	2323      	movs	r3, #35	; 0x23
 80012a8:	723b      	strb	r3, [r7, #8]
 80012aa:	bf00      	nop
	}

	memcpy(buf+1,&index,2);	//index
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	3301      	adds	r3, #1
 80012b2:	88ba      	ldrh	r2, [r7, #4]
 80012b4:	801a      	strh	r2, [r3, #0]
	buf[3]=subindex;		//subindex
 80012b6:	79bb      	ldrb	r3, [r7, #6]
 80012b8:	72fb      	strb	r3, [r7, #11]
	memcpy(buf+4,&msg,len);	//data
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	3304      	adds	r3, #4
 80012c0:	7e3a      	ldrb	r2, [r7, #24]
 80012c2:	4639      	mov	r1, r7
 80012c4:	4618      	mov	r0, r3
 80012c6:	f00c fb64 	bl	800d992 <memcpy>

	sendCan(0x600+Node_id,buf,8,0);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80012d0:	4618      	mov	r0, r3
 80012d2:	f107 0108 	add.w	r1, r7, #8
 80012d6:	2300      	movs	r3, #0
 80012d8:	2208      	movs	r2, #8
 80012da:	f7ff ff81 	bl	80011e0 <sendCan>
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop

080012e8 <NMT_Mode>:

void NMT_Mode(uint8_t command, uint8_t Node_id)// command 1= pre-operation, 2=operation
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[8]={0,};
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]


	if(command == 1){buf[0]=0x80;}//enter nmt pre-operational command
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d102      	bne.n	800130c <NMT_Mode+0x24>
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	723b      	strb	r3, [r7, #8]
 800130a:	e001      	b.n	8001310 <NMT_Mode+0x28>
	else{buf[0]=0x01;}//enter nmt operational command for PDO operation
 800130c:	2301      	movs	r3, #1
 800130e:	723b      	strb	r3, [r7, #8]
	buf[1]=Node_id;//node id
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	727b      	strb	r3, [r7, #9]

	sendCan(0, buf, 8, 0);
 8001314:	f107 0108 	add.w	r1, r7, #8
 8001318:	2300      	movs	r3, #0
 800131a:	2208      	movs	r2, #8
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff ff5f 	bl	80011e0 <sendCan>
}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <PDOMapping>:


int PDOMapping(uint8_t Node_id, uint16_t PDO_index, MappingPar Param, uint8_t Num_entry)//entry rr
{
 800132c:	b082      	sub	sp, #8
 800132e:	b590      	push	{r4, r7, lr}
 8001330:	b089      	sub	sp, #36	; 0x24
 8001332:	af02      	add	r7, sp, #8
 8001334:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001338:	e884 000c 	stmia.w	r4, {r2, r3}
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	460b      	mov	r3, r1
 8001342:	80bb      	strh	r3, [r7, #4]
	uint32_t tmp = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
	uint16_t tmp_TxRx = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	82fb      	strh	r3, [r7, #22]
	uint8_t type = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	757b      	strb	r3, [r7, #21]

	if(Num_entry>=5){printf("Num_entry error: %d\n", Num_entry); return 0;}
 8001350:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001354:	2b04      	cmp	r3, #4
 8001356:	d907      	bls.n	8001368 <PDOMapping+0x3c>
 8001358:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800135c:	4619      	mov	r1, r3
 800135e:	4858      	ldr	r0, [pc, #352]	; (80014c0 <PDOMapping+0x194>)
 8001360:	f00d f82c 	bl	800e3bc <iprintf>
 8001364:	2300      	movs	r3, #0
 8001366:	e0a4      	b.n	80014b2 <PDOMapping+0x186>

	if(PDO_index>=0x1600&&PDO_index<=0x17ff){tmp_TxRx=0x200+0x100*(PDO_index-0x1600); type=0xff;}
 8001368:	88bb      	ldrh	r3, [r7, #4]
 800136a:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 800136e:	d30d      	bcc.n	800138c <PDOMapping+0x60>
 8001370:	88bb      	ldrh	r3, [r7, #4]
 8001372:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001376:	d209      	bcs.n	800138c <PDOMapping+0x60>
 8001378:	88bb      	ldrh	r3, [r7, #4]
 800137a:	f5a3 53af 	sub.w	r3, r3, #5600	; 0x15e0
 800137e:	3b1e      	subs	r3, #30
 8001380:	b29b      	uxth	r3, r3
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	82fb      	strh	r3, [r7, #22]
 8001386:	23ff      	movs	r3, #255	; 0xff
 8001388:	757b      	strb	r3, [r7, #21]
 800138a:	e021      	b.n	80013d0 <PDOMapping+0xa4>
	else if(PDO_index>=0x1a00&&PDO_index<=0x1bff) {
 800138c:	88bb      	ldrh	r3, [r7, #4]
 800138e:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8001392:	d316      	bcc.n	80013c2 <PDOMapping+0x96>
 8001394:	88bb      	ldrh	r3, [r7, #4]
 8001396:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800139a:	d212      	bcs.n	80013c2 <PDOMapping+0x96>
		tmp_TxRx=0x180+0x100*(PDO_index-0x1a00);
 800139c:	88bb      	ldrh	r3, [r7, #4]
 800139e:	f5a3 53d0 	sub.w	r3, r3, #6656	; 0x1a00
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80013ac:	82fb      	strh	r3, [r7, #22]
		if(Param.option==0){type=0xfe;}
 80013ae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d102      	bne.n	80013bc <PDOMapping+0x90>
 80013b6:	23fe      	movs	r3, #254	; 0xfe
 80013b8:	757b      	strb	r3, [r7, #21]
 80013ba:	e009      	b.n	80013d0 <PDOMapping+0xa4>
		else {type=0xff;}
 80013bc:	23ff      	movs	r3, #255	; 0xff
 80013be:	757b      	strb	r3, [r7, #21]
		if(Param.option==0){type=0xfe;}
 80013c0:	e006      	b.n	80013d0 <PDOMapping+0xa4>
		}
	else {printf("PDO_index error: %d\n", PDO_index); return 0;}
 80013c2:	88bb      	ldrh	r3, [r7, #4]
 80013c4:	4619      	mov	r1, r3
 80013c6:	483f      	ldr	r0, [pc, #252]	; (80014c4 <PDOMapping+0x198>)
 80013c8:	f00c fff8 	bl	800e3bc <iprintf>
 80013cc:	2300      	movs	r3, #0
 80013ce:	e070      	b.n	80014b2 <PDOMapping+0x186>

	NMT_Mode(PRE_OPERATION, Node_id);//pre-operation mode
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	4619      	mov	r1, r3
 80013d4:	2001      	movs	r0, #1
 80013d6:	f7ff ff87 	bl	80012e8 <NMT_Mode>

	for(int i=0;i<Num_entry;i++) {//clear rpdo0 mapping, 0x60ff(index) 03(subindex) 20(length)
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	e05d      	b.n	800149c <PDOMapping+0x170>
		SDOMsg(Node_id, PDO_index, 0, 0, 1);//clear rpdo0 mapping
 80013e0:	88b9      	ldrh	r1, [r7, #4]
 80013e2:	79f8      	ldrb	r0, [r7, #7]
 80013e4:	2301      	movs	r3, #1
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2300      	movs	r3, #0
 80013ea:	2200      	movs	r2, #0
 80013ec:	f7ff ff34 	bl	8001258 <SDOMsg>
		tmp=(0x10000*Param.index[i])+(0x100* Param.subindex[i])+(Param.length[i]);
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	440a      	add	r2, r1
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	4413      	add	r3, r2
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	440a      	add	r2, r1
 8001412:	7812      	ldrb	r2, [r2, #0]
 8001414:	4413      	add	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
		SDOMsg(Node_id, PDO_index, i+1, tmp, 4);
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	3301      	adds	r3, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	88b9      	ldrh	r1, [r7, #4]
 8001422:	79f8      	ldrb	r0, [r7, #7]
 8001424:	2304      	movs	r3, #4
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f7ff ff15 	bl	8001258 <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 1, tmp_TxRx+Node_id, 4);//cob-id??
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001434:	b299      	uxth	r1, r3
 8001436:	8afa      	ldrh	r2, [r7, #22]
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4413      	add	r3, r2
 800143c:	461a      	mov	r2, r3
 800143e:	79f8      	ldrb	r0, [r7, #7]
 8001440:	2304      	movs	r3, #4
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	4613      	mov	r3, r2
 8001446:	2201      	movs	r2, #1
 8001448:	f7ff ff06 	bl	8001258 <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 2, type, 1);//transmission type, fix asynchronous with 0xff
 800144c:	88bb      	ldrh	r3, [r7, #4]
 800144e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001452:	b299      	uxth	r1, r3
 8001454:	7d7b      	ldrb	r3, [r7, #21]
 8001456:	79f8      	ldrb	r0, [r7, #7]
 8001458:	2201      	movs	r2, #1
 800145a:	9200      	str	r2, [sp, #0]
 800145c:	2202      	movs	r2, #2
 800145e:	f7ff fefb 	bl	8001258 <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 3+(Param.option*2), Param.option_time, 2);//not necessary 3= inhibit mode, 5=event timer mode
 8001462:	88bb      	ldrh	r3, [r7, #4]
 8001464:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001468:	b299      	uxth	r1, r3
 800146a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	b2db      	uxtb	r3, r3
 8001472:	3303      	adds	r3, #3
 8001474:	b2da      	uxtb	r2, r3
 8001476:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001478:	461c      	mov	r4, r3
 800147a:	79f8      	ldrb	r0, [r7, #7]
 800147c:	2302      	movs	r3, #2
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	4623      	mov	r3, r4
 8001482:	f7ff fee9 	bl	8001258 <SDOMsg>
		SDOMsg(Node_id, PDO_index, 0, 0x01, 1);//set rpdo0 mapping
 8001486:	88b9      	ldrh	r1, [r7, #4]
 8001488:	79f8      	ldrb	r0, [r7, #7]
 800148a:	2301      	movs	r3, #1
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2301      	movs	r3, #1
 8001490:	2200      	movs	r2, #0
 8001492:	f7ff fee1 	bl	8001258 <SDOMsg>
	for(int i=0;i<Num_entry;i++) {//clear rpdo0 mapping, 0x60ff(index) 03(subindex) 20(length)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	3301      	adds	r3, #1
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	db9c      	blt.n	80013e0 <PDOMapping+0xb4>
	}

	NMT_Mode(OPERATION, Node_id);//operation mode
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4619      	mov	r1, r3
 80014aa:	2002      	movs	r0, #2
 80014ac:	f7ff ff1c 	bl	80012e8 <NMT_Mode>

	return 1;
 80014b0:	2301      	movs	r3, #1
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80014bc:	b002      	add	sp, #8
 80014be:	4770      	bx	lr
 80014c0:	08011a10 	.word	0x08011a10
 80014c4:	08011a28 	.word	0x08011a28

080014c8 <PDOMsg>:

void PDOMsg(uint8_t Node_id, uint16_t PDO_index, uint8_t *buf, uint8_t length)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	603a      	str	r2, [r7, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
 80014d6:	460b      	mov	r3, r1
 80014d8:	80bb      	strh	r3, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	71bb      	strb	r3, [r7, #6]
	sendCan((PDO_index-0x1800)+Node_id,buf,length,0);
 80014de:	88bb      	ldrh	r3, [r7, #4]
 80014e0:	f5a3 52c0 	sub.w	r2, r3, #6144	; 0x1800
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	4413      	add	r3, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	79ba      	ldrb	r2, [r7, #6]
 80014ec:	2300      	movs	r3, #0
 80014ee:	6839      	ldr	r1, [r7, #0]
 80014f0:	f7ff fe76 	bl	80011e0 <sendCan>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <Vel_PDOMsg>:

void Vel_PDOMsg(uint8_t Node_id, uint16_t PDO_index, uint16_t vel_left, uint16_t vel_right)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	4604      	mov	r4, r0
 8001504:	4608      	mov	r0, r1
 8001506:	4611      	mov	r1, r2
 8001508:	461a      	mov	r2, r3
 800150a:	4623      	mov	r3, r4
 800150c:	71fb      	strb	r3, [r7, #7]
 800150e:	4603      	mov	r3, r0
 8001510:	80bb      	strh	r3, [r7, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	807b      	strh	r3, [r7, #2]
 8001516:	4613      	mov	r3, r2
 8001518:	803b      	strh	r3, [r7, #0]
	uint8_t buf[8];

	buf[0]=(uint8_t)vel_left;
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	723b      	strb	r3, [r7, #8]
	buf[1]=(uint8_t)(vel_left>>8);
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	b29b      	uxth	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	727b      	strb	r3, [r7, #9]
	buf[2]=(uint8_t)vel_right;
 800152a:	883b      	ldrh	r3, [r7, #0]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	72bb      	strb	r3, [r7, #10]
	buf[3]=(uint8_t)(vel_right>>8);
 8001530:	883b      	ldrh	r3, [r7, #0]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	b29b      	uxth	r3, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	72fb      	strb	r3, [r7, #11]

	PDOMsg(Node_id, PDO_index, buf, 4);
 800153a:	f107 0208 	add.w	r2, r7, #8
 800153e:	88b9      	ldrh	r1, [r7, #4]
 8001540:	79f8      	ldrb	r0, [r7, #7]
 8001542:	2304      	movs	r3, #4
 8001544:	f7ff ffc0 	bl	80014c8 <PDOMsg>
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bd90      	pop	{r4, r7, pc}

08001550 <Tor_OnOff>:


void Tor_OnOff(uint8_t OnOff)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af02      	add	r7, sp, #8
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
	if(OnOff==1){
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d139      	bne.n	80015d4 <Tor_OnOff+0x84>
		for(int i=0;i<2;i++){
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	e032      	b.n	80015cc <Tor_OnOff+0x7c>
			SDOMsg(i+1,0x6040, 0x0, 0x00, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	3301      	adds	r3, #1
 800156c:	b2d8      	uxtb	r0, r3
 800156e:	2302      	movs	r3, #2
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2300      	movs	r3, #0
 8001574:	2200      	movs	r2, #0
 8001576:	f246 0140 	movw	r1, #24640	; 0x6040
 800157a:	f7ff fe6d 	bl	8001258 <SDOMsg>
			SDOMsg(i+1,0x6040, 0x0, 0x06, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 1: At this time, the low 4-bit status of 6041 is 0001, motor is released;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	3301      	adds	r3, #1
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	2302      	movs	r3, #2
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2306      	movs	r3, #6
 800158c:	2200      	movs	r2, #0
 800158e:	f246 0140 	movw	r1, #24640	; 0x6040
 8001592:	f7ff fe61 	bl	8001258 <SDOMsg>
			SDOMsg(i+1,0x6040, 0x0, 0x07, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 2: At this time, the low 4-bit status of 6041 is 0011, motor is enabled;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	3301      	adds	r3, #1
 800159c:	b2d8      	uxtb	r0, r3
 800159e:	2302      	movs	r3, #2
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2307      	movs	r3, #7
 80015a4:	2200      	movs	r2, #0
 80015a6:	f246 0140 	movw	r1, #24640	; 0x6040
 80015aa:	f7ff fe55 	bl	8001258 <SDOMsg>
			SDOMsg(i+1,0x6040, 0x0, 0x0f, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 3: At this time, the low 4-bit status of 6041 is 0111, motor is enabled;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	3301      	adds	r3, #1
 80015b4:	b2d8      	uxtb	r0, r3
 80015b6:	2302      	movs	r3, #2
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	230f      	movs	r3, #15
 80015bc:	2200      	movs	r2, #0
 80015be:	f246 0140 	movw	r1, #24640	; 0x6040
 80015c2:	f7ff fe49 	bl	8001258 <SDOMsg>
		for(int i=0;i<2;i++){
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3301      	adds	r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	ddc9      	ble.n	8001566 <Tor_OnOff+0x16>
		}
	}
	else{for(int i=0;i<2;i++){SDOMsg(i+1,0x6040, 0x0, 0x00, 2);}}//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
}
 80015d2:	e014      	b.n	80015fe <Tor_OnOff+0xae>
	else{for(int i=0;i<2;i++){SDOMsg(i+1,0x6040, 0x0, 0x00, 2);}}//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	e00e      	b.n	80015f8 <Tor_OnOff+0xa8>
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	b2d8      	uxtb	r0, r3
 80015e2:	2302      	movs	r3, #2
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2300      	movs	r3, #0
 80015e8:	2200      	movs	r2, #0
 80015ea:	f246 0140 	movw	r1, #24640	; 0x6040
 80015ee:	f7ff fe33 	bl	8001258 <SDOMsg>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	3301      	adds	r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	dded      	ble.n	80015da <Tor_OnOff+0x8a>
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Get RX message */
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001612:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001614:	2100      	movs	r1, #0
 8001616:	480c      	ldr	r0, [pc, #48]	; (8001648 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001618:	f003 fa2c 	bl	8004a74 <HAL_CAN_GetRxMessage>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d000      	beq.n	8001624 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 8001622:	e7fe      	b.n	8001622 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
//	osDelay(10);
//	printf("g_uCAN_Rx_Data: %x %x %x %x %x %x %x %x \n", g_uCAN_Rx_Data[0], g_uCAN_Rx_Data[1], g_uCAN_Rx_Data[2], g_uCAN_Rx_Data[3],
//													g_uCAN_Rx_Data[4], g_uCAN_Rx_Data[5], g_uCAN_Rx_Data[6], g_uCAN_Rx_Data[7]);
	printf("%d: RF\n", osKernelGetTickCount());
 8001624:	f008 f8b0 	bl	8009788 <osKernelGetTickCount>
 8001628:	4603      	mov	r3, r0
 800162a:	4619      	mov	r1, r3
 800162c:	4807      	ldr	r0, [pc, #28]	; (800164c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800162e:	f00c fec5 	bl	800e3bc <iprintf>
	FLAG_RxCplt=1;
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000788 	.word	0x20000788
 8001644:	20000790 	.word	0x20000790
 8001648:	200007d4 	.word	0x200007d4
 800164c:	08011a40 	.word	0x08011a40
 8001650:	20000784 	.word	0x20000784

08001654 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <MX_DMA_Init+0x78>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <MX_DMA_Init+0x78>)
 8001664:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <MX_DMA_Init+0x78>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_DMA_Init+0x78>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a13      	ldr	r2, [pc, #76]	; (80016cc <MX_DMA_Init+0x78>)
 8001680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_DMA_Init+0x78>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2105      	movs	r1, #5
 8001696:	200e      	movs	r0, #14
 8001698:	f003 fe30 	bl	80052fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800169c:	200e      	movs	r0, #14
 800169e:	f003 fe49 	bl	8005334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2105      	movs	r1, #5
 80016a6:	2011      	movs	r0, #17
 80016a8:	f003 fe28 	bl	80052fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016ac:	2011      	movs	r0, #17
 80016ae:	f003 fe41 	bl	8005334 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2105      	movs	r1, #5
 80016b6:	203a      	movs	r0, #58	; 0x3a
 80016b8:	f003 fe20 	bl	80052fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80016bc:	203a      	movs	r0, #58	; 0x3a
 80016be:	f003 fe39 	bl	8005334 <HAL_NVIC_EnableIRQ>

}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <fanInit>:

#include <fan.h>


void fanInit(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
    //HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_1);//stm32f103
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016d4:	2100      	movs	r1, #0
 80016d6:	4802      	ldr	r0, [pc, #8]	; (80016e0 <fanInit+0x10>)
 80016d8:	f005 faba 	bl	8006c50 <HAL_TIM_PWM_Start>
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000918 	.word	0x20000918

080016e4 <fanOn>:

void fanOn(uint8_t duty)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
	if(duty>=100){duty = 100;}
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	2b63      	cmp	r3, #99	; 0x63
 80016f2:	d901      	bls.n	80016f8 <fanOn+0x14>
 80016f4:	2364      	movs	r3, #100	; 0x64
 80016f6:	71fb      	strb	r3, [r7, #7]

	if(duty==0){htim1.Instance->CCR1 = 0;}
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d104      	bne.n	8001708 <fanOn+0x24>
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <fanOn+0x38>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2200      	movs	r2, #0
 8001704:	635a      	str	r2, [r3, #52]	; 0x34
	else {htim1.Instance->CCR1 = duty;}//write gogo
}
 8001706:	e003      	b.n	8001710 <fanOn+0x2c>
	else {htim1.Instance->CCR1 = duty;}//write gogo
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <fanOn+0x38>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	79fa      	ldrb	r2, [r7, #7]
 800170e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	20000918 	.word	0x20000918

08001720 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001724:	f3bf 8f4f 	dsb	sy
}
 8001728:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <__NVIC_SystemReset+0x24>)
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001732:	4904      	ldr	r1, [pc, #16]	; (8001744 <__NVIC_SystemReset+0x24>)
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <__NVIC_SystemReset+0x28>)
 8001736:	4313      	orrs	r3, r2
 8001738:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800173a:	f3bf 8f4f 	dsb	sy
}
 800173e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <__NVIC_SystemReset+0x20>
 8001744:	e000ed00 	.word	0xe000ed00
 8001748:	05fa0004 	.word	0x05fa0004
 800174c:	00000000 	.word	0x00000000

08001750 <rad2deg>:
//{
//
//}

int16_t rad2deg(double radian)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)(radian*180/MATH_PI);
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <rad2deg+0x50>)
 8001760:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001764:	f7fe ff48 	bl	80005f8 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	a309      	add	r3, pc, #36	; (adr r3, 8001798 <rad2deg+0x48>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7ff f869 	bl	800084c <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f7ff f9e9 	bl	8000b58 <__aeabi_d2iz>
 8001786:	4603      	mov	r3, r0
 8001788:	b21b      	sxth	r3, r3
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	f3af 8000 	nop.w
 8001798:	54442d18 	.word	0x54442d18
 800179c:	400921fb 	.word	0x400921fb
 80017a0:	40668000 	.word	0x40668000

080017a4 <HAL_GPIO_EXTI_Callback>:
	//ModeD//for stop
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	80fb      	strh	r3, [r7, #6]


    if(GPIO_Pin == PS_SIG1_Pin) {
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d109      	bne.n	80017c8 <HAL_GPIO_EXTI_Callback+0x24>
    	PS_SIGx_Pin |= 0b00000001;
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <HAL_GPIO_EXTI_Callback+0x7c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_GPIO_EXTI_Callback+0x7c>)
 80017c0:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG1_Pin.\n");
 80017c2:	4818      	ldr	r0, [pc, #96]	; (8001824 <HAL_GPIO_EXTI_Callback+0x80>)
 80017c4:	f00c fe80 	bl	800e4c8 <puts>
	}

    if(GPIO_Pin == PS_SIG2_Pin) {
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	2b20      	cmp	r3, #32
 80017cc:	d109      	bne.n	80017e2 <HAL_GPIO_EXTI_Callback+0x3e>
    	PS_SIGx_Pin |= 0b00000010;
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_GPIO_EXTI_Callback+0x7c>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	f043 0302 	orr.w	r3, r3, #2
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_GPIO_EXTI_Callback+0x7c>)
 80017da:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG2_Pin.\n");
 80017dc:	4812      	ldr	r0, [pc, #72]	; (8001828 <HAL_GPIO_EXTI_Callback+0x84>)
 80017de:	f00c fe73 	bl	800e4c8 <puts>
    }

    if(GPIO_Pin == PS_SIG3_Pin) {
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	2b40      	cmp	r3, #64	; 0x40
 80017e6:	d109      	bne.n	80017fc <HAL_GPIO_EXTI_Callback+0x58>
    	PS_SIGx_Pin |= 0b00000100;
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <HAL_GPIO_EXTI_Callback+0x7c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_GPIO_EXTI_Callback+0x7c>)
 80017f4:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG3_Pin.\n");
 80017f6:	480d      	ldr	r0, [pc, #52]	; (800182c <HAL_GPIO_EXTI_Callback+0x88>)
 80017f8:	f00c fe66 	bl	800e4c8 <puts>
    }

    if(GPIO_Pin == PS_SIG4_Pin) {
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	2b80      	cmp	r3, #128	; 0x80
 8001800:	d109      	bne.n	8001816 <HAL_GPIO_EXTI_Callback+0x72>
    	PS_SIGx_Pin |= 0b00001000;
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	f043 0308 	orr.w	r3, r3, #8
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <HAL_GPIO_EXTI_Callback+0x7c>)
 800180e:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG4_Pin.\n");
 8001810:	4807      	ldr	r0, [pc, #28]	; (8001830 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001812:	f00c fe59 	bl	800e4c8 <puts>
    }
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200007fc 	.word	0x200007fc
 8001824:	08011ad0 	.word	0x08011ad0
 8001828:	08011af0 	.word	0x08011af0
 800182c:	08011b10 	.word	0x08011b10
 8001830:	08011b30 	.word	0x08011b30

08001834 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of canmsg */
  canmsgHandle = osMutexNew(&canmsg_attributes);
 8001838:	4836      	ldr	r0, [pc, #216]	; (8001914 <MX_FREERTOS_Init+0xe0>)
 800183a:	f008 fa45 	bl	8009cc8 <osMutexNew>
 800183e:	4603      	mov	r3, r0
 8001840:	4a35      	ldr	r2, [pc, #212]	; (8001918 <MX_FREERTOS_Init+0xe4>)
 8001842:	6013      	str	r3, [r2, #0]

  /* creation of Degmsg */
  DegmsgHandle = osMutexNew(&Degmsg_attributes);
 8001844:	4835      	ldr	r0, [pc, #212]	; (800191c <MX_FREERTOS_Init+0xe8>)
 8001846:	f008 fa3f 	bl	8009cc8 <osMutexNew>
 800184a:	4603      	mov	r3, r0
 800184c:	4a34      	ldr	r2, [pc, #208]	; (8001920 <MX_FREERTOS_Init+0xec>)
 800184e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PSx_SIG_BinSem */
  PSx_SIG_BinSemHandle = osSemaphoreNew(1, 1, &PSx_SIG_BinSem_attributes);
 8001850:	4a34      	ldr	r2, [pc, #208]	; (8001924 <MX_FREERTOS_Init+0xf0>)
 8001852:	2101      	movs	r1, #1
 8001854:	2001      	movs	r0, #1
 8001856:	f008 fb45 	bl	8009ee4 <osSemaphoreNew>
 800185a:	4603      	mov	r3, r0
 800185c:	4a32      	ldr	r2, [pc, #200]	; (8001928 <MX_FREERTOS_Init+0xf4>)
 800185e:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of VelStopTimer */
  VelStopTimerHandle = osTimerNew(VelStopTimerCallback, osTimerPeriodic, NULL, &VelStopTimer_attributes);
 8001860:	4b32      	ldr	r3, [pc, #200]	; (800192c <MX_FREERTOS_Init+0xf8>)
 8001862:	2200      	movs	r2, #0
 8001864:	2101      	movs	r1, #1
 8001866:	4832      	ldr	r0, [pc, #200]	; (8001930 <MX_FREERTOS_Init+0xfc>)
 8001868:	f008 f984 	bl	8009b74 <osTimerNew>
 800186c:	4603      	mov	r3, r0
 800186e:	4a31      	ldr	r2, [pc, #196]	; (8001934 <MX_FREERTOS_Init+0x100>)
 8001870:	6013      	str	r3, [r2, #0]

  /* creation of EndModeDTimer */
  EndModeDTimerHandle = osTimerNew(EndModeDTimerCallback, osTimerOnce, NULL, &EndModeDTimer_attributes);
 8001872:	4b31      	ldr	r3, [pc, #196]	; (8001938 <MX_FREERTOS_Init+0x104>)
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	4830      	ldr	r0, [pc, #192]	; (800193c <MX_FREERTOS_Init+0x108>)
 800187a:	f008 f97b 	bl	8009b74 <osTimerNew>
 800187e:	4603      	mov	r3, r0
 8001880:	4a2f      	ldr	r2, [pc, #188]	; (8001940 <MX_FREERTOS_Init+0x10c>)
 8001882:	6013      	str	r3, [r2, #0]

  /* creation of SendCanTimer */
  SendCanTimerHandle = osTimerNew(SendCanTimerCallback, osTimerPeriodic, NULL, &SendCanTimer_attributes);
 8001884:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <MX_FREERTOS_Init+0x110>)
 8001886:	2200      	movs	r2, #0
 8001888:	2101      	movs	r1, #1
 800188a:	482f      	ldr	r0, [pc, #188]	; (8001948 <MX_FREERTOS_Init+0x114>)
 800188c:	f008 f972 	bl	8009b74 <osTimerNew>
 8001890:	4603      	mov	r3, r0
 8001892:	4a2e      	ldr	r2, [pc, #184]	; (800194c <MX_FREERTOS_Init+0x118>)
 8001894:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(VelStopTimerHandle, 1000);
 8001896:	4b27      	ldr	r3, [pc, #156]	; (8001934 <MX_FREERTOS_Init+0x100>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800189e:	4618      	mov	r0, r3
 80018a0:	f008 f9e4 	bl	8009c6c <osTimerStart>
  osTimerStart(SendCanTimerHandle, 100);
 80018a4:	4b29      	ldr	r3, [pc, #164]	; (800194c <MX_FREERTOS_Init+0x118>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2164      	movs	r1, #100	; 0x64
 80018aa:	4618      	mov	r0, r3
 80018ac:	f008 f9de 	bl	8009c6c <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80018b0:	4a27      	ldr	r2, [pc, #156]	; (8001950 <MX_FREERTOS_Init+0x11c>)
 80018b2:	2100      	movs	r1, #0
 80018b4:	4827      	ldr	r0, [pc, #156]	; (8001954 <MX_FREERTOS_Init+0x120>)
 80018b6:	f007 ff7c 	bl	80097b2 <osThreadNew>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4a26      	ldr	r2, [pc, #152]	; (8001958 <MX_FREERTOS_Init+0x124>)
 80018be:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(StartTask02, NULL, &canTask_attributes);
 80018c0:	4a26      	ldr	r2, [pc, #152]	; (800195c <MX_FREERTOS_Init+0x128>)
 80018c2:	2100      	movs	r1, #0
 80018c4:	4826      	ldr	r0, [pc, #152]	; (8001960 <MX_FREERTOS_Init+0x12c>)
 80018c6:	f007 ff74 	bl	80097b2 <osThreadNew>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a25      	ldr	r2, [pc, #148]	; (8001964 <MX_FREERTOS_Init+0x130>)
 80018ce:	6013      	str	r3, [r2, #0]

  /* creation of UartComm */
  UartCommHandle = osThreadNew(StartTask03, NULL, &UartComm_attributes);
 80018d0:	4a25      	ldr	r2, [pc, #148]	; (8001968 <MX_FREERTOS_Init+0x134>)
 80018d2:	2100      	movs	r1, #0
 80018d4:	4825      	ldr	r0, [pc, #148]	; (800196c <MX_FREERTOS_Init+0x138>)
 80018d6:	f007 ff6c 	bl	80097b2 <osThreadNew>
 80018da:	4603      	mov	r3, r0
 80018dc:	4a24      	ldr	r2, [pc, #144]	; (8001970 <MX_FREERTOS_Init+0x13c>)
 80018de:	6013      	str	r3, [r2, #0]

  /* creation of NP_LED */
  NP_LEDHandle = osThreadNew(StartTask04, NULL, &NP_LED_attributes);
 80018e0:	4a24      	ldr	r2, [pc, #144]	; (8001974 <MX_FREERTOS_Init+0x140>)
 80018e2:	2100      	movs	r1, #0
 80018e4:	4824      	ldr	r0, [pc, #144]	; (8001978 <MX_FREERTOS_Init+0x144>)
 80018e6:	f007 ff64 	bl	80097b2 <osThreadNew>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4a23      	ldr	r2, [pc, #140]	; (800197c <MX_FREERTOS_Init+0x148>)
 80018ee:	6013      	str	r3, [r2, #0]

  /* creation of fancntl */
  fancntlHandle = osThreadNew(StartTask05, NULL, &fancntl_attributes);
 80018f0:	4a23      	ldr	r2, [pc, #140]	; (8001980 <MX_FREERTOS_Init+0x14c>)
 80018f2:	2100      	movs	r1, #0
 80018f4:	4823      	ldr	r0, [pc, #140]	; (8001984 <MX_FREERTOS_Init+0x150>)
 80018f6:	f007 ff5c 	bl	80097b2 <osThreadNew>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a22      	ldr	r2, [pc, #136]	; (8001988 <MX_FREERTOS_Init+0x154>)
 80018fe:	6013      	str	r3, [r2, #0]

  /* creation of IRQ_PSx */
  IRQ_PSxHandle = osThreadNew(StartTask06, NULL, &IRQ_PSx_attributes);
 8001900:	4a22      	ldr	r2, [pc, #136]	; (800198c <MX_FREERTOS_Init+0x158>)
 8001902:	2100      	movs	r1, #0
 8001904:	4822      	ldr	r0, [pc, #136]	; (8001990 <MX_FREERTOS_Init+0x15c>)
 8001906:	f007 ff54 	bl	80097b2 <osThreadNew>
 800190a:	4603      	mov	r3, r0
 800190c:	4a21      	ldr	r2, [pc, #132]	; (8001994 <MX_FREERTOS_Init+0x160>)
 800190e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	08011ec0 	.word	0x08011ec0
 8001918:	20000858 	.word	0x20000858
 800191c:	08011ed0 	.word	0x08011ed0
 8001920:	2000085c 	.word	0x2000085c
 8001924:	08011ee0 	.word	0x08011ee0
 8001928:	20000860 	.word	0x20000860
 800192c:	08011e90 	.word	0x08011e90
 8001930:	08002f95 	.word	0x08002f95
 8001934:	2000084c 	.word	0x2000084c
 8001938:	08011ea0 	.word	0x08011ea0
 800193c:	08002fcd 	.word	0x08002fcd
 8001940:	20000850 	.word	0x20000850
 8001944:	08011eb0 	.word	0x08011eb0
 8001948:	08002ff5 	.word	0x08002ff5
 800194c:	20000854 	.word	0x20000854
 8001950:	08011db8 	.word	0x08011db8
 8001954:	08001999 	.word	0x08001999
 8001958:	20000834 	.word	0x20000834
 800195c:	08011ddc 	.word	0x08011ddc
 8001960:	080019c9 	.word	0x080019c9
 8001964:	20000838 	.word	0x20000838
 8001968:	08011e00 	.word	0x08011e00
 800196c:	08002369 	.word	0x08002369
 8001970:	2000083c 	.word	0x2000083c
 8001974:	08011e24 	.word	0x08011e24
 8001978:	08002a05 	.word	0x08002a05
 800197c:	20000840 	.word	0x20000840
 8001980:	08011e48 	.word	0x08011e48
 8001984:	08002dd1 	.word	0x08002dd1
 8001988:	20000844 	.word	0x20000844
 800198c:	08011e6c 	.word	0x08011e6c
 8001990:	08002df9 	.word	0x08002df9
 8001994:	20000848 	.word	0x20000848

08001998 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	//StartTask01 is related gpio toggle for state check //
	uint32_t lastTime = osKernelGetTickCount();
 80019a0:	f007 fef2 	bl	8009788 <osKernelGetTickCount>
 80019a4:	60f8      	str	r0, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STATUS_LED;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80019ac:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f008 f89d 	bl	8009aee <osDelayUntil>


	//printf("uxHighWaterMark: %d\n", uxTaskGetStackHighWaterMark( NULL ));

	HAL_GPIO_TogglePin(testled_GPIO_Port, testled_Pin);
 80019b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b8:	4801      	ldr	r0, [pc, #4]	; (80019c0 <StartDefaultTask+0x28>)
 80019ba:	f004 faa6 	bl	8005f0a <HAL_GPIO_TogglePin>
	lastTime += PERIOD_STATUS_LED;
 80019be:	e7f2      	b.n	80019a6 <StartDefaultTask+0xe>
 80019c0:	40020800 	.word	0x40020800
 80019c4:	00000000 	.word	0x00000000

080019c8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80019c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019cc:	b08e      	sub	sp, #56	; 0x38
 80019ce:	af04      	add	r7, sp, #16
 80019d0:	6078      	str	r0, [r7, #4]
	//StartTask02 is related CAN communication. //
//	int16_t Tar_cmd_v_x = 0;
//	int16_t Tar_cmd_v_y = 0;
//	int16_t Tar_cmd_w = 0;

	int16_t Tmp_cmd_FL = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t Tmp_cmd_FR = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	827b      	strh	r3, [r7, #18]
	int16_t Tmp_cmd_RL= 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	823b      	strh	r3, [r7, #16]
	int16_t Tmp_cmd_RR = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	81fb      	strh	r3, [r7, #14]

	uint8_t torqueSW = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	737b      	strb	r3, [r7, #13]
	uint8_t Oncetimer = 1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	733b      	strb	r3, [r7, #12]
	uint8_t tempflag = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	72fb      	strb	r3, [r7, #11]
	//////////////////////////////
	uint32_t lastTime;



	osDelay(3000);//must delay for nmt from motor driver
 80019ee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019f2:	f008 f861 	bl	8009ab8 <osDelay>
	while(!(STinitdone)){osDelay(100);;}
 80019f6:	e002      	b.n	80019fe <StartTask02+0x36>
 80019f8:	2064      	movs	r0, #100	; 0x64
 80019fa:	f008 f85d 	bl	8009ab8 <osDelay>
 80019fe:	4ba7      	ldr	r3, [pc, #668]	; (8001c9c <StartTask02+0x2d4>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f8      	beq.n	80019f8 <StartTask02+0x30>
	//CanInit(0x280,0xFFC,STDID);

	//CanInit(FILTERID,MASKID,STDID);//must be to use it
	CanInit(0,0,STDID);//must be to use it
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f7ff fba0 	bl	8001150 <CanInit>

//	CanInit2(0xf1a,0xFFF,EXTID);
//	CanInit(FILTERID,MASKID,EXTID);//reservation
	//CanInit(0,0,EXTID);
	CAN_enableirq();
 8001a10:	f7ff fb96 	bl	8001140 <CAN_enableirq>


	PDOMapping(1, RxPDO0, vel_RxPDO0, 1);
 8001a14:	4ba2      	ldr	r3, [pc, #648]	; (8001ca0 <StartTask02+0x2d8>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	9203      	str	r2, [sp, #12]
 8001a1a:	466c      	mov	r4, sp
 8001a1c:	f103 0208 	add.w	r2, r3, #8
 8001a20:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a26:	cb0c      	ldmia	r3, {r2, r3}
 8001a28:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f7ff fc7d 	bl	800132c <PDOMapping>
	PDOMapping(2, RxPDO0, vel_RxPDO0, 1);
 8001a32:	4b9b      	ldr	r3, [pc, #620]	; (8001ca0 <StartTask02+0x2d8>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	9203      	str	r2, [sp, #12]
 8001a38:	466c      	mov	r4, sp
 8001a3a:	f103 0208 	add.w	r2, r3, #8
 8001a3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a44:	cb0c      	ldmia	r3, {r2, r3}
 8001a46:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f7ff fc6e 	bl	800132c <PDOMapping>

	PDOMapping(1, TxPDO0, vel_TxPDO0, 1);//event time mode 100ms
 8001a50:	4b94      	ldr	r3, [pc, #592]	; (8001ca4 <StartTask02+0x2dc>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	9203      	str	r2, [sp, #12]
 8001a56:	466c      	mov	r4, sp
 8001a58:	f103 0208 	add.w	r2, r3, #8
 8001a5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a62:	cb0c      	ldmia	r3, {r2, r3}
 8001a64:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8001a68:	2001      	movs	r0, #1
 8001a6a:	f7ff fc5f 	bl	800132c <PDOMapping>
	PDOMapping(2, TxPDO0, vel_TxPDO0, 1);//event time mode
 8001a6e:	4b8d      	ldr	r3, [pc, #564]	; (8001ca4 <StartTask02+0x2dc>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	9203      	str	r2, [sp, #12]
 8001a74:	466c      	mov	r4, sp
 8001a76:	f103 0208 	add.w	r2, r3, #8
 8001a7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a80:	cb0c      	ldmia	r3, {r2, r3}
 8001a82:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8001a86:	2002      	movs	r0, #2
 8001a88:	f7ff fc50 	bl	800132c <PDOMapping>
	PDOMapping(1, TxPDO1, vel_TxPDO1, 1);//inhibit mode 100ms
 8001a8c:	4b86      	ldr	r3, [pc, #536]	; (8001ca8 <StartTask02+0x2e0>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	9203      	str	r2, [sp, #12]
 8001a92:	466c      	mov	r4, sp
 8001a94:	f103 0208 	add.w	r2, r3, #8
 8001a98:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a9e:	cb0c      	ldmia	r3, {r2, r3}
 8001aa0:	f641 2101 	movw	r1, #6657	; 0x1a01
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f7ff fc41 	bl	800132c <PDOMapping>
	PDOMapping(2, TxPDO1, vel_TxPDO1, 1);//inhibit mode
 8001aaa:	4b7f      	ldr	r3, [pc, #508]	; (8001ca8 <StartTask02+0x2e0>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	9203      	str	r2, [sp, #12]
 8001ab0:	466c      	mov	r4, sp
 8001ab2:	f103 0208 	add.w	r2, r3, #8
 8001ab6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ab8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001abc:	cb0c      	ldmia	r3, {r2, r3}
 8001abe:	f641 2101 	movw	r1, #6657	; 0x1a01
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	f7ff fc32 	bl	800132c <PDOMapping>

	for(int i=0;i<2;i++){
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	e029      	b.n	8001b22 <StartTask02+0x15a>
		SDOMsg(i+1,0x2010, 0x0, 0x01, 1);//Node_id, index,  subindex,  msg,  len//save eeprom
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	b2d8      	uxtb	r0, r3
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2301      	movs	r3, #1
 8001adc:	2200      	movs	r2, #0
 8001ade:	f242 0110 	movw	r1, #8208	; 0x2010
 8001ae2:	f7ff fbb9 	bl	8001258 <SDOMsg>
		SDOMsg(i+1,0x6060, 0x0, 0x03, 1);//Node_id, index,  subindex,  msg,  len//3: Profile velocity mode;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	3301      	adds	r3, #1
 8001aec:	b2d8      	uxtb	r0, r3
 8001aee:	2301      	movs	r3, #1
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2303      	movs	r3, #3
 8001af4:	2200      	movs	r2, #0
 8001af6:	f246 0160 	movw	r1, #24672	; 0x6060
 8001afa:	f7ff fbad 	bl	8001258 <SDOMsg>
		Tor_OnOff(TORQUEON);
 8001afe:	2001      	movs	r0, #1
 8001b00:	f7ff fd26 	bl	8001550 <Tor_OnOff>
		SDOMsg(i+1,0x200f, 0x0, 0x01, 2);//Node_id, index,  subindex,  msg,  len//1e: Synchronization control
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	b2d8      	uxtb	r0, r3
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	2301      	movs	r3, #1
 8001b12:	2200      	movs	r2, #0
 8001b14:	f242 010f 	movw	r1, #8207	; 0x200f
 8001b18:	f7ff fb9e 	bl	8001258 <SDOMsg>
	for(int i=0;i<2;i++){
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	ddd2      	ble.n	8001ace <StartTask02+0x106>
	}

  /* Infinite loop */

	lastTime = osKernelGetTickCount ();
 8001b28:	f007 fe2e 	bl	8009788 <osKernelGetTickCount>
 8001b2c:	6238      	str	r0, [r7, #32]
  for(;;)
  {

	lastTime += PERIOD_CANCOMM;;
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	330a      	adds	r3, #10
 8001b32:	623b      	str	r3, [r7, #32]
	osDelayUntil(lastTime);
 8001b34:	6a38      	ldr	r0, [r7, #32]
 8001b36:	f007 ffda 	bl	8009aee <osDelayUntil>
	//osDelay(10);
	printf("%d: t02\n", osKernelGetTickCount());
 8001b3a:	f007 fe25 	bl	8009788 <osKernelGetTickCount>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4619      	mov	r1, r3
 8001b42:	485a      	ldr	r0, [pc, #360]	; (8001cac <StartTask02+0x2e4>)
 8001b44:	f00c fc3a 	bl	800e3bc <iprintf>

	if(FLAG_RxCplt>0)	//real time, check stdid, extid
 8001b48:	4b59      	ldr	r3, [pc, #356]	; (8001cb0 <StartTask02+0x2e8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80f6 	beq.w	8001d3e <StartTask02+0x376>
	{
		for(int i=0;i<8;i++){canbuf[i] = g_uCAN_Rx_Data[i];}
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
 8001b56:	e00c      	b.n	8001b72 <StartTask02+0x1aa>
 8001b58:	4a56      	ldr	r2, [pc, #344]	; (8001cb4 <StartTask02+0x2ec>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f993 1000 	ldrsb.w	r1, [r3]
 8001b62:	4a55      	ldr	r2, [pc, #340]	; (8001cb8 <StartTask02+0x2f0>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	4413      	add	r3, r2
 8001b68:	460a      	mov	r2, r1
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2b07      	cmp	r3, #7
 8001b76:	ddef      	ble.n	8001b58 <StartTask02+0x190>
	//	printf("canbuf: %d %d %d %d %d %d %d %d\n", canbuf[0], canbuf[1], canbuf[2], canbuf[3], canbuf[4], canbuf[5], canbuf[6], canbuf[7]);
		FLAG_RxCplt=0;
 8001b78:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <StartTask02+0x2e8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
		if(g_tCan_Rx_Header.StdId>g_tCan_Rx_Header.ExtId){CanId = g_tCan_Rx_Header.StdId;}//�??????????체크
 8001b7e:	4b4f      	ldr	r3, [pc, #316]	; (8001cbc <StartTask02+0x2f4>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4b4e      	ldr	r3, [pc, #312]	; (8001cbc <StartTask02+0x2f4>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d904      	bls.n	8001b94 <StartTask02+0x1cc>
 8001b8a:	4b4c      	ldr	r3, [pc, #304]	; (8001cbc <StartTask02+0x2f4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a4c      	ldr	r2, [pc, #304]	; (8001cc0 <StartTask02+0x2f8>)
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e003      	b.n	8001b9c <StartTask02+0x1d4>
		else {CanId = g_tCan_Rx_Header.ExtId;}
 8001b94:	4b49      	ldr	r3, [pc, #292]	; (8001cbc <StartTask02+0x2f4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4a49      	ldr	r2, [pc, #292]	; (8001cc0 <StartTask02+0x2f8>)
 8001b9a:	6013      	str	r3, [r2, #0]
		//printf("canid: %d %d %d\n", CanId, g_tCan_Rx_Header.StdId, g_tCan_Rx_Header.ExtId);
		if((g_tCan_Rx_Header.StdId>0) && (g_tCan_Rx_Header.ExtId>0)){CanId = 0;}
 8001b9c:	4b47      	ldr	r3, [pc, #284]	; (8001cbc <StartTask02+0x2f4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <StartTask02+0x1ea>
 8001ba4:	4b45      	ldr	r3, [pc, #276]	; (8001cbc <StartTask02+0x2f4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <StartTask02+0x1ea>
 8001bac:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <StartTask02+0x2f8>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
		switch(CanId)//parse
 8001bb2:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <StartTask02+0x2f8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f240 72d2 	movw	r2, #2002	; 0x7d2
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	f000 80a5 	beq.w	8001d0a <StartTask02+0x342>
 8001bc0:	f240 72d2 	movw	r2, #2002	; 0x7d2
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	f200 80a3 	bhi.w	8001d10 <StartTask02+0x348>
 8001bca:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00c      	beq.n	8001bec <StartTask02+0x224>
 8001bd2:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	f200 809a 	bhi.w	8001d10 <StartTask02+0x348>
 8001bdc:	f240 1281 	movw	r2, #385	; 0x181
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d040      	beq.n	8001c66 <StartTask02+0x29e>
 8001be4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8001be8:	d074      	beq.n	8001cd4 <StartTask02+0x30c>
 8001bea:	e091      	b.n	8001d10 <StartTask02+0x348>
		{
			case 0x3E9:
				Tar_cmd_v_x = (((int16_t)canbuf[1])<<8) | ((int16_t)canbuf[0])&0xff;
 8001bec:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <StartTask02+0x2f0>)
 8001bee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	b21a      	sxth	r2, r3
 8001bf6:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <StartTask02+0x2f0>)
 8001bf8:	f993 3000 	ldrsb.w	r3, [r3]
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <StartTask02+0x2fc>)
 8001c08:	801a      	strh	r2, [r3, #0]
				Tar_cmd_v_y = (((int16_t)canbuf[3])<<8) | ((int16_t)canbuf[2])&0xff;
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <StartTask02+0x2f0>)
 8001c0c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <StartTask02+0x2f0>)
 8001c16:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	4313      	orrs	r3, r2
 8001c22:	b21a      	sxth	r2, r3
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <StartTask02+0x300>)
 8001c26:	801a      	strh	r2, [r3, #0]
				Tar_cmd_w = (((int16_t)canbuf[5])<<8) | ((int16_t)canbuf[4])&0xff;
 8001c28:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <StartTask02+0x2f0>)
 8001c2a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	b21a      	sxth	r2, r3
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <StartTask02+0x2f0>)
 8001c34:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b21a      	sxth	r2, r3
 8001c42:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <StartTask02+0x304>)
 8001c44:	801a      	strh	r2, [r3, #0]
				torqueSW = canbuf[6];
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <StartTask02+0x2f0>)
 8001c48:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001c4c:	737b      	strb	r3, [r7, #13]
				if(Stop_flag++>255){Stop_flag = 1;}
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <StartTask02+0x308>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	b291      	uxth	r1, r2
 8001c56:	4a1e      	ldr	r2, [pc, #120]	; (8001cd0 <StartTask02+0x308>)
 8001c58:	8011      	strh	r1, [r2, #0]
 8001c5a:	2bff      	cmp	r3, #255	; 0xff
 8001c5c:	d957      	bls.n	8001d0e <StartTask02+0x346>
 8001c5e:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <StartTask02+0x308>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	801a      	strh	r2, [r3, #0]
				break;
 8001c64:	e053      	b.n	8001d0e <StartTask02+0x346>

			case 0x181:
				Tmp_cmd_FL = (((int16_t)canbuf[1])<<8) | ((int16_t)canbuf[0])&0xff;
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <StartTask02+0x2f0>)
 8001c68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <StartTask02+0x2f0>)
 8001c72:	f993 3000 	ldrsb.w	r3, [r3]
 8001c76:	b21b      	sxth	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	84fb      	strh	r3, [r7, #38]	; 0x26
				Tmp_cmd_FR = (((int16_t)canbuf[3])<<8) | ((int16_t)canbuf[2])&0xff;
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <StartTask02+0x2f0>)
 8001c82:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	b21a      	sxth	r2, r3
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <StartTask02+0x2f0>)
 8001c8c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	b21b      	sxth	r3, r3
 8001c96:	4313      	orrs	r3, r2
 8001c98:	827b      	strh	r3, [r7, #18]
				//printf("0x181 %d\n", Tmp_cmd_FL);
				break;
 8001c9a:	e039      	b.n	8001d10 <StartTask02+0x348>
 8001c9c:	20000801 	.word	0x20000801
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	20000014 	.word	0x20000014
 8001ca8:	20000028 	.word	0x20000028
 8001cac:	08011b50 	.word	0x08011b50
 8001cb0:	20000784 	.word	0x20000784
 8001cb4:	20000788 	.word	0x20000788
 8001cb8:	20000810 	.word	0x20000810
 8001cbc:	20000790 	.word	0x20000790
 8001cc0:	20000820 	.word	0x20000820
 8001cc4:	20000808 	.word	0x20000808
 8001cc8:	2000080a 	.word	0x2000080a
 8001ccc:	2000080c 	.word	0x2000080c
 8001cd0:	20000802 	.word	0x20000802

			case 0x182:
				Tmp_cmd_RL = (((int16_t)canbuf[1])<<8) | ((int16_t)canbuf[0])&0xff;
 8001cd4:	4b56      	ldr	r3, [pc, #344]	; (8001e30 <StartTask02+0x468>)
 8001cd6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001cda:	021b      	lsls	r3, r3, #8
 8001cdc:	b21a      	sxth	r2, r3
 8001cde:	4b54      	ldr	r3, [pc, #336]	; (8001e30 <StartTask02+0x468>)
 8001ce0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	4313      	orrs	r3, r2
 8001cec:	823b      	strh	r3, [r7, #16]
				Tmp_cmd_RR = (((int16_t)canbuf[3])<<8) | ((int16_t)canbuf[2])&0xff;
 8001cee:	4b50      	ldr	r3, [pc, #320]	; (8001e30 <StartTask02+0x468>)
 8001cf0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	4b4d      	ldr	r3, [pc, #308]	; (8001e30 <StartTask02+0x468>)
 8001cfa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	b21b      	sxth	r3, r3
 8001d04:	4313      	orrs	r3, r2
 8001d06:	81fb      	strh	r3, [r7, #14]
				break;
 8001d08:	e002      	b.n	8001d10 <StartTask02+0x348>

			case 2002:

				break;
 8001d0a:	bf00      	nop
 8001d0c:	e000      	b.n	8001d10 <StartTask02+0x348>
				break;
 8001d0e:	bf00      	nop
		}

		g_tCan_Rx_Header.StdId=0;
 8001d10:	4b48      	ldr	r3, [pc, #288]	; (8001e34 <StartTask02+0x46c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
		g_tCan_Rx_Header.ExtId=0;
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <StartTask02+0x46c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
		CanId = 0;
 8001d1c:	4b46      	ldr	r3, [pc, #280]	; (8001e38 <StartTask02+0x470>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]

		for(int i=0;i<8;i++){canbuf[i]=0;}
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e007      	b.n	8001d38 <StartTask02+0x370>
 8001d28:	4a41      	ldr	r2, [pc, #260]	; (8001e30 <StartTask02+0x468>)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2b07      	cmp	r3, #7
 8001d3c:	ddf4      	ble.n	8001d28 <StartTask02+0x360>
	}

	if(Tar_cmd_w){
 8001d3e:	4b3f      	ldr	r3, [pc, #252]	; (8001e3c <StartTask02+0x474>)
 8001d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 8091 	beq.w	8001e6c <StartTask02+0x4a4>
		Tar_cmd_v_x=0;
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <StartTask02+0x478>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	801a      	strh	r2, [r3, #0]
		Tar_cmd_v_y=0;
 8001d50:	4b3c      	ldr	r3, [pc, #240]	; (8001e44 <StartTask02+0x47c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	801a      	strh	r2, [r3, #0]

		Tar_cmd_FL = Tar_cmd_w/CONSTANT_C_AxC_V;
 8001d56:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <StartTask02+0x474>)
 8001d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fbe1 	bl	8000524 <__aeabi_i2d>
 8001d62:	a331      	add	r3, pc, #196	; (adr r3, 8001e28 <StartTask02+0x460>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fd70 	bl	800084c <__aeabi_ddiv>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f7fe fef0 	bl	8000b58 <__aeabi_d2iz>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	b21a      	sxth	r2, r3
 8001d7c:	4b32      	ldr	r3, [pc, #200]	; (8001e48 <StartTask02+0x480>)
 8001d7e:	801a      	strh	r2, [r3, #0]

		if(Tar_cmd_FL>50){Tar_cmd_FL=50;}
 8001d80:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <StartTask02+0x480>)
 8001d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d86:	2b32      	cmp	r3, #50	; 0x32
 8001d88:	dd02      	ble.n	8001d90 <StartTask02+0x3c8>
 8001d8a:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <StartTask02+0x480>)
 8001d8c:	2232      	movs	r2, #50	; 0x32
 8001d8e:	801a      	strh	r2, [r3, #0]
		if(Tar_cmd_FL<-50){Tar_cmd_FL=-50;}
 8001d90:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <StartTask02+0x480>)
 8001d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d96:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8001d9a:	da03      	bge.n	8001da4 <StartTask02+0x3dc>
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <StartTask02+0x480>)
 8001d9e:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8001da2:	801a      	strh	r2, [r3, #0]
		Tar_cmd_RR = Tar_cmd_RL = Tar_cmd_FR = Tar_cmd_FL;
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <StartTask02+0x480>)
 8001da6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001daa:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <StartTask02+0x484>)
 8001dac:	801a      	strh	r2, [r3, #0]
 8001dae:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <StartTask02+0x484>)
 8001db0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001db4:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <StartTask02+0x488>)
 8001db6:	801a      	strh	r2, [r3, #0]
 8001db8:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <StartTask02+0x488>)
 8001dba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dbe:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <StartTask02+0x48c>)
 8001dc0:	801a      	strh	r2, [r3, #0]

		Real_cmd_w = CONSTANT_C_AxC_V*Tar_cmd_FL;
 8001dc2:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <StartTask02+0x480>)
 8001dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fbab 	bl	8000524 <__aeabi_i2d>
 8001dce:	a316      	add	r3, pc, #88	; (adr r3, 8001e28 <StartTask02+0x460>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fc10 	bl	80005f8 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	f7fe feba 	bl	8000b58 <__aeabi_d2iz>
 8001de4:	4603      	mov	r3, r0
 8001de6:	b21a      	sxth	r2, r3
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <StartTask02+0x490>)
 8001dea:	801a      	strh	r2, [r3, #0]

		ModeABCD = 2;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <StartTask02+0x494>)
 8001dee:	2202      	movs	r2, #2
 8001df0:	701a      	strb	r2, [r3, #0]

		if(Pre_ModeABCD!=ModeABCD){
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <StartTask02+0x498>)
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <StartTask02+0x494>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	f000 814b 	beq.w	8002096 <StartTask02+0x6ce>
			//printf("111osTimerStart: %d, %d\n", ModeABCD, Pre_ModeABCD);
			Pre_ModeABCD = ModeABCD;
 8001e00:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <StartTask02+0x494>)
 8001e02:	781a      	ldrb	r2, [r3, #0]
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <StartTask02+0x498>)
 8001e06:	701a      	strb	r2, [r3, #0]
			if(timerflag){
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <StartTask02+0x49c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 8142 	beq.w	8002096 <StartTask02+0x6ce>
				//printf("timerflag: %d\n", timerflag);
				osTimerStart(EndModeDTimerHandle, 3000);
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <StartTask02+0x4a0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f007 ff26 	bl	8009c6c <osTimerStart>
				timerflag = 0;
 8001e20:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <StartTask02+0x49c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	e136      	b.n	8002096 <StartTask02+0x6ce>
 8001e28:	8ccd1fe0 	.word	0x8ccd1fe0
 8001e2c:	40412c3c 	.word	0x40412c3c
 8001e30:	20000810 	.word	0x20000810
 8001e34:	20000790 	.word	0x20000790
 8001e38:	20000820 	.word	0x20000820
 8001e3c:	2000080c 	.word	0x2000080c
 8001e40:	20000808 	.word	0x20000808
 8001e44:	2000080a 	.word	0x2000080a
 8001e48:	20000824 	.word	0x20000824
 8001e4c:	20000826 	.word	0x20000826
 8001e50:	20000828 	.word	0x20000828
 8001e54:	2000082a 	.word	0x2000082a
 8001e58:	20000830 	.word	0x20000830
 8001e5c:	2000005c 	.word	0x2000005c
 8001e60:	20000800 	.word	0x20000800
 8001e64:	2000005d 	.word	0x2000005d
 8001e68:	20000850 	.word	0x20000850
			}
		}
	}

	else if(Tar_cmd_v_x|Tar_cmd_v_y){
 8001e6c:	4bc2      	ldr	r3, [pc, #776]	; (8002178 <StartTask02+0x7b0>)
 8001e6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e72:	4bc2      	ldr	r3, [pc, #776]	; (800217c <StartTask02+0x7b4>)
 8001e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 810a 	beq.w	8002096 <StartTask02+0x6ce>
		Tar_cmd_FL = CONSTANT_VEL  *  (Tar_cmd_v_x*cos(ANGLE_RAD) + Tar_cmd_v_y*sin(ANGLE_RAD));
 8001e82:	4bbd      	ldr	r3, [pc, #756]	; (8002178 <StartTask02+0x7b0>)
 8001e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb4b 	bl	8000524 <__aeabi_i2d>
 8001e8e:	4604      	mov	r4, r0
 8001e90:	460d      	mov	r5, r1
 8001e92:	4bba      	ldr	r3, [pc, #744]	; (800217c <StartTask02+0x7b4>)
 8001e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb43 	bl	8000524 <__aeabi_i2d>
 8001e9e:	4680      	mov	r8, r0
 8001ea0:	4689      	mov	r9, r1
 8001ea2:	4bb5      	ldr	r3, [pc, #724]	; (8002178 <StartTask02+0x7b0>)
 8001ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb3b 	bl	8000524 <__aeabi_i2d>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	ec43 2b11 	vmov	d1, r2, r3
 8001eb6:	ec49 8b10 	vmov	d0, r8, r9
 8001eba:	f00e fb35 	bl	8010528 <atan2>
 8001ebe:	eeb0 7a40 	vmov.f32	s14, s0
 8001ec2:	eef0 7a60 	vmov.f32	s15, s1
 8001ec6:	eeb0 0a47 	vmov.f32	s0, s14
 8001eca:	eef0 0a67 	vmov.f32	s1, s15
 8001ece:	f00e fa7f 	bl	80103d0 <cos>
 8001ed2:	ec53 2b10 	vmov	r2, r3, d0
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	4629      	mov	r1, r5
 8001eda:	f7fe fb8d 	bl	80005f8 <__aeabi_dmul>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4690      	mov	r8, r2
 8001ee4:	4699      	mov	r9, r3
 8001ee6:	4ba5      	ldr	r3, [pc, #660]	; (800217c <StartTask02+0x7b4>)
 8001ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fb19 	bl	8000524 <__aeabi_i2d>
 8001ef2:	4604      	mov	r4, r0
 8001ef4:	460d      	mov	r5, r1
 8001ef6:	4ba1      	ldr	r3, [pc, #644]	; (800217c <StartTask02+0x7b4>)
 8001ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fb11 	bl	8000524 <__aeabi_i2d>
 8001f02:	4682      	mov	sl, r0
 8001f04:	468b      	mov	fp, r1
 8001f06:	4b9c      	ldr	r3, [pc, #624]	; (8002178 <StartTask02+0x7b0>)
 8001f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fb09 	bl	8000524 <__aeabi_i2d>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	ec43 2b11 	vmov	d1, r2, r3
 8001f1a:	ec4b ab10 	vmov	d0, sl, fp
 8001f1e:	f00e fb03 	bl	8010528 <atan2>
 8001f22:	eeb0 7a40 	vmov.f32	s14, s0
 8001f26:	eef0 7a60 	vmov.f32	s15, s1
 8001f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f2e:	eef0 0a67 	vmov.f32	s1, s15
 8001f32:	f00e faa1 	bl	8010478 <sin>
 8001f36:	ec53 2b10 	vmov	r2, r3, d0
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	f7fe fb5b 	bl	80005f8 <__aeabi_dmul>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4640      	mov	r0, r8
 8001f48:	4649      	mov	r1, r9
 8001f4a:	f7fe f99f 	bl	800028c <__adddf3>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	a384      	add	r3, pc, #528	; (adr r3, 8002168 <StartTask02+0x7a0>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	f7fe fb4c 	bl	80005f8 <__aeabi_dmul>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	f7fe fdf6 	bl	8000b58 <__aeabi_d2iz>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	b21a      	sxth	r2, r3
 8001f70:	4b83      	ldr	r3, [pc, #524]	; (8002180 <StartTask02+0x7b8>)
 8001f72:	801a      	strh	r2, [r3, #0]
	//	printf("Tar_cmd_FL: %d %d\n", Tar_cmd_v_x, Tar_cmd_v_y);

		if(Tar_cmd_FL>50){Tar_cmd_FL=50;}
 8001f74:	4b82      	ldr	r3, [pc, #520]	; (8002180 <StartTask02+0x7b8>)
 8001f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7a:	2b32      	cmp	r3, #50	; 0x32
 8001f7c:	dd02      	ble.n	8001f84 <StartTask02+0x5bc>
 8001f7e:	4b80      	ldr	r3, [pc, #512]	; (8002180 <StartTask02+0x7b8>)
 8001f80:	2232      	movs	r2, #50	; 0x32
 8001f82:	801a      	strh	r2, [r3, #0]
		if(Tar_cmd_FL<-50){Tar_cmd_FL=-50;}
 8001f84:	4b7e      	ldr	r3, [pc, #504]	; (8002180 <StartTask02+0x7b8>)
 8001f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8a:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8001f8e:	da03      	bge.n	8001f98 <StartTask02+0x5d0>
 8001f90:	4b7b      	ldr	r3, [pc, #492]	; (8002180 <StartTask02+0x7b8>)
 8001f92:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8001f96:	801a      	strh	r2, [r3, #0]
		Tar_cmd_FR = -Tar_cmd_FL;
 8001f98:	4b79      	ldr	r3, [pc, #484]	; (8002180 <StartTask02+0x7b8>)
 8001f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	425b      	negs	r3, r3
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	b21a      	sxth	r2, r3
 8001fa6:	4b77      	ldr	r3, [pc, #476]	; (8002184 <StartTask02+0x7bc>)
 8001fa8:	801a      	strh	r2, [r3, #0]
		Tar_cmd_RL = Tar_cmd_FL;
 8001faa:	4b75      	ldr	r3, [pc, #468]	; (8002180 <StartTask02+0x7b8>)
 8001fac:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fb0:	4b75      	ldr	r3, [pc, #468]	; (8002188 <StartTask02+0x7c0>)
 8001fb2:	801a      	strh	r2, [r3, #0]
		Tar_cmd_RR = -Tar_cmd_FL;
 8001fb4:	4b72      	ldr	r3, [pc, #456]	; (8002180 <StartTask02+0x7b8>)
 8001fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	425b      	negs	r3, r3
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	b21a      	sxth	r2, r3
 8001fc2:	4b72      	ldr	r3, [pc, #456]	; (800218c <StartTask02+0x7c4>)
 8001fc4:	801a      	strh	r2, [r3, #0]

		if(Tar_cmd_v_x<0){
 8001fc6:	4b6c      	ldr	r3, [pc, #432]	; (8002178 <StartTask02+0x7b0>)
 8001fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	da23      	bge.n	8002018 <StartTask02+0x650>
			Tar_cmd_FL*=-1;
 8001fd0:	4b6b      	ldr	r3, [pc, #428]	; (8002180 <StartTask02+0x7b8>)
 8001fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	425b      	negs	r3, r3
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	4b68      	ldr	r3, [pc, #416]	; (8002180 <StartTask02+0x7b8>)
 8001fe0:	801a      	strh	r2, [r3, #0]
			Tar_cmd_FR*=-1;
 8001fe2:	4b68      	ldr	r3, [pc, #416]	; (8002184 <StartTask02+0x7bc>)
 8001fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	425b      	negs	r3, r3
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	b21a      	sxth	r2, r3
 8001ff0:	4b64      	ldr	r3, [pc, #400]	; (8002184 <StartTask02+0x7bc>)
 8001ff2:	801a      	strh	r2, [r3, #0]
			Tar_cmd_RL*=-1;
 8001ff4:	4b64      	ldr	r3, [pc, #400]	; (8002188 <StartTask02+0x7c0>)
 8001ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	425b      	negs	r3, r3
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	b21a      	sxth	r2, r3
 8002002:	4b61      	ldr	r3, [pc, #388]	; (8002188 <StartTask02+0x7c0>)
 8002004:	801a      	strh	r2, [r3, #0]
			Tar_cmd_RR*=-1;
 8002006:	4b61      	ldr	r3, [pc, #388]	; (800218c <StartTask02+0x7c4>)
 8002008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200c:	b29b      	uxth	r3, r3
 800200e:	425b      	negs	r3, r3
 8002010:	b29b      	uxth	r3, r3
 8002012:	b21a      	sxth	r2, r3
 8002014:	4b5d      	ldr	r3, [pc, #372]	; (800218c <StartTask02+0x7c4>)
 8002016:	801a      	strh	r2, [r3, #0]
		}

		SteDeg=rad2deg(ANGLE_RAD);
 8002018:	4b58      	ldr	r3, [pc, #352]	; (800217c <StartTask02+0x7b4>)
 800201a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa80 	bl	8000524 <__aeabi_i2d>
 8002024:	4604      	mov	r4, r0
 8002026:	460d      	mov	r5, r1
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <StartTask02+0x7b0>)
 800202a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fa78 	bl	8000524 <__aeabi_i2d>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	ec43 2b11 	vmov	d1, r2, r3
 800203c:	ec45 4b10 	vmov	d0, r4, r5
 8002040:	f00e fa72 	bl	8010528 <atan2>
 8002044:	eeb0 7a40 	vmov.f32	s14, s0
 8002048:	eef0 7a60 	vmov.f32	s15, s1
 800204c:	eeb0 0a47 	vmov.f32	s0, s14
 8002050:	eef0 0a67 	vmov.f32	s1, s15
 8002054:	f7ff fb7c 	bl	8001750 <rad2deg>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	4b4c      	ldr	r3, [pc, #304]	; (8002190 <StartTask02+0x7c8>)
 800205e:	801a      	strh	r2, [r3, #0]
		ModeABCD = 1;
 8002060:	4b4c      	ldr	r3, [pc, #304]	; (8002194 <StartTask02+0x7cc>)
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]

		if(Pre_ModeABCD!=ModeABCD){
 8002066:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <StartTask02+0x7d0>)
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <StartTask02+0x7cc>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d011      	beq.n	8002096 <StartTask02+0x6ce>
			//printf("111osTimerStart: %d, %d\n", ModeABCD, Pre_ModeABCD);
			Pre_ModeABCD = ModeABCD;
 8002072:	4b48      	ldr	r3, [pc, #288]	; (8002194 <StartTask02+0x7cc>)
 8002074:	781a      	ldrb	r2, [r3, #0]
 8002076:	4b48      	ldr	r3, [pc, #288]	; (8002198 <StartTask02+0x7d0>)
 8002078:	701a      	strb	r2, [r3, #0]
			if(timerflag){
 800207a:	4b48      	ldr	r3, [pc, #288]	; (800219c <StartTask02+0x7d4>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d009      	beq.n	8002096 <StartTask02+0x6ce>
				//printf("timerflag: %d\n", timerflag);
				osTimerStart(EndModeDTimerHandle, 3000);
 8002082:	4b47      	ldr	r3, [pc, #284]	; (80021a0 <StartTask02+0x7d8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800208a:	4618      	mov	r0, r3
 800208c:	f007 fdee 	bl	8009c6c <osTimerStart>
				timerflag = 0;
 8002090:	4b42      	ldr	r3, [pc, #264]	; (800219c <StartTask02+0x7d4>)
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if(((Tar_cmd_v_x==0) && (Tar_cmd_v_y==0) && (Tar_cmd_w==0))  ||  (Stop_flag==0))
 8002096:	4b38      	ldr	r3, [pc, #224]	; (8002178 <StartTask02+0x7b0>)
 8002098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d109      	bne.n	80020b4 <StartTask02+0x6ec>
 80020a0:	4b36      	ldr	r3, [pc, #216]	; (800217c <StartTask02+0x7b4>)
 80020a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d104      	bne.n	80020b4 <StartTask02+0x6ec>
 80020aa:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <StartTask02+0x7dc>)
 80020ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <StartTask02+0x6f4>
 80020b4:	4b3c      	ldr	r3, [pc, #240]	; (80021a8 <StartTask02+0x7e0>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d117      	bne.n	80020ec <StartTask02+0x724>
	{
		ModeABCD = 4;
 80020bc:	4b35      	ldr	r3, [pc, #212]	; (8002194 <StartTask02+0x7cc>)
 80020be:	2204      	movs	r2, #4
 80020c0:	701a      	strb	r2, [r3, #0]
		Pre_ModeABCD = 4;
 80020c2:	4b35      	ldr	r3, [pc, #212]	; (8002198 <StartTask02+0x7d0>)
 80020c4:	2204      	movs	r2, #4
 80020c6:	701a      	strb	r2, [r3, #0]
		Tar_cmd_RR = Tar_cmd_RL = Tar_cmd_FR = Tar_cmd_FL=0;
 80020c8:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <StartTask02+0x7b8>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	801a      	strh	r2, [r3, #0]
 80020ce:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <StartTask02+0x7b8>)
 80020d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020d4:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <StartTask02+0x7bc>)
 80020d6:	801a      	strh	r2, [r3, #0]
 80020d8:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <StartTask02+0x7bc>)
 80020da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020de:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <StartTask02+0x7c0>)
 80020e0:	801a      	strh	r2, [r3, #0]
 80020e2:	4b29      	ldr	r3, [pc, #164]	; (8002188 <StartTask02+0x7c0>)
 80020e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020e8:	4b28      	ldr	r3, [pc, #160]	; (800218c <StartTask02+0x7c4>)
 80020ea:	801a      	strh	r2, [r3, #0]
	}

	Real_cmd_v_x = CONSTANT_VEL2*Tmp_cmd_FL*cos(ANGLE_RAD)/10;
 80020ec:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fa17 	bl	8000524 <__aeabi_i2d>
 80020f6:	a31e      	add	r3, pc, #120	; (adr r3, 8002170 <StartTask02+0x7a8>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	f7fe fa7c 	bl	80005f8 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4614      	mov	r4, r2
 8002106:	461d      	mov	r5, r3
 8002108:	4b1c      	ldr	r3, [pc, #112]	; (800217c <StartTask02+0x7b4>)
 800210a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fa08 	bl	8000524 <__aeabi_i2d>
 8002114:	4680      	mov	r8, r0
 8002116:	4689      	mov	r9, r1
 8002118:	4b17      	ldr	r3, [pc, #92]	; (8002178 <StartTask02+0x7b0>)
 800211a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fa00 	bl	8000524 <__aeabi_i2d>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	ec43 2b11 	vmov	d1, r2, r3
 800212c:	ec49 8b10 	vmov	d0, r8, r9
 8002130:	f00e f9fa 	bl	8010528 <atan2>
 8002134:	eeb0 7a40 	vmov.f32	s14, s0
 8002138:	eef0 7a60 	vmov.f32	s15, s1
 800213c:	eeb0 0a47 	vmov.f32	s0, s14
 8002140:	eef0 0a67 	vmov.f32	s1, s15
 8002144:	f00e f944 	bl	80103d0 <cos>
 8002148:	ec53 2b10 	vmov	r2, r3, d0
 800214c:	4620      	mov	r0, r4
 800214e:	4629      	mov	r1, r5
 8002150:	f7fe fa52 	bl	80005f8 <__aeabi_dmul>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <StartTask02+0x7e4>)
 8002162:	f7fe fb73 	bl	800084c <__aeabi_ddiv>
 8002166:	e023      	b.n	80021b0 <StartTask02+0x7e8>
 8002168:	cc196908 	.word	0xcc196908
 800216c:	3fbc42f1 	.word	0x3fbc42f1
 8002170:	198abd1e 	.word	0x198abd1e
 8002174:	40221dd4 	.word	0x40221dd4
 8002178:	20000808 	.word	0x20000808
 800217c:	2000080a 	.word	0x2000080a
 8002180:	20000824 	.word	0x20000824
 8002184:	20000826 	.word	0x20000826
 8002188:	20000828 	.word	0x20000828
 800218c:	2000082a 	.word	0x2000082a
 8002190:	200007fe 	.word	0x200007fe
 8002194:	2000005c 	.word	0x2000005c
 8002198:	20000800 	.word	0x20000800
 800219c:	2000005d 	.word	0x2000005d
 80021a0:	20000850 	.word	0x20000850
 80021a4:	2000080c 	.word	0x2000080c
 80021a8:	20000802 	.word	0x20000802
 80021ac:	40240000 	.word	0x40240000
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	f7fe fcce 	bl	8000b58 <__aeabi_d2iz>
 80021bc:	4603      	mov	r3, r0
 80021be:	b21a      	sxth	r2, r3
 80021c0:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <StartTask02+0x8f8>)
 80021c2:	801a      	strh	r2, [r3, #0]
	Real_cmd_v_y = CONSTANT_VEL2*Tmp_cmd_FL*sin(ANGLE_RAD)/10;
 80021c4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe f9ab 	bl	8000524 <__aeabi_i2d>
 80021ce:	a33a      	add	r3, pc, #232	; (adr r3, 80022b8 <StartTask02+0x8f0>)
 80021d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d4:	f7fe fa10 	bl	80005f8 <__aeabi_dmul>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4614      	mov	r4, r2
 80021de:	461d      	mov	r5, r3
 80021e0:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <StartTask02+0x8fc>)
 80021e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f99c 	bl	8000524 <__aeabi_i2d>
 80021ec:	4680      	mov	r8, r0
 80021ee:	4689      	mov	r9, r1
 80021f0:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <StartTask02+0x900>)
 80021f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f994 	bl	8000524 <__aeabi_i2d>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	ec43 2b11 	vmov	d1, r2, r3
 8002204:	ec49 8b10 	vmov	d0, r8, r9
 8002208:	f00e f98e 	bl	8010528 <atan2>
 800220c:	eeb0 7a40 	vmov.f32	s14, s0
 8002210:	eef0 7a60 	vmov.f32	s15, s1
 8002214:	eeb0 0a47 	vmov.f32	s0, s14
 8002218:	eef0 0a67 	vmov.f32	s1, s15
 800221c:	f00e f92c 	bl	8010478 <sin>
 8002220:	ec53 2b10 	vmov	r2, r3, d0
 8002224:	4620      	mov	r0, r4
 8002226:	4629      	mov	r1, r5
 8002228:	f7fe f9e6 	bl	80005f8 <__aeabi_dmul>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	4b24      	ldr	r3, [pc, #144]	; (80022cc <StartTask02+0x904>)
 800223a:	f7fe fb07 	bl	800084c <__aeabi_ddiv>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	f7fe fc87 	bl	8000b58 <__aeabi_d2iz>
 800224a:	4603      	mov	r3, r0
 800224c:	b21a      	sxth	r2, r3
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <StartTask02+0x908>)
 8002250:	801a      	strh	r2, [r3, #0]
//	Real_cmd_w = 0;


	sendcanbuf[7] = VERSION_MINOR;
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <StartTask02+0x90c>)
 8002254:	2200      	movs	r2, #0
 8002256:	71da      	strb	r2, [r3, #7]
	sendcanbuf[6] = VERSION_MAJOR;
 8002258:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <StartTask02+0x90c>)
 800225a:	2201      	movs	r2, #1
 800225c:	719a      	strb	r2, [r3, #6]
	sendcanbuf[5] = (((int16_t)(Real_cmd_w)))>>8 & 0xff;
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <StartTask02+0x910>)
 8002260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002264:	121b      	asrs	r3, r3, #8
 8002266:	b21b      	sxth	r3, r3
 8002268:	b25a      	sxtb	r2, r3
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <StartTask02+0x90c>)
 800226c:	715a      	strb	r2, [r3, #5]
	sendcanbuf[4] = (int16_t)(Real_cmd_w)&0xff;
 800226e:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <StartTask02+0x910>)
 8002270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002274:	b25a      	sxtb	r2, r3
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <StartTask02+0x90c>)
 8002278:	711a      	strb	r2, [r3, #4]
	sendcanbuf[3] = (((int16_t)(Real_cmd_v_y)))>>8 & 0xff;
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <StartTask02+0x908>)
 800227c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002280:	121b      	asrs	r3, r3, #8
 8002282:	b21b      	sxth	r3, r3
 8002284:	b25a      	sxtb	r2, r3
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <StartTask02+0x90c>)
 8002288:	70da      	strb	r2, [r3, #3]
	sendcanbuf[2] = (int16_t)(Real_cmd_v_y)&0xff;
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <StartTask02+0x908>)
 800228c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002290:	b25a      	sxtb	r2, r3
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <StartTask02+0x90c>)
 8002294:	709a      	strb	r2, [r3, #2]
	sendcanbuf[1] = (((int16_t)(Real_cmd_v_x)))>>8 & 0xff;
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <StartTask02+0x8f8>)
 8002298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800229c:	121b      	asrs	r3, r3, #8
 800229e:	b21b      	sxth	r3, r3
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <StartTask02+0x90c>)
 80022a4:	705a      	strb	r2, [r3, #1]
	sendcanbuf[0] = (int16_t)(Real_cmd_v_x)&0xff;
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <StartTask02+0x8f8>)
 80022a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ac:	b25a      	sxtb	r2, r3
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <StartTask02+0x90c>)
 80022b0:	701a      	strb	r2, [r3, #0]
  {
 80022b2:	e43c      	b.n	8001b2e <StartTask02+0x166>
 80022b4:	f3af 8000 	nop.w
 80022b8:	198abd1e 	.word	0x198abd1e
 80022bc:	40221dd4 	.word	0x40221dd4
 80022c0:	2000082c 	.word	0x2000082c
 80022c4:	2000080a 	.word	0x2000080a
 80022c8:	20000808 	.word	0x20000808
 80022cc:	40240000 	.word	0x40240000
 80022d0:	2000082e 	.word	0x2000082e
 80022d4:	20000818 	.word	0x20000818
 80022d8:	20000830 	.word	0x20000830

080022dc <Deg2Ste>:
* @param argument: Not used
* @retval None
*/

int16_t Deg2Ste(uint8_t RW, int16_t deg)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	460a      	mov	r2, r1
 80022e6:	71fb      	strb	r3, [r7, #7]
 80022e8:	4613      	mov	r3, r2
 80022ea:	80bb      	strh	r3, [r7, #4]
	if(osMutexWait(DegmsgHandle, osWaitForever)==osOK)
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <Deg2Ste+0x7c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295
 80022f4:	4618      	mov	r0, r3
 80022f6:	f007 fd6d 	bl	8009dd4 <osMutexAcquire>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d11f      	bne.n	8002340 <Deg2Ste+0x64>
	{
		if(RW){//write
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d013      	beq.n	800232e <Deg2Ste+0x52>
			SteDeg = deg; printf("%d:deg in mut:%d \n", osKernelGetTickCount(), SteDeg);
 8002306:	4a15      	ldr	r2, [pc, #84]	; (800235c <Deg2Ste+0x80>)
 8002308:	88bb      	ldrh	r3, [r7, #4]
 800230a:	8013      	strh	r3, [r2, #0]
 800230c:	f007 fa3c 	bl	8009788 <osKernelGetTickCount>
 8002310:	4603      	mov	r3, r0
 8002312:	4a12      	ldr	r2, [pc, #72]	; (800235c <Deg2Ste+0x80>)
 8002314:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002318:	4619      	mov	r1, r3
 800231a:	4811      	ldr	r0, [pc, #68]	; (8002360 <Deg2Ste+0x84>)
 800231c:	f00c f84e 	bl	800e3bc <iprintf>
			osMutexRelease(DegmsgHandle);
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <Deg2Ste+0x7c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f007 fda0 	bl	8009e6a <osMutexRelease>
			return 1;
 800232a:	2301      	movs	r3, #1
 800232c:	e010      	b.n	8002350 <Deg2Ste+0x74>
		}
		else{//read
			osMutexRelease(DegmsgHandle);
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <Deg2Ste+0x7c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f007 fd99 	bl	8009e6a <osMutexRelease>
			return SteDeg;
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <Deg2Ste+0x80>)
 800233a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800233e:	e007      	b.n	8002350 <Deg2Ste+0x74>
		}
	}
	else{
		printf("%d:mutex in \n", osKernelGetTickCount());
 8002340:	f007 fa22 	bl	8009788 <osKernelGetTickCount>
 8002344:	4603      	mov	r3, r0
 8002346:	4619      	mov	r1, r3
 8002348:	4806      	ldr	r0, [pc, #24]	; (8002364 <Deg2Ste+0x88>)
 800234a:	f00c f837 	bl	800e3bc <iprintf>
		return 0;
 800234e:	2300      	movs	r3, #0
	}
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	2000085c 	.word	0x2000085c
 800235c:	200007fe 	.word	0x200007fe
 8002360:	08011b5c 	.word	0x08011b5c
 8002364:	08011b70 	.word	0x08011b70

08002368 <StartTask03>:
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08c      	sub	sp, #48	; 0x30
 800236c:	af02      	add	r7, sp, #8
 800236e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	uint32_t lastTime;
	uint8_t Dir_Rot = 0; //direction of rotation
 8002370:	2300      	movs	r3, #0
 8002372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t FT_flag = 0; //FineTuning_flag
 8002376:	2300      	movs	r3, #0
 8002378:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint32_t test = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
//	char buf[48]={	 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,		//1 front right
//					13, 14, 15, 16, 17, 18, 19, 20, 21, 22,	23, 24,		//2 front left
//					25, 26, 27, 28, 29, 30, 31, 32,	33, 34, 35, 36,		//3 rear right
//					37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48	};	//4 rear left

	osDelay(1000);
 8002380:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002384:	f007 fb98 	bl	8009ab8 <osDelay>
	GPIO_enableirq();
 8002388:	f000 ff52 	bl	8003230 <GPIO_enableirq>
	osDelay(100);
 800238c:	2064      	movs	r0, #100	; 0x64
 800238e:	f007 fb93 	bl	8009ab8 <osDelay>
	osThreadFlagsSet(IRQ_PSxHandle, 1);
 8002392:	4ba9      	ldr	r3, [pc, #676]	; (8002638 <StartTask03+0x2d0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2101      	movs	r1, #1
 8002398:	4618      	mov	r0, r3
 800239a:	f007 fa9d 	bl	80098d8 <osThreadFlagsSet>

	for(int i=0;i<4;i++){
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	e056      	b.n	8002452 <StartTask03+0xea>
		if(HAL_GPIO_ReadPin(GPIOA, ((1<<i)<<4))){//GPIO_PIN_4                 ((uint16_t)0x0010)  /* Pin 4 selected    */
 80023a4:	2201      	movs	r2, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	4619      	mov	r1, r3
 80023b4:	48a1      	ldr	r0, [pc, #644]	; (800263c <StartTask03+0x2d4>)
 80023b6:	f003 fd77 	bl	8005ea8 <HAL_GPIO_ReadPin>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d018      	beq.n	80023f2 <StartTask03+0x8a>
			if((i==STMotorID2) || (i==STMotorID3)) 	{Dir_Rot = SERVO_CW;}
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d002      	beq.n	80023cc <StartTask03+0x64>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d103      	bne.n	80023d4 <StartTask03+0x6c>
 80023cc:	2300      	movs	r3, #0
 80023ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023d2:	e026      	b.n	8002422 <StartTask03+0xba>
			else					{Dir_Rot = SERVO_CCW;FT_flag |= (1<<i);}
 80023d4:	2301      	movs	r3, #1
 80023d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023da:	2201      	movs	r2, #1
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	b25a      	sxtb	r2, r3
 80023e4:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80023e8:	4313      	orrs	r3, r2
 80023ea:	b25b      	sxtb	r3, r3
 80023ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80023f0:	e017      	b.n	8002422 <StartTask03+0xba>
		}
		else {
			if((i==STMotorID2) || (i==STMotorID3))	{Dir_Rot = SERVO_CCW;FT_flag |= (1<<i);}
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d002      	beq.n	80023fe <StartTask03+0x96>
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d10e      	bne.n	800241c <StartTask03+0xb4>
 80023fe:	2301      	movs	r3, #1
 8002400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	b25a      	sxtb	r2, r3
 800240e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002412:	4313      	orrs	r3, r2
 8002414:	b25b      	sxtb	r3, r3
 8002416:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800241a:	e002      	b.n	8002422 <StartTask03+0xba>
			else					{Dir_Rot = SERVO_CW;}
 800241c:	2300      	movs	r3, #0
 800241e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}
		DataSetSteering(buf, i, Dir_Rot, RPM_1, SERVO_INIT);// i= STMotorIDx, x=1~4
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	b2d9      	uxtb	r1, r3
 8002426:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800242a:	2301      	movs	r3, #1
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2314      	movs	r3, #20
 8002430:	4883      	ldr	r0, [pc, #524]	; (8002640 <StartTask03+0x2d8>)
 8002432:	f001 f8cf 	bl	80035d4 <DataSetSteering>
		printf("PS_SIG1_Pin ccw init. %d %x\n", FT_flag, ((1<<i)<<4));
 8002436:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 800243a:	2201      	movs	r2, #1
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	461a      	mov	r2, r3
 8002446:	487f      	ldr	r0, [pc, #508]	; (8002644 <StartTask03+0x2dc>)
 8002448:	f00b ffb8 	bl	800e3bc <iprintf>
	for(int i=0;i<4;i++){
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	3301      	adds	r3, #1
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	2b03      	cmp	r3, #3
 8002456:	dda5      	ble.n	80023a4 <StartTask03+0x3c>
	}

	osDelay(1000);
 8002458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800245c:	f007 fb2c 	bl	8009ab8 <osDelay>

	for(int i=0;i<40;i++){
 8002460:	2300      	movs	r3, #0
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	e022      	b.n	80024ac <StartTask03+0x144>
		osDelay(200);
 8002466:	20c8      	movs	r0, #200	; 0xc8
 8002468:	f007 fb26 	bl	8009ab8 <osDelay>
		ServoMotor_writeDMA(buf);//servo init. must done init within 500*20ms
 800246c:	4874      	ldr	r0, [pc, #464]	; (8002640 <StartTask03+0x2d8>)
 800246e:	f001 f88b 	bl	8003588 <ServoMotor_writeDMA>
		printf("%d ", i);
 8002472:	69b9      	ldr	r1, [r7, #24]
 8002474:	4874      	ldr	r0, [pc, #464]	; (8002648 <StartTask03+0x2e0>)
 8002476:	f00b ffa1 	bl	800e3bc <iprintf>
		if(STinitdone){printf("steering origin init done!!!.\n"); break;}
 800247a:	4b74      	ldr	r3, [pc, #464]	; (800264c <StartTask03+0x2e4>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <StartTask03+0x122>
 8002482:	4873      	ldr	r0, [pc, #460]	; (8002650 <StartTask03+0x2e8>)
 8002484:	f00c f820 	bl	800e4c8 <puts>
 8002488:	e013      	b.n	80024b2 <StartTask03+0x14a>
		if(i==39){
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	2b27      	cmp	r3, #39	; 0x27
 800248e:	d10a      	bne.n	80024a6 <StartTask03+0x13e>
			HAL_Delay(100);
 8002490:	2064      	movs	r0, #100	; 0x64
 8002492:	f001 ff9b 	bl	80043cc <HAL_Delay>
			printf("steering origin init failed reset!!!!.\n");
 8002496:	486f      	ldr	r0, [pc, #444]	; (8002654 <StartTask03+0x2ec>)
 8002498:	f00c f816 	bl	800e4c8 <puts>
			HAL_Delay(100);
 800249c:	2064      	movs	r0, #100	; 0x64
 800249e:	f001 ff95 	bl	80043cc <HAL_Delay>
			NVIC_SystemReset();
 80024a2:	f7ff f93d 	bl	8001720 <__NVIC_SystemReset>
	for(int i=0;i<40;i++){
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	3301      	adds	r3, #1
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2b27      	cmp	r3, #39	; 0x27
 80024b0:	ddd9      	ble.n	8002466 <StartTask03+0xfe>
		}
	}
	osDelay(500);
 80024b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024b6:	f007 faff 	bl	8009ab8 <osDelay>
	STinitdone = 0;
 80024ba:	4b64      	ldr	r3, [pc, #400]	; (800264c <StartTask03+0x2e4>)
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
	//EndInit = 0;
	//GPIO_enableirq();
//	osThreadFlagsSet(IRQ_PSxHandle, 1);
	printf("%d: osTFSet\n", osKernelGetTickCount());
 80024c0:	f007 f962 	bl	8009788 <osKernelGetTickCount>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4619      	mov	r1, r3
 80024c8:	4863      	ldr	r0, [pc, #396]	; (8002658 <StartTask03+0x2f0>)
 80024ca:	f00b ff77 	bl	800e3bc <iprintf>

	for(int i=0;i<4;i++){
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	e03a      	b.n	800254a <StartTask03+0x1e2>
		if(FT_flag&(1<<i)){
 80024d4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa42 f303 	asr.w	r3, r2, r3
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d010      	beq.n	8002508 <StartTask03+0x1a0>
			DataSetSteering(buf, i, SERVO_CW, STM_FT_ID[i][SERVO_CW], SERVO_POS);
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	b2d9      	uxtb	r1, r3
 80024ea:	4a5c      	ldr	r2, [pc, #368]	; (800265c <StartTask03+0x2f4>)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2200      	movs	r2, #0
 80024f6:	9200      	str	r2, [sp, #0]
 80024f8:	2200      	movs	r2, #0
 80024fa:	4851      	ldr	r0, [pc, #324]	; (8002640 <StartTask03+0x2d8>)
 80024fc:	f001 f86a 	bl	80035d4 <DataSetSteering>
			printf("SERVO_cW\n");
 8002500:	4857      	ldr	r0, [pc, #348]	; (8002660 <StartTask03+0x2f8>)
 8002502:	f00b ffe1 	bl	800e4c8 <puts>
 8002506:	e010      	b.n	800252a <StartTask03+0x1c2>
		}
		else {
			DataSetSteering(buf, i, SERVO_CCW, STM_FT_ID[i][SERVO_CCW], SERVO_POS);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	b2d9      	uxtb	r1, r3
 800250c:	4a53      	ldr	r2, [pc, #332]	; (800265c <StartTask03+0x2f4>)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	b29b      	uxth	r3, r3
 8002518:	2200      	movs	r2, #0
 800251a:	9200      	str	r2, [sp, #0]
 800251c:	2201      	movs	r2, #1
 800251e:	4848      	ldr	r0, [pc, #288]	; (8002640 <StartTask03+0x2d8>)
 8002520:	f001 f858 	bl	80035d4 <DataSetSteering>
			printf("SERVO_ccW\n");
 8002524:	484f      	ldr	r0, [pc, #316]	; (8002664 <StartTask03+0x2fc>)
 8002526:	f00b ffcf 	bl	800e4c8 <puts>
		}
		PS_SIGx_Pin |= (1<<i);
 800252a:	2201      	movs	r2, #1
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	b25a      	sxtb	r2, r3
 8002534:	4b4c      	ldr	r3, [pc, #304]	; (8002668 <StartTask03+0x300>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b25b      	sxtb	r3, r3
 800253a:	4313      	orrs	r3, r2
 800253c:	b25b      	sxtb	r3, r3
 800253e:	b2da      	uxtb	r2, r3
 8002540:	4b49      	ldr	r3, [pc, #292]	; (8002668 <StartTask03+0x300>)
 8002542:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<4;i++){
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3301      	adds	r3, #1
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b03      	cmp	r3, #3
 800254e:	ddc1      	ble.n	80024d4 <StartTask03+0x16c>
	}

	for(int i=0;i<10;i++){
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	e009      	b.n	800256a <StartTask03+0x202>
		ServoMotor_writeDMA(buf);//servo init. must done init within 500*20ms
 8002556:	483a      	ldr	r0, [pc, #232]	; (8002640 <StartTask03+0x2d8>)
 8002558:	f001 f816 	bl	8003588 <ServoMotor_writeDMA>
		osDelay(500);
 800255c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002560:	f007 faaa 	bl	8009ab8 <osDelay>
	for(int i=0;i<10;i++){
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	3301      	adds	r3, #1
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b09      	cmp	r3, #9
 800256e:	ddf2      	ble.n	8002556 <StartTask03+0x1ee>
		}

	Dir_Rot = 0;//init
 8002570:	2300      	movs	r3, #0
 8002572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	lastTime = osKernelGetTickCount();
 8002576:	f007 f907 	bl	8009788 <osKernelGetTickCount>
 800257a:	6278      	str	r0, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STEERING;
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	3332      	adds	r3, #50	; 0x32
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
	osDelayUntil(lastTime);
 8002582:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002584:	f007 fab3 	bl	8009aee <osDelayUntil>

	printf("%d: t03\n", osKernelGetTickCount());
 8002588:	f007 f8fe 	bl	8009788 <osKernelGetTickCount>
 800258c:	4603      	mov	r3, r0
 800258e:	4619      	mov	r1, r3
 8002590:	4836      	ldr	r0, [pc, #216]	; (800266c <StartTask03+0x304>)
 8002592:	f00b ff13 	bl	800e3bc <iprintf>

	if(ModeABCD == 1){
 8002596:	4b36      	ldr	r3, [pc, #216]	; (8002670 <StartTask03+0x308>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	f040 8154 	bne.w	8002848 <StartTask03+0x4e0>

		if(Deg2Ste(Xbot_R,0) == 180||Deg2Ste(Xbot_R,0) == -180){Deg2Ste(Xbot_W,0);}
 80025a0:	2100      	movs	r1, #0
 80025a2:	2000      	movs	r0, #0
 80025a4:	f7ff fe9a 	bl	80022dc <Deg2Ste>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2bb4      	cmp	r3, #180	; 0xb4
 80025ac:	d007      	beq.n	80025be <StartTask03+0x256>
 80025ae:	2100      	movs	r1, #0
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7ff fe93 	bl	80022dc <Deg2Ste>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 80025bc:	d103      	bne.n	80025c6 <StartTask03+0x25e>
 80025be:	2100      	movs	r1, #0
 80025c0:	2001      	movs	r0, #1
 80025c2:	f7ff fe8b 	bl	80022dc <Deg2Ste>
		if(Tar_cmd_v_x==0&&Tar_cmd_v_y>0){Deg2Ste(Xbot_W,90); Dir_Rot=SERVO_CCW;}
 80025c6:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <StartTask03+0x30c>)
 80025c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10c      	bne.n	80025ea <StartTask03+0x282>
 80025d0:	4b29      	ldr	r3, [pc, #164]	; (8002678 <StartTask03+0x310>)
 80025d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	dd07      	ble.n	80025ea <StartTask03+0x282>
 80025da:	215a      	movs	r1, #90	; 0x5a
 80025dc:	2001      	movs	r0, #1
 80025de:	f7ff fe7d 	bl	80022dc <Deg2Ste>
 80025e2:	2301      	movs	r3, #1
 80025e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025e8:	e010      	b.n	800260c <StartTask03+0x2a4>
		else if(Tar_cmd_v_x==0&&Tar_cmd_v_y<0){Deg2Ste(Xbot_W,90); Dir_Rot=SERVO_CW;}
 80025ea:	4b22      	ldr	r3, [pc, #136]	; (8002674 <StartTask03+0x30c>)
 80025ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10b      	bne.n	800260c <StartTask03+0x2a4>
 80025f4:	4b20      	ldr	r3, [pc, #128]	; (8002678 <StartTask03+0x310>)
 80025f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	da06      	bge.n	800260c <StartTask03+0x2a4>
 80025fe:	215a      	movs	r1, #90	; 0x5a
 8002600:	2001      	movs	r0, #1
 8002602:	f7ff fe6b 	bl	80022dc <Deg2Ste>
 8002606:	2300      	movs	r3, #0
 8002608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if		((Tar_cmd_v_x>0) && (Tar_cmd_v_y>0)){/*SteDeg*=1;*/		Dir_Rot=SERVO_CCW; printf("t03 %d\n", SteDeg);}//the first quadrant
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <StartTask03+0x30c>)
 800260e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002612:	2b00      	cmp	r3, #0
 8002614:	dd36      	ble.n	8002684 <StartTask03+0x31c>
 8002616:	4b18      	ldr	r3, [pc, #96]	; (8002678 <StartTask03+0x310>)
 8002618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800261c:	2b00      	cmp	r3, #0
 800261e:	dd31      	ble.n	8002684 <StartTask03+0x31c>
 8002620:	2301      	movs	r3, #1
 8002622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <StartTask03+0x314>)
 8002628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800262c:	4619      	mov	r1, r3
 800262e:	4814      	ldr	r0, [pc, #80]	; (8002680 <StartTask03+0x318>)
 8002630:	f00b fec4 	bl	800e3bc <iprintf>
 8002634:	e0a6      	b.n	8002784 <StartTask03+0x41c>
 8002636:	bf00      	nop
 8002638:	20000848 	.word	0x20000848
 800263c:	40020000 	.word	0x40020000
 8002640:	20000060 	.word	0x20000060
 8002644:	08011b80 	.word	0x08011b80
 8002648:	08011ba0 	.word	0x08011ba0
 800264c:	20000801 	.word	0x20000801
 8002650:	08011ba4 	.word	0x08011ba4
 8002654:	08011bc4 	.word	0x08011bc4
 8002658:	08011bec 	.word	0x08011bec
 800265c:	2000003c 	.word	0x2000003c
 8002660:	08011bfc 	.word	0x08011bfc
 8002664:	08011c08 	.word	0x08011c08
 8002668:	200007fc 	.word	0x200007fc
 800266c:	08011c14 	.word	0x08011c14
 8002670:	2000005c 	.word	0x2000005c
 8002674:	20000808 	.word	0x20000808
 8002678:	2000080a 	.word	0x2000080a
 800267c:	200007fe 	.word	0x200007fe
 8002680:	08011c20 	.word	0x08011c20
		else if	((Tar_cmd_v_x<0) && (Tar_cmd_v_y>0)){Deg2Ste(Xbot_W,180-Deg2Ste(Xbot_R,0)); Dir_Rot=SERVO_CW; printf("t03 %d\n", abs(Deg2Ste(Xbot_R,0)));}//the second quadrant
 8002684:	4b28      	ldr	r3, [pc, #160]	; (8002728 <StartTask03+0x3c0>)
 8002686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800268a:	2b00      	cmp	r3, #0
 800268c:	da23      	bge.n	80026d6 <StartTask03+0x36e>
 800268e:	4b27      	ldr	r3, [pc, #156]	; (800272c <StartTask03+0x3c4>)
 8002690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002694:	2b00      	cmp	r3, #0
 8002696:	dd1e      	ble.n	80026d6 <StartTask03+0x36e>
 8002698:	2100      	movs	r1, #0
 800269a:	2000      	movs	r0, #0
 800269c:	f7ff fe1e 	bl	80022dc <Deg2Ste>
 80026a0:	4603      	mov	r3, r0
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	b21b      	sxth	r3, r3
 80026ac:	4619      	mov	r1, r3
 80026ae:	2001      	movs	r0, #1
 80026b0:	f7ff fe14 	bl	80022dc <Deg2Ste>
 80026b4:	2300      	movs	r3, #0
 80026b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026ba:	2100      	movs	r1, #0
 80026bc:	2000      	movs	r0, #0
 80026be:	f7ff fe0d 	bl	80022dc <Deg2Ste>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bfb8      	it	lt
 80026c8:	425b      	neglt	r3, r3
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	4619      	mov	r1, r3
 80026ce:	4818      	ldr	r0, [pc, #96]	; (8002730 <StartTask03+0x3c8>)
 80026d0:	f00b fe74 	bl	800e3bc <iprintf>
 80026d4:	e056      	b.n	8002784 <StartTask03+0x41c>
		else if	((Tar_cmd_v_x<0) && (Tar_cmd_v_y<0)){Deg2Ste(Xbot_W,180+Deg2Ste(Xbot_R,0)); Dir_Rot=SERVO_CCW; printf("t03 %d\n", abs(Deg2Ste(Xbot_R,0)));}//the third quadrant
 80026d6:	4b14      	ldr	r3, [pc, #80]	; (8002728 <StartTask03+0x3c0>)
 80026d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	da29      	bge.n	8002734 <StartTask03+0x3cc>
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <StartTask03+0x3c4>)
 80026e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	da24      	bge.n	8002734 <StartTask03+0x3cc>
 80026ea:	2100      	movs	r1, #0
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7ff fdf5 	bl	80022dc <Deg2Ste>
 80026f2:	4603      	mov	r3, r0
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	33b4      	adds	r3, #180	; 0xb4
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	b21b      	sxth	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	2001      	movs	r0, #1
 8002700:	f7ff fdec 	bl	80022dc <Deg2Ste>
 8002704:	2301      	movs	r3, #1
 8002706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800270a:	2100      	movs	r1, #0
 800270c:	2000      	movs	r0, #0
 800270e:	f7ff fde5 	bl	80022dc <Deg2Ste>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	bfb8      	it	lt
 8002718:	425b      	neglt	r3, r3
 800271a:	b29b      	uxth	r3, r3
 800271c:	4619      	mov	r1, r3
 800271e:	4804      	ldr	r0, [pc, #16]	; (8002730 <StartTask03+0x3c8>)
 8002720:	f00b fe4c 	bl	800e3bc <iprintf>
 8002724:	e02e      	b.n	8002784 <StartTask03+0x41c>
 8002726:	bf00      	nop
 8002728:	20000808 	.word	0x20000808
 800272c:	2000080a 	.word	0x2000080a
 8002730:	08011c20 	.word	0x08011c20
		else if	((Tar_cmd_v_x>0) && (Tar_cmd_v_y<0)){Deg2Ste(Xbot_W,abs(Deg2Ste(Xbot_R,0))); Dir_Rot=SERVO_CW; printf("t03 %d\n", abs(Deg2Ste(Xbot_R,0)));}//the fourth quadrant
 8002734:	4bac      	ldr	r3, [pc, #688]	; (80029e8 <StartTask03+0x680>)
 8002736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800273a:	2b00      	cmp	r3, #0
 800273c:	dd22      	ble.n	8002784 <StartTask03+0x41c>
 800273e:	4bab      	ldr	r3, [pc, #684]	; (80029ec <StartTask03+0x684>)
 8002740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002744:	2b00      	cmp	r3, #0
 8002746:	da1d      	bge.n	8002784 <StartTask03+0x41c>
 8002748:	2100      	movs	r1, #0
 800274a:	2000      	movs	r0, #0
 800274c:	f7ff fdc6 	bl	80022dc <Deg2Ste>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	bfb8      	it	lt
 8002756:	425b      	neglt	r3, r3
 8002758:	b29b      	uxth	r3, r3
 800275a:	b21b      	sxth	r3, r3
 800275c:	4619      	mov	r1, r3
 800275e:	2001      	movs	r0, #1
 8002760:	f7ff fdbc 	bl	80022dc <Deg2Ste>
 8002764:	2300      	movs	r3, #0
 8002766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800276a:	2100      	movs	r1, #0
 800276c:	2000      	movs	r0, #0
 800276e:	f7ff fdb5 	bl	80022dc <Deg2Ste>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	bfb8      	it	lt
 8002778:	425b      	neglt	r3, r3
 800277a:	b29b      	uxth	r3, r3
 800277c:	4619      	mov	r1, r3
 800277e:	489c      	ldr	r0, [pc, #624]	; (80029f0 <StartTask03+0x688>)
 8002780:	f00b fe1c 	bl	800e3bc <iprintf>

		if((SteDeg>=0) && (SteDeg<=90)){//prevent from angle over range
 8002784:	4b9b      	ldr	r3, [pc, #620]	; (80029f4 <StartTask03+0x68c>)
 8002786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800278a:	2b00      	cmp	r3, #0
 800278c:	db5c      	blt.n	8002848 <StartTask03+0x4e0>
 800278e:	4b99      	ldr	r3, [pc, #612]	; (80029f4 <StartTask03+0x68c>)
 8002790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002794:	2b5a      	cmp	r3, #90	; 0x5a
 8002796:	dc57      	bgt.n	8002848 <StartTask03+0x4e0>
			DataSetSteering(buf, STMotorID1, Dir_Rot, SteDeg*100, SERVO_POS);
 8002798:	4b96      	ldr	r3, [pc, #600]	; (80029f4 <StartTask03+0x68c>)
 800279a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	0092      	lsls	r2, r2, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	461a      	mov	r2, r3
 80027a8:	0091      	lsls	r1, r2, #2
 80027aa:	461a      	mov	r2, r3
 80027ac:	460b      	mov	r3, r1
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80027b8:	2100      	movs	r1, #0
 80027ba:	9100      	str	r1, [sp, #0]
 80027bc:	2100      	movs	r1, #0
 80027be:	488e      	ldr	r0, [pc, #568]	; (80029f8 <StartTask03+0x690>)
 80027c0:	f000 ff08 	bl	80035d4 <DataSetSteering>
			DataSetSteering(buf, STMotorID2, Dir_Rot, SteDeg*100, SERVO_POS);
 80027c4:	4b8b      	ldr	r3, [pc, #556]	; (80029f4 <StartTask03+0x68c>)
 80027c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	0092      	lsls	r2, r2, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	461a      	mov	r2, r3
 80027d4:	0091      	lsls	r1, r2, #2
 80027d6:	461a      	mov	r2, r3
 80027d8:	460b      	mov	r3, r1
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80027e4:	2100      	movs	r1, #0
 80027e6:	9100      	str	r1, [sp, #0]
 80027e8:	2101      	movs	r1, #1
 80027ea:	4883      	ldr	r0, [pc, #524]	; (80029f8 <StartTask03+0x690>)
 80027ec:	f000 fef2 	bl	80035d4 <DataSetSteering>
			DataSetSteering(buf, STMotorID3, Dir_Rot, SteDeg*100, SERVO_POS);
 80027f0:	4b80      	ldr	r3, [pc, #512]	; (80029f4 <StartTask03+0x68c>)
 80027f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	0092      	lsls	r2, r2, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	461a      	mov	r2, r3
 8002800:	0091      	lsls	r1, r2, #2
 8002802:	461a      	mov	r2, r3
 8002804:	460b      	mov	r3, r1
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	b29b      	uxth	r3, r3
 800280c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002810:	2100      	movs	r1, #0
 8002812:	9100      	str	r1, [sp, #0]
 8002814:	2102      	movs	r1, #2
 8002816:	4878      	ldr	r0, [pc, #480]	; (80029f8 <StartTask03+0x690>)
 8002818:	f000 fedc 	bl	80035d4 <DataSetSteering>
			DataSetSteering(buf, STMotorID4, Dir_Rot, SteDeg*100, SERVO_POS);
 800281c:	4b75      	ldr	r3, [pc, #468]	; (80029f4 <StartTask03+0x68c>)
 800281e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002822:	b29b      	uxth	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	0092      	lsls	r2, r2, #2
 8002828:	4413      	add	r3, r2
 800282a:	461a      	mov	r2, r3
 800282c:	0091      	lsls	r1, r2, #2
 800282e:	461a      	mov	r2, r3
 8002830:	460b      	mov	r3, r1
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	b29b      	uxth	r3, r3
 8002838:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800283c:	2100      	movs	r1, #0
 800283e:	9100      	str	r1, [sp, #0]
 8002840:	2103      	movs	r1, #3
 8002842:	486d      	ldr	r0, [pc, #436]	; (80029f8 <StartTask03+0x690>)
 8002844:	f000 fec6 	bl	80035d4 <DataSetSteering>
		}
	//	printf("Mode A\n");
	}

	if(ModeABCD == 2){
 8002848:	4b6c      	ldr	r3, [pc, #432]	; (80029fc <StartTask03+0x694>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d15c      	bne.n	800290a <StartTask03+0x5a2>
//		SteDeg=rad2deg(ANGLE_VEL);
		Deg2Ste(Xbot_W,rad2deg(ANGLE_VEL));
 8002850:	ed9f 0b63 	vldr	d0, [pc, #396]	; 80029e0 <StartTask03+0x678>
 8002854:	f7fe ff7c 	bl	8001750 <rad2deg>
 8002858:	4603      	mov	r3, r0
 800285a:	4619      	mov	r1, r3
 800285c:	2001      	movs	r0, #1
 800285e:	f7ff fd3d 	bl	80022dc <Deg2Ste>
		DataSetSteering(buf, STMotorID1, SERVO_CCW, SteDeg*100, SERVO_POS);
 8002862:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <StartTask03+0x68c>)
 8002864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002868:	b29b      	uxth	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	4413      	add	r3, r2
 8002870:	461a      	mov	r2, r3
 8002872:	0091      	lsls	r1, r2, #2
 8002874:	461a      	mov	r2, r3
 8002876:	460b      	mov	r3, r1
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	b29b      	uxth	r3, r3
 800287e:	2200      	movs	r2, #0
 8002880:	9200      	str	r2, [sp, #0]
 8002882:	2201      	movs	r2, #1
 8002884:	2100      	movs	r1, #0
 8002886:	485c      	ldr	r0, [pc, #368]	; (80029f8 <StartTask03+0x690>)
 8002888:	f000 fea4 	bl	80035d4 <DataSetSteering>
		DataSetSteering(buf, STMotorID2, SERVO_CW, SteDeg*100, SERVO_POS);
 800288c:	4b59      	ldr	r3, [pc, #356]	; (80029f4 <StartTask03+0x68c>)
 800288e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002892:	b29b      	uxth	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	0092      	lsls	r2, r2, #2
 8002898:	4413      	add	r3, r2
 800289a:	461a      	mov	r2, r3
 800289c:	0091      	lsls	r1, r2, #2
 800289e:	461a      	mov	r2, r3
 80028a0:	460b      	mov	r3, r1
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2200      	movs	r2, #0
 80028aa:	9200      	str	r2, [sp, #0]
 80028ac:	2200      	movs	r2, #0
 80028ae:	2101      	movs	r1, #1
 80028b0:	4851      	ldr	r0, [pc, #324]	; (80029f8 <StartTask03+0x690>)
 80028b2:	f000 fe8f 	bl	80035d4 <DataSetSteering>
		DataSetSteering(buf, STMotorID3, SERVO_CW, SteDeg*100, SERVO_POS);
 80028b6:	4b4f      	ldr	r3, [pc, #316]	; (80029f4 <StartTask03+0x68c>)
 80028b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	0092      	lsls	r2, r2, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	461a      	mov	r2, r3
 80028c6:	0091      	lsls	r1, r2, #2
 80028c8:	461a      	mov	r2, r3
 80028ca:	460b      	mov	r3, r1
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2200      	movs	r2, #0
 80028d4:	9200      	str	r2, [sp, #0]
 80028d6:	2200      	movs	r2, #0
 80028d8:	2102      	movs	r1, #2
 80028da:	4847      	ldr	r0, [pc, #284]	; (80029f8 <StartTask03+0x690>)
 80028dc:	f000 fe7a 	bl	80035d4 <DataSetSteering>
		DataSetSteering(buf, STMotorID4, SERVO_CCW, SteDeg*100, SERVO_POS);
 80028e0:	4b44      	ldr	r3, [pc, #272]	; (80029f4 <StartTask03+0x68c>)
 80028e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	0092      	lsls	r2, r2, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	461a      	mov	r2, r3
 80028f0:	0091      	lsls	r1, r2, #2
 80028f2:	461a      	mov	r2, r3
 80028f4:	460b      	mov	r3, r1
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	2200      	movs	r2, #0
 80028fe:	9200      	str	r2, [sp, #0]
 8002900:	2201      	movs	r2, #1
 8002902:	2103      	movs	r1, #3
 8002904:	483c      	ldr	r0, [pc, #240]	; (80029f8 <StartTask03+0x690>)
 8002906:	f000 fe65 	bl	80035d4 <DataSetSteering>
		//printf("Mode B\n");
	}

	if(ModeABCD == 4){
 800290a:	4b3c      	ldr	r3, [pc, #240]	; (80029fc <StartTask03+0x694>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b04      	cmp	r3, #4
 8002910:	d15f      	bne.n	80029d2 <StartTask03+0x66a>
//		SteDeg=rad2deg(ANGLE_VEL);
		Deg2Ste(Xbot_W,rad2deg(ANGLE_VEL));
 8002912:	ed9f 0b33 	vldr	d0, [pc, #204]	; 80029e0 <StartTask03+0x678>
 8002916:	f7fe ff1b 	bl	8001750 <rad2deg>
 800291a:	4603      	mov	r3, r0
 800291c:	4619      	mov	r1, r3
 800291e:	2001      	movs	r0, #1
 8002920:	f7ff fcdc 	bl	80022dc <Deg2Ste>
		DataSetSteering(buf, STMotorID1, SERVO_CW, SteDeg*100, SERVO_POS);
 8002924:	4b33      	ldr	r3, [pc, #204]	; (80029f4 <StartTask03+0x68c>)
 8002926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800292a:	b29b      	uxth	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	0092      	lsls	r2, r2, #2
 8002930:	4413      	add	r3, r2
 8002932:	461a      	mov	r2, r3
 8002934:	0091      	lsls	r1, r2, #2
 8002936:	461a      	mov	r2, r3
 8002938:	460b      	mov	r3, r1
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	b29b      	uxth	r3, r3
 8002940:	2200      	movs	r2, #0
 8002942:	9200      	str	r2, [sp, #0]
 8002944:	2200      	movs	r2, #0
 8002946:	2100      	movs	r1, #0
 8002948:	482b      	ldr	r0, [pc, #172]	; (80029f8 <StartTask03+0x690>)
 800294a:	f000 fe43 	bl	80035d4 <DataSetSteering>
		DataSetSteering(buf, STMotorID2, SERVO_CCW, SteDeg*100, SERVO_POS);
 800294e:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <StartTask03+0x68c>)
 8002950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002954:	b29b      	uxth	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	0092      	lsls	r2, r2, #2
 800295a:	4413      	add	r3, r2
 800295c:	461a      	mov	r2, r3
 800295e:	0091      	lsls	r1, r2, #2
 8002960:	461a      	mov	r2, r3
 8002962:	460b      	mov	r3, r1
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	b29b      	uxth	r3, r3
 800296a:	2200      	movs	r2, #0
 800296c:	9200      	str	r2, [sp, #0]
 800296e:	2201      	movs	r2, #1
 8002970:	2101      	movs	r1, #1
 8002972:	4821      	ldr	r0, [pc, #132]	; (80029f8 <StartTask03+0x690>)
 8002974:	f000 fe2e 	bl	80035d4 <DataSetSteering>
		DataSetSteering(buf, STMotorID3, SERVO_CCW, SteDeg*100, SERVO_POS);
 8002978:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <StartTask03+0x68c>)
 800297a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800297e:	b29b      	uxth	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	0092      	lsls	r2, r2, #2
 8002984:	4413      	add	r3, r2
 8002986:	461a      	mov	r2, r3
 8002988:	0091      	lsls	r1, r2, #2
 800298a:	461a      	mov	r2, r3
 800298c:	460b      	mov	r3, r1
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	b29b      	uxth	r3, r3
 8002994:	2200      	movs	r2, #0
 8002996:	9200      	str	r2, [sp, #0]
 8002998:	2201      	movs	r2, #1
 800299a:	2102      	movs	r1, #2
 800299c:	4816      	ldr	r0, [pc, #88]	; (80029f8 <StartTask03+0x690>)
 800299e:	f000 fe19 	bl	80035d4 <DataSetSteering>
		DataSetSteering(buf, STMotorID4, SERVO_CW, SteDeg*100, SERVO_POS);
 80029a2:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <StartTask03+0x68c>)
 80029a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	0092      	lsls	r2, r2, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	461a      	mov	r2, r3
 80029b2:	0091      	lsls	r1, r2, #2
 80029b4:	461a      	mov	r2, r3
 80029b6:	460b      	mov	r3, r1
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2200      	movs	r2, #0
 80029c0:	9200      	str	r2, [sp, #0]
 80029c2:	2200      	movs	r2, #0
 80029c4:	2103      	movs	r1, #3
 80029c6:	480c      	ldr	r0, [pc, #48]	; (80029f8 <StartTask03+0x690>)
 80029c8:	f000 fe04 	bl	80035d4 <DataSetSteering>
		EndModeD = 0;
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <StartTask03+0x698>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
		//osDelay(10);
	//	printf("Mode D\n");
	}
	//osDelay(10);
	ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
 80029d2:	4809      	ldr	r0, [pc, #36]	; (80029f8 <StartTask03+0x690>)
 80029d4:	f000 fdd8 	bl	8003588 <ServoMotor_writeDMA>
	lastTime += PERIOD_STEERING;
 80029d8:	e5d0      	b.n	800257c <StartTask03+0x214>
 80029da:	bf00      	nop
 80029dc:	f3af 8000 	nop.w
 80029e0:	ccefcd31 	.word	0xccefcd31
 80029e4:	3fe7a426 	.word	0x3fe7a426
 80029e8:	20000808 	.word	0x20000808
 80029ec:	2000080a 	.word	0x2000080a
 80029f0:	08011c20 	.word	0x08011c20
 80029f4:	200007fe 	.word	0x200007fe
 80029f8:	20000060 	.word	0x20000060
 80029fc:	2000005c 	.word	0x2000005c
 8002a00:	20000806 	.word	0x20000806

08002a04 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	//StartTask04 is related ws2812b//
	uint32_t lastTime = osKernelGetTickCount();
 8002a0c:	f006 febc 	bl	8009788 <osKernelGetTickCount>
 8002a10:	60f8      	str	r0, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
		lastTime += PERIOD_NP_LED;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002a18:	60fb      	str	r3, [r7, #12]
		osDelayUntil(lastTime);
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f007 f867 	bl	8009aee <osDelayUntil>


		temp++;
 8002a20:	4bea      	ldr	r3, [pc, #936]	; (8002dcc <StartTask04+0x3c8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3301      	adds	r3, #1
 8002a26:	4ae9      	ldr	r2, [pc, #932]	; (8002dcc <StartTask04+0x3c8>)
 8002a28:	6013      	str	r3, [r2, #0]
		switch (temp) {
 8002a2a:	4be8      	ldr	r3, [pc, #928]	; (8002dcc <StartTask04+0x3c8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	2b07      	cmp	r3, #7
 8002a32:	f200 81c2 	bhi.w	8002dba <StartTask04+0x3b6>
 8002a36:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <StartTask04+0x38>)
 8002a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3c:	08002a5d 	.word	0x08002a5d
 8002a40:	08002abf 	.word	0x08002abf
 8002a44:	08002b21 	.word	0x08002b21
 8002a48:	08002b83 	.word	0x08002b83
 8002a4c:	08002be5 	.word	0x08002be5
 8002a50:	08002c5f 	.word	0x08002c5f
 8002a54:	08002cd9 	.word	0x08002cd9
 8002a58:	08002d3b 	.word	0x08002d3b
			case 1:
				//printf("case1\n");
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2100      	movs	r1, #0
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7fe fa36 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8002a68:	2300      	movs	r3, #0
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f7fe fa30 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 8002a74:	2300      	movs	r3, #0
 8002a76:	2200      	movs	r2, #0
 8002a78:	2101      	movs	r1, #1
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	f7fe fa2a 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8002a80:	2301      	movs	r3, #1
 8002a82:	2200      	movs	r2, #0
 8002a84:	2100      	movs	r1, #0
 8002a86:	2003      	movs	r0, #3
 8002a88:	f7fe fa24 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	2201      	movs	r2, #1
 8002a90:	2100      	movs	r1, #0
 8002a92:	2004      	movs	r0, #4
 8002a94:	f7fe fa1e 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	2005      	movs	r0, #5
 8002aa0:	f7fe fa18 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	2006      	movs	r0, #6
 8002aac:	f7fe fa12 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	2007      	movs	r0, #7
 8002ab8:	f7fe fa0c 	bl	8000ed4 <ws2812SetColor>
				break;
 8002abc:	e17d      	b.n	8002dba <StartTask04+0x3b6>
			case 2:
				//printf("case2\n");
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8002abe:	2301      	movs	r3, #1
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	2007      	movs	r0, #7
 8002ac6:	f7fe fa05 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8002aca:	2300      	movs	r3, #0
 8002acc:	2201      	movs	r2, #1
 8002ace:	2100      	movs	r1, #0
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f7fe f9ff 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2101      	movs	r1, #1
 8002adc:	2001      	movs	r0, #1
 8002ade:	f7fe f9f9 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2002      	movs	r0, #2
 8002aea:	f7fe f9f3 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8002aee:	2300      	movs	r3, #0
 8002af0:	2201      	movs	r2, #1
 8002af2:	2100      	movs	r1, #0
 8002af4:	2003      	movs	r0, #3
 8002af6:	f7fe f9ed 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 8002afa:	2300      	movs	r3, #0
 8002afc:	2200      	movs	r2, #0
 8002afe:	2101      	movs	r1, #1
 8002b00:	2004      	movs	r0, #4
 8002b02:	f7fe f9e7 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8002b06:	2301      	movs	r3, #1
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	2005      	movs	r0, #5
 8002b0e:	f7fe f9e1 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8002b12:	2300      	movs	r3, #0
 8002b14:	2201      	movs	r2, #1
 8002b16:	2100      	movs	r1, #0
 8002b18:	2006      	movs	r0, #6
 8002b1a:	f7fe f9db 	bl	8000ed4 <ws2812SetColor>
				break;
 8002b1e:	e14c      	b.n	8002dba <StartTask04+0x3b6>
			case 3:
				//printf("case3\n");
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8002b20:	2301      	movs	r3, #1
 8002b22:	2200      	movs	r2, #0
 8002b24:	2100      	movs	r1, #0
 8002b26:	2006      	movs	r0, #6
 8002b28:	f7fe f9d4 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	2201      	movs	r2, #1
 8002b30:	2100      	movs	r1, #0
 8002b32:	2007      	movs	r0, #7
 8002b34:	f7fe f9ce 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 8002b38:	2300      	movs	r3, #0
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f7fe f9c8 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8002b44:	2301      	movs	r3, #1
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f7fe f9c2 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8002b50:	2300      	movs	r3, #0
 8002b52:	2201      	movs	r2, #1
 8002b54:	2100      	movs	r1, #0
 8002b56:	2002      	movs	r0, #2
 8002b58:	f7fe f9bc 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2101      	movs	r1, #1
 8002b62:	2003      	movs	r0, #3
 8002b64:	f7fe f9b6 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8002b68:	2301      	movs	r3, #1
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	2004      	movs	r0, #4
 8002b70:	f7fe f9b0 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8002b74:	2300      	movs	r3, #0
 8002b76:	2201      	movs	r2, #1
 8002b78:	2100      	movs	r1, #0
 8002b7a:	2005      	movs	r0, #5
 8002b7c:	f7fe f9aa 	bl	8000ed4 <ws2812SetColor>
				break;
 8002b80:	e11b      	b.n	8002dba <StartTask04+0x3b6>
			case 4:
				//printf("case4\n");
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8002b82:	2301      	movs	r3, #1
 8002b84:	2200      	movs	r2, #0
 8002b86:	2100      	movs	r1, #0
 8002b88:	2005      	movs	r0, #5
 8002b8a:	f7fe f9a3 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8002b8e:	2300      	movs	r3, #0
 8002b90:	2201      	movs	r2, #1
 8002b92:	2100      	movs	r1, #0
 8002b94:	2006      	movs	r0, #6
 8002b96:	f7fe f99d 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	2007      	movs	r0, #7
 8002ba2:	f7fe f997 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2100      	movs	r1, #0
 8002bac:	2000      	movs	r0, #0
 8002bae:	f7fe f991 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f7fe f98b 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	2002      	movs	r0, #2
 8002bc6:	f7fe f985 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8002bca:	2301      	movs	r3, #1
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2100      	movs	r1, #0
 8002bd0:	2003      	movs	r0, #3
 8002bd2:	f7fe f97f 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2201      	movs	r2, #1
 8002bda:	2100      	movs	r1, #0
 8002bdc:	2004      	movs	r0, #4
 8002bde:	f7fe f979 	bl	8000ed4 <ws2812SetColor>
				break;
 8002be2:	e0ea      	b.n	8002dba <StartTask04+0x3b6>
			case 5:
				//printf("case5\n");
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8002be4:	2301      	movs	r3, #1
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	2004      	movs	r0, #4
 8002bec:	f7fe f972 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	2005      	movs	r0, #5
 8002bf8:	f7fe f96c 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2101      	movs	r1, #1
 8002c02:	2006      	movs	r0, #6
 8002c04:	f7fe f966 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8002c08:	2301      	movs	r3, #1
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	2007      	movs	r0, #7
 8002c10:	f7fe f960 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8002c14:	2300      	movs	r3, #0
 8002c16:	2201      	movs	r2, #1
 8002c18:	2100      	movs	r1, #0
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f7fe f95a 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 8002c20:	2300      	movs	r3, #0
 8002c22:	2200      	movs	r2, #0
 8002c24:	2101      	movs	r1, #1
 8002c26:	2001      	movs	r0, #1
 8002c28:	f7fe f954 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2100      	movs	r1, #0
 8002c32:	2002      	movs	r0, #2
 8002c34:	f7fe f94e 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8002c38:	2300      	movs	r3, #0
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	2003      	movs	r0, #3
 8002c40:	f7fe f948 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(8,0,0,1);//index, r, g, b
 8002c44:	2301      	movs	r3, #1
 8002c46:	2200      	movs	r2, #0
 8002c48:	2100      	movs	r1, #0
 8002c4a:	2008      	movs	r0, #8
 8002c4c:	f7fe f942 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(9,0,1,0);//index, r, g, b
 8002c50:	2300      	movs	r3, #0
 8002c52:	2201      	movs	r2, #1
 8002c54:	2100      	movs	r1, #0
 8002c56:	2009      	movs	r0, #9
 8002c58:	f7fe f93c 	bl	8000ed4 <ws2812SetColor>

				break;
 8002c5c:	e0ad      	b.n	8002dba <StartTask04+0x3b6>
			case 6:
				//printf("case6\n");
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8002c5e:	2301      	movs	r3, #1
 8002c60:	2200      	movs	r2, #0
 8002c62:	2100      	movs	r1, #0
 8002c64:	2003      	movs	r0, #3
 8002c66:	f7fe f935 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	2100      	movs	r1, #0
 8002c70:	2004      	movs	r0, #4
 8002c72:	f7fe f92f 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 8002c76:	2300      	movs	r3, #0
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	2005      	movs	r0, #5
 8002c7e:	f7fe f929 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8002c82:	2301      	movs	r3, #1
 8002c84:	2200      	movs	r2, #0
 8002c86:	2100      	movs	r1, #0
 8002c88:	2006      	movs	r0, #6
 8002c8a:	f7fe f923 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8002c8e:	2300      	movs	r3, #0
 8002c90:	2201      	movs	r2, #1
 8002c92:	2100      	movs	r1, #0
 8002c94:	2007      	movs	r0, #7
 8002c96:	f7fe f91d 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7fe f917 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2100      	movs	r1, #0
 8002cac:	2001      	movs	r0, #1
 8002cae:	f7fe f911 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	2002      	movs	r0, #2
 8002cba:	f7fe f90b 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(8,0,1,1);//index, r, g, b
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	2008      	movs	r0, #8
 8002cc6:	f7fe f905 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(9,1,1,0);//index, r, g, b
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2201      	movs	r2, #1
 8002cce:	2101      	movs	r1, #1
 8002cd0:	2009      	movs	r0, #9
 8002cd2:	f7fe f8ff 	bl	8000ed4 <ws2812SetColor>
				break;
 8002cd6:	e070      	b.n	8002dba <StartTask04+0x3b6>
			case 7:
				//printf("case7\n");
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8002cd8:	2301      	movs	r3, #1
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2100      	movs	r1, #0
 8002cde:	2002      	movs	r0, #2
 8002ce0:	f7fe f8f8 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	2100      	movs	r1, #0
 8002cea:	2003      	movs	r0, #3
 8002cec:	f7fe f8f2 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	2004      	movs	r0, #4
 8002cf8:	f7fe f8ec 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2100      	movs	r1, #0
 8002d02:	2005      	movs	r0, #5
 8002d04:	f7fe f8e6 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8002d08:	2300      	movs	r3, #0
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	2006      	movs	r0, #6
 8002d10:	f7fe f8e0 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 8002d14:	2300      	movs	r3, #0
 8002d16:	2200      	movs	r2, #0
 8002d18:	2101      	movs	r1, #1
 8002d1a:	2007      	movs	r0, #7
 8002d1c:	f7fe f8da 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8002d20:	2301      	movs	r3, #1
 8002d22:	2200      	movs	r2, #0
 8002d24:	2100      	movs	r1, #0
 8002d26:	2000      	movs	r0, #0
 8002d28:	f7fe f8d4 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2201      	movs	r2, #1
 8002d30:	2100      	movs	r1, #0
 8002d32:	2001      	movs	r0, #1
 8002d34:	f7fe f8ce 	bl	8000ed4 <ws2812SetColor>
				break;
 8002d38:	e03f      	b.n	8002dba <StartTask04+0x3b6>
			case 8:
				//printf("case8\n");
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2100      	movs	r1, #0
 8002d40:	2001      	movs	r0, #1
 8002d42:	f7fe f8c7 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8002d46:	2300      	movs	r3, #0
 8002d48:	2201      	movs	r2, #1
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	2002      	movs	r0, #2
 8002d4e:	f7fe f8c1 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 8002d52:	2300      	movs	r3, #0
 8002d54:	2200      	movs	r2, #0
 8002d56:	2101      	movs	r1, #1
 8002d58:	2003      	movs	r0, #3
 8002d5a:	f7fe f8bb 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8002d5e:	2301      	movs	r3, #1
 8002d60:	2200      	movs	r2, #0
 8002d62:	2100      	movs	r1, #0
 8002d64:	2004      	movs	r0, #4
 8002d66:	f7fe f8b5 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	2100      	movs	r1, #0
 8002d70:	2005      	movs	r0, #5
 8002d72:	f7fe f8af 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 8002d76:	2300      	movs	r3, #0
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	2006      	movs	r0, #6
 8002d7e:	f7fe f8a9 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8002d82:	2301      	movs	r3, #1
 8002d84:	2200      	movs	r2, #0
 8002d86:	2100      	movs	r1, #0
 8002d88:	2007      	movs	r0, #7
 8002d8a:	f7fe f8a3 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2201      	movs	r2, #1
 8002d92:	2100      	movs	r1, #0
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7fe f89d 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(8,1,1,1);//index, r, g, b
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	2101      	movs	r1, #1
 8002da0:	2008      	movs	r0, #8
 8002da2:	f7fe f897 	bl	8000ed4 <ws2812SetColor>
				ws2812SetColor(9,1,1,1);//index, r, g, b
 8002da6:	2301      	movs	r3, #1
 8002da8:	2201      	movs	r2, #1
 8002daa:	2101      	movs	r1, #1
 8002dac:	2009      	movs	r0, #9
 8002dae:	f7fe f891 	bl	8000ed4 <ws2812SetColor>
				temp=1;
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <StartTask04+0x3c8>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
				break;
 8002db8:	bf00      	nop
		}

		ws2812AllColor(0,0,0);//r, g, b
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f7fe f8e0 	bl	8000f84 <ws2812AllColor>
		ws2812NumOn(NUM_NPLED);
 8002dc4:	2018      	movs	r0, #24
 8002dc6:	f7fe f871 	bl	8000eac <ws2812NumOn>
  {
 8002dca:	e622      	b.n	8002a12 <StartTask04+0xe>
 8002dcc:	20000864 	.word	0x20000864

08002dd0 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	uint32_t lastTime = osKernelGetTickCount();
 8002dd8:	f006 fcd6 	bl	8009788 <osKernelGetTickCount>
 8002ddc:	60f8      	str	r0, [r7, #12]

	fanInit();
 8002dde:	f7fe fc77 	bl	80016d0 <fanInit>

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_FAN;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002de8:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f006 fe7f 	bl	8009aee <osDelayUntil>
	fanOn(30);
 8002df0:	201e      	movs	r0, #30
 8002df2:	f7fe fc77 	bl	80016e4 <fanOn>
	lastTime += PERIOD_FAN;
 8002df6:	e7f4      	b.n	8002de2 <StartTask05+0x12>

08002df8 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8002df8:	b5b0      	push	{r4, r5, r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
//	uint8_t EndInit = 0;
	//uint32_t lastTime = osKernelGetTickCount();
	//osDelay(10);//for printf();
	printf("StartTask06 %d: \n", PS_SIGx_Pin);
 8002e00:	4b58      	ldr	r3, [pc, #352]	; (8002f64 <StartTask06+0x16c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	4619      	mov	r1, r3
 8002e06:	4858      	ldr	r0, [pc, #352]	; (8002f68 <StartTask06+0x170>)
 8002e08:	f00b fad8 	bl	800e3bc <iprintf>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8002e0c:	200a      	movs	r0, #10
 8002e0e:	f006 fe53 	bl	8009ab8 <osDelay>
	  printf("%d: t06\n", osKernelGetTickCount());
 8002e12:	f006 fcb9 	bl	8009788 <osKernelGetTickCount>
 8002e16:	4603      	mov	r3, r0
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4854      	ldr	r0, [pc, #336]	; (8002f6c <StartTask06+0x174>)
 8002e1c:	f00b face 	bl	800e3bc <iprintf>
	if(PS_SIGx_Pin&1){//1ch init
 8002e20:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <StartTask06+0x16c>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d018      	beq.n	8002e5e <StartTask06+0x66>
		PS_SIGx_Pin &= ~(1); printf(" PS_SIG1_stop.\n");
 8002e2c:	4b4d      	ldr	r3, [pc, #308]	; (8002f64 <StartTask06+0x16c>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4b4b      	ldr	r3, [pc, #300]	; (8002f64 <StartTask06+0x16c>)
 8002e38:	701a      	strb	r2, [r3, #0]
 8002e3a:	484d      	ldr	r0, [pc, #308]	; (8002f70 <StartTask06+0x178>)
 8002e3c:	f00b fb44 	bl	800e4c8 <puts>
		EndInit |= 1;
 8002e40:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <StartTask06+0x17c>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	4b4a      	ldr	r3, [pc, #296]	; (8002f74 <StartTask06+0x17c>)
 8002e4c:	701a      	strb	r2, [r3, #0]
		DataSetSteering(buf, 0, SERVO_CCW, 0, 0);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	2300      	movs	r3, #0
 8002e54:	2201      	movs	r2, #1
 8002e56:	2100      	movs	r1, #0
 8002e58:	4847      	ldr	r0, [pc, #284]	; (8002f78 <StartTask06+0x180>)
 8002e5a:	f000 fbbb 	bl	80035d4 <DataSetSteering>
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
	}

	if(PS_SIGx_Pin&2){//2ch init
 8002e5e:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <StartTask06+0x16c>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d018      	beq.n	8002e9c <StartTask06+0xa4>
		PS_SIGx_Pin &= ~(2); printf(" PS_SIG2_stop.\n");
 8002e6a:	4b3e      	ldr	r3, [pc, #248]	; (8002f64 <StartTask06+0x16c>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	f023 0302 	bic.w	r3, r3, #2
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <StartTask06+0x16c>)
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	4840      	ldr	r0, [pc, #256]	; (8002f7c <StartTask06+0x184>)
 8002e7a:	f00b fb25 	bl	800e4c8 <puts>
		DataSetSteering(buf, 1, SERVO_CCW, 0, 0);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	2300      	movs	r3, #0
 8002e84:	2201      	movs	r2, #1
 8002e86:	2101      	movs	r1, #1
 8002e88:	483b      	ldr	r0, [pc, #236]	; (8002f78 <StartTask06+0x180>)
 8002e8a:	f000 fba3 	bl	80035d4 <DataSetSteering>
		EndInit |= 2;
 8002e8e:	4b39      	ldr	r3, [pc, #228]	; (8002f74 <StartTask06+0x17c>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	f043 0302 	orr.w	r3, r3, #2
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	4b36      	ldr	r3, [pc, #216]	; (8002f74 <StartTask06+0x17c>)
 8002e9a:	701a      	strb	r2, [r3, #0]
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
	}
	if(PS_SIGx_Pin&4){//3ch init
 8002e9c:	4b31      	ldr	r3, [pc, #196]	; (8002f64 <StartTask06+0x16c>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d018      	beq.n	8002eda <StartTask06+0xe2>
		PS_SIGx_Pin &= ~(4); printf(" PS_SIG3_stop.\n");
 8002ea8:	4b2e      	ldr	r3, [pc, #184]	; (8002f64 <StartTask06+0x16c>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	f023 0304 	bic.w	r3, r3, #4
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <StartTask06+0x16c>)
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	4832      	ldr	r0, [pc, #200]	; (8002f80 <StartTask06+0x188>)
 8002eb8:	f00b fb06 	bl	800e4c8 <puts>
		DataSetSteering(buf, 2, SERVO_CCW, 0, 0);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	482c      	ldr	r0, [pc, #176]	; (8002f78 <StartTask06+0x180>)
 8002ec8:	f000 fb84 	bl	80035d4 <DataSetSteering>
		EndInit |= 4;
 8002ecc:	4b29      	ldr	r3, [pc, #164]	; (8002f74 <StartTask06+0x17c>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	f043 0304 	orr.w	r3, r3, #4
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <StartTask06+0x17c>)
 8002ed8:	701a      	strb	r2, [r3, #0]
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
	}	if(PS_SIGx_Pin&8){//4ch init
 8002eda:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <StartTask06+0x16c>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d01e      	beq.n	8002f24 <StartTask06+0x12c>
		PS_SIGx_Pin &= ~(8); printf(" PS_SIG4_stop.\n");
 8002ee6:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <StartTask06+0x16c>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	f023 0308 	bic.w	r3, r3, #8
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <StartTask06+0x16c>)
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	4823      	ldr	r0, [pc, #140]	; (8002f84 <StartTask06+0x18c>)
 8002ef6:	f00b fae7 	bl	800e4c8 <puts>
		DataSetSteering(buf, 3, SERVO_CCW, 0, 0);
 8002efa:	2300      	movs	r3, #0
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	2300      	movs	r3, #0
 8002f00:	2201      	movs	r2, #1
 8002f02:	2103      	movs	r1, #3
 8002f04:	481c      	ldr	r0, [pc, #112]	; (8002f78 <StartTask06+0x180>)
 8002f06:	f000 fb65 	bl	80035d4 <DataSetSteering>
		EndInit |= 8;
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <StartTask06+0x17c>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	f043 0308 	orr.w	r3, r3, #8
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <StartTask06+0x17c>)
 8002f16:	701a      	strb	r2, [r3, #0]
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
		printf("EndInit %d\n", EndInit);
 8002f18:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <StartTask06+0x17c>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	481a      	ldr	r0, [pc, #104]	; (8002f88 <StartTask06+0x190>)
 8002f20:	f00b fa4c 	bl	800e3bc <iprintf>
	}
	if(EndInit == 15) {
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <StartTask06+0x17c>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b0f      	cmp	r3, #15
 8002f2a:	f47f af6f 	bne.w	8002e0c <StartTask06+0x14>

		GPIO_disableirq();
 8002f2e:	f000 f975 	bl	800321c <GPIO_disableirq>
		STinitdone++;
 8002f32:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <StartTask06+0x194>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	3301      	adds	r3, #1
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <StartTask06+0x194>)
 8002f3c:	701a      	strb	r2, [r3, #0]
		printf("%d: EndInit == 15. %d, %d\n", osKernelGetTickCount(), osThreadFlagsWait(1, 0, osWaitForever), osThreadFlagsGet());
 8002f3e:	f006 fc23 	bl	8009788 <osKernelGetTickCount>
 8002f42:	4604      	mov	r4, r0
 8002f44:	f04f 32ff 	mov.w	r2, #4294967295
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	f006 fd33 	bl	80099b6 <osThreadFlagsWait>
 8002f50:	4605      	mov	r5, r0
 8002f52:	f006 fd0f 	bl	8009974 <osThreadFlagsGet>
 8002f56:	4603      	mov	r3, r0
 8002f58:	462a      	mov	r2, r5
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	480c      	ldr	r0, [pc, #48]	; (8002f90 <StartTask06+0x198>)
 8002f5e:	f00b fa2d 	bl	800e3bc <iprintf>
	  osDelay(10);
 8002f62:	e753      	b.n	8002e0c <StartTask06+0x14>
 8002f64:	200007fc 	.word	0x200007fc
 8002f68:	08011c28 	.word	0x08011c28
 8002f6c:	08011c3c 	.word	0x08011c3c
 8002f70:	08011c48 	.word	0x08011c48
 8002f74:	20000832 	.word	0x20000832
 8002f78:	20000060 	.word	0x20000060
 8002f7c:	08011c58 	.word	0x08011c58
 8002f80:	08011c68 	.word	0x08011c68
 8002f84:	08011c78 	.word	0x08011c78
 8002f88:	08011c88 	.word	0x08011c88
 8002f8c:	20000801 	.word	0x20000801
 8002f90:	08011c94 	.word	0x08011c94

08002f94 <VelStopTimerCallback>:
  /* USER CODE END StartTask06 */
}

/* VelStopTimerCallback function */
void VelStopTimerCallback(void *argument)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN VelStopTimerCallback */
	if(Pre_Stop_flag != Stop_flag){Pre_Stop_flag = Stop_flag;}
 8002f9c:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <VelStopTimerCallback+0x30>)
 8002f9e:	881a      	ldrh	r2, [r3, #0]
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <VelStopTimerCallback+0x34>)
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d004      	beq.n	8002fb2 <VelStopTimerCallback+0x1e>
 8002fa8:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <VelStopTimerCallback+0x34>)
 8002faa:	881a      	ldrh	r2, [r3, #0]
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <VelStopTimerCallback+0x30>)
 8002fae:	801a      	strh	r2, [r3, #0]
	else {Stop_flag = 0;	}
  /* USER CODE END VelStopTimerCallback */
}
 8002fb0:	e002      	b.n	8002fb8 <VelStopTimerCallback+0x24>
	else {Stop_flag = 0;	}
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <VelStopTimerCallback+0x34>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	801a      	strh	r2, [r3, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	20000804 	.word	0x20000804
 8002fc8:	20000802 	.word	0x20000802

08002fcc <EndModeDTimerCallback>:

/* EndModeDTimerCallback function */
void EndModeDTimerCallback(void *argument)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EndModeDTimerCallback */
	EndModeD = 1;
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <EndModeDTimerCallback+0x20>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
	timerflag = 1;
 8002fda:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <EndModeDTimerCallback+0x24>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EndModeDTimerCallback */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	20000806 	.word	0x20000806
 8002ff0:	2000005d 	.word	0x2000005d

08002ff4 <SendCanTimerCallback>:

/* SendCanTimerCallback function */
void SendCanTimerCallback(void *argument)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SendCanTimerCallback */
	//send can message by 10hz
	Vel_PDOMsg(1, TxPDO0, Tar_cmd_FL, Tar_cmd_FR);
 8002ffc:	4b18      	ldr	r3, [pc, #96]	; (8003060 <SendCanTimerCallback+0x6c>)
 8002ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003002:	461a      	mov	r2, r3
 8003004:	4b17      	ldr	r3, [pc, #92]	; (8003064 <SendCanTimerCallback+0x70>)
 8003006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800300a:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800300e:	2001      	movs	r0, #1
 8003010:	f7fe fa74 	bl	80014fc <Vel_PDOMsg>
	Vel_PDOMsg(2, TxPDO0, Tar_cmd_RL, Tar_cmd_RR);
 8003014:	4b14      	ldr	r3, [pc, #80]	; (8003068 <SendCanTimerCallback+0x74>)
 8003016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800301a:	461a      	mov	r2, r3
 800301c:	4b13      	ldr	r3, [pc, #76]	; (800306c <SendCanTimerCallback+0x78>)
 800301e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003022:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8003026:	2002      	movs	r0, #2
 8003028:	f7fe fa68 	bl	80014fc <Vel_PDOMsg>

	sendCan(0x7D1, sendcanbuf, 8, 0);//(uint32_t ID, uint8_t data[8], uint8_t len, uint8_t ext)
 800302c:	2300      	movs	r3, #0
 800302e:	2208      	movs	r2, #8
 8003030:	490f      	ldr	r1, [pc, #60]	; (8003070 <SendCanTimerCallback+0x7c>)
 8003032:	f240 70d1 	movw	r0, #2001	; 0x7d1
 8003036:	f7fe f8d3 	bl	80011e0 <sendCan>
	for(int i=0;i<8;i++){canbuf[i]=0;}
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	e007      	b.n	8003050 <SendCanTimerCallback+0x5c>
 8003040:	4a0c      	ldr	r2, [pc, #48]	; (8003074 <SendCanTimerCallback+0x80>)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4413      	add	r3, r2
 8003046:	2200      	movs	r2, #0
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3301      	adds	r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b07      	cmp	r3, #7
 8003054:	ddf4      	ble.n	8003040 <SendCanTimerCallback+0x4c>
  /* USER CODE END SendCanTimerCallback */
}
 8003056:	bf00      	nop
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000824 	.word	0x20000824
 8003064:	20000826 	.word	0x20000826
 8003068:	20000828 	.word	0x20000828
 800306c:	2000082a 	.word	0x2000082a
 8003070:	20000818 	.word	0x20000818
 8003074:	20000810 	.word	0x20000810

08003078 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	; 0x28
 800307c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307e:	f107 0314 	add.w	r3, r7, #20
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	60da      	str	r2, [r3, #12]
 800308c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	4b5d      	ldr	r3, [pc, #372]	; (8003208 <MX_GPIO_Init+0x190>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	4a5c      	ldr	r2, [pc, #368]	; (8003208 <MX_GPIO_Init+0x190>)
 8003098:	f043 0304 	orr.w	r3, r3, #4
 800309c:	6313      	str	r3, [r2, #48]	; 0x30
 800309e:	4b5a      	ldr	r3, [pc, #360]	; (8003208 <MX_GPIO_Init+0x190>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	4b56      	ldr	r3, [pc, #344]	; (8003208 <MX_GPIO_Init+0x190>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	4a55      	ldr	r2, [pc, #340]	; (8003208 <MX_GPIO_Init+0x190>)
 80030b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ba:	4b53      	ldr	r3, [pc, #332]	; (8003208 <MX_GPIO_Init+0x190>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	4b4f      	ldr	r3, [pc, #316]	; (8003208 <MX_GPIO_Init+0x190>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4a4e      	ldr	r2, [pc, #312]	; (8003208 <MX_GPIO_Init+0x190>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b4c      	ldr	r3, [pc, #304]	; (8003208 <MX_GPIO_Init+0x190>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	4b48      	ldr	r3, [pc, #288]	; (8003208 <MX_GPIO_Init+0x190>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	4a47      	ldr	r2, [pc, #284]	; (8003208 <MX_GPIO_Init+0x190>)
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	6313      	str	r3, [r2, #48]	; 0x30
 80030f2:	4b45      	ldr	r3, [pc, #276]	; (8003208 <MX_GPIO_Init+0x190>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	4b41      	ldr	r3, [pc, #260]	; (8003208 <MX_GPIO_Init+0x190>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a40      	ldr	r2, [pc, #256]	; (8003208 <MX_GPIO_Init+0x190>)
 8003108:	f043 0308 	orr.w	r3, r3, #8
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b3e      	ldr	r3, [pc, #248]	; (8003208 <MX_GPIO_Init+0x190>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 800311a:	2200      	movs	r2, #0
 800311c:	f64f 413e 	movw	r1, #64574	; 0xfc3e
 8003120:	483a      	ldr	r0, [pc, #232]	; (800320c <MX_GPIO_Init+0x194>)
 8003122:	f002 fed9 	bl	8005ed8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_DE_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 8003126:	2200      	movs	r2, #0
 8003128:	f244 0110 	movw	r1, #16400	; 0x4010
 800312c:	4838      	ldr	r0, [pc, #224]	; (8003210 <MX_GPIO_Init+0x198>)
 800312e:	f002 fed3 	bl	8005ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8003132:	2200      	movs	r2, #0
 8003134:	2104      	movs	r1, #4
 8003136:	4837      	ldr	r0, [pc, #220]	; (8003214 <MX_GPIO_Init+0x19c>)
 8003138:	f002 fece 	bl	8005ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC1
                           PC2 PC3 PC4 PC5
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 800313c:	f64f 433e 	movw	r3, #64574	; 0xfc3e
 8003140:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003142:	2301      	movs	r3, #1
 8003144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314a:	2300      	movs	r3, #0
 800314c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800314e:	f107 0314 	add.w	r3, r7, #20
 8003152:	4619      	mov	r1, r3
 8003154:	482d      	ldr	r0, [pc, #180]	; (800320c <MX_GPIO_Init+0x194>)
 8003156:	f002 fd0b 	bl	8005b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800315a:	2301      	movs	r3, #1
 800315c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800315e:	2303      	movs	r3, #3
 8003160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003166:	f107 0314 	add.w	r3, r7, #20
 800316a:	4619      	mov	r1, r3
 800316c:	4827      	ldr	r0, [pc, #156]	; (800320c <MX_GPIO_Init+0x194>)
 800316e:	f002 fcff 	bl	8005b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PS_SIG1_Pin|PS_SIG2_Pin|PS_SIG3_Pin;
 8003172:	2370      	movs	r3, #112	; 0x70
 8003174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003176:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800317a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	4619      	mov	r1, r3
 8003186:	4824      	ldr	r0, [pc, #144]	; (8003218 <MX_GPIO_Init+0x1a0>)
 8003188:	f002 fcf2 	bl	8005b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS_SIG4_Pin;
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003190:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003196:	2301      	movs	r3, #1
 8003198:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS_SIG4_GPIO_Port, &GPIO_InitStruct);
 800319a:	f107 0314 	add.w	r3, r7, #20
 800319e:	4619      	mov	r1, r3
 80031a0:	481d      	ldr	r0, [pc, #116]	; (8003218 <MX_GPIO_Init+0x1a0>)
 80031a2:	f002 fce5 	bl	8005b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 */
  GPIO_InitStruct.Pin = RS485_DE_Pin|GPIO_PIN_4;
 80031a6:	f244 0310 	movw	r3, #16400	; 0x4010
 80031aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ac:	2301      	movs	r3, #1
 80031ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b4:	2300      	movs	r3, #0
 80031b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4619      	mov	r1, r3
 80031be:	4814      	ldr	r0, [pc, #80]	; (8003210 <MX_GPIO_Init+0x198>)
 80031c0:	f002 fcd6 	bl	8005b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031c4:	2304      	movs	r3, #4
 80031c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c8:	2301      	movs	r3, #1
 80031ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d0:	2300      	movs	r3, #0
 80031d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031d4:	f107 0314 	add.w	r3, r7, #20
 80031d8:	4619      	mov	r1, r3
 80031da:	480e      	ldr	r0, [pc, #56]	; (8003214 <MX_GPIO_Init+0x19c>)
 80031dc:	f002 fcc8 	bl	8005b70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80031e0:	2200      	movs	r2, #0
 80031e2:	2105      	movs	r1, #5
 80031e4:	200a      	movs	r0, #10
 80031e6:	f002 f889 	bl	80052fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80031ea:	200a      	movs	r0, #10
 80031ec:	f002 f8a2 	bl	8005334 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80031f0:	2200      	movs	r2, #0
 80031f2:	2105      	movs	r1, #5
 80031f4:	2017      	movs	r0, #23
 80031f6:	f002 f881 	bl	80052fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80031fa:	2017      	movs	r0, #23
 80031fc:	f002 f89a 	bl	8005334 <HAL_NVIC_EnableIRQ>

}
 8003200:	bf00      	nop
 8003202:	3728      	adds	r7, #40	; 0x28
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40023800 	.word	0x40023800
 800320c:	40020800 	.word	0x40020800
 8003210:	40020400 	.word	0x40020400
 8003214:	40020c00 	.word	0x40020c00
 8003218:	40020000 	.word	0x40020000

0800321c <GPIO_disableirq>:

/* USER CODE BEGIN 2 */
void GPIO_disableirq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8003220:	200a      	movs	r0, #10
 8003222:	f002 f895 	bl	8005350 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8003226:	2017      	movs	r0, #23
 8003228:	f002 f892 	bl	8005350 <HAL_NVIC_DisableIRQ>
}
 800322c:	bf00      	nop
 800322e:	bd80      	pop	{r7, pc}

08003230 <GPIO_enableirq>:

void GPIO_enableirq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
	  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003234:	2200      	movs	r2, #0
 8003236:	2105      	movs	r1, #5
 8003238:	200a      	movs	r0, #10
 800323a:	f002 f85f 	bl	80052fc <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800323e:	200a      	movs	r0, #10
 8003240:	f002 f878 	bl	8005334 <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003244:	2200      	movs	r2, #0
 8003246:	2105      	movs	r1, #5
 8003248:	2017      	movs	r0, #23
 800324a:	f002 f857 	bl	80052fc <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800324e:	2017      	movs	r0, #23
 8003250:	f002 f870 	bl	8005334 <HAL_NVIC_EnableIRQ>
}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}

08003258 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 800325c:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <MX_I2C1_SMBUS_Init+0x68>)
 800325e:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <MX_I2C1_SMBUS_Init+0x6c>)
 8003260:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.ClockSpeed = 100000;
 8003262:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <MX_I2C1_SMBUS_Init+0x68>)
 8003264:	4a18      	ldr	r2, [pc, #96]	; (80032c8 <MX_I2C1_SMBUS_Init+0x70>)
 8003266:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.OwnAddress1 = 0;
 8003268:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <MX_I2C1_SMBUS_Init+0x68>)
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 800326e:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <MX_I2C1_SMBUS_Init+0x68>)
 8003270:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003274:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <MX_I2C1_SMBUS_Init+0x68>)
 8003278:	2200      	movs	r2, #0
 800327a:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <MX_I2C1_SMBUS_Init+0x68>)
 800327e:	2200      	movs	r2, #0
 8003280:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8003282:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <MX_I2C1_SMBUS_Init+0x68>)
 8003284:	2200      	movs	r2, #0
 8003286:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <MX_I2C1_SMBUS_Init+0x68>)
 800328a:	2200      	movs	r2, #0
 800328c:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 800328e:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <MX_I2C1_SMBUS_Init+0x68>)
 8003290:	2200      	movs	r2, #0
 8003292:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8003294:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <MX_I2C1_SMBUS_Init+0x68>)
 8003296:	2202      	movs	r2, #2
 8003298:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 800329a:	4809      	ldr	r0, [pc, #36]	; (80032c0 <MX_I2C1_SMBUS_Init+0x68>)
 800329c:	f003 faf2 	bl	8006884 <HAL_SMBUS_Init>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_I2C1_SMBUS_Init+0x52>
  {
    Error_Handler();
 80032a6:	f000 f93f 	bl	8003528 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 80032aa:	4805      	ldr	r0, [pc, #20]	; (80032c0 <MX_I2C1_SMBUS_Init+0x68>)
 80032ac:	f003 fba0 	bl	80069f0 <HAL_SMBUS_EnableAlert_IT>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 80032b6:	f000 f937 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000868 	.word	0x20000868
 80032c4:	40005400 	.word	0x40005400
 80032c8:	000186a0 	.word	0x000186a0

080032cc <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	; 0x28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  if(smbusHandle->Instance==I2C1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a19      	ldr	r2, [pc, #100]	; (8003350 <HAL_SMBUS_MspInit+0x84>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d12b      	bne.n	8003346 <HAL_SMBUS_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	4b18      	ldr	r3, [pc, #96]	; (8003354 <HAL_SMBUS_MspInit+0x88>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4a17      	ldr	r2, [pc, #92]	; (8003354 <HAL_SMBUS_MspInit+0x88>)
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <HAL_SMBUS_MspInit+0x88>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB5     ------> I2C1_SMBA
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800330a:	23e0      	movs	r3, #224	; 0xe0
 800330c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800330e:	2312      	movs	r3, #18
 8003310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003316:	2303      	movs	r3, #3
 8003318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800331a:	2304      	movs	r3, #4
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331e:	f107 0314 	add.w	r3, r7, #20
 8003322:	4619      	mov	r1, r3
 8003324:	480c      	ldr	r0, [pc, #48]	; (8003358 <HAL_SMBUS_MspInit+0x8c>)
 8003326:	f002 fc23 	bl	8005b70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_SMBUS_MspInit+0x88>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a08      	ldr	r2, [pc, #32]	; (8003354 <HAL_SMBUS_MspInit+0x88>)
 8003334:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003338:	6413      	str	r3, [r2, #64]	; 0x40
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_SMBUS_MspInit+0x88>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003346:	bf00      	nop
 8003348:	3728      	adds	r7, #40	; 0x28
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40005400 	.word	0x40005400
 8003354:	40023800 	.word	0x40023800
 8003358:	40020400 	.word	0x40020400

0800335c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003364:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003368:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003374:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003378:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800337c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00b      	beq.n	800339c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003384:	e000      	b.n	8003388 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003386:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003388:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f9      	beq.n	8003386 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003392:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800339c:	687b      	ldr	r3, [r7, #4]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)//485 task for nuri motor must change uart port
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b086      	sub	sp, #24
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit_DMA(&huart2, (uint8_t *)ptr, (uint16_t)len);
//	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, (uint16_t)len, 100);
//	return (len);
//
	for(int i = 0; i < len; i++)
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e009      	b.n	80033d0 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	60ba      	str	r2, [r7, #8]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ffc9 	bl	800335c <ITM_SendChar>
	for(int i = 0; i < len; i++)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	3301      	adds	r3, #1
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	dbf1      	blt.n	80033bc <_write+0x12>
	}
	return len;
 80033d8:	687b      	ldr	r3, [r7, #4]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033e6:	f000 ffaf 	bl	8004348 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);//must be for stabilization of EXTI
 80033ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033ee:	f000 ffed 	bl	80043cc <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033f2:	f000 f81d 	bl	8003430 <SystemClock_Config>
  MX_TIM3_Init();
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033f6:	f7ff fe3f 	bl	8003078 <MX_GPIO_Init>
  GPIO_disableirq();
 80033fa:	f7ff ff0f 	bl	800321c <GPIO_disableirq>
  MX_CAN1_Init();
 80033fe:	f7fd fe0f 	bl	8001020 <MX_CAN1_Init>
  CAN_disableirq();
 8003402:	f7fd fe93 	bl	800112c <CAN_disableirq>
  MX_TIM1_Init();
 8003406:	f000 faff 	bl	8003a08 <MX_TIM1_Init>
  MX_I2C1_SMBUS_Init();
 800340a:	f7ff ff25 	bl	8003258 <MX_I2C1_SMBUS_Init>
  MX_DMA_Init();
 800340e:	f7fe f921 	bl	8001654 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003412:	f000 fe53 	bl	80040bc <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8003416:	f000 fe27 	bl	8004068 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 800341a:	f000 fc23 	bl	8003c64 <MX_TIM8_Init>
  MX_TIM3_Init();
 800341e:	f000 fba5 	bl	8003b6c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003422:	f006 f967 	bl	80096f4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003426:	f7fe fa05 	bl	8001834 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800342a:	f006 f987 	bl	800973c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800342e:	e7fe      	b.n	800342e <main+0x4c>

08003430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b094      	sub	sp, #80	; 0x50
 8003434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003436:	f107 0320 	add.w	r3, r7, #32
 800343a:	2230      	movs	r2, #48	; 0x30
 800343c:	2100      	movs	r1, #0
 800343e:	4618      	mov	r0, r3
 8003440:	f00a fab5 	bl	800d9ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003444:	f107 030c 	add.w	r3, r7, #12
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003454:	2300      	movs	r3, #0
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	4b28      	ldr	r3, [pc, #160]	; (80034fc <SystemClock_Config+0xcc>)
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	4a27      	ldr	r2, [pc, #156]	; (80034fc <SystemClock_Config+0xcc>)
 800345e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003462:	6413      	str	r3, [r2, #64]	; 0x40
 8003464:	4b25      	ldr	r3, [pc, #148]	; (80034fc <SystemClock_Config+0xcc>)
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003470:	2300      	movs	r3, #0
 8003472:	607b      	str	r3, [r7, #4]
 8003474:	4b22      	ldr	r3, [pc, #136]	; (8003500 <SystemClock_Config+0xd0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a21      	ldr	r2, [pc, #132]	; (8003500 <SystemClock_Config+0xd0>)
 800347a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b1f      	ldr	r3, [pc, #124]	; (8003500 <SystemClock_Config+0xd0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800348c:	2301      	movs	r3, #1
 800348e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003496:	2302      	movs	r3, #2
 8003498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800349a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800349e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80034a0:	2306      	movs	r3, #6
 80034a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80034a4:	23a8      	movs	r3, #168	; 0xa8
 80034a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034a8:	2302      	movs	r3, #2
 80034aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80034ac:	2304      	movs	r3, #4
 80034ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034b0:	f107 0320 	add.w	r3, r7, #32
 80034b4:	4618      	mov	r0, r3
 80034b6:	f002 fd5b 	bl	8005f70 <HAL_RCC_OscConfig>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034c0:	f000 f832 	bl	8003528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034c4:	230f      	movs	r3, #15
 80034c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034c8:	2302      	movs	r3, #2
 80034ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034dc:	f107 030c 	add.w	r3, r7, #12
 80034e0:	2105      	movs	r1, #5
 80034e2:	4618      	mov	r0, r3
 80034e4:	f002 ffbc 	bl	8006460 <HAL_RCC_ClockConfig>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80034ee:	f000 f81b 	bl	8003528 <Error_Handler>
  }
}
 80034f2:	bf00      	nop
 80034f4:	3750      	adds	r7, #80	; 0x50
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800
 8003500:	40007000 	.word	0x40007000

08003504 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d101      	bne.n	800351a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003516:	f000 ff39 	bl	800438c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40001000 	.word	0x40001000

08003528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800352c:	b672      	cpsid	i
}
 800352e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003530:	e7fe      	b.n	8003530 <Error_Handler+0x8>
	...

08003534 <HAL_UART_RxCpltCallback>:
void ServoMotor_init()
{
	HAL_UART_Receive_IT(&huart3, tmp_rx, 12);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {printf("hal_rev irq: %d\n", HAL_UART_Receive_IT(&huart3, tmp_rx, 12));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <HAL_UART_RxCpltCallback+0x3c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d109      	bne.n	800355a <HAL_UART_RxCpltCallback+0x26>
 8003546:	220c      	movs	r2, #12
 8003548:	490a      	ldr	r1, [pc, #40]	; (8003574 <HAL_UART_RxCpltCallback+0x40>)
 800354a:	480b      	ldr	r0, [pc, #44]	; (8003578 <HAL_UART_RxCpltCallback+0x44>)
 800354c:	f005 f80d 	bl	800856a <HAL_UART_Receive_IT>
 8003550:	4603      	mov	r3, r0
 8003552:	4619      	mov	r1, r3
 8003554:	4809      	ldr	r0, [pc, #36]	; (800357c <HAL_UART_RxCpltCallback+0x48>)
 8003556:	f00a ff31 	bl	800e3bc <iprintf>
	}//SET INTERRUPT
	flag_rx = 1;
 800355a:	4b09      	ldr	r3, [pc, #36]	; (8003580 <HAL_UART_RxCpltCallback+0x4c>)
 800355c:	2201      	movs	r2, #1
 800355e:	601a      	str	r2, [r3, #0]
	printf("H_URCBf\n");
 8003560:	4808      	ldr	r0, [pc, #32]	; (8003584 <HAL_UART_RxCpltCallback+0x50>)
 8003562:	f00a ffb1 	bl	800e4c8 <puts>
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40004800 	.word	0x40004800
 8003574:	200008c0 	.word	0x200008c0
 8003578:	20000a94 	.word	0x20000a94
 800357c:	08011cb0 	.word	0x08011cb0
 8003580:	200008bc 	.word	0x200008bc
 8003584:	08011cc4 	.word	0x08011cc4

08003588 <ServoMotor_writeDMA>:

    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
}

void ServoMotor_writeDMA(const char* str)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 8003590:	2201      	movs	r2, #1
 8003592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003596:	480d      	ldr	r0, [pc, #52]	; (80035cc <ServoMotor_writeDMA+0x44>)
 8003598:	f002 fc9e 	bl	8005ed8 <HAL_GPIO_WritePin>
    //osDelay(6);//because transmit_DMA
    if(HAL_UART_Transmit_DMA(&huart3,str, 48)!= HAL_OK){Error_Handler();}
 800359c:	2230      	movs	r2, #48	; 0x30
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	480b      	ldr	r0, [pc, #44]	; (80035d0 <ServoMotor_writeDMA+0x48>)
 80035a2:	f005 f813 	bl	80085cc <HAL_UART_Transmit_DMA>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <ServoMotor_writeDMA+0x28>
 80035ac:	f7ff ffbc 	bl	8003528 <Error_Handler>
    osDelay(6);//because transmit_DMA
 80035b0:	2006      	movs	r0, #6
 80035b2:	f006 fa81 	bl	8009ab8 <osDelay>
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 80035b6:	2200      	movs	r2, #0
 80035b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035bc:	4803      	ldr	r0, [pc, #12]	; (80035cc <ServoMotor_writeDMA+0x44>)
 80035be:	f002 fc8b 	bl	8005ed8 <HAL_GPIO_WritePin>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40020400 	.word	0x40020400
 80035d0:	20000a94 	.word	0x20000a94

080035d4 <DataSetSteering>:
    ServoMotor_write(buf);
    
}

void DataSetSteering(const char* str, char id, char direction, unsigned short position, char init)
{
 80035d4:	b490      	push	{r4, r7}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	4608      	mov	r0, r1
 80035de:	4611      	mov	r1, r2
 80035e0:	461a      	mov	r2, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	70fb      	strb	r3, [r7, #3]
 80035e6:	460b      	mov	r3, r1
 80035e8:	70bb      	strb	r3, [r7, #2]
 80035ea:	4613      	mov	r3, r2
 80035ec:	803b      	strh	r3, [r7, #0]
    char buf[12];

    buf[0]=0xFF;//header
 80035ee:	23ff      	movs	r3, #255	; 0xff
 80035f0:	723b      	strb	r3, [r7, #8]
    buf[1]=0xFE;//header
 80035f2:	23fe      	movs	r3, #254	; 0xfe
 80035f4:	727b      	strb	r3, [r7, #9]
    buf[2]=id;//id fixed
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	72bb      	strb	r3, [r7, #10]
    buf[3]=0x06;//length
 80035fa:	2306      	movs	r3, #6
 80035fc:	72fb      	strb	r3, [r7, #11]
    buf[4]=0x00;//checksum
 80035fe:	2300      	movs	r3, #0
 8003600:	733b      	strb	r3, [r7, #12]
    buf[5]=0x02 + init;//mode,  2=position control mode , 3=speed control mode
 8003602:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003606:	3302      	adds	r3, #2
 8003608:	b2db      	uxtb	r3, r3
 800360a:	737b      	strb	r3, [r7, #13]
    buf[6]=direction;//direction ccw=0x00, cw=0x01
 800360c:	78bb      	ldrb	r3, [r7, #2]
 800360e:	73bb      	strb	r3, [r7, #14]
    buf[7]=(char)(position>>8);//position
 8003610:	883b      	ldrh	r3, [r7, #0]
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	b29b      	uxth	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	73fb      	strb	r3, [r7, #15]
    buf[8]=(char)position;//position
 800361a:	883b      	ldrh	r3, [r7, #0]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	743b      	strb	r3, [r7, #16]
    if(init == 1){buf[9]=STOP_SPEED;}//stop speed 0.3s>>0.6s 220520>>0.8s 220621
 8003620:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d102      	bne.n	800362e <DataSetSteering+0x5a>
 8003628:	2303      	movs	r3, #3
 800362a:	747b      	strb	r3, [r7, #17]
 800362c:	e001      	b.n	8003632 <DataSetSteering+0x5e>
    else buf[9]=0x1E;//speed, position second = 3s
 800362e:	231e      	movs	r3, #30
 8003630:	747b      	strb	r3, [r7, #17]
    buf[10]=0x00;//reservation
 8003632:	2300      	movs	r3, #0
 8003634:	74bb      	strb	r3, [r7, #18]
    buf[11]=0x00;//reservation
 8003636:	2300      	movs	r3, #0
 8003638:	74fb      	strb	r3, [r7, #19]

    //FF FE 00 06 EC 03 00 00 00 0A
    //0  1  2  3  4  5  6  7  8  9
    for(int i=2;i<SERVO_BUFLEN;i++) {checksum_val += buf[i];}//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 800363a:	2302      	movs	r3, #2
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e00d      	b.n	800365c <DataSetSteering+0x88>
 8003640:	f107 0208 	add.w	r2, r7, #8
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	4413      	add	r3, r2
 8003648:	781a      	ldrb	r2, [r3, #0]
 800364a:	4b14      	ldr	r3, [pc, #80]	; (800369c <DataSetSteering+0xc8>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	4413      	add	r3, r2
 8003650:	b2da      	uxtb	r2, r3
 8003652:	4b12      	ldr	r3, [pc, #72]	; (800369c <DataSetSteering+0xc8>)
 8003654:	701a      	strb	r2, [r3, #0]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	3301      	adds	r3, #1
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b09      	cmp	r3, #9
 8003660:	ddee      	ble.n	8003640 <DataSetSteering+0x6c>
    buf[4]=~(checksum_val);//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 8003662:	4b0e      	ldr	r3, [pc, #56]	; (800369c <DataSetSteering+0xc8>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	43db      	mvns	r3, r3
 8003668:	b2db      	uxtb	r3, r3
 800366a:	733b      	strb	r3, [r7, #12]
    checksum_val=0x00;//checksum
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <DataSetSteering+0xc8>)
 800366e:	2200      	movs	r2, #0
 8003670:	701a      	strb	r2, [r3, #0]

    memcpy(str+(12*id), buf, sizeof(buf));
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	4613      	mov	r3, r2
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	461a      	mov	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4413      	add	r3, r2
 8003682:	461c      	mov	r4, r3
 8003684:	f107 0308 	add.w	r3, r7, #8
 8003688:	cb07      	ldmia	r3!, {r0, r1, r2}
 800368a:	6020      	str	r0, [r4, #0]
 800368c:	6061      	str	r1, [r4, #4]
 800368e:	60a2      	str	r2, [r4, #8]

}
 8003690:	bf00      	nop
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bc90      	pop	{r4, r7}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	200008b8 	.word	0x200008b8

080036a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <HAL_MspInit+0x54>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	4a11      	ldr	r2, [pc, #68]	; (80036f4 <HAL_MspInit+0x54>)
 80036b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b4:	6453      	str	r3, [r2, #68]	; 0x44
 80036b6:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <HAL_MspInit+0x54>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036be:	607b      	str	r3, [r7, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	603b      	str	r3, [r7, #0]
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_MspInit+0x54>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <HAL_MspInit+0x54>)
 80036cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d0:	6413      	str	r3, [r2, #64]	; 0x40
 80036d2:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <HAL_MspInit+0x54>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036de:	2200      	movs	r2, #0
 80036e0:	210f      	movs	r1, #15
 80036e2:	f06f 0001 	mvn.w	r0, #1
 80036e6:	f001 fe09 	bl	80052fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800

080036f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08c      	sub	sp, #48	; 0x30
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003708:	2200      	movs	r2, #0
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	2036      	movs	r0, #54	; 0x36
 800370e:	f001 fdf5 	bl	80052fc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003712:	2036      	movs	r0, #54	; 0x36
 8003714:	f001 fe0e 	bl	8005334 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	4b1f      	ldr	r3, [pc, #124]	; (800379c <HAL_InitTick+0xa4>)
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	4a1e      	ldr	r2, [pc, #120]	; (800379c <HAL_InitTick+0xa4>)
 8003722:	f043 0310 	orr.w	r3, r3, #16
 8003726:	6413      	str	r3, [r2, #64]	; 0x40
 8003728:	4b1c      	ldr	r3, [pc, #112]	; (800379c <HAL_InitTick+0xa4>)
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003734:	f107 0210 	add.w	r2, r7, #16
 8003738:	f107 0314 	add.w	r3, r7, #20
 800373c:	4611      	mov	r1, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f003 f86e 	bl	8006820 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003744:	f003 f844 	bl	80067d0 <HAL_RCC_GetPCLK1Freq>
 8003748:	4603      	mov	r3, r0
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800374e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003750:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <HAL_InitTick+0xa8>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	0c9b      	lsrs	r3, r3, #18
 8003758:	3b01      	subs	r3, #1
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800375c:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <HAL_InitTick+0xac>)
 800375e:	4a12      	ldr	r2, [pc, #72]	; (80037a8 <HAL_InitTick+0xb0>)
 8003760:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003762:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <HAL_InitTick+0xac>)
 8003764:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003768:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800376a:	4a0e      	ldr	r2, [pc, #56]	; (80037a4 <HAL_InitTick+0xac>)
 800376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <HAL_InitTick+0xac>)
 8003772:	2200      	movs	r2, #0
 8003774:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003776:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <HAL_InitTick+0xac>)
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800377c:	4809      	ldr	r0, [pc, #36]	; (80037a4 <HAL_InitTick+0xac>)
 800377e:	f003 f957 	bl	8006a30 <HAL_TIM_Base_Init>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d104      	bne.n	8003792 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003788:	4806      	ldr	r0, [pc, #24]	; (80037a4 <HAL_InitTick+0xac>)
 800378a:	f003 f9a1 	bl	8006ad0 <HAL_TIM_Base_Start_IT>
 800378e:	4603      	mov	r3, r0
 8003790:	e000      	b.n	8003794 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
}
 8003794:	4618      	mov	r0, r3
 8003796:	3730      	adds	r7, #48	; 0x30
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40023800 	.word	0x40023800
 80037a0:	431bde83 	.word	0x431bde83
 80037a4:	200008cc 	.word	0x200008cc
 80037a8:	40001000 	.word	0x40001000

080037ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037b0:	e7fe      	b.n	80037b0 <NMI_Handler+0x4>

080037b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037b2:	b480      	push	{r7}
 80037b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037b6:	e7fe      	b.n	80037b6 <HardFault_Handler+0x4>

080037b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037bc:	e7fe      	b.n	80037bc <MemManage_Handler+0x4>

080037be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037be:	b480      	push	{r7}
 80037c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037c2:	e7fe      	b.n	80037c2 <BusFault_Handler+0x4>

080037c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037c8:	e7fe      	b.n	80037c8 <UsageFault_Handler+0x4>

080037ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037ca:	b480      	push	{r7}
 80037cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG1_Pin);
 80037dc:	2010      	movs	r0, #16
 80037de:	f002 fbaf 	bl	8005f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80037ec:	4802      	ldr	r0, [pc, #8]	; (80037f8 <DMA1_Stream3_IRQHandler+0x10>)
 80037ee:	f001 ff55 	bl	800569c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000b38 	.word	0x20000b38

080037fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003800:	4802      	ldr	r0, [pc, #8]	; (800380c <DMA1_Stream6_IRQHandler+0x10>)
 8003802:	f001 ff4b 	bl	800569c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000ad8 	.word	0x20000ad8

08003810 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003814:	4802      	ldr	r0, [pc, #8]	; (8003820 <CAN1_RX0_IRQHandler+0x10>)
 8003816:	f001 fa65 	bl	8004ce4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200007d4 	.word	0x200007d4

08003824 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG2_Pin);
 8003828:	2020      	movs	r0, #32
 800382a:	f002 fb89 	bl	8005f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG3_Pin);
 800382e:	2040      	movs	r0, #64	; 0x40
 8003830:	f002 fb86 	bl	8005f40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG4_Pin);
 8003834:	2080      	movs	r0, #128	; 0x80
 8003836:	f002 fb83 	bl	8005f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003844:	4802      	ldr	r0, [pc, #8]	; (8003850 <USART2_IRQHandler+0x10>)
 8003846:	f004 ff3f 	bl	80086c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000a50 	.word	0x20000a50

08003854 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003858:	4802      	ldr	r0, [pc, #8]	; (8003864 <USART3_IRQHandler+0x10>)
 800385a:	f004 ff35 	bl	80086c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000a94 	.word	0x20000a94

08003868 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800386c:	4802      	ldr	r0, [pc, #8]	; (8003878 <TIM6_DAC_IRQHandler+0x10>)
 800386e:	f003 fcd8 	bl	8007222 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	200008cc 	.word	0x200008cc

0800387c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <DMA2_Stream2_IRQHandler+0x10>)
 8003882:	f001 ff0b 	bl	800569c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200009f0 	.word	0x200009f0

08003890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
	return 1;
 8003894:	2301      	movs	r3, #1
}
 8003896:	4618      	mov	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <_kill>:

int _kill(int pid, int sig)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038aa:	f009 ff4f 	bl	800d74c <__errno>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2216      	movs	r2, #22
 80038b2:	601a      	str	r2, [r3, #0]
	return -1;
 80038b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <_exit>:

void _exit (int status)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038c8:	f04f 31ff 	mov.w	r1, #4294967295
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff ffe7 	bl	80038a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80038d2:	e7fe      	b.n	80038d2 <_exit+0x12>

080038d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e00a      	b.n	80038fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038e6:	f3af 8000 	nop.w
 80038ea:	4601      	mov	r1, r0
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	60ba      	str	r2, [r7, #8]
 80038f2:	b2ca      	uxtb	r2, r1
 80038f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	3301      	adds	r3, #1
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	429a      	cmp	r2, r3
 8003902:	dbf0      	blt.n	80038e6 <_read+0x12>
	}

return len;
 8003904:	687b      	ldr	r3, [r7, #4]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <_close>:
	}
	return len;
}

int _close(int file)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
	return -1;
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003936:	605a      	str	r2, [r3, #4]
	return 0;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <_isatty>:

int _isatty(int file)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
	return 1;
 800394e:	2301      	movs	r3, #1
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
	return 0;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003980:	4a14      	ldr	r2, [pc, #80]	; (80039d4 <_sbrk+0x5c>)
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <_sbrk+0x60>)
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800398c:	4b13      	ldr	r3, [pc, #76]	; (80039dc <_sbrk+0x64>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d102      	bne.n	800399a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003994:	4b11      	ldr	r3, [pc, #68]	; (80039dc <_sbrk+0x64>)
 8003996:	4a12      	ldr	r2, [pc, #72]	; (80039e0 <_sbrk+0x68>)
 8003998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <_sbrk+0x64>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d207      	bcs.n	80039b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039a8:	f009 fed0 	bl	800d74c <__errno>
 80039ac:	4603      	mov	r3, r0
 80039ae:	220c      	movs	r2, #12
 80039b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039b2:	f04f 33ff 	mov.w	r3, #4294967295
 80039b6:	e009      	b.n	80039cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039b8:	4b08      	ldr	r3, [pc, #32]	; (80039dc <_sbrk+0x64>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039be:	4b07      	ldr	r3, [pc, #28]	; (80039dc <_sbrk+0x64>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4413      	add	r3, r2
 80039c6:	4a05      	ldr	r2, [pc, #20]	; (80039dc <_sbrk+0x64>)
 80039c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039ca:	68fb      	ldr	r3, [r7, #12]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20020000 	.word	0x20020000
 80039d8:	00000400 	.word	0x00000400
 80039dc:	20000914 	.word	0x20000914
 80039e0:	200055c0 	.word	0x200055c0

080039e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <SystemInit+0x20>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	4a05      	ldr	r2, [pc, #20]	; (8003a04 <SystemInit+0x20>)
 80039f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	e000ed00 	.word	0xe000ed00

08003a08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b096      	sub	sp, #88	; 0x58
 8003a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	60da      	str	r2, [r3, #12]
 8003a26:	611a      	str	r2, [r3, #16]
 8003a28:	615a      	str	r2, [r3, #20]
 8003a2a:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a3a:	1d3b      	adds	r3, r7, #4
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	2100      	movs	r1, #0
 8003a40:	4618      	mov	r0, r3
 8003a42:	f009 ffb4 	bl	800d9ae <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a46:	4b47      	ldr	r3, [pc, #284]	; (8003b64 <MX_TIM1_Init+0x15c>)
 8003a48:	4a47      	ldr	r2, [pc, #284]	; (8003b68 <MX_TIM1_Init+0x160>)
 8003a4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680-1;
 8003a4c:	4b45      	ldr	r3, [pc, #276]	; (8003b64 <MX_TIM1_Init+0x15c>)
 8003a4e:	f240 628f 	movw	r2, #1679	; 0x68f
 8003a52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a54:	4b43      	ldr	r3, [pc, #268]	; (8003b64 <MX_TIM1_Init+0x15c>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8003a5a:	4b42      	ldr	r3, [pc, #264]	; (8003b64 <MX_TIM1_Init+0x15c>)
 8003a5c:	2263      	movs	r2, #99	; 0x63
 8003a5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a60:	4b40      	ldr	r3, [pc, #256]	; (8003b64 <MX_TIM1_Init+0x15c>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a66:	4b3f      	ldr	r3, [pc, #252]	; (8003b64 <MX_TIM1_Init+0x15c>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a6c:	4b3d      	ldr	r3, [pc, #244]	; (8003b64 <MX_TIM1_Init+0x15c>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003a72:	483c      	ldr	r0, [pc, #240]	; (8003b64 <MX_TIM1_Init+0x15c>)
 8003a74:	f003 f89c 	bl	8006bb0 <HAL_TIM_PWM_Init>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003a7e:	f7ff fd53 	bl	8003528 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003a82:	4838      	ldr	r0, [pc, #224]	; (8003b64 <MX_TIM1_Init+0x15c>)
 8003a84:	f003 fb74 	bl	8007170 <HAL_TIM_IC_Init>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003a8e:	f7ff fd4b 	bl	8003528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a92:	2300      	movs	r3, #0
 8003a94:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4830      	ldr	r0, [pc, #192]	; (8003b64 <MX_TIM1_Init+0x15c>)
 8003aa2:	f004 fc33 	bl	800830c <HAL_TIMEx_MasterConfigSynchronization>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003aac:	f7ff fd3c 	bl	8003528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ab0:	2360      	movs	r3, #96	; 0x60
 8003ab2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003abc:	2300      	movs	r3, #0
 8003abe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003acc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4823      	ldr	r0, [pc, #140]	; (8003b64 <MX_TIM1_Init+0x15c>)
 8003ad6:	f003 fd49 	bl	800756c <HAL_TIM_PWM_ConfigChannel>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003ae0:	f7ff fd22 	bl	8003528 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003aec:	2300      	movs	r3, #0
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af8:	2204      	movs	r2, #4
 8003afa:	4619      	mov	r1, r3
 8003afc:	4819      	ldr	r0, [pc, #100]	; (8003b64 <MX_TIM1_Init+0x15c>)
 8003afe:	f003 fc98 	bl	8007432 <HAL_TIM_IC_ConfigChannel>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8003b08:	f7ff fd0e 	bl	8003528 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b10:	2208      	movs	r2, #8
 8003b12:	4619      	mov	r1, r3
 8003b14:	4813      	ldr	r0, [pc, #76]	; (8003b64 <MX_TIM1_Init+0x15c>)
 8003b16:	f003 fc8c 	bl	8007432 <HAL_TIM_IC_ConfigChannel>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8003b20:	f7ff fd02 	bl	8003528 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b24:	2300      	movs	r3, #0
 8003b26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b42:	1d3b      	adds	r3, r7, #4
 8003b44:	4619      	mov	r1, r3
 8003b46:	4807      	ldr	r0, [pc, #28]	; (8003b64 <MX_TIM1_Init+0x15c>)
 8003b48:	f004 fc5c 	bl	8008404 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8003b52:	f7ff fce9 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003b56:	4803      	ldr	r0, [pc, #12]	; (8003b64 <MX_TIM1_Init+0x15c>)
 8003b58:	f000 fa22 	bl	8003fa0 <HAL_TIM_MspPostInit>

}
 8003b5c:	bf00      	nop
 8003b5e:	3758      	adds	r7, #88	; 0x58
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000918 	.word	0x20000918
 8003b68:	40010000 	.word	0x40010000

08003b6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b72:	f107 0318 	add.w	r3, r7, #24
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	609a      	str	r2, [r3, #8]
 8003b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b80:	f107 0310 	add.w	r3, r7, #16
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003b8a:	463b      	mov	r3, r7
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b96:	4b31      	ldr	r3, [pc, #196]	; (8003c5c <MX_TIM3_Init+0xf0>)
 8003b98:	4a31      	ldr	r2, [pc, #196]	; (8003c60 <MX_TIM3_Init+0xf4>)
 8003b9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003b9c:	4b2f      	ldr	r3, [pc, #188]	; (8003c5c <MX_TIM3_Init+0xf0>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba2:	4b2e      	ldr	r3, [pc, #184]	; (8003c5c <MX_TIM3_Init+0xf0>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003ba8:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <MX_TIM3_Init+0xf0>)
 8003baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bb0:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <MX_TIM3_Init+0xf0>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bb6:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <MX_TIM3_Init+0xf0>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003bbc:	4827      	ldr	r0, [pc, #156]	; (8003c5c <MX_TIM3_Init+0xf0>)
 8003bbe:	f002 ff37 	bl	8006a30 <HAL_TIM_Base_Init>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8003bc8:	f7ff fcae 	bl	8003528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003bd2:	f107 0318 	add.w	r3, r7, #24
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4820      	ldr	r0, [pc, #128]	; (8003c5c <MX_TIM3_Init+0xf0>)
 8003bda:	f003 fd89 	bl	80076f0 <HAL_TIM_ConfigClockSource>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003be4:	f7ff fca0 	bl	8003528 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003be8:	481c      	ldr	r0, [pc, #112]	; (8003c5c <MX_TIM3_Init+0xf0>)
 8003bea:	f003 fac1 	bl	8007170 <HAL_TIM_IC_Init>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003bf4:	f7ff fc98 	bl	8003528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c00:	f107 0310 	add.w	r3, r7, #16
 8003c04:	4619      	mov	r1, r3
 8003c06:	4815      	ldr	r0, [pc, #84]	; (8003c5c <MX_TIM3_Init+0xf0>)
 8003c08:	f004 fb80 	bl	800830c <HAL_TIMEx_MasterConfigSynchronization>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8003c12:	f7ff fc89 	bl	8003528 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003c16:	2300      	movs	r3, #0
 8003c18:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003c26:	463b      	mov	r3, r7
 8003c28:	2208      	movs	r2, #8
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	480b      	ldr	r0, [pc, #44]	; (8003c5c <MX_TIM3_Init+0xf0>)
 8003c2e:	f003 fc00 	bl	8007432 <HAL_TIM_IC_ConfigChannel>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8003c38:	f7ff fc76 	bl	8003528 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003c3c:	463b      	mov	r3, r7
 8003c3e:	220c      	movs	r2, #12
 8003c40:	4619      	mov	r1, r3
 8003c42:	4806      	ldr	r0, [pc, #24]	; (8003c5c <MX_TIM3_Init+0xf0>)
 8003c44:	f003 fbf5 	bl	8007432 <HAL_TIM_IC_ConfigChannel>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8003c4e:	f7ff fc6b 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003c52:	bf00      	nop
 8003c54:	3728      	adds	r7, #40	; 0x28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000960 	.word	0x20000960
 8003c60:	40000400 	.word	0x40000400

08003c64 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b096      	sub	sp, #88	; 0x58
 8003c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	605a      	str	r2, [r3, #4]
 8003c74:	609a      	str	r2, [r3, #8]
 8003c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	605a      	str	r2, [r3, #4]
 8003c8c:	609a      	str	r2, [r3, #8]
 8003c8e:	60da      	str	r2, [r3, #12]
 8003c90:	611a      	str	r2, [r3, #16]
 8003c92:	615a      	str	r2, [r3, #20]
 8003c94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c96:	1d3b      	adds	r3, r7, #4
 8003c98:	2220      	movs	r2, #32
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f009 fe86 	bl	800d9ae <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003ca2:	4b50      	ldr	r3, [pc, #320]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003ca4:	4a50      	ldr	r2, [pc, #320]	; (8003de8 <MX_TIM8_Init+0x184>)
 8003ca6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8003ca8:	4b4e      	ldr	r3, [pc, #312]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cae:	4b4d      	ldr	r3, [pc, #308]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 104;
 8003cb4:	4b4b      	ldr	r3, [pc, #300]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003cb6:	2268      	movs	r2, #104	; 0x68
 8003cb8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cba:	4b4a      	ldr	r3, [pc, #296]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003cc0:	4b48      	ldr	r3, [pc, #288]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc6:	4b47      	ldr	r3, [pc, #284]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003ccc:	4845      	ldr	r0, [pc, #276]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003cce:	f002 feaf 	bl	8006a30 <HAL_TIM_Base_Init>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8003cd8:	f7ff fc26 	bl	8003528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ce0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003ce2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	483e      	ldr	r0, [pc, #248]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003cea:	f003 fd01 	bl	80076f0 <HAL_TIM_ConfigClockSource>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8003cf4:	f7ff fc18 	bl	8003528 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003cf8:	483a      	ldr	r0, [pc, #232]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003cfa:	f002 ff59 	bl	8006bb0 <HAL_TIM_PWM_Init>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003d04:	f7ff fc10 	bl	8003528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003d10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d14:	4619      	mov	r1, r3
 8003d16:	4833      	ldr	r0, [pc, #204]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003d18:	f004 faf8 	bl	800830c <HAL_TIMEx_MasterConfigSynchronization>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8003d22:	f7ff fc01 	bl	8003528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d26:	2360      	movs	r3, #96	; 0x60
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d32:	2300      	movs	r3, #0
 8003d34:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d46:	2200      	movs	r2, #0
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4826      	ldr	r0, [pc, #152]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003d4c:	f003 fc0e 	bl	800756c <HAL_TIM_PWM_ConfigChannel>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8003d56:	f7ff fbe7 	bl	8003528 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d5e:	2204      	movs	r2, #4
 8003d60:	4619      	mov	r1, r3
 8003d62:	4820      	ldr	r0, [pc, #128]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003d64:	f003 fc02 	bl	800756c <HAL_TIM_PWM_ConfigChannel>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8003d6e:	f7ff fbdb 	bl	8003528 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d76:	2208      	movs	r2, #8
 8003d78:	4619      	mov	r1, r3
 8003d7a:	481a      	ldr	r0, [pc, #104]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003d7c:	f003 fbf6 	bl	800756c <HAL_TIM_PWM_ConfigChannel>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8003d86:	f7ff fbcf 	bl	8003528 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d8e:	220c      	movs	r2, #12
 8003d90:	4619      	mov	r1, r3
 8003d92:	4814      	ldr	r0, [pc, #80]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003d94:	f003 fbea 	bl	800756c <HAL_TIM_PWM_ConfigChannel>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8003d9e:	f7ff fbc3 	bl	8003528 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003da2:	2300      	movs	r3, #0
 8003da4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003db6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003dc0:	1d3b      	adds	r3, r7, #4
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4807      	ldr	r0, [pc, #28]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003dc6:	f004 fb1d 	bl	8008404 <HAL_TIMEx_ConfigBreakDeadTime>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8003dd0:	f7ff fbaa 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003dd4:	4803      	ldr	r0, [pc, #12]	; (8003de4 <MX_TIM8_Init+0x180>)
 8003dd6:	f000 f8e3 	bl	8003fa0 <HAL_TIM_MspPostInit>

}
 8003dda:	bf00      	nop
 8003ddc:	3758      	adds	r7, #88	; 0x58
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	200009a8 	.word	0x200009a8
 8003de8:	40010400 	.word	0x40010400

08003dec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	; 0x28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df4:	f107 0314 	add.w	r3, r7, #20
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	605a      	str	r2, [r3, #4]
 8003dfe:	609a      	str	r2, [r3, #8]
 8003e00:	60da      	str	r2, [r3, #12]
 8003e02:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a19      	ldr	r2, [pc, #100]	; (8003e70 <HAL_TIM_PWM_MspInit+0x84>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d12c      	bne.n	8003e68 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	4b18      	ldr	r3, [pc, #96]	; (8003e74 <HAL_TIM_PWM_MspInit+0x88>)
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	4a17      	ldr	r2, [pc, #92]	; (8003e74 <HAL_TIM_PWM_MspInit+0x88>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e1e:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <HAL_TIM_PWM_MspInit+0x88>)
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <HAL_TIM_PWM_MspInit+0x88>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	4a10      	ldr	r2, [pc, #64]	; (8003e74 <HAL_TIM_PWM_MspInit+0x88>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3a:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <HAL_TIM_PWM_MspInit+0x88>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e54:	2300      	movs	r3, #0
 8003e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e5c:	f107 0314 	add.w	r3, r7, #20
 8003e60:	4619      	mov	r1, r3
 8003e62:	4805      	ldr	r0, [pc, #20]	; (8003e78 <HAL_TIM_PWM_MspInit+0x8c>)
 8003e64:	f001 fe84 	bl	8005b70 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003e68:	bf00      	nop
 8003e6a:	3728      	adds	r7, #40	; 0x28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40020000 	.word	0x40020000

08003e7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	; 0x28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e84:	f107 0314 	add.w	r3, r7, #20
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	609a      	str	r2, [r3, #8]
 8003e90:	60da      	str	r2, [r3, #12]
 8003e92:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a3b      	ldr	r2, [pc, #236]	; (8003f88 <HAL_TIM_Base_MspInit+0x10c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d12c      	bne.n	8003ef8 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	4b3a      	ldr	r3, [pc, #232]	; (8003f8c <HAL_TIM_Base_MspInit+0x110>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	4a39      	ldr	r2, [pc, #228]	; (8003f8c <HAL_TIM_Base_MspInit+0x110>)
 8003ea8:	f043 0302 	orr.w	r3, r3, #2
 8003eac:	6413      	str	r3, [r2, #64]	; 0x40
 8003eae:	4b37      	ldr	r3, [pc, #220]	; (8003f8c <HAL_TIM_Base_MspInit+0x110>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	4b33      	ldr	r3, [pc, #204]	; (8003f8c <HAL_TIM_Base_MspInit+0x110>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	4a32      	ldr	r2, [pc, #200]	; (8003f8c <HAL_TIM_Base_MspInit+0x110>)
 8003ec4:	f043 0302 	orr.w	r3, r3, #2
 8003ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eca:	4b30      	ldr	r3, [pc, #192]	; (8003f8c <HAL_TIM_Base_MspInit+0x110>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eda:	2302      	movs	r3, #2
 8003edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eea:	f107 0314 	add.w	r3, r7, #20
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4827      	ldr	r0, [pc, #156]	; (8003f90 <HAL_TIM_Base_MspInit+0x114>)
 8003ef2:	f001 fe3d 	bl	8005b70 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003ef6:	e042      	b.n	8003f7e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a25      	ldr	r2, [pc, #148]	; (8003f94 <HAL_TIM_Base_MspInit+0x118>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d13d      	bne.n	8003f7e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	4b21      	ldr	r3, [pc, #132]	; (8003f8c <HAL_TIM_Base_MspInit+0x110>)
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	4a20      	ldr	r2, [pc, #128]	; (8003f8c <HAL_TIM_Base_MspInit+0x110>)
 8003f0c:	f043 0302 	orr.w	r3, r3, #2
 8003f10:	6453      	str	r3, [r2, #68]	; 0x44
 8003f12:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <HAL_TIM_Base_MspInit+0x110>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 8003f1e:	4b1e      	ldr	r3, [pc, #120]	; (8003f98 <HAL_TIM_Base_MspInit+0x11c>)
 8003f20:	4a1e      	ldr	r2, [pc, #120]	; (8003f9c <HAL_TIM_Base_MspInit+0x120>)
 8003f22:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 8003f24:	4b1c      	ldr	r3, [pc, #112]	; (8003f98 <HAL_TIM_Base_MspInit+0x11c>)
 8003f26:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003f2a:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <HAL_TIM_Base_MspInit+0x11c>)
 8003f2e:	2240      	movs	r2, #64	; 0x40
 8003f30:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f32:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <HAL_TIM_Base_MspInit+0x11c>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003f38:	4b17      	ldr	r3, [pc, #92]	; (8003f98 <HAL_TIM_Base_MspInit+0x11c>)
 8003f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f3e:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f40:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <HAL_TIM_Base_MspInit+0x11c>)
 8003f42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f46:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f48:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <HAL_TIM_Base_MspInit+0x11c>)
 8003f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f4e:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8003f50:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <HAL_TIM_Base_MspInit+0x11c>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003f56:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <HAL_TIM_Base_MspInit+0x11c>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <HAL_TIM_Base_MspInit+0x11c>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8003f62:	480d      	ldr	r0, [pc, #52]	; (8003f98 <HAL_TIM_Base_MspInit+0x11c>)
 8003f64:	f001 fa02 	bl	800536c <HAL_DMA_Init>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_TIM_Base_MspInit+0xf6>
      Error_Handler();
 8003f6e:	f7ff fadb 	bl	8003528 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a08      	ldr	r2, [pc, #32]	; (8003f98 <HAL_TIM_Base_MspInit+0x11c>)
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24
 8003f78:	4a07      	ldr	r2, [pc, #28]	; (8003f98 <HAL_TIM_Base_MspInit+0x11c>)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003f7e:	bf00      	nop
 8003f80:	3728      	adds	r7, #40	; 0x28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	40020400 	.word	0x40020400
 8003f94:	40010400 	.word	0x40010400
 8003f98:	200009f0 	.word	0x200009f0
 8003f9c:	40026440 	.word	0x40026440

08003fa0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08a      	sub	sp, #40	; 0x28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa8:	f107 0314 	add.w	r3, r7, #20
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a25      	ldr	r2, [pc, #148]	; (8004054 <HAL_TIM_MspPostInit+0xb4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d11f      	bne.n	8004002 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	4b24      	ldr	r3, [pc, #144]	; (8004058 <HAL_TIM_MspPostInit+0xb8>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	4a23      	ldr	r2, [pc, #140]	; (8004058 <HAL_TIM_MspPostInit+0xb8>)
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd2:	4b21      	ldr	r3, [pc, #132]	; (8004058 <HAL_TIM_MspPostInit+0xb8>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fec:	2300      	movs	r3, #0
 8003fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff4:	f107 0314 	add.w	r3, r7, #20
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4818      	ldr	r0, [pc, #96]	; (800405c <HAL_TIM_MspPostInit+0xbc>)
 8003ffc:	f001 fdb8 	bl	8005b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004000:	e023      	b.n	800404a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a16      	ldr	r2, [pc, #88]	; (8004060 <HAL_TIM_MspPostInit+0xc0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d11e      	bne.n	800404a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	4b11      	ldr	r3, [pc, #68]	; (8004058 <HAL_TIM_MspPostInit+0xb8>)
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	4a10      	ldr	r2, [pc, #64]	; (8004058 <HAL_TIM_MspPostInit+0xb8>)
 8004016:	f043 0304 	orr.w	r3, r3, #4
 800401a:	6313      	str	r3, [r2, #48]	; 0x30
 800401c:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <HAL_TIM_MspPostInit+0xb8>)
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004028:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800402c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402e:	2302      	movs	r3, #2
 8004030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004036:	2300      	movs	r3, #0
 8004038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800403a:	2303      	movs	r3, #3
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800403e:	f107 0314 	add.w	r3, r7, #20
 8004042:	4619      	mov	r1, r3
 8004044:	4807      	ldr	r0, [pc, #28]	; (8004064 <HAL_TIM_MspPostInit+0xc4>)
 8004046:	f001 fd93 	bl	8005b70 <HAL_GPIO_Init>
}
 800404a:	bf00      	nop
 800404c:	3728      	adds	r7, #40	; 0x28
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40010000 	.word	0x40010000
 8004058:	40023800 	.word	0x40023800
 800405c:	40020000 	.word	0x40020000
 8004060:	40010400 	.word	0x40010400
 8004064:	40020800 	.word	0x40020800

08004068 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800406c:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <MX_USART2_UART_Init+0x4c>)
 800406e:	4a12      	ldr	r2, [pc, #72]	; (80040b8 <MX_USART2_UART_Init+0x50>)
 8004070:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004072:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <MX_USART2_UART_Init+0x4c>)
 8004074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004078:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800407a:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <MX_USART2_UART_Init+0x4c>)
 800407c:	2200      	movs	r2, #0
 800407e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <MX_USART2_UART_Init+0x4c>)
 8004082:	2200      	movs	r2, #0
 8004084:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <MX_USART2_UART_Init+0x4c>)
 8004088:	2200      	movs	r2, #0
 800408a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800408c:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <MX_USART2_UART_Init+0x4c>)
 800408e:	220c      	movs	r2, #12
 8004090:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004092:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <MX_USART2_UART_Init+0x4c>)
 8004094:	2200      	movs	r2, #0
 8004096:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <MX_USART2_UART_Init+0x4c>)
 800409a:	2200      	movs	r2, #0
 800409c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800409e:	4805      	ldr	r0, [pc, #20]	; (80040b4 <MX_USART2_UART_Init+0x4c>)
 80040a0:	f004 fa16 	bl	80084d0 <HAL_UART_Init>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80040aa:	f7ff fa3d 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000a50 	.word	0x20000a50
 80040b8:	40004400 	.word	0x40004400

080040bc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80040c0:	4b11      	ldr	r3, [pc, #68]	; (8004108 <MX_USART3_UART_Init+0x4c>)
 80040c2:	4a12      	ldr	r2, [pc, #72]	; (800410c <MX_USART3_UART_Init+0x50>)
 80040c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80040c6:	4b10      	ldr	r3, [pc, #64]	; (8004108 <MX_USART3_UART_Init+0x4c>)
 80040c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80040ce:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <MX_USART3_UART_Init+0x4c>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80040d4:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <MX_USART3_UART_Init+0x4c>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80040da:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <MX_USART3_UART_Init+0x4c>)
 80040dc:	2200      	movs	r2, #0
 80040de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80040e0:	4b09      	ldr	r3, [pc, #36]	; (8004108 <MX_USART3_UART_Init+0x4c>)
 80040e2:	220c      	movs	r2, #12
 80040e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040e6:	4b08      	ldr	r3, [pc, #32]	; (8004108 <MX_USART3_UART_Init+0x4c>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <MX_USART3_UART_Init+0x4c>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80040f2:	4805      	ldr	r0, [pc, #20]	; (8004108 <MX_USART3_UART_Init+0x4c>)
 80040f4:	f004 f9ec 	bl	80084d0 <HAL_UART_Init>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80040fe:	f7ff fa13 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004102:	bf00      	nop
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000a94 	.word	0x20000a94
 800410c:	40004800 	.word	0x40004800

08004110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08c      	sub	sp, #48	; 0x30
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004118:	f107 031c 	add.w	r3, r7, #28
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	609a      	str	r2, [r3, #8]
 8004124:	60da      	str	r2, [r3, #12]
 8004126:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a68      	ldr	r2, [pc, #416]	; (80042d0 <HAL_UART_MspInit+0x1c0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d162      	bne.n	80041f8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	4b67      	ldr	r3, [pc, #412]	; (80042d4 <HAL_UART_MspInit+0x1c4>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	4a66      	ldr	r2, [pc, #408]	; (80042d4 <HAL_UART_MspInit+0x1c4>)
 800413c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004140:	6413      	str	r3, [r2, #64]	; 0x40
 8004142:	4b64      	ldr	r3, [pc, #400]	; (80042d4 <HAL_UART_MspInit+0x1c4>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414a:	61bb      	str	r3, [r7, #24]
 800414c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	4b60      	ldr	r3, [pc, #384]	; (80042d4 <HAL_UART_MspInit+0x1c4>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	4a5f      	ldr	r2, [pc, #380]	; (80042d4 <HAL_UART_MspInit+0x1c4>)
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	6313      	str	r3, [r2, #48]	; 0x30
 800415e:	4b5d      	ldr	r3, [pc, #372]	; (80042d4 <HAL_UART_MspInit+0x1c4>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800416a:	230c      	movs	r3, #12
 800416c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416e:	2302      	movs	r3, #2
 8004170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004172:	2300      	movs	r3, #0
 8004174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004176:	2303      	movs	r3, #3
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800417a:	2307      	movs	r3, #7
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800417e:	f107 031c 	add.w	r3, r7, #28
 8004182:	4619      	mov	r1, r3
 8004184:	4854      	ldr	r0, [pc, #336]	; (80042d8 <HAL_UART_MspInit+0x1c8>)
 8004186:	f001 fcf3 	bl	8005b70 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800418a:	4b54      	ldr	r3, [pc, #336]	; (80042dc <HAL_UART_MspInit+0x1cc>)
 800418c:	4a54      	ldr	r2, [pc, #336]	; (80042e0 <HAL_UART_MspInit+0x1d0>)
 800418e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004190:	4b52      	ldr	r3, [pc, #328]	; (80042dc <HAL_UART_MspInit+0x1cc>)
 8004192:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004196:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004198:	4b50      	ldr	r3, [pc, #320]	; (80042dc <HAL_UART_MspInit+0x1cc>)
 800419a:	2240      	movs	r2, #64	; 0x40
 800419c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800419e:	4b4f      	ldr	r3, [pc, #316]	; (80042dc <HAL_UART_MspInit+0x1cc>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041a4:	4b4d      	ldr	r3, [pc, #308]	; (80042dc <HAL_UART_MspInit+0x1cc>)
 80041a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041aa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041ac:	4b4b      	ldr	r3, [pc, #300]	; (80042dc <HAL_UART_MspInit+0x1cc>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041b2:	4b4a      	ldr	r3, [pc, #296]	; (80042dc <HAL_UART_MspInit+0x1cc>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80041b8:	4b48      	ldr	r3, [pc, #288]	; (80042dc <HAL_UART_MspInit+0x1cc>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80041be:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_UART_MspInit+0x1cc>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041c4:	4b45      	ldr	r3, [pc, #276]	; (80042dc <HAL_UART_MspInit+0x1cc>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80041ca:	4844      	ldr	r0, [pc, #272]	; (80042dc <HAL_UART_MspInit+0x1cc>)
 80041cc:	f001 f8ce 	bl	800536c <HAL_DMA_Init>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80041d6:	f7ff f9a7 	bl	8003528 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a3f      	ldr	r2, [pc, #252]	; (80042dc <HAL_UART_MspInit+0x1cc>)
 80041de:	635a      	str	r2, [r3, #52]	; 0x34
 80041e0:	4a3e      	ldr	r2, [pc, #248]	; (80042dc <HAL_UART_MspInit+0x1cc>)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80041e6:	2200      	movs	r2, #0
 80041e8:	2105      	movs	r1, #5
 80041ea:	2026      	movs	r0, #38	; 0x26
 80041ec:	f001 f886 	bl	80052fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80041f0:	2026      	movs	r0, #38	; 0x26
 80041f2:	f001 f89f 	bl	8005334 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80041f6:	e067      	b.n	80042c8 <HAL_UART_MspInit+0x1b8>
  else if(uartHandle->Instance==USART3)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a39      	ldr	r2, [pc, #228]	; (80042e4 <HAL_UART_MspInit+0x1d4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d162      	bne.n	80042c8 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	4b33      	ldr	r3, [pc, #204]	; (80042d4 <HAL_UART_MspInit+0x1c4>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	4a32      	ldr	r2, [pc, #200]	; (80042d4 <HAL_UART_MspInit+0x1c4>)
 800420c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004210:	6413      	str	r3, [r2, #64]	; 0x40
 8004212:	4b30      	ldr	r3, [pc, #192]	; (80042d4 <HAL_UART_MspInit+0x1c4>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	4b2c      	ldr	r3, [pc, #176]	; (80042d4 <HAL_UART_MspInit+0x1c4>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	4a2b      	ldr	r2, [pc, #172]	; (80042d4 <HAL_UART_MspInit+0x1c4>)
 8004228:	f043 0302 	orr.w	r3, r3, #2
 800422c:	6313      	str	r3, [r2, #48]	; 0x30
 800422e:	4b29      	ldr	r3, [pc, #164]	; (80042d4 <HAL_UART_MspInit+0x1c4>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800423a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800423e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004240:	2302      	movs	r3, #2
 8004242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004244:	2300      	movs	r3, #0
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004248:	2303      	movs	r3, #3
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800424c:	2307      	movs	r3, #7
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004250:	f107 031c 	add.w	r3, r7, #28
 8004254:	4619      	mov	r1, r3
 8004256:	4824      	ldr	r0, [pc, #144]	; (80042e8 <HAL_UART_MspInit+0x1d8>)
 8004258:	f001 fc8a 	bl	8005b70 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800425c:	4b23      	ldr	r3, [pc, #140]	; (80042ec <HAL_UART_MspInit+0x1dc>)
 800425e:	4a24      	ldr	r2, [pc, #144]	; (80042f0 <HAL_UART_MspInit+0x1e0>)
 8004260:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004262:	4b22      	ldr	r3, [pc, #136]	; (80042ec <HAL_UART_MspInit+0x1dc>)
 8004264:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004268:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800426a:	4b20      	ldr	r3, [pc, #128]	; (80042ec <HAL_UART_MspInit+0x1dc>)
 800426c:	2240      	movs	r2, #64	; 0x40
 800426e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004270:	4b1e      	ldr	r3, [pc, #120]	; (80042ec <HAL_UART_MspInit+0x1dc>)
 8004272:	2200      	movs	r2, #0
 8004274:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004276:	4b1d      	ldr	r3, [pc, #116]	; (80042ec <HAL_UART_MspInit+0x1dc>)
 8004278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800427c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800427e:	4b1b      	ldr	r3, [pc, #108]	; (80042ec <HAL_UART_MspInit+0x1dc>)
 8004280:	2200      	movs	r2, #0
 8004282:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004284:	4b19      	ldr	r3, [pc, #100]	; (80042ec <HAL_UART_MspInit+0x1dc>)
 8004286:	2200      	movs	r2, #0
 8004288:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800428a:	4b18      	ldr	r3, [pc, #96]	; (80042ec <HAL_UART_MspInit+0x1dc>)
 800428c:	2200      	movs	r2, #0
 800428e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004290:	4b16      	ldr	r3, [pc, #88]	; (80042ec <HAL_UART_MspInit+0x1dc>)
 8004292:	2200      	movs	r2, #0
 8004294:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004296:	4b15      	ldr	r3, [pc, #84]	; (80042ec <HAL_UART_MspInit+0x1dc>)
 8004298:	2200      	movs	r2, #0
 800429a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800429c:	4813      	ldr	r0, [pc, #76]	; (80042ec <HAL_UART_MspInit+0x1dc>)
 800429e:	f001 f865 	bl	800536c <HAL_DMA_Init>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80042a8:	f7ff f93e 	bl	8003528 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a0f      	ldr	r2, [pc, #60]	; (80042ec <HAL_UART_MspInit+0x1dc>)
 80042b0:	635a      	str	r2, [r3, #52]	; 0x34
 80042b2:	4a0e      	ldr	r2, [pc, #56]	; (80042ec <HAL_UART_MspInit+0x1dc>)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80042b8:	2200      	movs	r2, #0
 80042ba:	2105      	movs	r1, #5
 80042bc:	2027      	movs	r0, #39	; 0x27
 80042be:	f001 f81d 	bl	80052fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80042c2:	2027      	movs	r0, #39	; 0x27
 80042c4:	f001 f836 	bl	8005334 <HAL_NVIC_EnableIRQ>
}
 80042c8:	bf00      	nop
 80042ca:	3730      	adds	r7, #48	; 0x30
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40004400 	.word	0x40004400
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40020000 	.word	0x40020000
 80042dc:	20000ad8 	.word	0x20000ad8
 80042e0:	400260a0 	.word	0x400260a0
 80042e4:	40004800 	.word	0x40004800
 80042e8:	40020400 	.word	0x40020400
 80042ec:	20000b38 	.word	0x20000b38
 80042f0:	40026058 	.word	0x40026058

080042f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800432c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042f8:	480d      	ldr	r0, [pc, #52]	; (8004330 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042fa:	490e      	ldr	r1, [pc, #56]	; (8004334 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042fc:	4a0e      	ldr	r2, [pc, #56]	; (8004338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004300:	e002      	b.n	8004308 <LoopCopyDataInit>

08004302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004306:	3304      	adds	r3, #4

08004308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800430a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800430c:	d3f9      	bcc.n	8004302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800430e:	4a0b      	ldr	r2, [pc, #44]	; (800433c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004310:	4c0b      	ldr	r4, [pc, #44]	; (8004340 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004314:	e001      	b.n	800431a <LoopFillZerobss>

08004316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004318:	3204      	adds	r2, #4

0800431a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800431a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800431c:	d3fb      	bcc.n	8004316 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800431e:	f7ff fb61 	bl	80039e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004322:	f009 fb0f 	bl	800d944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004326:	f7ff f85c 	bl	80033e2 <main>
  bx  lr    
 800432a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800432c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004334:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8004338:	08012548 	.word	0x08012548
  ldr r2, =_sbss
 800433c:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8004340:	200055bc 	.word	0x200055bc

08004344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004344:	e7fe      	b.n	8004344 <ADC_IRQHandler>
	...

08004348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800434c:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <HAL_Init+0x40>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a0d      	ldr	r2, [pc, #52]	; (8004388 <HAL_Init+0x40>)
 8004352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_Init+0x40>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a0a      	ldr	r2, [pc, #40]	; (8004388 <HAL_Init+0x40>)
 800435e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004364:	4b08      	ldr	r3, [pc, #32]	; (8004388 <HAL_Init+0x40>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a07      	ldr	r2, [pc, #28]	; (8004388 <HAL_Init+0x40>)
 800436a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004370:	2003      	movs	r0, #3
 8004372:	f000 ffb8 	bl	80052e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004376:	200f      	movs	r0, #15
 8004378:	f7ff f9be 	bl	80036f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800437c:	f7ff f990 	bl	80036a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40023c00 	.word	0x40023c00

0800438c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_IncTick+0x20>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <HAL_IncTick+0x24>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4413      	add	r3, r2
 800439c:	4a04      	ldr	r2, [pc, #16]	; (80043b0 <HAL_IncTick+0x24>)
 800439e:	6013      	str	r3, [r2, #0]
}
 80043a0:	bf00      	nop
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20000098 	.word	0x20000098
 80043b0:	20000b98 	.word	0x20000b98

080043b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return uwTick;
 80043b8:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <HAL_GetTick+0x14>)
 80043ba:	681b      	ldr	r3, [r3, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000b98 	.word	0x20000b98

080043cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043d4:	f7ff ffee 	bl	80043b4 <HAL_GetTick>
 80043d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d005      	beq.n	80043f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <HAL_Delay+0x44>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043f2:	bf00      	nop
 80043f4:	f7ff ffde 	bl	80043b4 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	429a      	cmp	r2, r3
 8004402:	d8f7      	bhi.n	80043f4 <HAL_Delay+0x28>
  {
  }
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000098 	.word	0x20000098

08004414 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e0ed      	b.n	8004602 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d102      	bne.n	8004438 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc fe2a 	bl	800108c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004448:	f7ff ffb4 	bl	80043b4 <HAL_GetTick>
 800444c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800444e:	e012      	b.n	8004476 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004450:	f7ff ffb0 	bl	80043b4 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b0a      	cmp	r3, #10
 800445c:	d90b      	bls.n	8004476 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2205      	movs	r2, #5
 800446e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e0c5      	b.n	8004602 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0e5      	beq.n	8004450 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0202 	bic.w	r2, r2, #2
 8004492:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004494:	f7ff ff8e 	bl	80043b4 <HAL_GetTick>
 8004498:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800449a:	e012      	b.n	80044c2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800449c:	f7ff ff8a 	bl	80043b4 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b0a      	cmp	r3, #10
 80044a8:	d90b      	bls.n	80044c2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2205      	movs	r2, #5
 80044ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e09f      	b.n	8004602 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e5      	bne.n	800449c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	7e1b      	ldrb	r3, [r3, #24]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d108      	bne.n	80044ea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	e007      	b.n	80044fa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	7e5b      	ldrb	r3, [r3, #25]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d108      	bne.n	8004514 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	e007      	b.n	8004524 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004522:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	7e9b      	ldrb	r3, [r3, #26]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d108      	bne.n	800453e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0220 	orr.w	r2, r2, #32
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	e007      	b.n	800454e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0220 	bic.w	r2, r2, #32
 800454c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	7edb      	ldrb	r3, [r3, #27]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d108      	bne.n	8004568 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0210 	bic.w	r2, r2, #16
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	e007      	b.n	8004578 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0210 	orr.w	r2, r2, #16
 8004576:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	7f1b      	ldrb	r3, [r3, #28]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d108      	bne.n	8004592 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0208 	orr.w	r2, r2, #8
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	e007      	b.n	80045a2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0208 	bic.w	r2, r2, #8
 80045a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	7f5b      	ldrb	r3, [r3, #29]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d108      	bne.n	80045bc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0204 	orr.w	r2, r2, #4
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	e007      	b.n	80045cc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0204 	bic.w	r2, r2, #4
 80045ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	ea42 0103 	orr.w	r1, r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	1e5a      	subs	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004622:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d003      	beq.n	8004632 <HAL_CAN_ConfigFilter+0x26>
 800462a:	7cfb      	ldrb	r3, [r7, #19]
 800462c:	2b02      	cmp	r3, #2
 800462e:	f040 80be 	bne.w	80047ae <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004632:	4b65      	ldr	r3, [pc, #404]	; (80047c8 <HAL_CAN_ConfigFilter+0x1bc>)
 8004634:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800463c:	f043 0201 	orr.w	r2, r3, #1
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800464c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	431a      	orrs	r2, r3
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	2201      	movs	r2, #1
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	43db      	mvns	r3, r3
 8004684:	401a      	ands	r2, r3
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d123      	bne.n	80046dc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	43db      	mvns	r3, r3
 800469e:	401a      	ands	r2, r3
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80046b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	3248      	adds	r2, #72	; 0x48
 80046bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046d2:	6979      	ldr	r1, [r7, #20]
 80046d4:	3348      	adds	r3, #72	; 0x48
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	440b      	add	r3, r1
 80046da:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d122      	bne.n	800472a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004704:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	3248      	adds	r2, #72	; 0x48
 800470a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800471e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004720:	6979      	ldr	r1, [r7, #20]
 8004722:	3348      	adds	r3, #72	; 0x48
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	440b      	add	r3, r1
 8004728:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	43db      	mvns	r3, r3
 800473c:	401a      	ands	r2, r3
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004744:	e007      	b.n	8004756 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	431a      	orrs	r2, r3
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	43db      	mvns	r3, r3
 8004768:	401a      	ands	r2, r3
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004770:	e007      	b.n	8004782 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	431a      	orrs	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d107      	bne.n	800479a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	431a      	orrs	r2, r3
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047a0:	f023 0201 	bic.w	r2, r3, #1
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e006      	b.n	80047bc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
  }
}
 80047bc:	4618      	mov	r0, r3
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	40006400 	.word	0x40006400

080047cc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d12e      	bne.n	800483e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047f8:	f7ff fddc 	bl	80043b4 <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80047fe:	e012      	b.n	8004826 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004800:	f7ff fdd8 	bl	80043b4 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b0a      	cmp	r3, #10
 800480c:	d90b      	bls.n	8004826 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2205      	movs	r2, #5
 800481e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e012      	b.n	800484c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e5      	bne.n	8004800 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e006      	b.n	800484c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
  }
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004854:	b480      	push	{r7}
 8004856:	b089      	sub	sp, #36	; 0x24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004868:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004872:	7ffb      	ldrb	r3, [r7, #31]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d003      	beq.n	8004880 <HAL_CAN_AddTxMessage+0x2c>
 8004878:	7ffb      	ldrb	r3, [r7, #31]
 800487a:	2b02      	cmp	r3, #2
 800487c:	f040 80b8 	bne.w	80049f0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10a      	bne.n	80048a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004890:	2b00      	cmp	r3, #0
 8004892:	d105      	bne.n	80048a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 80a0 	beq.w	80049e0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	0e1b      	lsrs	r3, r3, #24
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d907      	bls.n	80048c0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e09e      	b.n	80049fe <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80048c0:	2201      	movs	r2, #1
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	409a      	lsls	r2, r3
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10d      	bne.n	80048ee <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80048dc:	68f9      	ldr	r1, [r7, #12]
 80048de:	6809      	ldr	r1, [r1, #0]
 80048e0:	431a      	orrs	r2, r3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	3318      	adds	r3, #24
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	440b      	add	r3, r1
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	e00f      	b.n	800490e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80048f8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80048fe:	68f9      	ldr	r1, [r7, #12]
 8004900:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004902:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	3318      	adds	r3, #24
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	440b      	add	r3, r1
 800490c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6819      	ldr	r1, [r3, #0]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	3318      	adds	r3, #24
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	440b      	add	r3, r1
 800491e:	3304      	adds	r3, #4
 8004920:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	7d1b      	ldrb	r3, [r3, #20]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d111      	bne.n	800494e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	3318      	adds	r3, #24
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	4413      	add	r3, r2
 8004936:	3304      	adds	r3, #4
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	6811      	ldr	r1, [r2, #0]
 800493e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	3318      	adds	r3, #24
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	440b      	add	r3, r1
 800494a:	3304      	adds	r3, #4
 800494c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3307      	adds	r3, #7
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	061a      	lsls	r2, r3, #24
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3306      	adds	r3, #6
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3305      	adds	r3, #5
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	4313      	orrs	r3, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	3204      	adds	r2, #4
 800496e:	7812      	ldrb	r2, [r2, #0]
 8004970:	4610      	mov	r0, r2
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	6811      	ldr	r1, [r2, #0]
 8004976:	ea43 0200 	orr.w	r2, r3, r0
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	440b      	add	r3, r1
 8004980:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004984:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3303      	adds	r3, #3
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	061a      	lsls	r2, r3, #24
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	3302      	adds	r3, #2
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	041b      	lsls	r3, r3, #16
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3301      	adds	r3, #1
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	4313      	orrs	r3, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	7812      	ldrb	r2, [r2, #0]
 80049a6:	4610      	mov	r0, r2
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	6811      	ldr	r1, [r2, #0]
 80049ac:	ea43 0200 	orr.w	r2, r3, r0
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	440b      	add	r3, r1
 80049b6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80049ba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	3318      	adds	r3, #24
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	4413      	add	r3, r2
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	6811      	ldr	r1, [r2, #0]
 80049ce:	f043 0201 	orr.w	r2, r3, #1
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	3318      	adds	r3, #24
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	440b      	add	r3, r1
 80049da:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	e00e      	b.n	80049fe <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e006      	b.n	80049fe <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
  }
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3724      	adds	r7, #36	; 0x24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a1c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004a1e:	7afb      	ldrb	r3, [r7, #11]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d002      	beq.n	8004a2a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004a24:	7afb      	ldrb	r3, [r7, #11]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d11d      	bne.n	8004a66 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	3301      	adds	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004a66:	68fb      	ldr	r3, [r7, #12]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a88:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a8a:	7dfb      	ldrb	r3, [r7, #23]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d003      	beq.n	8004a98 <HAL_CAN_GetRxMessage+0x24>
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	f040 80f3 	bne.w	8004c7e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10e      	bne.n	8004abc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0303 	and.w	r3, r3, #3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d116      	bne.n	8004ada <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0e7      	b.n	8004c8c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d107      	bne.n	8004ada <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e0d8      	b.n	8004c8c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	331b      	adds	r3, #27
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	4413      	add	r3, r2
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0204 	and.w	r2, r3, #4
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10c      	bne.n	8004b12 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	331b      	adds	r3, #27
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	4413      	add	r3, r2
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	0d5b      	lsrs	r3, r3, #21
 8004b08:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	e00b      	b.n	8004b2a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	331b      	adds	r3, #27
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	4413      	add	r3, r2
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	08db      	lsrs	r3, r3, #3
 8004b22:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	331b      	adds	r3, #27
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	4413      	add	r3, r2
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0202 	and.w	r2, r3, #2
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	331b      	adds	r3, #27
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	4413      	add	r3, r2
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 020f 	and.w	r2, r3, #15
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	331b      	adds	r3, #27
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	4413      	add	r3, r2
 8004b64:	3304      	adds	r3, #4
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	0a1b      	lsrs	r3, r3, #8
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	331b      	adds	r3, #27
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	0c1b      	lsrs	r3, r3, #16
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	0a1a      	lsrs	r2, r3, #8
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	0c1a      	lsrs	r2, r3, #16
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	3302      	adds	r3, #2
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	0e1a      	lsrs	r2, r3, #24
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	3303      	adds	r3, #3
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	0a1a      	lsrs	r2, r3, #8
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	3305      	adds	r3, #5
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	0c1a      	lsrs	r2, r3, #16
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	3306      	adds	r3, #6
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	0e1a      	lsrs	r2, r3, #24
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	3307      	adds	r3, #7
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d108      	bne.n	8004c6a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0220 	orr.w	r2, r2, #32
 8004c66:	60da      	str	r2, [r3, #12]
 8004c68:	e007      	b.n	8004c7a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0220 	orr.w	r2, r2, #32
 8004c78:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e006      	b.n	8004c8c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
  }
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ca8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d002      	beq.n	8004cb6 <HAL_CAN_ActivateNotification+0x1e>
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d109      	bne.n	8004cca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6959      	ldr	r1, [r3, #20]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e006      	b.n	8004cd8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
  }
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08a      	sub	sp, #40	; 0x28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004cec:	2300      	movs	r3, #0
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d07c      	beq.n	8004e24 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d023      	beq.n	8004d7c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f983 	bl	8005052 <HAL_CAN_TxMailbox0CompleteCallback>
 8004d4c:	e016      	b.n	8004d7c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d004      	beq.n	8004d62 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d60:	e00c      	b.n	8004d7c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
 8004d74:	e002      	b.n	8004d7c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f989 	bl	800508e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d024      	beq.n	8004dd0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f963 	bl	8005066 <HAL_CAN_TxMailbox1CompleteCallback>
 8004da0:	e016      	b.n	8004dd0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d004      	beq.n	8004db6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
 8004db4:	e00c      	b.n	8004dd0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d004      	beq.n	8004dca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc8:	e002      	b.n	8004dd0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f969 	bl	80050a2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d024      	beq.n	8004e24 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004de2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f943 	bl	800507a <HAL_CAN_TxMailbox2CompleteCallback>
 8004df4:	e016      	b.n	8004e24 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d004      	beq.n	8004e0a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
 8004e08:	e00c      	b.n	8004e24 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d004      	beq.n	8004e1e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1c:	e002      	b.n	8004e24 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f949 	bl	80050b6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00c      	beq.n	8004e48 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2210      	movs	r2, #16
 8004e46:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00b      	beq.n	8004e6a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d006      	beq.n	8004e6a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2208      	movs	r2, #8
 8004e62:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f930 	bl	80050ca <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d009      	beq.n	8004e88 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fc fbc0 	bl	8001608 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00c      	beq.n	8004eac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d007      	beq.n	8004eac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2210      	movs	r2, #16
 8004eaa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f003 0308 	and.w	r3, r3, #8
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d006      	beq.n	8004ece <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2208      	movs	r2, #8
 8004ec6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f912 	bl	80050f2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d009      	beq.n	8004eec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f8f9 	bl	80050de <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00b      	beq.n	8004f0e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d006      	beq.n	8004f0e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2210      	movs	r2, #16
 8004f06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f8fc 	bl	8005106 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00b      	beq.n	8004f30 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d006      	beq.n	8004f30 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2208      	movs	r2, #8
 8004f28:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f8f5 	bl	800511a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d07b      	beq.n	8005032 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d072      	beq.n	800502a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d008      	beq.n	8004f60 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d008      	beq.n	8004f7c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	f043 0302 	orr.w	r3, r3, #2
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	f043 0304 	orr.w	r3, r3, #4
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d043      	beq.n	800502a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d03e      	beq.n	800502a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fb2:	2b60      	cmp	r3, #96	; 0x60
 8004fb4:	d02b      	beq.n	800500e <HAL_CAN_IRQHandler+0x32a>
 8004fb6:	2b60      	cmp	r3, #96	; 0x60
 8004fb8:	d82e      	bhi.n	8005018 <HAL_CAN_IRQHandler+0x334>
 8004fba:	2b50      	cmp	r3, #80	; 0x50
 8004fbc:	d022      	beq.n	8005004 <HAL_CAN_IRQHandler+0x320>
 8004fbe:	2b50      	cmp	r3, #80	; 0x50
 8004fc0:	d82a      	bhi.n	8005018 <HAL_CAN_IRQHandler+0x334>
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	d019      	beq.n	8004ffa <HAL_CAN_IRQHandler+0x316>
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d826      	bhi.n	8005018 <HAL_CAN_IRQHandler+0x334>
 8004fca:	2b30      	cmp	r3, #48	; 0x30
 8004fcc:	d010      	beq.n	8004ff0 <HAL_CAN_IRQHandler+0x30c>
 8004fce:	2b30      	cmp	r3, #48	; 0x30
 8004fd0:	d822      	bhi.n	8005018 <HAL_CAN_IRQHandler+0x334>
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d002      	beq.n	8004fdc <HAL_CAN_IRQHandler+0x2f8>
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d005      	beq.n	8004fe6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004fda:	e01d      	b.n	8005018 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	f043 0308 	orr.w	r3, r3, #8
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004fe4:	e019      	b.n	800501a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	f043 0310 	orr.w	r3, r3, #16
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004fee:	e014      	b.n	800501a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	f043 0320 	orr.w	r3, r3, #32
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ff8:	e00f      	b.n	800501a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005002:	e00a      	b.n	800501a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800500c:	e005      	b.n	800501a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005016:	e000      	b.n	800501a <HAL_CAN_IRQHandler+0x336>
            break;
 8005018:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699a      	ldr	r2, [r3, #24]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005028:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2204      	movs	r2, #4
 8005030:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	2b00      	cmp	r3, #0
 8005036:	d008      	beq.n	800504a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f872 	bl	800512e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800504a:	bf00      	nop
 800504c:	3728      	adds	r7, #40	; 0x28
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
	...

08005144 <__NVIC_SetPriorityGrouping>:
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005154:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <__NVIC_SetPriorityGrouping+0x44>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005160:	4013      	ands	r3, r2
 8005162:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800516c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005176:	4a04      	ldr	r2, [pc, #16]	; (8005188 <__NVIC_SetPriorityGrouping+0x44>)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	60d3      	str	r3, [r2, #12]
}
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	e000ed00 	.word	0xe000ed00

0800518c <__NVIC_GetPriorityGrouping>:
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005190:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	0a1b      	lsrs	r3, r3, #8
 8005196:	f003 0307 	and.w	r3, r3, #7
}
 800519a:	4618      	mov	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	e000ed00 	.word	0xe000ed00

080051a8 <__NVIC_EnableIRQ>:
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	db0b      	blt.n	80051d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	f003 021f 	and.w	r2, r3, #31
 80051c0:	4907      	ldr	r1, [pc, #28]	; (80051e0 <__NVIC_EnableIRQ+0x38>)
 80051c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	2001      	movs	r0, #1
 80051ca:	fa00 f202 	lsl.w	r2, r0, r2
 80051ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	e000e100 	.word	0xe000e100

080051e4 <__NVIC_DisableIRQ>:
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4603      	mov	r3, r0
 80051ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	db12      	blt.n	800521c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	f003 021f 	and.w	r2, r3, #31
 80051fc:	490a      	ldr	r1, [pc, #40]	; (8005228 <__NVIC_DisableIRQ+0x44>)
 80051fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	2001      	movs	r0, #1
 8005206:	fa00 f202 	lsl.w	r2, r0, r2
 800520a:	3320      	adds	r3, #32
 800520c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005210:	f3bf 8f4f 	dsb	sy
}
 8005214:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005216:	f3bf 8f6f 	isb	sy
}
 800521a:	bf00      	nop
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	e000e100 	.word	0xe000e100

0800522c <__NVIC_SetPriority>:
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	6039      	str	r1, [r7, #0]
 8005236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800523c:	2b00      	cmp	r3, #0
 800523e:	db0a      	blt.n	8005256 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	b2da      	uxtb	r2, r3
 8005244:	490c      	ldr	r1, [pc, #48]	; (8005278 <__NVIC_SetPriority+0x4c>)
 8005246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800524a:	0112      	lsls	r2, r2, #4
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	440b      	add	r3, r1
 8005250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005254:	e00a      	b.n	800526c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	b2da      	uxtb	r2, r3
 800525a:	4908      	ldr	r1, [pc, #32]	; (800527c <__NVIC_SetPriority+0x50>)
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	3b04      	subs	r3, #4
 8005264:	0112      	lsls	r2, r2, #4
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	440b      	add	r3, r1
 800526a:	761a      	strb	r2, [r3, #24]
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	e000e100 	.word	0xe000e100
 800527c:	e000ed00 	.word	0xe000ed00

08005280 <NVIC_EncodePriority>:
{
 8005280:	b480      	push	{r7}
 8005282:	b089      	sub	sp, #36	; 0x24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f1c3 0307 	rsb	r3, r3, #7
 800529a:	2b04      	cmp	r3, #4
 800529c:	bf28      	it	cs
 800529e:	2304      	movcs	r3, #4
 80052a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	3304      	adds	r3, #4
 80052a6:	2b06      	cmp	r3, #6
 80052a8:	d902      	bls.n	80052b0 <NVIC_EncodePriority+0x30>
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	3b03      	subs	r3, #3
 80052ae:	e000      	b.n	80052b2 <NVIC_EncodePriority+0x32>
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052b4:	f04f 32ff 	mov.w	r2, #4294967295
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	43da      	mvns	r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	401a      	ands	r2, r3
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052c8:	f04f 31ff 	mov.w	r1, #4294967295
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	fa01 f303 	lsl.w	r3, r1, r3
 80052d2:	43d9      	mvns	r1, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052d8:	4313      	orrs	r3, r2
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3724      	adds	r7, #36	; 0x24
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff ff28 	bl	8005144 <__NVIC_SetPriorityGrouping>
}
 80052f4:	bf00      	nop
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	4603      	mov	r3, r0
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800530e:	f7ff ff3d 	bl	800518c <__NVIC_GetPriorityGrouping>
 8005312:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	68b9      	ldr	r1, [r7, #8]
 8005318:	6978      	ldr	r0, [r7, #20]
 800531a:	f7ff ffb1 	bl	8005280 <NVIC_EncodePriority>
 800531e:	4602      	mov	r2, r0
 8005320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005324:	4611      	mov	r1, r2
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff ff80 	bl	800522c <__NVIC_SetPriority>
}
 800532c:	bf00      	nop
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800533e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff ff30 	bl	80051a8 <__NVIC_EnableIRQ>
}
 8005348:	bf00      	nop
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800535a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff ff40 	bl	80051e4 <__NVIC_DisableIRQ>
}
 8005364:	bf00      	nop
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005378:	f7ff f81c 	bl	80043b4 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e099      	b.n	80054bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0201 	bic.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053a8:	e00f      	b.n	80053ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053aa:	f7ff f803 	bl	80043b4 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b05      	cmp	r3, #5
 80053b6:	d908      	bls.n	80053ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2220      	movs	r2, #32
 80053bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2203      	movs	r2, #3
 80053c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e078      	b.n	80054bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e8      	bne.n	80053aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4b38      	ldr	r3, [pc, #224]	; (80054c4 <HAL_DMA_Init+0x158>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005402:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800540e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	2b04      	cmp	r3, #4
 8005422:	d107      	bne.n	8005434 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	4313      	orrs	r3, r2
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f023 0307 	bic.w	r3, r3, #7
 800544a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	2b04      	cmp	r3, #4
 800545c:	d117      	bne.n	800548e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00e      	beq.n	800548e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fb01 	bl	8005a78 <DMA_CheckFifoParam>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2240      	movs	r2, #64	; 0x40
 8005480:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800548a:	2301      	movs	r3, #1
 800548c:	e016      	b.n	80054bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fab8 	bl	8005a0c <DMA_CalcBaseAndBitshift>
 800549c:	4603      	mov	r3, r0
 800549e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a4:	223f      	movs	r2, #63	; 0x3f
 80054a6:	409a      	lsls	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	f010803f 	.word	0xf010803f

080054c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_DMA_Start_IT+0x26>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e040      	b.n	8005570 <HAL_DMA_Start_IT+0xa8>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d12f      	bne.n	8005562 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	68b9      	ldr	r1, [r7, #8]
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 fa4a 	bl	80059b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005520:	223f      	movs	r2, #63	; 0x3f
 8005522:	409a      	lsls	r2, r3
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0216 	orr.w	r2, r2, #22
 8005536:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0208 	orr.w	r2, r2, #8
 800554e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	e005      	b.n	800556e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800556a:	2302      	movs	r3, #2
 800556c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005584:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005586:	f7fe ff15 	bl	80043b4 <HAL_GetTick>
 800558a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d008      	beq.n	80055aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2280      	movs	r2, #128	; 0x80
 800559c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e052      	b.n	8005650 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0216 	bic.w	r2, r2, #22
 80055b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695a      	ldr	r2, [r3, #20]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d103      	bne.n	80055da <HAL_DMA_Abort+0x62>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d007      	beq.n	80055ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0208 	bic.w	r2, r2, #8
 80055e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0201 	bic.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055fa:	e013      	b.n	8005624 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055fc:	f7fe feda 	bl	80043b4 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b05      	cmp	r3, #5
 8005608:	d90c      	bls.n	8005624 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2203      	movs	r2, #3
 8005614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e015      	b.n	8005650 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e4      	bne.n	80055fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005636:	223f      	movs	r2, #63	; 0x3f
 8005638:	409a      	lsls	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d004      	beq.n	8005676 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2280      	movs	r2, #128	; 0x80
 8005670:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e00c      	b.n	8005690 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2205      	movs	r2, #5
 800567a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0201 	bic.w	r2, r2, #1
 800568c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056a8:	4b8e      	ldr	r3, [pc, #568]	; (80058e4 <HAL_DMA_IRQHandler+0x248>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a8e      	ldr	r2, [pc, #568]	; (80058e8 <HAL_DMA_IRQHandler+0x24c>)
 80056ae:	fba2 2303 	umull	r2, r3, r2, r3
 80056b2:	0a9b      	lsrs	r3, r3, #10
 80056b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c6:	2208      	movs	r2, #8
 80056c8:	409a      	lsls	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4013      	ands	r3, r2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d01a      	beq.n	8005708 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d013      	beq.n	8005708 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0204 	bic.w	r2, r2, #4
 80056ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f4:	2208      	movs	r2, #8
 80056f6:	409a      	lsls	r2, r3
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005700:	f043 0201 	orr.w	r2, r3, #1
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800570c:	2201      	movs	r2, #1
 800570e:	409a      	lsls	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4013      	ands	r3, r2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d012      	beq.n	800573e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00b      	beq.n	800573e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800572a:	2201      	movs	r2, #1
 800572c:	409a      	lsls	r2, r3
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005736:	f043 0202 	orr.w	r2, r3, #2
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005742:	2204      	movs	r2, #4
 8005744:	409a      	lsls	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4013      	ands	r3, r2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d012      	beq.n	8005774 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00b      	beq.n	8005774 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005760:	2204      	movs	r2, #4
 8005762:	409a      	lsls	r2, r3
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	f043 0204 	orr.w	r2, r3, #4
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005778:	2210      	movs	r2, #16
 800577a:	409a      	lsls	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4013      	ands	r3, r2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d043      	beq.n	800580c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d03c      	beq.n	800580c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005796:	2210      	movs	r2, #16
 8005798:	409a      	lsls	r2, r3
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d018      	beq.n	80057de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d108      	bne.n	80057cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d024      	beq.n	800580c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	4798      	blx	r3
 80057ca:	e01f      	b.n	800580c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01b      	beq.n	800580c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	4798      	blx	r3
 80057dc:	e016      	b.n	800580c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d107      	bne.n	80057fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0208 	bic.w	r2, r2, #8
 80057fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005810:	2220      	movs	r2, #32
 8005812:	409a      	lsls	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4013      	ands	r3, r2
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 808f 	beq.w	800593c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0310 	and.w	r3, r3, #16
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8087 	beq.w	800593c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005832:	2220      	movs	r2, #32
 8005834:	409a      	lsls	r2, r3
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b05      	cmp	r3, #5
 8005844:	d136      	bne.n	80058b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0216 	bic.w	r2, r2, #22
 8005854:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695a      	ldr	r2, [r3, #20]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005864:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <HAL_DMA_IRQHandler+0x1da>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0208 	bic.w	r2, r2, #8
 8005884:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588a:	223f      	movs	r2, #63	; 0x3f
 800588c:	409a      	lsls	r2, r3
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d07e      	beq.n	80059a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	4798      	blx	r3
        }
        return;
 80058b2:	e079      	b.n	80059a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d01d      	beq.n	80058fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10d      	bne.n	80058ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d031      	beq.n	800593c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	4798      	blx	r3
 80058e0:	e02c      	b.n	800593c <HAL_DMA_IRQHandler+0x2a0>
 80058e2:	bf00      	nop
 80058e4:	20000090 	.word	0x20000090
 80058e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d023      	beq.n	800593c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	4798      	blx	r3
 80058fc:	e01e      	b.n	800593c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10f      	bne.n	800592c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0210 	bic.w	r2, r2, #16
 800591a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005940:	2b00      	cmp	r3, #0
 8005942:	d032      	beq.n	80059aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d022      	beq.n	8005996 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2205      	movs	r2, #5
 8005954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0201 	bic.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	3301      	adds	r3, #1
 800596c:	60bb      	str	r3, [r7, #8]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	429a      	cmp	r2, r3
 8005972:	d307      	bcc.n	8005984 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f2      	bne.n	8005968 <HAL_DMA_IRQHandler+0x2cc>
 8005982:	e000      	b.n	8005986 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005984:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	4798      	blx	r3
 80059a6:	e000      	b.n	80059aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80059a8:	bf00      	nop
    }
  }
}
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	2b40      	cmp	r3, #64	; 0x40
 80059dc:	d108      	bne.n	80059f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80059ee:	e007      	b.n	8005a00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	60da      	str	r2, [r3, #12]
}
 8005a00:	bf00      	nop
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	3b10      	subs	r3, #16
 8005a1c:	4a14      	ldr	r2, [pc, #80]	; (8005a70 <DMA_CalcBaseAndBitshift+0x64>)
 8005a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a26:	4a13      	ldr	r2, [pc, #76]	; (8005a74 <DMA_CalcBaseAndBitshift+0x68>)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d909      	bls.n	8005a4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a42:	f023 0303 	bic.w	r3, r3, #3
 8005a46:	1d1a      	adds	r2, r3, #4
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	659a      	str	r2, [r3, #88]	; 0x58
 8005a4c:	e007      	b.n	8005a5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a56:	f023 0303 	bic.w	r3, r3, #3
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	aaaaaaab 	.word	0xaaaaaaab
 8005a74:	08011f08 	.word	0x08011f08

08005a78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d11f      	bne.n	8005ad2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d856      	bhi.n	8005b46 <DMA_CheckFifoParam+0xce>
 8005a98:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <DMA_CheckFifoParam+0x28>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005ab1 	.word	0x08005ab1
 8005aa4:	08005ac3 	.word	0x08005ac3
 8005aa8:	08005ab1 	.word	0x08005ab1
 8005aac:	08005b47 	.word	0x08005b47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d046      	beq.n	8005b4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ac0:	e043      	b.n	8005b4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005aca:	d140      	bne.n	8005b4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ad0:	e03d      	b.n	8005b4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ada:	d121      	bne.n	8005b20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d837      	bhi.n	8005b52 <DMA_CheckFifoParam+0xda>
 8005ae2:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <DMA_CheckFifoParam+0x70>)
 8005ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae8:	08005af9 	.word	0x08005af9
 8005aec:	08005aff 	.word	0x08005aff
 8005af0:	08005af9 	.word	0x08005af9
 8005af4:	08005b11 	.word	0x08005b11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	73fb      	strb	r3, [r7, #15]
      break;
 8005afc:	e030      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d025      	beq.n	8005b56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b0e:	e022      	b.n	8005b56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b18:	d11f      	bne.n	8005b5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b1e:	e01c      	b.n	8005b5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d903      	bls.n	8005b2e <DMA_CheckFifoParam+0xb6>
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d003      	beq.n	8005b34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b2c:	e018      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	73fb      	strb	r3, [r7, #15]
      break;
 8005b32:	e015      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00e      	beq.n	8005b5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]
      break;
 8005b44:	e00b      	b.n	8005b5e <DMA_CheckFifoParam+0xe6>
      break;
 8005b46:	bf00      	nop
 8005b48:	e00a      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
      break;
 8005b4a:	bf00      	nop
 8005b4c:	e008      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
      break;
 8005b4e:	bf00      	nop
 8005b50:	e006      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
      break;
 8005b52:	bf00      	nop
 8005b54:	e004      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
      break;
 8005b56:	bf00      	nop
 8005b58:	e002      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
      break;   
 8005b5a:	bf00      	nop
 8005b5c:	e000      	b.n	8005b60 <DMA_CheckFifoParam+0xe8>
      break;
 8005b5e:	bf00      	nop
    }
  } 
  
  return status; 
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop

08005b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b089      	sub	sp, #36	; 0x24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b86:	2300      	movs	r3, #0
 8005b88:	61fb      	str	r3, [r7, #28]
 8005b8a:	e16b      	b.n	8005e64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	fa02 f303 	lsl.w	r3, r2, r3
 8005b94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	f040 815a 	bne.w	8005e5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d005      	beq.n	8005bc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d130      	bne.n	8005c24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	2203      	movs	r2, #3
 8005bce:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd2:	43db      	mvns	r3, r3
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	fa02 f303 	lsl.w	r3, r2, r3
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	43db      	mvns	r3, r3
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	4013      	ands	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	091b      	lsrs	r3, r3, #4
 8005c0e:	f003 0201 	and.w	r2, r3, #1
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	fa02 f303 	lsl.w	r3, r2, r3
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d017      	beq.n	8005c60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	2203      	movs	r2, #3
 8005c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c40:	43db      	mvns	r3, r3
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	4013      	ands	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f003 0303 	and.w	r3, r3, #3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d123      	bne.n	8005cb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	08da      	lsrs	r2, r3, #3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3208      	adds	r2, #8
 8005c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	220f      	movs	r2, #15
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	08da      	lsrs	r2, r3, #3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3208      	adds	r2, #8
 8005cae:	69b9      	ldr	r1, [r7, #24]
 8005cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f003 0203 	and.w	r2, r3, #3
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 80b4 	beq.w	8005e5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	4b60      	ldr	r3, [pc, #384]	; (8005e7c <HAL_GPIO_Init+0x30c>)
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfe:	4a5f      	ldr	r2, [pc, #380]	; (8005e7c <HAL_GPIO_Init+0x30c>)
 8005d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d04:	6453      	str	r3, [r2, #68]	; 0x44
 8005d06:	4b5d      	ldr	r3, [pc, #372]	; (8005e7c <HAL_GPIO_Init+0x30c>)
 8005d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d12:	4a5b      	ldr	r2, [pc, #364]	; (8005e80 <HAL_GPIO_Init+0x310>)
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	089b      	lsrs	r3, r3, #2
 8005d18:	3302      	adds	r3, #2
 8005d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	220f      	movs	r2, #15
 8005d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2e:	43db      	mvns	r3, r3
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	4013      	ands	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a52      	ldr	r2, [pc, #328]	; (8005e84 <HAL_GPIO_Init+0x314>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d02b      	beq.n	8005d96 <HAL_GPIO_Init+0x226>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a51      	ldr	r2, [pc, #324]	; (8005e88 <HAL_GPIO_Init+0x318>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d025      	beq.n	8005d92 <HAL_GPIO_Init+0x222>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a50      	ldr	r2, [pc, #320]	; (8005e8c <HAL_GPIO_Init+0x31c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01f      	beq.n	8005d8e <HAL_GPIO_Init+0x21e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a4f      	ldr	r2, [pc, #316]	; (8005e90 <HAL_GPIO_Init+0x320>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d019      	beq.n	8005d8a <HAL_GPIO_Init+0x21a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a4e      	ldr	r2, [pc, #312]	; (8005e94 <HAL_GPIO_Init+0x324>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_GPIO_Init+0x216>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a4d      	ldr	r2, [pc, #308]	; (8005e98 <HAL_GPIO_Init+0x328>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00d      	beq.n	8005d82 <HAL_GPIO_Init+0x212>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a4c      	ldr	r2, [pc, #304]	; (8005e9c <HAL_GPIO_Init+0x32c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d007      	beq.n	8005d7e <HAL_GPIO_Init+0x20e>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a4b      	ldr	r2, [pc, #300]	; (8005ea0 <HAL_GPIO_Init+0x330>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d101      	bne.n	8005d7a <HAL_GPIO_Init+0x20a>
 8005d76:	2307      	movs	r3, #7
 8005d78:	e00e      	b.n	8005d98 <HAL_GPIO_Init+0x228>
 8005d7a:	2308      	movs	r3, #8
 8005d7c:	e00c      	b.n	8005d98 <HAL_GPIO_Init+0x228>
 8005d7e:	2306      	movs	r3, #6
 8005d80:	e00a      	b.n	8005d98 <HAL_GPIO_Init+0x228>
 8005d82:	2305      	movs	r3, #5
 8005d84:	e008      	b.n	8005d98 <HAL_GPIO_Init+0x228>
 8005d86:	2304      	movs	r3, #4
 8005d88:	e006      	b.n	8005d98 <HAL_GPIO_Init+0x228>
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e004      	b.n	8005d98 <HAL_GPIO_Init+0x228>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e002      	b.n	8005d98 <HAL_GPIO_Init+0x228>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <HAL_GPIO_Init+0x228>
 8005d96:	2300      	movs	r3, #0
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	f002 0203 	and.w	r2, r2, #3
 8005d9e:	0092      	lsls	r2, r2, #2
 8005da0:	4093      	lsls	r3, r2
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005da8:	4935      	ldr	r1, [pc, #212]	; (8005e80 <HAL_GPIO_Init+0x310>)
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	089b      	lsrs	r3, r3, #2
 8005dae:	3302      	adds	r3, #2
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005db6:	4b3b      	ldr	r3, [pc, #236]	; (8005ea4 <HAL_GPIO_Init+0x334>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	43db      	mvns	r3, r3
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005dda:	4a32      	ldr	r2, [pc, #200]	; (8005ea4 <HAL_GPIO_Init+0x334>)
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005de0:	4b30      	ldr	r3, [pc, #192]	; (8005ea4 <HAL_GPIO_Init+0x334>)
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	43db      	mvns	r3, r3
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	4013      	ands	r3, r2
 8005dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e04:	4a27      	ldr	r2, [pc, #156]	; (8005ea4 <HAL_GPIO_Init+0x334>)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e0a:	4b26      	ldr	r3, [pc, #152]	; (8005ea4 <HAL_GPIO_Init+0x334>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	43db      	mvns	r3, r3
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	4013      	ands	r3, r2
 8005e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ea4 <HAL_GPIO_Init+0x334>)
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e34:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <HAL_GPIO_Init+0x334>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	4013      	ands	r3, r2
 8005e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e58:	4a12      	ldr	r2, [pc, #72]	; (8005ea4 <HAL_GPIO_Init+0x334>)
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	3301      	adds	r3, #1
 8005e62:	61fb      	str	r3, [r7, #28]
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b0f      	cmp	r3, #15
 8005e68:	f67f ae90 	bls.w	8005b8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	3724      	adds	r7, #36	; 0x24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	40013800 	.word	0x40013800
 8005e84:	40020000 	.word	0x40020000
 8005e88:	40020400 	.word	0x40020400
 8005e8c:	40020800 	.word	0x40020800
 8005e90:	40020c00 	.word	0x40020c00
 8005e94:	40021000 	.word	0x40021000
 8005e98:	40021400 	.word	0x40021400
 8005e9c:	40021800 	.word	0x40021800
 8005ea0:	40021c00 	.word	0x40021c00
 8005ea4:	40013c00 	.word	0x40013c00

08005ea8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691a      	ldr	r2, [r3, #16]
 8005eb8:	887b      	ldrh	r3, [r7, #2]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	73fb      	strb	r3, [r7, #15]
 8005ec4:	e001      	b.n	8005eca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	807b      	strh	r3, [r7, #2]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ee8:	787b      	ldrb	r3, [r7, #1]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005eee:	887a      	ldrh	r2, [r7, #2]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ef4:	e003      	b.n	8005efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ef6:	887b      	ldrh	r3, [r7, #2]
 8005ef8:	041a      	lsls	r2, r3, #16
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	619a      	str	r2, [r3, #24]
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b085      	sub	sp, #20
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	460b      	mov	r3, r1
 8005f14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f1c:	887a      	ldrh	r2, [r7, #2]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4013      	ands	r3, r2
 8005f22:	041a      	lsls	r2, r3, #16
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	43d9      	mvns	r1, r3
 8005f28:	887b      	ldrh	r3, [r7, #2]
 8005f2a:	400b      	ands	r3, r1
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	619a      	str	r2, [r3, #24]
}
 8005f32:	bf00      	nop
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
	...

08005f40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005f4a:	4b08      	ldr	r3, [pc, #32]	; (8005f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f4c:	695a      	ldr	r2, [r3, #20]
 8005f4e:	88fb      	ldrh	r3, [r7, #6]
 8005f50:	4013      	ands	r3, r2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d006      	beq.n	8005f64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f56:	4a05      	ldr	r2, [pc, #20]	; (8005f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f58:	88fb      	ldrh	r3, [r7, #6]
 8005f5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f5c:	88fb      	ldrh	r3, [r7, #6]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fb fc20 	bl	80017a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	40013c00 	.word	0x40013c00

08005f70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e267      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d075      	beq.n	800607a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f8e:	4b88      	ldr	r3, [pc, #544]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 030c 	and.w	r3, r3, #12
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d00c      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f9a:	4b85      	ldr	r3, [pc, #532]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	d112      	bne.n	8005fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fa6:	4b82      	ldr	r3, [pc, #520]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fb2:	d10b      	bne.n	8005fcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb4:	4b7e      	ldr	r3, [pc, #504]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d05b      	beq.n	8006078 <HAL_RCC_OscConfig+0x108>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d157      	bne.n	8006078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e242      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd4:	d106      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x74>
 8005fd6:	4b76      	ldr	r3, [pc, #472]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a75      	ldr	r2, [pc, #468]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e01d      	b.n	8006020 <HAL_RCC_OscConfig+0xb0>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fec:	d10c      	bne.n	8006008 <HAL_RCC_OscConfig+0x98>
 8005fee:	4b70      	ldr	r3, [pc, #448]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a6f      	ldr	r2, [pc, #444]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	4b6d      	ldr	r3, [pc, #436]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a6c      	ldr	r2, [pc, #432]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	e00b      	b.n	8006020 <HAL_RCC_OscConfig+0xb0>
 8006008:	4b69      	ldr	r3, [pc, #420]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a68      	ldr	r2, [pc, #416]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800600e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	4b66      	ldr	r3, [pc, #408]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a65      	ldr	r2, [pc, #404]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800601a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800601e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d013      	beq.n	8006050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006028:	f7fe f9c4 	bl	80043b4 <HAL_GetTick>
 800602c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006030:	f7fe f9c0 	bl	80043b4 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b64      	cmp	r3, #100	; 0x64
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e207      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006042:	4b5b      	ldr	r3, [pc, #364]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f0      	beq.n	8006030 <HAL_RCC_OscConfig+0xc0>
 800604e:	e014      	b.n	800607a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006050:	f7fe f9b0 	bl	80043b4 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006058:	f7fe f9ac 	bl	80043b4 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b64      	cmp	r3, #100	; 0x64
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e1f3      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800606a:	4b51      	ldr	r3, [pc, #324]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1f0      	bne.n	8006058 <HAL_RCC_OscConfig+0xe8>
 8006076:	e000      	b.n	800607a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d063      	beq.n	800614e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006086:	4b4a      	ldr	r3, [pc, #296]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 030c 	and.w	r3, r3, #12
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006092:	4b47      	ldr	r3, [pc, #284]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800609a:	2b08      	cmp	r3, #8
 800609c:	d11c      	bne.n	80060d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800609e:	4b44      	ldr	r3, [pc, #272]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d116      	bne.n	80060d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060aa:	4b41      	ldr	r3, [pc, #260]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <HAL_RCC_OscConfig+0x152>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d001      	beq.n	80060c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e1c7      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c2:	4b3b      	ldr	r3, [pc, #236]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	4937      	ldr	r1, [pc, #220]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060d6:	e03a      	b.n	800614e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d020      	beq.n	8006122 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060e0:	4b34      	ldr	r3, [pc, #208]	; (80061b4 <HAL_RCC_OscConfig+0x244>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e6:	f7fe f965 	bl	80043b4 <HAL_GetTick>
 80060ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ec:	e008      	b.n	8006100 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ee:	f7fe f961 	bl	80043b4 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d901      	bls.n	8006100 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e1a8      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006100:	4b2b      	ldr	r3, [pc, #172]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0f0      	beq.n	80060ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800610c:	4b28      	ldr	r3, [pc, #160]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	4925      	ldr	r1, [pc, #148]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 800611c:	4313      	orrs	r3, r2
 800611e:	600b      	str	r3, [r1, #0]
 8006120:	e015      	b.n	800614e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006122:	4b24      	ldr	r3, [pc, #144]	; (80061b4 <HAL_RCC_OscConfig+0x244>)
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006128:	f7fe f944 	bl	80043b4 <HAL_GetTick>
 800612c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800612e:	e008      	b.n	8006142 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006130:	f7fe f940 	bl	80043b4 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e187      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006142:	4b1b      	ldr	r3, [pc, #108]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1f0      	bne.n	8006130 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d036      	beq.n	80061c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d016      	beq.n	8006190 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <HAL_RCC_OscConfig+0x248>)
 8006164:	2201      	movs	r2, #1
 8006166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006168:	f7fe f924 	bl	80043b4 <HAL_GetTick>
 800616c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006170:	f7fe f920 	bl	80043b4 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e167      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006182:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <HAL_RCC_OscConfig+0x240>)
 8006184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0f0      	beq.n	8006170 <HAL_RCC_OscConfig+0x200>
 800618e:	e01b      	b.n	80061c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006190:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <HAL_RCC_OscConfig+0x248>)
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006196:	f7fe f90d 	bl	80043b4 <HAL_GetTick>
 800619a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800619c:	e00e      	b.n	80061bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800619e:	f7fe f909 	bl	80043b4 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d907      	bls.n	80061bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e150      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
 80061b0:	40023800 	.word	0x40023800
 80061b4:	42470000 	.word	0x42470000
 80061b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061bc:	4b88      	ldr	r3, [pc, #544]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1ea      	bne.n	800619e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8097 	beq.w	8006304 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061da:	4b81      	ldr	r3, [pc, #516]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10f      	bne.n	8006206 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061e6:	2300      	movs	r3, #0
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	4b7d      	ldr	r3, [pc, #500]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	4a7c      	ldr	r2, [pc, #496]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f4:	6413      	str	r3, [r2, #64]	; 0x40
 80061f6:	4b7a      	ldr	r3, [pc, #488]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061fe:	60bb      	str	r3, [r7, #8]
 8006200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006202:	2301      	movs	r3, #1
 8006204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006206:	4b77      	ldr	r3, [pc, #476]	; (80063e4 <HAL_RCC_OscConfig+0x474>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620e:	2b00      	cmp	r3, #0
 8006210:	d118      	bne.n	8006244 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006212:	4b74      	ldr	r3, [pc, #464]	; (80063e4 <HAL_RCC_OscConfig+0x474>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a73      	ldr	r2, [pc, #460]	; (80063e4 <HAL_RCC_OscConfig+0x474>)
 8006218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800621e:	f7fe f8c9 	bl	80043b4 <HAL_GetTick>
 8006222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006224:	e008      	b.n	8006238 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006226:	f7fe f8c5 	bl	80043b4 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e10c      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006238:	4b6a      	ldr	r3, [pc, #424]	; (80063e4 <HAL_RCC_OscConfig+0x474>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0f0      	beq.n	8006226 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d106      	bne.n	800625a <HAL_RCC_OscConfig+0x2ea>
 800624c:	4b64      	ldr	r3, [pc, #400]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	4a63      	ldr	r2, [pc, #396]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	6713      	str	r3, [r2, #112]	; 0x70
 8006258:	e01c      	b.n	8006294 <HAL_RCC_OscConfig+0x324>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b05      	cmp	r3, #5
 8006260:	d10c      	bne.n	800627c <HAL_RCC_OscConfig+0x30c>
 8006262:	4b5f      	ldr	r3, [pc, #380]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006266:	4a5e      	ldr	r2, [pc, #376]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006268:	f043 0304 	orr.w	r3, r3, #4
 800626c:	6713      	str	r3, [r2, #112]	; 0x70
 800626e:	4b5c      	ldr	r3, [pc, #368]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	4a5b      	ldr	r2, [pc, #364]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006274:	f043 0301 	orr.w	r3, r3, #1
 8006278:	6713      	str	r3, [r2, #112]	; 0x70
 800627a:	e00b      	b.n	8006294 <HAL_RCC_OscConfig+0x324>
 800627c:	4b58      	ldr	r3, [pc, #352]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800627e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006280:	4a57      	ldr	r2, [pc, #348]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	6713      	str	r3, [r2, #112]	; 0x70
 8006288:	4b55      	ldr	r3, [pc, #340]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800628a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628c:	4a54      	ldr	r2, [pc, #336]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800628e:	f023 0304 	bic.w	r3, r3, #4
 8006292:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d015      	beq.n	80062c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629c:	f7fe f88a 	bl	80043b4 <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a2:	e00a      	b.n	80062ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a4:	f7fe f886 	bl	80043b4 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e0cb      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ba:	4b49      	ldr	r3, [pc, #292]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80062bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0ee      	beq.n	80062a4 <HAL_RCC_OscConfig+0x334>
 80062c6:	e014      	b.n	80062f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062c8:	f7fe f874 	bl	80043b4 <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ce:	e00a      	b.n	80062e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062d0:	f7fe f870 	bl	80043b4 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	f241 3288 	movw	r2, #5000	; 0x1388
 80062de:	4293      	cmp	r3, r2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e0b5      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062e6:	4b3e      	ldr	r3, [pc, #248]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1ee      	bne.n	80062d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d105      	bne.n	8006304 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062f8:	4b39      	ldr	r3, [pc, #228]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	4a38      	ldr	r2, [pc, #224]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80062fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006302:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 80a1 	beq.w	8006450 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800630e:	4b34      	ldr	r3, [pc, #208]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 030c 	and.w	r3, r3, #12
 8006316:	2b08      	cmp	r3, #8
 8006318:	d05c      	beq.n	80063d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d141      	bne.n	80063a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006322:	4b31      	ldr	r3, [pc, #196]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006328:	f7fe f844 	bl	80043b4 <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006330:	f7fe f840 	bl	80043b4 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e087      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006342:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f0      	bne.n	8006330 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69da      	ldr	r2, [r3, #28]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	019b      	lsls	r3, r3, #6
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006364:	085b      	lsrs	r3, r3, #1
 8006366:	3b01      	subs	r3, #1
 8006368:	041b      	lsls	r3, r3, #16
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	061b      	lsls	r3, r3, #24
 8006372:	491b      	ldr	r1, [pc, #108]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 8006374:	4313      	orrs	r3, r2
 8006376:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006378:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 800637a:	2201      	movs	r2, #1
 800637c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637e:	f7fe f819 	bl	80043b4 <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006386:	f7fe f815 	bl	80043b4 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e05c      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006398:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0f0      	beq.n	8006386 <HAL_RCC_OscConfig+0x416>
 80063a4:	e054      	b.n	8006450 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063a6:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <HAL_RCC_OscConfig+0x478>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ac:	f7fe f802 	bl	80043b4 <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b4:	f7fd fffe 	bl	80043b4 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e045      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063c6:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <HAL_RCC_OscConfig+0x470>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f0      	bne.n	80063b4 <HAL_RCC_OscConfig+0x444>
 80063d2:	e03d      	b.n	8006450 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d107      	bne.n	80063ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e038      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
 80063e0:	40023800 	.word	0x40023800
 80063e4:	40007000 	.word	0x40007000
 80063e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063ec:	4b1b      	ldr	r3, [pc, #108]	; (800645c <HAL_RCC_OscConfig+0x4ec>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d028      	beq.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006404:	429a      	cmp	r2, r3
 8006406:	d121      	bne.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006412:	429a      	cmp	r2, r3
 8006414:	d11a      	bne.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800641c:	4013      	ands	r3, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006422:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006424:	4293      	cmp	r3, r2
 8006426:	d111      	bne.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	085b      	lsrs	r3, r3, #1
 8006434:	3b01      	subs	r3, #1
 8006436:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006438:	429a      	cmp	r2, r3
 800643a:	d107      	bne.n	800644c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006448:	429a      	cmp	r2, r3
 800644a:	d001      	beq.n	8006450 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	40023800 	.word	0x40023800

08006460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e0cc      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006474:	4b68      	ldr	r3, [pc, #416]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d90c      	bls.n	800649c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006482:	4b65      	ldr	r3, [pc, #404]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800648a:	4b63      	ldr	r3, [pc, #396]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d001      	beq.n	800649c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e0b8      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d020      	beq.n	80064ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064b4:	4b59      	ldr	r3, [pc, #356]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	4a58      	ldr	r2, [pc, #352]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064cc:	4b53      	ldr	r3, [pc, #332]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	4a52      	ldr	r2, [pc, #328]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064d8:	4b50      	ldr	r3, [pc, #320]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	494d      	ldr	r1, [pc, #308]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d044      	beq.n	8006580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d107      	bne.n	800650e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064fe:	4b47      	ldr	r3, [pc, #284]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d119      	bne.n	800653e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e07f      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d003      	beq.n	800651e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800651a:	2b03      	cmp	r3, #3
 800651c:	d107      	bne.n	800652e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800651e:	4b3f      	ldr	r3, [pc, #252]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e06f      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800652e:	4b3b      	ldr	r3, [pc, #236]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e067      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800653e:	4b37      	ldr	r3, [pc, #220]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f023 0203 	bic.w	r2, r3, #3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	4934      	ldr	r1, [pc, #208]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 800654c:	4313      	orrs	r3, r2
 800654e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006550:	f7fd ff30 	bl	80043b4 <HAL_GetTick>
 8006554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006556:	e00a      	b.n	800656e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006558:	f7fd ff2c 	bl	80043b4 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	f241 3288 	movw	r2, #5000	; 0x1388
 8006566:	4293      	cmp	r3, r2
 8006568:	d901      	bls.n	800656e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e04f      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800656e:	4b2b      	ldr	r3, [pc, #172]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 020c 	and.w	r2, r3, #12
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	429a      	cmp	r2, r3
 800657e:	d1eb      	bne.n	8006558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006580:	4b25      	ldr	r3, [pc, #148]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d20c      	bcs.n	80065a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800658e:	4b22      	ldr	r3, [pc, #136]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006596:	4b20      	ldr	r3, [pc, #128]	; (8006618 <HAL_RCC_ClockConfig+0x1b8>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0307 	and.w	r3, r3, #7
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d001      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e032      	b.n	800660e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065b4:	4b19      	ldr	r3, [pc, #100]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	4916      	ldr	r1, [pc, #88]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d009      	beq.n	80065e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065d2:	4b12      	ldr	r3, [pc, #72]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	490e      	ldr	r1, [pc, #56]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065e6:	f000 f821 	bl	800662c <HAL_RCC_GetSysClockFreq>
 80065ea:	4602      	mov	r2, r0
 80065ec:	4b0b      	ldr	r3, [pc, #44]	; (800661c <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	490a      	ldr	r1, [pc, #40]	; (8006620 <HAL_RCC_ClockConfig+0x1c0>)
 80065f8:	5ccb      	ldrb	r3, [r1, r3]
 80065fa:	fa22 f303 	lsr.w	r3, r2, r3
 80065fe:	4a09      	ldr	r2, [pc, #36]	; (8006624 <HAL_RCC_ClockConfig+0x1c4>)
 8006600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006602:	4b09      	ldr	r3, [pc, #36]	; (8006628 <HAL_RCC_ClockConfig+0x1c8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f7fd f876 	bl	80036f8 <HAL_InitTick>

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	40023c00 	.word	0x40023c00
 800661c:	40023800 	.word	0x40023800
 8006620:	08011ef0 	.word	0x08011ef0
 8006624:	20000090 	.word	0x20000090
 8006628:	20000094 	.word	0x20000094

0800662c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800662c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006630:	b090      	sub	sp, #64	; 0x40
 8006632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	637b      	str	r3, [r7, #52]	; 0x34
 8006638:	2300      	movs	r3, #0
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800663c:	2300      	movs	r3, #0
 800663e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006644:	4b59      	ldr	r3, [pc, #356]	; (80067ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f003 030c 	and.w	r3, r3, #12
 800664c:	2b08      	cmp	r3, #8
 800664e:	d00d      	beq.n	800666c <HAL_RCC_GetSysClockFreq+0x40>
 8006650:	2b08      	cmp	r3, #8
 8006652:	f200 80a1 	bhi.w	8006798 <HAL_RCC_GetSysClockFreq+0x16c>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <HAL_RCC_GetSysClockFreq+0x34>
 800665a:	2b04      	cmp	r3, #4
 800665c:	d003      	beq.n	8006666 <HAL_RCC_GetSysClockFreq+0x3a>
 800665e:	e09b      	b.n	8006798 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006660:	4b53      	ldr	r3, [pc, #332]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006662:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006664:	e09b      	b.n	800679e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006666:	4b53      	ldr	r3, [pc, #332]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006668:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800666a:	e098      	b.n	800679e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800666c:	4b4f      	ldr	r3, [pc, #316]	; (80067ac <HAL_RCC_GetSysClockFreq+0x180>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006674:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006676:	4b4d      	ldr	r3, [pc, #308]	; (80067ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d028      	beq.n	80066d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006682:	4b4a      	ldr	r3, [pc, #296]	; (80067ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	099b      	lsrs	r3, r3, #6
 8006688:	2200      	movs	r2, #0
 800668a:	623b      	str	r3, [r7, #32]
 800668c:	627a      	str	r2, [r7, #36]	; 0x24
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006694:	2100      	movs	r1, #0
 8006696:	4b47      	ldr	r3, [pc, #284]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006698:	fb03 f201 	mul.w	r2, r3, r1
 800669c:	2300      	movs	r3, #0
 800669e:	fb00 f303 	mul.w	r3, r0, r3
 80066a2:	4413      	add	r3, r2
 80066a4:	4a43      	ldr	r2, [pc, #268]	; (80067b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80066a6:	fba0 1202 	umull	r1, r2, r0, r2
 80066aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066ac:	460a      	mov	r2, r1
 80066ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80066b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b2:	4413      	add	r3, r2
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b8:	2200      	movs	r2, #0
 80066ba:	61bb      	str	r3, [r7, #24]
 80066bc:	61fa      	str	r2, [r7, #28]
 80066be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80066c6:	f7fa fa6f 	bl	8000ba8 <__aeabi_uldivmod>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4613      	mov	r3, r2
 80066d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d2:	e053      	b.n	800677c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066d4:	4b35      	ldr	r3, [pc, #212]	; (80067ac <HAL_RCC_GetSysClockFreq+0x180>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	099b      	lsrs	r3, r3, #6
 80066da:	2200      	movs	r2, #0
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	617a      	str	r2, [r7, #20]
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80066e6:	f04f 0b00 	mov.w	fp, #0
 80066ea:	4652      	mov	r2, sl
 80066ec:	465b      	mov	r3, fp
 80066ee:	f04f 0000 	mov.w	r0, #0
 80066f2:	f04f 0100 	mov.w	r1, #0
 80066f6:	0159      	lsls	r1, r3, #5
 80066f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066fc:	0150      	lsls	r0, r2, #5
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	ebb2 080a 	subs.w	r8, r2, sl
 8006706:	eb63 090b 	sbc.w	r9, r3, fp
 800670a:	f04f 0200 	mov.w	r2, #0
 800670e:	f04f 0300 	mov.w	r3, #0
 8006712:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006716:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800671a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800671e:	ebb2 0408 	subs.w	r4, r2, r8
 8006722:	eb63 0509 	sbc.w	r5, r3, r9
 8006726:	f04f 0200 	mov.w	r2, #0
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	00eb      	lsls	r3, r5, #3
 8006730:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006734:	00e2      	lsls	r2, r4, #3
 8006736:	4614      	mov	r4, r2
 8006738:	461d      	mov	r5, r3
 800673a:	eb14 030a 	adds.w	r3, r4, sl
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	eb45 030b 	adc.w	r3, r5, fp
 8006744:	607b      	str	r3, [r7, #4]
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006752:	4629      	mov	r1, r5
 8006754:	028b      	lsls	r3, r1, #10
 8006756:	4621      	mov	r1, r4
 8006758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800675c:	4621      	mov	r1, r4
 800675e:	028a      	lsls	r2, r1, #10
 8006760:	4610      	mov	r0, r2
 8006762:	4619      	mov	r1, r3
 8006764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006766:	2200      	movs	r2, #0
 8006768:	60bb      	str	r3, [r7, #8]
 800676a:	60fa      	str	r2, [r7, #12]
 800676c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006770:	f7fa fa1a 	bl	8000ba8 <__aeabi_uldivmod>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4613      	mov	r3, r2
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800677c:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <HAL_RCC_GetSysClockFreq+0x180>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	0c1b      	lsrs	r3, r3, #16
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	3301      	adds	r3, #1
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800678c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	fbb2 f3f3 	udiv	r3, r2, r3
 8006794:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006796:	e002      	b.n	800679e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006798:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800679a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800679c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3740      	adds	r7, #64	; 0x40
 80067a4:	46bd      	mov	sp, r7
 80067a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067aa:	bf00      	nop
 80067ac:	40023800 	.word	0x40023800
 80067b0:	00f42400 	.word	0x00f42400
 80067b4:	00b71b00 	.word	0x00b71b00

080067b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067bc:	4b03      	ldr	r3, [pc, #12]	; (80067cc <HAL_RCC_GetHCLKFreq+0x14>)
 80067be:	681b      	ldr	r3, [r3, #0]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	20000090 	.word	0x20000090

080067d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067d4:	f7ff fff0 	bl	80067b8 <HAL_RCC_GetHCLKFreq>
 80067d8:	4602      	mov	r2, r0
 80067da:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	0a9b      	lsrs	r3, r3, #10
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	4903      	ldr	r1, [pc, #12]	; (80067f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067e6:	5ccb      	ldrb	r3, [r1, r3]
 80067e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	40023800 	.word	0x40023800
 80067f4:	08011f00 	.word	0x08011f00

080067f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067fc:	f7ff ffdc 	bl	80067b8 <HAL_RCC_GetHCLKFreq>
 8006800:	4602      	mov	r2, r0
 8006802:	4b05      	ldr	r3, [pc, #20]	; (8006818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	0b5b      	lsrs	r3, r3, #13
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	4903      	ldr	r1, [pc, #12]	; (800681c <HAL_RCC_GetPCLK2Freq+0x24>)
 800680e:	5ccb      	ldrb	r3, [r1, r3]
 8006810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006814:	4618      	mov	r0, r3
 8006816:	bd80      	pop	{r7, pc}
 8006818:	40023800 	.word	0x40023800
 800681c:	08011f00 	.word	0x08011f00

08006820 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	220f      	movs	r2, #15
 800682e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006830:	4b12      	ldr	r3, [pc, #72]	; (800687c <HAL_RCC_GetClockConfig+0x5c>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f003 0203 	and.w	r2, r3, #3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800683c:	4b0f      	ldr	r3, [pc, #60]	; (800687c <HAL_RCC_GetClockConfig+0x5c>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006848:	4b0c      	ldr	r3, [pc, #48]	; (800687c <HAL_RCC_GetClockConfig+0x5c>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006854:	4b09      	ldr	r3, [pc, #36]	; (800687c <HAL_RCC_GetClockConfig+0x5c>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	08db      	lsrs	r3, r3, #3
 800685a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006862:	4b07      	ldr	r3, [pc, #28]	; (8006880 <HAL_RCC_GetClockConfig+0x60>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0207 	and.w	r2, r3, #7
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	601a      	str	r2, [r3, #0]
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	40023800 	.word	0x40023800
 8006880:	40023c00 	.word	0x40023c00

08006884 <HAL_SMBUS_Init>:
  * @param  hsmbus pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	60bb      	str	r3, [r7, #8]

  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_SMBUS_Init+0x1a>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e0a1      	b.n	80069e2 <HAL_SMBUS_Init+0x15e>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <HAL_SMBUS_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fc fd0a 	bl	80032cc <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2224      	movs	r2, #36	; 0x24
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0201 	bic.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80068d0:	f7ff ff7e 	bl	80067d0 <HAL_RCC_GetPCLK1Freq>
 80068d4:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = SMBUS_FREQRANGE(pclk1);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	4a44      	ldr	r2, [pc, #272]	; (80069ec <HAL_SMBUS_Init+0x168>)
 80068da:	fba2 2303 	umull	r2, r3, r2, r3
 80068de:	0c9b      	lsrs	r3, r3, #18
 80068e0:	60fb      	str	r3, [r7, #12]

  /*---------------------------- SMBUSx CR2 Configuration ----------------------*/
  /* Configure SMBUSx: Frequency range */
  MODIFY_REG(hsmbus->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx TRISE Configuration --------------------*/
  /* Configure SMBUSx: Rise Time */
  MODIFY_REG(hsmbus->Instance->TRISE, I2C_TRISE_TRISE, SMBUS_RISE_TIME(freqrange));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	621a      	str	r2, [r3, #32]

  /*---------------------------- SMBUSx CCR Configuration ----------------------*/
  /* Configure SMBUSx: Speed */
  MODIFY_REG(hsmbus->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), SMBUS_SPEED_STANDARD(pclk1, hsmbus->Init.ClockSpeed));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8006916:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6852      	ldr	r2, [r2, #4]
 800691e:	0052      	lsls	r2, r2, #1
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	fbb1 f1f2 	udiv	r1, r1, r2
 8006926:	f640 72fc 	movw	r2, #4092	; 0xffc
 800692a:	400a      	ands	r2, r1
 800692c:	2a00      	cmp	r2, #0
 800692e:	d006      	beq.n	800693e <HAL_SMBUS_Init+0xba>
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6852      	ldr	r2, [r2, #4]
 8006934:	0052      	lsls	r2, r2, #1
 8006936:	68b9      	ldr	r1, [r7, #8]
 8006938:	fbb1 f2f2 	udiv	r2, r1, r2
 800693c:	e000      	b.n	8006940 <HAL_SMBUS_Init+0xbc>
 800693e:	2204      	movs	r2, #4
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	6809      	ldr	r1, [r1, #0]
 8006944:	4313      	orrs	r3, r2
 8006946:	61cb      	str	r3, [r1, #28]

  /*---------------------------- SMBUSx CR1 Configuration ----------------------*/
  /* Configure SMBUSx: Generalcall , PEC , Peripheral mode and  NoStretch mode */
  MODIFY_REG(hsmbus->Instance->CR1, (I2C_CR1_NOSTRETCH | I2C_CR1_ENGC | I2C_CR1_ENPEC | I2C_CR1_ENARP | I2C_CR1_SMBTYPE | I2C_CR1_SMBUS), (hsmbus->Init.NoStretchMode | hsmbus->Init.GeneralCallMode |  hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f023 01fa 	bic.w	r1, r3, #250	; 0xfa
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1a      	ldr	r2, [r3, #32]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	431a      	orrs	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx OAR1 Configuration ---------------------*/
  /* Configure SMBUSx: Own Address1 and addressing mode */
  MODIFY_REG(hsmbus->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hsmbus->Init.AddressingMode | hsmbus->Init.OwnAddress1));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800697a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6911      	ldr	r1, [r2, #16]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	68d2      	ldr	r2, [r2, #12]
 8006986:	4311      	orrs	r1, r2
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6812      	ldr	r2, [r2, #0]
 800698c:	430b      	orrs	r3, r1
 800698e:	6093      	str	r3, [r2, #8]

  /*---------------------------- SMBUSx OAR2 Configuration ---------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  MODIFY_REG(hsmbus->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695a      	ldr	r2, [r3, #20]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	60da      	str	r2, [r3, #12]
  /* Configure SMBUSx: Analog noise filter */
  SET_BIT(hsmbus->Instance->FLTR, hsmbus->Init.AnalogFilter);
#endif

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0201 	orr.w	r2, r2, #1
 80069ba:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hsmbus->PreviousState = SMBUS_STATE_NONE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	639a      	str	r2, [r3, #56]	; 0x38
  hsmbus->Mode = HAL_SMBUS_MODE_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hsmbus->XferPEC = 0x00;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	431bde83 	.word	0x431bde83

080069f0 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  SET_BIT(hsmbus->Instance->CR1, I2C_CR1_ALERT);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a06:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_SMBALERT);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8006a10:	615a      	str	r2, [r3, #20]

  /* Enable Alert Interrupt */
  __HAL_SMBUS_ENABLE_IT(hsmbus, SMBUS_IT_ERR);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e041      	b.n	8006ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d106      	bne.n	8006a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7fd fa10 	bl	8003e7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4610      	mov	r0, r2
 8006a70:	f001 f812 	bl	8007a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d001      	beq.n	8006ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e04e      	b.n	8006b86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68da      	ldr	r2, [r3, #12]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0201 	orr.w	r2, r2, #1
 8006afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a23      	ldr	r2, [pc, #140]	; (8006b94 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d022      	beq.n	8006b50 <HAL_TIM_Base_Start_IT+0x80>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b12:	d01d      	beq.n	8006b50 <HAL_TIM_Base_Start_IT+0x80>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a1f      	ldr	r2, [pc, #124]	; (8006b98 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d018      	beq.n	8006b50 <HAL_TIM_Base_Start_IT+0x80>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a1e      	ldr	r2, [pc, #120]	; (8006b9c <HAL_TIM_Base_Start_IT+0xcc>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d013      	beq.n	8006b50 <HAL_TIM_Base_Start_IT+0x80>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ba0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d00e      	beq.n	8006b50 <HAL_TIM_Base_Start_IT+0x80>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a1b      	ldr	r2, [pc, #108]	; (8006ba4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d009      	beq.n	8006b50 <HAL_TIM_Base_Start_IT+0x80>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a19      	ldr	r2, [pc, #100]	; (8006ba8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d004      	beq.n	8006b50 <HAL_TIM_Base_Start_IT+0x80>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a18      	ldr	r2, [pc, #96]	; (8006bac <HAL_TIM_Base_Start_IT+0xdc>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d111      	bne.n	8006b74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f003 0307 	and.w	r3, r3, #7
 8006b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b06      	cmp	r3, #6
 8006b60:	d010      	beq.n	8006b84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f042 0201 	orr.w	r2, r2, #1
 8006b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b72:	e007      	b.n	8006b84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0201 	orr.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	40010000 	.word	0x40010000
 8006b98:	40000400 	.word	0x40000400
 8006b9c:	40000800 	.word	0x40000800
 8006ba0:	40000c00 	.word	0x40000c00
 8006ba4:	40010400 	.word	0x40010400
 8006ba8:	40014000 	.word	0x40014000
 8006bac:	40001800 	.word	0x40001800

08006bb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e041      	b.n	8006c46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fd f908 	bl	8003dec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3304      	adds	r3, #4
 8006bec:	4619      	mov	r1, r3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	f000 ff52 	bl	8007a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d109      	bne.n	8006c74 <HAL_TIM_PWM_Start+0x24>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	bf14      	ite	ne
 8006c6c:	2301      	movne	r3, #1
 8006c6e:	2300      	moveq	r3, #0
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	e022      	b.n	8006cba <HAL_TIM_PWM_Start+0x6a>
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	d109      	bne.n	8006c8e <HAL_TIM_PWM_Start+0x3e>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	bf14      	ite	ne
 8006c86:	2301      	movne	r3, #1
 8006c88:	2300      	moveq	r3, #0
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	e015      	b.n	8006cba <HAL_TIM_PWM_Start+0x6a>
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	d109      	bne.n	8006ca8 <HAL_TIM_PWM_Start+0x58>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	bf14      	ite	ne
 8006ca0:	2301      	movne	r3, #1
 8006ca2:	2300      	moveq	r3, #0
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	e008      	b.n	8006cba <HAL_TIM_PWM_Start+0x6a>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	bf14      	ite	ne
 8006cb4:	2301      	movne	r3, #1
 8006cb6:	2300      	moveq	r3, #0
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e07c      	b.n	8006dbc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d104      	bne.n	8006cd2 <HAL_TIM_PWM_Start+0x82>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cd0:	e013      	b.n	8006cfa <HAL_TIM_PWM_Start+0xaa>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	d104      	bne.n	8006ce2 <HAL_TIM_PWM_Start+0x92>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ce0:	e00b      	b.n	8006cfa <HAL_TIM_PWM_Start+0xaa>
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d104      	bne.n	8006cf2 <HAL_TIM_PWM_Start+0xa2>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cf0:	e003      	b.n	8006cfa <HAL_TIM_PWM_Start+0xaa>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f001 fadc 	bl	80082c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a2d      	ldr	r2, [pc, #180]	; (8006dc4 <HAL_TIM_PWM_Start+0x174>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d004      	beq.n	8006d1c <HAL_TIM_PWM_Start+0xcc>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a2c      	ldr	r2, [pc, #176]	; (8006dc8 <HAL_TIM_PWM_Start+0x178>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d101      	bne.n	8006d20 <HAL_TIM_PWM_Start+0xd0>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e000      	b.n	8006d22 <HAL_TIM_PWM_Start+0xd2>
 8006d20:	2300      	movs	r3, #0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d007      	beq.n	8006d36 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a22      	ldr	r2, [pc, #136]	; (8006dc4 <HAL_TIM_PWM_Start+0x174>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d022      	beq.n	8006d86 <HAL_TIM_PWM_Start+0x136>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d48:	d01d      	beq.n	8006d86 <HAL_TIM_PWM_Start+0x136>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a1f      	ldr	r2, [pc, #124]	; (8006dcc <HAL_TIM_PWM_Start+0x17c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d018      	beq.n	8006d86 <HAL_TIM_PWM_Start+0x136>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a1d      	ldr	r2, [pc, #116]	; (8006dd0 <HAL_TIM_PWM_Start+0x180>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d013      	beq.n	8006d86 <HAL_TIM_PWM_Start+0x136>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a1c      	ldr	r2, [pc, #112]	; (8006dd4 <HAL_TIM_PWM_Start+0x184>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00e      	beq.n	8006d86 <HAL_TIM_PWM_Start+0x136>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a16      	ldr	r2, [pc, #88]	; (8006dc8 <HAL_TIM_PWM_Start+0x178>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d009      	beq.n	8006d86 <HAL_TIM_PWM_Start+0x136>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a18      	ldr	r2, [pc, #96]	; (8006dd8 <HAL_TIM_PWM_Start+0x188>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d004      	beq.n	8006d86 <HAL_TIM_PWM_Start+0x136>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a16      	ldr	r2, [pc, #88]	; (8006ddc <HAL_TIM_PWM_Start+0x18c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d111      	bne.n	8006daa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f003 0307 	and.w	r3, r3, #7
 8006d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b06      	cmp	r3, #6
 8006d96:	d010      	beq.n	8006dba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 0201 	orr.w	r2, r2, #1
 8006da6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da8:	e007      	b.n	8006dba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f042 0201 	orr.w	r2, r2, #1
 8006db8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	40010000 	.word	0x40010000
 8006dc8:	40010400 	.word	0x40010400
 8006dcc:	40000400 	.word	0x40000400
 8006dd0:	40000800 	.word	0x40000800
 8006dd4:	40000c00 	.word	0x40000c00
 8006dd8:	40014000 	.word	0x40014000
 8006ddc:	40001800 	.word	0x40001800

08006de0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d109      	bne.n	8006e0c <HAL_TIM_PWM_Start_DMA+0x2c>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	bf0c      	ite	eq
 8006e04:	2301      	moveq	r3, #1
 8006e06:	2300      	movne	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	e022      	b.n	8006e52 <HAL_TIM_PWM_Start_DMA+0x72>
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	d109      	bne.n	8006e26 <HAL_TIM_PWM_Start_DMA+0x46>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	bf0c      	ite	eq
 8006e1e:	2301      	moveq	r3, #1
 8006e20:	2300      	movne	r3, #0
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	e015      	b.n	8006e52 <HAL_TIM_PWM_Start_DMA+0x72>
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d109      	bne.n	8006e40 <HAL_TIM_PWM_Start_DMA+0x60>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	bf0c      	ite	eq
 8006e38:	2301      	moveq	r3, #1
 8006e3a:	2300      	movne	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	e008      	b.n	8006e52 <HAL_TIM_PWM_Start_DMA+0x72>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	bf0c      	ite	eq
 8006e4c:	2301      	moveq	r3, #1
 8006e4e:	2300      	movne	r3, #0
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006e56:	2302      	movs	r3, #2
 8006e58:	e171      	b.n	800713e <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d109      	bne.n	8006e74 <HAL_TIM_PWM_Start_DMA+0x94>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	bf0c      	ite	eq
 8006e6c:	2301      	moveq	r3, #1
 8006e6e:	2300      	movne	r3, #0
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	e022      	b.n	8006eba <HAL_TIM_PWM_Start_DMA+0xda>
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d109      	bne.n	8006e8e <HAL_TIM_PWM_Start_DMA+0xae>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	bf0c      	ite	eq
 8006e86:	2301      	moveq	r3, #1
 8006e88:	2300      	movne	r3, #0
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	e015      	b.n	8006eba <HAL_TIM_PWM_Start_DMA+0xda>
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b08      	cmp	r3, #8
 8006e92:	d109      	bne.n	8006ea8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	bf0c      	ite	eq
 8006ea0:	2301      	moveq	r3, #1
 8006ea2:	2300      	movne	r3, #0
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	e008      	b.n	8006eba <HAL_TIM_PWM_Start_DMA+0xda>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	bf0c      	ite	eq
 8006eb4:	2301      	moveq	r3, #1
 8006eb6:	2300      	movne	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d024      	beq.n	8006f08 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d104      	bne.n	8006ece <HAL_TIM_PWM_Start_DMA+0xee>
 8006ec4:	887b      	ldrh	r3, [r7, #2]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e137      	b.n	800713e <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d104      	bne.n	8006ede <HAL_TIM_PWM_Start_DMA+0xfe>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006edc:	e016      	b.n	8006f0c <HAL_TIM_PWM_Start_DMA+0x12c>
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	d104      	bne.n	8006eee <HAL_TIM_PWM_Start_DMA+0x10e>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eec:	e00e      	b.n	8006f0c <HAL_TIM_PWM_Start_DMA+0x12c>
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d104      	bne.n	8006efe <HAL_TIM_PWM_Start_DMA+0x11e>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006efc:	e006      	b.n	8006f0c <HAL_TIM_PWM_Start_DMA+0x12c>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2202      	movs	r2, #2
 8006f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f06:	e001      	b.n	8006f0c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e118      	b.n	800713e <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b0c      	cmp	r3, #12
 8006f10:	f200 80ae 	bhi.w	8007070 <HAL_TIM_PWM_Start_DMA+0x290>
 8006f14:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8006f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1a:	bf00      	nop
 8006f1c:	08006f51 	.word	0x08006f51
 8006f20:	08007071 	.word	0x08007071
 8006f24:	08007071 	.word	0x08007071
 8006f28:	08007071 	.word	0x08007071
 8006f2c:	08006f99 	.word	0x08006f99
 8006f30:	08007071 	.word	0x08007071
 8006f34:	08007071 	.word	0x08007071
 8006f38:	08007071 	.word	0x08007071
 8006f3c:	08006fe1 	.word	0x08006fe1
 8006f40:	08007071 	.word	0x08007071
 8006f44:	08007071 	.word	0x08007071
 8006f48:	08007071 	.word	0x08007071
 8006f4c:	08007029 	.word	0x08007029
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	4a7c      	ldr	r2, [pc, #496]	; (8007148 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006f56:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	4a7b      	ldr	r2, [pc, #492]	; (800714c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006f5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f64:	4a7a      	ldr	r2, [pc, #488]	; (8007150 <HAL_TIM_PWM_Start_DMA+0x370>)
 8006f66:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3334      	adds	r3, #52	; 0x34
 8006f74:	461a      	mov	r2, r3
 8006f76:	887b      	ldrh	r3, [r7, #2]
 8006f78:	f7fe faa6 	bl	80054c8 <HAL_DMA_Start_IT>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e0db      	b.n	800713e <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f94:	60da      	str	r2, [r3, #12]
      break;
 8006f96:	e06e      	b.n	8007076 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	4a6a      	ldr	r2, [pc, #424]	; (8007148 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006f9e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa4:	4a69      	ldr	r2, [pc, #420]	; (800714c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006fa6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fac:	4a68      	ldr	r2, [pc, #416]	; (8007150 <HAL_TIM_PWM_Start_DMA+0x370>)
 8006fae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3338      	adds	r3, #56	; 0x38
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	887b      	ldrh	r3, [r7, #2]
 8006fc0:	f7fe fa82 	bl	80054c8 <HAL_DMA_Start_IT>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e0b7      	b.n	800713e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68da      	ldr	r2, [r3, #12]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fdc:	60da      	str	r2, [r3, #12]
      break;
 8006fde:	e04a      	b.n	8007076 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	4a58      	ldr	r2, [pc, #352]	; (8007148 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006fe6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	4a57      	ldr	r2, [pc, #348]	; (800714c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006fee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff4:	4a56      	ldr	r2, [pc, #344]	; (8007150 <HAL_TIM_PWM_Start_DMA+0x370>)
 8006ff6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006ffc:	6879      	ldr	r1, [r7, #4]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	333c      	adds	r3, #60	; 0x3c
 8007004:	461a      	mov	r2, r3
 8007006:	887b      	ldrh	r3, [r7, #2]
 8007008:	f7fe fa5e 	bl	80054c8 <HAL_DMA_Start_IT>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e093      	b.n	800713e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68da      	ldr	r2, [r3, #12]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007024:	60da      	str	r2, [r3, #12]
      break;
 8007026:	e026      	b.n	8007076 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702c:	4a46      	ldr	r2, [pc, #280]	; (8007148 <HAL_TIM_PWM_Start_DMA+0x368>)
 800702e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007034:	4a45      	ldr	r2, [pc, #276]	; (800714c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007036:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703c:	4a44      	ldr	r2, [pc, #272]	; (8007150 <HAL_TIM_PWM_Start_DMA+0x370>)
 800703e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3340      	adds	r3, #64	; 0x40
 800704c:	461a      	mov	r2, r3
 800704e:	887b      	ldrh	r3, [r7, #2]
 8007050:	f7fe fa3a 	bl	80054c8 <HAL_DMA_Start_IT>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e06f      	b.n	800713e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800706c:	60da      	str	r2, [r3, #12]
      break;
 800706e:	e002      	b.n	8007076 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	75fb      	strb	r3, [r7, #23]
      break;
 8007074:	bf00      	nop
  }

  if (status == HAL_OK)
 8007076:	7dfb      	ldrb	r3, [r7, #23]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d15f      	bne.n	800713c <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2201      	movs	r2, #1
 8007082:	68b9      	ldr	r1, [r7, #8]
 8007084:	4618      	mov	r0, r3
 8007086:	f001 f91b 	bl	80082c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a31      	ldr	r2, [pc, #196]	; (8007154 <HAL_TIM_PWM_Start_DMA+0x374>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d004      	beq.n	800709e <HAL_TIM_PWM_Start_DMA+0x2be>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a2f      	ldr	r2, [pc, #188]	; (8007158 <HAL_TIM_PWM_Start_DMA+0x378>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d101      	bne.n	80070a2 <HAL_TIM_PWM_Start_DMA+0x2c2>
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80070a2:	2300      	movs	r3, #0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d007      	beq.n	80070b8 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070b6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a25      	ldr	r2, [pc, #148]	; (8007154 <HAL_TIM_PWM_Start_DMA+0x374>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d022      	beq.n	8007108 <HAL_TIM_PWM_Start_DMA+0x328>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ca:	d01d      	beq.n	8007108 <HAL_TIM_PWM_Start_DMA+0x328>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a22      	ldr	r2, [pc, #136]	; (800715c <HAL_TIM_PWM_Start_DMA+0x37c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d018      	beq.n	8007108 <HAL_TIM_PWM_Start_DMA+0x328>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a21      	ldr	r2, [pc, #132]	; (8007160 <HAL_TIM_PWM_Start_DMA+0x380>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d013      	beq.n	8007108 <HAL_TIM_PWM_Start_DMA+0x328>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a1f      	ldr	r2, [pc, #124]	; (8007164 <HAL_TIM_PWM_Start_DMA+0x384>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d00e      	beq.n	8007108 <HAL_TIM_PWM_Start_DMA+0x328>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a1a      	ldr	r2, [pc, #104]	; (8007158 <HAL_TIM_PWM_Start_DMA+0x378>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d009      	beq.n	8007108 <HAL_TIM_PWM_Start_DMA+0x328>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a1b      	ldr	r2, [pc, #108]	; (8007168 <HAL_TIM_PWM_Start_DMA+0x388>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d004      	beq.n	8007108 <HAL_TIM_PWM_Start_DMA+0x328>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a1a      	ldr	r2, [pc, #104]	; (800716c <HAL_TIM_PWM_Start_DMA+0x38c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d111      	bne.n	800712c <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	2b06      	cmp	r3, #6
 8007118:	d010      	beq.n	800713c <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f042 0201 	orr.w	r2, r2, #1
 8007128:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712a:	e007      	b.n	800713c <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0201 	orr.w	r2, r2, #1
 800713a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800713c:	7dfb      	ldrb	r3, [r7, #23]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	08007989 	.word	0x08007989
 800714c:	08007a31 	.word	0x08007a31
 8007150:	080078f7 	.word	0x080078f7
 8007154:	40010000 	.word	0x40010000
 8007158:	40010400 	.word	0x40010400
 800715c:	40000400 	.word	0x40000400
 8007160:	40000800 	.word	0x40000800
 8007164:	40000c00 	.word	0x40000c00
 8007168:	40014000 	.word	0x40014000
 800716c:	40001800 	.word	0x40001800

08007170 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e041      	b.n	8007206 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d106      	bne.n	800719c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f839 	bl	800720e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3304      	adds	r3, #4
 80071ac:	4619      	mov	r1, r3
 80071ae:	4610      	mov	r0, r2
 80071b0:	f000 fc72 	bl	8007a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007216:	bf00      	nop
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b02      	cmp	r3, #2
 8007236:	d122      	bne.n	800727e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b02      	cmp	r3, #2
 8007244:	d11b      	bne.n	800727e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f06f 0202 	mvn.w	r2, #2
 800724e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	f003 0303 	and.w	r3, r3, #3
 8007260:	2b00      	cmp	r3, #0
 8007262:	d003      	beq.n	800726c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fb14 	bl	8007892 <HAL_TIM_IC_CaptureCallback>
 800726a:	e005      	b.n	8007278 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fb06 	bl	800787e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fb17 	bl	80078a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b04      	cmp	r3, #4
 800728a:	d122      	bne.n	80072d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f003 0304 	and.w	r3, r3, #4
 8007296:	2b04      	cmp	r3, #4
 8007298:	d11b      	bne.n	80072d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f06f 0204 	mvn.w	r2, #4
 80072a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 faea 	bl	8007892 <HAL_TIM_IC_CaptureCallback>
 80072be:	e005      	b.n	80072cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fadc 	bl	800787e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 faed 	bl	80078a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d122      	bne.n	8007326 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	f003 0308 	and.w	r3, r3, #8
 80072ea:	2b08      	cmp	r3, #8
 80072ec:	d11b      	bne.n	8007326 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f06f 0208 	mvn.w	r2, #8
 80072f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2204      	movs	r2, #4
 80072fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	f003 0303 	and.w	r3, r3, #3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d003      	beq.n	8007314 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fac0 	bl	8007892 <HAL_TIM_IC_CaptureCallback>
 8007312:	e005      	b.n	8007320 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fab2 	bl	800787e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fac3 	bl	80078a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	f003 0310 	and.w	r3, r3, #16
 8007330:	2b10      	cmp	r3, #16
 8007332:	d122      	bne.n	800737a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	f003 0310 	and.w	r3, r3, #16
 800733e:	2b10      	cmp	r3, #16
 8007340:	d11b      	bne.n	800737a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f06f 0210 	mvn.w	r2, #16
 800734a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2208      	movs	r2, #8
 8007350:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800735c:	2b00      	cmp	r3, #0
 800735e:	d003      	beq.n	8007368 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fa96 	bl	8007892 <HAL_TIM_IC_CaptureCallback>
 8007366:	e005      	b.n	8007374 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fa88 	bl	800787e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fa99 	bl	80078a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b01      	cmp	r3, #1
 8007386:	d10e      	bne.n	80073a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b01      	cmp	r3, #1
 8007394:	d107      	bne.n	80073a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f06f 0201 	mvn.w	r2, #1
 800739e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7fc f8af 	bl	8003504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b0:	2b80      	cmp	r3, #128	; 0x80
 80073b2:	d10e      	bne.n	80073d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073be:	2b80      	cmp	r3, #128	; 0x80
 80073c0:	d107      	bne.n	80073d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 f875 	bl	80084bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073dc:	2b40      	cmp	r3, #64	; 0x40
 80073de:	d10e      	bne.n	80073fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ea:	2b40      	cmp	r3, #64	; 0x40
 80073ec:	d107      	bne.n	80073fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fa68 	bl	80078ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	f003 0320 	and.w	r3, r3, #32
 8007408:	2b20      	cmp	r3, #32
 800740a:	d10e      	bne.n	800742a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f003 0320 	and.w	r3, r3, #32
 8007416:	2b20      	cmp	r3, #32
 8007418:	d107      	bne.n	800742a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f06f 0220 	mvn.w	r2, #32
 8007422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 f83f 	bl	80084a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b086      	sub	sp, #24
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_TIM_IC_ConfigChannel+0x1e>
 800744c:	2302      	movs	r3, #2
 800744e:	e088      	b.n	8007562 <HAL_TIM_IC_ConfigChannel+0x130>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d11b      	bne.n	8007496 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	6819      	ldr	r1, [r3, #0]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f000 fd63 	bl	8007f38 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	699a      	ldr	r2, [r3, #24]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 020c 	bic.w	r2, r2, #12
 8007480:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6999      	ldr	r1, [r3, #24]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	619a      	str	r2, [r3, #24]
 8007494:	e060      	b.n	8007558 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b04      	cmp	r3, #4
 800749a:	d11c      	bne.n	80074d6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6818      	ldr	r0, [r3, #0]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	6819      	ldr	r1, [r3, #0]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f000 fde7 	bl	800807e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699a      	ldr	r2, [r3, #24]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80074be:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6999      	ldr	r1, [r3, #24]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	021a      	lsls	r2, r3, #8
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	619a      	str	r2, [r3, #24]
 80074d4:	e040      	b.n	8007558 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b08      	cmp	r3, #8
 80074da:	d11b      	bne.n	8007514 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6818      	ldr	r0, [r3, #0]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	6819      	ldr	r1, [r3, #0]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f000 fe34 	bl	8008158 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	69da      	ldr	r2, [r3, #28]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 020c 	bic.w	r2, r2, #12
 80074fe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	69d9      	ldr	r1, [r3, #28]
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	689a      	ldr	r2, [r3, #8]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	61da      	str	r2, [r3, #28]
 8007512:	e021      	b.n	8007558 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b0c      	cmp	r3, #12
 8007518:	d11c      	bne.n	8007554 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	6819      	ldr	r1, [r3, #0]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f000 fe51 	bl	80081d0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69da      	ldr	r2, [r3, #28]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800753c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69d9      	ldr	r1, [r3, #28]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	021a      	lsls	r2, r3, #8
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	61da      	str	r2, [r3, #28]
 8007552:	e001      	b.n	8007558 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007560:	7dfb      	ldrb	r3, [r7, #23]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007582:	2b01      	cmp	r3, #1
 8007584:	d101      	bne.n	800758a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007586:	2302      	movs	r3, #2
 8007588:	e0ae      	b.n	80076e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b0c      	cmp	r3, #12
 8007596:	f200 809f 	bhi.w	80076d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800759a:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075d5 	.word	0x080075d5
 80075a4:	080076d9 	.word	0x080076d9
 80075a8:	080076d9 	.word	0x080076d9
 80075ac:	080076d9 	.word	0x080076d9
 80075b0:	08007615 	.word	0x08007615
 80075b4:	080076d9 	.word	0x080076d9
 80075b8:	080076d9 	.word	0x080076d9
 80075bc:	080076d9 	.word	0x080076d9
 80075c0:	08007657 	.word	0x08007657
 80075c4:	080076d9 	.word	0x080076d9
 80075c8:	080076d9 	.word	0x080076d9
 80075cc:	080076d9 	.word	0x080076d9
 80075d0:	08007697 	.word	0x08007697
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fafc 	bl	8007bd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f042 0208 	orr.w	r2, r2, #8
 80075ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	699a      	ldr	r2, [r3, #24]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0204 	bic.w	r2, r2, #4
 80075fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6999      	ldr	r1, [r3, #24]
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	691a      	ldr	r2, [r3, #16]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	619a      	str	r2, [r3, #24]
      break;
 8007612:	e064      	b.n	80076de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68b9      	ldr	r1, [r7, #8]
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fb4c 	bl	8007cb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699a      	ldr	r2, [r3, #24]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800762e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	699a      	ldr	r2, [r3, #24]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800763e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6999      	ldr	r1, [r3, #24]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	021a      	lsls	r2, r3, #8
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	619a      	str	r2, [r3, #24]
      break;
 8007654:	e043      	b.n	80076de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68b9      	ldr	r1, [r7, #8]
 800765c:	4618      	mov	r0, r3
 800765e:	f000 fba1 	bl	8007da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69da      	ldr	r2, [r3, #28]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f042 0208 	orr.w	r2, r2, #8
 8007670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69da      	ldr	r2, [r3, #28]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0204 	bic.w	r2, r2, #4
 8007680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69d9      	ldr	r1, [r3, #28]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	691a      	ldr	r2, [r3, #16]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	61da      	str	r2, [r3, #28]
      break;
 8007694:	e023      	b.n	80076de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68b9      	ldr	r1, [r7, #8]
 800769c:	4618      	mov	r0, r3
 800769e:	f000 fbf5 	bl	8007e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69da      	ldr	r2, [r3, #28]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	69da      	ldr	r2, [r3, #28]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	69d9      	ldr	r1, [r3, #28]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	021a      	lsls	r2, r3, #8
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	61da      	str	r2, [r3, #28]
      break;
 80076d6:	e002      	b.n	80076de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	75fb      	strb	r3, [r7, #23]
      break;
 80076dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <HAL_TIM_ConfigClockSource+0x1c>
 8007708:	2302      	movs	r3, #2
 800770a:	e0b4      	b.n	8007876 <HAL_TIM_ConfigClockSource+0x186>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800772a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007732:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007744:	d03e      	beq.n	80077c4 <HAL_TIM_ConfigClockSource+0xd4>
 8007746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800774a:	f200 8087 	bhi.w	800785c <HAL_TIM_ConfigClockSource+0x16c>
 800774e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007752:	f000 8086 	beq.w	8007862 <HAL_TIM_ConfigClockSource+0x172>
 8007756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800775a:	d87f      	bhi.n	800785c <HAL_TIM_ConfigClockSource+0x16c>
 800775c:	2b70      	cmp	r3, #112	; 0x70
 800775e:	d01a      	beq.n	8007796 <HAL_TIM_ConfigClockSource+0xa6>
 8007760:	2b70      	cmp	r3, #112	; 0x70
 8007762:	d87b      	bhi.n	800785c <HAL_TIM_ConfigClockSource+0x16c>
 8007764:	2b60      	cmp	r3, #96	; 0x60
 8007766:	d050      	beq.n	800780a <HAL_TIM_ConfigClockSource+0x11a>
 8007768:	2b60      	cmp	r3, #96	; 0x60
 800776a:	d877      	bhi.n	800785c <HAL_TIM_ConfigClockSource+0x16c>
 800776c:	2b50      	cmp	r3, #80	; 0x50
 800776e:	d03c      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0xfa>
 8007770:	2b50      	cmp	r3, #80	; 0x50
 8007772:	d873      	bhi.n	800785c <HAL_TIM_ConfigClockSource+0x16c>
 8007774:	2b40      	cmp	r3, #64	; 0x40
 8007776:	d058      	beq.n	800782a <HAL_TIM_ConfigClockSource+0x13a>
 8007778:	2b40      	cmp	r3, #64	; 0x40
 800777a:	d86f      	bhi.n	800785c <HAL_TIM_ConfigClockSource+0x16c>
 800777c:	2b30      	cmp	r3, #48	; 0x30
 800777e:	d064      	beq.n	800784a <HAL_TIM_ConfigClockSource+0x15a>
 8007780:	2b30      	cmp	r3, #48	; 0x30
 8007782:	d86b      	bhi.n	800785c <HAL_TIM_ConfigClockSource+0x16c>
 8007784:	2b20      	cmp	r3, #32
 8007786:	d060      	beq.n	800784a <HAL_TIM_ConfigClockSource+0x15a>
 8007788:	2b20      	cmp	r3, #32
 800778a:	d867      	bhi.n	800785c <HAL_TIM_ConfigClockSource+0x16c>
 800778c:	2b00      	cmp	r3, #0
 800778e:	d05c      	beq.n	800784a <HAL_TIM_ConfigClockSource+0x15a>
 8007790:	2b10      	cmp	r3, #16
 8007792:	d05a      	beq.n	800784a <HAL_TIM_ConfigClockSource+0x15a>
 8007794:	e062      	b.n	800785c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	6899      	ldr	r1, [r3, #8]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f000 fd6b 	bl	8008280 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	609a      	str	r2, [r3, #8]
      break;
 80077c2:	e04f      	b.n	8007864 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6818      	ldr	r0, [r3, #0]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	6899      	ldr	r1, [r3, #8]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f000 fd54 	bl	8008280 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689a      	ldr	r2, [r3, #8]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077e6:	609a      	str	r2, [r3, #8]
      break;
 80077e8:	e03c      	b.n	8007864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6818      	ldr	r0, [r3, #0]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	6859      	ldr	r1, [r3, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	461a      	mov	r2, r3
 80077f8:	f000 fc12 	bl	8008020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2150      	movs	r1, #80	; 0x50
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fd21 	bl	800824a <TIM_ITRx_SetConfig>
      break;
 8007808:	e02c      	b.n	8007864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6818      	ldr	r0, [r3, #0]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	6859      	ldr	r1, [r3, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	461a      	mov	r2, r3
 8007818:	f000 fc6e 	bl	80080f8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2160      	movs	r1, #96	; 0x60
 8007822:	4618      	mov	r0, r3
 8007824:	f000 fd11 	bl	800824a <TIM_ITRx_SetConfig>
      break;
 8007828:	e01c      	b.n	8007864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	6859      	ldr	r1, [r3, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	461a      	mov	r2, r3
 8007838:	f000 fbf2 	bl	8008020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2140      	movs	r1, #64	; 0x40
 8007842:	4618      	mov	r0, r3
 8007844:	f000 fd01 	bl	800824a <TIM_ITRx_SetConfig>
      break;
 8007848:	e00c      	b.n	8007864 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4619      	mov	r1, r3
 8007854:	4610      	mov	r0, r2
 8007856:	f000 fcf8 	bl	800824a <TIM_ITRx_SetConfig>
      break;
 800785a:	e003      	b.n	8007864 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	73fb      	strb	r3, [r7, #15]
      break;
 8007860:	e000      	b.n	8007864 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007862:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b084      	sub	sp, #16
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007902:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	429a      	cmp	r2, r3
 800790c:	d107      	bne.n	800791e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2201      	movs	r2, #1
 8007912:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800791c:	e02a      	b.n	8007974 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	429a      	cmp	r2, r3
 8007926:	d107      	bne.n	8007938 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2202      	movs	r2, #2
 800792c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007936:	e01d      	b.n	8007974 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	429a      	cmp	r2, r3
 8007940:	d107      	bne.n	8007952 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2204      	movs	r2, #4
 8007946:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007950:	e010      	b.n	8007974 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	429a      	cmp	r2, r3
 800795a:	d107      	bne.n	800796c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2208      	movs	r2, #8
 8007960:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800796a:	e003      	b.n	8007974 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f7ff ffb4 	bl	80078e2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	771a      	strb	r2, [r3, #28]
}
 8007980:	bf00      	nop
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007994:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	429a      	cmp	r2, r3
 800799e:	d10b      	bne.n	80079b8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2201      	movs	r2, #1
 80079a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d136      	bne.n	8007a1c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079b6:	e031      	b.n	8007a1c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d10b      	bne.n	80079da <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2202      	movs	r2, #2
 80079c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	69db      	ldr	r3, [r3, #28]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d125      	bne.n	8007a1c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079d8:	e020      	b.n	8007a1c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d10b      	bne.n	80079fc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2204      	movs	r2, #4
 80079e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d114      	bne.n	8007a1c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079fa:	e00f      	b.n	8007a1c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d10a      	bne.n	8007a1c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2208      	movs	r2, #8
 8007a0a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d103      	bne.n	8007a1c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f7ff ff42 	bl	80078a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	771a      	strb	r2, [r3, #28]
}
 8007a28:	bf00      	nop
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d103      	bne.n	8007a50 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	771a      	strb	r2, [r3, #28]
 8007a4e:	e019      	b.n	8007a84 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d103      	bne.n	8007a62 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	771a      	strb	r2, [r3, #28]
 8007a60:	e010      	b.n	8007a84 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d103      	bne.n	8007a74 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2204      	movs	r2, #4
 8007a70:	771a      	strb	r2, [r3, #28]
 8007a72:	e007      	b.n	8007a84 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d102      	bne.n	8007a84 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2208      	movs	r2, #8
 8007a82:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f7ff ff18 	bl	80078ba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	771a      	strb	r2, [r3, #28]
}
 8007a90:	bf00      	nop
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a40      	ldr	r2, [pc, #256]	; (8007bac <TIM_Base_SetConfig+0x114>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d013      	beq.n	8007ad8 <TIM_Base_SetConfig+0x40>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab6:	d00f      	beq.n	8007ad8 <TIM_Base_SetConfig+0x40>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a3d      	ldr	r2, [pc, #244]	; (8007bb0 <TIM_Base_SetConfig+0x118>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d00b      	beq.n	8007ad8 <TIM_Base_SetConfig+0x40>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a3c      	ldr	r2, [pc, #240]	; (8007bb4 <TIM_Base_SetConfig+0x11c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d007      	beq.n	8007ad8 <TIM_Base_SetConfig+0x40>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a3b      	ldr	r2, [pc, #236]	; (8007bb8 <TIM_Base_SetConfig+0x120>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d003      	beq.n	8007ad8 <TIM_Base_SetConfig+0x40>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a3a      	ldr	r2, [pc, #232]	; (8007bbc <TIM_Base_SetConfig+0x124>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d108      	bne.n	8007aea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a2f      	ldr	r2, [pc, #188]	; (8007bac <TIM_Base_SetConfig+0x114>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d02b      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af8:	d027      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a2c      	ldr	r2, [pc, #176]	; (8007bb0 <TIM_Base_SetConfig+0x118>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d023      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a2b      	ldr	r2, [pc, #172]	; (8007bb4 <TIM_Base_SetConfig+0x11c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d01f      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a2a      	ldr	r2, [pc, #168]	; (8007bb8 <TIM_Base_SetConfig+0x120>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d01b      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a29      	ldr	r2, [pc, #164]	; (8007bbc <TIM_Base_SetConfig+0x124>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d017      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a28      	ldr	r2, [pc, #160]	; (8007bc0 <TIM_Base_SetConfig+0x128>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d013      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a27      	ldr	r2, [pc, #156]	; (8007bc4 <TIM_Base_SetConfig+0x12c>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d00f      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a26      	ldr	r2, [pc, #152]	; (8007bc8 <TIM_Base_SetConfig+0x130>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d00b      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a25      	ldr	r2, [pc, #148]	; (8007bcc <TIM_Base_SetConfig+0x134>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d007      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a24      	ldr	r2, [pc, #144]	; (8007bd0 <TIM_Base_SetConfig+0x138>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d003      	beq.n	8007b4a <TIM_Base_SetConfig+0xb2>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a23      	ldr	r2, [pc, #140]	; (8007bd4 <TIM_Base_SetConfig+0x13c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d108      	bne.n	8007b5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a0a      	ldr	r2, [pc, #40]	; (8007bac <TIM_Base_SetConfig+0x114>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d003      	beq.n	8007b90 <TIM_Base_SetConfig+0xf8>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a0c      	ldr	r2, [pc, #48]	; (8007bbc <TIM_Base_SetConfig+0x124>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d103      	bne.n	8007b98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	691a      	ldr	r2, [r3, #16]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	615a      	str	r2, [r3, #20]
}
 8007b9e:	bf00      	nop
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	40010000 	.word	0x40010000
 8007bb0:	40000400 	.word	0x40000400
 8007bb4:	40000800 	.word	0x40000800
 8007bb8:	40000c00 	.word	0x40000c00
 8007bbc:	40010400 	.word	0x40010400
 8007bc0:	40014000 	.word	0x40014000
 8007bc4:	40014400 	.word	0x40014400
 8007bc8:	40014800 	.word	0x40014800
 8007bcc:	40001800 	.word	0x40001800
 8007bd0:	40001c00 	.word	0x40001c00
 8007bd4:	40002000 	.word	0x40002000

08007bd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	f023 0201 	bic.w	r2, r3, #1
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 0303 	bic.w	r3, r3, #3
 8007c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f023 0302 	bic.w	r3, r3, #2
 8007c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a20      	ldr	r2, [pc, #128]	; (8007cb0 <TIM_OC1_SetConfig+0xd8>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d003      	beq.n	8007c3c <TIM_OC1_SetConfig+0x64>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a1f      	ldr	r2, [pc, #124]	; (8007cb4 <TIM_OC1_SetConfig+0xdc>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d10c      	bne.n	8007c56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f023 0308 	bic.w	r3, r3, #8
 8007c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f023 0304 	bic.w	r3, r3, #4
 8007c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a15      	ldr	r2, [pc, #84]	; (8007cb0 <TIM_OC1_SetConfig+0xd8>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d003      	beq.n	8007c66 <TIM_OC1_SetConfig+0x8e>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a14      	ldr	r2, [pc, #80]	; (8007cb4 <TIM_OC1_SetConfig+0xdc>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d111      	bne.n	8007c8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	697a      	ldr	r2, [r7, #20]
 8007ca2:	621a      	str	r2, [r3, #32]
}
 8007ca4:	bf00      	nop
 8007ca6:	371c      	adds	r7, #28
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	40010000 	.word	0x40010000
 8007cb4:	40010400 	.word	0x40010400

08007cb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	f023 0210 	bic.w	r2, r3, #16
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	f023 0320 	bic.w	r3, r3, #32
 8007d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	011b      	lsls	r3, r3, #4
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a22      	ldr	r2, [pc, #136]	; (8007d9c <TIM_OC2_SetConfig+0xe4>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d003      	beq.n	8007d20 <TIM_OC2_SetConfig+0x68>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a21      	ldr	r2, [pc, #132]	; (8007da0 <TIM_OC2_SetConfig+0xe8>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d10d      	bne.n	8007d3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	011b      	lsls	r3, r3, #4
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a17      	ldr	r2, [pc, #92]	; (8007d9c <TIM_OC2_SetConfig+0xe4>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d003      	beq.n	8007d4c <TIM_OC2_SetConfig+0x94>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a16      	ldr	r2, [pc, #88]	; (8007da0 <TIM_OC2_SetConfig+0xe8>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d113      	bne.n	8007d74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	621a      	str	r2, [r3, #32]
}
 8007d8e:	bf00      	nop
 8007d90:	371c      	adds	r7, #28
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	40010000 	.word	0x40010000
 8007da0:	40010400 	.word	0x40010400

08007da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0303 	bic.w	r3, r3, #3
 8007dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a21      	ldr	r2, [pc, #132]	; (8007e84 <TIM_OC3_SetConfig+0xe0>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d003      	beq.n	8007e0a <TIM_OC3_SetConfig+0x66>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a20      	ldr	r2, [pc, #128]	; (8007e88 <TIM_OC3_SetConfig+0xe4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d10d      	bne.n	8007e26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	021b      	lsls	r3, r3, #8
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a16      	ldr	r2, [pc, #88]	; (8007e84 <TIM_OC3_SetConfig+0xe0>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d003      	beq.n	8007e36 <TIM_OC3_SetConfig+0x92>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a15      	ldr	r2, [pc, #84]	; (8007e88 <TIM_OC3_SetConfig+0xe4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d113      	bne.n	8007e5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	011b      	lsls	r3, r3, #4
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	621a      	str	r2, [r3, #32]
}
 8007e78:	bf00      	nop
 8007e7a:	371c      	adds	r7, #28
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr
 8007e84:	40010000 	.word	0x40010000
 8007e88:	40010400 	.word	0x40010400

08007e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	031b      	lsls	r3, r3, #12
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a12      	ldr	r2, [pc, #72]	; (8007f30 <TIM_OC4_SetConfig+0xa4>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d003      	beq.n	8007ef4 <TIM_OC4_SetConfig+0x68>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a11      	ldr	r2, [pc, #68]	; (8007f34 <TIM_OC4_SetConfig+0xa8>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d109      	bne.n	8007f08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007efa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	019b      	lsls	r3, r3, #6
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	685a      	ldr	r2, [r3, #4]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	621a      	str	r2, [r3, #32]
}
 8007f22:	bf00      	nop
 8007f24:	371c      	adds	r7, #28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	40010000 	.word	0x40010000
 8007f34:	40010400 	.word	0x40010400

08007f38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	f023 0201 	bic.w	r2, r3, #1
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4a28      	ldr	r2, [pc, #160]	; (8008004 <TIM_TI1_SetConfig+0xcc>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d01b      	beq.n	8007f9e <TIM_TI1_SetConfig+0x66>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6c:	d017      	beq.n	8007f9e <TIM_TI1_SetConfig+0x66>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4a25      	ldr	r2, [pc, #148]	; (8008008 <TIM_TI1_SetConfig+0xd0>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d013      	beq.n	8007f9e <TIM_TI1_SetConfig+0x66>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	4a24      	ldr	r2, [pc, #144]	; (800800c <TIM_TI1_SetConfig+0xd4>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d00f      	beq.n	8007f9e <TIM_TI1_SetConfig+0x66>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	4a23      	ldr	r2, [pc, #140]	; (8008010 <TIM_TI1_SetConfig+0xd8>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d00b      	beq.n	8007f9e <TIM_TI1_SetConfig+0x66>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	4a22      	ldr	r2, [pc, #136]	; (8008014 <TIM_TI1_SetConfig+0xdc>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d007      	beq.n	8007f9e <TIM_TI1_SetConfig+0x66>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	4a21      	ldr	r2, [pc, #132]	; (8008018 <TIM_TI1_SetConfig+0xe0>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d003      	beq.n	8007f9e <TIM_TI1_SetConfig+0x66>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4a20      	ldr	r2, [pc, #128]	; (800801c <TIM_TI1_SetConfig+0xe4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d101      	bne.n	8007fa2 <TIM_TI1_SetConfig+0x6a>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e000      	b.n	8007fa4 <TIM_TI1_SetConfig+0x6c>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d008      	beq.n	8007fba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f023 0303 	bic.w	r3, r3, #3
 8007fae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	617b      	str	r3, [r7, #20]
 8007fb8:	e003      	b.n	8007fc2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f043 0301 	orr.w	r3, r3, #1
 8007fc0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f023 030a 	bic.w	r3, r3, #10
 8007fdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f003 030a 	and.w	r3, r3, #10
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	621a      	str	r2, [r3, #32]
}
 8007ff6:	bf00      	nop
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	40010000 	.word	0x40010000
 8008008:	40000400 	.word	0x40000400
 800800c:	40000800 	.word	0x40000800
 8008010:	40000c00 	.word	0x40000c00
 8008014:	40010400 	.word	0x40010400
 8008018:	40014000 	.word	0x40014000
 800801c:	40001800 	.word	0x40001800

08008020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	f023 0201 	bic.w	r2, r3, #1
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800804a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	4313      	orrs	r3, r2
 8008054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f023 030a 	bic.w	r3, r3, #10
 800805c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	4313      	orrs	r3, r2
 8008064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	621a      	str	r2, [r3, #32]
}
 8008072:	bf00      	nop
 8008074:	371c      	adds	r7, #28
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800807e:	b480      	push	{r7}
 8008080:	b087      	sub	sp, #28
 8008082:	af00      	add	r7, sp, #0
 8008084:	60f8      	str	r0, [r7, #12]
 8008086:	60b9      	str	r1, [r7, #8]
 8008088:	607a      	str	r2, [r7, #4]
 800808a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	f023 0210 	bic.w	r2, r3, #16
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	021b      	lsls	r3, r3, #8
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	031b      	lsls	r3, r3, #12
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	011b      	lsls	r3, r3, #4
 80080d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	4313      	orrs	r3, r2
 80080de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	621a      	str	r2, [r3, #32]
}
 80080ec:	bf00      	nop
 80080ee:	371c      	adds	r7, #28
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6a1b      	ldr	r3, [r3, #32]
 8008108:	f023 0210 	bic.w	r2, r3, #16
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008122:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	031b      	lsls	r3, r3, #12
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	4313      	orrs	r3, r2
 800812c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008134:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	011b      	lsls	r3, r3, #4
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	4313      	orrs	r3, r2
 800813e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	621a      	str	r2, [r3, #32]
}
 800814c:	bf00      	nop
 800814e:	371c      	adds	r7, #28
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
 8008164:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6a1b      	ldr	r3, [r3, #32]
 800817c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f023 0303 	bic.w	r3, r3, #3
 8008184:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4313      	orrs	r3, r2
 800818c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008194:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	011b      	lsls	r3, r3, #4
 800819a:	b2db      	uxtb	r3, r3
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	4313      	orrs	r3, r2
 80081a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80081a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	021b      	lsls	r3, r3, #8
 80081ae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	621a      	str	r2, [r3, #32]
}
 80081c4:	bf00      	nop
 80081c6:	371c      	adds	r7, #28
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	021b      	lsls	r3, r3, #8
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	4313      	orrs	r3, r2
 8008206:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800820e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	031b      	lsls	r3, r3, #12
 8008214:	b29b      	uxth	r3, r3
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	4313      	orrs	r3, r2
 800821a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008222:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	031b      	lsls	r3, r3, #12
 8008228:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	4313      	orrs	r3, r2
 8008230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	621a      	str	r2, [r3, #32]
}
 800823e:	bf00      	nop
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800824a:	b480      	push	{r7}
 800824c:	b085      	sub	sp, #20
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4313      	orrs	r3, r2
 8008268:	f043 0307 	orr.w	r3, r3, #7
 800826c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	609a      	str	r2, [r3, #8]
}
 8008274:	bf00      	nop
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008280:	b480      	push	{r7}
 8008282:	b087      	sub	sp, #28
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800829a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	021a      	lsls	r2, r3, #8
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	431a      	orrs	r2, r3
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	609a      	str	r2, [r3, #8]
}
 80082b4:	bf00      	nop
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b087      	sub	sp, #28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f003 031f 	and.w	r3, r3, #31
 80082d2:	2201      	movs	r2, #1
 80082d4:	fa02 f303 	lsl.w	r3, r2, r3
 80082d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6a1a      	ldr	r2, [r3, #32]
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	43db      	mvns	r3, r3
 80082e2:	401a      	ands	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6a1a      	ldr	r2, [r3, #32]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	f003 031f 	and.w	r3, r3, #31
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	fa01 f303 	lsl.w	r3, r1, r3
 80082f8:	431a      	orrs	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	621a      	str	r2, [r3, #32]
}
 80082fe:	bf00      	nop
 8008300:	371c      	adds	r7, #28
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
	...

0800830c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800831c:	2b01      	cmp	r3, #1
 800831e:	d101      	bne.n	8008324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008320:	2302      	movs	r3, #2
 8008322:	e05a      	b.n	80083da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800834a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	4313      	orrs	r3, r2
 8008354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a21      	ldr	r2, [pc, #132]	; (80083e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d022      	beq.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008370:	d01d      	beq.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a1d      	ldr	r2, [pc, #116]	; (80083ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d018      	beq.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a1b      	ldr	r2, [pc, #108]	; (80083f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d013      	beq.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a1a      	ldr	r2, [pc, #104]	; (80083f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d00e      	beq.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a18      	ldr	r2, [pc, #96]	; (80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d009      	beq.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a17      	ldr	r2, [pc, #92]	; (80083fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d004      	beq.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a15      	ldr	r2, [pc, #84]	; (8008400 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d10c      	bne.n	80083c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	40010000 	.word	0x40010000
 80083ec:	40000400 	.word	0x40000400
 80083f0:	40000800 	.word	0x40000800
 80083f4:	40000c00 	.word	0x40000c00
 80083f8:	40010400 	.word	0x40010400
 80083fc:	40014000 	.word	0x40014000
 8008400:	40001800 	.word	0x40001800

08008404 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008418:	2b01      	cmp	r3, #1
 800841a:	d101      	bne.n	8008420 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800841c:	2302      	movs	r3, #2
 800841e:	e03d      	b.n	800849c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	4313      	orrs	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4313      	orrs	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	4313      	orrs	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	4313      	orrs	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	4313      	orrs	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e03f      	b.n	8008562 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d106      	bne.n	80084fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7fb fe0a 	bl	8004110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2224      	movs	r2, #36	; 0x24
 8008500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008512:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fe35 	bl	8009184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	691a      	ldr	r2, [r3, #16]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	695a      	ldr	r2, [r3, #20]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008538:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008548:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2220      	movs	r2, #32
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2220      	movs	r2, #32
 800855c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	60f8      	str	r0, [r7, #12]
 8008572:	60b9      	str	r1, [r7, #8]
 8008574:	4613      	mov	r3, r2
 8008576:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b20      	cmp	r3, #32
 8008582:	d11d      	bne.n	80085c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <HAL_UART_Receive_IT+0x26>
 800858a:	88fb      	ldrh	r3, [r7, #6]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d101      	bne.n	8008594 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e016      	b.n	80085c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800859a:	2b01      	cmp	r3, #1
 800859c:	d101      	bne.n	80085a2 <HAL_UART_Receive_IT+0x38>
 800859e:	2302      	movs	r3, #2
 80085a0:	e00f      	b.n	80085c2 <HAL_UART_Receive_IT+0x58>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80085b0:	88fb      	ldrh	r3, [r7, #6]
 80085b2:	461a      	mov	r2, r3
 80085b4:	68b9      	ldr	r1, [r7, #8]
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f000 fbe3 	bl	8008d82 <UART_Start_Receive_IT>
 80085bc:	4603      	mov	r3, r0
 80085be:	e000      	b.n	80085c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80085c0:	2302      	movs	r3, #2
  }
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
	...

080085cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08c      	sub	sp, #48	; 0x30
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	4613      	mov	r3, r2
 80085d8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	2b20      	cmp	r3, #32
 80085e4:	d165      	bne.n	80086b2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d002      	beq.n	80085f2 <HAL_UART_Transmit_DMA+0x26>
 80085ec:	88fb      	ldrh	r3, [r7, #6]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e05e      	b.n	80086b4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d101      	bne.n	8008604 <HAL_UART_Transmit_DMA+0x38>
 8008600:	2302      	movs	r3, #2
 8008602:	e057      	b.n	80086b4 <HAL_UART_Transmit_DMA+0xe8>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	88fa      	ldrh	r2, [r7, #6]
 8008616:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	88fa      	ldrh	r2, [r7, #6]
 800861c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2221      	movs	r2, #33	; 0x21
 8008628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008630:	4a22      	ldr	r2, [pc, #136]	; (80086bc <HAL_UART_Transmit_DMA+0xf0>)
 8008632:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008638:	4a21      	ldr	r2, [pc, #132]	; (80086c0 <HAL_UART_Transmit_DMA+0xf4>)
 800863a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008640:	4a20      	ldr	r2, [pc, #128]	; (80086c4 <HAL_UART_Transmit_DMA+0xf8>)
 8008642:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008648:	2200      	movs	r2, #0
 800864a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800864c:	f107 0308 	add.w	r3, r7, #8
 8008650:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008658:	6819      	ldr	r1, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3304      	adds	r3, #4
 8008660:	461a      	mov	r2, r3
 8008662:	88fb      	ldrh	r3, [r7, #6]
 8008664:	f7fc ff30 	bl	80054c8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008670:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3314      	adds	r3, #20
 8008680:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	617b      	str	r3, [r7, #20]
   return(result);
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008690:	62bb      	str	r3, [r7, #40]	; 0x28
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3314      	adds	r3, #20
 8008698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800869a:	627a      	str	r2, [r7, #36]	; 0x24
 800869c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	6a39      	ldr	r1, [r7, #32]
 80086a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e5      	bne.n	800867a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	e000      	b.n	80086b4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80086b2:	2302      	movs	r3, #2
  }
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3730      	adds	r7, #48	; 0x30
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	08008c39 	.word	0x08008c39
 80086c0:	08008cd3 	.word	0x08008cd3
 80086c4:	08008cef 	.word	0x08008cef

080086c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b0ba      	sub	sp, #232	; 0xe8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80086f4:	2300      	movs	r3, #0
 80086f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80086fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086fe:	f003 030f 	and.w	r3, r3, #15
 8008702:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10f      	bne.n	800872e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800870e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008712:	f003 0320 	and.w	r3, r3, #32
 8008716:	2b00      	cmp	r3, #0
 8008718:	d009      	beq.n	800872e <HAL_UART_IRQHandler+0x66>
 800871a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800871e:	f003 0320 	and.w	r3, r3, #32
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fc70 	bl	800900c <UART_Receive_IT>
      return;
 800872c:	e256      	b.n	8008bdc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800872e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 80de 	beq.w	80088f4 <HAL_UART_IRQHandler+0x22c>
 8008738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	d106      	bne.n	8008752 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008748:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 80d1 	beq.w	80088f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00b      	beq.n	8008776 <HAL_UART_IRQHandler+0xae>
 800875e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008766:	2b00      	cmp	r3, #0
 8008768:	d005      	beq.n	8008776 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876e:	f043 0201 	orr.w	r2, r3, #1
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800877a:	f003 0304 	and.w	r3, r3, #4
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00b      	beq.n	800879a <HAL_UART_IRQHandler+0xd2>
 8008782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b00      	cmp	r3, #0
 800878c:	d005      	beq.n	800879a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008792:	f043 0202 	orr.w	r2, r3, #2
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800879a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800879e:	f003 0302 	and.w	r3, r3, #2
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00b      	beq.n	80087be <HAL_UART_IRQHandler+0xf6>
 80087a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d005      	beq.n	80087be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b6:	f043 0204 	orr.w	r2, r3, #4
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80087be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c2:	f003 0308 	and.w	r3, r3, #8
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d011      	beq.n	80087ee <HAL_UART_IRQHandler+0x126>
 80087ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ce:	f003 0320 	and.w	r3, r3, #32
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d105      	bne.n	80087e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80087d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d005      	beq.n	80087ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e6:	f043 0208 	orr.w	r2, r3, #8
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 81ed 	beq.w	8008bd2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087fc:	f003 0320 	and.w	r3, r3, #32
 8008800:	2b00      	cmp	r3, #0
 8008802:	d008      	beq.n	8008816 <HAL_UART_IRQHandler+0x14e>
 8008804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008808:	f003 0320 	and.w	r3, r3, #32
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fbfb 	bl	800900c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008820:	2b40      	cmp	r3, #64	; 0x40
 8008822:	bf0c      	ite	eq
 8008824:	2301      	moveq	r3, #1
 8008826:	2300      	movne	r3, #0
 8008828:	b2db      	uxtb	r3, r3
 800882a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008832:	f003 0308 	and.w	r3, r3, #8
 8008836:	2b00      	cmp	r3, #0
 8008838:	d103      	bne.n	8008842 <HAL_UART_IRQHandler+0x17a>
 800883a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800883e:	2b00      	cmp	r3, #0
 8008840:	d04f      	beq.n	80088e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fb03 	bl	8008e4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008852:	2b40      	cmp	r3, #64	; 0x40
 8008854:	d141      	bne.n	80088da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	3314      	adds	r3, #20
 800885c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008860:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008864:	e853 3f00 	ldrex	r3, [r3]
 8008868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800886c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3314      	adds	r3, #20
 800887e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008882:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008886:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800888e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008892:	e841 2300 	strex	r3, r2, [r1]
 8008896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800889a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1d9      	bne.n	8008856 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d013      	beq.n	80088d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ae:	4a7d      	ldr	r2, [pc, #500]	; (8008aa4 <HAL_UART_IRQHandler+0x3dc>)
 80088b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fc fece 	bl	8005658 <HAL_DMA_Abort_IT>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d016      	beq.n	80088f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80088cc:	4610      	mov	r0, r2
 80088ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d0:	e00e      	b.n	80088f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f99a 	bl	8008c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d8:	e00a      	b.n	80088f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f996 	bl	8008c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088e0:	e006      	b.n	80088f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f992 	bl	8008c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80088ee:	e170      	b.n	8008bd2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088f0:	bf00      	nop
    return;
 80088f2:	e16e      	b.n	8008bd2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	f040 814a 	bne.w	8008b92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80088fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008902:	f003 0310 	and.w	r3, r3, #16
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 8143 	beq.w	8008b92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800890c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008910:	f003 0310 	and.w	r3, r3, #16
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 813c 	beq.w	8008b92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800891a:	2300      	movs	r3, #0
 800891c:	60bb      	str	r3, [r7, #8]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	60bb      	str	r3, [r7, #8]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	60bb      	str	r3, [r7, #8]
 800892e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893a:	2b40      	cmp	r3, #64	; 0x40
 800893c:	f040 80b4 	bne.w	8008aa8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800894c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 8140 	beq.w	8008bd6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800895a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800895e:	429a      	cmp	r2, r3
 8008960:	f080 8139 	bcs.w	8008bd6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800896a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008970:	69db      	ldr	r3, [r3, #28]
 8008972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008976:	f000 8088 	beq.w	8008a8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	330c      	adds	r3, #12
 8008980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008984:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008990:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	330c      	adds	r3, #12
 80089a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80089a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80089aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80089b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80089b6:	e841 2300 	strex	r3, r2, [r1]
 80089ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80089be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1d9      	bne.n	800897a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3314      	adds	r3, #20
 80089cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089d0:	e853 3f00 	ldrex	r3, [r3]
 80089d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80089d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089d8:	f023 0301 	bic.w	r3, r3, #1
 80089dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3314      	adds	r3, #20
 80089e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80089ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80089ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80089f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80089f6:	e841 2300 	strex	r3, r2, [r1]
 80089fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80089fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1e1      	bne.n	80089c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3314      	adds	r3, #20
 8008a08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a0c:	e853 3f00 	ldrex	r3, [r3]
 8008a10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	3314      	adds	r3, #20
 8008a22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008a26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a2e:	e841 2300 	strex	r3, r2, [r1]
 8008a32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1e3      	bne.n	8008a02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	330c      	adds	r3, #12
 8008a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a52:	e853 3f00 	ldrex	r3, [r3]
 8008a56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a5a:	f023 0310 	bic.w	r3, r3, #16
 8008a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	330c      	adds	r3, #12
 8008a68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008a6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008a6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a74:	e841 2300 	strex	r3, r2, [r1]
 8008a78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e3      	bne.n	8008a48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fc fd77 	bl	8005578 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f8c0 	bl	8008c20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008aa0:	e099      	b.n	8008bd6 <HAL_UART_IRQHandler+0x50e>
 8008aa2:	bf00      	nop
 8008aa4:	08008f15 	.word	0x08008f15
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f000 808b 	beq.w	8008bda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008ac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 8086 	beq.w	8008bda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	330c      	adds	r3, #12
 8008ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ae4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	330c      	adds	r3, #12
 8008aee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008af2:	647a      	str	r2, [r7, #68]	; 0x44
 8008af4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008af8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008afa:	e841 2300 	strex	r3, r2, [r1]
 8008afe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e3      	bne.n	8008ace <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3314      	adds	r3, #20
 8008b0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	e853 3f00 	ldrex	r3, [r3]
 8008b14:	623b      	str	r3, [r7, #32]
   return(result);
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	f023 0301 	bic.w	r3, r3, #1
 8008b1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3314      	adds	r3, #20
 8008b26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008b2a:	633a      	str	r2, [r7, #48]	; 0x30
 8008b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b32:	e841 2300 	strex	r3, r2, [r1]
 8008b36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1e3      	bne.n	8008b06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2220      	movs	r2, #32
 8008b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	330c      	adds	r3, #12
 8008b52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	e853 3f00 	ldrex	r3, [r3]
 8008b5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f023 0310 	bic.w	r3, r3, #16
 8008b62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	330c      	adds	r3, #12
 8008b6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008b70:	61fa      	str	r2, [r7, #28]
 8008b72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b74:	69b9      	ldr	r1, [r7, #24]
 8008b76:	69fa      	ldr	r2, [r7, #28]
 8008b78:	e841 2300 	strex	r3, r2, [r1]
 8008b7c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e3      	bne.n	8008b4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f848 	bl	8008c20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b90:	e023      	b.n	8008bda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d009      	beq.n	8008bb2 <HAL_UART_IRQHandler+0x4ea>
 8008b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d003      	beq.n	8008bb2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f9c6 	bl	8008f3c <UART_Transmit_IT>
    return;
 8008bb0:	e014      	b.n	8008bdc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00e      	beq.n	8008bdc <HAL_UART_IRQHandler+0x514>
 8008bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d008      	beq.n	8008bdc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fa06 	bl	8008fdc <UART_EndTransmit_IT>
    return;
 8008bd0:	e004      	b.n	8008bdc <HAL_UART_IRQHandler+0x514>
    return;
 8008bd2:	bf00      	nop
 8008bd4:	e002      	b.n	8008bdc <HAL_UART_IRQHandler+0x514>
      return;
 8008bd6:	bf00      	nop
 8008bd8:	e000      	b.n	8008bdc <HAL_UART_IRQHandler+0x514>
      return;
 8008bda:	bf00      	nop
  }
}
 8008bdc:	37e8      	adds	r7, #232	; 0xe8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop

08008be4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b090      	sub	sp, #64	; 0x40
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d137      	bne.n	8008cc4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c56:	2200      	movs	r2, #0
 8008c58:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3314      	adds	r3, #20
 8008c60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	623b      	str	r3, [r7, #32]
   return(result);
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c70:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3314      	adds	r3, #20
 8008c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c7a:	633a      	str	r2, [r7, #48]	; 0x30
 8008c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c82:	e841 2300 	strex	r3, r2, [r1]
 8008c86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1e5      	bne.n	8008c5a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	330c      	adds	r3, #12
 8008c94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	e853 3f00 	ldrex	r3, [r3]
 8008c9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	330c      	adds	r3, #12
 8008cac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cae:	61fa      	str	r2, [r7, #28]
 8008cb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb2:	69b9      	ldr	r1, [r7, #24]
 8008cb4:	69fa      	ldr	r2, [r7, #28]
 8008cb6:	e841 2300 	strex	r3, r2, [r1]
 8008cba:	617b      	str	r3, [r7, #20]
   return(result);
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1e5      	bne.n	8008c8e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008cc2:	e002      	b.n	8008cca <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008cc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008cc6:	f7ff ff8d 	bl	8008be4 <HAL_UART_TxCpltCallback>
}
 8008cca:	bf00      	nop
 8008ccc:	3740      	adds	r7, #64	; 0x40
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cde:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f7ff ff89 	bl	8008bf8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ce6:	bf00      	nop
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d0a:	2b80      	cmp	r3, #128	; 0x80
 8008d0c:	bf0c      	ite	eq
 8008d0e:	2301      	moveq	r3, #1
 8008d10:	2300      	movne	r3, #0
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b21      	cmp	r3, #33	; 0x21
 8008d20:	d108      	bne.n	8008d34 <UART_DMAError+0x46>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008d2e:	68b8      	ldr	r0, [r7, #8]
 8008d30:	f000 f865 	bl	8008dfe <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3e:	2b40      	cmp	r3, #64	; 0x40
 8008d40:	bf0c      	ite	eq
 8008d42:	2301      	moveq	r3, #1
 8008d44:	2300      	movne	r3, #0
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b22      	cmp	r3, #34	; 0x22
 8008d54:	d108      	bne.n	8008d68 <UART_DMAError+0x7a>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d005      	beq.n	8008d68 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008d62:	68b8      	ldr	r0, [r7, #8]
 8008d64:	f000 f873 	bl	8008e4e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6c:	f043 0210 	orr.w	r2, r3, #16
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d74:	68b8      	ldr	r0, [r7, #8]
 8008d76:	f7ff ff49 	bl	8008c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d7a:	bf00      	nop
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b085      	sub	sp, #20
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	60f8      	str	r0, [r7, #12]
 8008d8a:	60b9      	str	r1, [r7, #8]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	88fa      	ldrh	r2, [r7, #6]
 8008d9a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	88fa      	ldrh	r2, [r7, #6]
 8008da0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2222      	movs	r2, #34	; 0x22
 8008dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d007      	beq.n	8008dd0 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68da      	ldr	r2, [r3, #12]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	695a      	ldr	r2, [r3, #20]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f042 0201 	orr.w	r2, r2, #1
 8008dde:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f042 0220 	orr.w	r2, r2, #32
 8008dee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b089      	sub	sp, #36	; 0x24
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	330c      	adds	r3, #12
 8008e0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	e853 3f00 	ldrex	r3, [r3]
 8008e14:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e1c:	61fb      	str	r3, [r7, #28]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	330c      	adds	r3, #12
 8008e24:	69fa      	ldr	r2, [r7, #28]
 8008e26:	61ba      	str	r2, [r7, #24]
 8008e28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2a:	6979      	ldr	r1, [r7, #20]
 8008e2c:	69ba      	ldr	r2, [r7, #24]
 8008e2e:	e841 2300 	strex	r3, r2, [r1]
 8008e32:	613b      	str	r3, [r7, #16]
   return(result);
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1e5      	bne.n	8008e06 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2220      	movs	r2, #32
 8008e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008e42:	bf00      	nop
 8008e44:	3724      	adds	r7, #36	; 0x24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b095      	sub	sp, #84	; 0x54
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	330c      	adds	r3, #12
 8008e5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	330c      	adds	r3, #12
 8008e74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e76:	643a      	str	r2, [r7, #64]	; 0x40
 8008e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e5      	bne.n	8008e56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3314      	adds	r3, #20
 8008e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	f023 0301 	bic.w	r3, r3, #1
 8008ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3314      	adds	r3, #20
 8008ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008eac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e5      	bne.n	8008e8a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d119      	bne.n	8008efa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	330c      	adds	r3, #12
 8008ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f023 0310 	bic.w	r3, r3, #16
 8008edc:	647b      	str	r3, [r7, #68]	; 0x44
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	330c      	adds	r3, #12
 8008ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ee6:	61ba      	str	r2, [r7, #24]
 8008ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6979      	ldr	r1, [r7, #20]
 8008eec:	69ba      	ldr	r2, [r7, #24]
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e5      	bne.n	8008ec6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f08:	bf00      	nop
 8008f0a:	3754      	adds	r7, #84	; 0x54
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f7ff fe6c 	bl	8008c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f34:	bf00      	nop
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b21      	cmp	r3, #33	; 0x21
 8008f4e:	d13e      	bne.n	8008fce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f58:	d114      	bne.n	8008f84 <UART_Transmit_IT+0x48>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d110      	bne.n	8008f84 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f76:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a1b      	ldr	r3, [r3, #32]
 8008f7c:	1c9a      	adds	r2, r3, #2
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	621a      	str	r2, [r3, #32]
 8008f82:	e008      	b.n	8008f96 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	1c59      	adds	r1, r3, #1
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	6211      	str	r1, [r2, #32]
 8008f8e:	781a      	ldrb	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10f      	bne.n	8008fca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68da      	ldr	r2, [r3, #12]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fb8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68da      	ldr	r2, [r3, #12]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	e000      	b.n	8008fd0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008fce:	2302      	movs	r3, #2
  }
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68da      	ldr	r2, [r3, #12]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ff2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff fdf1 	bl	8008be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b08c      	sub	sp, #48	; 0x30
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800901a:	b2db      	uxtb	r3, r3
 800901c:	2b22      	cmp	r3, #34	; 0x22
 800901e:	f040 80ab 	bne.w	8009178 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800902a:	d117      	bne.n	800905c <UART_Receive_IT+0x50>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d113      	bne.n	800905c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009034:	2300      	movs	r3, #0
 8009036:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	b29b      	uxth	r3, r3
 8009046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800904a:	b29a      	uxth	r2, r3
 800904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009054:	1c9a      	adds	r2, r3, #2
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	629a      	str	r2, [r3, #40]	; 0x28
 800905a:	e026      	b.n	80090aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009060:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009062:	2300      	movs	r3, #0
 8009064:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800906e:	d007      	beq.n	8009080 <UART_Receive_IT+0x74>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10a      	bne.n	800908e <UART_Receive_IT+0x82>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d106      	bne.n	800908e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	b2da      	uxtb	r2, r3
 8009088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908a:	701a      	strb	r2, [r3, #0]
 800908c:	e008      	b.n	80090a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	b2db      	uxtb	r3, r3
 8009096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800909a:	b2da      	uxtb	r2, r3
 800909c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	3b01      	subs	r3, #1
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	4619      	mov	r1, r3
 80090b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d15a      	bne.n	8009174 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68da      	ldr	r2, [r3, #12]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f022 0220 	bic.w	r2, r2, #32
 80090cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68da      	ldr	r2, [r3, #12]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	695a      	ldr	r2, [r3, #20]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f022 0201 	bic.w	r2, r2, #1
 80090ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2220      	movs	r2, #32
 80090f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d135      	bne.n	800916a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	330c      	adds	r3, #12
 800910a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	e853 3f00 	ldrex	r3, [r3]
 8009112:	613b      	str	r3, [r7, #16]
   return(result);
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f023 0310 	bic.w	r3, r3, #16
 800911a:	627b      	str	r3, [r7, #36]	; 0x24
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	330c      	adds	r3, #12
 8009122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009124:	623a      	str	r2, [r7, #32]
 8009126:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009128:	69f9      	ldr	r1, [r7, #28]
 800912a:	6a3a      	ldr	r2, [r7, #32]
 800912c:	e841 2300 	strex	r3, r2, [r1]
 8009130:	61bb      	str	r3, [r7, #24]
   return(result);
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1e5      	bne.n	8009104 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 0310 	and.w	r3, r3, #16
 8009142:	2b10      	cmp	r3, #16
 8009144:	d10a      	bne.n	800915c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009146:	2300      	movs	r3, #0
 8009148:	60fb      	str	r3, [r7, #12]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	60fb      	str	r3, [r7, #12]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	60fb      	str	r3, [r7, #12]
 800915a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009160:	4619      	mov	r1, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7ff fd5c 	bl	8008c20 <HAL_UARTEx_RxEventCallback>
 8009168:	e002      	b.n	8009170 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7fa f9e2 	bl	8003534 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	e002      	b.n	800917a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	e000      	b.n	800917a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009178:	2302      	movs	r3, #2
  }
}
 800917a:	4618      	mov	r0, r3
 800917c:	3730      	adds	r7, #48	; 0x30
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
	...

08009184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009188:	b0c0      	sub	sp, #256	; 0x100
 800918a:	af00      	add	r7, sp, #0
 800918c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800919c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a0:	68d9      	ldr	r1, [r3, #12]
 80091a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	ea40 0301 	orr.w	r3, r0, r1
 80091ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b2:	689a      	ldr	r2, [r3, #8]
 80091b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	431a      	orrs	r2, r3
 80091bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	431a      	orrs	r2, r3
 80091c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80091d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80091dc:	f021 010c 	bic.w	r1, r1, #12
 80091e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091ea:	430b      	orrs	r3, r1
 80091ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80091fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091fe:	6999      	ldr	r1, [r3, #24]
 8009200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	ea40 0301 	orr.w	r3, r0, r1
 800920a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800920c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	4b8f      	ldr	r3, [pc, #572]	; (8009450 <UART_SetConfig+0x2cc>)
 8009214:	429a      	cmp	r2, r3
 8009216:	d005      	beq.n	8009224 <UART_SetConfig+0xa0>
 8009218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	4b8d      	ldr	r3, [pc, #564]	; (8009454 <UART_SetConfig+0x2d0>)
 8009220:	429a      	cmp	r2, r3
 8009222:	d104      	bne.n	800922e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009224:	f7fd fae8 	bl	80067f8 <HAL_RCC_GetPCLK2Freq>
 8009228:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800922c:	e003      	b.n	8009236 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800922e:	f7fd facf 	bl	80067d0 <HAL_RCC_GetPCLK1Freq>
 8009232:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800923a:	69db      	ldr	r3, [r3, #28]
 800923c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009240:	f040 810c 	bne.w	800945c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009248:	2200      	movs	r2, #0
 800924a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800924e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009252:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009256:	4622      	mov	r2, r4
 8009258:	462b      	mov	r3, r5
 800925a:	1891      	adds	r1, r2, r2
 800925c:	65b9      	str	r1, [r7, #88]	; 0x58
 800925e:	415b      	adcs	r3, r3
 8009260:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009262:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009266:	4621      	mov	r1, r4
 8009268:	eb12 0801 	adds.w	r8, r2, r1
 800926c:	4629      	mov	r1, r5
 800926e:	eb43 0901 	adc.w	r9, r3, r1
 8009272:	f04f 0200 	mov.w	r2, #0
 8009276:	f04f 0300 	mov.w	r3, #0
 800927a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800927e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009286:	4690      	mov	r8, r2
 8009288:	4699      	mov	r9, r3
 800928a:	4623      	mov	r3, r4
 800928c:	eb18 0303 	adds.w	r3, r8, r3
 8009290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009294:	462b      	mov	r3, r5
 8009296:	eb49 0303 	adc.w	r3, r9, r3
 800929a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800929e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80092aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80092ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80092b2:	460b      	mov	r3, r1
 80092b4:	18db      	adds	r3, r3, r3
 80092b6:	653b      	str	r3, [r7, #80]	; 0x50
 80092b8:	4613      	mov	r3, r2
 80092ba:	eb42 0303 	adc.w	r3, r2, r3
 80092be:	657b      	str	r3, [r7, #84]	; 0x54
 80092c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80092c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80092c8:	f7f7 fc6e 	bl	8000ba8 <__aeabi_uldivmod>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4b61      	ldr	r3, [pc, #388]	; (8009458 <UART_SetConfig+0x2d4>)
 80092d2:	fba3 2302 	umull	r2, r3, r3, r2
 80092d6:	095b      	lsrs	r3, r3, #5
 80092d8:	011c      	lsls	r4, r3, #4
 80092da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092de:	2200      	movs	r2, #0
 80092e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80092e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80092ec:	4642      	mov	r2, r8
 80092ee:	464b      	mov	r3, r9
 80092f0:	1891      	adds	r1, r2, r2
 80092f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80092f4:	415b      	adcs	r3, r3
 80092f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80092fc:	4641      	mov	r1, r8
 80092fe:	eb12 0a01 	adds.w	sl, r2, r1
 8009302:	4649      	mov	r1, r9
 8009304:	eb43 0b01 	adc.w	fp, r3, r1
 8009308:	f04f 0200 	mov.w	r2, #0
 800930c:	f04f 0300 	mov.w	r3, #0
 8009310:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009314:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800931c:	4692      	mov	sl, r2
 800931e:	469b      	mov	fp, r3
 8009320:	4643      	mov	r3, r8
 8009322:	eb1a 0303 	adds.w	r3, sl, r3
 8009326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800932a:	464b      	mov	r3, r9
 800932c:	eb4b 0303 	adc.w	r3, fp, r3
 8009330:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009340:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009344:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009348:	460b      	mov	r3, r1
 800934a:	18db      	adds	r3, r3, r3
 800934c:	643b      	str	r3, [r7, #64]	; 0x40
 800934e:	4613      	mov	r3, r2
 8009350:	eb42 0303 	adc.w	r3, r2, r3
 8009354:	647b      	str	r3, [r7, #68]	; 0x44
 8009356:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800935a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800935e:	f7f7 fc23 	bl	8000ba8 <__aeabi_uldivmod>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	4611      	mov	r1, r2
 8009368:	4b3b      	ldr	r3, [pc, #236]	; (8009458 <UART_SetConfig+0x2d4>)
 800936a:	fba3 2301 	umull	r2, r3, r3, r1
 800936e:	095b      	lsrs	r3, r3, #5
 8009370:	2264      	movs	r2, #100	; 0x64
 8009372:	fb02 f303 	mul.w	r3, r2, r3
 8009376:	1acb      	subs	r3, r1, r3
 8009378:	00db      	lsls	r3, r3, #3
 800937a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800937e:	4b36      	ldr	r3, [pc, #216]	; (8009458 <UART_SetConfig+0x2d4>)
 8009380:	fba3 2302 	umull	r2, r3, r3, r2
 8009384:	095b      	lsrs	r3, r3, #5
 8009386:	005b      	lsls	r3, r3, #1
 8009388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800938c:	441c      	add	r4, r3
 800938e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009392:	2200      	movs	r2, #0
 8009394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009398:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800939c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80093a0:	4642      	mov	r2, r8
 80093a2:	464b      	mov	r3, r9
 80093a4:	1891      	adds	r1, r2, r2
 80093a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80093a8:	415b      	adcs	r3, r3
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093b0:	4641      	mov	r1, r8
 80093b2:	1851      	adds	r1, r2, r1
 80093b4:	6339      	str	r1, [r7, #48]	; 0x30
 80093b6:	4649      	mov	r1, r9
 80093b8:	414b      	adcs	r3, r1
 80093ba:	637b      	str	r3, [r7, #52]	; 0x34
 80093bc:	f04f 0200 	mov.w	r2, #0
 80093c0:	f04f 0300 	mov.w	r3, #0
 80093c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80093c8:	4659      	mov	r1, fp
 80093ca:	00cb      	lsls	r3, r1, #3
 80093cc:	4651      	mov	r1, sl
 80093ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093d2:	4651      	mov	r1, sl
 80093d4:	00ca      	lsls	r2, r1, #3
 80093d6:	4610      	mov	r0, r2
 80093d8:	4619      	mov	r1, r3
 80093da:	4603      	mov	r3, r0
 80093dc:	4642      	mov	r2, r8
 80093de:	189b      	adds	r3, r3, r2
 80093e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093e4:	464b      	mov	r3, r9
 80093e6:	460a      	mov	r2, r1
 80093e8:	eb42 0303 	adc.w	r3, r2, r3
 80093ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80093fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009400:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009404:	460b      	mov	r3, r1
 8009406:	18db      	adds	r3, r3, r3
 8009408:	62bb      	str	r3, [r7, #40]	; 0x28
 800940a:	4613      	mov	r3, r2
 800940c:	eb42 0303 	adc.w	r3, r2, r3
 8009410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009412:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009416:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800941a:	f7f7 fbc5 	bl	8000ba8 <__aeabi_uldivmod>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4b0d      	ldr	r3, [pc, #52]	; (8009458 <UART_SetConfig+0x2d4>)
 8009424:	fba3 1302 	umull	r1, r3, r3, r2
 8009428:	095b      	lsrs	r3, r3, #5
 800942a:	2164      	movs	r1, #100	; 0x64
 800942c:	fb01 f303 	mul.w	r3, r1, r3
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	00db      	lsls	r3, r3, #3
 8009434:	3332      	adds	r3, #50	; 0x32
 8009436:	4a08      	ldr	r2, [pc, #32]	; (8009458 <UART_SetConfig+0x2d4>)
 8009438:	fba2 2303 	umull	r2, r3, r2, r3
 800943c:	095b      	lsrs	r3, r3, #5
 800943e:	f003 0207 	and.w	r2, r3, #7
 8009442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4422      	add	r2, r4
 800944a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800944c:	e105      	b.n	800965a <UART_SetConfig+0x4d6>
 800944e:	bf00      	nop
 8009450:	40011000 	.word	0x40011000
 8009454:	40011400 	.word	0x40011400
 8009458:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800945c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009460:	2200      	movs	r2, #0
 8009462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009466:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800946a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800946e:	4642      	mov	r2, r8
 8009470:	464b      	mov	r3, r9
 8009472:	1891      	adds	r1, r2, r2
 8009474:	6239      	str	r1, [r7, #32]
 8009476:	415b      	adcs	r3, r3
 8009478:	627b      	str	r3, [r7, #36]	; 0x24
 800947a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800947e:	4641      	mov	r1, r8
 8009480:	1854      	adds	r4, r2, r1
 8009482:	4649      	mov	r1, r9
 8009484:	eb43 0501 	adc.w	r5, r3, r1
 8009488:	f04f 0200 	mov.w	r2, #0
 800948c:	f04f 0300 	mov.w	r3, #0
 8009490:	00eb      	lsls	r3, r5, #3
 8009492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009496:	00e2      	lsls	r2, r4, #3
 8009498:	4614      	mov	r4, r2
 800949a:	461d      	mov	r5, r3
 800949c:	4643      	mov	r3, r8
 800949e:	18e3      	adds	r3, r4, r3
 80094a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80094a4:	464b      	mov	r3, r9
 80094a6:	eb45 0303 	adc.w	r3, r5, r3
 80094aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80094ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80094be:	f04f 0200 	mov.w	r2, #0
 80094c2:	f04f 0300 	mov.w	r3, #0
 80094c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80094ca:	4629      	mov	r1, r5
 80094cc:	008b      	lsls	r3, r1, #2
 80094ce:	4621      	mov	r1, r4
 80094d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094d4:	4621      	mov	r1, r4
 80094d6:	008a      	lsls	r2, r1, #2
 80094d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094dc:	f7f7 fb64 	bl	8000ba8 <__aeabi_uldivmod>
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	4b60      	ldr	r3, [pc, #384]	; (8009668 <UART_SetConfig+0x4e4>)
 80094e6:	fba3 2302 	umull	r2, r3, r3, r2
 80094ea:	095b      	lsrs	r3, r3, #5
 80094ec:	011c      	lsls	r4, r3, #4
 80094ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094f2:	2200      	movs	r2, #0
 80094f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80094fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009500:	4642      	mov	r2, r8
 8009502:	464b      	mov	r3, r9
 8009504:	1891      	adds	r1, r2, r2
 8009506:	61b9      	str	r1, [r7, #24]
 8009508:	415b      	adcs	r3, r3
 800950a:	61fb      	str	r3, [r7, #28]
 800950c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009510:	4641      	mov	r1, r8
 8009512:	1851      	adds	r1, r2, r1
 8009514:	6139      	str	r1, [r7, #16]
 8009516:	4649      	mov	r1, r9
 8009518:	414b      	adcs	r3, r1
 800951a:	617b      	str	r3, [r7, #20]
 800951c:	f04f 0200 	mov.w	r2, #0
 8009520:	f04f 0300 	mov.w	r3, #0
 8009524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009528:	4659      	mov	r1, fp
 800952a:	00cb      	lsls	r3, r1, #3
 800952c:	4651      	mov	r1, sl
 800952e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009532:	4651      	mov	r1, sl
 8009534:	00ca      	lsls	r2, r1, #3
 8009536:	4610      	mov	r0, r2
 8009538:	4619      	mov	r1, r3
 800953a:	4603      	mov	r3, r0
 800953c:	4642      	mov	r2, r8
 800953e:	189b      	adds	r3, r3, r2
 8009540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009544:	464b      	mov	r3, r9
 8009546:	460a      	mov	r2, r1
 8009548:	eb42 0303 	adc.w	r3, r2, r3
 800954c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	67bb      	str	r3, [r7, #120]	; 0x78
 800955a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800955c:	f04f 0200 	mov.w	r2, #0
 8009560:	f04f 0300 	mov.w	r3, #0
 8009564:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009568:	4649      	mov	r1, r9
 800956a:	008b      	lsls	r3, r1, #2
 800956c:	4641      	mov	r1, r8
 800956e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009572:	4641      	mov	r1, r8
 8009574:	008a      	lsls	r2, r1, #2
 8009576:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800957a:	f7f7 fb15 	bl	8000ba8 <__aeabi_uldivmod>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4b39      	ldr	r3, [pc, #228]	; (8009668 <UART_SetConfig+0x4e4>)
 8009584:	fba3 1302 	umull	r1, r3, r3, r2
 8009588:	095b      	lsrs	r3, r3, #5
 800958a:	2164      	movs	r1, #100	; 0x64
 800958c:	fb01 f303 	mul.w	r3, r1, r3
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	011b      	lsls	r3, r3, #4
 8009594:	3332      	adds	r3, #50	; 0x32
 8009596:	4a34      	ldr	r2, [pc, #208]	; (8009668 <UART_SetConfig+0x4e4>)
 8009598:	fba2 2303 	umull	r2, r3, r2, r3
 800959c:	095b      	lsrs	r3, r3, #5
 800959e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095a2:	441c      	add	r4, r3
 80095a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095a8:	2200      	movs	r2, #0
 80095aa:	673b      	str	r3, [r7, #112]	; 0x70
 80095ac:	677a      	str	r2, [r7, #116]	; 0x74
 80095ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80095b2:	4642      	mov	r2, r8
 80095b4:	464b      	mov	r3, r9
 80095b6:	1891      	adds	r1, r2, r2
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	415b      	adcs	r3, r3
 80095bc:	60fb      	str	r3, [r7, #12]
 80095be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095c2:	4641      	mov	r1, r8
 80095c4:	1851      	adds	r1, r2, r1
 80095c6:	6039      	str	r1, [r7, #0]
 80095c8:	4649      	mov	r1, r9
 80095ca:	414b      	adcs	r3, r1
 80095cc:	607b      	str	r3, [r7, #4]
 80095ce:	f04f 0200 	mov.w	r2, #0
 80095d2:	f04f 0300 	mov.w	r3, #0
 80095d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80095da:	4659      	mov	r1, fp
 80095dc:	00cb      	lsls	r3, r1, #3
 80095de:	4651      	mov	r1, sl
 80095e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095e4:	4651      	mov	r1, sl
 80095e6:	00ca      	lsls	r2, r1, #3
 80095e8:	4610      	mov	r0, r2
 80095ea:	4619      	mov	r1, r3
 80095ec:	4603      	mov	r3, r0
 80095ee:	4642      	mov	r2, r8
 80095f0:	189b      	adds	r3, r3, r2
 80095f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80095f4:	464b      	mov	r3, r9
 80095f6:	460a      	mov	r2, r1
 80095f8:	eb42 0303 	adc.w	r3, r2, r3
 80095fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	663b      	str	r3, [r7, #96]	; 0x60
 8009608:	667a      	str	r2, [r7, #100]	; 0x64
 800960a:	f04f 0200 	mov.w	r2, #0
 800960e:	f04f 0300 	mov.w	r3, #0
 8009612:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009616:	4649      	mov	r1, r9
 8009618:	008b      	lsls	r3, r1, #2
 800961a:	4641      	mov	r1, r8
 800961c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009620:	4641      	mov	r1, r8
 8009622:	008a      	lsls	r2, r1, #2
 8009624:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009628:	f7f7 fabe 	bl	8000ba8 <__aeabi_uldivmod>
 800962c:	4602      	mov	r2, r0
 800962e:	460b      	mov	r3, r1
 8009630:	4b0d      	ldr	r3, [pc, #52]	; (8009668 <UART_SetConfig+0x4e4>)
 8009632:	fba3 1302 	umull	r1, r3, r3, r2
 8009636:	095b      	lsrs	r3, r3, #5
 8009638:	2164      	movs	r1, #100	; 0x64
 800963a:	fb01 f303 	mul.w	r3, r1, r3
 800963e:	1ad3      	subs	r3, r2, r3
 8009640:	011b      	lsls	r3, r3, #4
 8009642:	3332      	adds	r3, #50	; 0x32
 8009644:	4a08      	ldr	r2, [pc, #32]	; (8009668 <UART_SetConfig+0x4e4>)
 8009646:	fba2 2303 	umull	r2, r3, r2, r3
 800964a:	095b      	lsrs	r3, r3, #5
 800964c:	f003 020f 	and.w	r2, r3, #15
 8009650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4422      	add	r2, r4
 8009658:	609a      	str	r2, [r3, #8]
}
 800965a:	bf00      	nop
 800965c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009660:	46bd      	mov	sp, r7
 8009662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009666:	bf00      	nop
 8009668:	51eb851f 	.word	0x51eb851f

0800966c <__NVIC_SetPriority>:
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	4603      	mov	r3, r0
 8009674:	6039      	str	r1, [r7, #0]
 8009676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800967c:	2b00      	cmp	r3, #0
 800967e:	db0a      	blt.n	8009696 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	b2da      	uxtb	r2, r3
 8009684:	490c      	ldr	r1, [pc, #48]	; (80096b8 <__NVIC_SetPriority+0x4c>)
 8009686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800968a:	0112      	lsls	r2, r2, #4
 800968c:	b2d2      	uxtb	r2, r2
 800968e:	440b      	add	r3, r1
 8009690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009694:	e00a      	b.n	80096ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	b2da      	uxtb	r2, r3
 800969a:	4908      	ldr	r1, [pc, #32]	; (80096bc <__NVIC_SetPriority+0x50>)
 800969c:	79fb      	ldrb	r3, [r7, #7]
 800969e:	f003 030f 	and.w	r3, r3, #15
 80096a2:	3b04      	subs	r3, #4
 80096a4:	0112      	lsls	r2, r2, #4
 80096a6:	b2d2      	uxtb	r2, r2
 80096a8:	440b      	add	r3, r1
 80096aa:	761a      	strb	r2, [r3, #24]
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	e000e100 	.word	0xe000e100
 80096bc:	e000ed00 	.word	0xe000ed00

080096c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80096c4:	4b05      	ldr	r3, [pc, #20]	; (80096dc <SysTick_Handler+0x1c>)
 80096c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80096c8:	f002 fc1e 	bl	800bf08 <xTaskGetSchedulerState>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d001      	beq.n	80096d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80096d2:	f003 fdc1 	bl	800d258 <xPortSysTickHandler>
  }
}
 80096d6:	bf00      	nop
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	e000e010 	.word	0xe000e010

080096e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80096e0:	b580      	push	{r7, lr}
 80096e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80096e4:	2100      	movs	r1, #0
 80096e6:	f06f 0004 	mvn.w	r0, #4
 80096ea:	f7ff ffbf 	bl	800966c <__NVIC_SetPriority>
#endif
}
 80096ee:	bf00      	nop
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096fa:	f3ef 8305 	mrs	r3, IPSR
 80096fe:	603b      	str	r3, [r7, #0]
  return(result);
 8009700:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009702:	2b00      	cmp	r3, #0
 8009704:	d003      	beq.n	800970e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009706:	f06f 0305 	mvn.w	r3, #5
 800970a:	607b      	str	r3, [r7, #4]
 800970c:	e00c      	b.n	8009728 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800970e:	4b0a      	ldr	r3, [pc, #40]	; (8009738 <osKernelInitialize+0x44>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d105      	bne.n	8009722 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009716:	4b08      	ldr	r3, [pc, #32]	; (8009738 <osKernelInitialize+0x44>)
 8009718:	2201      	movs	r2, #1
 800971a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800971c:	2300      	movs	r3, #0
 800971e:	607b      	str	r3, [r7, #4]
 8009720:	e002      	b.n	8009728 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009722:	f04f 33ff 	mov.w	r3, #4294967295
 8009726:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009728:	687b      	ldr	r3, [r7, #4]
}
 800972a:	4618      	mov	r0, r3
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	20000b9c 	.word	0x20000b9c

0800973c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009742:	f3ef 8305 	mrs	r3, IPSR
 8009746:	603b      	str	r3, [r7, #0]
  return(result);
 8009748:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <osKernelStart+0x1a>
    stat = osErrorISR;
 800974e:	f06f 0305 	mvn.w	r3, #5
 8009752:	607b      	str	r3, [r7, #4]
 8009754:	e010      	b.n	8009778 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009756:	4b0b      	ldr	r3, [pc, #44]	; (8009784 <osKernelStart+0x48>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2b01      	cmp	r3, #1
 800975c:	d109      	bne.n	8009772 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800975e:	f7ff ffbf 	bl	80096e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009762:	4b08      	ldr	r3, [pc, #32]	; (8009784 <osKernelStart+0x48>)
 8009764:	2202      	movs	r2, #2
 8009766:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009768:	f001 ff50 	bl	800b60c <vTaskStartScheduler>
      stat = osOK;
 800976c:	2300      	movs	r3, #0
 800976e:	607b      	str	r3, [r7, #4]
 8009770:	e002      	b.n	8009778 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009772:	f04f 33ff 	mov.w	r3, #4294967295
 8009776:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009778:	687b      	ldr	r3, [r7, #4]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	20000b9c 	.word	0x20000b9c

08009788 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800978e:	f3ef 8305 	mrs	r3, IPSR
 8009792:	603b      	str	r3, [r7, #0]
  return(result);
 8009794:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009796:	2b00      	cmp	r3, #0
 8009798:	d003      	beq.n	80097a2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800979a:	f002 f863 	bl	800b864 <xTaskGetTickCountFromISR>
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	e002      	b.n	80097a8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80097a2:	f002 f84f 	bl	800b844 <xTaskGetTickCount>
 80097a6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80097a8:	687b      	ldr	r3, [r7, #4]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b08e      	sub	sp, #56	; 0x38
 80097b6:	af04      	add	r7, sp, #16
 80097b8:	60f8      	str	r0, [r7, #12]
 80097ba:	60b9      	str	r1, [r7, #8]
 80097bc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097c2:	f3ef 8305 	mrs	r3, IPSR
 80097c6:	617b      	str	r3, [r7, #20]
  return(result);
 80097c8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d17e      	bne.n	80098cc <osThreadNew+0x11a>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d07b      	beq.n	80098cc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80097d4:	2380      	movs	r3, #128	; 0x80
 80097d6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80097d8:	2318      	movs	r3, #24
 80097da:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80097dc:	2300      	movs	r3, #0
 80097de:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80097e0:	f04f 33ff 	mov.w	r3, #4294967295
 80097e4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d045      	beq.n	8009878 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <osThreadNew+0x48>
        name = attr->name;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d002      	beq.n	8009808 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	699b      	ldr	r3, [r3, #24]
 8009806:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d008      	beq.n	8009820 <osThreadNew+0x6e>
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	2b38      	cmp	r3, #56	; 0x38
 8009812:	d805      	bhi.n	8009820 <osThreadNew+0x6e>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <osThreadNew+0x72>
        return (NULL);
 8009820:	2300      	movs	r3, #0
 8009822:	e054      	b.n	80098ce <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	695b      	ldr	r3, [r3, #20]
 8009830:	089b      	lsrs	r3, r3, #2
 8009832:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00e      	beq.n	800985a <osThreadNew+0xa8>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	2bbb      	cmp	r3, #187	; 0xbb
 8009842:	d90a      	bls.n	800985a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009848:	2b00      	cmp	r3, #0
 800984a:	d006      	beq.n	800985a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	695b      	ldr	r3, [r3, #20]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d002      	beq.n	800985a <osThreadNew+0xa8>
        mem = 1;
 8009854:	2301      	movs	r3, #1
 8009856:	61bb      	str	r3, [r7, #24]
 8009858:	e010      	b.n	800987c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10c      	bne.n	800987c <osThreadNew+0xca>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d108      	bne.n	800987c <osThreadNew+0xca>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d104      	bne.n	800987c <osThreadNew+0xca>
          mem = 0;
 8009872:	2300      	movs	r3, #0
 8009874:	61bb      	str	r3, [r7, #24]
 8009876:	e001      	b.n	800987c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d110      	bne.n	80098a4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800988a:	9202      	str	r2, [sp, #8]
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	6a3a      	ldr	r2, [r7, #32]
 8009896:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f001 fc4d 	bl	800b138 <xTaskCreateStatic>
 800989e:	4603      	mov	r3, r0
 80098a0:	613b      	str	r3, [r7, #16]
 80098a2:	e013      	b.n	80098cc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d110      	bne.n	80098cc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	f107 0310 	add.w	r3, r7, #16
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f001 fc98 	bl	800b1f2 <xTaskCreate>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d001      	beq.n	80098cc <osThreadNew+0x11a>
            hTask = NULL;
 80098c8:	2300      	movs	r3, #0
 80098ca:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80098cc:	693b      	ldr	r3, [r7, #16]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3728      	adds	r7, #40	; 0x28
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80098d8:	b580      	push	{r7, lr}
 80098da:	b088      	sub	sp, #32
 80098dc:	af02      	add	r7, sp, #8
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d002      	beq.n	80098f2 <osThreadFlagsSet+0x1a>
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	da03      	bge.n	80098fa <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80098f2:	f06f 0303 	mvn.w	r3, #3
 80098f6:	60fb      	str	r3, [r7, #12]
 80098f8:	e035      	b.n	8009966 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80098fa:	f04f 33ff 	mov.w	r3, #4294967295
 80098fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009900:	f3ef 8305 	mrs	r3, IPSR
 8009904:	613b      	str	r3, [r7, #16]
  return(result);
 8009906:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8009908:	2b00      	cmp	r3, #0
 800990a:	d01f      	beq.n	800994c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800990c:	2300      	movs	r3, #0
 800990e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009910:	f107 0308 	add.w	r3, r7, #8
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	2300      	movs	r3, #0
 8009918:	2201      	movs	r2, #1
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6978      	ldr	r0, [r7, #20]
 800991e:	f002 fd9b 	bl	800c458 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8009922:	f107 030c 	add.w	r3, r7, #12
 8009926:	2200      	movs	r2, #0
 8009928:	9200      	str	r2, [sp, #0]
 800992a:	2200      	movs	r2, #0
 800992c:	2100      	movs	r1, #0
 800992e:	6978      	ldr	r0, [r7, #20]
 8009930:	f002 fd92 	bl	800c458 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d015      	beq.n	8009966 <osThreadFlagsSet+0x8e>
 800993a:	4b0d      	ldr	r3, [pc, #52]	; (8009970 <osThreadFlagsSet+0x98>)
 800993c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009940:	601a      	str	r2, [r3, #0]
 8009942:	f3bf 8f4f 	dsb	sy
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	e00c      	b.n	8009966 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800994c:	2300      	movs	r3, #0
 800994e:	2201      	movs	r2, #1
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	6978      	ldr	r0, [r7, #20]
 8009954:	f002 fcc2 	bl	800c2dc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009958:	f107 030c 	add.w	r3, r7, #12
 800995c:	2200      	movs	r2, #0
 800995e:	2100      	movs	r1, #0
 8009960:	6978      	ldr	r0, [r7, #20]
 8009962:	f002 fcbb 	bl	800c2dc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8009966:	68fb      	ldr	r3, [r7, #12]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3718      	adds	r7, #24
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	e000ed04 	.word	0xe000ed04

08009974 <osThreadFlagsGet>:

  /* Return flags before clearing */
  return (rflags);
}

uint32_t osThreadFlagsGet (void) {
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800997a:	f3ef 8305 	mrs	r3, IPSR
 800997e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009980:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 8009982:	2b00      	cmp	r3, #0
 8009984:	d003      	beq.n	800998e <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 8009986:	f06f 0305 	mvn.w	r3, #5
 800998a:	607b      	str	r3, [r7, #4]
 800998c:	e00e      	b.n	80099ac <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800998e:	f002 faab 	bl	800bee8 <xTaskGetCurrentTaskHandle>
 8009992:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 8009994:	1d3b      	adds	r3, r7, #4
 8009996:	2200      	movs	r2, #0
 8009998:	2100      	movs	r1, #0
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f002 fc9e 	bl	800c2dc <xTaskGenericNotify>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d002      	beq.n	80099ac <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 80099a6:	f04f 33ff 	mov.w	r3, #4294967295
 80099aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 80099ac:	687b      	ldr	r3, [r7, #4]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b08c      	sub	sp, #48	; 0x30
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	60f8      	str	r0, [r7, #12]
 80099be:	60b9      	str	r1, [r7, #8]
 80099c0:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099c2:	f3ef 8305 	mrs	r3, IPSR
 80099c6:	617b      	str	r3, [r7, #20]
  return(result);
 80099c8:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d003      	beq.n	80099d6 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80099ce:	f06f 0305 	mvn.w	r3, #5
 80099d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099d4:	e06b      	b.n	8009aae <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	da03      	bge.n	80099e4 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80099dc:	f06f 0303 	mvn.w	r3, #3
 80099e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099e2:	e064      	b.n	8009aae <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <osThreadFlagsWait+0x3e>
      clear = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80099f2:	e001      	b.n	80099f8 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80099f8:	2300      	movs	r3, #0
 80099fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8009a00:	f001 ff20 	bl	800b844 <xTaskGetTickCount>
 8009a04:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8009a06:	f107 0210 	add.w	r2, r7, #16
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a0e:	2000      	movs	r0, #0
 8009a10:	f002 fc04 	bl	800c21c <xTaskNotifyWait>
 8009a14:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d137      	bne.n	8009a8c <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8009a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	4013      	ands	r3, r2
 8009a22:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00c      	beq.n	8009a50 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3a:	4013      	ands	r3, r2
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d032      	beq.n	8009aa8 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10f      	bne.n	8009a68 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009a48:	f06f 0302 	mvn.w	r3, #2
 8009a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009a4e:	e02e      	b.n	8009aae <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a54:	4013      	ands	r3, r2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d128      	bne.n	8009aac <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d103      	bne.n	8009a68 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009a60:	f06f 0302 	mvn.w	r3, #2
 8009a64:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009a66:	e022      	b.n	8009aae <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8009a68:	f001 feec 	bl	800b844 <xTaskGetTickCount>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d902      	bls.n	8009a82 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8009a80:	e00e      	b.n	8009aa0 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8009a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	627b      	str	r3, [r7, #36]	; 0x24
 8009a8a:	e009      	b.n	8009aa0 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d103      	bne.n	8009a9a <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8009a92:	f06f 0302 	mvn.w	r3, #2
 8009a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a98:	e002      	b.n	8009aa0 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8009a9a:	f06f 0301 	mvn.w	r3, #1
 8009a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1af      	bne.n	8009a06 <osThreadFlagsWait+0x50>
 8009aa6:	e002      	b.n	8009aae <osThreadFlagsWait+0xf8>
            break;
 8009aa8:	bf00      	nop
 8009aaa:	e000      	b.n	8009aae <osThreadFlagsWait+0xf8>
            break;
 8009aac:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8009aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3730      	adds	r7, #48	; 0x30
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ac0:	f3ef 8305 	mrs	r3, IPSR
 8009ac4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ac6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <osDelay+0x1c>
    stat = osErrorISR;
 8009acc:	f06f 0305 	mvn.w	r3, #5
 8009ad0:	60fb      	str	r3, [r7, #12]
 8009ad2:	e007      	b.n	8009ae4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d002      	beq.n	8009ae4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f001 fd60 	bl	800b5a4 <vTaskDelay>
    }
  }

  return (stat);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b086      	sub	sp, #24
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009af6:	f3ef 8305 	mrs	r3, IPSR
 8009afa:	60fb      	str	r3, [r7, #12]
  return(result);
 8009afc:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d003      	beq.n	8009b0a <osDelayUntil+0x1c>
    stat = osErrorISR;
 8009b02:	f06f 0305 	mvn.w	r3, #5
 8009b06:	617b      	str	r3, [r7, #20]
 8009b08:	e019      	b.n	8009b3e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8009b0e:	f001 fe99 	bl	800b844 <xTaskGetTickCount>
 8009b12:	4603      	mov	r3, r0
 8009b14:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d009      	beq.n	8009b38 <osDelayUntil+0x4a>
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	db06      	blt.n	8009b38 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009b2a:	f107 0308 	add.w	r3, r7, #8
 8009b2e:	6939      	ldr	r1, [r7, #16]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f001 fcb9 	bl	800b4a8 <vTaskDelayUntil>
 8009b36:	e002      	b.n	8009b3e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009b38:	f06f 0303 	mvn.w	r3, #3
 8009b3c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009b3e:	697b      	ldr	r3, [r7, #20]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3718      	adds	r7, #24
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f003 f9a1 	bl	800ce98 <pvTimerGetTimerID>
 8009b56:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d005      	beq.n	8009b6a <TimerCallback+0x22>
    callb->func (callb->arg);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	6852      	ldr	r2, [r2, #4]
 8009b66:	4610      	mov	r0, r2
 8009b68:	4798      	blx	r3
  }
}
 8009b6a:	bf00      	nop
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
	...

08009b74 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b08c      	sub	sp, #48	; 0x30
 8009b78:	af02      	add	r7, sp, #8
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	607a      	str	r2, [r7, #4]
 8009b7e:	603b      	str	r3, [r7, #0]
 8009b80:	460b      	mov	r3, r1
 8009b82:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8009b84:	2300      	movs	r3, #0
 8009b86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b88:	f3ef 8305 	mrs	r3, IPSR
 8009b8c:	613b      	str	r3, [r7, #16]
  return(result);
 8009b8e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d163      	bne.n	8009c5c <osTimerNew+0xe8>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d060      	beq.n	8009c5c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8009b9a:	2008      	movs	r0, #8
 8009b9c:	f003 fbec 	bl	800d378 <pvPortMalloc>
 8009ba0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d059      	beq.n	8009c5c <osTimerNew+0xe8>
      callb->func = func;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8009bb4:	7afb      	ldrb	r3, [r7, #11]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d102      	bne.n	8009bc0 <osTimerNew+0x4c>
        reload = pdFALSE;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	61fb      	str	r3, [r7, #28]
 8009bbe:	e001      	b.n	8009bc4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8009bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d01c      	beq.n	8009c0e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <osTimerNew+0x6e>
          name = attr->name;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d006      	beq.n	8009bf8 <osTimerNew+0x84>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	2b2b      	cmp	r3, #43	; 0x2b
 8009bf0:	d902      	bls.n	8009bf8 <osTimerNew+0x84>
          mem = 1;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	61bb      	str	r3, [r7, #24]
 8009bf6:	e00c      	b.n	8009c12 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d108      	bne.n	8009c12 <osTimerNew+0x9e>
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d104      	bne.n	8009c12 <osTimerNew+0x9e>
            mem = 0;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	61bb      	str	r3, [r7, #24]
 8009c0c:	e001      	b.n	8009c12 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d10c      	bne.n	8009c32 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	9301      	str	r3, [sp, #4]
 8009c1e:	4b12      	ldr	r3, [pc, #72]	; (8009c68 <osTimerNew+0xf4>)
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	69fa      	ldr	r2, [r7, #28]
 8009c26:	2101      	movs	r1, #1
 8009c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c2a:	f002 fdb6 	bl	800c79a <xTimerCreateStatic>
 8009c2e:	6238      	str	r0, [r7, #32]
 8009c30:	e00b      	b.n	8009c4a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d108      	bne.n	8009c4a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009c38:	4b0b      	ldr	r3, [pc, #44]	; (8009c68 <osTimerNew+0xf4>)
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	69fa      	ldr	r2, [r7, #28]
 8009c40:	2101      	movs	r1, #1
 8009c42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c44:	f002 fd88 	bl	800c758 <xTimerCreate>
 8009c48:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8009c4a:	6a3b      	ldr	r3, [r7, #32]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d105      	bne.n	8009c5c <osTimerNew+0xe8>
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d002      	beq.n	8009c5c <osTimerNew+0xe8>
        vPortFree (callb);
 8009c56:	6978      	ldr	r0, [r7, #20]
 8009c58:	f003 fc5a 	bl	800d510 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3728      	adds	r7, #40	; 0x28
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	08009b49 	.word	0x08009b49

08009c6c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b088      	sub	sp, #32
 8009c70:	af02      	add	r7, sp, #8
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c7a:	f3ef 8305 	mrs	r3, IPSR
 8009c7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c80:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d003      	beq.n	8009c8e <osTimerStart+0x22>
    stat = osErrorISR;
 8009c86:	f06f 0305 	mvn.w	r3, #5
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	e017      	b.n	8009cbe <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d103      	bne.n	8009c9c <osTimerStart+0x30>
    stat = osErrorParameter;
 8009c94:	f06f 0303 	mvn.w	r3, #3
 8009c98:	617b      	str	r3, [r7, #20]
 8009c9a:	e010      	b.n	8009cbe <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	2104      	movs	r1, #4
 8009ca6:	6938      	ldr	r0, [r7, #16]
 8009ca8:	f002 fdf0 	bl	800c88c <xTimerGenericCommand>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d102      	bne.n	8009cb8 <osTimerStart+0x4c>
      stat = osOK;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	617b      	str	r3, [r7, #20]
 8009cb6:	e002      	b.n	8009cbe <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8009cb8:	f06f 0302 	mvn.w	r3, #2
 8009cbc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009cbe:	697b      	ldr	r3, [r7, #20]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3718      	adds	r7, #24
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b088      	sub	sp, #32
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cd4:	f3ef 8305 	mrs	r3, IPSR
 8009cd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cda:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d174      	bne.n	8009dca <osMutexNew+0x102>
    if (attr != NULL) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d003      	beq.n	8009cee <osMutexNew+0x26>
      type = attr->attr_bits;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	61bb      	str	r3, [r7, #24]
 8009cec:	e001      	b.n	8009cf2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d002      	beq.n	8009d02 <osMutexNew+0x3a>
      rmtx = 1U;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	e001      	b.n	8009d06 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009d02:	2300      	movs	r3, #0
 8009d04:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	f003 0308 	and.w	r3, r3, #8
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d15c      	bne.n	8009dca <osMutexNew+0x102>
      mem = -1;
 8009d10:	f04f 33ff 	mov.w	r3, #4294967295
 8009d14:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d015      	beq.n	8009d48 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d006      	beq.n	8009d32 <osMutexNew+0x6a>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	2b4f      	cmp	r3, #79	; 0x4f
 8009d2a:	d902      	bls.n	8009d32 <osMutexNew+0x6a>
          mem = 1;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	613b      	str	r3, [r7, #16]
 8009d30:	e00c      	b.n	8009d4c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d108      	bne.n	8009d4c <osMutexNew+0x84>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d104      	bne.n	8009d4c <osMutexNew+0x84>
            mem = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	613b      	str	r3, [r7, #16]
 8009d46:	e001      	b.n	8009d4c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d112      	bne.n	8009d78 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d007      	beq.n	8009d68 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	2004      	movs	r0, #4
 8009d60:	f000 fba1 	bl	800a4a6 <xQueueCreateMutexStatic>
 8009d64:	61f8      	str	r0, [r7, #28]
 8009d66:	e016      	b.n	8009d96 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	2001      	movs	r0, #1
 8009d70:	f000 fb99 	bl	800a4a6 <xQueueCreateMutexStatic>
 8009d74:	61f8      	str	r0, [r7, #28]
 8009d76:	e00e      	b.n	8009d96 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10b      	bne.n	8009d96 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d004      	beq.n	8009d8e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009d84:	2004      	movs	r0, #4
 8009d86:	f000 fb76 	bl	800a476 <xQueueCreateMutex>
 8009d8a:	61f8      	str	r0, [r7, #28]
 8009d8c:	e003      	b.n	8009d96 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009d8e:	2001      	movs	r0, #1
 8009d90:	f000 fb71 	bl	800a476 <xQueueCreateMutex>
 8009d94:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00c      	beq.n	8009db6 <osMutexNew+0xee>
        if (attr != NULL) {
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <osMutexNew+0xe2>
          name = attr->name;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	e001      	b.n	8009dae <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009daa:	2300      	movs	r3, #0
 8009dac:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009dae:	68f9      	ldr	r1, [r7, #12]
 8009db0:	69f8      	ldr	r0, [r7, #28]
 8009db2:	f001 f939 	bl	800b028 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d006      	beq.n	8009dca <osMutexNew+0x102>
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d003      	beq.n	8009dca <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	f043 0301 	orr.w	r3, r3, #1
 8009dc8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009dca:	69fb      	ldr	r3, [r7, #28]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3720      	adds	r7, #32
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f023 0301 	bic.w	r3, r3, #1
 8009de4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f003 0301 	and.w	r3, r3, #1
 8009dec:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009dee:	2300      	movs	r3, #0
 8009df0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009df2:	f3ef 8305 	mrs	r3, IPSR
 8009df6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009df8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d003      	beq.n	8009e06 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009dfe:	f06f 0305 	mvn.w	r3, #5
 8009e02:	617b      	str	r3, [r7, #20]
 8009e04:	e02c      	b.n	8009e60 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d103      	bne.n	8009e14 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009e0c:	f06f 0303 	mvn.w	r3, #3
 8009e10:	617b      	str	r3, [r7, #20]
 8009e12:	e025      	b.n	8009e60 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d011      	beq.n	8009e3e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6938      	ldr	r0, [r7, #16]
 8009e1e:	f000 fb91 	bl	800a544 <xQueueTakeMutexRecursive>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d01b      	beq.n	8009e60 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009e2e:	f06f 0301 	mvn.w	r3, #1
 8009e32:	617b      	str	r3, [r7, #20]
 8009e34:	e014      	b.n	8009e60 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009e36:	f06f 0302 	mvn.w	r3, #2
 8009e3a:	617b      	str	r3, [r7, #20]
 8009e3c:	e010      	b.n	8009e60 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009e3e:	6839      	ldr	r1, [r7, #0]
 8009e40:	6938      	ldr	r0, [r7, #16]
 8009e42:	f000 fe99 	bl	800ab78 <xQueueSemaphoreTake>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d009      	beq.n	8009e60 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d003      	beq.n	8009e5a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8009e52:	f06f 0301 	mvn.w	r3, #1
 8009e56:	617b      	str	r3, [r7, #20]
 8009e58:	e002      	b.n	8009e60 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009e5a:	f06f 0302 	mvn.w	r3, #2
 8009e5e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8009e60:	697b      	ldr	r3, [r7, #20]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3718      	adds	r7, #24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b086      	sub	sp, #24
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f023 0301 	bic.w	r3, r3, #1
 8009e78:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f003 0301 	and.w	r3, r3, #1
 8009e80:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e86:	f3ef 8305 	mrs	r3, IPSR
 8009e8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e8c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <osMutexRelease+0x30>
    stat = osErrorISR;
 8009e92:	f06f 0305 	mvn.w	r3, #5
 8009e96:	617b      	str	r3, [r7, #20]
 8009e98:	e01f      	b.n	8009eda <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d103      	bne.n	8009ea8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8009ea0:	f06f 0303 	mvn.w	r3, #3
 8009ea4:	617b      	str	r3, [r7, #20]
 8009ea6:	e018      	b.n	8009eda <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d009      	beq.n	8009ec2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009eae:	6938      	ldr	r0, [r7, #16]
 8009eb0:	f000 fb14 	bl	800a4dc <xQueueGiveMutexRecursive>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d00f      	beq.n	8009eda <osMutexRelease+0x70>
        stat = osErrorResource;
 8009eba:	f06f 0302 	mvn.w	r3, #2
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	e00b      	b.n	8009eda <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	6938      	ldr	r0, [r7, #16]
 8009eca:	f000 fbdb 	bl	800a684 <xQueueGenericSend>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d002      	beq.n	8009eda <osMutexRelease+0x70>
        stat = osErrorResource;
 8009ed4:	f06f 0302 	mvn.w	r3, #2
 8009ed8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009eda:	697b      	ldr	r3, [r7, #20]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3718      	adds	r7, #24
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b08a      	sub	sp, #40	; 0x28
 8009ee8:	af02      	add	r7, sp, #8
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ef4:	f3ef 8305 	mrs	r3, IPSR
 8009ef8:	613b      	str	r3, [r7, #16]
  return(result);
 8009efa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d175      	bne.n	8009fec <osSemaphoreNew+0x108>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d072      	beq.n	8009fec <osSemaphoreNew+0x108>
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d86e      	bhi.n	8009fec <osSemaphoreNew+0x108>
    mem = -1;
 8009f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d015      	beq.n	8009f46 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d006      	beq.n	8009f30 <osSemaphoreNew+0x4c>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	2b4f      	cmp	r3, #79	; 0x4f
 8009f28:	d902      	bls.n	8009f30 <osSemaphoreNew+0x4c>
        mem = 1;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	61bb      	str	r3, [r7, #24]
 8009f2e:	e00c      	b.n	8009f4a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d108      	bne.n	8009f4a <osSemaphoreNew+0x66>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d104      	bne.n	8009f4a <osSemaphoreNew+0x66>
          mem = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	61bb      	str	r3, [r7, #24]
 8009f44:	e001      	b.n	8009f4a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009f46:	2300      	movs	r3, #0
 8009f48:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f50:	d04c      	beq.n	8009fec <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d128      	bne.n	8009faa <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d10a      	bne.n	8009f74 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	2203      	movs	r2, #3
 8009f64:	9200      	str	r2, [sp, #0]
 8009f66:	2200      	movs	r2, #0
 8009f68:	2100      	movs	r1, #0
 8009f6a:	2001      	movs	r0, #1
 8009f6c:	f000 f994 	bl	800a298 <xQueueGenericCreateStatic>
 8009f70:	61f8      	str	r0, [r7, #28]
 8009f72:	e005      	b.n	8009f80 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009f74:	2203      	movs	r2, #3
 8009f76:	2100      	movs	r1, #0
 8009f78:	2001      	movs	r0, #1
 8009f7a:	f000 fa05 	bl	800a388 <xQueueGenericCreate>
 8009f7e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d022      	beq.n	8009fcc <osSemaphoreNew+0xe8>
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d01f      	beq.n	8009fcc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	2200      	movs	r2, #0
 8009f90:	2100      	movs	r1, #0
 8009f92:	69f8      	ldr	r0, [r7, #28]
 8009f94:	f000 fb76 	bl	800a684 <xQueueGenericSend>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d016      	beq.n	8009fcc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009f9e:	69f8      	ldr	r0, [r7, #28]
 8009fa0:	f000 fef6 	bl	800ad90 <vQueueDelete>
            hSemaphore = NULL;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	61fb      	str	r3, [r7, #28]
 8009fa8:	e010      	b.n	8009fcc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d108      	bne.n	8009fc2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	68b9      	ldr	r1, [r7, #8]
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 faf9 	bl	800a5b0 <xQueueCreateCountingSemaphoreStatic>
 8009fbe:	61f8      	str	r0, [r7, #28]
 8009fc0:	e004      	b.n	8009fcc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009fc2:	68b9      	ldr	r1, [r7, #8]
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f000 fb2a 	bl	800a61e <xQueueCreateCountingSemaphore>
 8009fca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00c      	beq.n	8009fec <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	617b      	str	r3, [r7, #20]
 8009fde:	e001      	b.n	8009fe4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009fe4:	6979      	ldr	r1, [r7, #20]
 8009fe6:	69f8      	ldr	r0, [r7, #28]
 8009fe8:	f001 f81e 	bl	800b028 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009fec:	69fb      	ldr	r3, [r7, #28]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3720      	adds	r7, #32
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
	...

08009ff8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	4a07      	ldr	r2, [pc, #28]	; (800a024 <vApplicationGetIdleTaskMemory+0x2c>)
 800a008:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	4a06      	ldr	r2, [pc, #24]	; (800a028 <vApplicationGetIdleTaskMemory+0x30>)
 800a00e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2280      	movs	r2, #128	; 0x80
 800a014:	601a      	str	r2, [r3, #0]
}
 800a016:	bf00      	nop
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	20000ba0 	.word	0x20000ba0
 800a028:	20000c5c 	.word	0x20000c5c

0800a02c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	4a07      	ldr	r2, [pc, #28]	; (800a058 <vApplicationGetTimerTaskMemory+0x2c>)
 800a03c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	4a06      	ldr	r2, [pc, #24]	; (800a05c <vApplicationGetTimerTaskMemory+0x30>)
 800a042:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a04a:	601a      	str	r2, [r3, #0]
}
 800a04c:	bf00      	nop
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	20000e5c 	.word	0x20000e5c
 800a05c:	20000f18 	.word	0x20000f18

0800a060 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f103 0208 	add.w	r2, r3, #8
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f04f 32ff 	mov.w	r2, #4294967295
 800a078:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f103 0208 	add.w	r2, r3, #8
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f103 0208 	add.w	r2, r3, #8
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a094:	bf00      	nop
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a0ae:	bf00      	nop
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b085      	sub	sp, #20
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	689a      	ldr	r2, [r3, #8]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	1c5a      	adds	r2, r3, #1
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	601a      	str	r2, [r3, #0]
}
 800a0f6:	bf00      	nop
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a102:	b480      	push	{r7}
 800a104:	b085      	sub	sp, #20
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a118:	d103      	bne.n	800a122 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	60fb      	str	r3, [r7, #12]
 800a120:	e00c      	b.n	800a13c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	3308      	adds	r3, #8
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	e002      	b.n	800a130 <vListInsert+0x2e>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	60fb      	str	r3, [r7, #12]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d2f6      	bcs.n	800a12a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	1c5a      	adds	r2, r3, #1
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	601a      	str	r2, [r3, #0]
}
 800a168:	bf00      	nop
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	6892      	ldr	r2, [r2, #8]
 800a18a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	6852      	ldr	r2, [r2, #4]
 800a194:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d103      	bne.n	800a1a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	689a      	ldr	r2, [r3, #8]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	1e5a      	subs	r2, r3, #1
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3714      	adds	r7, #20
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10a      	bne.n	800a1f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e0:	f383 8811 	msr	BASEPRI, r3
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a1ee:	bf00      	nop
 800a1f0:	e7fe      	b.n	800a1f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a1f2:	f002 ff9f 	bl	800d134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1fe:	68f9      	ldr	r1, [r7, #12]
 800a200:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a202:	fb01 f303 	mul.w	r3, r1, r3
 800a206:	441a      	add	r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a222:	3b01      	subs	r3, #1
 800a224:	68f9      	ldr	r1, [r7, #12]
 800a226:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a228:	fb01 f303 	mul.w	r3, r1, r3
 800a22c:	441a      	add	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	22ff      	movs	r2, #255	; 0xff
 800a236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	22ff      	movs	r2, #255	; 0xff
 800a23e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d114      	bne.n	800a272 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d01a      	beq.n	800a286 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	3310      	adds	r3, #16
 800a254:	4618      	mov	r0, r3
 800a256:	f001 fc85 	bl	800bb64 <xTaskRemoveFromEventList>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d012      	beq.n	800a286 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a260:	4b0c      	ldr	r3, [pc, #48]	; (800a294 <xQueueGenericReset+0xcc>)
 800a262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a266:	601a      	str	r2, [r3, #0]
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	e009      	b.n	800a286 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	3310      	adds	r3, #16
 800a276:	4618      	mov	r0, r3
 800a278:	f7ff fef2 	bl	800a060 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	3324      	adds	r3, #36	; 0x24
 800a280:	4618      	mov	r0, r3
 800a282:	f7ff feed 	bl	800a060 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a286:	f002 ff85 	bl	800d194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a28a:	2301      	movs	r3, #1
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	e000ed04 	.word	0xe000ed04

0800a298 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08e      	sub	sp, #56	; 0x38
 800a29c:	af02      	add	r7, sp, #8
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
 800a2a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d10a      	bne.n	800a2c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2be:	bf00      	nop
 800a2c0:	e7fe      	b.n	800a2c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10a      	bne.n	800a2de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2cc:	f383 8811 	msr	BASEPRI, r3
 800a2d0:	f3bf 8f6f 	isb	sy
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2da:	bf00      	nop
 800a2dc:	e7fe      	b.n	800a2dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <xQueueGenericCreateStatic+0x52>
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <xQueueGenericCreateStatic+0x56>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e000      	b.n	800a2f0 <xQueueGenericCreateStatic+0x58>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10a      	bne.n	800a30a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	f383 8811 	msr	BASEPRI, r3
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	623b      	str	r3, [r7, #32]
}
 800a306:	bf00      	nop
 800a308:	e7fe      	b.n	800a308 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d102      	bne.n	800a316 <xQueueGenericCreateStatic+0x7e>
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d101      	bne.n	800a31a <xQueueGenericCreateStatic+0x82>
 800a316:	2301      	movs	r3, #1
 800a318:	e000      	b.n	800a31c <xQueueGenericCreateStatic+0x84>
 800a31a:	2300      	movs	r3, #0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10a      	bne.n	800a336 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	61fb      	str	r3, [r7, #28]
}
 800a332:	bf00      	nop
 800a334:	e7fe      	b.n	800a334 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a336:	2350      	movs	r3, #80	; 0x50
 800a338:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	2b50      	cmp	r3, #80	; 0x50
 800a33e:	d00a      	beq.n	800a356 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a344:	f383 8811 	msr	BASEPRI, r3
 800a348:	f3bf 8f6f 	isb	sy
 800a34c:	f3bf 8f4f 	dsb	sy
 800a350:	61bb      	str	r3, [r7, #24]
}
 800a352:	bf00      	nop
 800a354:	e7fe      	b.n	800a354 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a356:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00d      	beq.n	800a37e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a364:	2201      	movs	r2, #1
 800a366:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a36a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	4613      	mov	r3, r2
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	68b9      	ldr	r1, [r7, #8]
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f000 f83f 	bl	800a3fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a380:	4618      	mov	r0, r3
 800a382:	3730      	adds	r7, #48	; 0x30
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b08a      	sub	sp, #40	; 0x28
 800a38c:	af02      	add	r7, sp, #8
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	4613      	mov	r3, r2
 800a394:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10a      	bne.n	800a3b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	613b      	str	r3, [r7, #16]
}
 800a3ae:	bf00      	nop
 800a3b0:	e7fe      	b.n	800a3b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	fb02 f303 	mul.w	r3, r2, r3
 800a3ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	3350      	adds	r3, #80	; 0x50
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f002 ffd9 	bl	800d378 <pvPortMalloc>
 800a3c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d011      	beq.n	800a3f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	3350      	adds	r3, #80	; 0x50
 800a3d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3e0:	79fa      	ldrb	r2, [r7, #7]
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	68b9      	ldr	r1, [r7, #8]
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f000 f805 	bl	800a3fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a3f2:	69bb      	ldr	r3, [r7, #24]
	}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3720      	adds	r7, #32
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
 800a408:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d103      	bne.n	800a418 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	69ba      	ldr	r2, [r7, #24]
 800a414:	601a      	str	r2, [r3, #0]
 800a416:	e002      	b.n	800a41e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a42a:	2101      	movs	r1, #1
 800a42c:	69b8      	ldr	r0, [r7, #24]
 800a42e:	f7ff fecb 	bl	800a1c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	78fa      	ldrb	r2, [r7, #3]
 800a436:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a43a:	bf00      	nop
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a442:	b580      	push	{r7, lr}
 800a444:	b082      	sub	sp, #8
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00e      	beq.n	800a46e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a462:	2300      	movs	r3, #0
 800a464:	2200      	movs	r2, #0
 800a466:	2100      	movs	r1, #0
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f90b 	bl	800a684 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a46e:	bf00      	nop
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a476:	b580      	push	{r7, lr}
 800a478:	b086      	sub	sp, #24
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	4603      	mov	r3, r0
 800a47e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a480:	2301      	movs	r3, #1
 800a482:	617b      	str	r3, [r7, #20]
 800a484:	2300      	movs	r3, #0
 800a486:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a488:	79fb      	ldrb	r3, [r7, #7]
 800a48a:	461a      	mov	r2, r3
 800a48c:	6939      	ldr	r1, [r7, #16]
 800a48e:	6978      	ldr	r0, [r7, #20]
 800a490:	f7ff ff7a 	bl	800a388 <xQueueGenericCreate>
 800a494:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f7ff ffd3 	bl	800a442 <prvInitialiseMutex>

		return xNewQueue;
 800a49c:	68fb      	ldr	r3, [r7, #12]
	}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b088      	sub	sp, #32
 800a4aa:	af02      	add	r7, sp, #8
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	6039      	str	r1, [r7, #0]
 800a4b0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	617b      	str	r3, [r7, #20]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a4ba:	79fb      	ldrb	r3, [r7, #7]
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	6939      	ldr	r1, [r7, #16]
 800a4c4:	6978      	ldr	r0, [r7, #20]
 800a4c6:	f7ff fee7 	bl	800a298 <xQueueGenericCreateStatic>
 800a4ca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f7ff ffb8 	bl	800a442 <prvInitialiseMutex>

		return xNewQueue;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
	}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3718      	adds	r7, #24
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a4dc:	b590      	push	{r4, r7, lr}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10a      	bne.n	800a504 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800a4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	60fb      	str	r3, [r7, #12]
}
 800a500:	bf00      	nop
 800a502:	e7fe      	b.n	800a502 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	689c      	ldr	r4, [r3, #8]
 800a508:	f001 fcee 	bl	800bee8 <xTaskGetCurrentTaskHandle>
 800a50c:	4603      	mov	r3, r0
 800a50e:	429c      	cmp	r4, r3
 800a510:	d111      	bne.n	800a536 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	1e5a      	subs	r2, r3, #1
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d105      	bne.n	800a530 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a524:	2300      	movs	r3, #0
 800a526:	2200      	movs	r2, #0
 800a528:	2100      	movs	r1, #0
 800a52a:	6938      	ldr	r0, [r7, #16]
 800a52c:	f000 f8aa 	bl	800a684 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a530:	2301      	movs	r3, #1
 800a532:	617b      	str	r3, [r7, #20]
 800a534:	e001      	b.n	800a53a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a536:	2300      	movs	r3, #0
 800a538:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a53a:	697b      	ldr	r3, [r7, #20]
	}
 800a53c:	4618      	mov	r0, r3
 800a53e:	371c      	adds	r7, #28
 800a540:	46bd      	mov	sp, r7
 800a542:	bd90      	pop	{r4, r7, pc}

0800a544 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a544:	b590      	push	{r4, r7, lr}
 800a546:	b087      	sub	sp, #28
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d10a      	bne.n	800a56e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800a558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	60fb      	str	r3, [r7, #12]
}
 800a56a:	bf00      	nop
 800a56c:	e7fe      	b.n	800a56c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	689c      	ldr	r4, [r3, #8]
 800a572:	f001 fcb9 	bl	800bee8 <xTaskGetCurrentTaskHandle>
 800a576:	4603      	mov	r3, r0
 800a578:	429c      	cmp	r4, r3
 800a57a:	d107      	bne.n	800a58c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	1c5a      	adds	r2, r3, #1
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a586:	2301      	movs	r3, #1
 800a588:	617b      	str	r3, [r7, #20]
 800a58a:	e00c      	b.n	800a5a6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	6938      	ldr	r0, [r7, #16]
 800a590:	f000 faf2 	bl	800ab78 <xQueueSemaphoreTake>
 800a594:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d004      	beq.n	800a5a6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	1c5a      	adds	r2, r3, #1
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a5a6:	697b      	ldr	r3, [r7, #20]
	}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	371c      	adds	r7, #28
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd90      	pop	{r4, r7, pc}

0800a5b0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b08a      	sub	sp, #40	; 0x28
 800a5b4:	af02      	add	r7, sp, #8
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10a      	bne.n	800a5d8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	61bb      	str	r3, [r7, #24]
}
 800a5d4:	bf00      	nop
 800a5d6:	e7fe      	b.n	800a5d6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d90a      	bls.n	800a5f6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	617b      	str	r3, [r7, #20]
}
 800a5f2:	bf00      	nop
 800a5f4:	e7fe      	b.n	800a5f4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	2100      	movs	r1, #0
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f7ff fe49 	bl	800a298 <xQueueGenericCreateStatic>
 800a606:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d002      	beq.n	800a614 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a614:	69fb      	ldr	r3, [r7, #28]
	}
 800a616:	4618      	mov	r0, r3
 800a618:	3720      	adds	r7, #32
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b086      	sub	sp, #24
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10a      	bne.n	800a644 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	613b      	str	r3, [r7, #16]
}
 800a640:	bf00      	nop
 800a642:	e7fe      	b.n	800a642 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a644:	683a      	ldr	r2, [r7, #0]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d90a      	bls.n	800a662 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	60fb      	str	r3, [r7, #12]
}
 800a65e:	bf00      	nop
 800a660:	e7fe      	b.n	800a660 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a662:	2202      	movs	r2, #2
 800a664:	2100      	movs	r1, #0
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7ff fe8e 	bl	800a388 <xQueueGenericCreate>
 800a66c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d002      	beq.n	800a67a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	683a      	ldr	r2, [r7, #0]
 800a678:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a67a:	697b      	ldr	r3, [r7, #20]
	}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3718      	adds	r7, #24
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b08e      	sub	sp, #56	; 0x38
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
 800a690:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a692:	2300      	movs	r3, #0
 800a694:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d10a      	bne.n	800a6b6 <xQueueGenericSend+0x32>
	__asm volatile
 800a6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a4:	f383 8811 	msr	BASEPRI, r3
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6b2:	bf00      	nop
 800a6b4:	e7fe      	b.n	800a6b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d103      	bne.n	800a6c4 <xQueueGenericSend+0x40>
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <xQueueGenericSend+0x44>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e000      	b.n	800a6ca <xQueueGenericSend+0x46>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10a      	bne.n	800a6e4 <xQueueGenericSend+0x60>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6e0:	bf00      	nop
 800a6e2:	e7fe      	b.n	800a6e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d103      	bne.n	800a6f2 <xQueueGenericSend+0x6e>
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d101      	bne.n	800a6f6 <xQueueGenericSend+0x72>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e000      	b.n	800a6f8 <xQueueGenericSend+0x74>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d10a      	bne.n	800a712 <xQueueGenericSend+0x8e>
	__asm volatile
 800a6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a700:	f383 8811 	msr	BASEPRI, r3
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	623b      	str	r3, [r7, #32]
}
 800a70e:	bf00      	nop
 800a710:	e7fe      	b.n	800a710 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a712:	f001 fbf9 	bl	800bf08 <xTaskGetSchedulerState>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d102      	bne.n	800a722 <xQueueGenericSend+0x9e>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d101      	bne.n	800a726 <xQueueGenericSend+0xa2>
 800a722:	2301      	movs	r3, #1
 800a724:	e000      	b.n	800a728 <xQueueGenericSend+0xa4>
 800a726:	2300      	movs	r3, #0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d10a      	bne.n	800a742 <xQueueGenericSend+0xbe>
	__asm volatile
 800a72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a730:	f383 8811 	msr	BASEPRI, r3
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	61fb      	str	r3, [r7, #28]
}
 800a73e:	bf00      	nop
 800a740:	e7fe      	b.n	800a740 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a742:	f002 fcf7 	bl	800d134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a74e:	429a      	cmp	r2, r3
 800a750:	d302      	bcc.n	800a758 <xQueueGenericSend+0xd4>
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	2b02      	cmp	r3, #2
 800a756:	d129      	bne.n	800a7ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a758:	683a      	ldr	r2, [r7, #0]
 800a75a:	68b9      	ldr	r1, [r7, #8]
 800a75c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a75e:	f000 fb52 	bl	800ae06 <prvCopyDataToQueue>
 800a762:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d010      	beq.n	800a78e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76e:	3324      	adds	r3, #36	; 0x24
 800a770:	4618      	mov	r0, r3
 800a772:	f001 f9f7 	bl	800bb64 <xTaskRemoveFromEventList>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d013      	beq.n	800a7a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a77c:	4b3f      	ldr	r3, [pc, #252]	; (800a87c <xQueueGenericSend+0x1f8>)
 800a77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	e00a      	b.n	800a7a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a790:	2b00      	cmp	r3, #0
 800a792:	d007      	beq.n	800a7a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a794:	4b39      	ldr	r3, [pc, #228]	; (800a87c <xQueueGenericSend+0x1f8>)
 800a796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a79a:	601a      	str	r2, [r3, #0]
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a7a4:	f002 fcf6 	bl	800d194 <vPortExitCritical>
				return pdPASS;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e063      	b.n	800a874 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d103      	bne.n	800a7ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7b2:	f002 fcef 	bl	800d194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	e05c      	b.n	800a874 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d106      	bne.n	800a7ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7c0:	f107 0314 	add.w	r3, r7, #20
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f001 fa31 	bl	800bc2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7ce:	f002 fce1 	bl	800d194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7d2:	f000 ff8b 	bl	800b6ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7d6:	f002 fcad 	bl	800d134 <vPortEnterCritical>
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7e0:	b25b      	sxtb	r3, r3
 800a7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e6:	d103      	bne.n	800a7f0 <xQueueGenericSend+0x16c>
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7f6:	b25b      	sxtb	r3, r3
 800a7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fc:	d103      	bne.n	800a806 <xQueueGenericSend+0x182>
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	2200      	movs	r2, #0
 800a802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a806:	f002 fcc5 	bl	800d194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a80a:	1d3a      	adds	r2, r7, #4
 800a80c:	f107 0314 	add.w	r3, r7, #20
 800a810:	4611      	mov	r1, r2
 800a812:	4618      	mov	r0, r3
 800a814:	f001 fa20 	bl	800bc58 <xTaskCheckForTimeOut>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d124      	bne.n	800a868 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a81e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a820:	f000 fbe9 	bl	800aff6 <prvIsQueueFull>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d018      	beq.n	800a85c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82c:	3310      	adds	r3, #16
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	4611      	mov	r1, r2
 800a832:	4618      	mov	r0, r3
 800a834:	f001 f946 	bl	800bac4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a83a:	f000 fb74 	bl	800af26 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a83e:	f000 ff63 	bl	800b708 <xTaskResumeAll>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	f47f af7c 	bne.w	800a742 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a84a:	4b0c      	ldr	r3, [pc, #48]	; (800a87c <xQueueGenericSend+0x1f8>)
 800a84c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a850:	601a      	str	r2, [r3, #0]
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	e772      	b.n	800a742 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a85c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a85e:	f000 fb62 	bl	800af26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a862:	f000 ff51 	bl	800b708 <xTaskResumeAll>
 800a866:	e76c      	b.n	800a742 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a86a:	f000 fb5c 	bl	800af26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a86e:	f000 ff4b 	bl	800b708 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a872:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a874:	4618      	mov	r0, r3
 800a876:	3738      	adds	r7, #56	; 0x38
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	e000ed04 	.word	0xe000ed04

0800a880 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b090      	sub	sp, #64	; 0x40
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
 800a88c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10a      	bne.n	800a8ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8aa:	bf00      	nop
 800a8ac:	e7fe      	b.n	800a8ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d103      	bne.n	800a8bc <xQueueGenericSendFromISR+0x3c>
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <xQueueGenericSendFromISR+0x40>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e000      	b.n	800a8c2 <xQueueGenericSendFromISR+0x42>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10a      	bne.n	800a8dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8d8:	bf00      	nop
 800a8da:	e7fe      	b.n	800a8da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d103      	bne.n	800a8ea <xQueueGenericSendFromISR+0x6a>
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d101      	bne.n	800a8ee <xQueueGenericSendFromISR+0x6e>
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e000      	b.n	800a8f0 <xQueueGenericSendFromISR+0x70>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10a      	bne.n	800a90a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	623b      	str	r3, [r7, #32]
}
 800a906:	bf00      	nop
 800a908:	e7fe      	b.n	800a908 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a90a:	f002 fcf5 	bl	800d2f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a90e:	f3ef 8211 	mrs	r2, BASEPRI
 800a912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	61fa      	str	r2, [r7, #28]
 800a924:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a926:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a928:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a932:	429a      	cmp	r2, r3
 800a934:	d302      	bcc.n	800a93c <xQueueGenericSendFromISR+0xbc>
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d12f      	bne.n	800a99c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	68b9      	ldr	r1, [r7, #8]
 800a950:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a952:	f000 fa58 	bl	800ae06 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a956:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95e:	d112      	bne.n	800a986 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a964:	2b00      	cmp	r3, #0
 800a966:	d016      	beq.n	800a996 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96a:	3324      	adds	r3, #36	; 0x24
 800a96c:	4618      	mov	r0, r3
 800a96e:	f001 f8f9 	bl	800bb64 <xTaskRemoveFromEventList>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00e      	beq.n	800a996 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00b      	beq.n	800a996 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2201      	movs	r2, #1
 800a982:	601a      	str	r2, [r3, #0]
 800a984:	e007      	b.n	800a996 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a986:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a98a:	3301      	adds	r3, #1
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	b25a      	sxtb	r2, r3
 800a990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a996:	2301      	movs	r3, #1
 800a998:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a99a:	e001      	b.n	800a9a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a99c:	2300      	movs	r3, #0
 800a99e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a9aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3740      	adds	r7, #64	; 0x40
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b08c      	sub	sp, #48	; 0x30
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10a      	bne.n	800a9e8 <xQueueReceive+0x30>
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	623b      	str	r3, [r7, #32]
}
 800a9e4:	bf00      	nop
 800a9e6:	e7fe      	b.n	800a9e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d103      	bne.n	800a9f6 <xQueueReceive+0x3e>
 800a9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d101      	bne.n	800a9fa <xQueueReceive+0x42>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e000      	b.n	800a9fc <xQueueReceive+0x44>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10a      	bne.n	800aa16 <xQueueReceive+0x5e>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	61fb      	str	r3, [r7, #28]
}
 800aa12:	bf00      	nop
 800aa14:	e7fe      	b.n	800aa14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa16:	f001 fa77 	bl	800bf08 <xTaskGetSchedulerState>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d102      	bne.n	800aa26 <xQueueReceive+0x6e>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <xQueueReceive+0x72>
 800aa26:	2301      	movs	r3, #1
 800aa28:	e000      	b.n	800aa2c <xQueueReceive+0x74>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10a      	bne.n	800aa46 <xQueueReceive+0x8e>
	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	61bb      	str	r3, [r7, #24]
}
 800aa42:	bf00      	nop
 800aa44:	e7fe      	b.n	800aa44 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa46:	f002 fb75 	bl	800d134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d01f      	beq.n	800aa96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa56:	68b9      	ldr	r1, [r7, #8]
 800aa58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa5a:	f000 fa3e 	bl	800aeda <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa60:	1e5a      	subs	r2, r3, #1
 800aa62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa68:	691b      	ldr	r3, [r3, #16]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00f      	beq.n	800aa8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa70:	3310      	adds	r3, #16
 800aa72:	4618      	mov	r0, r3
 800aa74:	f001 f876 	bl	800bb64 <xTaskRemoveFromEventList>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d007      	beq.n	800aa8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa7e:	4b3d      	ldr	r3, [pc, #244]	; (800ab74 <xQueueReceive+0x1bc>)
 800aa80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa84:	601a      	str	r2, [r3, #0]
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa8e:	f002 fb81 	bl	800d194 <vPortExitCritical>
				return pdPASS;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e069      	b.n	800ab6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d103      	bne.n	800aaa4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa9c:	f002 fb7a 	bl	800d194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	e062      	b.n	800ab6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aaa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d106      	bne.n	800aab8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aaaa:	f107 0310 	add.w	r3, r7, #16
 800aaae:	4618      	mov	r0, r3
 800aab0:	f001 f8bc 	bl	800bc2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aab4:	2301      	movs	r3, #1
 800aab6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aab8:	f002 fb6c 	bl	800d194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aabc:	f000 fe16 	bl	800b6ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aac0:	f002 fb38 	bl	800d134 <vPortEnterCritical>
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaca:	b25b      	sxtb	r3, r3
 800aacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad0:	d103      	bne.n	800aada <xQueueReceive+0x122>
 800aad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad4:	2200      	movs	r2, #0
 800aad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aadc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aae0:	b25b      	sxtb	r3, r3
 800aae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae6:	d103      	bne.n	800aaf0 <xQueueReceive+0x138>
 800aae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaf0:	f002 fb50 	bl	800d194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aaf4:	1d3a      	adds	r2, r7, #4
 800aaf6:	f107 0310 	add.w	r3, r7, #16
 800aafa:	4611      	mov	r1, r2
 800aafc:	4618      	mov	r0, r3
 800aafe:	f001 f8ab 	bl	800bc58 <xTaskCheckForTimeOut>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d123      	bne.n	800ab50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab0a:	f000 fa5e 	bl	800afca <prvIsQueueEmpty>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d017      	beq.n	800ab44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab16:	3324      	adds	r3, #36	; 0x24
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	4611      	mov	r1, r2
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f000 ffd1 	bl	800bac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab24:	f000 f9ff 	bl	800af26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab28:	f000 fdee 	bl	800b708 <xTaskResumeAll>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d189      	bne.n	800aa46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ab32:	4b10      	ldr	r3, [pc, #64]	; (800ab74 <xQueueReceive+0x1bc>)
 800ab34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab38:	601a      	str	r2, [r3, #0]
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	e780      	b.n	800aa46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab46:	f000 f9ee 	bl	800af26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab4a:	f000 fddd 	bl	800b708 <xTaskResumeAll>
 800ab4e:	e77a      	b.n	800aa46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab52:	f000 f9e8 	bl	800af26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab56:	f000 fdd7 	bl	800b708 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab5c:	f000 fa35 	bl	800afca <prvIsQueueEmpty>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f43f af6f 	beq.w	800aa46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3730      	adds	r7, #48	; 0x30
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	e000ed04 	.word	0xe000ed04

0800ab78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b08e      	sub	sp, #56	; 0x38
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab82:	2300      	movs	r3, #0
 800ab84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10a      	bne.n	800abaa <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ab94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab98:	f383 8811 	msr	BASEPRI, r3
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	623b      	str	r3, [r7, #32]
}
 800aba6:	bf00      	nop
 800aba8:	e7fe      	b.n	800aba8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00a      	beq.n	800abc8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb6:	f383 8811 	msr	BASEPRI, r3
 800abba:	f3bf 8f6f 	isb	sy
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	61fb      	str	r3, [r7, #28]
}
 800abc4:	bf00      	nop
 800abc6:	e7fe      	b.n	800abc6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abc8:	f001 f99e 	bl	800bf08 <xTaskGetSchedulerState>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d102      	bne.n	800abd8 <xQueueSemaphoreTake+0x60>
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <xQueueSemaphoreTake+0x64>
 800abd8:	2301      	movs	r3, #1
 800abda:	e000      	b.n	800abde <xQueueSemaphoreTake+0x66>
 800abdc:	2300      	movs	r3, #0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d10a      	bne.n	800abf8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800abe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	61bb      	str	r3, [r7, #24]
}
 800abf4:	bf00      	nop
 800abf6:	e7fe      	b.n	800abf6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abf8:	f002 fa9c 	bl	800d134 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800abfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac00:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ac02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d024      	beq.n	800ac52 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ac08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0a:	1e5a      	subs	r2, r3, #1
 800ac0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d104      	bne.n	800ac22 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ac18:	f001 faec 	bl	800c1f4 <pvTaskIncrementMutexHeldCount>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac20:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00f      	beq.n	800ac4a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2c:	3310      	adds	r3, #16
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 ff98 	bl	800bb64 <xTaskRemoveFromEventList>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d007      	beq.n	800ac4a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac3a:	4b54      	ldr	r3, [pc, #336]	; (800ad8c <xQueueSemaphoreTake+0x214>)
 800ac3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac40:	601a      	str	r2, [r3, #0]
 800ac42:	f3bf 8f4f 	dsb	sy
 800ac46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac4a:	f002 faa3 	bl	800d194 <vPortExitCritical>
				return pdPASS;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e097      	b.n	800ad82 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d111      	bne.n	800ac7c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ac58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00a      	beq.n	800ac74 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	617b      	str	r3, [r7, #20]
}
 800ac70:	bf00      	nop
 800ac72:	e7fe      	b.n	800ac72 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ac74:	f002 fa8e 	bl	800d194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	e082      	b.n	800ad82 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d106      	bne.n	800ac90 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac82:	f107 030c 	add.w	r3, r7, #12
 800ac86:	4618      	mov	r0, r3
 800ac88:	f000 ffd0 	bl	800bc2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac90:	f002 fa80 	bl	800d194 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac94:	f000 fd2a 	bl	800b6ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac98:	f002 fa4c 	bl	800d134 <vPortEnterCritical>
 800ac9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aca2:	b25b      	sxtb	r3, r3
 800aca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca8:	d103      	bne.n	800acb2 <xQueueSemaphoreTake+0x13a>
 800acaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acac:	2200      	movs	r2, #0
 800acae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acb8:	b25b      	sxtb	r3, r3
 800acba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acbe:	d103      	bne.n	800acc8 <xQueueSemaphoreTake+0x150>
 800acc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc2:	2200      	movs	r2, #0
 800acc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acc8:	f002 fa64 	bl	800d194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800accc:	463a      	mov	r2, r7
 800acce:	f107 030c 	add.w	r3, r7, #12
 800acd2:	4611      	mov	r1, r2
 800acd4:	4618      	mov	r0, r3
 800acd6:	f000 ffbf 	bl	800bc58 <xTaskCheckForTimeOut>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d132      	bne.n	800ad46 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ace0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ace2:	f000 f972 	bl	800afca <prvIsQueueEmpty>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d026      	beq.n	800ad3a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d109      	bne.n	800ad08 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800acf4:	f002 fa1e 	bl	800d134 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800acf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f001 f921 	bl	800bf44 <xTaskPriorityInherit>
 800ad02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ad04:	f002 fa46 	bl	800d194 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0a:	3324      	adds	r3, #36	; 0x24
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	4611      	mov	r1, r2
 800ad10:	4618      	mov	r0, r3
 800ad12:	f000 fed7 	bl	800bac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad18:	f000 f905 	bl	800af26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad1c:	f000 fcf4 	bl	800b708 <xTaskResumeAll>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f47f af68 	bne.w	800abf8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ad28:	4b18      	ldr	r3, [pc, #96]	; (800ad8c <xQueueSemaphoreTake+0x214>)
 800ad2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad2e:	601a      	str	r2, [r3, #0]
 800ad30:	f3bf 8f4f 	dsb	sy
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	e75e      	b.n	800abf8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ad3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad3c:	f000 f8f3 	bl	800af26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad40:	f000 fce2 	bl	800b708 <xTaskResumeAll>
 800ad44:	e758      	b.n	800abf8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ad46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad48:	f000 f8ed 	bl	800af26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad4c:	f000 fcdc 	bl	800b708 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad52:	f000 f93a 	bl	800afca <prvIsQueueEmpty>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f43f af4d 	beq.w	800abf8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ad5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00d      	beq.n	800ad80 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ad64:	f002 f9e6 	bl	800d134 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ad68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad6a:	f000 f834 	bl	800add6 <prvGetDisinheritPriorityAfterTimeout>
 800ad6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ad70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad76:	4618      	mov	r0, r3
 800ad78:	f001 f9ba 	bl	800c0f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ad7c:	f002 fa0a 	bl	800d194 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3738      	adds	r7, #56	; 0x38
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	e000ed04 	.word	0xe000ed04

0800ad90 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d10a      	bne.n	800adb8 <vQueueDelete+0x28>
	__asm volatile
 800ada2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada6:	f383 8811 	msr	BASEPRI, r3
 800adaa:	f3bf 8f6f 	isb	sy
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	60bb      	str	r3, [r7, #8]
}
 800adb4:	bf00      	nop
 800adb6:	e7fe      	b.n	800adb6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f000 f95f 	bl	800b07c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d102      	bne.n	800adce <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f002 fba1 	bl	800d510 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800adce:	bf00      	nop
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800add6:	b480      	push	{r7}
 800add8:	b085      	sub	sp, #20
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d006      	beq.n	800adf4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800adf0:	60fb      	str	r3, [r7, #12]
 800adf2:	e001      	b.n	800adf8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800adf4:	2300      	movs	r3, #0
 800adf6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800adf8:	68fb      	ldr	r3, [r7, #12]
	}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3714      	adds	r7, #20
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b086      	sub	sp, #24
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	60f8      	str	r0, [r7, #12]
 800ae0e:	60b9      	str	r1, [r7, #8]
 800ae10:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae12:	2300      	movs	r3, #0
 800ae14:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10d      	bne.n	800ae40 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d14d      	bne.n	800aec8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f001 f8ef 	bl	800c014 <xTaskPriorityDisinherit>
 800ae36:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	609a      	str	r2, [r3, #8]
 800ae3e:	e043      	b.n	800aec8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d119      	bne.n	800ae7a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6858      	ldr	r0, [r3, #4]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4e:	461a      	mov	r2, r3
 800ae50:	68b9      	ldr	r1, [r7, #8]
 800ae52:	f002 fd9e 	bl	800d992 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	685a      	ldr	r2, [r3, #4]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5e:	441a      	add	r2, r3
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	685a      	ldr	r2, [r3, #4]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d32b      	bcc.n	800aec8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	605a      	str	r2, [r3, #4]
 800ae78:	e026      	b.n	800aec8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	68d8      	ldr	r0, [r3, #12]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae82:	461a      	mov	r2, r3
 800ae84:	68b9      	ldr	r1, [r7, #8]
 800ae86:	f002 fd84 	bl	800d992 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	68da      	ldr	r2, [r3, #12]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae92:	425b      	negs	r3, r3
 800ae94:	441a      	add	r2, r3
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	68da      	ldr	r2, [r3, #12]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d207      	bcs.n	800aeb6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	689a      	ldr	r2, [r3, #8]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeae:	425b      	negs	r3, r3
 800aeb0:	441a      	add	r2, r3
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d105      	bne.n	800aec8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d002      	beq.n	800aec8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	1c5a      	adds	r2, r3, #1
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aed0:	697b      	ldr	r3, [r7, #20]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3718      	adds	r7, #24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b082      	sub	sp, #8
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
 800aee2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d018      	beq.n	800af1e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	68da      	ldr	r2, [r3, #12]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef4:	441a      	add	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	68da      	ldr	r2, [r3, #12]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	429a      	cmp	r2, r3
 800af04:	d303      	bcc.n	800af0e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	68d9      	ldr	r1, [r3, #12]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af16:	461a      	mov	r2, r3
 800af18:	6838      	ldr	r0, [r7, #0]
 800af1a:	f002 fd3a 	bl	800d992 <memcpy>
	}
}
 800af1e:	bf00      	nop
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b084      	sub	sp, #16
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af2e:	f002 f901 	bl	800d134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af38:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af3a:	e011      	b.n	800af60 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af40:	2b00      	cmp	r3, #0
 800af42:	d012      	beq.n	800af6a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	3324      	adds	r3, #36	; 0x24
 800af48:	4618      	mov	r0, r3
 800af4a:	f000 fe0b 	bl	800bb64 <xTaskRemoveFromEventList>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d001      	beq.n	800af58 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af54:	f000 fee2 	bl	800bd1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af58:	7bfb      	ldrb	r3, [r7, #15]
 800af5a:	3b01      	subs	r3, #1
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af64:	2b00      	cmp	r3, #0
 800af66:	dce9      	bgt.n	800af3c <prvUnlockQueue+0x16>
 800af68:	e000      	b.n	800af6c <prvUnlockQueue+0x46>
					break;
 800af6a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	22ff      	movs	r2, #255	; 0xff
 800af70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af74:	f002 f90e 	bl	800d194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af78:	f002 f8dc 	bl	800d134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af82:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af84:	e011      	b.n	800afaa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d012      	beq.n	800afb4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	3310      	adds	r3, #16
 800af92:	4618      	mov	r0, r3
 800af94:	f000 fde6 	bl	800bb64 <xTaskRemoveFromEventList>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d001      	beq.n	800afa2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af9e:	f000 febd 	bl	800bd1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afa2:	7bbb      	ldrb	r3, [r7, #14]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	dce9      	bgt.n	800af86 <prvUnlockQueue+0x60>
 800afb2:	e000      	b.n	800afb6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800afb4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	22ff      	movs	r2, #255	; 0xff
 800afba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800afbe:	f002 f8e9 	bl	800d194 <vPortExitCritical>
}
 800afc2:	bf00      	nop
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b084      	sub	sp, #16
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afd2:	f002 f8af 	bl	800d134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d102      	bne.n	800afe4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800afde:	2301      	movs	r3, #1
 800afe0:	60fb      	str	r3, [r7, #12]
 800afe2:	e001      	b.n	800afe8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800afe4:	2300      	movs	r3, #0
 800afe6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afe8:	f002 f8d4 	bl	800d194 <vPortExitCritical>

	return xReturn;
 800afec:	68fb      	ldr	r3, [r7, #12]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b084      	sub	sp, #16
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800affe:	f002 f899 	bl	800d134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d102      	bne.n	800b014 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b00e:	2301      	movs	r3, #1
 800b010:	60fb      	str	r3, [r7, #12]
 800b012:	e001      	b.n	800b018 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b014:	2300      	movs	r3, #0
 800b016:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b018:	f002 f8bc 	bl	800d194 <vPortExitCritical>

	return xReturn;
 800b01c:	68fb      	ldr	r3, [r7, #12]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
	...

0800b028 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b028:	b480      	push	{r7}
 800b02a:	b085      	sub	sp, #20
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b032:	2300      	movs	r3, #0
 800b034:	60fb      	str	r3, [r7, #12]
 800b036:	e014      	b.n	800b062 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b038:	4a0f      	ldr	r2, [pc, #60]	; (800b078 <vQueueAddToRegistry+0x50>)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10b      	bne.n	800b05c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b044:	490c      	ldr	r1, [pc, #48]	; (800b078 <vQueueAddToRegistry+0x50>)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b04e:	4a0a      	ldr	r2, [pc, #40]	; (800b078 <vQueueAddToRegistry+0x50>)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	00db      	lsls	r3, r3, #3
 800b054:	4413      	add	r3, r2
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b05a:	e006      	b.n	800b06a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	3301      	adds	r3, #1
 800b060:	60fb      	str	r3, [r7, #12]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2b07      	cmp	r3, #7
 800b066:	d9e7      	bls.n	800b038 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b068:	bf00      	nop
 800b06a:	bf00      	nop
 800b06c:	3714      	adds	r7, #20
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	20001318 	.word	0x20001318

0800b07c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b084:	2300      	movs	r3, #0
 800b086:	60fb      	str	r3, [r7, #12]
 800b088:	e016      	b.n	800b0b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b08a:	4a10      	ldr	r2, [pc, #64]	; (800b0cc <vQueueUnregisterQueue+0x50>)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	00db      	lsls	r3, r3, #3
 800b090:	4413      	add	r3, r2
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	429a      	cmp	r2, r3
 800b098:	d10b      	bne.n	800b0b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b09a:	4a0c      	ldr	r2, [pc, #48]	; (800b0cc <vQueueUnregisterQueue+0x50>)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2100      	movs	r1, #0
 800b0a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b0a4:	4a09      	ldr	r2, [pc, #36]	; (800b0cc <vQueueUnregisterQueue+0x50>)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	00db      	lsls	r3, r3, #3
 800b0aa:	4413      	add	r3, r2
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	605a      	str	r2, [r3, #4]
				break;
 800b0b0:	e006      	b.n	800b0c0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	60fb      	str	r3, [r7, #12]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2b07      	cmp	r3, #7
 800b0bc:	d9e5      	bls.n	800b08a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b0be:	bf00      	nop
 800b0c0:	bf00      	nop
 800b0c2:	3714      	adds	r7, #20
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr
 800b0cc:	20001318 	.word	0x20001318

0800b0d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0e0:	f002 f828 	bl	800d134 <vPortEnterCritical>
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0ea:	b25b      	sxtb	r3, r3
 800b0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f0:	d103      	bne.n	800b0fa <vQueueWaitForMessageRestricted+0x2a>
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b100:	b25b      	sxtb	r3, r3
 800b102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b106:	d103      	bne.n	800b110 <vQueueWaitForMessageRestricted+0x40>
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b110:	f002 f840 	bl	800d194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d106      	bne.n	800b12a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	3324      	adds	r3, #36	; 0x24
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	68b9      	ldr	r1, [r7, #8]
 800b124:	4618      	mov	r0, r3
 800b126:	f000 fcf1 	bl	800bb0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b12a:	6978      	ldr	r0, [r7, #20]
 800b12c:	f7ff fefb 	bl	800af26 <prvUnlockQueue>
	}
 800b130:	bf00      	nop
 800b132:	3718      	adds	r7, #24
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b08e      	sub	sp, #56	; 0x38
 800b13c:	af04      	add	r7, sp, #16
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
 800b144:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d10a      	bne.n	800b162 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b150:	f383 8811 	msr	BASEPRI, r3
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	623b      	str	r3, [r7, #32]
}
 800b15e:	bf00      	nop
 800b160:	e7fe      	b.n	800b160 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10a      	bne.n	800b17e <xTaskCreateStatic+0x46>
	__asm volatile
 800b168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16c:	f383 8811 	msr	BASEPRI, r3
 800b170:	f3bf 8f6f 	isb	sy
 800b174:	f3bf 8f4f 	dsb	sy
 800b178:	61fb      	str	r3, [r7, #28]
}
 800b17a:	bf00      	nop
 800b17c:	e7fe      	b.n	800b17c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b17e:	23bc      	movs	r3, #188	; 0xbc
 800b180:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	2bbc      	cmp	r3, #188	; 0xbc
 800b186:	d00a      	beq.n	800b19e <xTaskCreateStatic+0x66>
	__asm volatile
 800b188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18c:	f383 8811 	msr	BASEPRI, r3
 800b190:	f3bf 8f6f 	isb	sy
 800b194:	f3bf 8f4f 	dsb	sy
 800b198:	61bb      	str	r3, [r7, #24]
}
 800b19a:	bf00      	nop
 800b19c:	e7fe      	b.n	800b19c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b19e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d01e      	beq.n	800b1e4 <xTaskCreateStatic+0xac>
 800b1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d01b      	beq.n	800b1e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b8:	2202      	movs	r2, #2
 800b1ba:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1be:	2300      	movs	r3, #0
 800b1c0:	9303      	str	r3, [sp, #12]
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c4:	9302      	str	r3, [sp, #8]
 800b1c6:	f107 0314 	add.w	r3, r7, #20
 800b1ca:	9301      	str	r3, [sp, #4]
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	68b9      	ldr	r1, [r7, #8]
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f000 f850 	bl	800b27c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1de:	f000 f8f3 	bl	800b3c8 <prvAddNewTaskToReadyList>
 800b1e2:	e001      	b.n	800b1e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1e8:	697b      	ldr	r3, [r7, #20]
	}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3728      	adds	r7, #40	; 0x28
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b08c      	sub	sp, #48	; 0x30
 800b1f6:	af04      	add	r7, sp, #16
 800b1f8:	60f8      	str	r0, [r7, #12]
 800b1fa:	60b9      	str	r1, [r7, #8]
 800b1fc:	603b      	str	r3, [r7, #0]
 800b1fe:	4613      	mov	r3, r2
 800b200:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b202:	88fb      	ldrh	r3, [r7, #6]
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4618      	mov	r0, r3
 800b208:	f002 f8b6 	bl	800d378 <pvPortMalloc>
 800b20c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00e      	beq.n	800b232 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b214:	20bc      	movs	r0, #188	; 0xbc
 800b216:	f002 f8af 	bl	800d378 <pvPortMalloc>
 800b21a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d003      	beq.n	800b22a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	697a      	ldr	r2, [r7, #20]
 800b226:	631a      	str	r2, [r3, #48]	; 0x30
 800b228:	e005      	b.n	800b236 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b22a:	6978      	ldr	r0, [r7, #20]
 800b22c:	f002 f970 	bl	800d510 <vPortFree>
 800b230:	e001      	b.n	800b236 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b232:	2300      	movs	r3, #0
 800b234:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d017      	beq.n	800b26c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b244:	88fa      	ldrh	r2, [r7, #6]
 800b246:	2300      	movs	r3, #0
 800b248:	9303      	str	r3, [sp, #12]
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	9302      	str	r3, [sp, #8]
 800b24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b250:	9301      	str	r3, [sp, #4]
 800b252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	68b9      	ldr	r1, [r7, #8]
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f000 f80e 	bl	800b27c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b260:	69f8      	ldr	r0, [r7, #28]
 800b262:	f000 f8b1 	bl	800b3c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b266:	2301      	movs	r3, #1
 800b268:	61bb      	str	r3, [r7, #24]
 800b26a:	e002      	b.n	800b272 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b26c:	f04f 33ff 	mov.w	r3, #4294967295
 800b270:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b272:	69bb      	ldr	r3, [r7, #24]
	}
 800b274:	4618      	mov	r0, r3
 800b276:	3720      	adds	r7, #32
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
 800b288:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	461a      	mov	r2, r3
 800b294:	21a5      	movs	r1, #165	; 0xa5
 800b296:	f002 fb8a 	bl	800d9ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4413      	add	r3, r2
 800b2aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	f023 0307 	bic.w	r3, r3, #7
 800b2b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	f003 0307 	and.w	r3, r3, #7
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00a      	beq.n	800b2d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c2:	f383 8811 	msr	BASEPRI, r3
 800b2c6:	f3bf 8f6f 	isb	sy
 800b2ca:	f3bf 8f4f 	dsb	sy
 800b2ce:	617b      	str	r3, [r7, #20]
}
 800b2d0:	bf00      	nop
 800b2d2:	e7fe      	b.n	800b2d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d01f      	beq.n	800b31a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2da:	2300      	movs	r3, #0
 800b2dc:	61fb      	str	r3, [r7, #28]
 800b2de:	e012      	b.n	800b306 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	7819      	ldrb	r1, [r3, #0]
 800b2e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	3334      	adds	r3, #52	; 0x34
 800b2f0:	460a      	mov	r2, r1
 800b2f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b2f4:	68ba      	ldr	r2, [r7, #8]
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d006      	beq.n	800b30e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	3301      	adds	r3, #1
 800b304:	61fb      	str	r3, [r7, #28]
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	2b0f      	cmp	r3, #15
 800b30a:	d9e9      	bls.n	800b2e0 <prvInitialiseNewTask+0x64>
 800b30c:	e000      	b.n	800b310 <prvInitialiseNewTask+0x94>
			{
				break;
 800b30e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b312:	2200      	movs	r2, #0
 800b314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b318:	e003      	b.n	800b322 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b324:	2b37      	cmp	r3, #55	; 0x37
 800b326:	d901      	bls.n	800b32c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b328:	2337      	movs	r3, #55	; 0x37
 800b32a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b330:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b336:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33a:	2200      	movs	r2, #0
 800b33c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b340:	3304      	adds	r3, #4
 800b342:	4618      	mov	r0, r3
 800b344:	f7fe feac 	bl	800a0a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34a:	3318      	adds	r3, #24
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7fe fea7 	bl	800a0a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b356:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b360:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b366:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36a:	2200      	movs	r2, #0
 800b36c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b372:	2200      	movs	r2, #0
 800b374:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37a:	3354      	adds	r3, #84	; 0x54
 800b37c:	2260      	movs	r2, #96	; 0x60
 800b37e:	2100      	movs	r1, #0
 800b380:	4618      	mov	r0, r3
 800b382:	f002 fb14 	bl	800d9ae <memset>
 800b386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b388:	4a0c      	ldr	r2, [pc, #48]	; (800b3bc <prvInitialiseNewTask+0x140>)
 800b38a:	659a      	str	r2, [r3, #88]	; 0x58
 800b38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38e:	4a0c      	ldr	r2, [pc, #48]	; (800b3c0 <prvInitialiseNewTask+0x144>)
 800b390:	65da      	str	r2, [r3, #92]	; 0x5c
 800b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b394:	4a0b      	ldr	r2, [pc, #44]	; (800b3c4 <prvInitialiseNewTask+0x148>)
 800b396:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b398:	683a      	ldr	r2, [r7, #0]
 800b39a:	68f9      	ldr	r1, [r7, #12]
 800b39c:	69b8      	ldr	r0, [r7, #24]
 800b39e:	f001 fd9b 	bl	800ced8 <pxPortInitialiseStack>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d002      	beq.n	800b3b4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3b4:	bf00      	nop
 800b3b6:	3720      	adds	r7, #32
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	08011f30 	.word	0x08011f30
 800b3c0:	08011f50 	.word	0x08011f50
 800b3c4:	08011f10 	.word	0x08011f10

0800b3c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3d0:	f001 feb0 	bl	800d134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3d4:	4b2d      	ldr	r3, [pc, #180]	; (800b48c <prvAddNewTaskToReadyList+0xc4>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	4a2c      	ldr	r2, [pc, #176]	; (800b48c <prvAddNewTaskToReadyList+0xc4>)
 800b3dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3de:	4b2c      	ldr	r3, [pc, #176]	; (800b490 <prvAddNewTaskToReadyList+0xc8>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d109      	bne.n	800b3fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3e6:	4a2a      	ldr	r2, [pc, #168]	; (800b490 <prvAddNewTaskToReadyList+0xc8>)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3ec:	4b27      	ldr	r3, [pc, #156]	; (800b48c <prvAddNewTaskToReadyList+0xc4>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d110      	bne.n	800b416 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3f4:	f000 fcb6 	bl	800bd64 <prvInitialiseTaskLists>
 800b3f8:	e00d      	b.n	800b416 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3fa:	4b26      	ldr	r3, [pc, #152]	; (800b494 <prvAddNewTaskToReadyList+0xcc>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d109      	bne.n	800b416 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b402:	4b23      	ldr	r3, [pc, #140]	; (800b490 <prvAddNewTaskToReadyList+0xc8>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d802      	bhi.n	800b416 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b410:	4a1f      	ldr	r2, [pc, #124]	; (800b490 <prvAddNewTaskToReadyList+0xc8>)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b416:	4b20      	ldr	r3, [pc, #128]	; (800b498 <prvAddNewTaskToReadyList+0xd0>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	3301      	adds	r3, #1
 800b41c:	4a1e      	ldr	r2, [pc, #120]	; (800b498 <prvAddNewTaskToReadyList+0xd0>)
 800b41e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b420:	4b1d      	ldr	r3, [pc, #116]	; (800b498 <prvAddNewTaskToReadyList+0xd0>)
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b42c:	4b1b      	ldr	r3, [pc, #108]	; (800b49c <prvAddNewTaskToReadyList+0xd4>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	429a      	cmp	r2, r3
 800b432:	d903      	bls.n	800b43c <prvAddNewTaskToReadyList+0x74>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b438:	4a18      	ldr	r2, [pc, #96]	; (800b49c <prvAddNewTaskToReadyList+0xd4>)
 800b43a:	6013      	str	r3, [r2, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b440:	4613      	mov	r3, r2
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	4413      	add	r3, r2
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4a15      	ldr	r2, [pc, #84]	; (800b4a0 <prvAddNewTaskToReadyList+0xd8>)
 800b44a:	441a      	add	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	3304      	adds	r3, #4
 800b450:	4619      	mov	r1, r3
 800b452:	4610      	mov	r0, r2
 800b454:	f7fe fe31 	bl	800a0ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b458:	f001 fe9c 	bl	800d194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b45c:	4b0d      	ldr	r3, [pc, #52]	; (800b494 <prvAddNewTaskToReadyList+0xcc>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00e      	beq.n	800b482 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b464:	4b0a      	ldr	r3, [pc, #40]	; (800b490 <prvAddNewTaskToReadyList+0xc8>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46e:	429a      	cmp	r2, r3
 800b470:	d207      	bcs.n	800b482 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b472:	4b0c      	ldr	r3, [pc, #48]	; (800b4a4 <prvAddNewTaskToReadyList+0xdc>)
 800b474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b478:	601a      	str	r2, [r3, #0]
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b482:	bf00      	nop
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	2000182c 	.word	0x2000182c
 800b490:	20001358 	.word	0x20001358
 800b494:	20001838 	.word	0x20001838
 800b498:	20001848 	.word	0x20001848
 800b49c:	20001834 	.word	0x20001834
 800b4a0:	2000135c 	.word	0x2000135c
 800b4a4:	e000ed04 	.word	0xe000ed04

0800b4a8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b08a      	sub	sp, #40	; 0x28
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10a      	bne.n	800b4d2 <vTaskDelayUntil+0x2a>
	__asm volatile
 800b4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c0:	f383 8811 	msr	BASEPRI, r3
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	617b      	str	r3, [r7, #20]
}
 800b4ce:	bf00      	nop
 800b4d0:	e7fe      	b.n	800b4d0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10a      	bne.n	800b4ee <vTaskDelayUntil+0x46>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	613b      	str	r3, [r7, #16]
}
 800b4ea:	bf00      	nop
 800b4ec:	e7fe      	b.n	800b4ec <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b4ee:	4b2a      	ldr	r3, [pc, #168]	; (800b598 <vTaskDelayUntil+0xf0>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00a      	beq.n	800b50c <vTaskDelayUntil+0x64>
	__asm volatile
 800b4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	60fb      	str	r3, [r7, #12]
}
 800b508:	bf00      	nop
 800b50a:	e7fe      	b.n	800b50a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b50c:	f000 f8ee 	bl	800b6ec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b510:	4b22      	ldr	r3, [pc, #136]	; (800b59c <vTaskDelayUntil+0xf4>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	4413      	add	r3, r2
 800b51e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	6a3a      	ldr	r2, [r7, #32]
 800b526:	429a      	cmp	r2, r3
 800b528:	d20b      	bcs.n	800b542 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	69fa      	ldr	r2, [r7, #28]
 800b530:	429a      	cmp	r2, r3
 800b532:	d211      	bcs.n	800b558 <vTaskDelayUntil+0xb0>
 800b534:	69fa      	ldr	r2, [r7, #28]
 800b536:	6a3b      	ldr	r3, [r7, #32]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d90d      	bls.n	800b558 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b53c:	2301      	movs	r3, #1
 800b53e:	627b      	str	r3, [r7, #36]	; 0x24
 800b540:	e00a      	b.n	800b558 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	69fa      	ldr	r2, [r7, #28]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d303      	bcc.n	800b554 <vTaskDelayUntil+0xac>
 800b54c:	69fa      	ldr	r2, [r7, #28]
 800b54e:	6a3b      	ldr	r3, [r7, #32]
 800b550:	429a      	cmp	r2, r3
 800b552:	d901      	bls.n	800b558 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b554:	2301      	movs	r3, #1
 800b556:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	69fa      	ldr	r2, [r7, #28]
 800b55c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b560:	2b00      	cmp	r3, #0
 800b562:	d006      	beq.n	800b572 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b564:	69fa      	ldr	r2, [r7, #28]
 800b566:	6a3b      	ldr	r3, [r7, #32]
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	2100      	movs	r1, #0
 800b56c:	4618      	mov	r0, r3
 800b56e:	f001 f857 	bl	800c620 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b572:	f000 f8c9 	bl	800b708 <xTaskResumeAll>
 800b576:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d107      	bne.n	800b58e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b57e:	4b08      	ldr	r3, [pc, #32]	; (800b5a0 <vTaskDelayUntil+0xf8>)
 800b580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b584:	601a      	str	r2, [r3, #0]
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b58e:	bf00      	nop
 800b590:	3728      	adds	r7, #40	; 0x28
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	20001854 	.word	0x20001854
 800b59c:	20001830 	.word	0x20001830
 800b5a0:	e000ed04 	.word	0xe000ed04

0800b5a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d017      	beq.n	800b5e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b5b6:	4b13      	ldr	r3, [pc, #76]	; (800b604 <vTaskDelay+0x60>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <vTaskDelay+0x30>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	60bb      	str	r3, [r7, #8]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5d4:	f000 f88a 	bl	800b6ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5d8:	2100      	movs	r1, #0
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f001 f820 	bl	800c620 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5e0:	f000 f892 	bl	800b708 <xTaskResumeAll>
 800b5e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d107      	bne.n	800b5fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b5ec:	4b06      	ldr	r3, [pc, #24]	; (800b608 <vTaskDelay+0x64>)
 800b5ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5f2:	601a      	str	r2, [r3, #0]
 800b5f4:	f3bf 8f4f 	dsb	sy
 800b5f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5fc:	bf00      	nop
 800b5fe:	3710      	adds	r7, #16
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	20001854 	.word	0x20001854
 800b608:	e000ed04 	.word	0xe000ed04

0800b60c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b08a      	sub	sp, #40	; 0x28
 800b610:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b612:	2300      	movs	r3, #0
 800b614:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b616:	2300      	movs	r3, #0
 800b618:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b61a:	463a      	mov	r2, r7
 800b61c:	1d39      	adds	r1, r7, #4
 800b61e:	f107 0308 	add.w	r3, r7, #8
 800b622:	4618      	mov	r0, r3
 800b624:	f7fe fce8 	bl	8009ff8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b628:	6839      	ldr	r1, [r7, #0]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68ba      	ldr	r2, [r7, #8]
 800b62e:	9202      	str	r2, [sp, #8]
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	2300      	movs	r3, #0
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	2300      	movs	r3, #0
 800b638:	460a      	mov	r2, r1
 800b63a:	4924      	ldr	r1, [pc, #144]	; (800b6cc <vTaskStartScheduler+0xc0>)
 800b63c:	4824      	ldr	r0, [pc, #144]	; (800b6d0 <vTaskStartScheduler+0xc4>)
 800b63e:	f7ff fd7b 	bl	800b138 <xTaskCreateStatic>
 800b642:	4603      	mov	r3, r0
 800b644:	4a23      	ldr	r2, [pc, #140]	; (800b6d4 <vTaskStartScheduler+0xc8>)
 800b646:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b648:	4b22      	ldr	r3, [pc, #136]	; (800b6d4 <vTaskStartScheduler+0xc8>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b650:	2301      	movs	r3, #1
 800b652:	617b      	str	r3, [r7, #20]
 800b654:	e001      	b.n	800b65a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b656:	2300      	movs	r3, #0
 800b658:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d102      	bne.n	800b666 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b660:	f001 f832 	bl	800c6c8 <xTimerCreateTimerTask>
 800b664:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d11b      	bne.n	800b6a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	613b      	str	r3, [r7, #16]
}
 800b67e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b680:	4b15      	ldr	r3, [pc, #84]	; (800b6d8 <vTaskStartScheduler+0xcc>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	3354      	adds	r3, #84	; 0x54
 800b686:	4a15      	ldr	r2, [pc, #84]	; (800b6dc <vTaskStartScheduler+0xd0>)
 800b688:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b68a:	4b15      	ldr	r3, [pc, #84]	; (800b6e0 <vTaskStartScheduler+0xd4>)
 800b68c:	f04f 32ff 	mov.w	r2, #4294967295
 800b690:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b692:	4b14      	ldr	r3, [pc, #80]	; (800b6e4 <vTaskStartScheduler+0xd8>)
 800b694:	2201      	movs	r2, #1
 800b696:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b698:	4b13      	ldr	r3, [pc, #76]	; (800b6e8 <vTaskStartScheduler+0xdc>)
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b69e:	f001 fca7 	bl	800cff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6a2:	e00e      	b.n	800b6c2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6aa:	d10a      	bne.n	800b6c2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b0:	f383 8811 	msr	BASEPRI, r3
 800b6b4:	f3bf 8f6f 	isb	sy
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	60fb      	str	r3, [r7, #12]
}
 800b6be:	bf00      	nop
 800b6c0:	e7fe      	b.n	800b6c0 <vTaskStartScheduler+0xb4>
}
 800b6c2:	bf00      	nop
 800b6c4:	3718      	adds	r7, #24
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	08011da0 	.word	0x08011da0
 800b6d0:	0800bd35 	.word	0x0800bd35
 800b6d4:	20001850 	.word	0x20001850
 800b6d8:	20001358 	.word	0x20001358
 800b6dc:	200000a0 	.word	0x200000a0
 800b6e0:	2000184c 	.word	0x2000184c
 800b6e4:	20001838 	.word	0x20001838
 800b6e8:	20001830 	.word	0x20001830

0800b6ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b6f0:	4b04      	ldr	r3, [pc, #16]	; (800b704 <vTaskSuspendAll+0x18>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	4a03      	ldr	r2, [pc, #12]	; (800b704 <vTaskSuspendAll+0x18>)
 800b6f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b6fa:	bf00      	nop
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr
 800b704:	20001854 	.word	0x20001854

0800b708 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b70e:	2300      	movs	r3, #0
 800b710:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b712:	2300      	movs	r3, #0
 800b714:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b716:	4b42      	ldr	r3, [pc, #264]	; (800b820 <xTaskResumeAll+0x118>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10a      	bne.n	800b734 <xTaskResumeAll+0x2c>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	603b      	str	r3, [r7, #0]
}
 800b730:	bf00      	nop
 800b732:	e7fe      	b.n	800b732 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b734:	f001 fcfe 	bl	800d134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b738:	4b39      	ldr	r3, [pc, #228]	; (800b820 <xTaskResumeAll+0x118>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	4a38      	ldr	r2, [pc, #224]	; (800b820 <xTaskResumeAll+0x118>)
 800b740:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b742:	4b37      	ldr	r3, [pc, #220]	; (800b820 <xTaskResumeAll+0x118>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d162      	bne.n	800b810 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b74a:	4b36      	ldr	r3, [pc, #216]	; (800b824 <xTaskResumeAll+0x11c>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d05e      	beq.n	800b810 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b752:	e02f      	b.n	800b7b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b754:	4b34      	ldr	r3, [pc, #208]	; (800b828 <xTaskResumeAll+0x120>)
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	3318      	adds	r3, #24
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe fd07 	bl	800a174 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3304      	adds	r3, #4
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fe fd02 	bl	800a174 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b774:	4b2d      	ldr	r3, [pc, #180]	; (800b82c <xTaskResumeAll+0x124>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d903      	bls.n	800b784 <xTaskResumeAll+0x7c>
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b780:	4a2a      	ldr	r2, [pc, #168]	; (800b82c <xTaskResumeAll+0x124>)
 800b782:	6013      	str	r3, [r2, #0]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b788:	4613      	mov	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	4413      	add	r3, r2
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	4a27      	ldr	r2, [pc, #156]	; (800b830 <xTaskResumeAll+0x128>)
 800b792:	441a      	add	r2, r3
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	3304      	adds	r3, #4
 800b798:	4619      	mov	r1, r3
 800b79a:	4610      	mov	r0, r2
 800b79c:	f7fe fc8d 	bl	800a0ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a4:	4b23      	ldr	r3, [pc, #140]	; (800b834 <xTaskResumeAll+0x12c>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d302      	bcc.n	800b7b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b7ae:	4b22      	ldr	r3, [pc, #136]	; (800b838 <xTaskResumeAll+0x130>)
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7b4:	4b1c      	ldr	r3, [pc, #112]	; (800b828 <xTaskResumeAll+0x120>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1cb      	bne.n	800b754 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7c2:	f000 fb71 	bl	800bea8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b7c6:	4b1d      	ldr	r3, [pc, #116]	; (800b83c <xTaskResumeAll+0x134>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d010      	beq.n	800b7f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7d2:	f000 f859 	bl	800b888 <xTaskIncrementTick>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d002      	beq.n	800b7e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b7dc:	4b16      	ldr	r3, [pc, #88]	; (800b838 <xTaskResumeAll+0x130>)
 800b7de:	2201      	movs	r2, #1
 800b7e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1f1      	bne.n	800b7d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b7ee:	4b13      	ldr	r3, [pc, #76]	; (800b83c <xTaskResumeAll+0x134>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b7f4:	4b10      	ldr	r3, [pc, #64]	; (800b838 <xTaskResumeAll+0x130>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d009      	beq.n	800b810 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b800:	4b0f      	ldr	r3, [pc, #60]	; (800b840 <xTaskResumeAll+0x138>)
 800b802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b806:	601a      	str	r2, [r3, #0]
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b810:	f001 fcc0 	bl	800d194 <vPortExitCritical>

	return xAlreadyYielded;
 800b814:	68bb      	ldr	r3, [r7, #8]
}
 800b816:	4618      	mov	r0, r3
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	20001854 	.word	0x20001854
 800b824:	2000182c 	.word	0x2000182c
 800b828:	200017ec 	.word	0x200017ec
 800b82c:	20001834 	.word	0x20001834
 800b830:	2000135c 	.word	0x2000135c
 800b834:	20001358 	.word	0x20001358
 800b838:	20001840 	.word	0x20001840
 800b83c:	2000183c 	.word	0x2000183c
 800b840:	e000ed04 	.word	0xe000ed04

0800b844 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b84a:	4b05      	ldr	r3, [pc, #20]	; (800b860 <xTaskGetTickCount+0x1c>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b850:	687b      	ldr	r3, [r7, #4]
}
 800b852:	4618      	mov	r0, r3
 800b854:	370c      	adds	r7, #12
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	20001830 	.word	0x20001830

0800b864 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b86a:	f001 fd45 	bl	800d2f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b86e:	2300      	movs	r3, #0
 800b870:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b872:	4b04      	ldr	r3, [pc, #16]	; (800b884 <xTaskGetTickCountFromISR+0x20>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b878:	683b      	ldr	r3, [r7, #0]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	20001830 	.word	0x20001830

0800b888 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b88e:	2300      	movs	r3, #0
 800b890:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b892:	4b4f      	ldr	r3, [pc, #316]	; (800b9d0 <xTaskIncrementTick+0x148>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	f040 808f 	bne.w	800b9ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b89c:	4b4d      	ldr	r3, [pc, #308]	; (800b9d4 <xTaskIncrementTick+0x14c>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b8a4:	4a4b      	ldr	r2, [pc, #300]	; (800b9d4 <xTaskIncrementTick+0x14c>)
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d120      	bne.n	800b8f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b8b0:	4b49      	ldr	r3, [pc, #292]	; (800b9d8 <xTaskIncrementTick+0x150>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00a      	beq.n	800b8d0 <xTaskIncrementTick+0x48>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	603b      	str	r3, [r7, #0]
}
 800b8cc:	bf00      	nop
 800b8ce:	e7fe      	b.n	800b8ce <xTaskIncrementTick+0x46>
 800b8d0:	4b41      	ldr	r3, [pc, #260]	; (800b9d8 <xTaskIncrementTick+0x150>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	60fb      	str	r3, [r7, #12]
 800b8d6:	4b41      	ldr	r3, [pc, #260]	; (800b9dc <xTaskIncrementTick+0x154>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a3f      	ldr	r2, [pc, #252]	; (800b9d8 <xTaskIncrementTick+0x150>)
 800b8dc:	6013      	str	r3, [r2, #0]
 800b8de:	4a3f      	ldr	r2, [pc, #252]	; (800b9dc <xTaskIncrementTick+0x154>)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	4b3e      	ldr	r3, [pc, #248]	; (800b9e0 <xTaskIncrementTick+0x158>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	4a3d      	ldr	r2, [pc, #244]	; (800b9e0 <xTaskIncrementTick+0x158>)
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	f000 fadb 	bl	800bea8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8f2:	4b3c      	ldr	r3, [pc, #240]	; (800b9e4 <xTaskIncrementTick+0x15c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	693a      	ldr	r2, [r7, #16]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d349      	bcc.n	800b990 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8fc:	4b36      	ldr	r3, [pc, #216]	; (800b9d8 <xTaskIncrementTick+0x150>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d104      	bne.n	800b910 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b906:	4b37      	ldr	r3, [pc, #220]	; (800b9e4 <xTaskIncrementTick+0x15c>)
 800b908:	f04f 32ff 	mov.w	r2, #4294967295
 800b90c:	601a      	str	r2, [r3, #0]
					break;
 800b90e:	e03f      	b.n	800b990 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b910:	4b31      	ldr	r3, [pc, #196]	; (800b9d8 <xTaskIncrementTick+0x150>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	429a      	cmp	r2, r3
 800b926:	d203      	bcs.n	800b930 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b928:	4a2e      	ldr	r2, [pc, #184]	; (800b9e4 <xTaskIncrementTick+0x15c>)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b92e:	e02f      	b.n	800b990 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	3304      	adds	r3, #4
 800b934:	4618      	mov	r0, r3
 800b936:	f7fe fc1d 	bl	800a174 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d004      	beq.n	800b94c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	3318      	adds	r3, #24
 800b946:	4618      	mov	r0, r3
 800b948:	f7fe fc14 	bl	800a174 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b950:	4b25      	ldr	r3, [pc, #148]	; (800b9e8 <xTaskIncrementTick+0x160>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	429a      	cmp	r2, r3
 800b956:	d903      	bls.n	800b960 <xTaskIncrementTick+0xd8>
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95c:	4a22      	ldr	r2, [pc, #136]	; (800b9e8 <xTaskIncrementTick+0x160>)
 800b95e:	6013      	str	r3, [r2, #0]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b964:	4613      	mov	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	4413      	add	r3, r2
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	4a1f      	ldr	r2, [pc, #124]	; (800b9ec <xTaskIncrementTick+0x164>)
 800b96e:	441a      	add	r2, r3
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	3304      	adds	r3, #4
 800b974:	4619      	mov	r1, r3
 800b976:	4610      	mov	r0, r2
 800b978:	f7fe fb9f 	bl	800a0ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b980:	4b1b      	ldr	r3, [pc, #108]	; (800b9f0 <xTaskIncrementTick+0x168>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b986:	429a      	cmp	r2, r3
 800b988:	d3b8      	bcc.n	800b8fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b98a:	2301      	movs	r3, #1
 800b98c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b98e:	e7b5      	b.n	800b8fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b990:	4b17      	ldr	r3, [pc, #92]	; (800b9f0 <xTaskIncrementTick+0x168>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b996:	4915      	ldr	r1, [pc, #84]	; (800b9ec <xTaskIncrementTick+0x164>)
 800b998:	4613      	mov	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	4413      	add	r3, r2
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	440b      	add	r3, r1
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d901      	bls.n	800b9ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b9ac:	4b11      	ldr	r3, [pc, #68]	; (800b9f4 <xTaskIncrementTick+0x16c>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d007      	beq.n	800b9c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	617b      	str	r3, [r7, #20]
 800b9b8:	e004      	b.n	800b9c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b9ba:	4b0f      	ldr	r3, [pc, #60]	; (800b9f8 <xTaskIncrementTick+0x170>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	4a0d      	ldr	r2, [pc, #52]	; (800b9f8 <xTaskIncrementTick+0x170>)
 800b9c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b9c4:	697b      	ldr	r3, [r7, #20]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3718      	adds	r7, #24
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	20001854 	.word	0x20001854
 800b9d4:	20001830 	.word	0x20001830
 800b9d8:	200017e4 	.word	0x200017e4
 800b9dc:	200017e8 	.word	0x200017e8
 800b9e0:	20001844 	.word	0x20001844
 800b9e4:	2000184c 	.word	0x2000184c
 800b9e8:	20001834 	.word	0x20001834
 800b9ec:	2000135c 	.word	0x2000135c
 800b9f0:	20001358 	.word	0x20001358
 800b9f4:	20001840 	.word	0x20001840
 800b9f8:	2000183c 	.word	0x2000183c

0800b9fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba02:	4b2a      	ldr	r3, [pc, #168]	; (800baac <vTaskSwitchContext+0xb0>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d003      	beq.n	800ba12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba0a:	4b29      	ldr	r3, [pc, #164]	; (800bab0 <vTaskSwitchContext+0xb4>)
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba10:	e046      	b.n	800baa0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ba12:	4b27      	ldr	r3, [pc, #156]	; (800bab0 <vTaskSwitchContext+0xb4>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba18:	4b26      	ldr	r3, [pc, #152]	; (800bab4 <vTaskSwitchContext+0xb8>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	60fb      	str	r3, [r7, #12]
 800ba1e:	e010      	b.n	800ba42 <vTaskSwitchContext+0x46>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10a      	bne.n	800ba3c <vTaskSwitchContext+0x40>
	__asm volatile
 800ba26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	607b      	str	r3, [r7, #4]
}
 800ba38:	bf00      	nop
 800ba3a:	e7fe      	b.n	800ba3a <vTaskSwitchContext+0x3e>
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	60fb      	str	r3, [r7, #12]
 800ba42:	491d      	ldr	r1, [pc, #116]	; (800bab8 <vTaskSwitchContext+0xbc>)
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	4613      	mov	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4413      	add	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	440b      	add	r3, r1
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d0e4      	beq.n	800ba20 <vTaskSwitchContext+0x24>
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	4613      	mov	r3, r2
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	4413      	add	r3, r2
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	4a15      	ldr	r2, [pc, #84]	; (800bab8 <vTaskSwitchContext+0xbc>)
 800ba62:	4413      	add	r3, r2
 800ba64:	60bb      	str	r3, [r7, #8]
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	605a      	str	r2, [r3, #4]
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	685a      	ldr	r2, [r3, #4]
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	3308      	adds	r3, #8
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d104      	bne.n	800ba86 <vTaskSwitchContext+0x8a>
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	685a      	ldr	r2, [r3, #4]
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	605a      	str	r2, [r3, #4]
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	4a0b      	ldr	r2, [pc, #44]	; (800babc <vTaskSwitchContext+0xc0>)
 800ba8e:	6013      	str	r3, [r2, #0]
 800ba90:	4a08      	ldr	r2, [pc, #32]	; (800bab4 <vTaskSwitchContext+0xb8>)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ba96:	4b09      	ldr	r3, [pc, #36]	; (800babc <vTaskSwitchContext+0xc0>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	3354      	adds	r3, #84	; 0x54
 800ba9c:	4a08      	ldr	r2, [pc, #32]	; (800bac0 <vTaskSwitchContext+0xc4>)
 800ba9e:	6013      	str	r3, [r2, #0]
}
 800baa0:	bf00      	nop
 800baa2:	3714      	adds	r7, #20
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr
 800baac:	20001854 	.word	0x20001854
 800bab0:	20001840 	.word	0x20001840
 800bab4:	20001834 	.word	0x20001834
 800bab8:	2000135c 	.word	0x2000135c
 800babc:	20001358 	.word	0x20001358
 800bac0:	200000a0 	.word	0x200000a0

0800bac4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10a      	bne.n	800baea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad8:	f383 8811 	msr	BASEPRI, r3
 800badc:	f3bf 8f6f 	isb	sy
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	60fb      	str	r3, [r7, #12]
}
 800bae6:	bf00      	nop
 800bae8:	e7fe      	b.n	800bae8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800baea:	4b07      	ldr	r3, [pc, #28]	; (800bb08 <vTaskPlaceOnEventList+0x44>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3318      	adds	r3, #24
 800baf0:	4619      	mov	r1, r3
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7fe fb05 	bl	800a102 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800baf8:	2101      	movs	r1, #1
 800bafa:	6838      	ldr	r0, [r7, #0]
 800bafc:	f000 fd90 	bl	800c620 <prvAddCurrentTaskToDelayedList>
}
 800bb00:	bf00      	nop
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	20001358 	.word	0x20001358

0800bb0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10a      	bne.n	800bb34 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb22:	f383 8811 	msr	BASEPRI, r3
 800bb26:	f3bf 8f6f 	isb	sy
 800bb2a:	f3bf 8f4f 	dsb	sy
 800bb2e:	617b      	str	r3, [r7, #20]
}
 800bb30:	bf00      	nop
 800bb32:	e7fe      	b.n	800bb32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb34:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <vTaskPlaceOnEventListRestricted+0x54>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	3318      	adds	r3, #24
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7fe fabc 	bl	800a0ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d002      	beq.n	800bb4e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bb48:	f04f 33ff 	mov.w	r3, #4294967295
 800bb4c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb4e:	6879      	ldr	r1, [r7, #4]
 800bb50:	68b8      	ldr	r0, [r7, #8]
 800bb52:	f000 fd65 	bl	800c620 <prvAddCurrentTaskToDelayedList>
	}
 800bb56:	bf00      	nop
 800bb58:	3718      	adds	r7, #24
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	20001358 	.word	0x20001358

0800bb64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10a      	bne.n	800bb90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7e:	f383 8811 	msr	BASEPRI, r3
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	60fb      	str	r3, [r7, #12]
}
 800bb8c:	bf00      	nop
 800bb8e:	e7fe      	b.n	800bb8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	3318      	adds	r3, #24
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fe faed 	bl	800a174 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb9a:	4b1e      	ldr	r3, [pc, #120]	; (800bc14 <xTaskRemoveFromEventList+0xb0>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d11d      	bne.n	800bbde <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	3304      	adds	r3, #4
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fe fae4 	bl	800a174 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb0:	4b19      	ldr	r3, [pc, #100]	; (800bc18 <xTaskRemoveFromEventList+0xb4>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d903      	bls.n	800bbc0 <xTaskRemoveFromEventList+0x5c>
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbbc:	4a16      	ldr	r2, [pc, #88]	; (800bc18 <xTaskRemoveFromEventList+0xb4>)
 800bbbe:	6013      	str	r3, [r2, #0]
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4413      	add	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	4a13      	ldr	r2, [pc, #76]	; (800bc1c <xTaskRemoveFromEventList+0xb8>)
 800bbce:	441a      	add	r2, r3
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	3304      	adds	r3, #4
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	4610      	mov	r0, r2
 800bbd8:	f7fe fa6f 	bl	800a0ba <vListInsertEnd>
 800bbdc:	e005      	b.n	800bbea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	3318      	adds	r3, #24
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	480e      	ldr	r0, [pc, #56]	; (800bc20 <xTaskRemoveFromEventList+0xbc>)
 800bbe6:	f7fe fa68 	bl	800a0ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbee:	4b0d      	ldr	r3, [pc, #52]	; (800bc24 <xTaskRemoveFromEventList+0xc0>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d905      	bls.n	800bc04 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bbfc:	4b0a      	ldr	r3, [pc, #40]	; (800bc28 <xTaskRemoveFromEventList+0xc4>)
 800bbfe:	2201      	movs	r2, #1
 800bc00:	601a      	str	r2, [r3, #0]
 800bc02:	e001      	b.n	800bc08 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bc04:	2300      	movs	r3, #0
 800bc06:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc08:	697b      	ldr	r3, [r7, #20]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3718      	adds	r7, #24
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	20001854 	.word	0x20001854
 800bc18:	20001834 	.word	0x20001834
 800bc1c:	2000135c 	.word	0x2000135c
 800bc20:	200017ec 	.word	0x200017ec
 800bc24:	20001358 	.word	0x20001358
 800bc28:	20001840 	.word	0x20001840

0800bc2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc34:	4b06      	ldr	r3, [pc, #24]	; (800bc50 <vTaskInternalSetTimeOutState+0x24>)
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc3c:	4b05      	ldr	r3, [pc, #20]	; (800bc54 <vTaskInternalSetTimeOutState+0x28>)
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	605a      	str	r2, [r3, #4]
}
 800bc44:	bf00      	nop
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr
 800bc50:	20001844 	.word	0x20001844
 800bc54:	20001830 	.word	0x20001830

0800bc58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b088      	sub	sp, #32
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10a      	bne.n	800bc7e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6c:	f383 8811 	msr	BASEPRI, r3
 800bc70:	f3bf 8f6f 	isb	sy
 800bc74:	f3bf 8f4f 	dsb	sy
 800bc78:	613b      	str	r3, [r7, #16]
}
 800bc7a:	bf00      	nop
 800bc7c:	e7fe      	b.n	800bc7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10a      	bne.n	800bc9a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	60fb      	str	r3, [r7, #12]
}
 800bc96:	bf00      	nop
 800bc98:	e7fe      	b.n	800bc98 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bc9a:	f001 fa4b 	bl	800d134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc9e:	4b1d      	ldr	r3, [pc, #116]	; (800bd14 <xTaskCheckForTimeOut+0xbc>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	69ba      	ldr	r2, [r7, #24]
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb6:	d102      	bne.n	800bcbe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	61fb      	str	r3, [r7, #28]
 800bcbc:	e023      	b.n	800bd06 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	4b15      	ldr	r3, [pc, #84]	; (800bd18 <xTaskCheckForTimeOut+0xc0>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d007      	beq.n	800bcda <xTaskCheckForTimeOut+0x82>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	69ba      	ldr	r2, [r7, #24]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d302      	bcc.n	800bcda <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	61fb      	str	r3, [r7, #28]
 800bcd8:	e015      	b.n	800bd06 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	697a      	ldr	r2, [r7, #20]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d20b      	bcs.n	800bcfc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	1ad2      	subs	r2, r2, r3
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7ff ff9b 	bl	800bc2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	61fb      	str	r3, [r7, #28]
 800bcfa:	e004      	b.n	800bd06 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd02:	2301      	movs	r3, #1
 800bd04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd06:	f001 fa45 	bl	800d194 <vPortExitCritical>

	return xReturn;
 800bd0a:	69fb      	ldr	r3, [r7, #28]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3720      	adds	r7, #32
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	20001830 	.word	0x20001830
 800bd18:	20001844 	.word	0x20001844

0800bd1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd20:	4b03      	ldr	r3, [pc, #12]	; (800bd30 <vTaskMissedYield+0x14>)
 800bd22:	2201      	movs	r2, #1
 800bd24:	601a      	str	r2, [r3, #0]
}
 800bd26:	bf00      	nop
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr
 800bd30:	20001840 	.word	0x20001840

0800bd34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd3c:	f000 f852 	bl	800bde4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd40:	4b06      	ldr	r3, [pc, #24]	; (800bd5c <prvIdleTask+0x28>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d9f9      	bls.n	800bd3c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd48:	4b05      	ldr	r3, [pc, #20]	; (800bd60 <prvIdleTask+0x2c>)
 800bd4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd4e:	601a      	str	r2, [r3, #0]
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd58:	e7f0      	b.n	800bd3c <prvIdleTask+0x8>
 800bd5a:	bf00      	nop
 800bd5c:	2000135c 	.word	0x2000135c
 800bd60:	e000ed04 	.word	0xe000ed04

0800bd64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	607b      	str	r3, [r7, #4]
 800bd6e:	e00c      	b.n	800bd8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	4613      	mov	r3, r2
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	4413      	add	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	4a12      	ldr	r2, [pc, #72]	; (800bdc4 <prvInitialiseTaskLists+0x60>)
 800bd7c:	4413      	add	r3, r2
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fe f96e 	bl	800a060 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	3301      	adds	r3, #1
 800bd88:	607b      	str	r3, [r7, #4]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2b37      	cmp	r3, #55	; 0x37
 800bd8e:	d9ef      	bls.n	800bd70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd90:	480d      	ldr	r0, [pc, #52]	; (800bdc8 <prvInitialiseTaskLists+0x64>)
 800bd92:	f7fe f965 	bl	800a060 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd96:	480d      	ldr	r0, [pc, #52]	; (800bdcc <prvInitialiseTaskLists+0x68>)
 800bd98:	f7fe f962 	bl	800a060 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd9c:	480c      	ldr	r0, [pc, #48]	; (800bdd0 <prvInitialiseTaskLists+0x6c>)
 800bd9e:	f7fe f95f 	bl	800a060 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bda2:	480c      	ldr	r0, [pc, #48]	; (800bdd4 <prvInitialiseTaskLists+0x70>)
 800bda4:	f7fe f95c 	bl	800a060 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bda8:	480b      	ldr	r0, [pc, #44]	; (800bdd8 <prvInitialiseTaskLists+0x74>)
 800bdaa:	f7fe f959 	bl	800a060 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bdae:	4b0b      	ldr	r3, [pc, #44]	; (800bddc <prvInitialiseTaskLists+0x78>)
 800bdb0:	4a05      	ldr	r2, [pc, #20]	; (800bdc8 <prvInitialiseTaskLists+0x64>)
 800bdb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bdb4:	4b0a      	ldr	r3, [pc, #40]	; (800bde0 <prvInitialiseTaskLists+0x7c>)
 800bdb6:	4a05      	ldr	r2, [pc, #20]	; (800bdcc <prvInitialiseTaskLists+0x68>)
 800bdb8:	601a      	str	r2, [r3, #0]
}
 800bdba:	bf00      	nop
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	2000135c 	.word	0x2000135c
 800bdc8:	200017bc 	.word	0x200017bc
 800bdcc:	200017d0 	.word	0x200017d0
 800bdd0:	200017ec 	.word	0x200017ec
 800bdd4:	20001800 	.word	0x20001800
 800bdd8:	20001818 	.word	0x20001818
 800bddc:	200017e4 	.word	0x200017e4
 800bde0:	200017e8 	.word	0x200017e8

0800bde4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdea:	e019      	b.n	800be20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bdec:	f001 f9a2 	bl	800d134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdf0:	4b10      	ldr	r3, [pc, #64]	; (800be34 <prvCheckTasksWaitingTermination+0x50>)
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	3304      	adds	r3, #4
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7fe f9b9 	bl	800a174 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be02:	4b0d      	ldr	r3, [pc, #52]	; (800be38 <prvCheckTasksWaitingTermination+0x54>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	3b01      	subs	r3, #1
 800be08:	4a0b      	ldr	r2, [pc, #44]	; (800be38 <prvCheckTasksWaitingTermination+0x54>)
 800be0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be0c:	4b0b      	ldr	r3, [pc, #44]	; (800be3c <prvCheckTasksWaitingTermination+0x58>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3b01      	subs	r3, #1
 800be12:	4a0a      	ldr	r2, [pc, #40]	; (800be3c <prvCheckTasksWaitingTermination+0x58>)
 800be14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be16:	f001 f9bd 	bl	800d194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 f810 	bl	800be40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be20:	4b06      	ldr	r3, [pc, #24]	; (800be3c <prvCheckTasksWaitingTermination+0x58>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1e1      	bne.n	800bdec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be28:	bf00      	nop
 800be2a:	bf00      	nop
 800be2c:	3708      	adds	r7, #8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	20001800 	.word	0x20001800
 800be38:	2000182c 	.word	0x2000182c
 800be3c:	20001814 	.word	0x20001814

0800be40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	3354      	adds	r3, #84	; 0x54
 800be4c:	4618      	mov	r0, r3
 800be4e:	f002 fb51 	bl	800e4f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d108      	bne.n	800be6e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be60:	4618      	mov	r0, r3
 800be62:	f001 fb55 	bl	800d510 <vPortFree>
				vPortFree( pxTCB );
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f001 fb52 	bl	800d510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be6c:	e018      	b.n	800bea0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800be74:	2b01      	cmp	r3, #1
 800be76:	d103      	bne.n	800be80 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f001 fb49 	bl	800d510 <vPortFree>
	}
 800be7e:	e00f      	b.n	800bea0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800be86:	2b02      	cmp	r3, #2
 800be88:	d00a      	beq.n	800bea0 <prvDeleteTCB+0x60>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	60fb      	str	r3, [r7, #12]
}
 800be9c:	bf00      	nop
 800be9e:	e7fe      	b.n	800be9e <prvDeleteTCB+0x5e>
	}
 800bea0:	bf00      	nop
 800bea2:	3710      	adds	r7, #16
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800beae:	4b0c      	ldr	r3, [pc, #48]	; (800bee0 <prvResetNextTaskUnblockTime+0x38>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d104      	bne.n	800bec2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800beb8:	4b0a      	ldr	r3, [pc, #40]	; (800bee4 <prvResetNextTaskUnblockTime+0x3c>)
 800beba:	f04f 32ff 	mov.w	r2, #4294967295
 800bebe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bec0:	e008      	b.n	800bed4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bec2:	4b07      	ldr	r3, [pc, #28]	; (800bee0 <prvResetNextTaskUnblockTime+0x38>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	4a04      	ldr	r2, [pc, #16]	; (800bee4 <prvResetNextTaskUnblockTime+0x3c>)
 800bed2:	6013      	str	r3, [r2, #0]
}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr
 800bee0:	200017e4 	.word	0x200017e4
 800bee4:	2000184c 	.word	0x2000184c

0800bee8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800beee:	4b05      	ldr	r3, [pc, #20]	; (800bf04 <xTaskGetCurrentTaskHandle+0x1c>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bef4:	687b      	ldr	r3, [r7, #4]
	}
 800bef6:	4618      	mov	r0, r3
 800bef8:	370c      	adds	r7, #12
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	20001358 	.word	0x20001358

0800bf08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf0e:	4b0b      	ldr	r3, [pc, #44]	; (800bf3c <xTaskGetSchedulerState+0x34>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d102      	bne.n	800bf1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf16:	2301      	movs	r3, #1
 800bf18:	607b      	str	r3, [r7, #4]
 800bf1a:	e008      	b.n	800bf2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf1c:	4b08      	ldr	r3, [pc, #32]	; (800bf40 <xTaskGetSchedulerState+0x38>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d102      	bne.n	800bf2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf24:	2302      	movs	r3, #2
 800bf26:	607b      	str	r3, [r7, #4]
 800bf28:	e001      	b.n	800bf2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf2e:	687b      	ldr	r3, [r7, #4]
	}
 800bf30:	4618      	mov	r0, r3
 800bf32:	370c      	adds	r7, #12
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr
 800bf3c:	20001838 	.word	0x20001838
 800bf40:	20001854 	.word	0x20001854

0800bf44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bf50:	2300      	movs	r3, #0
 800bf52:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d051      	beq.n	800bffe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf5e:	4b2a      	ldr	r3, [pc, #168]	; (800c008 <xTaskPriorityInherit+0xc4>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d241      	bcs.n	800bfec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	699b      	ldr	r3, [r3, #24]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	db06      	blt.n	800bf7e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf70:	4b25      	ldr	r3, [pc, #148]	; (800c008 <xTaskPriorityInherit+0xc4>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	6959      	ldr	r1, [r3, #20]
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf86:	4613      	mov	r3, r2
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	4413      	add	r3, r2
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	4a1f      	ldr	r2, [pc, #124]	; (800c00c <xTaskPriorityInherit+0xc8>)
 800bf90:	4413      	add	r3, r2
 800bf92:	4299      	cmp	r1, r3
 800bf94:	d122      	bne.n	800bfdc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	3304      	adds	r3, #4
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7fe f8ea 	bl	800a174 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfa0:	4b19      	ldr	r3, [pc, #100]	; (800c008 <xTaskPriorityInherit+0xc4>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfae:	4b18      	ldr	r3, [pc, #96]	; (800c010 <xTaskPriorityInherit+0xcc>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d903      	bls.n	800bfbe <xTaskPriorityInherit+0x7a>
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfba:	4a15      	ldr	r2, [pc, #84]	; (800c010 <xTaskPriorityInherit+0xcc>)
 800bfbc:	6013      	str	r3, [r2, #0]
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	4413      	add	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4a10      	ldr	r2, [pc, #64]	; (800c00c <xTaskPriorityInherit+0xc8>)
 800bfcc:	441a      	add	r2, r3
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	3304      	adds	r3, #4
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	f7fe f870 	bl	800a0ba <vListInsertEnd>
 800bfda:	e004      	b.n	800bfe6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfdc:	4b0a      	ldr	r3, [pc, #40]	; (800c008 <xTaskPriorityInherit+0xc4>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	60fb      	str	r3, [r7, #12]
 800bfea:	e008      	b.n	800bffe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bff0:	4b05      	ldr	r3, [pc, #20]	; (800c008 <xTaskPriorityInherit+0xc4>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d201      	bcs.n	800bffe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bffa:	2301      	movs	r3, #1
 800bffc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bffe:	68fb      	ldr	r3, [r7, #12]
	}
 800c000:	4618      	mov	r0, r3
 800c002:	3710      	adds	r7, #16
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	20001358 	.word	0x20001358
 800c00c:	2000135c 	.word	0x2000135c
 800c010:	20001834 	.word	0x20001834

0800c014 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c020:	2300      	movs	r3, #0
 800c022:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d056      	beq.n	800c0d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c02a:	4b2e      	ldr	r3, [pc, #184]	; (800c0e4 <xTaskPriorityDisinherit+0xd0>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	693a      	ldr	r2, [r7, #16]
 800c030:	429a      	cmp	r2, r3
 800c032:	d00a      	beq.n	800c04a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	60fb      	str	r3, [r7, #12]
}
 800c046:	bf00      	nop
 800c048:	e7fe      	b.n	800c048 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d10a      	bne.n	800c068 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c056:	f383 8811 	msr	BASEPRI, r3
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	60bb      	str	r3, [r7, #8]
}
 800c064:	bf00      	nop
 800c066:	e7fe      	b.n	800c066 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c06c:	1e5a      	subs	r2, r3, #1
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d02c      	beq.n	800c0d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c082:	2b00      	cmp	r3, #0
 800c084:	d128      	bne.n	800c0d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	3304      	adds	r3, #4
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fe f872 	bl	800a174 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a8:	4b0f      	ldr	r3, [pc, #60]	; (800c0e8 <xTaskPriorityDisinherit+0xd4>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d903      	bls.n	800c0b8 <xTaskPriorityDisinherit+0xa4>
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b4:	4a0c      	ldr	r2, [pc, #48]	; (800c0e8 <xTaskPriorityDisinherit+0xd4>)
 800c0b6:	6013      	str	r3, [r2, #0]
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0bc:	4613      	mov	r3, r2
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	4413      	add	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	4a09      	ldr	r2, [pc, #36]	; (800c0ec <xTaskPriorityDisinherit+0xd8>)
 800c0c6:	441a      	add	r2, r3
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	3304      	adds	r3, #4
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	4610      	mov	r0, r2
 800c0d0:	f7fd fff3 	bl	800a0ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0d8:	697b      	ldr	r3, [r7, #20]
	}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3718      	adds	r7, #24
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	20001358 	.word	0x20001358
 800c0e8:	20001834 	.word	0x20001834
 800c0ec:	2000135c 	.word	0x2000135c

0800c0f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c0fe:	2301      	movs	r3, #1
 800c100:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d06a      	beq.n	800c1de <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10a      	bne.n	800c126 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	60fb      	str	r3, [r7, #12]
}
 800c122:	bf00      	nop
 800c124:	e7fe      	b.n	800c124 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d902      	bls.n	800c136 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	61fb      	str	r3, [r7, #28]
 800c134:	e002      	b.n	800c13c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c13a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c140:	69fa      	ldr	r2, [r7, #28]
 800c142:	429a      	cmp	r2, r3
 800c144:	d04b      	beq.n	800c1de <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c14a:	697a      	ldr	r2, [r7, #20]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d146      	bne.n	800c1de <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c150:	4b25      	ldr	r3, [pc, #148]	; (800c1e8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	69ba      	ldr	r2, [r7, #24]
 800c156:	429a      	cmp	r2, r3
 800c158:	d10a      	bne.n	800c170 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15e:	f383 8811 	msr	BASEPRI, r3
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	60bb      	str	r3, [r7, #8]
}
 800c16c:	bf00      	nop
 800c16e:	e7fe      	b.n	800c16e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c174:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	69fa      	ldr	r2, [r7, #28]
 800c17a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	699b      	ldr	r3, [r3, #24]
 800c180:	2b00      	cmp	r3, #0
 800c182:	db04      	blt.n	800c18e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	6959      	ldr	r1, [r3, #20]
 800c192:	693a      	ldr	r2, [r7, #16]
 800c194:	4613      	mov	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	4413      	add	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4a13      	ldr	r2, [pc, #76]	; (800c1ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c19e:	4413      	add	r3, r2
 800c1a0:	4299      	cmp	r1, r3
 800c1a2:	d11c      	bne.n	800c1de <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	3304      	adds	r3, #4
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7fd ffe3 	bl	800a174 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b2:	4b0f      	ldr	r3, [pc, #60]	; (800c1f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d903      	bls.n	800c1c2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1be:	4a0c      	ldr	r2, [pc, #48]	; (800c1f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c1c0:	6013      	str	r3, [r2, #0]
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	4413      	add	r3, r2
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	4a07      	ldr	r2, [pc, #28]	; (800c1ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c1d0:	441a      	add	r2, r3
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	3304      	adds	r3, #4
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	4610      	mov	r0, r2
 800c1da:	f7fd ff6e 	bl	800a0ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1de:	bf00      	nop
 800c1e0:	3720      	adds	r7, #32
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20001358 	.word	0x20001358
 800c1ec:	2000135c 	.word	0x2000135c
 800c1f0:	20001834 	.word	0x20001834

0800c1f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c1f4:	b480      	push	{r7}
 800c1f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c1f8:	4b07      	ldr	r3, [pc, #28]	; (800c218 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d004      	beq.n	800c20a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c200:	4b05      	ldr	r3, [pc, #20]	; (800c218 <pvTaskIncrementMutexHeldCount+0x24>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c206:	3201      	adds	r2, #1
 800c208:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c20a:	4b03      	ldr	r3, [pc, #12]	; (800c218 <pvTaskIncrementMutexHeldCount+0x24>)
 800c20c:	681b      	ldr	r3, [r3, #0]
	}
 800c20e:	4618      	mov	r0, r3
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr
 800c218:	20001358 	.word	0x20001358

0800c21c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b086      	sub	sp, #24
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
 800c228:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c22a:	f000 ff83 	bl	800d134 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c22e:	4b29      	ldr	r3, [pc, #164]	; (800c2d4 <xTaskNotifyWait+0xb8>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800c236:	b2db      	uxtb	r3, r3
 800c238:	2b02      	cmp	r3, #2
 800c23a:	d01c      	beq.n	800c276 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c23c:	4b25      	ldr	r3, [pc, #148]	; (800c2d4 <xTaskNotifyWait+0xb8>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800c244:	68fa      	ldr	r2, [r7, #12]
 800c246:	43d2      	mvns	r2, r2
 800c248:	400a      	ands	r2, r1
 800c24a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c24e:	4b21      	ldr	r3, [pc, #132]	; (800c2d4 <xTaskNotifyWait+0xb8>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2201      	movs	r2, #1
 800c254:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d00b      	beq.n	800c276 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c25e:	2101      	movs	r1, #1
 800c260:	6838      	ldr	r0, [r7, #0]
 800c262:	f000 f9dd 	bl	800c620 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c266:	4b1c      	ldr	r3, [pc, #112]	; (800c2d8 <xTaskNotifyWait+0xbc>)
 800c268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	f3bf 8f4f 	dsb	sy
 800c272:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c276:	f000 ff8d 	bl	800d194 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c27a:	f000 ff5b 	bl	800d134 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d005      	beq.n	800c290 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c284:	4b13      	ldr	r3, [pc, #76]	; (800c2d4 <xTaskNotifyWait+0xb8>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c290:	4b10      	ldr	r3, [pc, #64]	; (800c2d4 <xTaskNotifyWait+0xb8>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	2b02      	cmp	r3, #2
 800c29c:	d002      	beq.n	800c2a4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	617b      	str	r3, [r7, #20]
 800c2a2:	e00a      	b.n	800c2ba <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c2a4:	4b0b      	ldr	r3, [pc, #44]	; (800c2d4 <xTaskNotifyWait+0xb8>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800c2ac:	68ba      	ldr	r2, [r7, #8]
 800c2ae:	43d2      	mvns	r2, r2
 800c2b0:	400a      	ands	r2, r1
 800c2b2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c2ba:	4b06      	ldr	r3, [pc, #24]	; (800c2d4 <xTaskNotifyWait+0xb8>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800c2c4:	f000 ff66 	bl	800d194 <vPortExitCritical>

		return xReturn;
 800c2c8:	697b      	ldr	r3, [r7, #20]
	}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3718      	adds	r7, #24
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	20001358 	.word	0x20001358
 800c2d8:	e000ed04 	.word	0xe000ed04

0800c2dc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b08a      	sub	sp, #40	; 0x28
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	603b      	str	r3, [r7, #0]
 800c2e8:	4613      	mov	r3, r2
 800c2ea:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d10a      	bne.n	800c30c <xTaskGenericNotify+0x30>
	__asm volatile
 800c2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fa:	f383 8811 	msr	BASEPRI, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	61bb      	str	r3, [r7, #24]
}
 800c308:	bf00      	nop
 800c30a:	e7fe      	b.n	800c30a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c310:	f000 ff10 	bl	800d134 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d004      	beq.n	800c324 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c31a:	6a3b      	ldr	r3, [r7, #32]
 800c31c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c324:	6a3b      	ldr	r3, [r7, #32]
 800c326:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800c32a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c32c:	6a3b      	ldr	r3, [r7, #32]
 800c32e:	2202      	movs	r2, #2
 800c330:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800c334:	79fb      	ldrb	r3, [r7, #7]
 800c336:	2b04      	cmp	r3, #4
 800c338:	d82d      	bhi.n	800c396 <xTaskGenericNotify+0xba>
 800c33a:	a201      	add	r2, pc, #4	; (adr r2, 800c340 <xTaskGenericNotify+0x64>)
 800c33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c340:	0800c3b9 	.word	0x0800c3b9
 800c344:	0800c355 	.word	0x0800c355
 800c348:	0800c367 	.word	0x0800c367
 800c34c:	0800c377 	.word	0x0800c377
 800c350:	0800c381 	.word	0x0800c381
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c354:	6a3b      	ldr	r3, [r7, #32]
 800c356:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	431a      	orrs	r2, r3
 800c35e:	6a3b      	ldr	r3, [r7, #32]
 800c360:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c364:	e02b      	b.n	800c3be <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c366:	6a3b      	ldr	r3, [r7, #32]
 800c368:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c36c:	1c5a      	adds	r2, r3, #1
 800c36e:	6a3b      	ldr	r3, [r7, #32]
 800c370:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c374:	e023      	b.n	800c3be <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c376:	6a3b      	ldr	r3, [r7, #32]
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c37e:	e01e      	b.n	800c3be <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c380:	7ffb      	ldrb	r3, [r7, #31]
 800c382:	2b02      	cmp	r3, #2
 800c384:	d004      	beq.n	800c390 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c386:	6a3b      	ldr	r3, [r7, #32]
 800c388:	68ba      	ldr	r2, [r7, #8]
 800c38a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c38e:	e016      	b.n	800c3be <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800c390:	2300      	movs	r3, #0
 800c392:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c394:	e013      	b.n	800c3be <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c396:	6a3b      	ldr	r3, [r7, #32]
 800c398:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3a0:	d00c      	beq.n	800c3bc <xTaskGenericNotify+0xe0>
	__asm volatile
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	f383 8811 	msr	BASEPRI, r3
 800c3aa:	f3bf 8f6f 	isb	sy
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	617b      	str	r3, [r7, #20]
}
 800c3b4:	bf00      	nop
 800c3b6:	e7fe      	b.n	800c3b6 <xTaskGenericNotify+0xda>
					break;
 800c3b8:	bf00      	nop
 800c3ba:	e000      	b.n	800c3be <xTaskGenericNotify+0xe2>

					break;
 800c3bc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c3be:	7ffb      	ldrb	r3, [r7, #31]
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d13a      	bne.n	800c43a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3c4:	6a3b      	ldr	r3, [r7, #32]
 800c3c6:	3304      	adds	r3, #4
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7fd fed3 	bl	800a174 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c3ce:	6a3b      	ldr	r3, [r7, #32]
 800c3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3d2:	4b1d      	ldr	r3, [pc, #116]	; (800c448 <xTaskGenericNotify+0x16c>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d903      	bls.n	800c3e2 <xTaskGenericNotify+0x106>
 800c3da:	6a3b      	ldr	r3, [r7, #32]
 800c3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3de:	4a1a      	ldr	r2, [pc, #104]	; (800c448 <xTaskGenericNotify+0x16c>)
 800c3e0:	6013      	str	r3, [r2, #0]
 800c3e2:	6a3b      	ldr	r3, [r7, #32]
 800c3e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	4413      	add	r3, r2
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	4a17      	ldr	r2, [pc, #92]	; (800c44c <xTaskGenericNotify+0x170>)
 800c3f0:	441a      	add	r2, r3
 800c3f2:	6a3b      	ldr	r3, [r7, #32]
 800c3f4:	3304      	adds	r3, #4
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	4610      	mov	r0, r2
 800c3fa:	f7fd fe5e 	bl	800a0ba <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c3fe:	6a3b      	ldr	r3, [r7, #32]
 800c400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00a      	beq.n	800c41c <xTaskGenericNotify+0x140>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	613b      	str	r3, [r7, #16]
}
 800c418:	bf00      	nop
 800c41a:	e7fe      	b.n	800c41a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c41c:	6a3b      	ldr	r3, [r7, #32]
 800c41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c420:	4b0b      	ldr	r3, [pc, #44]	; (800c450 <xTaskGenericNotify+0x174>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c426:	429a      	cmp	r2, r3
 800c428:	d907      	bls.n	800c43a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c42a:	4b0a      	ldr	r3, [pc, #40]	; (800c454 <xTaskGenericNotify+0x178>)
 800c42c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c430:	601a      	str	r2, [r3, #0]
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c43a:	f000 feab 	bl	800d194 <vPortExitCritical>

		return xReturn;
 800c43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c440:	4618      	mov	r0, r3
 800c442:	3728      	adds	r7, #40	; 0x28
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	20001834 	.word	0x20001834
 800c44c:	2000135c 	.word	0x2000135c
 800c450:	20001358 	.word	0x20001358
 800c454:	e000ed04 	.word	0xe000ed04

0800c458 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b08e      	sub	sp, #56	; 0x38
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	603b      	str	r3, [r7, #0]
 800c464:	4613      	mov	r3, r2
 800c466:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c468:	2301      	movs	r3, #1
 800c46a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d10a      	bne.n	800c488 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c484:	bf00      	nop
 800c486:	e7fe      	b.n	800c486 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c488:	f000 ff36 	bl	800d2f8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c490:	f3ef 8211 	mrs	r2, BASEPRI
 800c494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	623a      	str	r2, [r7, #32]
 800c4a6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c4a8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d004      	beq.n	800c4bc <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4be:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800c4c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c8:	2202      	movs	r2, #2
 800c4ca:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800c4ce:	79fb      	ldrb	r3, [r7, #7]
 800c4d0:	2b04      	cmp	r3, #4
 800c4d2:	d82f      	bhi.n	800c534 <xTaskGenericNotifyFromISR+0xdc>
 800c4d4:	a201      	add	r2, pc, #4	; (adr r2, 800c4dc <xTaskGenericNotifyFromISR+0x84>)
 800c4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4da:	bf00      	nop
 800c4dc:	0800c557 	.word	0x0800c557
 800c4e0:	0800c4f1 	.word	0x0800c4f1
 800c4e4:	0800c503 	.word	0x0800c503
 800c4e8:	0800c513 	.word	0x0800c513
 800c4ec:	0800c51d 	.word	0x0800c51d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	431a      	orrs	r2, r3
 800c4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c500:	e02c      	b.n	800c55c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c504:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c508:	1c5a      	adds	r2, r3, #1
 800c50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c510:	e024      	b.n	800c55c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c514:	68ba      	ldr	r2, [r7, #8]
 800c516:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c51a:	e01f      	b.n	800c55c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c51c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c520:	2b02      	cmp	r3, #2
 800c522:	d004      	beq.n	800c52e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c526:	68ba      	ldr	r2, [r7, #8]
 800c528:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c52c:	e016      	b.n	800c55c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800c52e:	2300      	movs	r3, #0
 800c530:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c532:	e013      	b.n	800c55c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c536:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c53e:	d00c      	beq.n	800c55a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	61bb      	str	r3, [r7, #24]
}
 800c552:	bf00      	nop
 800c554:	e7fe      	b.n	800c554 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800c556:	bf00      	nop
 800c558:	e000      	b.n	800c55c <xTaskGenericNotifyFromISR+0x104>
					break;
 800c55a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c55c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c560:	2b01      	cmp	r3, #1
 800c562:	d146      	bne.n	800c5f2 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00a      	beq.n	800c582 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800c56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	617b      	str	r3, [r7, #20]
}
 800c57e:	bf00      	nop
 800c580:	e7fe      	b.n	800c580 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c582:	4b21      	ldr	r3, [pc, #132]	; (800c608 <xTaskGenericNotifyFromISR+0x1b0>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d11d      	bne.n	800c5c6 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58c:	3304      	adds	r3, #4
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fd fdf0 	bl	800a174 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c598:	4b1c      	ldr	r3, [pc, #112]	; (800c60c <xTaskGenericNotifyFromISR+0x1b4>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d903      	bls.n	800c5a8 <xTaskGenericNotifyFromISR+0x150>
 800c5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a4:	4a19      	ldr	r2, [pc, #100]	; (800c60c <xTaskGenericNotifyFromISR+0x1b4>)
 800c5a6:	6013      	str	r3, [r2, #0]
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4a16      	ldr	r2, [pc, #88]	; (800c610 <xTaskGenericNotifyFromISR+0x1b8>)
 800c5b6:	441a      	add	r2, r3
 800c5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ba:	3304      	adds	r3, #4
 800c5bc:	4619      	mov	r1, r3
 800c5be:	4610      	mov	r0, r2
 800c5c0:	f7fd fd7b 	bl	800a0ba <vListInsertEnd>
 800c5c4:	e005      	b.n	800c5d2 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c8:	3318      	adds	r3, #24
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	4811      	ldr	r0, [pc, #68]	; (800c614 <xTaskGenericNotifyFromISR+0x1bc>)
 800c5ce:	f7fd fd74 	bl	800a0ba <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5d6:	4b10      	ldr	r3, [pc, #64]	; (800c618 <xTaskGenericNotifyFromISR+0x1c0>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d908      	bls.n	800c5f2 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c5e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d002      	beq.n	800c5ec <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c5e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c5ec:	4b0b      	ldr	r3, [pc, #44]	; (800c61c <xTaskGenericNotifyFromISR+0x1c4>)
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	601a      	str	r2, [r3, #0]
 800c5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	f383 8811 	msr	BASEPRI, r3
}
 800c5fc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c600:	4618      	mov	r0, r3
 800c602:	3738      	adds	r7, #56	; 0x38
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	20001854 	.word	0x20001854
 800c60c:	20001834 	.word	0x20001834
 800c610:	2000135c 	.word	0x2000135c
 800c614:	200017ec 	.word	0x200017ec
 800c618:	20001358 	.word	0x20001358
 800c61c:	20001840 	.word	0x20001840

0800c620 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c62a:	4b21      	ldr	r3, [pc, #132]	; (800c6b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c630:	4b20      	ldr	r3, [pc, #128]	; (800c6b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	3304      	adds	r3, #4
 800c636:	4618      	mov	r0, r3
 800c638:	f7fd fd9c 	bl	800a174 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c642:	d10a      	bne.n	800c65a <prvAddCurrentTaskToDelayedList+0x3a>
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d007      	beq.n	800c65a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c64a:	4b1a      	ldr	r3, [pc, #104]	; (800c6b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	3304      	adds	r3, #4
 800c650:	4619      	mov	r1, r3
 800c652:	4819      	ldr	r0, [pc, #100]	; (800c6b8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c654:	f7fd fd31 	bl	800a0ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c658:	e026      	b.n	800c6a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	4413      	add	r3, r2
 800c660:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c662:	4b14      	ldr	r3, [pc, #80]	; (800c6b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	68ba      	ldr	r2, [r7, #8]
 800c668:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c66a:	68ba      	ldr	r2, [r7, #8]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d209      	bcs.n	800c686 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c672:	4b12      	ldr	r3, [pc, #72]	; (800c6bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	4b0f      	ldr	r3, [pc, #60]	; (800c6b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3304      	adds	r3, #4
 800c67c:	4619      	mov	r1, r3
 800c67e:	4610      	mov	r0, r2
 800c680:	f7fd fd3f 	bl	800a102 <vListInsert>
}
 800c684:	e010      	b.n	800c6a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c686:	4b0e      	ldr	r3, [pc, #56]	; (800c6c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	4b0a      	ldr	r3, [pc, #40]	; (800c6b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	3304      	adds	r3, #4
 800c690:	4619      	mov	r1, r3
 800c692:	4610      	mov	r0, r2
 800c694:	f7fd fd35 	bl	800a102 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c698:	4b0a      	ldr	r3, [pc, #40]	; (800c6c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	68ba      	ldr	r2, [r7, #8]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d202      	bcs.n	800c6a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c6a2:	4a08      	ldr	r2, [pc, #32]	; (800c6c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	6013      	str	r3, [r2, #0]
}
 800c6a8:	bf00      	nop
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	20001830 	.word	0x20001830
 800c6b4:	20001358 	.word	0x20001358
 800c6b8:	20001818 	.word	0x20001818
 800c6bc:	200017e8 	.word	0x200017e8
 800c6c0:	200017e4 	.word	0x200017e4
 800c6c4:	2000184c 	.word	0x2000184c

0800c6c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b08a      	sub	sp, #40	; 0x28
 800c6cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c6d2:	f000 fba1 	bl	800ce18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c6d6:	4b1c      	ldr	r3, [pc, #112]	; (800c748 <xTimerCreateTimerTask+0x80>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d021      	beq.n	800c722 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c6e6:	1d3a      	adds	r2, r7, #4
 800c6e8:	f107 0108 	add.w	r1, r7, #8
 800c6ec:	f107 030c 	add.w	r3, r7, #12
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7fd fc9b 	bl	800a02c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c6f6:	6879      	ldr	r1, [r7, #4]
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	68fa      	ldr	r2, [r7, #12]
 800c6fc:	9202      	str	r2, [sp, #8]
 800c6fe:	9301      	str	r3, [sp, #4]
 800c700:	2302      	movs	r3, #2
 800c702:	9300      	str	r3, [sp, #0]
 800c704:	2300      	movs	r3, #0
 800c706:	460a      	mov	r2, r1
 800c708:	4910      	ldr	r1, [pc, #64]	; (800c74c <xTimerCreateTimerTask+0x84>)
 800c70a:	4811      	ldr	r0, [pc, #68]	; (800c750 <xTimerCreateTimerTask+0x88>)
 800c70c:	f7fe fd14 	bl	800b138 <xTaskCreateStatic>
 800c710:	4603      	mov	r3, r0
 800c712:	4a10      	ldr	r2, [pc, #64]	; (800c754 <xTimerCreateTimerTask+0x8c>)
 800c714:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c716:	4b0f      	ldr	r3, [pc, #60]	; (800c754 <xTimerCreateTimerTask+0x8c>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d001      	beq.n	800c722 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c71e:	2301      	movs	r3, #1
 800c720:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d10a      	bne.n	800c73e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72c:	f383 8811 	msr	BASEPRI, r3
 800c730:	f3bf 8f6f 	isb	sy
 800c734:	f3bf 8f4f 	dsb	sy
 800c738:	613b      	str	r3, [r7, #16]
}
 800c73a:	bf00      	nop
 800c73c:	e7fe      	b.n	800c73c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c73e:	697b      	ldr	r3, [r7, #20]
}
 800c740:	4618      	mov	r0, r3
 800c742:	3718      	adds	r7, #24
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}
 800c748:	20001888 	.word	0x20001888
 800c74c:	08011da8 	.word	0x08011da8
 800c750:	0800c9c1 	.word	0x0800c9c1
 800c754:	2000188c 	.word	0x2000188c

0800c758 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b088      	sub	sp, #32
 800c75c:	af02      	add	r7, sp, #8
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
 800c764:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c766:	202c      	movs	r0, #44	; 0x2c
 800c768:	f000 fe06 	bl	800d378 <pvPortMalloc>
 800c76c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00d      	beq.n	800c790 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	2200      	movs	r2, #0
 800c778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	9301      	str	r3, [sp, #4]
 800c780:	6a3b      	ldr	r3, [r7, #32]
 800c782:	9300      	str	r3, [sp, #0]
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	68b9      	ldr	r1, [r7, #8]
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f000 f843 	bl	800c816 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c790:	697b      	ldr	r3, [r7, #20]
	}
 800c792:	4618      	mov	r0, r3
 800c794:	3718      	adds	r7, #24
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b08a      	sub	sp, #40	; 0x28
 800c79e:	af02      	add	r7, sp, #8
 800c7a0:	60f8      	str	r0, [r7, #12]
 800c7a2:	60b9      	str	r1, [r7, #8]
 800c7a4:	607a      	str	r2, [r7, #4]
 800c7a6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c7a8:	232c      	movs	r3, #44	; 0x2c
 800c7aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	2b2c      	cmp	r3, #44	; 0x2c
 800c7b0:	d00a      	beq.n	800c7c8 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b6:	f383 8811 	msr	BASEPRI, r3
 800c7ba:	f3bf 8f6f 	isb	sy
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	61bb      	str	r3, [r7, #24]
}
 800c7c4:	bf00      	nop
 800c7c6:	e7fe      	b.n	800c7c6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c7c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d10a      	bne.n	800c7e6 <xTimerCreateStatic+0x4c>
	__asm volatile
 800c7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	617b      	str	r3, [r7, #20]
}
 800c7e2:	bf00      	nop
 800c7e4:	e7fe      	b.n	800c7e4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d00d      	beq.n	800c80c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	2202      	movs	r2, #2
 800c7f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	9301      	str	r3, [sp, #4]
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	68b9      	ldr	r1, [r7, #8]
 800c806:	68f8      	ldr	r0, [r7, #12]
 800c808:	f000 f805 	bl	800c816 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c80c:	69fb      	ldr	r3, [r7, #28]
	}
 800c80e:	4618      	mov	r0, r3
 800c810:	3720      	adds	r7, #32
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b086      	sub	sp, #24
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	60f8      	str	r0, [r7, #12]
 800c81e:	60b9      	str	r1, [r7, #8]
 800c820:	607a      	str	r2, [r7, #4]
 800c822:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d10a      	bne.n	800c840 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82e:	f383 8811 	msr	BASEPRI, r3
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	617b      	str	r3, [r7, #20]
}
 800c83c:	bf00      	nop
 800c83e:	e7fe      	b.n	800c83e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c842:	2b00      	cmp	r3, #0
 800c844:	d01e      	beq.n	800c884 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c846:	f000 fae7 	bl	800ce18 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c858:	683a      	ldr	r2, [r7, #0]
 800c85a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85e:	6a3a      	ldr	r2, [r7, #32]
 800c860:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c864:	3304      	adds	r3, #4
 800c866:	4618      	mov	r0, r3
 800c868:	f7fd fc1a 	bl	800a0a0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d008      	beq.n	800c884 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c878:	f043 0304 	orr.w	r3, r3, #4
 800c87c:	b2da      	uxtb	r2, r3
 800c87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c880:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c884:	bf00      	nop
 800c886:	3718      	adds	r7, #24
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b08a      	sub	sp, #40	; 0x28
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
 800c898:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c89a:	2300      	movs	r3, #0
 800c89c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d10a      	bne.n	800c8ba <xTimerGenericCommand+0x2e>
	__asm volatile
 800c8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a8:	f383 8811 	msr	BASEPRI, r3
 800c8ac:	f3bf 8f6f 	isb	sy
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	623b      	str	r3, [r7, #32]
}
 800c8b6:	bf00      	nop
 800c8b8:	e7fe      	b.n	800c8b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c8ba:	4b1a      	ldr	r3, [pc, #104]	; (800c924 <xTimerGenericCommand+0x98>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d02a      	beq.n	800c918 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	2b05      	cmp	r3, #5
 800c8d2:	dc18      	bgt.n	800c906 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c8d4:	f7ff fb18 	bl	800bf08 <xTaskGetSchedulerState>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b02      	cmp	r3, #2
 800c8dc:	d109      	bne.n	800c8f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c8de:	4b11      	ldr	r3, [pc, #68]	; (800c924 <xTimerGenericCommand+0x98>)
 800c8e0:	6818      	ldr	r0, [r3, #0]
 800c8e2:	f107 0110 	add.w	r1, r7, #16
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8ea:	f7fd fecb 	bl	800a684 <xQueueGenericSend>
 800c8ee:	6278      	str	r0, [r7, #36]	; 0x24
 800c8f0:	e012      	b.n	800c918 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c8f2:	4b0c      	ldr	r3, [pc, #48]	; (800c924 <xTimerGenericCommand+0x98>)
 800c8f4:	6818      	ldr	r0, [r3, #0]
 800c8f6:	f107 0110 	add.w	r1, r7, #16
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f7fd fec1 	bl	800a684 <xQueueGenericSend>
 800c902:	6278      	str	r0, [r7, #36]	; 0x24
 800c904:	e008      	b.n	800c918 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c906:	4b07      	ldr	r3, [pc, #28]	; (800c924 <xTimerGenericCommand+0x98>)
 800c908:	6818      	ldr	r0, [r3, #0]
 800c90a:	f107 0110 	add.w	r1, r7, #16
 800c90e:	2300      	movs	r3, #0
 800c910:	683a      	ldr	r2, [r7, #0]
 800c912:	f7fd ffb5 	bl	800a880 <xQueueGenericSendFromISR>
 800c916:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3728      	adds	r7, #40	; 0x28
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	20001888 	.word	0x20001888

0800c928 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b088      	sub	sp, #32
 800c92c:	af02      	add	r7, sp, #8
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c932:	4b22      	ldr	r3, [pc, #136]	; (800c9bc <prvProcessExpiredTimer+0x94>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	3304      	adds	r3, #4
 800c940:	4618      	mov	r0, r3
 800c942:	f7fd fc17 	bl	800a174 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c94c:	f003 0304 	and.w	r3, r3, #4
 800c950:	2b00      	cmp	r3, #0
 800c952:	d022      	beq.n	800c99a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	699a      	ldr	r2, [r3, #24]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	18d1      	adds	r1, r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	6978      	ldr	r0, [r7, #20]
 800c962:	f000 f8d1 	bl	800cb08 <prvInsertTimerInActiveList>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d01f      	beq.n	800c9ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c96c:	2300      	movs	r3, #0
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	2300      	movs	r3, #0
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	2100      	movs	r1, #0
 800c976:	6978      	ldr	r0, [r7, #20]
 800c978:	f7ff ff88 	bl	800c88c <xTimerGenericCommand>
 800c97c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d113      	bne.n	800c9ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c988:	f383 8811 	msr	BASEPRI, r3
 800c98c:	f3bf 8f6f 	isb	sy
 800c990:	f3bf 8f4f 	dsb	sy
 800c994:	60fb      	str	r3, [r7, #12]
}
 800c996:	bf00      	nop
 800c998:	e7fe      	b.n	800c998 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9a0:	f023 0301 	bic.w	r3, r3, #1
 800c9a4:	b2da      	uxtb	r2, r3
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	6a1b      	ldr	r3, [r3, #32]
 800c9b0:	6978      	ldr	r0, [r7, #20]
 800c9b2:	4798      	blx	r3
}
 800c9b4:	bf00      	nop
 800c9b6:	3718      	adds	r7, #24
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	20001880 	.word	0x20001880

0800c9c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c9c8:	f107 0308 	add.w	r3, r7, #8
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f000 f857 	bl	800ca80 <prvGetNextExpireTime>
 800c9d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	68f8      	ldr	r0, [r7, #12]
 800c9da:	f000 f803 	bl	800c9e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c9de:	f000 f8d5 	bl	800cb8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c9e2:	e7f1      	b.n	800c9c8 <prvTimerTask+0x8>

0800c9e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c9ee:	f7fe fe7d 	bl	800b6ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c9f2:	f107 0308 	add.w	r3, r7, #8
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 f866 	bl	800cac8 <prvSampleTimeNow>
 800c9fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d130      	bne.n	800ca66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d10a      	bne.n	800ca20 <prvProcessTimerOrBlockTask+0x3c>
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d806      	bhi.n	800ca20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ca12:	f7fe fe79 	bl	800b708 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ca16:	68f9      	ldr	r1, [r7, #12]
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f7ff ff85 	bl	800c928 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ca1e:	e024      	b.n	800ca6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d008      	beq.n	800ca38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ca26:	4b13      	ldr	r3, [pc, #76]	; (800ca74 <prvProcessTimerOrBlockTask+0x90>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d101      	bne.n	800ca34 <prvProcessTimerOrBlockTask+0x50>
 800ca30:	2301      	movs	r3, #1
 800ca32:	e000      	b.n	800ca36 <prvProcessTimerOrBlockTask+0x52>
 800ca34:	2300      	movs	r3, #0
 800ca36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ca38:	4b0f      	ldr	r3, [pc, #60]	; (800ca78 <prvProcessTimerOrBlockTask+0x94>)
 800ca3a:	6818      	ldr	r0, [r3, #0]
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	1ad3      	subs	r3, r2, r3
 800ca42:	683a      	ldr	r2, [r7, #0]
 800ca44:	4619      	mov	r1, r3
 800ca46:	f7fe fb43 	bl	800b0d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ca4a:	f7fe fe5d 	bl	800b708 <xTaskResumeAll>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d10a      	bne.n	800ca6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ca54:	4b09      	ldr	r3, [pc, #36]	; (800ca7c <prvProcessTimerOrBlockTask+0x98>)
 800ca56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca5a:	601a      	str	r2, [r3, #0]
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	f3bf 8f6f 	isb	sy
}
 800ca64:	e001      	b.n	800ca6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ca66:	f7fe fe4f 	bl	800b708 <xTaskResumeAll>
}
 800ca6a:	bf00      	nop
 800ca6c:	3710      	adds	r7, #16
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}
 800ca72:	bf00      	nop
 800ca74:	20001884 	.word	0x20001884
 800ca78:	20001888 	.word	0x20001888
 800ca7c:	e000ed04 	.word	0xe000ed04

0800ca80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ca80:	b480      	push	{r7}
 800ca82:	b085      	sub	sp, #20
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ca88:	4b0e      	ldr	r3, [pc, #56]	; (800cac4 <prvGetNextExpireTime+0x44>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d101      	bne.n	800ca96 <prvGetNextExpireTime+0x16>
 800ca92:	2201      	movs	r2, #1
 800ca94:	e000      	b.n	800ca98 <prvGetNextExpireTime+0x18>
 800ca96:	2200      	movs	r2, #0
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d105      	bne.n	800cab0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800caa4:	4b07      	ldr	r3, [pc, #28]	; (800cac4 <prvGetNextExpireTime+0x44>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	60fb      	str	r3, [r7, #12]
 800caae:	e001      	b.n	800cab4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cab0:	2300      	movs	r3, #0
 800cab2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cab4:	68fb      	ldr	r3, [r7, #12]
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3714      	adds	r7, #20
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
 800cac4:	20001880 	.word	0x20001880

0800cac8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cad0:	f7fe feb8 	bl	800b844 <xTaskGetTickCount>
 800cad4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cad6:	4b0b      	ldr	r3, [pc, #44]	; (800cb04 <prvSampleTimeNow+0x3c>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	68fa      	ldr	r2, [r7, #12]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d205      	bcs.n	800caec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cae0:	f000 f936 	bl	800cd50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2201      	movs	r2, #1
 800cae8:	601a      	str	r2, [r3, #0]
 800caea:	e002      	b.n	800caf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800caf2:	4a04      	ldr	r2, [pc, #16]	; (800cb04 <prvSampleTimeNow+0x3c>)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800caf8:	68fb      	ldr	r3, [r7, #12]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	20001890 	.word	0x20001890

0800cb08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cb16:	2300      	movs	r3, #0
 800cb18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	68ba      	ldr	r2, [r7, #8]
 800cb1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	68fa      	ldr	r2, [r7, #12]
 800cb24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cb26:	68ba      	ldr	r2, [r7, #8]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d812      	bhi.n	800cb54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	1ad2      	subs	r2, r2, r3
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	699b      	ldr	r3, [r3, #24]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d302      	bcc.n	800cb42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	617b      	str	r3, [r7, #20]
 800cb40:	e01b      	b.n	800cb7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cb42:	4b10      	ldr	r3, [pc, #64]	; (800cb84 <prvInsertTimerInActiveList+0x7c>)
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	3304      	adds	r3, #4
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	4610      	mov	r0, r2
 800cb4e:	f7fd fad8 	bl	800a102 <vListInsert>
 800cb52:	e012      	b.n	800cb7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d206      	bcs.n	800cb6a <prvInsertTimerInActiveList+0x62>
 800cb5c:	68ba      	ldr	r2, [r7, #8]
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d302      	bcc.n	800cb6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cb64:	2301      	movs	r3, #1
 800cb66:	617b      	str	r3, [r7, #20]
 800cb68:	e007      	b.n	800cb7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb6a:	4b07      	ldr	r3, [pc, #28]	; (800cb88 <prvInsertTimerInActiveList+0x80>)
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	3304      	adds	r3, #4
 800cb72:	4619      	mov	r1, r3
 800cb74:	4610      	mov	r0, r2
 800cb76:	f7fd fac4 	bl	800a102 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cb7a:	697b      	ldr	r3, [r7, #20]
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3718      	adds	r7, #24
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	20001884 	.word	0x20001884
 800cb88:	20001880 	.word	0x20001880

0800cb8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b08e      	sub	sp, #56	; 0x38
 800cb90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb92:	e0ca      	b.n	800cd2a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	da18      	bge.n	800cbcc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cb9a:	1d3b      	adds	r3, r7, #4
 800cb9c:	3304      	adds	r3, #4
 800cb9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d10a      	bne.n	800cbbc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbaa:	f383 8811 	msr	BASEPRI, r3
 800cbae:	f3bf 8f6f 	isb	sy
 800cbb2:	f3bf 8f4f 	dsb	sy
 800cbb6:	61fb      	str	r3, [r7, #28]
}
 800cbb8:	bf00      	nop
 800cbba:	e7fe      	b.n	800cbba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbc2:	6850      	ldr	r0, [r2, #4]
 800cbc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbc6:	6892      	ldr	r2, [r2, #8]
 800cbc8:	4611      	mov	r1, r2
 800cbca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f2c0 80aa 	blt.w	800cd28 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbda:	695b      	ldr	r3, [r3, #20]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d004      	beq.n	800cbea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe2:	3304      	adds	r3, #4
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7fd fac5 	bl	800a174 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cbea:	463b      	mov	r3, r7
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7ff ff6b 	bl	800cac8 <prvSampleTimeNow>
 800cbf2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2b09      	cmp	r3, #9
 800cbf8:	f200 8097 	bhi.w	800cd2a <prvProcessReceivedCommands+0x19e>
 800cbfc:	a201      	add	r2, pc, #4	; (adr r2, 800cc04 <prvProcessReceivedCommands+0x78>)
 800cbfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc02:	bf00      	nop
 800cc04:	0800cc2d 	.word	0x0800cc2d
 800cc08:	0800cc2d 	.word	0x0800cc2d
 800cc0c:	0800cc2d 	.word	0x0800cc2d
 800cc10:	0800cca1 	.word	0x0800cca1
 800cc14:	0800ccb5 	.word	0x0800ccb5
 800cc18:	0800ccff 	.word	0x0800ccff
 800cc1c:	0800cc2d 	.word	0x0800cc2d
 800cc20:	0800cc2d 	.word	0x0800cc2d
 800cc24:	0800cca1 	.word	0x0800cca1
 800cc28:	0800ccb5 	.word	0x0800ccb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc32:	f043 0301 	orr.w	r3, r3, #1
 800cc36:	b2da      	uxtb	r2, r3
 800cc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cc3e:	68ba      	ldr	r2, [r7, #8]
 800cc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc42:	699b      	ldr	r3, [r3, #24]
 800cc44:	18d1      	adds	r1, r2, r3
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc4c:	f7ff ff5c 	bl	800cb08 <prvInsertTimerInActiveList>
 800cc50:	4603      	mov	r3, r0
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d069      	beq.n	800cd2a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc58:	6a1b      	ldr	r3, [r3, #32]
 800cc5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc64:	f003 0304 	and.w	r3, r3, #4
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d05e      	beq.n	800cd2a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc70:	699b      	ldr	r3, [r3, #24]
 800cc72:	441a      	add	r2, r3
 800cc74:	2300      	movs	r3, #0
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	2300      	movs	r3, #0
 800cc7a:	2100      	movs	r1, #0
 800cc7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc7e:	f7ff fe05 	bl	800c88c <xTimerGenericCommand>
 800cc82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cc84:	6a3b      	ldr	r3, [r7, #32]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d14f      	bne.n	800cd2a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8e:	f383 8811 	msr	BASEPRI, r3
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	f3bf 8f4f 	dsb	sy
 800cc9a:	61bb      	str	r3, [r7, #24]
}
 800cc9c:	bf00      	nop
 800cc9e:	e7fe      	b.n	800cc9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cca6:	f023 0301 	bic.w	r3, r3, #1
 800ccaa:	b2da      	uxtb	r2, r3
 800ccac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ccb2:	e03a      	b.n	800cd2a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ccb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccba:	f043 0301 	orr.w	r3, r3, #1
 800ccbe:	b2da      	uxtb	r2, r3
 800ccc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccce:	699b      	ldr	r3, [r3, #24]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d10a      	bne.n	800ccea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ccd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd8:	f383 8811 	msr	BASEPRI, r3
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	617b      	str	r3, [r7, #20]
}
 800cce6:	bf00      	nop
 800cce8:	e7fe      	b.n	800cce8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ccea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccec:	699a      	ldr	r2, [r3, #24]
 800ccee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf0:	18d1      	adds	r1, r2, r3
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccf8:	f7ff ff06 	bl	800cb08 <prvInsertTimerInActiveList>
					break;
 800ccfc:	e015      	b.n	800cd2a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ccfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd04:	f003 0302 	and.w	r3, r3, #2
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d103      	bne.n	800cd14 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cd0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd0e:	f000 fbff 	bl	800d510 <vPortFree>
 800cd12:	e00a      	b.n	800cd2a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd1a:	f023 0301 	bic.w	r3, r3, #1
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cd26:	e000      	b.n	800cd2a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cd28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd2a:	4b08      	ldr	r3, [pc, #32]	; (800cd4c <prvProcessReceivedCommands+0x1c0>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	1d39      	adds	r1, r7, #4
 800cd30:	2200      	movs	r2, #0
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fd fe40 	bl	800a9b8 <xQueueReceive>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f47f af2a 	bne.w	800cb94 <prvProcessReceivedCommands+0x8>
	}
}
 800cd40:	bf00      	nop
 800cd42:	bf00      	nop
 800cd44:	3730      	adds	r7, #48	; 0x30
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	20001888 	.word	0x20001888

0800cd50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b088      	sub	sp, #32
 800cd54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cd56:	e048      	b.n	800cdea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd58:	4b2d      	ldr	r3, [pc, #180]	; (800ce10 <prvSwitchTimerLists+0xc0>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd62:	4b2b      	ldr	r3, [pc, #172]	; (800ce10 <prvSwitchTimerLists+0xc0>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fd f9ff 	bl	800a174 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	6a1b      	ldr	r3, [r3, #32]
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd84:	f003 0304 	and.w	r3, r3, #4
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d02e      	beq.n	800cdea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	699b      	ldr	r3, [r3, #24]
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	4413      	add	r3, r2
 800cd94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cd96:	68ba      	ldr	r2, [r7, #8]
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d90e      	bls.n	800cdbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	68fa      	ldr	r2, [r7, #12]
 800cda8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cdaa:	4b19      	ldr	r3, [pc, #100]	; (800ce10 <prvSwitchTimerLists+0xc0>)
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	3304      	adds	r3, #4
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	f7fd f9a4 	bl	800a102 <vListInsert>
 800cdba:	e016      	b.n	800cdea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	693a      	ldr	r2, [r7, #16]
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f7ff fd60 	bl	800c88c <xTimerGenericCommand>
 800cdcc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d10a      	bne.n	800cdea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd8:	f383 8811 	msr	BASEPRI, r3
 800cddc:	f3bf 8f6f 	isb	sy
 800cde0:	f3bf 8f4f 	dsb	sy
 800cde4:	603b      	str	r3, [r7, #0]
}
 800cde6:	bf00      	nop
 800cde8:	e7fe      	b.n	800cde8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cdea:	4b09      	ldr	r3, [pc, #36]	; (800ce10 <prvSwitchTimerLists+0xc0>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d1b1      	bne.n	800cd58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cdf4:	4b06      	ldr	r3, [pc, #24]	; (800ce10 <prvSwitchTimerLists+0xc0>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cdfa:	4b06      	ldr	r3, [pc, #24]	; (800ce14 <prvSwitchTimerLists+0xc4>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a04      	ldr	r2, [pc, #16]	; (800ce10 <prvSwitchTimerLists+0xc0>)
 800ce00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ce02:	4a04      	ldr	r2, [pc, #16]	; (800ce14 <prvSwitchTimerLists+0xc4>)
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	6013      	str	r3, [r2, #0]
}
 800ce08:	bf00      	nop
 800ce0a:	3718      	adds	r7, #24
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	20001880 	.word	0x20001880
 800ce14:	20001884 	.word	0x20001884

0800ce18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ce1e:	f000 f989 	bl	800d134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ce22:	4b15      	ldr	r3, [pc, #84]	; (800ce78 <prvCheckForValidListAndQueue+0x60>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d120      	bne.n	800ce6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ce2a:	4814      	ldr	r0, [pc, #80]	; (800ce7c <prvCheckForValidListAndQueue+0x64>)
 800ce2c:	f7fd f918 	bl	800a060 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ce30:	4813      	ldr	r0, [pc, #76]	; (800ce80 <prvCheckForValidListAndQueue+0x68>)
 800ce32:	f7fd f915 	bl	800a060 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ce36:	4b13      	ldr	r3, [pc, #76]	; (800ce84 <prvCheckForValidListAndQueue+0x6c>)
 800ce38:	4a10      	ldr	r2, [pc, #64]	; (800ce7c <prvCheckForValidListAndQueue+0x64>)
 800ce3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ce3c:	4b12      	ldr	r3, [pc, #72]	; (800ce88 <prvCheckForValidListAndQueue+0x70>)
 800ce3e:	4a10      	ldr	r2, [pc, #64]	; (800ce80 <prvCheckForValidListAndQueue+0x68>)
 800ce40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce42:	2300      	movs	r3, #0
 800ce44:	9300      	str	r3, [sp, #0]
 800ce46:	4b11      	ldr	r3, [pc, #68]	; (800ce8c <prvCheckForValidListAndQueue+0x74>)
 800ce48:	4a11      	ldr	r2, [pc, #68]	; (800ce90 <prvCheckForValidListAndQueue+0x78>)
 800ce4a:	2110      	movs	r1, #16
 800ce4c:	200a      	movs	r0, #10
 800ce4e:	f7fd fa23 	bl	800a298 <xQueueGenericCreateStatic>
 800ce52:	4603      	mov	r3, r0
 800ce54:	4a08      	ldr	r2, [pc, #32]	; (800ce78 <prvCheckForValidListAndQueue+0x60>)
 800ce56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ce58:	4b07      	ldr	r3, [pc, #28]	; (800ce78 <prvCheckForValidListAndQueue+0x60>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d005      	beq.n	800ce6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ce60:	4b05      	ldr	r3, [pc, #20]	; (800ce78 <prvCheckForValidListAndQueue+0x60>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	490b      	ldr	r1, [pc, #44]	; (800ce94 <prvCheckForValidListAndQueue+0x7c>)
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fe f8de 	bl	800b028 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce6c:	f000 f992 	bl	800d194 <vPortExitCritical>
}
 800ce70:	bf00      	nop
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	20001888 	.word	0x20001888
 800ce7c:	20001858 	.word	0x20001858
 800ce80:	2000186c 	.word	0x2000186c
 800ce84:	20001880 	.word	0x20001880
 800ce88:	20001884 	.word	0x20001884
 800ce8c:	20001934 	.word	0x20001934
 800ce90:	20001894 	.word	0x20001894
 800ce94:	08011db0 	.word	0x08011db0

0800ce98 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d10a      	bne.n	800cec0 <pvTimerGetTimerID+0x28>
	__asm volatile
 800ceaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceae:	f383 8811 	msr	BASEPRI, r3
 800ceb2:	f3bf 8f6f 	isb	sy
 800ceb6:	f3bf 8f4f 	dsb	sy
 800ceba:	60fb      	str	r3, [r7, #12]
}
 800cebc:	bf00      	nop
 800cebe:	e7fe      	b.n	800cebe <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800cec0:	f000 f938 	bl	800d134 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	69db      	ldr	r3, [r3, #28]
 800cec8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ceca:	f000 f963 	bl	800d194 <vPortExitCritical>

	return pvReturn;
 800cece:	693b      	ldr	r3, [r7, #16]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3718      	adds	r7, #24
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ced8:	b480      	push	{r7}
 800ceda:	b085      	sub	sp, #20
 800cedc:	af00      	add	r7, sp, #0
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	3b04      	subs	r3, #4
 800cee8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	3b04      	subs	r3, #4
 800cef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	f023 0201 	bic.w	r2, r3, #1
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	3b04      	subs	r3, #4
 800cf06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf08:	4a0c      	ldr	r2, [pc, #48]	; (800cf3c <pxPortInitialiseStack+0x64>)
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	3b14      	subs	r3, #20
 800cf12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	3b04      	subs	r3, #4
 800cf1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f06f 0202 	mvn.w	r2, #2
 800cf26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	3b20      	subs	r3, #32
 800cf2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3714      	adds	r7, #20
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr
 800cf3c:	0800cf41 	.word	0x0800cf41

0800cf40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cf4a:	4b12      	ldr	r3, [pc, #72]	; (800cf94 <prvTaskExitError+0x54>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf52:	d00a      	beq.n	800cf6a <prvTaskExitError+0x2a>
	__asm volatile
 800cf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	60fb      	str	r3, [r7, #12]
}
 800cf66:	bf00      	nop
 800cf68:	e7fe      	b.n	800cf68 <prvTaskExitError+0x28>
	__asm volatile
 800cf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6e:	f383 8811 	msr	BASEPRI, r3
 800cf72:	f3bf 8f6f 	isb	sy
 800cf76:	f3bf 8f4f 	dsb	sy
 800cf7a:	60bb      	str	r3, [r7, #8]
}
 800cf7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cf7e:	bf00      	nop
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d0fc      	beq.n	800cf80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cf86:	bf00      	nop
 800cf88:	bf00      	nop
 800cf8a:	3714      	adds	r7, #20
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr
 800cf94:	2000009c 	.word	0x2000009c
	...

0800cfa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cfa0:	4b07      	ldr	r3, [pc, #28]	; (800cfc0 <pxCurrentTCBConst2>)
 800cfa2:	6819      	ldr	r1, [r3, #0]
 800cfa4:	6808      	ldr	r0, [r1, #0]
 800cfa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfaa:	f380 8809 	msr	PSP, r0
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f04f 0000 	mov.w	r0, #0
 800cfb6:	f380 8811 	msr	BASEPRI, r0
 800cfba:	4770      	bx	lr
 800cfbc:	f3af 8000 	nop.w

0800cfc0 <pxCurrentTCBConst2>:
 800cfc0:	20001358 	.word	0x20001358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cfc4:	bf00      	nop
 800cfc6:	bf00      	nop

0800cfc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cfc8:	4808      	ldr	r0, [pc, #32]	; (800cfec <prvPortStartFirstTask+0x24>)
 800cfca:	6800      	ldr	r0, [r0, #0]
 800cfcc:	6800      	ldr	r0, [r0, #0]
 800cfce:	f380 8808 	msr	MSP, r0
 800cfd2:	f04f 0000 	mov.w	r0, #0
 800cfd6:	f380 8814 	msr	CONTROL, r0
 800cfda:	b662      	cpsie	i
 800cfdc:	b661      	cpsie	f
 800cfde:	f3bf 8f4f 	dsb	sy
 800cfe2:	f3bf 8f6f 	isb	sy
 800cfe6:	df00      	svc	0
 800cfe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cfea:	bf00      	nop
 800cfec:	e000ed08 	.word	0xe000ed08

0800cff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b086      	sub	sp, #24
 800cff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cff6:	4b46      	ldr	r3, [pc, #280]	; (800d110 <xPortStartScheduler+0x120>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4a46      	ldr	r2, [pc, #280]	; (800d114 <xPortStartScheduler+0x124>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d10a      	bne.n	800d016 <xPortStartScheduler+0x26>
	__asm volatile
 800d000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	613b      	str	r3, [r7, #16]
}
 800d012:	bf00      	nop
 800d014:	e7fe      	b.n	800d014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d016:	4b3e      	ldr	r3, [pc, #248]	; (800d110 <xPortStartScheduler+0x120>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a3f      	ldr	r2, [pc, #252]	; (800d118 <xPortStartScheduler+0x128>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d10a      	bne.n	800d036 <xPortStartScheduler+0x46>
	__asm volatile
 800d020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d024:	f383 8811 	msr	BASEPRI, r3
 800d028:	f3bf 8f6f 	isb	sy
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	60fb      	str	r3, [r7, #12]
}
 800d032:	bf00      	nop
 800d034:	e7fe      	b.n	800d034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d036:	4b39      	ldr	r3, [pc, #228]	; (800d11c <xPortStartScheduler+0x12c>)
 800d038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	22ff      	movs	r2, #255	; 0xff
 800d046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	b2db      	uxtb	r3, r3
 800d04e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d050:	78fb      	ldrb	r3, [r7, #3]
 800d052:	b2db      	uxtb	r3, r3
 800d054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d058:	b2da      	uxtb	r2, r3
 800d05a:	4b31      	ldr	r3, [pc, #196]	; (800d120 <xPortStartScheduler+0x130>)
 800d05c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d05e:	4b31      	ldr	r3, [pc, #196]	; (800d124 <xPortStartScheduler+0x134>)
 800d060:	2207      	movs	r2, #7
 800d062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d064:	e009      	b.n	800d07a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d066:	4b2f      	ldr	r3, [pc, #188]	; (800d124 <xPortStartScheduler+0x134>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	3b01      	subs	r3, #1
 800d06c:	4a2d      	ldr	r2, [pc, #180]	; (800d124 <xPortStartScheduler+0x134>)
 800d06e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d070:	78fb      	ldrb	r3, [r7, #3]
 800d072:	b2db      	uxtb	r3, r3
 800d074:	005b      	lsls	r3, r3, #1
 800d076:	b2db      	uxtb	r3, r3
 800d078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d07a:	78fb      	ldrb	r3, [r7, #3]
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d082:	2b80      	cmp	r3, #128	; 0x80
 800d084:	d0ef      	beq.n	800d066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d086:	4b27      	ldr	r3, [pc, #156]	; (800d124 <xPortStartScheduler+0x134>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f1c3 0307 	rsb	r3, r3, #7
 800d08e:	2b04      	cmp	r3, #4
 800d090:	d00a      	beq.n	800d0a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d096:	f383 8811 	msr	BASEPRI, r3
 800d09a:	f3bf 8f6f 	isb	sy
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	60bb      	str	r3, [r7, #8]
}
 800d0a4:	bf00      	nop
 800d0a6:	e7fe      	b.n	800d0a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d0a8:	4b1e      	ldr	r3, [pc, #120]	; (800d124 <xPortStartScheduler+0x134>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	021b      	lsls	r3, r3, #8
 800d0ae:	4a1d      	ldr	r2, [pc, #116]	; (800d124 <xPortStartScheduler+0x134>)
 800d0b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d0b2:	4b1c      	ldr	r3, [pc, #112]	; (800d124 <xPortStartScheduler+0x134>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d0ba:	4a1a      	ldr	r2, [pc, #104]	; (800d124 <xPortStartScheduler+0x134>)
 800d0bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d0c6:	4b18      	ldr	r3, [pc, #96]	; (800d128 <xPortStartScheduler+0x138>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4a17      	ldr	r2, [pc, #92]	; (800d128 <xPortStartScheduler+0x138>)
 800d0cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d0d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d0d2:	4b15      	ldr	r3, [pc, #84]	; (800d128 <xPortStartScheduler+0x138>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a14      	ldr	r2, [pc, #80]	; (800d128 <xPortStartScheduler+0x138>)
 800d0d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d0dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d0de:	f000 f8dd 	bl	800d29c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d0e2:	4b12      	ldr	r3, [pc, #72]	; (800d12c <xPortStartScheduler+0x13c>)
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d0e8:	f000 f8fc 	bl	800d2e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d0ec:	4b10      	ldr	r3, [pc, #64]	; (800d130 <xPortStartScheduler+0x140>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a0f      	ldr	r2, [pc, #60]	; (800d130 <xPortStartScheduler+0x140>)
 800d0f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d0f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d0f8:	f7ff ff66 	bl	800cfc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d0fc:	f7fe fc7e 	bl	800b9fc <vTaskSwitchContext>
	prvTaskExitError();
 800d100:	f7ff ff1e 	bl	800cf40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3718      	adds	r7, #24
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	e000ed00 	.word	0xe000ed00
 800d114:	410fc271 	.word	0x410fc271
 800d118:	410fc270 	.word	0x410fc270
 800d11c:	e000e400 	.word	0xe000e400
 800d120:	20001984 	.word	0x20001984
 800d124:	20001988 	.word	0x20001988
 800d128:	e000ed20 	.word	0xe000ed20
 800d12c:	2000009c 	.word	0x2000009c
 800d130:	e000ef34 	.word	0xe000ef34

0800d134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
	__asm volatile
 800d13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13e:	f383 8811 	msr	BASEPRI, r3
 800d142:	f3bf 8f6f 	isb	sy
 800d146:	f3bf 8f4f 	dsb	sy
 800d14a:	607b      	str	r3, [r7, #4]
}
 800d14c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d14e:	4b0f      	ldr	r3, [pc, #60]	; (800d18c <vPortEnterCritical+0x58>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	3301      	adds	r3, #1
 800d154:	4a0d      	ldr	r2, [pc, #52]	; (800d18c <vPortEnterCritical+0x58>)
 800d156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d158:	4b0c      	ldr	r3, [pc, #48]	; (800d18c <vPortEnterCritical+0x58>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d10f      	bne.n	800d180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d160:	4b0b      	ldr	r3, [pc, #44]	; (800d190 <vPortEnterCritical+0x5c>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	b2db      	uxtb	r3, r3
 800d166:	2b00      	cmp	r3, #0
 800d168:	d00a      	beq.n	800d180 <vPortEnterCritical+0x4c>
	__asm volatile
 800d16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16e:	f383 8811 	msr	BASEPRI, r3
 800d172:	f3bf 8f6f 	isb	sy
 800d176:	f3bf 8f4f 	dsb	sy
 800d17a:	603b      	str	r3, [r7, #0]
}
 800d17c:	bf00      	nop
 800d17e:	e7fe      	b.n	800d17e <vPortEnterCritical+0x4a>
	}
}
 800d180:	bf00      	nop
 800d182:	370c      	adds	r7, #12
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr
 800d18c:	2000009c 	.word	0x2000009c
 800d190:	e000ed04 	.word	0xe000ed04

0800d194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d19a:	4b12      	ldr	r3, [pc, #72]	; (800d1e4 <vPortExitCritical+0x50>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d10a      	bne.n	800d1b8 <vPortExitCritical+0x24>
	__asm volatile
 800d1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a6:	f383 8811 	msr	BASEPRI, r3
 800d1aa:	f3bf 8f6f 	isb	sy
 800d1ae:	f3bf 8f4f 	dsb	sy
 800d1b2:	607b      	str	r3, [r7, #4]
}
 800d1b4:	bf00      	nop
 800d1b6:	e7fe      	b.n	800d1b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d1b8:	4b0a      	ldr	r3, [pc, #40]	; (800d1e4 <vPortExitCritical+0x50>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	3b01      	subs	r3, #1
 800d1be:	4a09      	ldr	r2, [pc, #36]	; (800d1e4 <vPortExitCritical+0x50>)
 800d1c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d1c2:	4b08      	ldr	r3, [pc, #32]	; (800d1e4 <vPortExitCritical+0x50>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d105      	bne.n	800d1d6 <vPortExitCritical+0x42>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	f383 8811 	msr	BASEPRI, r3
}
 800d1d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d1d6:	bf00      	nop
 800d1d8:	370c      	adds	r7, #12
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr
 800d1e2:	bf00      	nop
 800d1e4:	2000009c 	.word	0x2000009c
	...

0800d1f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d1f0:	f3ef 8009 	mrs	r0, PSP
 800d1f4:	f3bf 8f6f 	isb	sy
 800d1f8:	4b15      	ldr	r3, [pc, #84]	; (800d250 <pxCurrentTCBConst>)
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	f01e 0f10 	tst.w	lr, #16
 800d200:	bf08      	it	eq
 800d202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d20a:	6010      	str	r0, [r2, #0]
 800d20c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d210:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d214:	f380 8811 	msr	BASEPRI, r0
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	f3bf 8f6f 	isb	sy
 800d220:	f7fe fbec 	bl	800b9fc <vTaskSwitchContext>
 800d224:	f04f 0000 	mov.w	r0, #0
 800d228:	f380 8811 	msr	BASEPRI, r0
 800d22c:	bc09      	pop	{r0, r3}
 800d22e:	6819      	ldr	r1, [r3, #0]
 800d230:	6808      	ldr	r0, [r1, #0]
 800d232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d236:	f01e 0f10 	tst.w	lr, #16
 800d23a:	bf08      	it	eq
 800d23c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d240:	f380 8809 	msr	PSP, r0
 800d244:	f3bf 8f6f 	isb	sy
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop
 800d24c:	f3af 8000 	nop.w

0800d250 <pxCurrentTCBConst>:
 800d250:	20001358 	.word	0x20001358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d254:	bf00      	nop
 800d256:	bf00      	nop

0800d258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
	__asm volatile
 800d25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d262:	f383 8811 	msr	BASEPRI, r3
 800d266:	f3bf 8f6f 	isb	sy
 800d26a:	f3bf 8f4f 	dsb	sy
 800d26e:	607b      	str	r3, [r7, #4]
}
 800d270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d272:	f7fe fb09 	bl	800b888 <xTaskIncrementTick>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d003      	beq.n	800d284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d27c:	4b06      	ldr	r3, [pc, #24]	; (800d298 <xPortSysTickHandler+0x40>)
 800d27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d282:	601a      	str	r2, [r3, #0]
 800d284:	2300      	movs	r3, #0
 800d286:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	f383 8811 	msr	BASEPRI, r3
}
 800d28e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d290:	bf00      	nop
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	e000ed04 	.word	0xe000ed04

0800d29c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d29c:	b480      	push	{r7}
 800d29e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d2a0:	4b0b      	ldr	r3, [pc, #44]	; (800d2d0 <vPortSetupTimerInterrupt+0x34>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d2a6:	4b0b      	ldr	r3, [pc, #44]	; (800d2d4 <vPortSetupTimerInterrupt+0x38>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d2ac:	4b0a      	ldr	r3, [pc, #40]	; (800d2d8 <vPortSetupTimerInterrupt+0x3c>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a0a      	ldr	r2, [pc, #40]	; (800d2dc <vPortSetupTimerInterrupt+0x40>)
 800d2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d2b6:	099b      	lsrs	r3, r3, #6
 800d2b8:	4a09      	ldr	r2, [pc, #36]	; (800d2e0 <vPortSetupTimerInterrupt+0x44>)
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d2be:	4b04      	ldr	r3, [pc, #16]	; (800d2d0 <vPortSetupTimerInterrupt+0x34>)
 800d2c0:	2207      	movs	r2, #7
 800d2c2:	601a      	str	r2, [r3, #0]
}
 800d2c4:	bf00      	nop
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr
 800d2ce:	bf00      	nop
 800d2d0:	e000e010 	.word	0xe000e010
 800d2d4:	e000e018 	.word	0xe000e018
 800d2d8:	20000090 	.word	0x20000090
 800d2dc:	10624dd3 	.word	0x10624dd3
 800d2e0:	e000e014 	.word	0xe000e014

0800d2e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d2e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d2f4 <vPortEnableVFP+0x10>
 800d2e8:	6801      	ldr	r1, [r0, #0]
 800d2ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d2ee:	6001      	str	r1, [r0, #0]
 800d2f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d2f2:	bf00      	nop
 800d2f4:	e000ed88 	.word	0xe000ed88

0800d2f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d2fe:	f3ef 8305 	mrs	r3, IPSR
 800d302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2b0f      	cmp	r3, #15
 800d308:	d914      	bls.n	800d334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d30a:	4a17      	ldr	r2, [pc, #92]	; (800d368 <vPortValidateInterruptPriority+0x70>)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	4413      	add	r3, r2
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d314:	4b15      	ldr	r3, [pc, #84]	; (800d36c <vPortValidateInterruptPriority+0x74>)
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	7afa      	ldrb	r2, [r7, #11]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d20a      	bcs.n	800d334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d322:	f383 8811 	msr	BASEPRI, r3
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	607b      	str	r3, [r7, #4]
}
 800d330:	bf00      	nop
 800d332:	e7fe      	b.n	800d332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d334:	4b0e      	ldr	r3, [pc, #56]	; (800d370 <vPortValidateInterruptPriority+0x78>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d33c:	4b0d      	ldr	r3, [pc, #52]	; (800d374 <vPortValidateInterruptPriority+0x7c>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	429a      	cmp	r2, r3
 800d342:	d90a      	bls.n	800d35a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d348:	f383 8811 	msr	BASEPRI, r3
 800d34c:	f3bf 8f6f 	isb	sy
 800d350:	f3bf 8f4f 	dsb	sy
 800d354:	603b      	str	r3, [r7, #0]
}
 800d356:	bf00      	nop
 800d358:	e7fe      	b.n	800d358 <vPortValidateInterruptPriority+0x60>
	}
 800d35a:	bf00      	nop
 800d35c:	3714      	adds	r7, #20
 800d35e:	46bd      	mov	sp, r7
 800d360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d364:	4770      	bx	lr
 800d366:	bf00      	nop
 800d368:	e000e3f0 	.word	0xe000e3f0
 800d36c:	20001984 	.word	0x20001984
 800d370:	e000ed0c 	.word	0xe000ed0c
 800d374:	20001988 	.word	0x20001988

0800d378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b08a      	sub	sp, #40	; 0x28
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d380:	2300      	movs	r3, #0
 800d382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d384:	f7fe f9b2 	bl	800b6ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d388:	4b5b      	ldr	r3, [pc, #364]	; (800d4f8 <pvPortMalloc+0x180>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d101      	bne.n	800d394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d390:	f000 f920 	bl	800d5d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d394:	4b59      	ldr	r3, [pc, #356]	; (800d4fc <pvPortMalloc+0x184>)
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	4013      	ands	r3, r2
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f040 8093 	bne.w	800d4c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d01d      	beq.n	800d3e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d3a8:	2208      	movs	r2, #8
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f003 0307 	and.w	r3, r3, #7
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d014      	beq.n	800d3e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f023 0307 	bic.w	r3, r3, #7
 800d3c0:	3308      	adds	r3, #8
 800d3c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f003 0307 	and.w	r3, r3, #7
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00a      	beq.n	800d3e4 <pvPortMalloc+0x6c>
	__asm volatile
 800d3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d2:	f383 8811 	msr	BASEPRI, r3
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	f3bf 8f4f 	dsb	sy
 800d3de:	617b      	str	r3, [r7, #20]
}
 800d3e0:	bf00      	nop
 800d3e2:	e7fe      	b.n	800d3e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d06e      	beq.n	800d4c8 <pvPortMalloc+0x150>
 800d3ea:	4b45      	ldr	r3, [pc, #276]	; (800d500 <pvPortMalloc+0x188>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d869      	bhi.n	800d4c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d3f4:	4b43      	ldr	r3, [pc, #268]	; (800d504 <pvPortMalloc+0x18c>)
 800d3f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d3f8:	4b42      	ldr	r3, [pc, #264]	; (800d504 <pvPortMalloc+0x18c>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3fe:	e004      	b.n	800d40a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	429a      	cmp	r2, r3
 800d412:	d903      	bls.n	800d41c <pvPortMalloc+0xa4>
 800d414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1f1      	bne.n	800d400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d41c:	4b36      	ldr	r3, [pc, #216]	; (800d4f8 <pvPortMalloc+0x180>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d422:	429a      	cmp	r2, r3
 800d424:	d050      	beq.n	800d4c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d426:	6a3b      	ldr	r3, [r7, #32]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	2208      	movs	r2, #8
 800d42c:	4413      	add	r3, r2
 800d42e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	6a3b      	ldr	r3, [r7, #32]
 800d436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43a:	685a      	ldr	r2, [r3, #4]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	1ad2      	subs	r2, r2, r3
 800d440:	2308      	movs	r3, #8
 800d442:	005b      	lsls	r3, r3, #1
 800d444:	429a      	cmp	r2, r3
 800d446:	d91f      	bls.n	800d488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4413      	add	r3, r2
 800d44e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	f003 0307 	and.w	r3, r3, #7
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00a      	beq.n	800d470 <pvPortMalloc+0xf8>
	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	613b      	str	r3, [r7, #16]
}
 800d46c:	bf00      	nop
 800d46e:	e7fe      	b.n	800d46e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d472:	685a      	ldr	r2, [r3, #4]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	1ad2      	subs	r2, r2, r3
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d482:	69b8      	ldr	r0, [r7, #24]
 800d484:	f000 f908 	bl	800d698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d488:	4b1d      	ldr	r3, [pc, #116]	; (800d500 <pvPortMalloc+0x188>)
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	1ad3      	subs	r3, r2, r3
 800d492:	4a1b      	ldr	r2, [pc, #108]	; (800d500 <pvPortMalloc+0x188>)
 800d494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d496:	4b1a      	ldr	r3, [pc, #104]	; (800d500 <pvPortMalloc+0x188>)
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	4b1b      	ldr	r3, [pc, #108]	; (800d508 <pvPortMalloc+0x190>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d203      	bcs.n	800d4aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d4a2:	4b17      	ldr	r3, [pc, #92]	; (800d500 <pvPortMalloc+0x188>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4a18      	ldr	r2, [pc, #96]	; (800d508 <pvPortMalloc+0x190>)
 800d4a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ac:	685a      	ldr	r2, [r3, #4]
 800d4ae:	4b13      	ldr	r3, [pc, #76]	; (800d4fc <pvPortMalloc+0x184>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	431a      	orrs	r2, r3
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d4be:	4b13      	ldr	r3, [pc, #76]	; (800d50c <pvPortMalloc+0x194>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	4a11      	ldr	r2, [pc, #68]	; (800d50c <pvPortMalloc+0x194>)
 800d4c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d4c8:	f7fe f91e 	bl	800b708 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	f003 0307 	and.w	r3, r3, #7
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00a      	beq.n	800d4ec <pvPortMalloc+0x174>
	__asm volatile
 800d4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4da:	f383 8811 	msr	BASEPRI, r3
 800d4de:	f3bf 8f6f 	isb	sy
 800d4e2:	f3bf 8f4f 	dsb	sy
 800d4e6:	60fb      	str	r3, [r7, #12]
}
 800d4e8:	bf00      	nop
 800d4ea:	e7fe      	b.n	800d4ea <pvPortMalloc+0x172>
	return pvReturn;
 800d4ec:	69fb      	ldr	r3, [r7, #28]
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3728      	adds	r7, #40	; 0x28
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	20005594 	.word	0x20005594
 800d4fc:	200055a8 	.word	0x200055a8
 800d500:	20005598 	.word	0x20005598
 800d504:	2000558c 	.word	0x2000558c
 800d508:	2000559c 	.word	0x2000559c
 800d50c:	200055a0 	.word	0x200055a0

0800d510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d04d      	beq.n	800d5be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d522:	2308      	movs	r3, #8
 800d524:	425b      	negs	r3, r3
 800d526:	697a      	ldr	r2, [r7, #20]
 800d528:	4413      	add	r3, r2
 800d52a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	685a      	ldr	r2, [r3, #4]
 800d534:	4b24      	ldr	r3, [pc, #144]	; (800d5c8 <vPortFree+0xb8>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4013      	ands	r3, r2
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d10a      	bne.n	800d554 <vPortFree+0x44>
	__asm volatile
 800d53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d542:	f383 8811 	msr	BASEPRI, r3
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	60fb      	str	r3, [r7, #12]
}
 800d550:	bf00      	nop
 800d552:	e7fe      	b.n	800d552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d00a      	beq.n	800d572 <vPortFree+0x62>
	__asm volatile
 800d55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d560:	f383 8811 	msr	BASEPRI, r3
 800d564:	f3bf 8f6f 	isb	sy
 800d568:	f3bf 8f4f 	dsb	sy
 800d56c:	60bb      	str	r3, [r7, #8]
}
 800d56e:	bf00      	nop
 800d570:	e7fe      	b.n	800d570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	685a      	ldr	r2, [r3, #4]
 800d576:	4b14      	ldr	r3, [pc, #80]	; (800d5c8 <vPortFree+0xb8>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4013      	ands	r3, r2
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d01e      	beq.n	800d5be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d11a      	bne.n	800d5be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	685a      	ldr	r2, [r3, #4]
 800d58c:	4b0e      	ldr	r3, [pc, #56]	; (800d5c8 <vPortFree+0xb8>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	43db      	mvns	r3, r3
 800d592:	401a      	ands	r2, r3
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d598:	f7fe f8a8 	bl	800b6ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	685a      	ldr	r2, [r3, #4]
 800d5a0:	4b0a      	ldr	r3, [pc, #40]	; (800d5cc <vPortFree+0xbc>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	4a09      	ldr	r2, [pc, #36]	; (800d5cc <vPortFree+0xbc>)
 800d5a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d5aa:	6938      	ldr	r0, [r7, #16]
 800d5ac:	f000 f874 	bl	800d698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d5b0:	4b07      	ldr	r3, [pc, #28]	; (800d5d0 <vPortFree+0xc0>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	4a06      	ldr	r2, [pc, #24]	; (800d5d0 <vPortFree+0xc0>)
 800d5b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d5ba:	f7fe f8a5 	bl	800b708 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d5be:	bf00      	nop
 800d5c0:	3718      	adds	r7, #24
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	200055a8 	.word	0x200055a8
 800d5cc:	20005598 	.word	0x20005598
 800d5d0:	200055a4 	.word	0x200055a4

0800d5d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b085      	sub	sp, #20
 800d5d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d5da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d5de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d5e0:	4b27      	ldr	r3, [pc, #156]	; (800d680 <prvHeapInit+0xac>)
 800d5e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f003 0307 	and.w	r3, r3, #7
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d00c      	beq.n	800d608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	3307      	adds	r3, #7
 800d5f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f023 0307 	bic.w	r3, r3, #7
 800d5fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d5fc:	68ba      	ldr	r2, [r7, #8]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	1ad3      	subs	r3, r2, r3
 800d602:	4a1f      	ldr	r2, [pc, #124]	; (800d680 <prvHeapInit+0xac>)
 800d604:	4413      	add	r3, r2
 800d606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d60c:	4a1d      	ldr	r2, [pc, #116]	; (800d684 <prvHeapInit+0xb0>)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d612:	4b1c      	ldr	r3, [pc, #112]	; (800d684 <prvHeapInit+0xb0>)
 800d614:	2200      	movs	r2, #0
 800d616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	68ba      	ldr	r2, [r7, #8]
 800d61c:	4413      	add	r3, r2
 800d61e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d620:	2208      	movs	r2, #8
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	1a9b      	subs	r3, r3, r2
 800d626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f023 0307 	bic.w	r3, r3, #7
 800d62e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	4a15      	ldr	r2, [pc, #84]	; (800d688 <prvHeapInit+0xb4>)
 800d634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d636:	4b14      	ldr	r3, [pc, #80]	; (800d688 <prvHeapInit+0xb4>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2200      	movs	r2, #0
 800d63c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d63e:	4b12      	ldr	r3, [pc, #72]	; (800d688 <prvHeapInit+0xb4>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2200      	movs	r2, #0
 800d644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	68fa      	ldr	r2, [r7, #12]
 800d64e:	1ad2      	subs	r2, r2, r3
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d654:	4b0c      	ldr	r3, [pc, #48]	; (800d688 <prvHeapInit+0xb4>)
 800d656:	681a      	ldr	r2, [r3, #0]
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	4a0a      	ldr	r2, [pc, #40]	; (800d68c <prvHeapInit+0xb8>)
 800d662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	4a09      	ldr	r2, [pc, #36]	; (800d690 <prvHeapInit+0xbc>)
 800d66a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d66c:	4b09      	ldr	r3, [pc, #36]	; (800d694 <prvHeapInit+0xc0>)
 800d66e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d672:	601a      	str	r2, [r3, #0]
}
 800d674:	bf00      	nop
 800d676:	3714      	adds	r7, #20
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr
 800d680:	2000198c 	.word	0x2000198c
 800d684:	2000558c 	.word	0x2000558c
 800d688:	20005594 	.word	0x20005594
 800d68c:	2000559c 	.word	0x2000559c
 800d690:	20005598 	.word	0x20005598
 800d694:	200055a8 	.word	0x200055a8

0800d698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d698:	b480      	push	{r7}
 800d69a:	b085      	sub	sp, #20
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d6a0:	4b28      	ldr	r3, [pc, #160]	; (800d744 <prvInsertBlockIntoFreeList+0xac>)
 800d6a2:	60fb      	str	r3, [r7, #12]
 800d6a4:	e002      	b.n	800d6ac <prvInsertBlockIntoFreeList+0x14>
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	60fb      	str	r3, [r7, #12]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d8f7      	bhi.n	800d6a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	68ba      	ldr	r2, [r7, #8]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d108      	bne.n	800d6da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	685a      	ldr	r2, [r3, #4]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	441a      	add	r2, r3
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	68ba      	ldr	r2, [r7, #8]
 800d6e4:	441a      	add	r2, r3
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d118      	bne.n	800d720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	4b15      	ldr	r3, [pc, #84]	; (800d748 <prvInsertBlockIntoFreeList+0xb0>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d00d      	beq.n	800d716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	685a      	ldr	r2, [r3, #4]
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	441a      	add	r2, r3
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	601a      	str	r2, [r3, #0]
 800d714:	e008      	b.n	800d728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d716:	4b0c      	ldr	r3, [pc, #48]	; (800d748 <prvInsertBlockIntoFreeList+0xb0>)
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	601a      	str	r2, [r3, #0]
 800d71e:	e003      	b.n	800d728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d002      	beq.n	800d736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	687a      	ldr	r2, [r7, #4]
 800d734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d736:	bf00      	nop
 800d738:	3714      	adds	r7, #20
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr
 800d742:	bf00      	nop
 800d744:	2000558c 	.word	0x2000558c
 800d748:	20005594 	.word	0x20005594

0800d74c <__errno>:
 800d74c:	4b01      	ldr	r3, [pc, #4]	; (800d754 <__errno+0x8>)
 800d74e:	6818      	ldr	r0, [r3, #0]
 800d750:	4770      	bx	lr
 800d752:	bf00      	nop
 800d754:	200000a0 	.word	0x200000a0

0800d758 <std>:
 800d758:	2300      	movs	r3, #0
 800d75a:	b510      	push	{r4, lr}
 800d75c:	4604      	mov	r4, r0
 800d75e:	e9c0 3300 	strd	r3, r3, [r0]
 800d762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d766:	6083      	str	r3, [r0, #8]
 800d768:	8181      	strh	r1, [r0, #12]
 800d76a:	6643      	str	r3, [r0, #100]	; 0x64
 800d76c:	81c2      	strh	r2, [r0, #14]
 800d76e:	6183      	str	r3, [r0, #24]
 800d770:	4619      	mov	r1, r3
 800d772:	2208      	movs	r2, #8
 800d774:	305c      	adds	r0, #92	; 0x5c
 800d776:	f000 f91a 	bl	800d9ae <memset>
 800d77a:	4b05      	ldr	r3, [pc, #20]	; (800d790 <std+0x38>)
 800d77c:	6263      	str	r3, [r4, #36]	; 0x24
 800d77e:	4b05      	ldr	r3, [pc, #20]	; (800d794 <std+0x3c>)
 800d780:	62a3      	str	r3, [r4, #40]	; 0x28
 800d782:	4b05      	ldr	r3, [pc, #20]	; (800d798 <std+0x40>)
 800d784:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d786:	4b05      	ldr	r3, [pc, #20]	; (800d79c <std+0x44>)
 800d788:	6224      	str	r4, [r4, #32]
 800d78a:	6323      	str	r3, [r4, #48]	; 0x30
 800d78c:	bd10      	pop	{r4, pc}
 800d78e:	bf00      	nop
 800d790:	0800e5cd 	.word	0x0800e5cd
 800d794:	0800e5ef 	.word	0x0800e5ef
 800d798:	0800e627 	.word	0x0800e627
 800d79c:	0800e64b 	.word	0x0800e64b

0800d7a0 <_cleanup_r>:
 800d7a0:	4901      	ldr	r1, [pc, #4]	; (800d7a8 <_cleanup_r+0x8>)
 800d7a2:	f000 b8af 	b.w	800d904 <_fwalk_reent>
 800d7a6:	bf00      	nop
 800d7a8:	0800f619 	.word	0x0800f619

0800d7ac <__sfmoreglue>:
 800d7ac:	b570      	push	{r4, r5, r6, lr}
 800d7ae:	2268      	movs	r2, #104	; 0x68
 800d7b0:	1e4d      	subs	r5, r1, #1
 800d7b2:	4355      	muls	r5, r2
 800d7b4:	460e      	mov	r6, r1
 800d7b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d7ba:	f000 f921 	bl	800da00 <_malloc_r>
 800d7be:	4604      	mov	r4, r0
 800d7c0:	b140      	cbz	r0, 800d7d4 <__sfmoreglue+0x28>
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	e9c0 1600 	strd	r1, r6, [r0]
 800d7c8:	300c      	adds	r0, #12
 800d7ca:	60a0      	str	r0, [r4, #8]
 800d7cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d7d0:	f000 f8ed 	bl	800d9ae <memset>
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	bd70      	pop	{r4, r5, r6, pc}

0800d7d8 <__sfp_lock_acquire>:
 800d7d8:	4801      	ldr	r0, [pc, #4]	; (800d7e0 <__sfp_lock_acquire+0x8>)
 800d7da:	f000 b8d8 	b.w	800d98e <__retarget_lock_acquire_recursive>
 800d7de:	bf00      	nop
 800d7e0:	200055ad 	.word	0x200055ad

0800d7e4 <__sfp_lock_release>:
 800d7e4:	4801      	ldr	r0, [pc, #4]	; (800d7ec <__sfp_lock_release+0x8>)
 800d7e6:	f000 b8d3 	b.w	800d990 <__retarget_lock_release_recursive>
 800d7ea:	bf00      	nop
 800d7ec:	200055ad 	.word	0x200055ad

0800d7f0 <__sinit_lock_acquire>:
 800d7f0:	4801      	ldr	r0, [pc, #4]	; (800d7f8 <__sinit_lock_acquire+0x8>)
 800d7f2:	f000 b8cc 	b.w	800d98e <__retarget_lock_acquire_recursive>
 800d7f6:	bf00      	nop
 800d7f8:	200055ae 	.word	0x200055ae

0800d7fc <__sinit_lock_release>:
 800d7fc:	4801      	ldr	r0, [pc, #4]	; (800d804 <__sinit_lock_release+0x8>)
 800d7fe:	f000 b8c7 	b.w	800d990 <__retarget_lock_release_recursive>
 800d802:	bf00      	nop
 800d804:	200055ae 	.word	0x200055ae

0800d808 <__sinit>:
 800d808:	b510      	push	{r4, lr}
 800d80a:	4604      	mov	r4, r0
 800d80c:	f7ff fff0 	bl	800d7f0 <__sinit_lock_acquire>
 800d810:	69a3      	ldr	r3, [r4, #24]
 800d812:	b11b      	cbz	r3, 800d81c <__sinit+0x14>
 800d814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d818:	f7ff bff0 	b.w	800d7fc <__sinit_lock_release>
 800d81c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d820:	6523      	str	r3, [r4, #80]	; 0x50
 800d822:	4b13      	ldr	r3, [pc, #76]	; (800d870 <__sinit+0x68>)
 800d824:	4a13      	ldr	r2, [pc, #76]	; (800d874 <__sinit+0x6c>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	62a2      	str	r2, [r4, #40]	; 0x28
 800d82a:	42a3      	cmp	r3, r4
 800d82c:	bf04      	itt	eq
 800d82e:	2301      	moveq	r3, #1
 800d830:	61a3      	streq	r3, [r4, #24]
 800d832:	4620      	mov	r0, r4
 800d834:	f000 f820 	bl	800d878 <__sfp>
 800d838:	6060      	str	r0, [r4, #4]
 800d83a:	4620      	mov	r0, r4
 800d83c:	f000 f81c 	bl	800d878 <__sfp>
 800d840:	60a0      	str	r0, [r4, #8]
 800d842:	4620      	mov	r0, r4
 800d844:	f000 f818 	bl	800d878 <__sfp>
 800d848:	2200      	movs	r2, #0
 800d84a:	60e0      	str	r0, [r4, #12]
 800d84c:	2104      	movs	r1, #4
 800d84e:	6860      	ldr	r0, [r4, #4]
 800d850:	f7ff ff82 	bl	800d758 <std>
 800d854:	68a0      	ldr	r0, [r4, #8]
 800d856:	2201      	movs	r2, #1
 800d858:	2109      	movs	r1, #9
 800d85a:	f7ff ff7d 	bl	800d758 <std>
 800d85e:	68e0      	ldr	r0, [r4, #12]
 800d860:	2202      	movs	r2, #2
 800d862:	2112      	movs	r1, #18
 800d864:	f7ff ff78 	bl	800d758 <std>
 800d868:	2301      	movs	r3, #1
 800d86a:	61a3      	str	r3, [r4, #24]
 800d86c:	e7d2      	b.n	800d814 <__sinit+0xc>
 800d86e:	bf00      	nop
 800d870:	08011f70 	.word	0x08011f70
 800d874:	0800d7a1 	.word	0x0800d7a1

0800d878 <__sfp>:
 800d878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d87a:	4607      	mov	r7, r0
 800d87c:	f7ff ffac 	bl	800d7d8 <__sfp_lock_acquire>
 800d880:	4b1e      	ldr	r3, [pc, #120]	; (800d8fc <__sfp+0x84>)
 800d882:	681e      	ldr	r6, [r3, #0]
 800d884:	69b3      	ldr	r3, [r6, #24]
 800d886:	b913      	cbnz	r3, 800d88e <__sfp+0x16>
 800d888:	4630      	mov	r0, r6
 800d88a:	f7ff ffbd 	bl	800d808 <__sinit>
 800d88e:	3648      	adds	r6, #72	; 0x48
 800d890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d894:	3b01      	subs	r3, #1
 800d896:	d503      	bpl.n	800d8a0 <__sfp+0x28>
 800d898:	6833      	ldr	r3, [r6, #0]
 800d89a:	b30b      	cbz	r3, 800d8e0 <__sfp+0x68>
 800d89c:	6836      	ldr	r6, [r6, #0]
 800d89e:	e7f7      	b.n	800d890 <__sfp+0x18>
 800d8a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d8a4:	b9d5      	cbnz	r5, 800d8dc <__sfp+0x64>
 800d8a6:	4b16      	ldr	r3, [pc, #88]	; (800d900 <__sfp+0x88>)
 800d8a8:	60e3      	str	r3, [r4, #12]
 800d8aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d8ae:	6665      	str	r5, [r4, #100]	; 0x64
 800d8b0:	f000 f86c 	bl	800d98c <__retarget_lock_init_recursive>
 800d8b4:	f7ff ff96 	bl	800d7e4 <__sfp_lock_release>
 800d8b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d8bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d8c0:	6025      	str	r5, [r4, #0]
 800d8c2:	61a5      	str	r5, [r4, #24]
 800d8c4:	2208      	movs	r2, #8
 800d8c6:	4629      	mov	r1, r5
 800d8c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d8cc:	f000 f86f 	bl	800d9ae <memset>
 800d8d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d8d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d8d8:	4620      	mov	r0, r4
 800d8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8dc:	3468      	adds	r4, #104	; 0x68
 800d8de:	e7d9      	b.n	800d894 <__sfp+0x1c>
 800d8e0:	2104      	movs	r1, #4
 800d8e2:	4638      	mov	r0, r7
 800d8e4:	f7ff ff62 	bl	800d7ac <__sfmoreglue>
 800d8e8:	4604      	mov	r4, r0
 800d8ea:	6030      	str	r0, [r6, #0]
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	d1d5      	bne.n	800d89c <__sfp+0x24>
 800d8f0:	f7ff ff78 	bl	800d7e4 <__sfp_lock_release>
 800d8f4:	230c      	movs	r3, #12
 800d8f6:	603b      	str	r3, [r7, #0]
 800d8f8:	e7ee      	b.n	800d8d8 <__sfp+0x60>
 800d8fa:	bf00      	nop
 800d8fc:	08011f70 	.word	0x08011f70
 800d900:	ffff0001 	.word	0xffff0001

0800d904 <_fwalk_reent>:
 800d904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d908:	4606      	mov	r6, r0
 800d90a:	4688      	mov	r8, r1
 800d90c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d910:	2700      	movs	r7, #0
 800d912:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d916:	f1b9 0901 	subs.w	r9, r9, #1
 800d91a:	d505      	bpl.n	800d928 <_fwalk_reent+0x24>
 800d91c:	6824      	ldr	r4, [r4, #0]
 800d91e:	2c00      	cmp	r4, #0
 800d920:	d1f7      	bne.n	800d912 <_fwalk_reent+0xe>
 800d922:	4638      	mov	r0, r7
 800d924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d928:	89ab      	ldrh	r3, [r5, #12]
 800d92a:	2b01      	cmp	r3, #1
 800d92c:	d907      	bls.n	800d93e <_fwalk_reent+0x3a>
 800d92e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d932:	3301      	adds	r3, #1
 800d934:	d003      	beq.n	800d93e <_fwalk_reent+0x3a>
 800d936:	4629      	mov	r1, r5
 800d938:	4630      	mov	r0, r6
 800d93a:	47c0      	blx	r8
 800d93c:	4307      	orrs	r7, r0
 800d93e:	3568      	adds	r5, #104	; 0x68
 800d940:	e7e9      	b.n	800d916 <_fwalk_reent+0x12>
	...

0800d944 <__libc_init_array>:
 800d944:	b570      	push	{r4, r5, r6, lr}
 800d946:	4d0d      	ldr	r5, [pc, #52]	; (800d97c <__libc_init_array+0x38>)
 800d948:	4c0d      	ldr	r4, [pc, #52]	; (800d980 <__libc_init_array+0x3c>)
 800d94a:	1b64      	subs	r4, r4, r5
 800d94c:	10a4      	asrs	r4, r4, #2
 800d94e:	2600      	movs	r6, #0
 800d950:	42a6      	cmp	r6, r4
 800d952:	d109      	bne.n	800d968 <__libc_init_array+0x24>
 800d954:	4d0b      	ldr	r5, [pc, #44]	; (800d984 <__libc_init_array+0x40>)
 800d956:	4c0c      	ldr	r4, [pc, #48]	; (800d988 <__libc_init_array+0x44>)
 800d958:	f004 f84c 	bl	80119f4 <_init>
 800d95c:	1b64      	subs	r4, r4, r5
 800d95e:	10a4      	asrs	r4, r4, #2
 800d960:	2600      	movs	r6, #0
 800d962:	42a6      	cmp	r6, r4
 800d964:	d105      	bne.n	800d972 <__libc_init_array+0x2e>
 800d966:	bd70      	pop	{r4, r5, r6, pc}
 800d968:	f855 3b04 	ldr.w	r3, [r5], #4
 800d96c:	4798      	blx	r3
 800d96e:	3601      	adds	r6, #1
 800d970:	e7ee      	b.n	800d950 <__libc_init_array+0xc>
 800d972:	f855 3b04 	ldr.w	r3, [r5], #4
 800d976:	4798      	blx	r3
 800d978:	3601      	adds	r6, #1
 800d97a:	e7f2      	b.n	800d962 <__libc_init_array+0x1e>
 800d97c:	08012540 	.word	0x08012540
 800d980:	08012540 	.word	0x08012540
 800d984:	08012540 	.word	0x08012540
 800d988:	08012544 	.word	0x08012544

0800d98c <__retarget_lock_init_recursive>:
 800d98c:	4770      	bx	lr

0800d98e <__retarget_lock_acquire_recursive>:
 800d98e:	4770      	bx	lr

0800d990 <__retarget_lock_release_recursive>:
 800d990:	4770      	bx	lr

0800d992 <memcpy>:
 800d992:	440a      	add	r2, r1
 800d994:	4291      	cmp	r1, r2
 800d996:	f100 33ff 	add.w	r3, r0, #4294967295
 800d99a:	d100      	bne.n	800d99e <memcpy+0xc>
 800d99c:	4770      	bx	lr
 800d99e:	b510      	push	{r4, lr}
 800d9a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9a8:	4291      	cmp	r1, r2
 800d9aa:	d1f9      	bne.n	800d9a0 <memcpy+0xe>
 800d9ac:	bd10      	pop	{r4, pc}

0800d9ae <memset>:
 800d9ae:	4402      	add	r2, r0
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d100      	bne.n	800d9b8 <memset+0xa>
 800d9b6:	4770      	bx	lr
 800d9b8:	f803 1b01 	strb.w	r1, [r3], #1
 800d9bc:	e7f9      	b.n	800d9b2 <memset+0x4>
	...

0800d9c0 <sbrk_aligned>:
 800d9c0:	b570      	push	{r4, r5, r6, lr}
 800d9c2:	4e0e      	ldr	r6, [pc, #56]	; (800d9fc <sbrk_aligned+0x3c>)
 800d9c4:	460c      	mov	r4, r1
 800d9c6:	6831      	ldr	r1, [r6, #0]
 800d9c8:	4605      	mov	r5, r0
 800d9ca:	b911      	cbnz	r1, 800d9d2 <sbrk_aligned+0x12>
 800d9cc:	f000 fdee 	bl	800e5ac <_sbrk_r>
 800d9d0:	6030      	str	r0, [r6, #0]
 800d9d2:	4621      	mov	r1, r4
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	f000 fde9 	bl	800e5ac <_sbrk_r>
 800d9da:	1c43      	adds	r3, r0, #1
 800d9dc:	d00a      	beq.n	800d9f4 <sbrk_aligned+0x34>
 800d9de:	1cc4      	adds	r4, r0, #3
 800d9e0:	f024 0403 	bic.w	r4, r4, #3
 800d9e4:	42a0      	cmp	r0, r4
 800d9e6:	d007      	beq.n	800d9f8 <sbrk_aligned+0x38>
 800d9e8:	1a21      	subs	r1, r4, r0
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	f000 fdde 	bl	800e5ac <_sbrk_r>
 800d9f0:	3001      	adds	r0, #1
 800d9f2:	d101      	bne.n	800d9f8 <sbrk_aligned+0x38>
 800d9f4:	f04f 34ff 	mov.w	r4, #4294967295
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	bd70      	pop	{r4, r5, r6, pc}
 800d9fc:	200055b4 	.word	0x200055b4

0800da00 <_malloc_r>:
 800da00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da04:	1ccd      	adds	r5, r1, #3
 800da06:	f025 0503 	bic.w	r5, r5, #3
 800da0a:	3508      	adds	r5, #8
 800da0c:	2d0c      	cmp	r5, #12
 800da0e:	bf38      	it	cc
 800da10:	250c      	movcc	r5, #12
 800da12:	2d00      	cmp	r5, #0
 800da14:	4607      	mov	r7, r0
 800da16:	db01      	blt.n	800da1c <_malloc_r+0x1c>
 800da18:	42a9      	cmp	r1, r5
 800da1a:	d905      	bls.n	800da28 <_malloc_r+0x28>
 800da1c:	230c      	movs	r3, #12
 800da1e:	603b      	str	r3, [r7, #0]
 800da20:	2600      	movs	r6, #0
 800da22:	4630      	mov	r0, r6
 800da24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da28:	4e2e      	ldr	r6, [pc, #184]	; (800dae4 <_malloc_r+0xe4>)
 800da2a:	f001 feb5 	bl	800f798 <__malloc_lock>
 800da2e:	6833      	ldr	r3, [r6, #0]
 800da30:	461c      	mov	r4, r3
 800da32:	bb34      	cbnz	r4, 800da82 <_malloc_r+0x82>
 800da34:	4629      	mov	r1, r5
 800da36:	4638      	mov	r0, r7
 800da38:	f7ff ffc2 	bl	800d9c0 <sbrk_aligned>
 800da3c:	1c43      	adds	r3, r0, #1
 800da3e:	4604      	mov	r4, r0
 800da40:	d14d      	bne.n	800dade <_malloc_r+0xde>
 800da42:	6834      	ldr	r4, [r6, #0]
 800da44:	4626      	mov	r6, r4
 800da46:	2e00      	cmp	r6, #0
 800da48:	d140      	bne.n	800dacc <_malloc_r+0xcc>
 800da4a:	6823      	ldr	r3, [r4, #0]
 800da4c:	4631      	mov	r1, r6
 800da4e:	4638      	mov	r0, r7
 800da50:	eb04 0803 	add.w	r8, r4, r3
 800da54:	f000 fdaa 	bl	800e5ac <_sbrk_r>
 800da58:	4580      	cmp	r8, r0
 800da5a:	d13a      	bne.n	800dad2 <_malloc_r+0xd2>
 800da5c:	6821      	ldr	r1, [r4, #0]
 800da5e:	3503      	adds	r5, #3
 800da60:	1a6d      	subs	r5, r5, r1
 800da62:	f025 0503 	bic.w	r5, r5, #3
 800da66:	3508      	adds	r5, #8
 800da68:	2d0c      	cmp	r5, #12
 800da6a:	bf38      	it	cc
 800da6c:	250c      	movcc	r5, #12
 800da6e:	4629      	mov	r1, r5
 800da70:	4638      	mov	r0, r7
 800da72:	f7ff ffa5 	bl	800d9c0 <sbrk_aligned>
 800da76:	3001      	adds	r0, #1
 800da78:	d02b      	beq.n	800dad2 <_malloc_r+0xd2>
 800da7a:	6823      	ldr	r3, [r4, #0]
 800da7c:	442b      	add	r3, r5
 800da7e:	6023      	str	r3, [r4, #0]
 800da80:	e00e      	b.n	800daa0 <_malloc_r+0xa0>
 800da82:	6822      	ldr	r2, [r4, #0]
 800da84:	1b52      	subs	r2, r2, r5
 800da86:	d41e      	bmi.n	800dac6 <_malloc_r+0xc6>
 800da88:	2a0b      	cmp	r2, #11
 800da8a:	d916      	bls.n	800daba <_malloc_r+0xba>
 800da8c:	1961      	adds	r1, r4, r5
 800da8e:	42a3      	cmp	r3, r4
 800da90:	6025      	str	r5, [r4, #0]
 800da92:	bf18      	it	ne
 800da94:	6059      	strne	r1, [r3, #4]
 800da96:	6863      	ldr	r3, [r4, #4]
 800da98:	bf08      	it	eq
 800da9a:	6031      	streq	r1, [r6, #0]
 800da9c:	5162      	str	r2, [r4, r5]
 800da9e:	604b      	str	r3, [r1, #4]
 800daa0:	4638      	mov	r0, r7
 800daa2:	f104 060b 	add.w	r6, r4, #11
 800daa6:	f001 fe7d 	bl	800f7a4 <__malloc_unlock>
 800daaa:	f026 0607 	bic.w	r6, r6, #7
 800daae:	1d23      	adds	r3, r4, #4
 800dab0:	1af2      	subs	r2, r6, r3
 800dab2:	d0b6      	beq.n	800da22 <_malloc_r+0x22>
 800dab4:	1b9b      	subs	r3, r3, r6
 800dab6:	50a3      	str	r3, [r4, r2]
 800dab8:	e7b3      	b.n	800da22 <_malloc_r+0x22>
 800daba:	6862      	ldr	r2, [r4, #4]
 800dabc:	42a3      	cmp	r3, r4
 800dabe:	bf0c      	ite	eq
 800dac0:	6032      	streq	r2, [r6, #0]
 800dac2:	605a      	strne	r2, [r3, #4]
 800dac4:	e7ec      	b.n	800daa0 <_malloc_r+0xa0>
 800dac6:	4623      	mov	r3, r4
 800dac8:	6864      	ldr	r4, [r4, #4]
 800daca:	e7b2      	b.n	800da32 <_malloc_r+0x32>
 800dacc:	4634      	mov	r4, r6
 800dace:	6876      	ldr	r6, [r6, #4]
 800dad0:	e7b9      	b.n	800da46 <_malloc_r+0x46>
 800dad2:	230c      	movs	r3, #12
 800dad4:	603b      	str	r3, [r7, #0]
 800dad6:	4638      	mov	r0, r7
 800dad8:	f001 fe64 	bl	800f7a4 <__malloc_unlock>
 800dadc:	e7a1      	b.n	800da22 <_malloc_r+0x22>
 800dade:	6025      	str	r5, [r4, #0]
 800dae0:	e7de      	b.n	800daa0 <_malloc_r+0xa0>
 800dae2:	bf00      	nop
 800dae4:	200055b0 	.word	0x200055b0

0800dae8 <__cvt>:
 800dae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800daec:	ec55 4b10 	vmov	r4, r5, d0
 800daf0:	2d00      	cmp	r5, #0
 800daf2:	460e      	mov	r6, r1
 800daf4:	4619      	mov	r1, r3
 800daf6:	462b      	mov	r3, r5
 800daf8:	bfbb      	ittet	lt
 800dafa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dafe:	461d      	movlt	r5, r3
 800db00:	2300      	movge	r3, #0
 800db02:	232d      	movlt	r3, #45	; 0x2d
 800db04:	700b      	strb	r3, [r1, #0]
 800db06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800db0c:	4691      	mov	r9, r2
 800db0e:	f023 0820 	bic.w	r8, r3, #32
 800db12:	bfbc      	itt	lt
 800db14:	4622      	movlt	r2, r4
 800db16:	4614      	movlt	r4, r2
 800db18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800db1c:	d005      	beq.n	800db2a <__cvt+0x42>
 800db1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800db22:	d100      	bne.n	800db26 <__cvt+0x3e>
 800db24:	3601      	adds	r6, #1
 800db26:	2102      	movs	r1, #2
 800db28:	e000      	b.n	800db2c <__cvt+0x44>
 800db2a:	2103      	movs	r1, #3
 800db2c:	ab03      	add	r3, sp, #12
 800db2e:	9301      	str	r3, [sp, #4]
 800db30:	ab02      	add	r3, sp, #8
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	ec45 4b10 	vmov	d0, r4, r5
 800db38:	4653      	mov	r3, sl
 800db3a:	4632      	mov	r2, r6
 800db3c:	f000 fef8 	bl	800e930 <_dtoa_r>
 800db40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800db44:	4607      	mov	r7, r0
 800db46:	d102      	bne.n	800db4e <__cvt+0x66>
 800db48:	f019 0f01 	tst.w	r9, #1
 800db4c:	d022      	beq.n	800db94 <__cvt+0xac>
 800db4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800db52:	eb07 0906 	add.w	r9, r7, r6
 800db56:	d110      	bne.n	800db7a <__cvt+0x92>
 800db58:	783b      	ldrb	r3, [r7, #0]
 800db5a:	2b30      	cmp	r3, #48	; 0x30
 800db5c:	d10a      	bne.n	800db74 <__cvt+0x8c>
 800db5e:	2200      	movs	r2, #0
 800db60:	2300      	movs	r3, #0
 800db62:	4620      	mov	r0, r4
 800db64:	4629      	mov	r1, r5
 800db66:	f7f2 ffaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800db6a:	b918      	cbnz	r0, 800db74 <__cvt+0x8c>
 800db6c:	f1c6 0601 	rsb	r6, r6, #1
 800db70:	f8ca 6000 	str.w	r6, [sl]
 800db74:	f8da 3000 	ldr.w	r3, [sl]
 800db78:	4499      	add	r9, r3
 800db7a:	2200      	movs	r2, #0
 800db7c:	2300      	movs	r3, #0
 800db7e:	4620      	mov	r0, r4
 800db80:	4629      	mov	r1, r5
 800db82:	f7f2 ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 800db86:	b108      	cbz	r0, 800db8c <__cvt+0xa4>
 800db88:	f8cd 900c 	str.w	r9, [sp, #12]
 800db8c:	2230      	movs	r2, #48	; 0x30
 800db8e:	9b03      	ldr	r3, [sp, #12]
 800db90:	454b      	cmp	r3, r9
 800db92:	d307      	bcc.n	800dba4 <__cvt+0xbc>
 800db94:	9b03      	ldr	r3, [sp, #12]
 800db96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db98:	1bdb      	subs	r3, r3, r7
 800db9a:	4638      	mov	r0, r7
 800db9c:	6013      	str	r3, [r2, #0]
 800db9e:	b004      	add	sp, #16
 800dba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dba4:	1c59      	adds	r1, r3, #1
 800dba6:	9103      	str	r1, [sp, #12]
 800dba8:	701a      	strb	r2, [r3, #0]
 800dbaa:	e7f0      	b.n	800db8e <__cvt+0xa6>

0800dbac <__exponent>:
 800dbac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2900      	cmp	r1, #0
 800dbb2:	bfb8      	it	lt
 800dbb4:	4249      	neglt	r1, r1
 800dbb6:	f803 2b02 	strb.w	r2, [r3], #2
 800dbba:	bfb4      	ite	lt
 800dbbc:	222d      	movlt	r2, #45	; 0x2d
 800dbbe:	222b      	movge	r2, #43	; 0x2b
 800dbc0:	2909      	cmp	r1, #9
 800dbc2:	7042      	strb	r2, [r0, #1]
 800dbc4:	dd2a      	ble.n	800dc1c <__exponent+0x70>
 800dbc6:	f10d 0407 	add.w	r4, sp, #7
 800dbca:	46a4      	mov	ip, r4
 800dbcc:	270a      	movs	r7, #10
 800dbce:	46a6      	mov	lr, r4
 800dbd0:	460a      	mov	r2, r1
 800dbd2:	fb91 f6f7 	sdiv	r6, r1, r7
 800dbd6:	fb07 1516 	mls	r5, r7, r6, r1
 800dbda:	3530      	adds	r5, #48	; 0x30
 800dbdc:	2a63      	cmp	r2, #99	; 0x63
 800dbde:	f104 34ff 	add.w	r4, r4, #4294967295
 800dbe2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dbe6:	4631      	mov	r1, r6
 800dbe8:	dcf1      	bgt.n	800dbce <__exponent+0x22>
 800dbea:	3130      	adds	r1, #48	; 0x30
 800dbec:	f1ae 0502 	sub.w	r5, lr, #2
 800dbf0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dbf4:	1c44      	adds	r4, r0, #1
 800dbf6:	4629      	mov	r1, r5
 800dbf8:	4561      	cmp	r1, ip
 800dbfa:	d30a      	bcc.n	800dc12 <__exponent+0x66>
 800dbfc:	f10d 0209 	add.w	r2, sp, #9
 800dc00:	eba2 020e 	sub.w	r2, r2, lr
 800dc04:	4565      	cmp	r5, ip
 800dc06:	bf88      	it	hi
 800dc08:	2200      	movhi	r2, #0
 800dc0a:	4413      	add	r3, r2
 800dc0c:	1a18      	subs	r0, r3, r0
 800dc0e:	b003      	add	sp, #12
 800dc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc16:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dc1a:	e7ed      	b.n	800dbf8 <__exponent+0x4c>
 800dc1c:	2330      	movs	r3, #48	; 0x30
 800dc1e:	3130      	adds	r1, #48	; 0x30
 800dc20:	7083      	strb	r3, [r0, #2]
 800dc22:	70c1      	strb	r1, [r0, #3]
 800dc24:	1d03      	adds	r3, r0, #4
 800dc26:	e7f1      	b.n	800dc0c <__exponent+0x60>

0800dc28 <_printf_float>:
 800dc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc2c:	ed2d 8b02 	vpush	{d8}
 800dc30:	b08d      	sub	sp, #52	; 0x34
 800dc32:	460c      	mov	r4, r1
 800dc34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dc38:	4616      	mov	r6, r2
 800dc3a:	461f      	mov	r7, r3
 800dc3c:	4605      	mov	r5, r0
 800dc3e:	f001 fd27 	bl	800f690 <_localeconv_r>
 800dc42:	f8d0 a000 	ldr.w	sl, [r0]
 800dc46:	4650      	mov	r0, sl
 800dc48:	f7f2 fac2 	bl	80001d0 <strlen>
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	930a      	str	r3, [sp, #40]	; 0x28
 800dc50:	6823      	ldr	r3, [r4, #0]
 800dc52:	9305      	str	r3, [sp, #20]
 800dc54:	f8d8 3000 	ldr.w	r3, [r8]
 800dc58:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dc5c:	3307      	adds	r3, #7
 800dc5e:	f023 0307 	bic.w	r3, r3, #7
 800dc62:	f103 0208 	add.w	r2, r3, #8
 800dc66:	f8c8 2000 	str.w	r2, [r8]
 800dc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dc72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dc76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dc7a:	9307      	str	r3, [sp, #28]
 800dc7c:	f8cd 8018 	str.w	r8, [sp, #24]
 800dc80:	ee08 0a10 	vmov	s16, r0
 800dc84:	4b9f      	ldr	r3, [pc, #636]	; (800df04 <_printf_float+0x2dc>)
 800dc86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc8a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc8e:	f7f2 ff4d 	bl	8000b2c <__aeabi_dcmpun>
 800dc92:	bb88      	cbnz	r0, 800dcf8 <_printf_float+0xd0>
 800dc94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc98:	4b9a      	ldr	r3, [pc, #616]	; (800df04 <_printf_float+0x2dc>)
 800dc9a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc9e:	f7f2 ff27 	bl	8000af0 <__aeabi_dcmple>
 800dca2:	bb48      	cbnz	r0, 800dcf8 <_printf_float+0xd0>
 800dca4:	2200      	movs	r2, #0
 800dca6:	2300      	movs	r3, #0
 800dca8:	4640      	mov	r0, r8
 800dcaa:	4649      	mov	r1, r9
 800dcac:	f7f2 ff16 	bl	8000adc <__aeabi_dcmplt>
 800dcb0:	b110      	cbz	r0, 800dcb8 <_printf_float+0x90>
 800dcb2:	232d      	movs	r3, #45	; 0x2d
 800dcb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcb8:	4b93      	ldr	r3, [pc, #588]	; (800df08 <_printf_float+0x2e0>)
 800dcba:	4894      	ldr	r0, [pc, #592]	; (800df0c <_printf_float+0x2e4>)
 800dcbc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dcc0:	bf94      	ite	ls
 800dcc2:	4698      	movls	r8, r3
 800dcc4:	4680      	movhi	r8, r0
 800dcc6:	2303      	movs	r3, #3
 800dcc8:	6123      	str	r3, [r4, #16]
 800dcca:	9b05      	ldr	r3, [sp, #20]
 800dccc:	f023 0204 	bic.w	r2, r3, #4
 800dcd0:	6022      	str	r2, [r4, #0]
 800dcd2:	f04f 0900 	mov.w	r9, #0
 800dcd6:	9700      	str	r7, [sp, #0]
 800dcd8:	4633      	mov	r3, r6
 800dcda:	aa0b      	add	r2, sp, #44	; 0x2c
 800dcdc:	4621      	mov	r1, r4
 800dcde:	4628      	mov	r0, r5
 800dce0:	f000 f9d8 	bl	800e094 <_printf_common>
 800dce4:	3001      	adds	r0, #1
 800dce6:	f040 8090 	bne.w	800de0a <_printf_float+0x1e2>
 800dcea:	f04f 30ff 	mov.w	r0, #4294967295
 800dcee:	b00d      	add	sp, #52	; 0x34
 800dcf0:	ecbd 8b02 	vpop	{d8}
 800dcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf8:	4642      	mov	r2, r8
 800dcfa:	464b      	mov	r3, r9
 800dcfc:	4640      	mov	r0, r8
 800dcfe:	4649      	mov	r1, r9
 800dd00:	f7f2 ff14 	bl	8000b2c <__aeabi_dcmpun>
 800dd04:	b140      	cbz	r0, 800dd18 <_printf_float+0xf0>
 800dd06:	464b      	mov	r3, r9
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	bfbc      	itt	lt
 800dd0c:	232d      	movlt	r3, #45	; 0x2d
 800dd0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dd12:	487f      	ldr	r0, [pc, #508]	; (800df10 <_printf_float+0x2e8>)
 800dd14:	4b7f      	ldr	r3, [pc, #508]	; (800df14 <_printf_float+0x2ec>)
 800dd16:	e7d1      	b.n	800dcbc <_printf_float+0x94>
 800dd18:	6863      	ldr	r3, [r4, #4]
 800dd1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dd1e:	9206      	str	r2, [sp, #24]
 800dd20:	1c5a      	adds	r2, r3, #1
 800dd22:	d13f      	bne.n	800dda4 <_printf_float+0x17c>
 800dd24:	2306      	movs	r3, #6
 800dd26:	6063      	str	r3, [r4, #4]
 800dd28:	9b05      	ldr	r3, [sp, #20]
 800dd2a:	6861      	ldr	r1, [r4, #4]
 800dd2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dd30:	2300      	movs	r3, #0
 800dd32:	9303      	str	r3, [sp, #12]
 800dd34:	ab0a      	add	r3, sp, #40	; 0x28
 800dd36:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dd3a:	ab09      	add	r3, sp, #36	; 0x24
 800dd3c:	ec49 8b10 	vmov	d0, r8, r9
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	6022      	str	r2, [r4, #0]
 800dd44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dd48:	4628      	mov	r0, r5
 800dd4a:	f7ff fecd 	bl	800dae8 <__cvt>
 800dd4e:	9b06      	ldr	r3, [sp, #24]
 800dd50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd52:	2b47      	cmp	r3, #71	; 0x47
 800dd54:	4680      	mov	r8, r0
 800dd56:	d108      	bne.n	800dd6a <_printf_float+0x142>
 800dd58:	1cc8      	adds	r0, r1, #3
 800dd5a:	db02      	blt.n	800dd62 <_printf_float+0x13a>
 800dd5c:	6863      	ldr	r3, [r4, #4]
 800dd5e:	4299      	cmp	r1, r3
 800dd60:	dd41      	ble.n	800dde6 <_printf_float+0x1be>
 800dd62:	f1ab 0b02 	sub.w	fp, fp, #2
 800dd66:	fa5f fb8b 	uxtb.w	fp, fp
 800dd6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dd6e:	d820      	bhi.n	800ddb2 <_printf_float+0x18a>
 800dd70:	3901      	subs	r1, #1
 800dd72:	465a      	mov	r2, fp
 800dd74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dd78:	9109      	str	r1, [sp, #36]	; 0x24
 800dd7a:	f7ff ff17 	bl	800dbac <__exponent>
 800dd7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd80:	1813      	adds	r3, r2, r0
 800dd82:	2a01      	cmp	r2, #1
 800dd84:	4681      	mov	r9, r0
 800dd86:	6123      	str	r3, [r4, #16]
 800dd88:	dc02      	bgt.n	800dd90 <_printf_float+0x168>
 800dd8a:	6822      	ldr	r2, [r4, #0]
 800dd8c:	07d2      	lsls	r2, r2, #31
 800dd8e:	d501      	bpl.n	800dd94 <_printf_float+0x16c>
 800dd90:	3301      	adds	r3, #1
 800dd92:	6123      	str	r3, [r4, #16]
 800dd94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d09c      	beq.n	800dcd6 <_printf_float+0xae>
 800dd9c:	232d      	movs	r3, #45	; 0x2d
 800dd9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dda2:	e798      	b.n	800dcd6 <_printf_float+0xae>
 800dda4:	9a06      	ldr	r2, [sp, #24]
 800dda6:	2a47      	cmp	r2, #71	; 0x47
 800dda8:	d1be      	bne.n	800dd28 <_printf_float+0x100>
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d1bc      	bne.n	800dd28 <_printf_float+0x100>
 800ddae:	2301      	movs	r3, #1
 800ddb0:	e7b9      	b.n	800dd26 <_printf_float+0xfe>
 800ddb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ddb6:	d118      	bne.n	800ddea <_printf_float+0x1c2>
 800ddb8:	2900      	cmp	r1, #0
 800ddba:	6863      	ldr	r3, [r4, #4]
 800ddbc:	dd0b      	ble.n	800ddd6 <_printf_float+0x1ae>
 800ddbe:	6121      	str	r1, [r4, #16]
 800ddc0:	b913      	cbnz	r3, 800ddc8 <_printf_float+0x1a0>
 800ddc2:	6822      	ldr	r2, [r4, #0]
 800ddc4:	07d0      	lsls	r0, r2, #31
 800ddc6:	d502      	bpl.n	800ddce <_printf_float+0x1a6>
 800ddc8:	3301      	adds	r3, #1
 800ddca:	440b      	add	r3, r1
 800ddcc:	6123      	str	r3, [r4, #16]
 800ddce:	65a1      	str	r1, [r4, #88]	; 0x58
 800ddd0:	f04f 0900 	mov.w	r9, #0
 800ddd4:	e7de      	b.n	800dd94 <_printf_float+0x16c>
 800ddd6:	b913      	cbnz	r3, 800ddde <_printf_float+0x1b6>
 800ddd8:	6822      	ldr	r2, [r4, #0]
 800ddda:	07d2      	lsls	r2, r2, #31
 800dddc:	d501      	bpl.n	800dde2 <_printf_float+0x1ba>
 800ddde:	3302      	adds	r3, #2
 800dde0:	e7f4      	b.n	800ddcc <_printf_float+0x1a4>
 800dde2:	2301      	movs	r3, #1
 800dde4:	e7f2      	b.n	800ddcc <_printf_float+0x1a4>
 800dde6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ddea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddec:	4299      	cmp	r1, r3
 800ddee:	db05      	blt.n	800ddfc <_printf_float+0x1d4>
 800ddf0:	6823      	ldr	r3, [r4, #0]
 800ddf2:	6121      	str	r1, [r4, #16]
 800ddf4:	07d8      	lsls	r0, r3, #31
 800ddf6:	d5ea      	bpl.n	800ddce <_printf_float+0x1a6>
 800ddf8:	1c4b      	adds	r3, r1, #1
 800ddfa:	e7e7      	b.n	800ddcc <_printf_float+0x1a4>
 800ddfc:	2900      	cmp	r1, #0
 800ddfe:	bfd4      	ite	le
 800de00:	f1c1 0202 	rsble	r2, r1, #2
 800de04:	2201      	movgt	r2, #1
 800de06:	4413      	add	r3, r2
 800de08:	e7e0      	b.n	800ddcc <_printf_float+0x1a4>
 800de0a:	6823      	ldr	r3, [r4, #0]
 800de0c:	055a      	lsls	r2, r3, #21
 800de0e:	d407      	bmi.n	800de20 <_printf_float+0x1f8>
 800de10:	6923      	ldr	r3, [r4, #16]
 800de12:	4642      	mov	r2, r8
 800de14:	4631      	mov	r1, r6
 800de16:	4628      	mov	r0, r5
 800de18:	47b8      	blx	r7
 800de1a:	3001      	adds	r0, #1
 800de1c:	d12c      	bne.n	800de78 <_printf_float+0x250>
 800de1e:	e764      	b.n	800dcea <_printf_float+0xc2>
 800de20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800de24:	f240 80e0 	bls.w	800dfe8 <_printf_float+0x3c0>
 800de28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800de2c:	2200      	movs	r2, #0
 800de2e:	2300      	movs	r3, #0
 800de30:	f7f2 fe4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800de34:	2800      	cmp	r0, #0
 800de36:	d034      	beq.n	800dea2 <_printf_float+0x27a>
 800de38:	4a37      	ldr	r2, [pc, #220]	; (800df18 <_printf_float+0x2f0>)
 800de3a:	2301      	movs	r3, #1
 800de3c:	4631      	mov	r1, r6
 800de3e:	4628      	mov	r0, r5
 800de40:	47b8      	blx	r7
 800de42:	3001      	adds	r0, #1
 800de44:	f43f af51 	beq.w	800dcea <_printf_float+0xc2>
 800de48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de4c:	429a      	cmp	r2, r3
 800de4e:	db02      	blt.n	800de56 <_printf_float+0x22e>
 800de50:	6823      	ldr	r3, [r4, #0]
 800de52:	07d8      	lsls	r0, r3, #31
 800de54:	d510      	bpl.n	800de78 <_printf_float+0x250>
 800de56:	ee18 3a10 	vmov	r3, s16
 800de5a:	4652      	mov	r2, sl
 800de5c:	4631      	mov	r1, r6
 800de5e:	4628      	mov	r0, r5
 800de60:	47b8      	blx	r7
 800de62:	3001      	adds	r0, #1
 800de64:	f43f af41 	beq.w	800dcea <_printf_float+0xc2>
 800de68:	f04f 0800 	mov.w	r8, #0
 800de6c:	f104 091a 	add.w	r9, r4, #26
 800de70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de72:	3b01      	subs	r3, #1
 800de74:	4543      	cmp	r3, r8
 800de76:	dc09      	bgt.n	800de8c <_printf_float+0x264>
 800de78:	6823      	ldr	r3, [r4, #0]
 800de7a:	079b      	lsls	r3, r3, #30
 800de7c:	f100 8105 	bmi.w	800e08a <_printf_float+0x462>
 800de80:	68e0      	ldr	r0, [r4, #12]
 800de82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de84:	4298      	cmp	r0, r3
 800de86:	bfb8      	it	lt
 800de88:	4618      	movlt	r0, r3
 800de8a:	e730      	b.n	800dcee <_printf_float+0xc6>
 800de8c:	2301      	movs	r3, #1
 800de8e:	464a      	mov	r2, r9
 800de90:	4631      	mov	r1, r6
 800de92:	4628      	mov	r0, r5
 800de94:	47b8      	blx	r7
 800de96:	3001      	adds	r0, #1
 800de98:	f43f af27 	beq.w	800dcea <_printf_float+0xc2>
 800de9c:	f108 0801 	add.w	r8, r8, #1
 800dea0:	e7e6      	b.n	800de70 <_printf_float+0x248>
 800dea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	dc39      	bgt.n	800df1c <_printf_float+0x2f4>
 800dea8:	4a1b      	ldr	r2, [pc, #108]	; (800df18 <_printf_float+0x2f0>)
 800deaa:	2301      	movs	r3, #1
 800deac:	4631      	mov	r1, r6
 800deae:	4628      	mov	r0, r5
 800deb0:	47b8      	blx	r7
 800deb2:	3001      	adds	r0, #1
 800deb4:	f43f af19 	beq.w	800dcea <_printf_float+0xc2>
 800deb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800debc:	4313      	orrs	r3, r2
 800debe:	d102      	bne.n	800dec6 <_printf_float+0x29e>
 800dec0:	6823      	ldr	r3, [r4, #0]
 800dec2:	07d9      	lsls	r1, r3, #31
 800dec4:	d5d8      	bpl.n	800de78 <_printf_float+0x250>
 800dec6:	ee18 3a10 	vmov	r3, s16
 800deca:	4652      	mov	r2, sl
 800decc:	4631      	mov	r1, r6
 800dece:	4628      	mov	r0, r5
 800ded0:	47b8      	blx	r7
 800ded2:	3001      	adds	r0, #1
 800ded4:	f43f af09 	beq.w	800dcea <_printf_float+0xc2>
 800ded8:	f04f 0900 	mov.w	r9, #0
 800dedc:	f104 0a1a 	add.w	sl, r4, #26
 800dee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dee2:	425b      	negs	r3, r3
 800dee4:	454b      	cmp	r3, r9
 800dee6:	dc01      	bgt.n	800deec <_printf_float+0x2c4>
 800dee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deea:	e792      	b.n	800de12 <_printf_float+0x1ea>
 800deec:	2301      	movs	r3, #1
 800deee:	4652      	mov	r2, sl
 800def0:	4631      	mov	r1, r6
 800def2:	4628      	mov	r0, r5
 800def4:	47b8      	blx	r7
 800def6:	3001      	adds	r0, #1
 800def8:	f43f aef7 	beq.w	800dcea <_printf_float+0xc2>
 800defc:	f109 0901 	add.w	r9, r9, #1
 800df00:	e7ee      	b.n	800dee0 <_printf_float+0x2b8>
 800df02:	bf00      	nop
 800df04:	7fefffff 	.word	0x7fefffff
 800df08:	08011f74 	.word	0x08011f74
 800df0c:	08011f78 	.word	0x08011f78
 800df10:	08011f80 	.word	0x08011f80
 800df14:	08011f7c 	.word	0x08011f7c
 800df18:	08011f84 	.word	0x08011f84
 800df1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df20:	429a      	cmp	r2, r3
 800df22:	bfa8      	it	ge
 800df24:	461a      	movge	r2, r3
 800df26:	2a00      	cmp	r2, #0
 800df28:	4691      	mov	r9, r2
 800df2a:	dc37      	bgt.n	800df9c <_printf_float+0x374>
 800df2c:	f04f 0b00 	mov.w	fp, #0
 800df30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df34:	f104 021a 	add.w	r2, r4, #26
 800df38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df3a:	9305      	str	r3, [sp, #20]
 800df3c:	eba3 0309 	sub.w	r3, r3, r9
 800df40:	455b      	cmp	r3, fp
 800df42:	dc33      	bgt.n	800dfac <_printf_float+0x384>
 800df44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df48:	429a      	cmp	r2, r3
 800df4a:	db3b      	blt.n	800dfc4 <_printf_float+0x39c>
 800df4c:	6823      	ldr	r3, [r4, #0]
 800df4e:	07da      	lsls	r2, r3, #31
 800df50:	d438      	bmi.n	800dfc4 <_printf_float+0x39c>
 800df52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df54:	9a05      	ldr	r2, [sp, #20]
 800df56:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df58:	1a9a      	subs	r2, r3, r2
 800df5a:	eba3 0901 	sub.w	r9, r3, r1
 800df5e:	4591      	cmp	r9, r2
 800df60:	bfa8      	it	ge
 800df62:	4691      	movge	r9, r2
 800df64:	f1b9 0f00 	cmp.w	r9, #0
 800df68:	dc35      	bgt.n	800dfd6 <_printf_float+0x3ae>
 800df6a:	f04f 0800 	mov.w	r8, #0
 800df6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df72:	f104 0a1a 	add.w	sl, r4, #26
 800df76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df7a:	1a9b      	subs	r3, r3, r2
 800df7c:	eba3 0309 	sub.w	r3, r3, r9
 800df80:	4543      	cmp	r3, r8
 800df82:	f77f af79 	ble.w	800de78 <_printf_float+0x250>
 800df86:	2301      	movs	r3, #1
 800df88:	4652      	mov	r2, sl
 800df8a:	4631      	mov	r1, r6
 800df8c:	4628      	mov	r0, r5
 800df8e:	47b8      	blx	r7
 800df90:	3001      	adds	r0, #1
 800df92:	f43f aeaa 	beq.w	800dcea <_printf_float+0xc2>
 800df96:	f108 0801 	add.w	r8, r8, #1
 800df9a:	e7ec      	b.n	800df76 <_printf_float+0x34e>
 800df9c:	4613      	mov	r3, r2
 800df9e:	4631      	mov	r1, r6
 800dfa0:	4642      	mov	r2, r8
 800dfa2:	4628      	mov	r0, r5
 800dfa4:	47b8      	blx	r7
 800dfa6:	3001      	adds	r0, #1
 800dfa8:	d1c0      	bne.n	800df2c <_printf_float+0x304>
 800dfaa:	e69e      	b.n	800dcea <_printf_float+0xc2>
 800dfac:	2301      	movs	r3, #1
 800dfae:	4631      	mov	r1, r6
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	9205      	str	r2, [sp, #20]
 800dfb4:	47b8      	blx	r7
 800dfb6:	3001      	adds	r0, #1
 800dfb8:	f43f ae97 	beq.w	800dcea <_printf_float+0xc2>
 800dfbc:	9a05      	ldr	r2, [sp, #20]
 800dfbe:	f10b 0b01 	add.w	fp, fp, #1
 800dfc2:	e7b9      	b.n	800df38 <_printf_float+0x310>
 800dfc4:	ee18 3a10 	vmov	r3, s16
 800dfc8:	4652      	mov	r2, sl
 800dfca:	4631      	mov	r1, r6
 800dfcc:	4628      	mov	r0, r5
 800dfce:	47b8      	blx	r7
 800dfd0:	3001      	adds	r0, #1
 800dfd2:	d1be      	bne.n	800df52 <_printf_float+0x32a>
 800dfd4:	e689      	b.n	800dcea <_printf_float+0xc2>
 800dfd6:	9a05      	ldr	r2, [sp, #20]
 800dfd8:	464b      	mov	r3, r9
 800dfda:	4442      	add	r2, r8
 800dfdc:	4631      	mov	r1, r6
 800dfde:	4628      	mov	r0, r5
 800dfe0:	47b8      	blx	r7
 800dfe2:	3001      	adds	r0, #1
 800dfe4:	d1c1      	bne.n	800df6a <_printf_float+0x342>
 800dfe6:	e680      	b.n	800dcea <_printf_float+0xc2>
 800dfe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dfea:	2a01      	cmp	r2, #1
 800dfec:	dc01      	bgt.n	800dff2 <_printf_float+0x3ca>
 800dfee:	07db      	lsls	r3, r3, #31
 800dff0:	d538      	bpl.n	800e064 <_printf_float+0x43c>
 800dff2:	2301      	movs	r3, #1
 800dff4:	4642      	mov	r2, r8
 800dff6:	4631      	mov	r1, r6
 800dff8:	4628      	mov	r0, r5
 800dffa:	47b8      	blx	r7
 800dffc:	3001      	adds	r0, #1
 800dffe:	f43f ae74 	beq.w	800dcea <_printf_float+0xc2>
 800e002:	ee18 3a10 	vmov	r3, s16
 800e006:	4652      	mov	r2, sl
 800e008:	4631      	mov	r1, r6
 800e00a:	4628      	mov	r0, r5
 800e00c:	47b8      	blx	r7
 800e00e:	3001      	adds	r0, #1
 800e010:	f43f ae6b 	beq.w	800dcea <_printf_float+0xc2>
 800e014:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e018:	2200      	movs	r2, #0
 800e01a:	2300      	movs	r3, #0
 800e01c:	f7f2 fd54 	bl	8000ac8 <__aeabi_dcmpeq>
 800e020:	b9d8      	cbnz	r0, 800e05a <_printf_float+0x432>
 800e022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e024:	f108 0201 	add.w	r2, r8, #1
 800e028:	3b01      	subs	r3, #1
 800e02a:	4631      	mov	r1, r6
 800e02c:	4628      	mov	r0, r5
 800e02e:	47b8      	blx	r7
 800e030:	3001      	adds	r0, #1
 800e032:	d10e      	bne.n	800e052 <_printf_float+0x42a>
 800e034:	e659      	b.n	800dcea <_printf_float+0xc2>
 800e036:	2301      	movs	r3, #1
 800e038:	4652      	mov	r2, sl
 800e03a:	4631      	mov	r1, r6
 800e03c:	4628      	mov	r0, r5
 800e03e:	47b8      	blx	r7
 800e040:	3001      	adds	r0, #1
 800e042:	f43f ae52 	beq.w	800dcea <_printf_float+0xc2>
 800e046:	f108 0801 	add.w	r8, r8, #1
 800e04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e04c:	3b01      	subs	r3, #1
 800e04e:	4543      	cmp	r3, r8
 800e050:	dcf1      	bgt.n	800e036 <_printf_float+0x40e>
 800e052:	464b      	mov	r3, r9
 800e054:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e058:	e6dc      	b.n	800de14 <_printf_float+0x1ec>
 800e05a:	f04f 0800 	mov.w	r8, #0
 800e05e:	f104 0a1a 	add.w	sl, r4, #26
 800e062:	e7f2      	b.n	800e04a <_printf_float+0x422>
 800e064:	2301      	movs	r3, #1
 800e066:	4642      	mov	r2, r8
 800e068:	e7df      	b.n	800e02a <_printf_float+0x402>
 800e06a:	2301      	movs	r3, #1
 800e06c:	464a      	mov	r2, r9
 800e06e:	4631      	mov	r1, r6
 800e070:	4628      	mov	r0, r5
 800e072:	47b8      	blx	r7
 800e074:	3001      	adds	r0, #1
 800e076:	f43f ae38 	beq.w	800dcea <_printf_float+0xc2>
 800e07a:	f108 0801 	add.w	r8, r8, #1
 800e07e:	68e3      	ldr	r3, [r4, #12]
 800e080:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e082:	1a5b      	subs	r3, r3, r1
 800e084:	4543      	cmp	r3, r8
 800e086:	dcf0      	bgt.n	800e06a <_printf_float+0x442>
 800e088:	e6fa      	b.n	800de80 <_printf_float+0x258>
 800e08a:	f04f 0800 	mov.w	r8, #0
 800e08e:	f104 0919 	add.w	r9, r4, #25
 800e092:	e7f4      	b.n	800e07e <_printf_float+0x456>

0800e094 <_printf_common>:
 800e094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e098:	4616      	mov	r6, r2
 800e09a:	4699      	mov	r9, r3
 800e09c:	688a      	ldr	r2, [r1, #8]
 800e09e:	690b      	ldr	r3, [r1, #16]
 800e0a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	bfb8      	it	lt
 800e0a8:	4613      	movlt	r3, r2
 800e0aa:	6033      	str	r3, [r6, #0]
 800e0ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e0b0:	4607      	mov	r7, r0
 800e0b2:	460c      	mov	r4, r1
 800e0b4:	b10a      	cbz	r2, 800e0ba <_printf_common+0x26>
 800e0b6:	3301      	adds	r3, #1
 800e0b8:	6033      	str	r3, [r6, #0]
 800e0ba:	6823      	ldr	r3, [r4, #0]
 800e0bc:	0699      	lsls	r1, r3, #26
 800e0be:	bf42      	ittt	mi
 800e0c0:	6833      	ldrmi	r3, [r6, #0]
 800e0c2:	3302      	addmi	r3, #2
 800e0c4:	6033      	strmi	r3, [r6, #0]
 800e0c6:	6825      	ldr	r5, [r4, #0]
 800e0c8:	f015 0506 	ands.w	r5, r5, #6
 800e0cc:	d106      	bne.n	800e0dc <_printf_common+0x48>
 800e0ce:	f104 0a19 	add.w	sl, r4, #25
 800e0d2:	68e3      	ldr	r3, [r4, #12]
 800e0d4:	6832      	ldr	r2, [r6, #0]
 800e0d6:	1a9b      	subs	r3, r3, r2
 800e0d8:	42ab      	cmp	r3, r5
 800e0da:	dc26      	bgt.n	800e12a <_printf_common+0x96>
 800e0dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e0e0:	1e13      	subs	r3, r2, #0
 800e0e2:	6822      	ldr	r2, [r4, #0]
 800e0e4:	bf18      	it	ne
 800e0e6:	2301      	movne	r3, #1
 800e0e8:	0692      	lsls	r2, r2, #26
 800e0ea:	d42b      	bmi.n	800e144 <_printf_common+0xb0>
 800e0ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e0f0:	4649      	mov	r1, r9
 800e0f2:	4638      	mov	r0, r7
 800e0f4:	47c0      	blx	r8
 800e0f6:	3001      	adds	r0, #1
 800e0f8:	d01e      	beq.n	800e138 <_printf_common+0xa4>
 800e0fa:	6823      	ldr	r3, [r4, #0]
 800e0fc:	68e5      	ldr	r5, [r4, #12]
 800e0fe:	6832      	ldr	r2, [r6, #0]
 800e100:	f003 0306 	and.w	r3, r3, #6
 800e104:	2b04      	cmp	r3, #4
 800e106:	bf08      	it	eq
 800e108:	1aad      	subeq	r5, r5, r2
 800e10a:	68a3      	ldr	r3, [r4, #8]
 800e10c:	6922      	ldr	r2, [r4, #16]
 800e10e:	bf0c      	ite	eq
 800e110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e114:	2500      	movne	r5, #0
 800e116:	4293      	cmp	r3, r2
 800e118:	bfc4      	itt	gt
 800e11a:	1a9b      	subgt	r3, r3, r2
 800e11c:	18ed      	addgt	r5, r5, r3
 800e11e:	2600      	movs	r6, #0
 800e120:	341a      	adds	r4, #26
 800e122:	42b5      	cmp	r5, r6
 800e124:	d11a      	bne.n	800e15c <_printf_common+0xc8>
 800e126:	2000      	movs	r0, #0
 800e128:	e008      	b.n	800e13c <_printf_common+0xa8>
 800e12a:	2301      	movs	r3, #1
 800e12c:	4652      	mov	r2, sl
 800e12e:	4649      	mov	r1, r9
 800e130:	4638      	mov	r0, r7
 800e132:	47c0      	blx	r8
 800e134:	3001      	adds	r0, #1
 800e136:	d103      	bne.n	800e140 <_printf_common+0xac>
 800e138:	f04f 30ff 	mov.w	r0, #4294967295
 800e13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e140:	3501      	adds	r5, #1
 800e142:	e7c6      	b.n	800e0d2 <_printf_common+0x3e>
 800e144:	18e1      	adds	r1, r4, r3
 800e146:	1c5a      	adds	r2, r3, #1
 800e148:	2030      	movs	r0, #48	; 0x30
 800e14a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e14e:	4422      	add	r2, r4
 800e150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e158:	3302      	adds	r3, #2
 800e15a:	e7c7      	b.n	800e0ec <_printf_common+0x58>
 800e15c:	2301      	movs	r3, #1
 800e15e:	4622      	mov	r2, r4
 800e160:	4649      	mov	r1, r9
 800e162:	4638      	mov	r0, r7
 800e164:	47c0      	blx	r8
 800e166:	3001      	adds	r0, #1
 800e168:	d0e6      	beq.n	800e138 <_printf_common+0xa4>
 800e16a:	3601      	adds	r6, #1
 800e16c:	e7d9      	b.n	800e122 <_printf_common+0x8e>
	...

0800e170 <_printf_i>:
 800e170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e174:	7e0f      	ldrb	r7, [r1, #24]
 800e176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e178:	2f78      	cmp	r7, #120	; 0x78
 800e17a:	4691      	mov	r9, r2
 800e17c:	4680      	mov	r8, r0
 800e17e:	460c      	mov	r4, r1
 800e180:	469a      	mov	sl, r3
 800e182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e186:	d807      	bhi.n	800e198 <_printf_i+0x28>
 800e188:	2f62      	cmp	r7, #98	; 0x62
 800e18a:	d80a      	bhi.n	800e1a2 <_printf_i+0x32>
 800e18c:	2f00      	cmp	r7, #0
 800e18e:	f000 80d8 	beq.w	800e342 <_printf_i+0x1d2>
 800e192:	2f58      	cmp	r7, #88	; 0x58
 800e194:	f000 80a3 	beq.w	800e2de <_printf_i+0x16e>
 800e198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e19c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e1a0:	e03a      	b.n	800e218 <_printf_i+0xa8>
 800e1a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e1a6:	2b15      	cmp	r3, #21
 800e1a8:	d8f6      	bhi.n	800e198 <_printf_i+0x28>
 800e1aa:	a101      	add	r1, pc, #4	; (adr r1, 800e1b0 <_printf_i+0x40>)
 800e1ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e1b0:	0800e209 	.word	0x0800e209
 800e1b4:	0800e21d 	.word	0x0800e21d
 800e1b8:	0800e199 	.word	0x0800e199
 800e1bc:	0800e199 	.word	0x0800e199
 800e1c0:	0800e199 	.word	0x0800e199
 800e1c4:	0800e199 	.word	0x0800e199
 800e1c8:	0800e21d 	.word	0x0800e21d
 800e1cc:	0800e199 	.word	0x0800e199
 800e1d0:	0800e199 	.word	0x0800e199
 800e1d4:	0800e199 	.word	0x0800e199
 800e1d8:	0800e199 	.word	0x0800e199
 800e1dc:	0800e329 	.word	0x0800e329
 800e1e0:	0800e24d 	.word	0x0800e24d
 800e1e4:	0800e30b 	.word	0x0800e30b
 800e1e8:	0800e199 	.word	0x0800e199
 800e1ec:	0800e199 	.word	0x0800e199
 800e1f0:	0800e34b 	.word	0x0800e34b
 800e1f4:	0800e199 	.word	0x0800e199
 800e1f8:	0800e24d 	.word	0x0800e24d
 800e1fc:	0800e199 	.word	0x0800e199
 800e200:	0800e199 	.word	0x0800e199
 800e204:	0800e313 	.word	0x0800e313
 800e208:	682b      	ldr	r3, [r5, #0]
 800e20a:	1d1a      	adds	r2, r3, #4
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	602a      	str	r2, [r5, #0]
 800e210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e218:	2301      	movs	r3, #1
 800e21a:	e0a3      	b.n	800e364 <_printf_i+0x1f4>
 800e21c:	6820      	ldr	r0, [r4, #0]
 800e21e:	6829      	ldr	r1, [r5, #0]
 800e220:	0606      	lsls	r6, r0, #24
 800e222:	f101 0304 	add.w	r3, r1, #4
 800e226:	d50a      	bpl.n	800e23e <_printf_i+0xce>
 800e228:	680e      	ldr	r6, [r1, #0]
 800e22a:	602b      	str	r3, [r5, #0]
 800e22c:	2e00      	cmp	r6, #0
 800e22e:	da03      	bge.n	800e238 <_printf_i+0xc8>
 800e230:	232d      	movs	r3, #45	; 0x2d
 800e232:	4276      	negs	r6, r6
 800e234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e238:	485e      	ldr	r0, [pc, #376]	; (800e3b4 <_printf_i+0x244>)
 800e23a:	230a      	movs	r3, #10
 800e23c:	e019      	b.n	800e272 <_printf_i+0x102>
 800e23e:	680e      	ldr	r6, [r1, #0]
 800e240:	602b      	str	r3, [r5, #0]
 800e242:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e246:	bf18      	it	ne
 800e248:	b236      	sxthne	r6, r6
 800e24a:	e7ef      	b.n	800e22c <_printf_i+0xbc>
 800e24c:	682b      	ldr	r3, [r5, #0]
 800e24e:	6820      	ldr	r0, [r4, #0]
 800e250:	1d19      	adds	r1, r3, #4
 800e252:	6029      	str	r1, [r5, #0]
 800e254:	0601      	lsls	r1, r0, #24
 800e256:	d501      	bpl.n	800e25c <_printf_i+0xec>
 800e258:	681e      	ldr	r6, [r3, #0]
 800e25a:	e002      	b.n	800e262 <_printf_i+0xf2>
 800e25c:	0646      	lsls	r6, r0, #25
 800e25e:	d5fb      	bpl.n	800e258 <_printf_i+0xe8>
 800e260:	881e      	ldrh	r6, [r3, #0]
 800e262:	4854      	ldr	r0, [pc, #336]	; (800e3b4 <_printf_i+0x244>)
 800e264:	2f6f      	cmp	r7, #111	; 0x6f
 800e266:	bf0c      	ite	eq
 800e268:	2308      	moveq	r3, #8
 800e26a:	230a      	movne	r3, #10
 800e26c:	2100      	movs	r1, #0
 800e26e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e272:	6865      	ldr	r5, [r4, #4]
 800e274:	60a5      	str	r5, [r4, #8]
 800e276:	2d00      	cmp	r5, #0
 800e278:	bfa2      	ittt	ge
 800e27a:	6821      	ldrge	r1, [r4, #0]
 800e27c:	f021 0104 	bicge.w	r1, r1, #4
 800e280:	6021      	strge	r1, [r4, #0]
 800e282:	b90e      	cbnz	r6, 800e288 <_printf_i+0x118>
 800e284:	2d00      	cmp	r5, #0
 800e286:	d04d      	beq.n	800e324 <_printf_i+0x1b4>
 800e288:	4615      	mov	r5, r2
 800e28a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e28e:	fb03 6711 	mls	r7, r3, r1, r6
 800e292:	5dc7      	ldrb	r7, [r0, r7]
 800e294:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e298:	4637      	mov	r7, r6
 800e29a:	42bb      	cmp	r3, r7
 800e29c:	460e      	mov	r6, r1
 800e29e:	d9f4      	bls.n	800e28a <_printf_i+0x11a>
 800e2a0:	2b08      	cmp	r3, #8
 800e2a2:	d10b      	bne.n	800e2bc <_printf_i+0x14c>
 800e2a4:	6823      	ldr	r3, [r4, #0]
 800e2a6:	07de      	lsls	r6, r3, #31
 800e2a8:	d508      	bpl.n	800e2bc <_printf_i+0x14c>
 800e2aa:	6923      	ldr	r3, [r4, #16]
 800e2ac:	6861      	ldr	r1, [r4, #4]
 800e2ae:	4299      	cmp	r1, r3
 800e2b0:	bfde      	ittt	le
 800e2b2:	2330      	movle	r3, #48	; 0x30
 800e2b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e2b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e2bc:	1b52      	subs	r2, r2, r5
 800e2be:	6122      	str	r2, [r4, #16]
 800e2c0:	f8cd a000 	str.w	sl, [sp]
 800e2c4:	464b      	mov	r3, r9
 800e2c6:	aa03      	add	r2, sp, #12
 800e2c8:	4621      	mov	r1, r4
 800e2ca:	4640      	mov	r0, r8
 800e2cc:	f7ff fee2 	bl	800e094 <_printf_common>
 800e2d0:	3001      	adds	r0, #1
 800e2d2:	d14c      	bne.n	800e36e <_printf_i+0x1fe>
 800e2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d8:	b004      	add	sp, #16
 800e2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2de:	4835      	ldr	r0, [pc, #212]	; (800e3b4 <_printf_i+0x244>)
 800e2e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e2e4:	6829      	ldr	r1, [r5, #0]
 800e2e6:	6823      	ldr	r3, [r4, #0]
 800e2e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800e2ec:	6029      	str	r1, [r5, #0]
 800e2ee:	061d      	lsls	r5, r3, #24
 800e2f0:	d514      	bpl.n	800e31c <_printf_i+0x1ac>
 800e2f2:	07df      	lsls	r7, r3, #31
 800e2f4:	bf44      	itt	mi
 800e2f6:	f043 0320 	orrmi.w	r3, r3, #32
 800e2fa:	6023      	strmi	r3, [r4, #0]
 800e2fc:	b91e      	cbnz	r6, 800e306 <_printf_i+0x196>
 800e2fe:	6823      	ldr	r3, [r4, #0]
 800e300:	f023 0320 	bic.w	r3, r3, #32
 800e304:	6023      	str	r3, [r4, #0]
 800e306:	2310      	movs	r3, #16
 800e308:	e7b0      	b.n	800e26c <_printf_i+0xfc>
 800e30a:	6823      	ldr	r3, [r4, #0]
 800e30c:	f043 0320 	orr.w	r3, r3, #32
 800e310:	6023      	str	r3, [r4, #0]
 800e312:	2378      	movs	r3, #120	; 0x78
 800e314:	4828      	ldr	r0, [pc, #160]	; (800e3b8 <_printf_i+0x248>)
 800e316:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e31a:	e7e3      	b.n	800e2e4 <_printf_i+0x174>
 800e31c:	0659      	lsls	r1, r3, #25
 800e31e:	bf48      	it	mi
 800e320:	b2b6      	uxthmi	r6, r6
 800e322:	e7e6      	b.n	800e2f2 <_printf_i+0x182>
 800e324:	4615      	mov	r5, r2
 800e326:	e7bb      	b.n	800e2a0 <_printf_i+0x130>
 800e328:	682b      	ldr	r3, [r5, #0]
 800e32a:	6826      	ldr	r6, [r4, #0]
 800e32c:	6961      	ldr	r1, [r4, #20]
 800e32e:	1d18      	adds	r0, r3, #4
 800e330:	6028      	str	r0, [r5, #0]
 800e332:	0635      	lsls	r5, r6, #24
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	d501      	bpl.n	800e33c <_printf_i+0x1cc>
 800e338:	6019      	str	r1, [r3, #0]
 800e33a:	e002      	b.n	800e342 <_printf_i+0x1d2>
 800e33c:	0670      	lsls	r0, r6, #25
 800e33e:	d5fb      	bpl.n	800e338 <_printf_i+0x1c8>
 800e340:	8019      	strh	r1, [r3, #0]
 800e342:	2300      	movs	r3, #0
 800e344:	6123      	str	r3, [r4, #16]
 800e346:	4615      	mov	r5, r2
 800e348:	e7ba      	b.n	800e2c0 <_printf_i+0x150>
 800e34a:	682b      	ldr	r3, [r5, #0]
 800e34c:	1d1a      	adds	r2, r3, #4
 800e34e:	602a      	str	r2, [r5, #0]
 800e350:	681d      	ldr	r5, [r3, #0]
 800e352:	6862      	ldr	r2, [r4, #4]
 800e354:	2100      	movs	r1, #0
 800e356:	4628      	mov	r0, r5
 800e358:	f7f1 ff42 	bl	80001e0 <memchr>
 800e35c:	b108      	cbz	r0, 800e362 <_printf_i+0x1f2>
 800e35e:	1b40      	subs	r0, r0, r5
 800e360:	6060      	str	r0, [r4, #4]
 800e362:	6863      	ldr	r3, [r4, #4]
 800e364:	6123      	str	r3, [r4, #16]
 800e366:	2300      	movs	r3, #0
 800e368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e36c:	e7a8      	b.n	800e2c0 <_printf_i+0x150>
 800e36e:	6923      	ldr	r3, [r4, #16]
 800e370:	462a      	mov	r2, r5
 800e372:	4649      	mov	r1, r9
 800e374:	4640      	mov	r0, r8
 800e376:	47d0      	blx	sl
 800e378:	3001      	adds	r0, #1
 800e37a:	d0ab      	beq.n	800e2d4 <_printf_i+0x164>
 800e37c:	6823      	ldr	r3, [r4, #0]
 800e37e:	079b      	lsls	r3, r3, #30
 800e380:	d413      	bmi.n	800e3aa <_printf_i+0x23a>
 800e382:	68e0      	ldr	r0, [r4, #12]
 800e384:	9b03      	ldr	r3, [sp, #12]
 800e386:	4298      	cmp	r0, r3
 800e388:	bfb8      	it	lt
 800e38a:	4618      	movlt	r0, r3
 800e38c:	e7a4      	b.n	800e2d8 <_printf_i+0x168>
 800e38e:	2301      	movs	r3, #1
 800e390:	4632      	mov	r2, r6
 800e392:	4649      	mov	r1, r9
 800e394:	4640      	mov	r0, r8
 800e396:	47d0      	blx	sl
 800e398:	3001      	adds	r0, #1
 800e39a:	d09b      	beq.n	800e2d4 <_printf_i+0x164>
 800e39c:	3501      	adds	r5, #1
 800e39e:	68e3      	ldr	r3, [r4, #12]
 800e3a0:	9903      	ldr	r1, [sp, #12]
 800e3a2:	1a5b      	subs	r3, r3, r1
 800e3a4:	42ab      	cmp	r3, r5
 800e3a6:	dcf2      	bgt.n	800e38e <_printf_i+0x21e>
 800e3a8:	e7eb      	b.n	800e382 <_printf_i+0x212>
 800e3aa:	2500      	movs	r5, #0
 800e3ac:	f104 0619 	add.w	r6, r4, #25
 800e3b0:	e7f5      	b.n	800e39e <_printf_i+0x22e>
 800e3b2:	bf00      	nop
 800e3b4:	08011f86 	.word	0x08011f86
 800e3b8:	08011f97 	.word	0x08011f97

0800e3bc <iprintf>:
 800e3bc:	b40f      	push	{r0, r1, r2, r3}
 800e3be:	4b0a      	ldr	r3, [pc, #40]	; (800e3e8 <iprintf+0x2c>)
 800e3c0:	b513      	push	{r0, r1, r4, lr}
 800e3c2:	681c      	ldr	r4, [r3, #0]
 800e3c4:	b124      	cbz	r4, 800e3d0 <iprintf+0x14>
 800e3c6:	69a3      	ldr	r3, [r4, #24]
 800e3c8:	b913      	cbnz	r3, 800e3d0 <iprintf+0x14>
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f7ff fa1c 	bl	800d808 <__sinit>
 800e3d0:	ab05      	add	r3, sp, #20
 800e3d2:	9a04      	ldr	r2, [sp, #16]
 800e3d4:	68a1      	ldr	r1, [r4, #8]
 800e3d6:	9301      	str	r3, [sp, #4]
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f001 fdf9 	bl	800ffd0 <_vfiprintf_r>
 800e3de:	b002      	add	sp, #8
 800e3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3e4:	b004      	add	sp, #16
 800e3e6:	4770      	bx	lr
 800e3e8:	200000a0 	.word	0x200000a0

0800e3ec <_puts_r>:
 800e3ec:	b570      	push	{r4, r5, r6, lr}
 800e3ee:	460e      	mov	r6, r1
 800e3f0:	4605      	mov	r5, r0
 800e3f2:	b118      	cbz	r0, 800e3fc <_puts_r+0x10>
 800e3f4:	6983      	ldr	r3, [r0, #24]
 800e3f6:	b90b      	cbnz	r3, 800e3fc <_puts_r+0x10>
 800e3f8:	f7ff fa06 	bl	800d808 <__sinit>
 800e3fc:	69ab      	ldr	r3, [r5, #24]
 800e3fe:	68ac      	ldr	r4, [r5, #8]
 800e400:	b913      	cbnz	r3, 800e408 <_puts_r+0x1c>
 800e402:	4628      	mov	r0, r5
 800e404:	f7ff fa00 	bl	800d808 <__sinit>
 800e408:	4b2c      	ldr	r3, [pc, #176]	; (800e4bc <_puts_r+0xd0>)
 800e40a:	429c      	cmp	r4, r3
 800e40c:	d120      	bne.n	800e450 <_puts_r+0x64>
 800e40e:	686c      	ldr	r4, [r5, #4]
 800e410:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e412:	07db      	lsls	r3, r3, #31
 800e414:	d405      	bmi.n	800e422 <_puts_r+0x36>
 800e416:	89a3      	ldrh	r3, [r4, #12]
 800e418:	0598      	lsls	r0, r3, #22
 800e41a:	d402      	bmi.n	800e422 <_puts_r+0x36>
 800e41c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e41e:	f7ff fab6 	bl	800d98e <__retarget_lock_acquire_recursive>
 800e422:	89a3      	ldrh	r3, [r4, #12]
 800e424:	0719      	lsls	r1, r3, #28
 800e426:	d51d      	bpl.n	800e464 <_puts_r+0x78>
 800e428:	6923      	ldr	r3, [r4, #16]
 800e42a:	b1db      	cbz	r3, 800e464 <_puts_r+0x78>
 800e42c:	3e01      	subs	r6, #1
 800e42e:	68a3      	ldr	r3, [r4, #8]
 800e430:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e434:	3b01      	subs	r3, #1
 800e436:	60a3      	str	r3, [r4, #8]
 800e438:	bb39      	cbnz	r1, 800e48a <_puts_r+0x9e>
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	da38      	bge.n	800e4b0 <_puts_r+0xc4>
 800e43e:	4622      	mov	r2, r4
 800e440:	210a      	movs	r1, #10
 800e442:	4628      	mov	r0, r5
 800e444:	f000 f906 	bl	800e654 <__swbuf_r>
 800e448:	3001      	adds	r0, #1
 800e44a:	d011      	beq.n	800e470 <_puts_r+0x84>
 800e44c:	250a      	movs	r5, #10
 800e44e:	e011      	b.n	800e474 <_puts_r+0x88>
 800e450:	4b1b      	ldr	r3, [pc, #108]	; (800e4c0 <_puts_r+0xd4>)
 800e452:	429c      	cmp	r4, r3
 800e454:	d101      	bne.n	800e45a <_puts_r+0x6e>
 800e456:	68ac      	ldr	r4, [r5, #8]
 800e458:	e7da      	b.n	800e410 <_puts_r+0x24>
 800e45a:	4b1a      	ldr	r3, [pc, #104]	; (800e4c4 <_puts_r+0xd8>)
 800e45c:	429c      	cmp	r4, r3
 800e45e:	bf08      	it	eq
 800e460:	68ec      	ldreq	r4, [r5, #12]
 800e462:	e7d5      	b.n	800e410 <_puts_r+0x24>
 800e464:	4621      	mov	r1, r4
 800e466:	4628      	mov	r0, r5
 800e468:	f000 f958 	bl	800e71c <__swsetup_r>
 800e46c:	2800      	cmp	r0, #0
 800e46e:	d0dd      	beq.n	800e42c <_puts_r+0x40>
 800e470:	f04f 35ff 	mov.w	r5, #4294967295
 800e474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e476:	07da      	lsls	r2, r3, #31
 800e478:	d405      	bmi.n	800e486 <_puts_r+0x9a>
 800e47a:	89a3      	ldrh	r3, [r4, #12]
 800e47c:	059b      	lsls	r3, r3, #22
 800e47e:	d402      	bmi.n	800e486 <_puts_r+0x9a>
 800e480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e482:	f7ff fa85 	bl	800d990 <__retarget_lock_release_recursive>
 800e486:	4628      	mov	r0, r5
 800e488:	bd70      	pop	{r4, r5, r6, pc}
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	da04      	bge.n	800e498 <_puts_r+0xac>
 800e48e:	69a2      	ldr	r2, [r4, #24]
 800e490:	429a      	cmp	r2, r3
 800e492:	dc06      	bgt.n	800e4a2 <_puts_r+0xb6>
 800e494:	290a      	cmp	r1, #10
 800e496:	d004      	beq.n	800e4a2 <_puts_r+0xb6>
 800e498:	6823      	ldr	r3, [r4, #0]
 800e49a:	1c5a      	adds	r2, r3, #1
 800e49c:	6022      	str	r2, [r4, #0]
 800e49e:	7019      	strb	r1, [r3, #0]
 800e4a0:	e7c5      	b.n	800e42e <_puts_r+0x42>
 800e4a2:	4622      	mov	r2, r4
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	f000 f8d5 	bl	800e654 <__swbuf_r>
 800e4aa:	3001      	adds	r0, #1
 800e4ac:	d1bf      	bne.n	800e42e <_puts_r+0x42>
 800e4ae:	e7df      	b.n	800e470 <_puts_r+0x84>
 800e4b0:	6823      	ldr	r3, [r4, #0]
 800e4b2:	250a      	movs	r5, #10
 800e4b4:	1c5a      	adds	r2, r3, #1
 800e4b6:	6022      	str	r2, [r4, #0]
 800e4b8:	701d      	strb	r5, [r3, #0]
 800e4ba:	e7db      	b.n	800e474 <_puts_r+0x88>
 800e4bc:	08011f30 	.word	0x08011f30
 800e4c0:	08011f50 	.word	0x08011f50
 800e4c4:	08011f10 	.word	0x08011f10

0800e4c8 <puts>:
 800e4c8:	4b02      	ldr	r3, [pc, #8]	; (800e4d4 <puts+0xc>)
 800e4ca:	4601      	mov	r1, r0
 800e4cc:	6818      	ldr	r0, [r3, #0]
 800e4ce:	f7ff bf8d 	b.w	800e3ec <_puts_r>
 800e4d2:	bf00      	nop
 800e4d4:	200000a0 	.word	0x200000a0

0800e4d8 <cleanup_glue>:
 800e4d8:	b538      	push	{r3, r4, r5, lr}
 800e4da:	460c      	mov	r4, r1
 800e4dc:	6809      	ldr	r1, [r1, #0]
 800e4de:	4605      	mov	r5, r0
 800e4e0:	b109      	cbz	r1, 800e4e6 <cleanup_glue+0xe>
 800e4e2:	f7ff fff9 	bl	800e4d8 <cleanup_glue>
 800e4e6:	4621      	mov	r1, r4
 800e4e8:	4628      	mov	r0, r5
 800e4ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4ee:	f001 bcf9 	b.w	800fee4 <_free_r>
	...

0800e4f4 <_reclaim_reent>:
 800e4f4:	4b2c      	ldr	r3, [pc, #176]	; (800e5a8 <_reclaim_reent+0xb4>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4283      	cmp	r3, r0
 800e4fa:	b570      	push	{r4, r5, r6, lr}
 800e4fc:	4604      	mov	r4, r0
 800e4fe:	d051      	beq.n	800e5a4 <_reclaim_reent+0xb0>
 800e500:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e502:	b143      	cbz	r3, 800e516 <_reclaim_reent+0x22>
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d14a      	bne.n	800e5a0 <_reclaim_reent+0xac>
 800e50a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e50c:	6819      	ldr	r1, [r3, #0]
 800e50e:	b111      	cbz	r1, 800e516 <_reclaim_reent+0x22>
 800e510:	4620      	mov	r0, r4
 800e512:	f001 fce7 	bl	800fee4 <_free_r>
 800e516:	6961      	ldr	r1, [r4, #20]
 800e518:	b111      	cbz	r1, 800e520 <_reclaim_reent+0x2c>
 800e51a:	4620      	mov	r0, r4
 800e51c:	f001 fce2 	bl	800fee4 <_free_r>
 800e520:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e522:	b111      	cbz	r1, 800e52a <_reclaim_reent+0x36>
 800e524:	4620      	mov	r0, r4
 800e526:	f001 fcdd 	bl	800fee4 <_free_r>
 800e52a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e52c:	b111      	cbz	r1, 800e534 <_reclaim_reent+0x40>
 800e52e:	4620      	mov	r0, r4
 800e530:	f001 fcd8 	bl	800fee4 <_free_r>
 800e534:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e536:	b111      	cbz	r1, 800e53e <_reclaim_reent+0x4a>
 800e538:	4620      	mov	r0, r4
 800e53a:	f001 fcd3 	bl	800fee4 <_free_r>
 800e53e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e540:	b111      	cbz	r1, 800e548 <_reclaim_reent+0x54>
 800e542:	4620      	mov	r0, r4
 800e544:	f001 fcce 	bl	800fee4 <_free_r>
 800e548:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e54a:	b111      	cbz	r1, 800e552 <_reclaim_reent+0x5e>
 800e54c:	4620      	mov	r0, r4
 800e54e:	f001 fcc9 	bl	800fee4 <_free_r>
 800e552:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e554:	b111      	cbz	r1, 800e55c <_reclaim_reent+0x68>
 800e556:	4620      	mov	r0, r4
 800e558:	f001 fcc4 	bl	800fee4 <_free_r>
 800e55c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e55e:	b111      	cbz	r1, 800e566 <_reclaim_reent+0x72>
 800e560:	4620      	mov	r0, r4
 800e562:	f001 fcbf 	bl	800fee4 <_free_r>
 800e566:	69a3      	ldr	r3, [r4, #24]
 800e568:	b1e3      	cbz	r3, 800e5a4 <_reclaim_reent+0xb0>
 800e56a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e56c:	4620      	mov	r0, r4
 800e56e:	4798      	blx	r3
 800e570:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e572:	b1b9      	cbz	r1, 800e5a4 <_reclaim_reent+0xb0>
 800e574:	4620      	mov	r0, r4
 800e576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e57a:	f7ff bfad 	b.w	800e4d8 <cleanup_glue>
 800e57e:	5949      	ldr	r1, [r1, r5]
 800e580:	b941      	cbnz	r1, 800e594 <_reclaim_reent+0xa0>
 800e582:	3504      	adds	r5, #4
 800e584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e586:	2d80      	cmp	r5, #128	; 0x80
 800e588:	68d9      	ldr	r1, [r3, #12]
 800e58a:	d1f8      	bne.n	800e57e <_reclaim_reent+0x8a>
 800e58c:	4620      	mov	r0, r4
 800e58e:	f001 fca9 	bl	800fee4 <_free_r>
 800e592:	e7ba      	b.n	800e50a <_reclaim_reent+0x16>
 800e594:	680e      	ldr	r6, [r1, #0]
 800e596:	4620      	mov	r0, r4
 800e598:	f001 fca4 	bl	800fee4 <_free_r>
 800e59c:	4631      	mov	r1, r6
 800e59e:	e7ef      	b.n	800e580 <_reclaim_reent+0x8c>
 800e5a0:	2500      	movs	r5, #0
 800e5a2:	e7ef      	b.n	800e584 <_reclaim_reent+0x90>
 800e5a4:	bd70      	pop	{r4, r5, r6, pc}
 800e5a6:	bf00      	nop
 800e5a8:	200000a0 	.word	0x200000a0

0800e5ac <_sbrk_r>:
 800e5ac:	b538      	push	{r3, r4, r5, lr}
 800e5ae:	4d06      	ldr	r5, [pc, #24]	; (800e5c8 <_sbrk_r+0x1c>)
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	4608      	mov	r0, r1
 800e5b6:	602b      	str	r3, [r5, #0]
 800e5b8:	f7f5 f9de 	bl	8003978 <_sbrk>
 800e5bc:	1c43      	adds	r3, r0, #1
 800e5be:	d102      	bne.n	800e5c6 <_sbrk_r+0x1a>
 800e5c0:	682b      	ldr	r3, [r5, #0]
 800e5c2:	b103      	cbz	r3, 800e5c6 <_sbrk_r+0x1a>
 800e5c4:	6023      	str	r3, [r4, #0]
 800e5c6:	bd38      	pop	{r3, r4, r5, pc}
 800e5c8:	200055b8 	.word	0x200055b8

0800e5cc <__sread>:
 800e5cc:	b510      	push	{r4, lr}
 800e5ce:	460c      	mov	r4, r1
 800e5d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5d4:	f001 fe2c 	bl	8010230 <_read_r>
 800e5d8:	2800      	cmp	r0, #0
 800e5da:	bfab      	itete	ge
 800e5dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e5de:	89a3      	ldrhlt	r3, [r4, #12]
 800e5e0:	181b      	addge	r3, r3, r0
 800e5e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e5e6:	bfac      	ite	ge
 800e5e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e5ea:	81a3      	strhlt	r3, [r4, #12]
 800e5ec:	bd10      	pop	{r4, pc}

0800e5ee <__swrite>:
 800e5ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f2:	461f      	mov	r7, r3
 800e5f4:	898b      	ldrh	r3, [r1, #12]
 800e5f6:	05db      	lsls	r3, r3, #23
 800e5f8:	4605      	mov	r5, r0
 800e5fa:	460c      	mov	r4, r1
 800e5fc:	4616      	mov	r6, r2
 800e5fe:	d505      	bpl.n	800e60c <__swrite+0x1e>
 800e600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e604:	2302      	movs	r3, #2
 800e606:	2200      	movs	r2, #0
 800e608:	f001 f846 	bl	800f698 <_lseek_r>
 800e60c:	89a3      	ldrh	r3, [r4, #12]
 800e60e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e612:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e616:	81a3      	strh	r3, [r4, #12]
 800e618:	4632      	mov	r2, r6
 800e61a:	463b      	mov	r3, r7
 800e61c:	4628      	mov	r0, r5
 800e61e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e622:	f000 b869 	b.w	800e6f8 <_write_r>

0800e626 <__sseek>:
 800e626:	b510      	push	{r4, lr}
 800e628:	460c      	mov	r4, r1
 800e62a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e62e:	f001 f833 	bl	800f698 <_lseek_r>
 800e632:	1c43      	adds	r3, r0, #1
 800e634:	89a3      	ldrh	r3, [r4, #12]
 800e636:	bf15      	itete	ne
 800e638:	6560      	strne	r0, [r4, #84]	; 0x54
 800e63a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e63e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e642:	81a3      	strheq	r3, [r4, #12]
 800e644:	bf18      	it	ne
 800e646:	81a3      	strhne	r3, [r4, #12]
 800e648:	bd10      	pop	{r4, pc}

0800e64a <__sclose>:
 800e64a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e64e:	f000 b8d3 	b.w	800e7f8 <_close_r>
	...

0800e654 <__swbuf_r>:
 800e654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e656:	460e      	mov	r6, r1
 800e658:	4614      	mov	r4, r2
 800e65a:	4605      	mov	r5, r0
 800e65c:	b118      	cbz	r0, 800e666 <__swbuf_r+0x12>
 800e65e:	6983      	ldr	r3, [r0, #24]
 800e660:	b90b      	cbnz	r3, 800e666 <__swbuf_r+0x12>
 800e662:	f7ff f8d1 	bl	800d808 <__sinit>
 800e666:	4b21      	ldr	r3, [pc, #132]	; (800e6ec <__swbuf_r+0x98>)
 800e668:	429c      	cmp	r4, r3
 800e66a:	d12b      	bne.n	800e6c4 <__swbuf_r+0x70>
 800e66c:	686c      	ldr	r4, [r5, #4]
 800e66e:	69a3      	ldr	r3, [r4, #24]
 800e670:	60a3      	str	r3, [r4, #8]
 800e672:	89a3      	ldrh	r3, [r4, #12]
 800e674:	071a      	lsls	r2, r3, #28
 800e676:	d52f      	bpl.n	800e6d8 <__swbuf_r+0x84>
 800e678:	6923      	ldr	r3, [r4, #16]
 800e67a:	b36b      	cbz	r3, 800e6d8 <__swbuf_r+0x84>
 800e67c:	6923      	ldr	r3, [r4, #16]
 800e67e:	6820      	ldr	r0, [r4, #0]
 800e680:	1ac0      	subs	r0, r0, r3
 800e682:	6963      	ldr	r3, [r4, #20]
 800e684:	b2f6      	uxtb	r6, r6
 800e686:	4283      	cmp	r3, r0
 800e688:	4637      	mov	r7, r6
 800e68a:	dc04      	bgt.n	800e696 <__swbuf_r+0x42>
 800e68c:	4621      	mov	r1, r4
 800e68e:	4628      	mov	r0, r5
 800e690:	f000 ffc2 	bl	800f618 <_fflush_r>
 800e694:	bb30      	cbnz	r0, 800e6e4 <__swbuf_r+0x90>
 800e696:	68a3      	ldr	r3, [r4, #8]
 800e698:	3b01      	subs	r3, #1
 800e69a:	60a3      	str	r3, [r4, #8]
 800e69c:	6823      	ldr	r3, [r4, #0]
 800e69e:	1c5a      	adds	r2, r3, #1
 800e6a0:	6022      	str	r2, [r4, #0]
 800e6a2:	701e      	strb	r6, [r3, #0]
 800e6a4:	6963      	ldr	r3, [r4, #20]
 800e6a6:	3001      	adds	r0, #1
 800e6a8:	4283      	cmp	r3, r0
 800e6aa:	d004      	beq.n	800e6b6 <__swbuf_r+0x62>
 800e6ac:	89a3      	ldrh	r3, [r4, #12]
 800e6ae:	07db      	lsls	r3, r3, #31
 800e6b0:	d506      	bpl.n	800e6c0 <__swbuf_r+0x6c>
 800e6b2:	2e0a      	cmp	r6, #10
 800e6b4:	d104      	bne.n	800e6c0 <__swbuf_r+0x6c>
 800e6b6:	4621      	mov	r1, r4
 800e6b8:	4628      	mov	r0, r5
 800e6ba:	f000 ffad 	bl	800f618 <_fflush_r>
 800e6be:	b988      	cbnz	r0, 800e6e4 <__swbuf_r+0x90>
 800e6c0:	4638      	mov	r0, r7
 800e6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6c4:	4b0a      	ldr	r3, [pc, #40]	; (800e6f0 <__swbuf_r+0x9c>)
 800e6c6:	429c      	cmp	r4, r3
 800e6c8:	d101      	bne.n	800e6ce <__swbuf_r+0x7a>
 800e6ca:	68ac      	ldr	r4, [r5, #8]
 800e6cc:	e7cf      	b.n	800e66e <__swbuf_r+0x1a>
 800e6ce:	4b09      	ldr	r3, [pc, #36]	; (800e6f4 <__swbuf_r+0xa0>)
 800e6d0:	429c      	cmp	r4, r3
 800e6d2:	bf08      	it	eq
 800e6d4:	68ec      	ldreq	r4, [r5, #12]
 800e6d6:	e7ca      	b.n	800e66e <__swbuf_r+0x1a>
 800e6d8:	4621      	mov	r1, r4
 800e6da:	4628      	mov	r0, r5
 800e6dc:	f000 f81e 	bl	800e71c <__swsetup_r>
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	d0cb      	beq.n	800e67c <__swbuf_r+0x28>
 800e6e4:	f04f 37ff 	mov.w	r7, #4294967295
 800e6e8:	e7ea      	b.n	800e6c0 <__swbuf_r+0x6c>
 800e6ea:	bf00      	nop
 800e6ec:	08011f30 	.word	0x08011f30
 800e6f0:	08011f50 	.word	0x08011f50
 800e6f4:	08011f10 	.word	0x08011f10

0800e6f8 <_write_r>:
 800e6f8:	b538      	push	{r3, r4, r5, lr}
 800e6fa:	4d07      	ldr	r5, [pc, #28]	; (800e718 <_write_r+0x20>)
 800e6fc:	4604      	mov	r4, r0
 800e6fe:	4608      	mov	r0, r1
 800e700:	4611      	mov	r1, r2
 800e702:	2200      	movs	r2, #0
 800e704:	602a      	str	r2, [r5, #0]
 800e706:	461a      	mov	r2, r3
 800e708:	f7f4 fe4f 	bl	80033aa <_write>
 800e70c:	1c43      	adds	r3, r0, #1
 800e70e:	d102      	bne.n	800e716 <_write_r+0x1e>
 800e710:	682b      	ldr	r3, [r5, #0]
 800e712:	b103      	cbz	r3, 800e716 <_write_r+0x1e>
 800e714:	6023      	str	r3, [r4, #0]
 800e716:	bd38      	pop	{r3, r4, r5, pc}
 800e718:	200055b8 	.word	0x200055b8

0800e71c <__swsetup_r>:
 800e71c:	4b32      	ldr	r3, [pc, #200]	; (800e7e8 <__swsetup_r+0xcc>)
 800e71e:	b570      	push	{r4, r5, r6, lr}
 800e720:	681d      	ldr	r5, [r3, #0]
 800e722:	4606      	mov	r6, r0
 800e724:	460c      	mov	r4, r1
 800e726:	b125      	cbz	r5, 800e732 <__swsetup_r+0x16>
 800e728:	69ab      	ldr	r3, [r5, #24]
 800e72a:	b913      	cbnz	r3, 800e732 <__swsetup_r+0x16>
 800e72c:	4628      	mov	r0, r5
 800e72e:	f7ff f86b 	bl	800d808 <__sinit>
 800e732:	4b2e      	ldr	r3, [pc, #184]	; (800e7ec <__swsetup_r+0xd0>)
 800e734:	429c      	cmp	r4, r3
 800e736:	d10f      	bne.n	800e758 <__swsetup_r+0x3c>
 800e738:	686c      	ldr	r4, [r5, #4]
 800e73a:	89a3      	ldrh	r3, [r4, #12]
 800e73c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e740:	0719      	lsls	r1, r3, #28
 800e742:	d42c      	bmi.n	800e79e <__swsetup_r+0x82>
 800e744:	06dd      	lsls	r5, r3, #27
 800e746:	d411      	bmi.n	800e76c <__swsetup_r+0x50>
 800e748:	2309      	movs	r3, #9
 800e74a:	6033      	str	r3, [r6, #0]
 800e74c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e750:	81a3      	strh	r3, [r4, #12]
 800e752:	f04f 30ff 	mov.w	r0, #4294967295
 800e756:	e03e      	b.n	800e7d6 <__swsetup_r+0xba>
 800e758:	4b25      	ldr	r3, [pc, #148]	; (800e7f0 <__swsetup_r+0xd4>)
 800e75a:	429c      	cmp	r4, r3
 800e75c:	d101      	bne.n	800e762 <__swsetup_r+0x46>
 800e75e:	68ac      	ldr	r4, [r5, #8]
 800e760:	e7eb      	b.n	800e73a <__swsetup_r+0x1e>
 800e762:	4b24      	ldr	r3, [pc, #144]	; (800e7f4 <__swsetup_r+0xd8>)
 800e764:	429c      	cmp	r4, r3
 800e766:	bf08      	it	eq
 800e768:	68ec      	ldreq	r4, [r5, #12]
 800e76a:	e7e6      	b.n	800e73a <__swsetup_r+0x1e>
 800e76c:	0758      	lsls	r0, r3, #29
 800e76e:	d512      	bpl.n	800e796 <__swsetup_r+0x7a>
 800e770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e772:	b141      	cbz	r1, 800e786 <__swsetup_r+0x6a>
 800e774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e778:	4299      	cmp	r1, r3
 800e77a:	d002      	beq.n	800e782 <__swsetup_r+0x66>
 800e77c:	4630      	mov	r0, r6
 800e77e:	f001 fbb1 	bl	800fee4 <_free_r>
 800e782:	2300      	movs	r3, #0
 800e784:	6363      	str	r3, [r4, #52]	; 0x34
 800e786:	89a3      	ldrh	r3, [r4, #12]
 800e788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e78c:	81a3      	strh	r3, [r4, #12]
 800e78e:	2300      	movs	r3, #0
 800e790:	6063      	str	r3, [r4, #4]
 800e792:	6923      	ldr	r3, [r4, #16]
 800e794:	6023      	str	r3, [r4, #0]
 800e796:	89a3      	ldrh	r3, [r4, #12]
 800e798:	f043 0308 	orr.w	r3, r3, #8
 800e79c:	81a3      	strh	r3, [r4, #12]
 800e79e:	6923      	ldr	r3, [r4, #16]
 800e7a0:	b94b      	cbnz	r3, 800e7b6 <__swsetup_r+0x9a>
 800e7a2:	89a3      	ldrh	r3, [r4, #12]
 800e7a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e7a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7ac:	d003      	beq.n	800e7b6 <__swsetup_r+0x9a>
 800e7ae:	4621      	mov	r1, r4
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	f000 ffa9 	bl	800f708 <__smakebuf_r>
 800e7b6:	89a0      	ldrh	r0, [r4, #12]
 800e7b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7bc:	f010 0301 	ands.w	r3, r0, #1
 800e7c0:	d00a      	beq.n	800e7d8 <__swsetup_r+0xbc>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	60a3      	str	r3, [r4, #8]
 800e7c6:	6963      	ldr	r3, [r4, #20]
 800e7c8:	425b      	negs	r3, r3
 800e7ca:	61a3      	str	r3, [r4, #24]
 800e7cc:	6923      	ldr	r3, [r4, #16]
 800e7ce:	b943      	cbnz	r3, 800e7e2 <__swsetup_r+0xc6>
 800e7d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e7d4:	d1ba      	bne.n	800e74c <__swsetup_r+0x30>
 800e7d6:	bd70      	pop	{r4, r5, r6, pc}
 800e7d8:	0781      	lsls	r1, r0, #30
 800e7da:	bf58      	it	pl
 800e7dc:	6963      	ldrpl	r3, [r4, #20]
 800e7de:	60a3      	str	r3, [r4, #8]
 800e7e0:	e7f4      	b.n	800e7cc <__swsetup_r+0xb0>
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	e7f7      	b.n	800e7d6 <__swsetup_r+0xba>
 800e7e6:	bf00      	nop
 800e7e8:	200000a0 	.word	0x200000a0
 800e7ec:	08011f30 	.word	0x08011f30
 800e7f0:	08011f50 	.word	0x08011f50
 800e7f4:	08011f10 	.word	0x08011f10

0800e7f8 <_close_r>:
 800e7f8:	b538      	push	{r3, r4, r5, lr}
 800e7fa:	4d06      	ldr	r5, [pc, #24]	; (800e814 <_close_r+0x1c>)
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	4604      	mov	r4, r0
 800e800:	4608      	mov	r0, r1
 800e802:	602b      	str	r3, [r5, #0]
 800e804:	f7f5 f883 	bl	800390e <_close>
 800e808:	1c43      	adds	r3, r0, #1
 800e80a:	d102      	bne.n	800e812 <_close_r+0x1a>
 800e80c:	682b      	ldr	r3, [r5, #0]
 800e80e:	b103      	cbz	r3, 800e812 <_close_r+0x1a>
 800e810:	6023      	str	r3, [r4, #0]
 800e812:	bd38      	pop	{r3, r4, r5, pc}
 800e814:	200055b8 	.word	0x200055b8

0800e818 <quorem>:
 800e818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e81c:	6903      	ldr	r3, [r0, #16]
 800e81e:	690c      	ldr	r4, [r1, #16]
 800e820:	42a3      	cmp	r3, r4
 800e822:	4607      	mov	r7, r0
 800e824:	f2c0 8081 	blt.w	800e92a <quorem+0x112>
 800e828:	3c01      	subs	r4, #1
 800e82a:	f101 0814 	add.w	r8, r1, #20
 800e82e:	f100 0514 	add.w	r5, r0, #20
 800e832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e836:	9301      	str	r3, [sp, #4]
 800e838:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e83c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e840:	3301      	adds	r3, #1
 800e842:	429a      	cmp	r2, r3
 800e844:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e848:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e84c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e850:	d331      	bcc.n	800e8b6 <quorem+0x9e>
 800e852:	f04f 0e00 	mov.w	lr, #0
 800e856:	4640      	mov	r0, r8
 800e858:	46ac      	mov	ip, r5
 800e85a:	46f2      	mov	sl, lr
 800e85c:	f850 2b04 	ldr.w	r2, [r0], #4
 800e860:	b293      	uxth	r3, r2
 800e862:	fb06 e303 	mla	r3, r6, r3, lr
 800e866:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	ebaa 0303 	sub.w	r3, sl, r3
 800e870:	f8dc a000 	ldr.w	sl, [ip]
 800e874:	0c12      	lsrs	r2, r2, #16
 800e876:	fa13 f38a 	uxtah	r3, r3, sl
 800e87a:	fb06 e202 	mla	r2, r6, r2, lr
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	9b00      	ldr	r3, [sp, #0]
 800e882:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e886:	b292      	uxth	r2, r2
 800e888:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e88c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e890:	f8bd 3000 	ldrh.w	r3, [sp]
 800e894:	4581      	cmp	r9, r0
 800e896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e89a:	f84c 3b04 	str.w	r3, [ip], #4
 800e89e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e8a2:	d2db      	bcs.n	800e85c <quorem+0x44>
 800e8a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800e8a8:	b92b      	cbnz	r3, 800e8b6 <quorem+0x9e>
 800e8aa:	9b01      	ldr	r3, [sp, #4]
 800e8ac:	3b04      	subs	r3, #4
 800e8ae:	429d      	cmp	r5, r3
 800e8b0:	461a      	mov	r2, r3
 800e8b2:	d32e      	bcc.n	800e912 <quorem+0xfa>
 800e8b4:	613c      	str	r4, [r7, #16]
 800e8b6:	4638      	mov	r0, r7
 800e8b8:	f001 f9fc 	bl	800fcb4 <__mcmp>
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	db24      	blt.n	800e90a <quorem+0xf2>
 800e8c0:	3601      	adds	r6, #1
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	f04f 0c00 	mov.w	ip, #0
 800e8c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800e8cc:	f8d0 e000 	ldr.w	lr, [r0]
 800e8d0:	b293      	uxth	r3, r2
 800e8d2:	ebac 0303 	sub.w	r3, ip, r3
 800e8d6:	0c12      	lsrs	r2, r2, #16
 800e8d8:	fa13 f38e 	uxtah	r3, r3, lr
 800e8dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e8e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8ea:	45c1      	cmp	r9, r8
 800e8ec:	f840 3b04 	str.w	r3, [r0], #4
 800e8f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e8f4:	d2e8      	bcs.n	800e8c8 <quorem+0xb0>
 800e8f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e8fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e8fe:	b922      	cbnz	r2, 800e90a <quorem+0xf2>
 800e900:	3b04      	subs	r3, #4
 800e902:	429d      	cmp	r5, r3
 800e904:	461a      	mov	r2, r3
 800e906:	d30a      	bcc.n	800e91e <quorem+0x106>
 800e908:	613c      	str	r4, [r7, #16]
 800e90a:	4630      	mov	r0, r6
 800e90c:	b003      	add	sp, #12
 800e90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e912:	6812      	ldr	r2, [r2, #0]
 800e914:	3b04      	subs	r3, #4
 800e916:	2a00      	cmp	r2, #0
 800e918:	d1cc      	bne.n	800e8b4 <quorem+0x9c>
 800e91a:	3c01      	subs	r4, #1
 800e91c:	e7c7      	b.n	800e8ae <quorem+0x96>
 800e91e:	6812      	ldr	r2, [r2, #0]
 800e920:	3b04      	subs	r3, #4
 800e922:	2a00      	cmp	r2, #0
 800e924:	d1f0      	bne.n	800e908 <quorem+0xf0>
 800e926:	3c01      	subs	r4, #1
 800e928:	e7eb      	b.n	800e902 <quorem+0xea>
 800e92a:	2000      	movs	r0, #0
 800e92c:	e7ee      	b.n	800e90c <quorem+0xf4>
	...

0800e930 <_dtoa_r>:
 800e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e934:	ed2d 8b04 	vpush	{d8-d9}
 800e938:	ec57 6b10 	vmov	r6, r7, d0
 800e93c:	b093      	sub	sp, #76	; 0x4c
 800e93e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e940:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e944:	9106      	str	r1, [sp, #24]
 800e946:	ee10 aa10 	vmov	sl, s0
 800e94a:	4604      	mov	r4, r0
 800e94c:	9209      	str	r2, [sp, #36]	; 0x24
 800e94e:	930c      	str	r3, [sp, #48]	; 0x30
 800e950:	46bb      	mov	fp, r7
 800e952:	b975      	cbnz	r5, 800e972 <_dtoa_r+0x42>
 800e954:	2010      	movs	r0, #16
 800e956:	f000 ff17 	bl	800f788 <malloc>
 800e95a:	4602      	mov	r2, r0
 800e95c:	6260      	str	r0, [r4, #36]	; 0x24
 800e95e:	b920      	cbnz	r0, 800e96a <_dtoa_r+0x3a>
 800e960:	4ba7      	ldr	r3, [pc, #668]	; (800ec00 <_dtoa_r+0x2d0>)
 800e962:	21ea      	movs	r1, #234	; 0xea
 800e964:	48a7      	ldr	r0, [pc, #668]	; (800ec04 <_dtoa_r+0x2d4>)
 800e966:	f001 fc75 	bl	8010254 <__assert_func>
 800e96a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e96e:	6005      	str	r5, [r0, #0]
 800e970:	60c5      	str	r5, [r0, #12]
 800e972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e974:	6819      	ldr	r1, [r3, #0]
 800e976:	b151      	cbz	r1, 800e98e <_dtoa_r+0x5e>
 800e978:	685a      	ldr	r2, [r3, #4]
 800e97a:	604a      	str	r2, [r1, #4]
 800e97c:	2301      	movs	r3, #1
 800e97e:	4093      	lsls	r3, r2
 800e980:	608b      	str	r3, [r1, #8]
 800e982:	4620      	mov	r0, r4
 800e984:	f000 ff54 	bl	800f830 <_Bfree>
 800e988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e98a:	2200      	movs	r2, #0
 800e98c:	601a      	str	r2, [r3, #0]
 800e98e:	1e3b      	subs	r3, r7, #0
 800e990:	bfaa      	itet	ge
 800e992:	2300      	movge	r3, #0
 800e994:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e998:	f8c8 3000 	strge.w	r3, [r8]
 800e99c:	4b9a      	ldr	r3, [pc, #616]	; (800ec08 <_dtoa_r+0x2d8>)
 800e99e:	bfbc      	itt	lt
 800e9a0:	2201      	movlt	r2, #1
 800e9a2:	f8c8 2000 	strlt.w	r2, [r8]
 800e9a6:	ea33 030b 	bics.w	r3, r3, fp
 800e9aa:	d11b      	bne.n	800e9e4 <_dtoa_r+0xb4>
 800e9ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800e9b2:	6013      	str	r3, [r2, #0]
 800e9b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9b8:	4333      	orrs	r3, r6
 800e9ba:	f000 8592 	beq.w	800f4e2 <_dtoa_r+0xbb2>
 800e9be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9c0:	b963      	cbnz	r3, 800e9dc <_dtoa_r+0xac>
 800e9c2:	4b92      	ldr	r3, [pc, #584]	; (800ec0c <_dtoa_r+0x2dc>)
 800e9c4:	e022      	b.n	800ea0c <_dtoa_r+0xdc>
 800e9c6:	4b92      	ldr	r3, [pc, #584]	; (800ec10 <_dtoa_r+0x2e0>)
 800e9c8:	9301      	str	r3, [sp, #4]
 800e9ca:	3308      	adds	r3, #8
 800e9cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e9ce:	6013      	str	r3, [r2, #0]
 800e9d0:	9801      	ldr	r0, [sp, #4]
 800e9d2:	b013      	add	sp, #76	; 0x4c
 800e9d4:	ecbd 8b04 	vpop	{d8-d9}
 800e9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9dc:	4b8b      	ldr	r3, [pc, #556]	; (800ec0c <_dtoa_r+0x2dc>)
 800e9de:	9301      	str	r3, [sp, #4]
 800e9e0:	3303      	adds	r3, #3
 800e9e2:	e7f3      	b.n	800e9cc <_dtoa_r+0x9c>
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	4650      	mov	r0, sl
 800e9ea:	4659      	mov	r1, fp
 800e9ec:	f7f2 f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9f0:	ec4b ab19 	vmov	d9, sl, fp
 800e9f4:	4680      	mov	r8, r0
 800e9f6:	b158      	cbz	r0, 800ea10 <_dtoa_r+0xe0>
 800e9f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	6013      	str	r3, [r2, #0]
 800e9fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f000 856b 	beq.w	800f4dc <_dtoa_r+0xbac>
 800ea06:	4883      	ldr	r0, [pc, #524]	; (800ec14 <_dtoa_r+0x2e4>)
 800ea08:	6018      	str	r0, [r3, #0]
 800ea0a:	1e43      	subs	r3, r0, #1
 800ea0c:	9301      	str	r3, [sp, #4]
 800ea0e:	e7df      	b.n	800e9d0 <_dtoa_r+0xa0>
 800ea10:	ec4b ab10 	vmov	d0, sl, fp
 800ea14:	aa10      	add	r2, sp, #64	; 0x40
 800ea16:	a911      	add	r1, sp, #68	; 0x44
 800ea18:	4620      	mov	r0, r4
 800ea1a:	f001 f9f1 	bl	800fe00 <__d2b>
 800ea1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ea22:	ee08 0a10 	vmov	s16, r0
 800ea26:	2d00      	cmp	r5, #0
 800ea28:	f000 8084 	beq.w	800eb34 <_dtoa_r+0x204>
 800ea2c:	ee19 3a90 	vmov	r3, s19
 800ea30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ea38:	4656      	mov	r6, sl
 800ea3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ea3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ea42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ea46:	4b74      	ldr	r3, [pc, #464]	; (800ec18 <_dtoa_r+0x2e8>)
 800ea48:	2200      	movs	r2, #0
 800ea4a:	4630      	mov	r0, r6
 800ea4c:	4639      	mov	r1, r7
 800ea4e:	f7f1 fc1b 	bl	8000288 <__aeabi_dsub>
 800ea52:	a365      	add	r3, pc, #404	; (adr r3, 800ebe8 <_dtoa_r+0x2b8>)
 800ea54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea58:	f7f1 fdce 	bl	80005f8 <__aeabi_dmul>
 800ea5c:	a364      	add	r3, pc, #400	; (adr r3, 800ebf0 <_dtoa_r+0x2c0>)
 800ea5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea62:	f7f1 fc13 	bl	800028c <__adddf3>
 800ea66:	4606      	mov	r6, r0
 800ea68:	4628      	mov	r0, r5
 800ea6a:	460f      	mov	r7, r1
 800ea6c:	f7f1 fd5a 	bl	8000524 <__aeabi_i2d>
 800ea70:	a361      	add	r3, pc, #388	; (adr r3, 800ebf8 <_dtoa_r+0x2c8>)
 800ea72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea76:	f7f1 fdbf 	bl	80005f8 <__aeabi_dmul>
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	4630      	mov	r0, r6
 800ea80:	4639      	mov	r1, r7
 800ea82:	f7f1 fc03 	bl	800028c <__adddf3>
 800ea86:	4606      	mov	r6, r0
 800ea88:	460f      	mov	r7, r1
 800ea8a:	f7f2 f865 	bl	8000b58 <__aeabi_d2iz>
 800ea8e:	2200      	movs	r2, #0
 800ea90:	9000      	str	r0, [sp, #0]
 800ea92:	2300      	movs	r3, #0
 800ea94:	4630      	mov	r0, r6
 800ea96:	4639      	mov	r1, r7
 800ea98:	f7f2 f820 	bl	8000adc <__aeabi_dcmplt>
 800ea9c:	b150      	cbz	r0, 800eab4 <_dtoa_r+0x184>
 800ea9e:	9800      	ldr	r0, [sp, #0]
 800eaa0:	f7f1 fd40 	bl	8000524 <__aeabi_i2d>
 800eaa4:	4632      	mov	r2, r6
 800eaa6:	463b      	mov	r3, r7
 800eaa8:	f7f2 f80e 	bl	8000ac8 <__aeabi_dcmpeq>
 800eaac:	b910      	cbnz	r0, 800eab4 <_dtoa_r+0x184>
 800eaae:	9b00      	ldr	r3, [sp, #0]
 800eab0:	3b01      	subs	r3, #1
 800eab2:	9300      	str	r3, [sp, #0]
 800eab4:	9b00      	ldr	r3, [sp, #0]
 800eab6:	2b16      	cmp	r3, #22
 800eab8:	d85a      	bhi.n	800eb70 <_dtoa_r+0x240>
 800eaba:	9a00      	ldr	r2, [sp, #0]
 800eabc:	4b57      	ldr	r3, [pc, #348]	; (800ec1c <_dtoa_r+0x2ec>)
 800eabe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac6:	ec51 0b19 	vmov	r0, r1, d9
 800eaca:	f7f2 f807 	bl	8000adc <__aeabi_dcmplt>
 800eace:	2800      	cmp	r0, #0
 800ead0:	d050      	beq.n	800eb74 <_dtoa_r+0x244>
 800ead2:	9b00      	ldr	r3, [sp, #0]
 800ead4:	3b01      	subs	r3, #1
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	2300      	movs	r3, #0
 800eada:	930b      	str	r3, [sp, #44]	; 0x2c
 800eadc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eade:	1b5d      	subs	r5, r3, r5
 800eae0:	1e6b      	subs	r3, r5, #1
 800eae2:	9305      	str	r3, [sp, #20]
 800eae4:	bf45      	ittet	mi
 800eae6:	f1c5 0301 	rsbmi	r3, r5, #1
 800eaea:	9304      	strmi	r3, [sp, #16]
 800eaec:	2300      	movpl	r3, #0
 800eaee:	2300      	movmi	r3, #0
 800eaf0:	bf4c      	ite	mi
 800eaf2:	9305      	strmi	r3, [sp, #20]
 800eaf4:	9304      	strpl	r3, [sp, #16]
 800eaf6:	9b00      	ldr	r3, [sp, #0]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	db3d      	blt.n	800eb78 <_dtoa_r+0x248>
 800eafc:	9b05      	ldr	r3, [sp, #20]
 800eafe:	9a00      	ldr	r2, [sp, #0]
 800eb00:	920a      	str	r2, [sp, #40]	; 0x28
 800eb02:	4413      	add	r3, r2
 800eb04:	9305      	str	r3, [sp, #20]
 800eb06:	2300      	movs	r3, #0
 800eb08:	9307      	str	r3, [sp, #28]
 800eb0a:	9b06      	ldr	r3, [sp, #24]
 800eb0c:	2b09      	cmp	r3, #9
 800eb0e:	f200 8089 	bhi.w	800ec24 <_dtoa_r+0x2f4>
 800eb12:	2b05      	cmp	r3, #5
 800eb14:	bfc4      	itt	gt
 800eb16:	3b04      	subgt	r3, #4
 800eb18:	9306      	strgt	r3, [sp, #24]
 800eb1a:	9b06      	ldr	r3, [sp, #24]
 800eb1c:	f1a3 0302 	sub.w	r3, r3, #2
 800eb20:	bfcc      	ite	gt
 800eb22:	2500      	movgt	r5, #0
 800eb24:	2501      	movle	r5, #1
 800eb26:	2b03      	cmp	r3, #3
 800eb28:	f200 8087 	bhi.w	800ec3a <_dtoa_r+0x30a>
 800eb2c:	e8df f003 	tbb	[pc, r3]
 800eb30:	59383a2d 	.word	0x59383a2d
 800eb34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800eb38:	441d      	add	r5, r3
 800eb3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eb3e:	2b20      	cmp	r3, #32
 800eb40:	bfc1      	itttt	gt
 800eb42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eb46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800eb4a:	fa0b f303 	lslgt.w	r3, fp, r3
 800eb4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eb52:	bfda      	itte	le
 800eb54:	f1c3 0320 	rsble	r3, r3, #32
 800eb58:	fa06 f003 	lslle.w	r0, r6, r3
 800eb5c:	4318      	orrgt	r0, r3
 800eb5e:	f7f1 fcd1 	bl	8000504 <__aeabi_ui2d>
 800eb62:	2301      	movs	r3, #1
 800eb64:	4606      	mov	r6, r0
 800eb66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800eb6a:	3d01      	subs	r5, #1
 800eb6c:	930e      	str	r3, [sp, #56]	; 0x38
 800eb6e:	e76a      	b.n	800ea46 <_dtoa_r+0x116>
 800eb70:	2301      	movs	r3, #1
 800eb72:	e7b2      	b.n	800eada <_dtoa_r+0x1aa>
 800eb74:	900b      	str	r0, [sp, #44]	; 0x2c
 800eb76:	e7b1      	b.n	800eadc <_dtoa_r+0x1ac>
 800eb78:	9b04      	ldr	r3, [sp, #16]
 800eb7a:	9a00      	ldr	r2, [sp, #0]
 800eb7c:	1a9b      	subs	r3, r3, r2
 800eb7e:	9304      	str	r3, [sp, #16]
 800eb80:	4253      	negs	r3, r2
 800eb82:	9307      	str	r3, [sp, #28]
 800eb84:	2300      	movs	r3, #0
 800eb86:	930a      	str	r3, [sp, #40]	; 0x28
 800eb88:	e7bf      	b.n	800eb0a <_dtoa_r+0x1da>
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	9308      	str	r3, [sp, #32]
 800eb8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	dc55      	bgt.n	800ec40 <_dtoa_r+0x310>
 800eb94:	2301      	movs	r3, #1
 800eb96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	9209      	str	r2, [sp, #36]	; 0x24
 800eb9e:	e00c      	b.n	800ebba <_dtoa_r+0x28a>
 800eba0:	2301      	movs	r3, #1
 800eba2:	e7f3      	b.n	800eb8c <_dtoa_r+0x25c>
 800eba4:	2300      	movs	r3, #0
 800eba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eba8:	9308      	str	r3, [sp, #32]
 800ebaa:	9b00      	ldr	r3, [sp, #0]
 800ebac:	4413      	add	r3, r2
 800ebae:	9302      	str	r3, [sp, #8]
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	9303      	str	r3, [sp, #12]
 800ebb6:	bfb8      	it	lt
 800ebb8:	2301      	movlt	r3, #1
 800ebba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	6042      	str	r2, [r0, #4]
 800ebc0:	2204      	movs	r2, #4
 800ebc2:	f102 0614 	add.w	r6, r2, #20
 800ebc6:	429e      	cmp	r6, r3
 800ebc8:	6841      	ldr	r1, [r0, #4]
 800ebca:	d93d      	bls.n	800ec48 <_dtoa_r+0x318>
 800ebcc:	4620      	mov	r0, r4
 800ebce:	f000 fdef 	bl	800f7b0 <_Balloc>
 800ebd2:	9001      	str	r0, [sp, #4]
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	d13b      	bne.n	800ec50 <_dtoa_r+0x320>
 800ebd8:	4b11      	ldr	r3, [pc, #68]	; (800ec20 <_dtoa_r+0x2f0>)
 800ebda:	4602      	mov	r2, r0
 800ebdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ebe0:	e6c0      	b.n	800e964 <_dtoa_r+0x34>
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	e7df      	b.n	800eba6 <_dtoa_r+0x276>
 800ebe6:	bf00      	nop
 800ebe8:	636f4361 	.word	0x636f4361
 800ebec:	3fd287a7 	.word	0x3fd287a7
 800ebf0:	8b60c8b3 	.word	0x8b60c8b3
 800ebf4:	3fc68a28 	.word	0x3fc68a28
 800ebf8:	509f79fb 	.word	0x509f79fb
 800ebfc:	3fd34413 	.word	0x3fd34413
 800ec00:	08011fb5 	.word	0x08011fb5
 800ec04:	08011fcc 	.word	0x08011fcc
 800ec08:	7ff00000 	.word	0x7ff00000
 800ec0c:	08011fb1 	.word	0x08011fb1
 800ec10:	08011fa8 	.word	0x08011fa8
 800ec14:	08011f85 	.word	0x08011f85
 800ec18:	3ff80000 	.word	0x3ff80000
 800ec1c:	080120c0 	.word	0x080120c0
 800ec20:	08012027 	.word	0x08012027
 800ec24:	2501      	movs	r5, #1
 800ec26:	2300      	movs	r3, #0
 800ec28:	9306      	str	r3, [sp, #24]
 800ec2a:	9508      	str	r5, [sp, #32]
 800ec2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ec34:	2200      	movs	r2, #0
 800ec36:	2312      	movs	r3, #18
 800ec38:	e7b0      	b.n	800eb9c <_dtoa_r+0x26c>
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	9308      	str	r3, [sp, #32]
 800ec3e:	e7f5      	b.n	800ec2c <_dtoa_r+0x2fc>
 800ec40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ec46:	e7b8      	b.n	800ebba <_dtoa_r+0x28a>
 800ec48:	3101      	adds	r1, #1
 800ec4a:	6041      	str	r1, [r0, #4]
 800ec4c:	0052      	lsls	r2, r2, #1
 800ec4e:	e7b8      	b.n	800ebc2 <_dtoa_r+0x292>
 800ec50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec52:	9a01      	ldr	r2, [sp, #4]
 800ec54:	601a      	str	r2, [r3, #0]
 800ec56:	9b03      	ldr	r3, [sp, #12]
 800ec58:	2b0e      	cmp	r3, #14
 800ec5a:	f200 809d 	bhi.w	800ed98 <_dtoa_r+0x468>
 800ec5e:	2d00      	cmp	r5, #0
 800ec60:	f000 809a 	beq.w	800ed98 <_dtoa_r+0x468>
 800ec64:	9b00      	ldr	r3, [sp, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	dd32      	ble.n	800ecd0 <_dtoa_r+0x3a0>
 800ec6a:	4ab7      	ldr	r2, [pc, #732]	; (800ef48 <_dtoa_r+0x618>)
 800ec6c:	f003 030f 	and.w	r3, r3, #15
 800ec70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ec74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ec78:	9b00      	ldr	r3, [sp, #0]
 800ec7a:	05d8      	lsls	r0, r3, #23
 800ec7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ec80:	d516      	bpl.n	800ecb0 <_dtoa_r+0x380>
 800ec82:	4bb2      	ldr	r3, [pc, #712]	; (800ef4c <_dtoa_r+0x61c>)
 800ec84:	ec51 0b19 	vmov	r0, r1, d9
 800ec88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ec8c:	f7f1 fdde 	bl	800084c <__aeabi_ddiv>
 800ec90:	f007 070f 	and.w	r7, r7, #15
 800ec94:	4682      	mov	sl, r0
 800ec96:	468b      	mov	fp, r1
 800ec98:	2503      	movs	r5, #3
 800ec9a:	4eac      	ldr	r6, [pc, #688]	; (800ef4c <_dtoa_r+0x61c>)
 800ec9c:	b957      	cbnz	r7, 800ecb4 <_dtoa_r+0x384>
 800ec9e:	4642      	mov	r2, r8
 800eca0:	464b      	mov	r3, r9
 800eca2:	4650      	mov	r0, sl
 800eca4:	4659      	mov	r1, fp
 800eca6:	f7f1 fdd1 	bl	800084c <__aeabi_ddiv>
 800ecaa:	4682      	mov	sl, r0
 800ecac:	468b      	mov	fp, r1
 800ecae:	e028      	b.n	800ed02 <_dtoa_r+0x3d2>
 800ecb0:	2502      	movs	r5, #2
 800ecb2:	e7f2      	b.n	800ec9a <_dtoa_r+0x36a>
 800ecb4:	07f9      	lsls	r1, r7, #31
 800ecb6:	d508      	bpl.n	800ecca <_dtoa_r+0x39a>
 800ecb8:	4640      	mov	r0, r8
 800ecba:	4649      	mov	r1, r9
 800ecbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ecc0:	f7f1 fc9a 	bl	80005f8 <__aeabi_dmul>
 800ecc4:	3501      	adds	r5, #1
 800ecc6:	4680      	mov	r8, r0
 800ecc8:	4689      	mov	r9, r1
 800ecca:	107f      	asrs	r7, r7, #1
 800eccc:	3608      	adds	r6, #8
 800ecce:	e7e5      	b.n	800ec9c <_dtoa_r+0x36c>
 800ecd0:	f000 809b 	beq.w	800ee0a <_dtoa_r+0x4da>
 800ecd4:	9b00      	ldr	r3, [sp, #0]
 800ecd6:	4f9d      	ldr	r7, [pc, #628]	; (800ef4c <_dtoa_r+0x61c>)
 800ecd8:	425e      	negs	r6, r3
 800ecda:	4b9b      	ldr	r3, [pc, #620]	; (800ef48 <_dtoa_r+0x618>)
 800ecdc:	f006 020f 	and.w	r2, r6, #15
 800ece0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ece4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece8:	ec51 0b19 	vmov	r0, r1, d9
 800ecec:	f7f1 fc84 	bl	80005f8 <__aeabi_dmul>
 800ecf0:	1136      	asrs	r6, r6, #4
 800ecf2:	4682      	mov	sl, r0
 800ecf4:	468b      	mov	fp, r1
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	2502      	movs	r5, #2
 800ecfa:	2e00      	cmp	r6, #0
 800ecfc:	d17a      	bne.n	800edf4 <_dtoa_r+0x4c4>
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1d3      	bne.n	800ecaa <_dtoa_r+0x37a>
 800ed02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f000 8082 	beq.w	800ee0e <_dtoa_r+0x4de>
 800ed0a:	4b91      	ldr	r3, [pc, #580]	; (800ef50 <_dtoa_r+0x620>)
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	4650      	mov	r0, sl
 800ed10:	4659      	mov	r1, fp
 800ed12:	f7f1 fee3 	bl	8000adc <__aeabi_dcmplt>
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d079      	beq.n	800ee0e <_dtoa_r+0x4de>
 800ed1a:	9b03      	ldr	r3, [sp, #12]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d076      	beq.n	800ee0e <_dtoa_r+0x4de>
 800ed20:	9b02      	ldr	r3, [sp, #8]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	dd36      	ble.n	800ed94 <_dtoa_r+0x464>
 800ed26:	9b00      	ldr	r3, [sp, #0]
 800ed28:	4650      	mov	r0, sl
 800ed2a:	4659      	mov	r1, fp
 800ed2c:	1e5f      	subs	r7, r3, #1
 800ed2e:	2200      	movs	r2, #0
 800ed30:	4b88      	ldr	r3, [pc, #544]	; (800ef54 <_dtoa_r+0x624>)
 800ed32:	f7f1 fc61 	bl	80005f8 <__aeabi_dmul>
 800ed36:	9e02      	ldr	r6, [sp, #8]
 800ed38:	4682      	mov	sl, r0
 800ed3a:	468b      	mov	fp, r1
 800ed3c:	3501      	adds	r5, #1
 800ed3e:	4628      	mov	r0, r5
 800ed40:	f7f1 fbf0 	bl	8000524 <__aeabi_i2d>
 800ed44:	4652      	mov	r2, sl
 800ed46:	465b      	mov	r3, fp
 800ed48:	f7f1 fc56 	bl	80005f8 <__aeabi_dmul>
 800ed4c:	4b82      	ldr	r3, [pc, #520]	; (800ef58 <_dtoa_r+0x628>)
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f7f1 fa9c 	bl	800028c <__adddf3>
 800ed54:	46d0      	mov	r8, sl
 800ed56:	46d9      	mov	r9, fp
 800ed58:	4682      	mov	sl, r0
 800ed5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ed5e:	2e00      	cmp	r6, #0
 800ed60:	d158      	bne.n	800ee14 <_dtoa_r+0x4e4>
 800ed62:	4b7e      	ldr	r3, [pc, #504]	; (800ef5c <_dtoa_r+0x62c>)
 800ed64:	2200      	movs	r2, #0
 800ed66:	4640      	mov	r0, r8
 800ed68:	4649      	mov	r1, r9
 800ed6a:	f7f1 fa8d 	bl	8000288 <__aeabi_dsub>
 800ed6e:	4652      	mov	r2, sl
 800ed70:	465b      	mov	r3, fp
 800ed72:	4680      	mov	r8, r0
 800ed74:	4689      	mov	r9, r1
 800ed76:	f7f1 fecf 	bl	8000b18 <__aeabi_dcmpgt>
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	f040 8295 	bne.w	800f2aa <_dtoa_r+0x97a>
 800ed80:	4652      	mov	r2, sl
 800ed82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ed86:	4640      	mov	r0, r8
 800ed88:	4649      	mov	r1, r9
 800ed8a:	f7f1 fea7 	bl	8000adc <__aeabi_dcmplt>
 800ed8e:	2800      	cmp	r0, #0
 800ed90:	f040 8289 	bne.w	800f2a6 <_dtoa_r+0x976>
 800ed94:	ec5b ab19 	vmov	sl, fp, d9
 800ed98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	f2c0 8148 	blt.w	800f030 <_dtoa_r+0x700>
 800eda0:	9a00      	ldr	r2, [sp, #0]
 800eda2:	2a0e      	cmp	r2, #14
 800eda4:	f300 8144 	bgt.w	800f030 <_dtoa_r+0x700>
 800eda8:	4b67      	ldr	r3, [pc, #412]	; (800ef48 <_dtoa_r+0x618>)
 800edaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800edb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	f280 80d5 	bge.w	800ef64 <_dtoa_r+0x634>
 800edba:	9b03      	ldr	r3, [sp, #12]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f300 80d1 	bgt.w	800ef64 <_dtoa_r+0x634>
 800edc2:	f040 826f 	bne.w	800f2a4 <_dtoa_r+0x974>
 800edc6:	4b65      	ldr	r3, [pc, #404]	; (800ef5c <_dtoa_r+0x62c>)
 800edc8:	2200      	movs	r2, #0
 800edca:	4640      	mov	r0, r8
 800edcc:	4649      	mov	r1, r9
 800edce:	f7f1 fc13 	bl	80005f8 <__aeabi_dmul>
 800edd2:	4652      	mov	r2, sl
 800edd4:	465b      	mov	r3, fp
 800edd6:	f7f1 fe95 	bl	8000b04 <__aeabi_dcmpge>
 800edda:	9e03      	ldr	r6, [sp, #12]
 800eddc:	4637      	mov	r7, r6
 800edde:	2800      	cmp	r0, #0
 800ede0:	f040 8245 	bne.w	800f26e <_dtoa_r+0x93e>
 800ede4:	9d01      	ldr	r5, [sp, #4]
 800ede6:	2331      	movs	r3, #49	; 0x31
 800ede8:	f805 3b01 	strb.w	r3, [r5], #1
 800edec:	9b00      	ldr	r3, [sp, #0]
 800edee:	3301      	adds	r3, #1
 800edf0:	9300      	str	r3, [sp, #0]
 800edf2:	e240      	b.n	800f276 <_dtoa_r+0x946>
 800edf4:	07f2      	lsls	r2, r6, #31
 800edf6:	d505      	bpl.n	800ee04 <_dtoa_r+0x4d4>
 800edf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edfc:	f7f1 fbfc 	bl	80005f8 <__aeabi_dmul>
 800ee00:	3501      	adds	r5, #1
 800ee02:	2301      	movs	r3, #1
 800ee04:	1076      	asrs	r6, r6, #1
 800ee06:	3708      	adds	r7, #8
 800ee08:	e777      	b.n	800ecfa <_dtoa_r+0x3ca>
 800ee0a:	2502      	movs	r5, #2
 800ee0c:	e779      	b.n	800ed02 <_dtoa_r+0x3d2>
 800ee0e:	9f00      	ldr	r7, [sp, #0]
 800ee10:	9e03      	ldr	r6, [sp, #12]
 800ee12:	e794      	b.n	800ed3e <_dtoa_r+0x40e>
 800ee14:	9901      	ldr	r1, [sp, #4]
 800ee16:	4b4c      	ldr	r3, [pc, #304]	; (800ef48 <_dtoa_r+0x618>)
 800ee18:	4431      	add	r1, r6
 800ee1a:	910d      	str	r1, [sp, #52]	; 0x34
 800ee1c:	9908      	ldr	r1, [sp, #32]
 800ee1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ee22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ee26:	2900      	cmp	r1, #0
 800ee28:	d043      	beq.n	800eeb2 <_dtoa_r+0x582>
 800ee2a:	494d      	ldr	r1, [pc, #308]	; (800ef60 <_dtoa_r+0x630>)
 800ee2c:	2000      	movs	r0, #0
 800ee2e:	f7f1 fd0d 	bl	800084c <__aeabi_ddiv>
 800ee32:	4652      	mov	r2, sl
 800ee34:	465b      	mov	r3, fp
 800ee36:	f7f1 fa27 	bl	8000288 <__aeabi_dsub>
 800ee3a:	9d01      	ldr	r5, [sp, #4]
 800ee3c:	4682      	mov	sl, r0
 800ee3e:	468b      	mov	fp, r1
 800ee40:	4649      	mov	r1, r9
 800ee42:	4640      	mov	r0, r8
 800ee44:	f7f1 fe88 	bl	8000b58 <__aeabi_d2iz>
 800ee48:	4606      	mov	r6, r0
 800ee4a:	f7f1 fb6b 	bl	8000524 <__aeabi_i2d>
 800ee4e:	4602      	mov	r2, r0
 800ee50:	460b      	mov	r3, r1
 800ee52:	4640      	mov	r0, r8
 800ee54:	4649      	mov	r1, r9
 800ee56:	f7f1 fa17 	bl	8000288 <__aeabi_dsub>
 800ee5a:	3630      	adds	r6, #48	; 0x30
 800ee5c:	f805 6b01 	strb.w	r6, [r5], #1
 800ee60:	4652      	mov	r2, sl
 800ee62:	465b      	mov	r3, fp
 800ee64:	4680      	mov	r8, r0
 800ee66:	4689      	mov	r9, r1
 800ee68:	f7f1 fe38 	bl	8000adc <__aeabi_dcmplt>
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	d163      	bne.n	800ef38 <_dtoa_r+0x608>
 800ee70:	4642      	mov	r2, r8
 800ee72:	464b      	mov	r3, r9
 800ee74:	4936      	ldr	r1, [pc, #216]	; (800ef50 <_dtoa_r+0x620>)
 800ee76:	2000      	movs	r0, #0
 800ee78:	f7f1 fa06 	bl	8000288 <__aeabi_dsub>
 800ee7c:	4652      	mov	r2, sl
 800ee7e:	465b      	mov	r3, fp
 800ee80:	f7f1 fe2c 	bl	8000adc <__aeabi_dcmplt>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	f040 80b5 	bne.w	800eff4 <_dtoa_r+0x6c4>
 800ee8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee8c:	429d      	cmp	r5, r3
 800ee8e:	d081      	beq.n	800ed94 <_dtoa_r+0x464>
 800ee90:	4b30      	ldr	r3, [pc, #192]	; (800ef54 <_dtoa_r+0x624>)
 800ee92:	2200      	movs	r2, #0
 800ee94:	4650      	mov	r0, sl
 800ee96:	4659      	mov	r1, fp
 800ee98:	f7f1 fbae 	bl	80005f8 <__aeabi_dmul>
 800ee9c:	4b2d      	ldr	r3, [pc, #180]	; (800ef54 <_dtoa_r+0x624>)
 800ee9e:	4682      	mov	sl, r0
 800eea0:	468b      	mov	fp, r1
 800eea2:	4640      	mov	r0, r8
 800eea4:	4649      	mov	r1, r9
 800eea6:	2200      	movs	r2, #0
 800eea8:	f7f1 fba6 	bl	80005f8 <__aeabi_dmul>
 800eeac:	4680      	mov	r8, r0
 800eeae:	4689      	mov	r9, r1
 800eeb0:	e7c6      	b.n	800ee40 <_dtoa_r+0x510>
 800eeb2:	4650      	mov	r0, sl
 800eeb4:	4659      	mov	r1, fp
 800eeb6:	f7f1 fb9f 	bl	80005f8 <__aeabi_dmul>
 800eeba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eebc:	9d01      	ldr	r5, [sp, #4]
 800eebe:	930f      	str	r3, [sp, #60]	; 0x3c
 800eec0:	4682      	mov	sl, r0
 800eec2:	468b      	mov	fp, r1
 800eec4:	4649      	mov	r1, r9
 800eec6:	4640      	mov	r0, r8
 800eec8:	f7f1 fe46 	bl	8000b58 <__aeabi_d2iz>
 800eecc:	4606      	mov	r6, r0
 800eece:	f7f1 fb29 	bl	8000524 <__aeabi_i2d>
 800eed2:	3630      	adds	r6, #48	; 0x30
 800eed4:	4602      	mov	r2, r0
 800eed6:	460b      	mov	r3, r1
 800eed8:	4640      	mov	r0, r8
 800eeda:	4649      	mov	r1, r9
 800eedc:	f7f1 f9d4 	bl	8000288 <__aeabi_dsub>
 800eee0:	f805 6b01 	strb.w	r6, [r5], #1
 800eee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eee6:	429d      	cmp	r5, r3
 800eee8:	4680      	mov	r8, r0
 800eeea:	4689      	mov	r9, r1
 800eeec:	f04f 0200 	mov.w	r2, #0
 800eef0:	d124      	bne.n	800ef3c <_dtoa_r+0x60c>
 800eef2:	4b1b      	ldr	r3, [pc, #108]	; (800ef60 <_dtoa_r+0x630>)
 800eef4:	4650      	mov	r0, sl
 800eef6:	4659      	mov	r1, fp
 800eef8:	f7f1 f9c8 	bl	800028c <__adddf3>
 800eefc:	4602      	mov	r2, r0
 800eefe:	460b      	mov	r3, r1
 800ef00:	4640      	mov	r0, r8
 800ef02:	4649      	mov	r1, r9
 800ef04:	f7f1 fe08 	bl	8000b18 <__aeabi_dcmpgt>
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	d173      	bne.n	800eff4 <_dtoa_r+0x6c4>
 800ef0c:	4652      	mov	r2, sl
 800ef0e:	465b      	mov	r3, fp
 800ef10:	4913      	ldr	r1, [pc, #76]	; (800ef60 <_dtoa_r+0x630>)
 800ef12:	2000      	movs	r0, #0
 800ef14:	f7f1 f9b8 	bl	8000288 <__aeabi_dsub>
 800ef18:	4602      	mov	r2, r0
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	4640      	mov	r0, r8
 800ef1e:	4649      	mov	r1, r9
 800ef20:	f7f1 fddc 	bl	8000adc <__aeabi_dcmplt>
 800ef24:	2800      	cmp	r0, #0
 800ef26:	f43f af35 	beq.w	800ed94 <_dtoa_r+0x464>
 800ef2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ef2c:	1e6b      	subs	r3, r5, #1
 800ef2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ef34:	2b30      	cmp	r3, #48	; 0x30
 800ef36:	d0f8      	beq.n	800ef2a <_dtoa_r+0x5fa>
 800ef38:	9700      	str	r7, [sp, #0]
 800ef3a:	e049      	b.n	800efd0 <_dtoa_r+0x6a0>
 800ef3c:	4b05      	ldr	r3, [pc, #20]	; (800ef54 <_dtoa_r+0x624>)
 800ef3e:	f7f1 fb5b 	bl	80005f8 <__aeabi_dmul>
 800ef42:	4680      	mov	r8, r0
 800ef44:	4689      	mov	r9, r1
 800ef46:	e7bd      	b.n	800eec4 <_dtoa_r+0x594>
 800ef48:	080120c0 	.word	0x080120c0
 800ef4c:	08012098 	.word	0x08012098
 800ef50:	3ff00000 	.word	0x3ff00000
 800ef54:	40240000 	.word	0x40240000
 800ef58:	401c0000 	.word	0x401c0000
 800ef5c:	40140000 	.word	0x40140000
 800ef60:	3fe00000 	.word	0x3fe00000
 800ef64:	9d01      	ldr	r5, [sp, #4]
 800ef66:	4656      	mov	r6, sl
 800ef68:	465f      	mov	r7, fp
 800ef6a:	4642      	mov	r2, r8
 800ef6c:	464b      	mov	r3, r9
 800ef6e:	4630      	mov	r0, r6
 800ef70:	4639      	mov	r1, r7
 800ef72:	f7f1 fc6b 	bl	800084c <__aeabi_ddiv>
 800ef76:	f7f1 fdef 	bl	8000b58 <__aeabi_d2iz>
 800ef7a:	4682      	mov	sl, r0
 800ef7c:	f7f1 fad2 	bl	8000524 <__aeabi_i2d>
 800ef80:	4642      	mov	r2, r8
 800ef82:	464b      	mov	r3, r9
 800ef84:	f7f1 fb38 	bl	80005f8 <__aeabi_dmul>
 800ef88:	4602      	mov	r2, r0
 800ef8a:	460b      	mov	r3, r1
 800ef8c:	4630      	mov	r0, r6
 800ef8e:	4639      	mov	r1, r7
 800ef90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ef94:	f7f1 f978 	bl	8000288 <__aeabi_dsub>
 800ef98:	f805 6b01 	strb.w	r6, [r5], #1
 800ef9c:	9e01      	ldr	r6, [sp, #4]
 800ef9e:	9f03      	ldr	r7, [sp, #12]
 800efa0:	1bae      	subs	r6, r5, r6
 800efa2:	42b7      	cmp	r7, r6
 800efa4:	4602      	mov	r2, r0
 800efa6:	460b      	mov	r3, r1
 800efa8:	d135      	bne.n	800f016 <_dtoa_r+0x6e6>
 800efaa:	f7f1 f96f 	bl	800028c <__adddf3>
 800efae:	4642      	mov	r2, r8
 800efb0:	464b      	mov	r3, r9
 800efb2:	4606      	mov	r6, r0
 800efb4:	460f      	mov	r7, r1
 800efb6:	f7f1 fdaf 	bl	8000b18 <__aeabi_dcmpgt>
 800efba:	b9d0      	cbnz	r0, 800eff2 <_dtoa_r+0x6c2>
 800efbc:	4642      	mov	r2, r8
 800efbe:	464b      	mov	r3, r9
 800efc0:	4630      	mov	r0, r6
 800efc2:	4639      	mov	r1, r7
 800efc4:	f7f1 fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 800efc8:	b110      	cbz	r0, 800efd0 <_dtoa_r+0x6a0>
 800efca:	f01a 0f01 	tst.w	sl, #1
 800efce:	d110      	bne.n	800eff2 <_dtoa_r+0x6c2>
 800efd0:	4620      	mov	r0, r4
 800efd2:	ee18 1a10 	vmov	r1, s16
 800efd6:	f000 fc2b 	bl	800f830 <_Bfree>
 800efda:	2300      	movs	r3, #0
 800efdc:	9800      	ldr	r0, [sp, #0]
 800efde:	702b      	strb	r3, [r5, #0]
 800efe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efe2:	3001      	adds	r0, #1
 800efe4:	6018      	str	r0, [r3, #0]
 800efe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efe8:	2b00      	cmp	r3, #0
 800efea:	f43f acf1 	beq.w	800e9d0 <_dtoa_r+0xa0>
 800efee:	601d      	str	r5, [r3, #0]
 800eff0:	e4ee      	b.n	800e9d0 <_dtoa_r+0xa0>
 800eff2:	9f00      	ldr	r7, [sp, #0]
 800eff4:	462b      	mov	r3, r5
 800eff6:	461d      	mov	r5, r3
 800eff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800effc:	2a39      	cmp	r2, #57	; 0x39
 800effe:	d106      	bne.n	800f00e <_dtoa_r+0x6de>
 800f000:	9a01      	ldr	r2, [sp, #4]
 800f002:	429a      	cmp	r2, r3
 800f004:	d1f7      	bne.n	800eff6 <_dtoa_r+0x6c6>
 800f006:	9901      	ldr	r1, [sp, #4]
 800f008:	2230      	movs	r2, #48	; 0x30
 800f00a:	3701      	adds	r7, #1
 800f00c:	700a      	strb	r2, [r1, #0]
 800f00e:	781a      	ldrb	r2, [r3, #0]
 800f010:	3201      	adds	r2, #1
 800f012:	701a      	strb	r2, [r3, #0]
 800f014:	e790      	b.n	800ef38 <_dtoa_r+0x608>
 800f016:	4ba6      	ldr	r3, [pc, #664]	; (800f2b0 <_dtoa_r+0x980>)
 800f018:	2200      	movs	r2, #0
 800f01a:	f7f1 faed 	bl	80005f8 <__aeabi_dmul>
 800f01e:	2200      	movs	r2, #0
 800f020:	2300      	movs	r3, #0
 800f022:	4606      	mov	r6, r0
 800f024:	460f      	mov	r7, r1
 800f026:	f7f1 fd4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f02a:	2800      	cmp	r0, #0
 800f02c:	d09d      	beq.n	800ef6a <_dtoa_r+0x63a>
 800f02e:	e7cf      	b.n	800efd0 <_dtoa_r+0x6a0>
 800f030:	9a08      	ldr	r2, [sp, #32]
 800f032:	2a00      	cmp	r2, #0
 800f034:	f000 80d7 	beq.w	800f1e6 <_dtoa_r+0x8b6>
 800f038:	9a06      	ldr	r2, [sp, #24]
 800f03a:	2a01      	cmp	r2, #1
 800f03c:	f300 80ba 	bgt.w	800f1b4 <_dtoa_r+0x884>
 800f040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f042:	2a00      	cmp	r2, #0
 800f044:	f000 80b2 	beq.w	800f1ac <_dtoa_r+0x87c>
 800f048:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f04c:	9e07      	ldr	r6, [sp, #28]
 800f04e:	9d04      	ldr	r5, [sp, #16]
 800f050:	9a04      	ldr	r2, [sp, #16]
 800f052:	441a      	add	r2, r3
 800f054:	9204      	str	r2, [sp, #16]
 800f056:	9a05      	ldr	r2, [sp, #20]
 800f058:	2101      	movs	r1, #1
 800f05a:	441a      	add	r2, r3
 800f05c:	4620      	mov	r0, r4
 800f05e:	9205      	str	r2, [sp, #20]
 800f060:	f000 fc9e 	bl	800f9a0 <__i2b>
 800f064:	4607      	mov	r7, r0
 800f066:	2d00      	cmp	r5, #0
 800f068:	dd0c      	ble.n	800f084 <_dtoa_r+0x754>
 800f06a:	9b05      	ldr	r3, [sp, #20]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	dd09      	ble.n	800f084 <_dtoa_r+0x754>
 800f070:	42ab      	cmp	r3, r5
 800f072:	9a04      	ldr	r2, [sp, #16]
 800f074:	bfa8      	it	ge
 800f076:	462b      	movge	r3, r5
 800f078:	1ad2      	subs	r2, r2, r3
 800f07a:	9204      	str	r2, [sp, #16]
 800f07c:	9a05      	ldr	r2, [sp, #20]
 800f07e:	1aed      	subs	r5, r5, r3
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	9305      	str	r3, [sp, #20]
 800f084:	9b07      	ldr	r3, [sp, #28]
 800f086:	b31b      	cbz	r3, 800f0d0 <_dtoa_r+0x7a0>
 800f088:	9b08      	ldr	r3, [sp, #32]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	f000 80af 	beq.w	800f1ee <_dtoa_r+0x8be>
 800f090:	2e00      	cmp	r6, #0
 800f092:	dd13      	ble.n	800f0bc <_dtoa_r+0x78c>
 800f094:	4639      	mov	r1, r7
 800f096:	4632      	mov	r2, r6
 800f098:	4620      	mov	r0, r4
 800f09a:	f000 fd41 	bl	800fb20 <__pow5mult>
 800f09e:	ee18 2a10 	vmov	r2, s16
 800f0a2:	4601      	mov	r1, r0
 800f0a4:	4607      	mov	r7, r0
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	f000 fc90 	bl	800f9cc <__multiply>
 800f0ac:	ee18 1a10 	vmov	r1, s16
 800f0b0:	4680      	mov	r8, r0
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	f000 fbbc 	bl	800f830 <_Bfree>
 800f0b8:	ee08 8a10 	vmov	s16, r8
 800f0bc:	9b07      	ldr	r3, [sp, #28]
 800f0be:	1b9a      	subs	r2, r3, r6
 800f0c0:	d006      	beq.n	800f0d0 <_dtoa_r+0x7a0>
 800f0c2:	ee18 1a10 	vmov	r1, s16
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	f000 fd2a 	bl	800fb20 <__pow5mult>
 800f0cc:	ee08 0a10 	vmov	s16, r0
 800f0d0:	2101      	movs	r1, #1
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	f000 fc64 	bl	800f9a0 <__i2b>
 800f0d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	4606      	mov	r6, r0
 800f0de:	f340 8088 	ble.w	800f1f2 <_dtoa_r+0x8c2>
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	4601      	mov	r1, r0
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f000 fd1a 	bl	800fb20 <__pow5mult>
 800f0ec:	9b06      	ldr	r3, [sp, #24]
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	4606      	mov	r6, r0
 800f0f2:	f340 8081 	ble.w	800f1f8 <_dtoa_r+0x8c8>
 800f0f6:	f04f 0800 	mov.w	r8, #0
 800f0fa:	6933      	ldr	r3, [r6, #16]
 800f0fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f100:	6918      	ldr	r0, [r3, #16]
 800f102:	f000 fbfd 	bl	800f900 <__hi0bits>
 800f106:	f1c0 0020 	rsb	r0, r0, #32
 800f10a:	9b05      	ldr	r3, [sp, #20]
 800f10c:	4418      	add	r0, r3
 800f10e:	f010 001f 	ands.w	r0, r0, #31
 800f112:	f000 8092 	beq.w	800f23a <_dtoa_r+0x90a>
 800f116:	f1c0 0320 	rsb	r3, r0, #32
 800f11a:	2b04      	cmp	r3, #4
 800f11c:	f340 808a 	ble.w	800f234 <_dtoa_r+0x904>
 800f120:	f1c0 001c 	rsb	r0, r0, #28
 800f124:	9b04      	ldr	r3, [sp, #16]
 800f126:	4403      	add	r3, r0
 800f128:	9304      	str	r3, [sp, #16]
 800f12a:	9b05      	ldr	r3, [sp, #20]
 800f12c:	4403      	add	r3, r0
 800f12e:	4405      	add	r5, r0
 800f130:	9305      	str	r3, [sp, #20]
 800f132:	9b04      	ldr	r3, [sp, #16]
 800f134:	2b00      	cmp	r3, #0
 800f136:	dd07      	ble.n	800f148 <_dtoa_r+0x818>
 800f138:	ee18 1a10 	vmov	r1, s16
 800f13c:	461a      	mov	r2, r3
 800f13e:	4620      	mov	r0, r4
 800f140:	f000 fd48 	bl	800fbd4 <__lshift>
 800f144:	ee08 0a10 	vmov	s16, r0
 800f148:	9b05      	ldr	r3, [sp, #20]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	dd05      	ble.n	800f15a <_dtoa_r+0x82a>
 800f14e:	4631      	mov	r1, r6
 800f150:	461a      	mov	r2, r3
 800f152:	4620      	mov	r0, r4
 800f154:	f000 fd3e 	bl	800fbd4 <__lshift>
 800f158:	4606      	mov	r6, r0
 800f15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d06e      	beq.n	800f23e <_dtoa_r+0x90e>
 800f160:	ee18 0a10 	vmov	r0, s16
 800f164:	4631      	mov	r1, r6
 800f166:	f000 fda5 	bl	800fcb4 <__mcmp>
 800f16a:	2800      	cmp	r0, #0
 800f16c:	da67      	bge.n	800f23e <_dtoa_r+0x90e>
 800f16e:	9b00      	ldr	r3, [sp, #0]
 800f170:	3b01      	subs	r3, #1
 800f172:	ee18 1a10 	vmov	r1, s16
 800f176:	9300      	str	r3, [sp, #0]
 800f178:	220a      	movs	r2, #10
 800f17a:	2300      	movs	r3, #0
 800f17c:	4620      	mov	r0, r4
 800f17e:	f000 fb79 	bl	800f874 <__multadd>
 800f182:	9b08      	ldr	r3, [sp, #32]
 800f184:	ee08 0a10 	vmov	s16, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	f000 81b1 	beq.w	800f4f0 <_dtoa_r+0xbc0>
 800f18e:	2300      	movs	r3, #0
 800f190:	4639      	mov	r1, r7
 800f192:	220a      	movs	r2, #10
 800f194:	4620      	mov	r0, r4
 800f196:	f000 fb6d 	bl	800f874 <__multadd>
 800f19a:	9b02      	ldr	r3, [sp, #8]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	4607      	mov	r7, r0
 800f1a0:	f300 808e 	bgt.w	800f2c0 <_dtoa_r+0x990>
 800f1a4:	9b06      	ldr	r3, [sp, #24]
 800f1a6:	2b02      	cmp	r3, #2
 800f1a8:	dc51      	bgt.n	800f24e <_dtoa_r+0x91e>
 800f1aa:	e089      	b.n	800f2c0 <_dtoa_r+0x990>
 800f1ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f1ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f1b2:	e74b      	b.n	800f04c <_dtoa_r+0x71c>
 800f1b4:	9b03      	ldr	r3, [sp, #12]
 800f1b6:	1e5e      	subs	r6, r3, #1
 800f1b8:	9b07      	ldr	r3, [sp, #28]
 800f1ba:	42b3      	cmp	r3, r6
 800f1bc:	bfbf      	itttt	lt
 800f1be:	9b07      	ldrlt	r3, [sp, #28]
 800f1c0:	9607      	strlt	r6, [sp, #28]
 800f1c2:	1af2      	sublt	r2, r6, r3
 800f1c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f1c6:	bfb6      	itet	lt
 800f1c8:	189b      	addlt	r3, r3, r2
 800f1ca:	1b9e      	subge	r6, r3, r6
 800f1cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f1ce:	9b03      	ldr	r3, [sp, #12]
 800f1d0:	bfb8      	it	lt
 800f1d2:	2600      	movlt	r6, #0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	bfb7      	itett	lt
 800f1d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f1dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f1e0:	1a9d      	sublt	r5, r3, r2
 800f1e2:	2300      	movlt	r3, #0
 800f1e4:	e734      	b.n	800f050 <_dtoa_r+0x720>
 800f1e6:	9e07      	ldr	r6, [sp, #28]
 800f1e8:	9d04      	ldr	r5, [sp, #16]
 800f1ea:	9f08      	ldr	r7, [sp, #32]
 800f1ec:	e73b      	b.n	800f066 <_dtoa_r+0x736>
 800f1ee:	9a07      	ldr	r2, [sp, #28]
 800f1f0:	e767      	b.n	800f0c2 <_dtoa_r+0x792>
 800f1f2:	9b06      	ldr	r3, [sp, #24]
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	dc18      	bgt.n	800f22a <_dtoa_r+0x8fa>
 800f1f8:	f1ba 0f00 	cmp.w	sl, #0
 800f1fc:	d115      	bne.n	800f22a <_dtoa_r+0x8fa>
 800f1fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f202:	b993      	cbnz	r3, 800f22a <_dtoa_r+0x8fa>
 800f204:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f208:	0d1b      	lsrs	r3, r3, #20
 800f20a:	051b      	lsls	r3, r3, #20
 800f20c:	b183      	cbz	r3, 800f230 <_dtoa_r+0x900>
 800f20e:	9b04      	ldr	r3, [sp, #16]
 800f210:	3301      	adds	r3, #1
 800f212:	9304      	str	r3, [sp, #16]
 800f214:	9b05      	ldr	r3, [sp, #20]
 800f216:	3301      	adds	r3, #1
 800f218:	9305      	str	r3, [sp, #20]
 800f21a:	f04f 0801 	mov.w	r8, #1
 800f21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f220:	2b00      	cmp	r3, #0
 800f222:	f47f af6a 	bne.w	800f0fa <_dtoa_r+0x7ca>
 800f226:	2001      	movs	r0, #1
 800f228:	e76f      	b.n	800f10a <_dtoa_r+0x7da>
 800f22a:	f04f 0800 	mov.w	r8, #0
 800f22e:	e7f6      	b.n	800f21e <_dtoa_r+0x8ee>
 800f230:	4698      	mov	r8, r3
 800f232:	e7f4      	b.n	800f21e <_dtoa_r+0x8ee>
 800f234:	f43f af7d 	beq.w	800f132 <_dtoa_r+0x802>
 800f238:	4618      	mov	r0, r3
 800f23a:	301c      	adds	r0, #28
 800f23c:	e772      	b.n	800f124 <_dtoa_r+0x7f4>
 800f23e:	9b03      	ldr	r3, [sp, #12]
 800f240:	2b00      	cmp	r3, #0
 800f242:	dc37      	bgt.n	800f2b4 <_dtoa_r+0x984>
 800f244:	9b06      	ldr	r3, [sp, #24]
 800f246:	2b02      	cmp	r3, #2
 800f248:	dd34      	ble.n	800f2b4 <_dtoa_r+0x984>
 800f24a:	9b03      	ldr	r3, [sp, #12]
 800f24c:	9302      	str	r3, [sp, #8]
 800f24e:	9b02      	ldr	r3, [sp, #8]
 800f250:	b96b      	cbnz	r3, 800f26e <_dtoa_r+0x93e>
 800f252:	4631      	mov	r1, r6
 800f254:	2205      	movs	r2, #5
 800f256:	4620      	mov	r0, r4
 800f258:	f000 fb0c 	bl	800f874 <__multadd>
 800f25c:	4601      	mov	r1, r0
 800f25e:	4606      	mov	r6, r0
 800f260:	ee18 0a10 	vmov	r0, s16
 800f264:	f000 fd26 	bl	800fcb4 <__mcmp>
 800f268:	2800      	cmp	r0, #0
 800f26a:	f73f adbb 	bgt.w	800ede4 <_dtoa_r+0x4b4>
 800f26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f270:	9d01      	ldr	r5, [sp, #4]
 800f272:	43db      	mvns	r3, r3
 800f274:	9300      	str	r3, [sp, #0]
 800f276:	f04f 0800 	mov.w	r8, #0
 800f27a:	4631      	mov	r1, r6
 800f27c:	4620      	mov	r0, r4
 800f27e:	f000 fad7 	bl	800f830 <_Bfree>
 800f282:	2f00      	cmp	r7, #0
 800f284:	f43f aea4 	beq.w	800efd0 <_dtoa_r+0x6a0>
 800f288:	f1b8 0f00 	cmp.w	r8, #0
 800f28c:	d005      	beq.n	800f29a <_dtoa_r+0x96a>
 800f28e:	45b8      	cmp	r8, r7
 800f290:	d003      	beq.n	800f29a <_dtoa_r+0x96a>
 800f292:	4641      	mov	r1, r8
 800f294:	4620      	mov	r0, r4
 800f296:	f000 facb 	bl	800f830 <_Bfree>
 800f29a:	4639      	mov	r1, r7
 800f29c:	4620      	mov	r0, r4
 800f29e:	f000 fac7 	bl	800f830 <_Bfree>
 800f2a2:	e695      	b.n	800efd0 <_dtoa_r+0x6a0>
 800f2a4:	2600      	movs	r6, #0
 800f2a6:	4637      	mov	r7, r6
 800f2a8:	e7e1      	b.n	800f26e <_dtoa_r+0x93e>
 800f2aa:	9700      	str	r7, [sp, #0]
 800f2ac:	4637      	mov	r7, r6
 800f2ae:	e599      	b.n	800ede4 <_dtoa_r+0x4b4>
 800f2b0:	40240000 	.word	0x40240000
 800f2b4:	9b08      	ldr	r3, [sp, #32]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	f000 80ca 	beq.w	800f450 <_dtoa_r+0xb20>
 800f2bc:	9b03      	ldr	r3, [sp, #12]
 800f2be:	9302      	str	r3, [sp, #8]
 800f2c0:	2d00      	cmp	r5, #0
 800f2c2:	dd05      	ble.n	800f2d0 <_dtoa_r+0x9a0>
 800f2c4:	4639      	mov	r1, r7
 800f2c6:	462a      	mov	r2, r5
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f000 fc83 	bl	800fbd4 <__lshift>
 800f2ce:	4607      	mov	r7, r0
 800f2d0:	f1b8 0f00 	cmp.w	r8, #0
 800f2d4:	d05b      	beq.n	800f38e <_dtoa_r+0xa5e>
 800f2d6:	6879      	ldr	r1, [r7, #4]
 800f2d8:	4620      	mov	r0, r4
 800f2da:	f000 fa69 	bl	800f7b0 <_Balloc>
 800f2de:	4605      	mov	r5, r0
 800f2e0:	b928      	cbnz	r0, 800f2ee <_dtoa_r+0x9be>
 800f2e2:	4b87      	ldr	r3, [pc, #540]	; (800f500 <_dtoa_r+0xbd0>)
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f2ea:	f7ff bb3b 	b.w	800e964 <_dtoa_r+0x34>
 800f2ee:	693a      	ldr	r2, [r7, #16]
 800f2f0:	3202      	adds	r2, #2
 800f2f2:	0092      	lsls	r2, r2, #2
 800f2f4:	f107 010c 	add.w	r1, r7, #12
 800f2f8:	300c      	adds	r0, #12
 800f2fa:	f7fe fb4a 	bl	800d992 <memcpy>
 800f2fe:	2201      	movs	r2, #1
 800f300:	4629      	mov	r1, r5
 800f302:	4620      	mov	r0, r4
 800f304:	f000 fc66 	bl	800fbd4 <__lshift>
 800f308:	9b01      	ldr	r3, [sp, #4]
 800f30a:	f103 0901 	add.w	r9, r3, #1
 800f30e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f312:	4413      	add	r3, r2
 800f314:	9305      	str	r3, [sp, #20]
 800f316:	f00a 0301 	and.w	r3, sl, #1
 800f31a:	46b8      	mov	r8, r7
 800f31c:	9304      	str	r3, [sp, #16]
 800f31e:	4607      	mov	r7, r0
 800f320:	4631      	mov	r1, r6
 800f322:	ee18 0a10 	vmov	r0, s16
 800f326:	f7ff fa77 	bl	800e818 <quorem>
 800f32a:	4641      	mov	r1, r8
 800f32c:	9002      	str	r0, [sp, #8]
 800f32e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f332:	ee18 0a10 	vmov	r0, s16
 800f336:	f000 fcbd 	bl	800fcb4 <__mcmp>
 800f33a:	463a      	mov	r2, r7
 800f33c:	9003      	str	r0, [sp, #12]
 800f33e:	4631      	mov	r1, r6
 800f340:	4620      	mov	r0, r4
 800f342:	f000 fcd3 	bl	800fcec <__mdiff>
 800f346:	68c2      	ldr	r2, [r0, #12]
 800f348:	f109 3bff 	add.w	fp, r9, #4294967295
 800f34c:	4605      	mov	r5, r0
 800f34e:	bb02      	cbnz	r2, 800f392 <_dtoa_r+0xa62>
 800f350:	4601      	mov	r1, r0
 800f352:	ee18 0a10 	vmov	r0, s16
 800f356:	f000 fcad 	bl	800fcb4 <__mcmp>
 800f35a:	4602      	mov	r2, r0
 800f35c:	4629      	mov	r1, r5
 800f35e:	4620      	mov	r0, r4
 800f360:	9207      	str	r2, [sp, #28]
 800f362:	f000 fa65 	bl	800f830 <_Bfree>
 800f366:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f36a:	ea43 0102 	orr.w	r1, r3, r2
 800f36e:	9b04      	ldr	r3, [sp, #16]
 800f370:	430b      	orrs	r3, r1
 800f372:	464d      	mov	r5, r9
 800f374:	d10f      	bne.n	800f396 <_dtoa_r+0xa66>
 800f376:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f37a:	d02a      	beq.n	800f3d2 <_dtoa_r+0xaa2>
 800f37c:	9b03      	ldr	r3, [sp, #12]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	dd02      	ble.n	800f388 <_dtoa_r+0xa58>
 800f382:	9b02      	ldr	r3, [sp, #8]
 800f384:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f388:	f88b a000 	strb.w	sl, [fp]
 800f38c:	e775      	b.n	800f27a <_dtoa_r+0x94a>
 800f38e:	4638      	mov	r0, r7
 800f390:	e7ba      	b.n	800f308 <_dtoa_r+0x9d8>
 800f392:	2201      	movs	r2, #1
 800f394:	e7e2      	b.n	800f35c <_dtoa_r+0xa2c>
 800f396:	9b03      	ldr	r3, [sp, #12]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	db04      	blt.n	800f3a6 <_dtoa_r+0xa76>
 800f39c:	9906      	ldr	r1, [sp, #24]
 800f39e:	430b      	orrs	r3, r1
 800f3a0:	9904      	ldr	r1, [sp, #16]
 800f3a2:	430b      	orrs	r3, r1
 800f3a4:	d122      	bne.n	800f3ec <_dtoa_r+0xabc>
 800f3a6:	2a00      	cmp	r2, #0
 800f3a8:	ddee      	ble.n	800f388 <_dtoa_r+0xa58>
 800f3aa:	ee18 1a10 	vmov	r1, s16
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	f000 fc0f 	bl	800fbd4 <__lshift>
 800f3b6:	4631      	mov	r1, r6
 800f3b8:	ee08 0a10 	vmov	s16, r0
 800f3bc:	f000 fc7a 	bl	800fcb4 <__mcmp>
 800f3c0:	2800      	cmp	r0, #0
 800f3c2:	dc03      	bgt.n	800f3cc <_dtoa_r+0xa9c>
 800f3c4:	d1e0      	bne.n	800f388 <_dtoa_r+0xa58>
 800f3c6:	f01a 0f01 	tst.w	sl, #1
 800f3ca:	d0dd      	beq.n	800f388 <_dtoa_r+0xa58>
 800f3cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f3d0:	d1d7      	bne.n	800f382 <_dtoa_r+0xa52>
 800f3d2:	2339      	movs	r3, #57	; 0x39
 800f3d4:	f88b 3000 	strb.w	r3, [fp]
 800f3d8:	462b      	mov	r3, r5
 800f3da:	461d      	mov	r5, r3
 800f3dc:	3b01      	subs	r3, #1
 800f3de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f3e2:	2a39      	cmp	r2, #57	; 0x39
 800f3e4:	d071      	beq.n	800f4ca <_dtoa_r+0xb9a>
 800f3e6:	3201      	adds	r2, #1
 800f3e8:	701a      	strb	r2, [r3, #0]
 800f3ea:	e746      	b.n	800f27a <_dtoa_r+0x94a>
 800f3ec:	2a00      	cmp	r2, #0
 800f3ee:	dd07      	ble.n	800f400 <_dtoa_r+0xad0>
 800f3f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f3f4:	d0ed      	beq.n	800f3d2 <_dtoa_r+0xaa2>
 800f3f6:	f10a 0301 	add.w	r3, sl, #1
 800f3fa:	f88b 3000 	strb.w	r3, [fp]
 800f3fe:	e73c      	b.n	800f27a <_dtoa_r+0x94a>
 800f400:	9b05      	ldr	r3, [sp, #20]
 800f402:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f406:	4599      	cmp	r9, r3
 800f408:	d047      	beq.n	800f49a <_dtoa_r+0xb6a>
 800f40a:	ee18 1a10 	vmov	r1, s16
 800f40e:	2300      	movs	r3, #0
 800f410:	220a      	movs	r2, #10
 800f412:	4620      	mov	r0, r4
 800f414:	f000 fa2e 	bl	800f874 <__multadd>
 800f418:	45b8      	cmp	r8, r7
 800f41a:	ee08 0a10 	vmov	s16, r0
 800f41e:	f04f 0300 	mov.w	r3, #0
 800f422:	f04f 020a 	mov.w	r2, #10
 800f426:	4641      	mov	r1, r8
 800f428:	4620      	mov	r0, r4
 800f42a:	d106      	bne.n	800f43a <_dtoa_r+0xb0a>
 800f42c:	f000 fa22 	bl	800f874 <__multadd>
 800f430:	4680      	mov	r8, r0
 800f432:	4607      	mov	r7, r0
 800f434:	f109 0901 	add.w	r9, r9, #1
 800f438:	e772      	b.n	800f320 <_dtoa_r+0x9f0>
 800f43a:	f000 fa1b 	bl	800f874 <__multadd>
 800f43e:	4639      	mov	r1, r7
 800f440:	4680      	mov	r8, r0
 800f442:	2300      	movs	r3, #0
 800f444:	220a      	movs	r2, #10
 800f446:	4620      	mov	r0, r4
 800f448:	f000 fa14 	bl	800f874 <__multadd>
 800f44c:	4607      	mov	r7, r0
 800f44e:	e7f1      	b.n	800f434 <_dtoa_r+0xb04>
 800f450:	9b03      	ldr	r3, [sp, #12]
 800f452:	9302      	str	r3, [sp, #8]
 800f454:	9d01      	ldr	r5, [sp, #4]
 800f456:	ee18 0a10 	vmov	r0, s16
 800f45a:	4631      	mov	r1, r6
 800f45c:	f7ff f9dc 	bl	800e818 <quorem>
 800f460:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f464:	9b01      	ldr	r3, [sp, #4]
 800f466:	f805 ab01 	strb.w	sl, [r5], #1
 800f46a:	1aea      	subs	r2, r5, r3
 800f46c:	9b02      	ldr	r3, [sp, #8]
 800f46e:	4293      	cmp	r3, r2
 800f470:	dd09      	ble.n	800f486 <_dtoa_r+0xb56>
 800f472:	ee18 1a10 	vmov	r1, s16
 800f476:	2300      	movs	r3, #0
 800f478:	220a      	movs	r2, #10
 800f47a:	4620      	mov	r0, r4
 800f47c:	f000 f9fa 	bl	800f874 <__multadd>
 800f480:	ee08 0a10 	vmov	s16, r0
 800f484:	e7e7      	b.n	800f456 <_dtoa_r+0xb26>
 800f486:	9b02      	ldr	r3, [sp, #8]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	bfc8      	it	gt
 800f48c:	461d      	movgt	r5, r3
 800f48e:	9b01      	ldr	r3, [sp, #4]
 800f490:	bfd8      	it	le
 800f492:	2501      	movle	r5, #1
 800f494:	441d      	add	r5, r3
 800f496:	f04f 0800 	mov.w	r8, #0
 800f49a:	ee18 1a10 	vmov	r1, s16
 800f49e:	2201      	movs	r2, #1
 800f4a0:	4620      	mov	r0, r4
 800f4a2:	f000 fb97 	bl	800fbd4 <__lshift>
 800f4a6:	4631      	mov	r1, r6
 800f4a8:	ee08 0a10 	vmov	s16, r0
 800f4ac:	f000 fc02 	bl	800fcb4 <__mcmp>
 800f4b0:	2800      	cmp	r0, #0
 800f4b2:	dc91      	bgt.n	800f3d8 <_dtoa_r+0xaa8>
 800f4b4:	d102      	bne.n	800f4bc <_dtoa_r+0xb8c>
 800f4b6:	f01a 0f01 	tst.w	sl, #1
 800f4ba:	d18d      	bne.n	800f3d8 <_dtoa_r+0xaa8>
 800f4bc:	462b      	mov	r3, r5
 800f4be:	461d      	mov	r5, r3
 800f4c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f4c4:	2a30      	cmp	r2, #48	; 0x30
 800f4c6:	d0fa      	beq.n	800f4be <_dtoa_r+0xb8e>
 800f4c8:	e6d7      	b.n	800f27a <_dtoa_r+0x94a>
 800f4ca:	9a01      	ldr	r2, [sp, #4]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d184      	bne.n	800f3da <_dtoa_r+0xaaa>
 800f4d0:	9b00      	ldr	r3, [sp, #0]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	9300      	str	r3, [sp, #0]
 800f4d6:	2331      	movs	r3, #49	; 0x31
 800f4d8:	7013      	strb	r3, [r2, #0]
 800f4da:	e6ce      	b.n	800f27a <_dtoa_r+0x94a>
 800f4dc:	4b09      	ldr	r3, [pc, #36]	; (800f504 <_dtoa_r+0xbd4>)
 800f4de:	f7ff ba95 	b.w	800ea0c <_dtoa_r+0xdc>
 800f4e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	f47f aa6e 	bne.w	800e9c6 <_dtoa_r+0x96>
 800f4ea:	4b07      	ldr	r3, [pc, #28]	; (800f508 <_dtoa_r+0xbd8>)
 800f4ec:	f7ff ba8e 	b.w	800ea0c <_dtoa_r+0xdc>
 800f4f0:	9b02      	ldr	r3, [sp, #8]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	dcae      	bgt.n	800f454 <_dtoa_r+0xb24>
 800f4f6:	9b06      	ldr	r3, [sp, #24]
 800f4f8:	2b02      	cmp	r3, #2
 800f4fa:	f73f aea8 	bgt.w	800f24e <_dtoa_r+0x91e>
 800f4fe:	e7a9      	b.n	800f454 <_dtoa_r+0xb24>
 800f500:	08012027 	.word	0x08012027
 800f504:	08011f84 	.word	0x08011f84
 800f508:	08011fa8 	.word	0x08011fa8

0800f50c <__sflush_r>:
 800f50c:	898a      	ldrh	r2, [r1, #12]
 800f50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f512:	4605      	mov	r5, r0
 800f514:	0710      	lsls	r0, r2, #28
 800f516:	460c      	mov	r4, r1
 800f518:	d458      	bmi.n	800f5cc <__sflush_r+0xc0>
 800f51a:	684b      	ldr	r3, [r1, #4]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	dc05      	bgt.n	800f52c <__sflush_r+0x20>
 800f520:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f522:	2b00      	cmp	r3, #0
 800f524:	dc02      	bgt.n	800f52c <__sflush_r+0x20>
 800f526:	2000      	movs	r0, #0
 800f528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f52c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f52e:	2e00      	cmp	r6, #0
 800f530:	d0f9      	beq.n	800f526 <__sflush_r+0x1a>
 800f532:	2300      	movs	r3, #0
 800f534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f538:	682f      	ldr	r7, [r5, #0]
 800f53a:	602b      	str	r3, [r5, #0]
 800f53c:	d032      	beq.n	800f5a4 <__sflush_r+0x98>
 800f53e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f540:	89a3      	ldrh	r3, [r4, #12]
 800f542:	075a      	lsls	r2, r3, #29
 800f544:	d505      	bpl.n	800f552 <__sflush_r+0x46>
 800f546:	6863      	ldr	r3, [r4, #4]
 800f548:	1ac0      	subs	r0, r0, r3
 800f54a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f54c:	b10b      	cbz	r3, 800f552 <__sflush_r+0x46>
 800f54e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f550:	1ac0      	subs	r0, r0, r3
 800f552:	2300      	movs	r3, #0
 800f554:	4602      	mov	r2, r0
 800f556:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f558:	6a21      	ldr	r1, [r4, #32]
 800f55a:	4628      	mov	r0, r5
 800f55c:	47b0      	blx	r6
 800f55e:	1c43      	adds	r3, r0, #1
 800f560:	89a3      	ldrh	r3, [r4, #12]
 800f562:	d106      	bne.n	800f572 <__sflush_r+0x66>
 800f564:	6829      	ldr	r1, [r5, #0]
 800f566:	291d      	cmp	r1, #29
 800f568:	d82c      	bhi.n	800f5c4 <__sflush_r+0xb8>
 800f56a:	4a2a      	ldr	r2, [pc, #168]	; (800f614 <__sflush_r+0x108>)
 800f56c:	40ca      	lsrs	r2, r1
 800f56e:	07d6      	lsls	r6, r2, #31
 800f570:	d528      	bpl.n	800f5c4 <__sflush_r+0xb8>
 800f572:	2200      	movs	r2, #0
 800f574:	6062      	str	r2, [r4, #4]
 800f576:	04d9      	lsls	r1, r3, #19
 800f578:	6922      	ldr	r2, [r4, #16]
 800f57a:	6022      	str	r2, [r4, #0]
 800f57c:	d504      	bpl.n	800f588 <__sflush_r+0x7c>
 800f57e:	1c42      	adds	r2, r0, #1
 800f580:	d101      	bne.n	800f586 <__sflush_r+0x7a>
 800f582:	682b      	ldr	r3, [r5, #0]
 800f584:	b903      	cbnz	r3, 800f588 <__sflush_r+0x7c>
 800f586:	6560      	str	r0, [r4, #84]	; 0x54
 800f588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f58a:	602f      	str	r7, [r5, #0]
 800f58c:	2900      	cmp	r1, #0
 800f58e:	d0ca      	beq.n	800f526 <__sflush_r+0x1a>
 800f590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f594:	4299      	cmp	r1, r3
 800f596:	d002      	beq.n	800f59e <__sflush_r+0x92>
 800f598:	4628      	mov	r0, r5
 800f59a:	f000 fca3 	bl	800fee4 <_free_r>
 800f59e:	2000      	movs	r0, #0
 800f5a0:	6360      	str	r0, [r4, #52]	; 0x34
 800f5a2:	e7c1      	b.n	800f528 <__sflush_r+0x1c>
 800f5a4:	6a21      	ldr	r1, [r4, #32]
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	4628      	mov	r0, r5
 800f5aa:	47b0      	blx	r6
 800f5ac:	1c41      	adds	r1, r0, #1
 800f5ae:	d1c7      	bne.n	800f540 <__sflush_r+0x34>
 800f5b0:	682b      	ldr	r3, [r5, #0]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d0c4      	beq.n	800f540 <__sflush_r+0x34>
 800f5b6:	2b1d      	cmp	r3, #29
 800f5b8:	d001      	beq.n	800f5be <__sflush_r+0xb2>
 800f5ba:	2b16      	cmp	r3, #22
 800f5bc:	d101      	bne.n	800f5c2 <__sflush_r+0xb6>
 800f5be:	602f      	str	r7, [r5, #0]
 800f5c0:	e7b1      	b.n	800f526 <__sflush_r+0x1a>
 800f5c2:	89a3      	ldrh	r3, [r4, #12]
 800f5c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5c8:	81a3      	strh	r3, [r4, #12]
 800f5ca:	e7ad      	b.n	800f528 <__sflush_r+0x1c>
 800f5cc:	690f      	ldr	r7, [r1, #16]
 800f5ce:	2f00      	cmp	r7, #0
 800f5d0:	d0a9      	beq.n	800f526 <__sflush_r+0x1a>
 800f5d2:	0793      	lsls	r3, r2, #30
 800f5d4:	680e      	ldr	r6, [r1, #0]
 800f5d6:	bf08      	it	eq
 800f5d8:	694b      	ldreq	r3, [r1, #20]
 800f5da:	600f      	str	r7, [r1, #0]
 800f5dc:	bf18      	it	ne
 800f5de:	2300      	movne	r3, #0
 800f5e0:	eba6 0807 	sub.w	r8, r6, r7
 800f5e4:	608b      	str	r3, [r1, #8]
 800f5e6:	f1b8 0f00 	cmp.w	r8, #0
 800f5ea:	dd9c      	ble.n	800f526 <__sflush_r+0x1a>
 800f5ec:	6a21      	ldr	r1, [r4, #32]
 800f5ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f5f0:	4643      	mov	r3, r8
 800f5f2:	463a      	mov	r2, r7
 800f5f4:	4628      	mov	r0, r5
 800f5f6:	47b0      	blx	r6
 800f5f8:	2800      	cmp	r0, #0
 800f5fa:	dc06      	bgt.n	800f60a <__sflush_r+0xfe>
 800f5fc:	89a3      	ldrh	r3, [r4, #12]
 800f5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f602:	81a3      	strh	r3, [r4, #12]
 800f604:	f04f 30ff 	mov.w	r0, #4294967295
 800f608:	e78e      	b.n	800f528 <__sflush_r+0x1c>
 800f60a:	4407      	add	r7, r0
 800f60c:	eba8 0800 	sub.w	r8, r8, r0
 800f610:	e7e9      	b.n	800f5e6 <__sflush_r+0xda>
 800f612:	bf00      	nop
 800f614:	20400001 	.word	0x20400001

0800f618 <_fflush_r>:
 800f618:	b538      	push	{r3, r4, r5, lr}
 800f61a:	690b      	ldr	r3, [r1, #16]
 800f61c:	4605      	mov	r5, r0
 800f61e:	460c      	mov	r4, r1
 800f620:	b913      	cbnz	r3, 800f628 <_fflush_r+0x10>
 800f622:	2500      	movs	r5, #0
 800f624:	4628      	mov	r0, r5
 800f626:	bd38      	pop	{r3, r4, r5, pc}
 800f628:	b118      	cbz	r0, 800f632 <_fflush_r+0x1a>
 800f62a:	6983      	ldr	r3, [r0, #24]
 800f62c:	b90b      	cbnz	r3, 800f632 <_fflush_r+0x1a>
 800f62e:	f7fe f8eb 	bl	800d808 <__sinit>
 800f632:	4b14      	ldr	r3, [pc, #80]	; (800f684 <_fflush_r+0x6c>)
 800f634:	429c      	cmp	r4, r3
 800f636:	d11b      	bne.n	800f670 <_fflush_r+0x58>
 800f638:	686c      	ldr	r4, [r5, #4]
 800f63a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d0ef      	beq.n	800f622 <_fflush_r+0xa>
 800f642:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f644:	07d0      	lsls	r0, r2, #31
 800f646:	d404      	bmi.n	800f652 <_fflush_r+0x3a>
 800f648:	0599      	lsls	r1, r3, #22
 800f64a:	d402      	bmi.n	800f652 <_fflush_r+0x3a>
 800f64c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f64e:	f7fe f99e 	bl	800d98e <__retarget_lock_acquire_recursive>
 800f652:	4628      	mov	r0, r5
 800f654:	4621      	mov	r1, r4
 800f656:	f7ff ff59 	bl	800f50c <__sflush_r>
 800f65a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f65c:	07da      	lsls	r2, r3, #31
 800f65e:	4605      	mov	r5, r0
 800f660:	d4e0      	bmi.n	800f624 <_fflush_r+0xc>
 800f662:	89a3      	ldrh	r3, [r4, #12]
 800f664:	059b      	lsls	r3, r3, #22
 800f666:	d4dd      	bmi.n	800f624 <_fflush_r+0xc>
 800f668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f66a:	f7fe f991 	bl	800d990 <__retarget_lock_release_recursive>
 800f66e:	e7d9      	b.n	800f624 <_fflush_r+0xc>
 800f670:	4b05      	ldr	r3, [pc, #20]	; (800f688 <_fflush_r+0x70>)
 800f672:	429c      	cmp	r4, r3
 800f674:	d101      	bne.n	800f67a <_fflush_r+0x62>
 800f676:	68ac      	ldr	r4, [r5, #8]
 800f678:	e7df      	b.n	800f63a <_fflush_r+0x22>
 800f67a:	4b04      	ldr	r3, [pc, #16]	; (800f68c <_fflush_r+0x74>)
 800f67c:	429c      	cmp	r4, r3
 800f67e:	bf08      	it	eq
 800f680:	68ec      	ldreq	r4, [r5, #12]
 800f682:	e7da      	b.n	800f63a <_fflush_r+0x22>
 800f684:	08011f30 	.word	0x08011f30
 800f688:	08011f50 	.word	0x08011f50
 800f68c:	08011f10 	.word	0x08011f10

0800f690 <_localeconv_r>:
 800f690:	4800      	ldr	r0, [pc, #0]	; (800f694 <_localeconv_r+0x4>)
 800f692:	4770      	bx	lr
 800f694:	200001f4 	.word	0x200001f4

0800f698 <_lseek_r>:
 800f698:	b538      	push	{r3, r4, r5, lr}
 800f69a:	4d07      	ldr	r5, [pc, #28]	; (800f6b8 <_lseek_r+0x20>)
 800f69c:	4604      	mov	r4, r0
 800f69e:	4608      	mov	r0, r1
 800f6a0:	4611      	mov	r1, r2
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	602a      	str	r2, [r5, #0]
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	f7f4 f958 	bl	800395c <_lseek>
 800f6ac:	1c43      	adds	r3, r0, #1
 800f6ae:	d102      	bne.n	800f6b6 <_lseek_r+0x1e>
 800f6b0:	682b      	ldr	r3, [r5, #0]
 800f6b2:	b103      	cbz	r3, 800f6b6 <_lseek_r+0x1e>
 800f6b4:	6023      	str	r3, [r4, #0]
 800f6b6:	bd38      	pop	{r3, r4, r5, pc}
 800f6b8:	200055b8 	.word	0x200055b8

0800f6bc <__swhatbuf_r>:
 800f6bc:	b570      	push	{r4, r5, r6, lr}
 800f6be:	460e      	mov	r6, r1
 800f6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6c4:	2900      	cmp	r1, #0
 800f6c6:	b096      	sub	sp, #88	; 0x58
 800f6c8:	4614      	mov	r4, r2
 800f6ca:	461d      	mov	r5, r3
 800f6cc:	da08      	bge.n	800f6e0 <__swhatbuf_r+0x24>
 800f6ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	602a      	str	r2, [r5, #0]
 800f6d6:	061a      	lsls	r2, r3, #24
 800f6d8:	d410      	bmi.n	800f6fc <__swhatbuf_r+0x40>
 800f6da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6de:	e00e      	b.n	800f6fe <__swhatbuf_r+0x42>
 800f6e0:	466a      	mov	r2, sp
 800f6e2:	f000 fde7 	bl	80102b4 <_fstat_r>
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	dbf1      	blt.n	800f6ce <__swhatbuf_r+0x12>
 800f6ea:	9a01      	ldr	r2, [sp, #4]
 800f6ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f6f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f6f4:	425a      	negs	r2, r3
 800f6f6:	415a      	adcs	r2, r3
 800f6f8:	602a      	str	r2, [r5, #0]
 800f6fa:	e7ee      	b.n	800f6da <__swhatbuf_r+0x1e>
 800f6fc:	2340      	movs	r3, #64	; 0x40
 800f6fe:	2000      	movs	r0, #0
 800f700:	6023      	str	r3, [r4, #0]
 800f702:	b016      	add	sp, #88	; 0x58
 800f704:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f708 <__smakebuf_r>:
 800f708:	898b      	ldrh	r3, [r1, #12]
 800f70a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f70c:	079d      	lsls	r5, r3, #30
 800f70e:	4606      	mov	r6, r0
 800f710:	460c      	mov	r4, r1
 800f712:	d507      	bpl.n	800f724 <__smakebuf_r+0x1c>
 800f714:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f718:	6023      	str	r3, [r4, #0]
 800f71a:	6123      	str	r3, [r4, #16]
 800f71c:	2301      	movs	r3, #1
 800f71e:	6163      	str	r3, [r4, #20]
 800f720:	b002      	add	sp, #8
 800f722:	bd70      	pop	{r4, r5, r6, pc}
 800f724:	ab01      	add	r3, sp, #4
 800f726:	466a      	mov	r2, sp
 800f728:	f7ff ffc8 	bl	800f6bc <__swhatbuf_r>
 800f72c:	9900      	ldr	r1, [sp, #0]
 800f72e:	4605      	mov	r5, r0
 800f730:	4630      	mov	r0, r6
 800f732:	f7fe f965 	bl	800da00 <_malloc_r>
 800f736:	b948      	cbnz	r0, 800f74c <__smakebuf_r+0x44>
 800f738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f73c:	059a      	lsls	r2, r3, #22
 800f73e:	d4ef      	bmi.n	800f720 <__smakebuf_r+0x18>
 800f740:	f023 0303 	bic.w	r3, r3, #3
 800f744:	f043 0302 	orr.w	r3, r3, #2
 800f748:	81a3      	strh	r3, [r4, #12]
 800f74a:	e7e3      	b.n	800f714 <__smakebuf_r+0xc>
 800f74c:	4b0d      	ldr	r3, [pc, #52]	; (800f784 <__smakebuf_r+0x7c>)
 800f74e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f750:	89a3      	ldrh	r3, [r4, #12]
 800f752:	6020      	str	r0, [r4, #0]
 800f754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f758:	81a3      	strh	r3, [r4, #12]
 800f75a:	9b00      	ldr	r3, [sp, #0]
 800f75c:	6163      	str	r3, [r4, #20]
 800f75e:	9b01      	ldr	r3, [sp, #4]
 800f760:	6120      	str	r0, [r4, #16]
 800f762:	b15b      	cbz	r3, 800f77c <__smakebuf_r+0x74>
 800f764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f768:	4630      	mov	r0, r6
 800f76a:	f000 fdb5 	bl	80102d8 <_isatty_r>
 800f76e:	b128      	cbz	r0, 800f77c <__smakebuf_r+0x74>
 800f770:	89a3      	ldrh	r3, [r4, #12]
 800f772:	f023 0303 	bic.w	r3, r3, #3
 800f776:	f043 0301 	orr.w	r3, r3, #1
 800f77a:	81a3      	strh	r3, [r4, #12]
 800f77c:	89a0      	ldrh	r0, [r4, #12]
 800f77e:	4305      	orrs	r5, r0
 800f780:	81a5      	strh	r5, [r4, #12]
 800f782:	e7cd      	b.n	800f720 <__smakebuf_r+0x18>
 800f784:	0800d7a1 	.word	0x0800d7a1

0800f788 <malloc>:
 800f788:	4b02      	ldr	r3, [pc, #8]	; (800f794 <malloc+0xc>)
 800f78a:	4601      	mov	r1, r0
 800f78c:	6818      	ldr	r0, [r3, #0]
 800f78e:	f7fe b937 	b.w	800da00 <_malloc_r>
 800f792:	bf00      	nop
 800f794:	200000a0 	.word	0x200000a0

0800f798 <__malloc_lock>:
 800f798:	4801      	ldr	r0, [pc, #4]	; (800f7a0 <__malloc_lock+0x8>)
 800f79a:	f7fe b8f8 	b.w	800d98e <__retarget_lock_acquire_recursive>
 800f79e:	bf00      	nop
 800f7a0:	200055ac 	.word	0x200055ac

0800f7a4 <__malloc_unlock>:
 800f7a4:	4801      	ldr	r0, [pc, #4]	; (800f7ac <__malloc_unlock+0x8>)
 800f7a6:	f7fe b8f3 	b.w	800d990 <__retarget_lock_release_recursive>
 800f7aa:	bf00      	nop
 800f7ac:	200055ac 	.word	0x200055ac

0800f7b0 <_Balloc>:
 800f7b0:	b570      	push	{r4, r5, r6, lr}
 800f7b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f7b4:	4604      	mov	r4, r0
 800f7b6:	460d      	mov	r5, r1
 800f7b8:	b976      	cbnz	r6, 800f7d8 <_Balloc+0x28>
 800f7ba:	2010      	movs	r0, #16
 800f7bc:	f7ff ffe4 	bl	800f788 <malloc>
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	6260      	str	r0, [r4, #36]	; 0x24
 800f7c4:	b920      	cbnz	r0, 800f7d0 <_Balloc+0x20>
 800f7c6:	4b18      	ldr	r3, [pc, #96]	; (800f828 <_Balloc+0x78>)
 800f7c8:	4818      	ldr	r0, [pc, #96]	; (800f82c <_Balloc+0x7c>)
 800f7ca:	2166      	movs	r1, #102	; 0x66
 800f7cc:	f000 fd42 	bl	8010254 <__assert_func>
 800f7d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7d4:	6006      	str	r6, [r0, #0]
 800f7d6:	60c6      	str	r6, [r0, #12]
 800f7d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f7da:	68f3      	ldr	r3, [r6, #12]
 800f7dc:	b183      	cbz	r3, 800f800 <_Balloc+0x50>
 800f7de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7e0:	68db      	ldr	r3, [r3, #12]
 800f7e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f7e6:	b9b8      	cbnz	r0, 800f818 <_Balloc+0x68>
 800f7e8:	2101      	movs	r1, #1
 800f7ea:	fa01 f605 	lsl.w	r6, r1, r5
 800f7ee:	1d72      	adds	r2, r6, #5
 800f7f0:	0092      	lsls	r2, r2, #2
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	f000 fb60 	bl	800feb8 <_calloc_r>
 800f7f8:	b160      	cbz	r0, 800f814 <_Balloc+0x64>
 800f7fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f7fe:	e00e      	b.n	800f81e <_Balloc+0x6e>
 800f800:	2221      	movs	r2, #33	; 0x21
 800f802:	2104      	movs	r1, #4
 800f804:	4620      	mov	r0, r4
 800f806:	f000 fb57 	bl	800feb8 <_calloc_r>
 800f80a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f80c:	60f0      	str	r0, [r6, #12]
 800f80e:	68db      	ldr	r3, [r3, #12]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d1e4      	bne.n	800f7de <_Balloc+0x2e>
 800f814:	2000      	movs	r0, #0
 800f816:	bd70      	pop	{r4, r5, r6, pc}
 800f818:	6802      	ldr	r2, [r0, #0]
 800f81a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f81e:	2300      	movs	r3, #0
 800f820:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f824:	e7f7      	b.n	800f816 <_Balloc+0x66>
 800f826:	bf00      	nop
 800f828:	08011fb5 	.word	0x08011fb5
 800f82c:	08012038 	.word	0x08012038

0800f830 <_Bfree>:
 800f830:	b570      	push	{r4, r5, r6, lr}
 800f832:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f834:	4605      	mov	r5, r0
 800f836:	460c      	mov	r4, r1
 800f838:	b976      	cbnz	r6, 800f858 <_Bfree+0x28>
 800f83a:	2010      	movs	r0, #16
 800f83c:	f7ff ffa4 	bl	800f788 <malloc>
 800f840:	4602      	mov	r2, r0
 800f842:	6268      	str	r0, [r5, #36]	; 0x24
 800f844:	b920      	cbnz	r0, 800f850 <_Bfree+0x20>
 800f846:	4b09      	ldr	r3, [pc, #36]	; (800f86c <_Bfree+0x3c>)
 800f848:	4809      	ldr	r0, [pc, #36]	; (800f870 <_Bfree+0x40>)
 800f84a:	218a      	movs	r1, #138	; 0x8a
 800f84c:	f000 fd02 	bl	8010254 <__assert_func>
 800f850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f854:	6006      	str	r6, [r0, #0]
 800f856:	60c6      	str	r6, [r0, #12]
 800f858:	b13c      	cbz	r4, 800f86a <_Bfree+0x3a>
 800f85a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f85c:	6862      	ldr	r2, [r4, #4]
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f864:	6021      	str	r1, [r4, #0]
 800f866:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f86a:	bd70      	pop	{r4, r5, r6, pc}
 800f86c:	08011fb5 	.word	0x08011fb5
 800f870:	08012038 	.word	0x08012038

0800f874 <__multadd>:
 800f874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f878:	690d      	ldr	r5, [r1, #16]
 800f87a:	4607      	mov	r7, r0
 800f87c:	460c      	mov	r4, r1
 800f87e:	461e      	mov	r6, r3
 800f880:	f101 0c14 	add.w	ip, r1, #20
 800f884:	2000      	movs	r0, #0
 800f886:	f8dc 3000 	ldr.w	r3, [ip]
 800f88a:	b299      	uxth	r1, r3
 800f88c:	fb02 6101 	mla	r1, r2, r1, r6
 800f890:	0c1e      	lsrs	r6, r3, #16
 800f892:	0c0b      	lsrs	r3, r1, #16
 800f894:	fb02 3306 	mla	r3, r2, r6, r3
 800f898:	b289      	uxth	r1, r1
 800f89a:	3001      	adds	r0, #1
 800f89c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f8a0:	4285      	cmp	r5, r0
 800f8a2:	f84c 1b04 	str.w	r1, [ip], #4
 800f8a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f8aa:	dcec      	bgt.n	800f886 <__multadd+0x12>
 800f8ac:	b30e      	cbz	r6, 800f8f2 <__multadd+0x7e>
 800f8ae:	68a3      	ldr	r3, [r4, #8]
 800f8b0:	42ab      	cmp	r3, r5
 800f8b2:	dc19      	bgt.n	800f8e8 <__multadd+0x74>
 800f8b4:	6861      	ldr	r1, [r4, #4]
 800f8b6:	4638      	mov	r0, r7
 800f8b8:	3101      	adds	r1, #1
 800f8ba:	f7ff ff79 	bl	800f7b0 <_Balloc>
 800f8be:	4680      	mov	r8, r0
 800f8c0:	b928      	cbnz	r0, 800f8ce <__multadd+0x5a>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	4b0c      	ldr	r3, [pc, #48]	; (800f8f8 <__multadd+0x84>)
 800f8c6:	480d      	ldr	r0, [pc, #52]	; (800f8fc <__multadd+0x88>)
 800f8c8:	21b5      	movs	r1, #181	; 0xb5
 800f8ca:	f000 fcc3 	bl	8010254 <__assert_func>
 800f8ce:	6922      	ldr	r2, [r4, #16]
 800f8d0:	3202      	adds	r2, #2
 800f8d2:	f104 010c 	add.w	r1, r4, #12
 800f8d6:	0092      	lsls	r2, r2, #2
 800f8d8:	300c      	adds	r0, #12
 800f8da:	f7fe f85a 	bl	800d992 <memcpy>
 800f8de:	4621      	mov	r1, r4
 800f8e0:	4638      	mov	r0, r7
 800f8e2:	f7ff ffa5 	bl	800f830 <_Bfree>
 800f8e6:	4644      	mov	r4, r8
 800f8e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f8ec:	3501      	adds	r5, #1
 800f8ee:	615e      	str	r6, [r3, #20]
 800f8f0:	6125      	str	r5, [r4, #16]
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8f8:	08012027 	.word	0x08012027
 800f8fc:	08012038 	.word	0x08012038

0800f900 <__hi0bits>:
 800f900:	0c03      	lsrs	r3, r0, #16
 800f902:	041b      	lsls	r3, r3, #16
 800f904:	b9d3      	cbnz	r3, 800f93c <__hi0bits+0x3c>
 800f906:	0400      	lsls	r0, r0, #16
 800f908:	2310      	movs	r3, #16
 800f90a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f90e:	bf04      	itt	eq
 800f910:	0200      	lsleq	r0, r0, #8
 800f912:	3308      	addeq	r3, #8
 800f914:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f918:	bf04      	itt	eq
 800f91a:	0100      	lsleq	r0, r0, #4
 800f91c:	3304      	addeq	r3, #4
 800f91e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f922:	bf04      	itt	eq
 800f924:	0080      	lsleq	r0, r0, #2
 800f926:	3302      	addeq	r3, #2
 800f928:	2800      	cmp	r0, #0
 800f92a:	db05      	blt.n	800f938 <__hi0bits+0x38>
 800f92c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f930:	f103 0301 	add.w	r3, r3, #1
 800f934:	bf08      	it	eq
 800f936:	2320      	moveq	r3, #32
 800f938:	4618      	mov	r0, r3
 800f93a:	4770      	bx	lr
 800f93c:	2300      	movs	r3, #0
 800f93e:	e7e4      	b.n	800f90a <__hi0bits+0xa>

0800f940 <__lo0bits>:
 800f940:	6803      	ldr	r3, [r0, #0]
 800f942:	f013 0207 	ands.w	r2, r3, #7
 800f946:	4601      	mov	r1, r0
 800f948:	d00b      	beq.n	800f962 <__lo0bits+0x22>
 800f94a:	07da      	lsls	r2, r3, #31
 800f94c:	d423      	bmi.n	800f996 <__lo0bits+0x56>
 800f94e:	0798      	lsls	r0, r3, #30
 800f950:	bf49      	itett	mi
 800f952:	085b      	lsrmi	r3, r3, #1
 800f954:	089b      	lsrpl	r3, r3, #2
 800f956:	2001      	movmi	r0, #1
 800f958:	600b      	strmi	r3, [r1, #0]
 800f95a:	bf5c      	itt	pl
 800f95c:	600b      	strpl	r3, [r1, #0]
 800f95e:	2002      	movpl	r0, #2
 800f960:	4770      	bx	lr
 800f962:	b298      	uxth	r0, r3
 800f964:	b9a8      	cbnz	r0, 800f992 <__lo0bits+0x52>
 800f966:	0c1b      	lsrs	r3, r3, #16
 800f968:	2010      	movs	r0, #16
 800f96a:	b2da      	uxtb	r2, r3
 800f96c:	b90a      	cbnz	r2, 800f972 <__lo0bits+0x32>
 800f96e:	3008      	adds	r0, #8
 800f970:	0a1b      	lsrs	r3, r3, #8
 800f972:	071a      	lsls	r2, r3, #28
 800f974:	bf04      	itt	eq
 800f976:	091b      	lsreq	r3, r3, #4
 800f978:	3004      	addeq	r0, #4
 800f97a:	079a      	lsls	r2, r3, #30
 800f97c:	bf04      	itt	eq
 800f97e:	089b      	lsreq	r3, r3, #2
 800f980:	3002      	addeq	r0, #2
 800f982:	07da      	lsls	r2, r3, #31
 800f984:	d403      	bmi.n	800f98e <__lo0bits+0x4e>
 800f986:	085b      	lsrs	r3, r3, #1
 800f988:	f100 0001 	add.w	r0, r0, #1
 800f98c:	d005      	beq.n	800f99a <__lo0bits+0x5a>
 800f98e:	600b      	str	r3, [r1, #0]
 800f990:	4770      	bx	lr
 800f992:	4610      	mov	r0, r2
 800f994:	e7e9      	b.n	800f96a <__lo0bits+0x2a>
 800f996:	2000      	movs	r0, #0
 800f998:	4770      	bx	lr
 800f99a:	2020      	movs	r0, #32
 800f99c:	4770      	bx	lr
	...

0800f9a0 <__i2b>:
 800f9a0:	b510      	push	{r4, lr}
 800f9a2:	460c      	mov	r4, r1
 800f9a4:	2101      	movs	r1, #1
 800f9a6:	f7ff ff03 	bl	800f7b0 <_Balloc>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	b928      	cbnz	r0, 800f9ba <__i2b+0x1a>
 800f9ae:	4b05      	ldr	r3, [pc, #20]	; (800f9c4 <__i2b+0x24>)
 800f9b0:	4805      	ldr	r0, [pc, #20]	; (800f9c8 <__i2b+0x28>)
 800f9b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f9b6:	f000 fc4d 	bl	8010254 <__assert_func>
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	6144      	str	r4, [r0, #20]
 800f9be:	6103      	str	r3, [r0, #16]
 800f9c0:	bd10      	pop	{r4, pc}
 800f9c2:	bf00      	nop
 800f9c4:	08012027 	.word	0x08012027
 800f9c8:	08012038 	.word	0x08012038

0800f9cc <__multiply>:
 800f9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d0:	4691      	mov	r9, r2
 800f9d2:	690a      	ldr	r2, [r1, #16]
 800f9d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	bfb8      	it	lt
 800f9dc:	460b      	movlt	r3, r1
 800f9de:	460c      	mov	r4, r1
 800f9e0:	bfbc      	itt	lt
 800f9e2:	464c      	movlt	r4, r9
 800f9e4:	4699      	movlt	r9, r3
 800f9e6:	6927      	ldr	r7, [r4, #16]
 800f9e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f9ec:	68a3      	ldr	r3, [r4, #8]
 800f9ee:	6861      	ldr	r1, [r4, #4]
 800f9f0:	eb07 060a 	add.w	r6, r7, sl
 800f9f4:	42b3      	cmp	r3, r6
 800f9f6:	b085      	sub	sp, #20
 800f9f8:	bfb8      	it	lt
 800f9fa:	3101      	addlt	r1, #1
 800f9fc:	f7ff fed8 	bl	800f7b0 <_Balloc>
 800fa00:	b930      	cbnz	r0, 800fa10 <__multiply+0x44>
 800fa02:	4602      	mov	r2, r0
 800fa04:	4b44      	ldr	r3, [pc, #272]	; (800fb18 <__multiply+0x14c>)
 800fa06:	4845      	ldr	r0, [pc, #276]	; (800fb1c <__multiply+0x150>)
 800fa08:	f240 115d 	movw	r1, #349	; 0x15d
 800fa0c:	f000 fc22 	bl	8010254 <__assert_func>
 800fa10:	f100 0514 	add.w	r5, r0, #20
 800fa14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fa18:	462b      	mov	r3, r5
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	4543      	cmp	r3, r8
 800fa1e:	d321      	bcc.n	800fa64 <__multiply+0x98>
 800fa20:	f104 0314 	add.w	r3, r4, #20
 800fa24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fa28:	f109 0314 	add.w	r3, r9, #20
 800fa2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fa30:	9202      	str	r2, [sp, #8]
 800fa32:	1b3a      	subs	r2, r7, r4
 800fa34:	3a15      	subs	r2, #21
 800fa36:	f022 0203 	bic.w	r2, r2, #3
 800fa3a:	3204      	adds	r2, #4
 800fa3c:	f104 0115 	add.w	r1, r4, #21
 800fa40:	428f      	cmp	r7, r1
 800fa42:	bf38      	it	cc
 800fa44:	2204      	movcc	r2, #4
 800fa46:	9201      	str	r2, [sp, #4]
 800fa48:	9a02      	ldr	r2, [sp, #8]
 800fa4a:	9303      	str	r3, [sp, #12]
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	d80c      	bhi.n	800fa6a <__multiply+0x9e>
 800fa50:	2e00      	cmp	r6, #0
 800fa52:	dd03      	ble.n	800fa5c <__multiply+0x90>
 800fa54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d05a      	beq.n	800fb12 <__multiply+0x146>
 800fa5c:	6106      	str	r6, [r0, #16]
 800fa5e:	b005      	add	sp, #20
 800fa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa64:	f843 2b04 	str.w	r2, [r3], #4
 800fa68:	e7d8      	b.n	800fa1c <__multiply+0x50>
 800fa6a:	f8b3 a000 	ldrh.w	sl, [r3]
 800fa6e:	f1ba 0f00 	cmp.w	sl, #0
 800fa72:	d024      	beq.n	800fabe <__multiply+0xf2>
 800fa74:	f104 0e14 	add.w	lr, r4, #20
 800fa78:	46a9      	mov	r9, r5
 800fa7a:	f04f 0c00 	mov.w	ip, #0
 800fa7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fa82:	f8d9 1000 	ldr.w	r1, [r9]
 800fa86:	fa1f fb82 	uxth.w	fp, r2
 800fa8a:	b289      	uxth	r1, r1
 800fa8c:	fb0a 110b 	mla	r1, sl, fp, r1
 800fa90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fa94:	f8d9 2000 	ldr.w	r2, [r9]
 800fa98:	4461      	add	r1, ip
 800fa9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fa9e:	fb0a c20b 	mla	r2, sl, fp, ip
 800faa2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800faa6:	b289      	uxth	r1, r1
 800faa8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800faac:	4577      	cmp	r7, lr
 800faae:	f849 1b04 	str.w	r1, [r9], #4
 800fab2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fab6:	d8e2      	bhi.n	800fa7e <__multiply+0xb2>
 800fab8:	9a01      	ldr	r2, [sp, #4]
 800faba:	f845 c002 	str.w	ip, [r5, r2]
 800fabe:	9a03      	ldr	r2, [sp, #12]
 800fac0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fac4:	3304      	adds	r3, #4
 800fac6:	f1b9 0f00 	cmp.w	r9, #0
 800faca:	d020      	beq.n	800fb0e <__multiply+0x142>
 800facc:	6829      	ldr	r1, [r5, #0]
 800face:	f104 0c14 	add.w	ip, r4, #20
 800fad2:	46ae      	mov	lr, r5
 800fad4:	f04f 0a00 	mov.w	sl, #0
 800fad8:	f8bc b000 	ldrh.w	fp, [ip]
 800fadc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fae0:	fb09 220b 	mla	r2, r9, fp, r2
 800fae4:	4492      	add	sl, r2
 800fae6:	b289      	uxth	r1, r1
 800fae8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800faec:	f84e 1b04 	str.w	r1, [lr], #4
 800faf0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800faf4:	f8be 1000 	ldrh.w	r1, [lr]
 800faf8:	0c12      	lsrs	r2, r2, #16
 800fafa:	fb09 1102 	mla	r1, r9, r2, r1
 800fafe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fb02:	4567      	cmp	r7, ip
 800fb04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb08:	d8e6      	bhi.n	800fad8 <__multiply+0x10c>
 800fb0a:	9a01      	ldr	r2, [sp, #4]
 800fb0c:	50a9      	str	r1, [r5, r2]
 800fb0e:	3504      	adds	r5, #4
 800fb10:	e79a      	b.n	800fa48 <__multiply+0x7c>
 800fb12:	3e01      	subs	r6, #1
 800fb14:	e79c      	b.n	800fa50 <__multiply+0x84>
 800fb16:	bf00      	nop
 800fb18:	08012027 	.word	0x08012027
 800fb1c:	08012038 	.word	0x08012038

0800fb20 <__pow5mult>:
 800fb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb24:	4615      	mov	r5, r2
 800fb26:	f012 0203 	ands.w	r2, r2, #3
 800fb2a:	4606      	mov	r6, r0
 800fb2c:	460f      	mov	r7, r1
 800fb2e:	d007      	beq.n	800fb40 <__pow5mult+0x20>
 800fb30:	4c25      	ldr	r4, [pc, #148]	; (800fbc8 <__pow5mult+0xa8>)
 800fb32:	3a01      	subs	r2, #1
 800fb34:	2300      	movs	r3, #0
 800fb36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb3a:	f7ff fe9b 	bl	800f874 <__multadd>
 800fb3e:	4607      	mov	r7, r0
 800fb40:	10ad      	asrs	r5, r5, #2
 800fb42:	d03d      	beq.n	800fbc0 <__pow5mult+0xa0>
 800fb44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fb46:	b97c      	cbnz	r4, 800fb68 <__pow5mult+0x48>
 800fb48:	2010      	movs	r0, #16
 800fb4a:	f7ff fe1d 	bl	800f788 <malloc>
 800fb4e:	4602      	mov	r2, r0
 800fb50:	6270      	str	r0, [r6, #36]	; 0x24
 800fb52:	b928      	cbnz	r0, 800fb60 <__pow5mult+0x40>
 800fb54:	4b1d      	ldr	r3, [pc, #116]	; (800fbcc <__pow5mult+0xac>)
 800fb56:	481e      	ldr	r0, [pc, #120]	; (800fbd0 <__pow5mult+0xb0>)
 800fb58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fb5c:	f000 fb7a 	bl	8010254 <__assert_func>
 800fb60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb64:	6004      	str	r4, [r0, #0]
 800fb66:	60c4      	str	r4, [r0, #12]
 800fb68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fb6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb70:	b94c      	cbnz	r4, 800fb86 <__pow5mult+0x66>
 800fb72:	f240 2171 	movw	r1, #625	; 0x271
 800fb76:	4630      	mov	r0, r6
 800fb78:	f7ff ff12 	bl	800f9a0 <__i2b>
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fb82:	4604      	mov	r4, r0
 800fb84:	6003      	str	r3, [r0, #0]
 800fb86:	f04f 0900 	mov.w	r9, #0
 800fb8a:	07eb      	lsls	r3, r5, #31
 800fb8c:	d50a      	bpl.n	800fba4 <__pow5mult+0x84>
 800fb8e:	4639      	mov	r1, r7
 800fb90:	4622      	mov	r2, r4
 800fb92:	4630      	mov	r0, r6
 800fb94:	f7ff ff1a 	bl	800f9cc <__multiply>
 800fb98:	4639      	mov	r1, r7
 800fb9a:	4680      	mov	r8, r0
 800fb9c:	4630      	mov	r0, r6
 800fb9e:	f7ff fe47 	bl	800f830 <_Bfree>
 800fba2:	4647      	mov	r7, r8
 800fba4:	106d      	asrs	r5, r5, #1
 800fba6:	d00b      	beq.n	800fbc0 <__pow5mult+0xa0>
 800fba8:	6820      	ldr	r0, [r4, #0]
 800fbaa:	b938      	cbnz	r0, 800fbbc <__pow5mult+0x9c>
 800fbac:	4622      	mov	r2, r4
 800fbae:	4621      	mov	r1, r4
 800fbb0:	4630      	mov	r0, r6
 800fbb2:	f7ff ff0b 	bl	800f9cc <__multiply>
 800fbb6:	6020      	str	r0, [r4, #0]
 800fbb8:	f8c0 9000 	str.w	r9, [r0]
 800fbbc:	4604      	mov	r4, r0
 800fbbe:	e7e4      	b.n	800fb8a <__pow5mult+0x6a>
 800fbc0:	4638      	mov	r0, r7
 800fbc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbc6:	bf00      	nop
 800fbc8:	08012188 	.word	0x08012188
 800fbcc:	08011fb5 	.word	0x08011fb5
 800fbd0:	08012038 	.word	0x08012038

0800fbd4 <__lshift>:
 800fbd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbd8:	460c      	mov	r4, r1
 800fbda:	6849      	ldr	r1, [r1, #4]
 800fbdc:	6923      	ldr	r3, [r4, #16]
 800fbde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fbe2:	68a3      	ldr	r3, [r4, #8]
 800fbe4:	4607      	mov	r7, r0
 800fbe6:	4691      	mov	r9, r2
 800fbe8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fbec:	f108 0601 	add.w	r6, r8, #1
 800fbf0:	42b3      	cmp	r3, r6
 800fbf2:	db0b      	blt.n	800fc0c <__lshift+0x38>
 800fbf4:	4638      	mov	r0, r7
 800fbf6:	f7ff fddb 	bl	800f7b0 <_Balloc>
 800fbfa:	4605      	mov	r5, r0
 800fbfc:	b948      	cbnz	r0, 800fc12 <__lshift+0x3e>
 800fbfe:	4602      	mov	r2, r0
 800fc00:	4b2a      	ldr	r3, [pc, #168]	; (800fcac <__lshift+0xd8>)
 800fc02:	482b      	ldr	r0, [pc, #172]	; (800fcb0 <__lshift+0xdc>)
 800fc04:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fc08:	f000 fb24 	bl	8010254 <__assert_func>
 800fc0c:	3101      	adds	r1, #1
 800fc0e:	005b      	lsls	r3, r3, #1
 800fc10:	e7ee      	b.n	800fbf0 <__lshift+0x1c>
 800fc12:	2300      	movs	r3, #0
 800fc14:	f100 0114 	add.w	r1, r0, #20
 800fc18:	f100 0210 	add.w	r2, r0, #16
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	4553      	cmp	r3, sl
 800fc20:	db37      	blt.n	800fc92 <__lshift+0xbe>
 800fc22:	6920      	ldr	r0, [r4, #16]
 800fc24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc28:	f104 0314 	add.w	r3, r4, #20
 800fc2c:	f019 091f 	ands.w	r9, r9, #31
 800fc30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fc38:	d02f      	beq.n	800fc9a <__lshift+0xc6>
 800fc3a:	f1c9 0e20 	rsb	lr, r9, #32
 800fc3e:	468a      	mov	sl, r1
 800fc40:	f04f 0c00 	mov.w	ip, #0
 800fc44:	681a      	ldr	r2, [r3, #0]
 800fc46:	fa02 f209 	lsl.w	r2, r2, r9
 800fc4a:	ea42 020c 	orr.w	r2, r2, ip
 800fc4e:	f84a 2b04 	str.w	r2, [sl], #4
 800fc52:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc56:	4298      	cmp	r0, r3
 800fc58:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fc5c:	d8f2      	bhi.n	800fc44 <__lshift+0x70>
 800fc5e:	1b03      	subs	r3, r0, r4
 800fc60:	3b15      	subs	r3, #21
 800fc62:	f023 0303 	bic.w	r3, r3, #3
 800fc66:	3304      	adds	r3, #4
 800fc68:	f104 0215 	add.w	r2, r4, #21
 800fc6c:	4290      	cmp	r0, r2
 800fc6e:	bf38      	it	cc
 800fc70:	2304      	movcc	r3, #4
 800fc72:	f841 c003 	str.w	ip, [r1, r3]
 800fc76:	f1bc 0f00 	cmp.w	ip, #0
 800fc7a:	d001      	beq.n	800fc80 <__lshift+0xac>
 800fc7c:	f108 0602 	add.w	r6, r8, #2
 800fc80:	3e01      	subs	r6, #1
 800fc82:	4638      	mov	r0, r7
 800fc84:	612e      	str	r6, [r5, #16]
 800fc86:	4621      	mov	r1, r4
 800fc88:	f7ff fdd2 	bl	800f830 <_Bfree>
 800fc8c:	4628      	mov	r0, r5
 800fc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc92:	f842 0f04 	str.w	r0, [r2, #4]!
 800fc96:	3301      	adds	r3, #1
 800fc98:	e7c1      	b.n	800fc1e <__lshift+0x4a>
 800fc9a:	3904      	subs	r1, #4
 800fc9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fca0:	f841 2f04 	str.w	r2, [r1, #4]!
 800fca4:	4298      	cmp	r0, r3
 800fca6:	d8f9      	bhi.n	800fc9c <__lshift+0xc8>
 800fca8:	e7ea      	b.n	800fc80 <__lshift+0xac>
 800fcaa:	bf00      	nop
 800fcac:	08012027 	.word	0x08012027
 800fcb0:	08012038 	.word	0x08012038

0800fcb4 <__mcmp>:
 800fcb4:	b530      	push	{r4, r5, lr}
 800fcb6:	6902      	ldr	r2, [r0, #16]
 800fcb8:	690c      	ldr	r4, [r1, #16]
 800fcba:	1b12      	subs	r2, r2, r4
 800fcbc:	d10e      	bne.n	800fcdc <__mcmp+0x28>
 800fcbe:	f100 0314 	add.w	r3, r0, #20
 800fcc2:	3114      	adds	r1, #20
 800fcc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fcc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fccc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fcd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fcd4:	42a5      	cmp	r5, r4
 800fcd6:	d003      	beq.n	800fce0 <__mcmp+0x2c>
 800fcd8:	d305      	bcc.n	800fce6 <__mcmp+0x32>
 800fcda:	2201      	movs	r2, #1
 800fcdc:	4610      	mov	r0, r2
 800fcde:	bd30      	pop	{r4, r5, pc}
 800fce0:	4283      	cmp	r3, r0
 800fce2:	d3f3      	bcc.n	800fccc <__mcmp+0x18>
 800fce4:	e7fa      	b.n	800fcdc <__mcmp+0x28>
 800fce6:	f04f 32ff 	mov.w	r2, #4294967295
 800fcea:	e7f7      	b.n	800fcdc <__mcmp+0x28>

0800fcec <__mdiff>:
 800fcec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf0:	460c      	mov	r4, r1
 800fcf2:	4606      	mov	r6, r0
 800fcf4:	4611      	mov	r1, r2
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	4690      	mov	r8, r2
 800fcfa:	f7ff ffdb 	bl	800fcb4 <__mcmp>
 800fcfe:	1e05      	subs	r5, r0, #0
 800fd00:	d110      	bne.n	800fd24 <__mdiff+0x38>
 800fd02:	4629      	mov	r1, r5
 800fd04:	4630      	mov	r0, r6
 800fd06:	f7ff fd53 	bl	800f7b0 <_Balloc>
 800fd0a:	b930      	cbnz	r0, 800fd1a <__mdiff+0x2e>
 800fd0c:	4b3a      	ldr	r3, [pc, #232]	; (800fdf8 <__mdiff+0x10c>)
 800fd0e:	4602      	mov	r2, r0
 800fd10:	f240 2132 	movw	r1, #562	; 0x232
 800fd14:	4839      	ldr	r0, [pc, #228]	; (800fdfc <__mdiff+0x110>)
 800fd16:	f000 fa9d 	bl	8010254 <__assert_func>
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd24:	bfa4      	itt	ge
 800fd26:	4643      	movge	r3, r8
 800fd28:	46a0      	movge	r8, r4
 800fd2a:	4630      	mov	r0, r6
 800fd2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fd30:	bfa6      	itte	ge
 800fd32:	461c      	movge	r4, r3
 800fd34:	2500      	movge	r5, #0
 800fd36:	2501      	movlt	r5, #1
 800fd38:	f7ff fd3a 	bl	800f7b0 <_Balloc>
 800fd3c:	b920      	cbnz	r0, 800fd48 <__mdiff+0x5c>
 800fd3e:	4b2e      	ldr	r3, [pc, #184]	; (800fdf8 <__mdiff+0x10c>)
 800fd40:	4602      	mov	r2, r0
 800fd42:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fd46:	e7e5      	b.n	800fd14 <__mdiff+0x28>
 800fd48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fd4c:	6926      	ldr	r6, [r4, #16]
 800fd4e:	60c5      	str	r5, [r0, #12]
 800fd50:	f104 0914 	add.w	r9, r4, #20
 800fd54:	f108 0514 	add.w	r5, r8, #20
 800fd58:	f100 0e14 	add.w	lr, r0, #20
 800fd5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fd60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fd64:	f108 0210 	add.w	r2, r8, #16
 800fd68:	46f2      	mov	sl, lr
 800fd6a:	2100      	movs	r1, #0
 800fd6c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fd70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fd74:	fa1f f883 	uxth.w	r8, r3
 800fd78:	fa11 f18b 	uxtah	r1, r1, fp
 800fd7c:	0c1b      	lsrs	r3, r3, #16
 800fd7e:	eba1 0808 	sub.w	r8, r1, r8
 800fd82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fd86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fd8a:	fa1f f888 	uxth.w	r8, r8
 800fd8e:	1419      	asrs	r1, r3, #16
 800fd90:	454e      	cmp	r6, r9
 800fd92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fd96:	f84a 3b04 	str.w	r3, [sl], #4
 800fd9a:	d8e7      	bhi.n	800fd6c <__mdiff+0x80>
 800fd9c:	1b33      	subs	r3, r6, r4
 800fd9e:	3b15      	subs	r3, #21
 800fda0:	f023 0303 	bic.w	r3, r3, #3
 800fda4:	3304      	adds	r3, #4
 800fda6:	3415      	adds	r4, #21
 800fda8:	42a6      	cmp	r6, r4
 800fdaa:	bf38      	it	cc
 800fdac:	2304      	movcc	r3, #4
 800fdae:	441d      	add	r5, r3
 800fdb0:	4473      	add	r3, lr
 800fdb2:	469e      	mov	lr, r3
 800fdb4:	462e      	mov	r6, r5
 800fdb6:	4566      	cmp	r6, ip
 800fdb8:	d30e      	bcc.n	800fdd8 <__mdiff+0xec>
 800fdba:	f10c 0203 	add.w	r2, ip, #3
 800fdbe:	1b52      	subs	r2, r2, r5
 800fdc0:	f022 0203 	bic.w	r2, r2, #3
 800fdc4:	3d03      	subs	r5, #3
 800fdc6:	45ac      	cmp	ip, r5
 800fdc8:	bf38      	it	cc
 800fdca:	2200      	movcc	r2, #0
 800fdcc:	441a      	add	r2, r3
 800fdce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fdd2:	b17b      	cbz	r3, 800fdf4 <__mdiff+0x108>
 800fdd4:	6107      	str	r7, [r0, #16]
 800fdd6:	e7a3      	b.n	800fd20 <__mdiff+0x34>
 800fdd8:	f856 8b04 	ldr.w	r8, [r6], #4
 800fddc:	fa11 f288 	uxtah	r2, r1, r8
 800fde0:	1414      	asrs	r4, r2, #16
 800fde2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fde6:	b292      	uxth	r2, r2
 800fde8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fdec:	f84e 2b04 	str.w	r2, [lr], #4
 800fdf0:	1421      	asrs	r1, r4, #16
 800fdf2:	e7e0      	b.n	800fdb6 <__mdiff+0xca>
 800fdf4:	3f01      	subs	r7, #1
 800fdf6:	e7ea      	b.n	800fdce <__mdiff+0xe2>
 800fdf8:	08012027 	.word	0x08012027
 800fdfc:	08012038 	.word	0x08012038

0800fe00 <__d2b>:
 800fe00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe04:	4689      	mov	r9, r1
 800fe06:	2101      	movs	r1, #1
 800fe08:	ec57 6b10 	vmov	r6, r7, d0
 800fe0c:	4690      	mov	r8, r2
 800fe0e:	f7ff fccf 	bl	800f7b0 <_Balloc>
 800fe12:	4604      	mov	r4, r0
 800fe14:	b930      	cbnz	r0, 800fe24 <__d2b+0x24>
 800fe16:	4602      	mov	r2, r0
 800fe18:	4b25      	ldr	r3, [pc, #148]	; (800feb0 <__d2b+0xb0>)
 800fe1a:	4826      	ldr	r0, [pc, #152]	; (800feb4 <__d2b+0xb4>)
 800fe1c:	f240 310a 	movw	r1, #778	; 0x30a
 800fe20:	f000 fa18 	bl	8010254 <__assert_func>
 800fe24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fe28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fe2c:	bb35      	cbnz	r5, 800fe7c <__d2b+0x7c>
 800fe2e:	2e00      	cmp	r6, #0
 800fe30:	9301      	str	r3, [sp, #4]
 800fe32:	d028      	beq.n	800fe86 <__d2b+0x86>
 800fe34:	4668      	mov	r0, sp
 800fe36:	9600      	str	r6, [sp, #0]
 800fe38:	f7ff fd82 	bl	800f940 <__lo0bits>
 800fe3c:	9900      	ldr	r1, [sp, #0]
 800fe3e:	b300      	cbz	r0, 800fe82 <__d2b+0x82>
 800fe40:	9a01      	ldr	r2, [sp, #4]
 800fe42:	f1c0 0320 	rsb	r3, r0, #32
 800fe46:	fa02 f303 	lsl.w	r3, r2, r3
 800fe4a:	430b      	orrs	r3, r1
 800fe4c:	40c2      	lsrs	r2, r0
 800fe4e:	6163      	str	r3, [r4, #20]
 800fe50:	9201      	str	r2, [sp, #4]
 800fe52:	9b01      	ldr	r3, [sp, #4]
 800fe54:	61a3      	str	r3, [r4, #24]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	bf14      	ite	ne
 800fe5a:	2202      	movne	r2, #2
 800fe5c:	2201      	moveq	r2, #1
 800fe5e:	6122      	str	r2, [r4, #16]
 800fe60:	b1d5      	cbz	r5, 800fe98 <__d2b+0x98>
 800fe62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fe66:	4405      	add	r5, r0
 800fe68:	f8c9 5000 	str.w	r5, [r9]
 800fe6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fe70:	f8c8 0000 	str.w	r0, [r8]
 800fe74:	4620      	mov	r0, r4
 800fe76:	b003      	add	sp, #12
 800fe78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe80:	e7d5      	b.n	800fe2e <__d2b+0x2e>
 800fe82:	6161      	str	r1, [r4, #20]
 800fe84:	e7e5      	b.n	800fe52 <__d2b+0x52>
 800fe86:	a801      	add	r0, sp, #4
 800fe88:	f7ff fd5a 	bl	800f940 <__lo0bits>
 800fe8c:	9b01      	ldr	r3, [sp, #4]
 800fe8e:	6163      	str	r3, [r4, #20]
 800fe90:	2201      	movs	r2, #1
 800fe92:	6122      	str	r2, [r4, #16]
 800fe94:	3020      	adds	r0, #32
 800fe96:	e7e3      	b.n	800fe60 <__d2b+0x60>
 800fe98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fea0:	f8c9 0000 	str.w	r0, [r9]
 800fea4:	6918      	ldr	r0, [r3, #16]
 800fea6:	f7ff fd2b 	bl	800f900 <__hi0bits>
 800feaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800feae:	e7df      	b.n	800fe70 <__d2b+0x70>
 800feb0:	08012027 	.word	0x08012027
 800feb4:	08012038 	.word	0x08012038

0800feb8 <_calloc_r>:
 800feb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800feba:	fba1 2402 	umull	r2, r4, r1, r2
 800febe:	b94c      	cbnz	r4, 800fed4 <_calloc_r+0x1c>
 800fec0:	4611      	mov	r1, r2
 800fec2:	9201      	str	r2, [sp, #4]
 800fec4:	f7fd fd9c 	bl	800da00 <_malloc_r>
 800fec8:	9a01      	ldr	r2, [sp, #4]
 800feca:	4605      	mov	r5, r0
 800fecc:	b930      	cbnz	r0, 800fedc <_calloc_r+0x24>
 800fece:	4628      	mov	r0, r5
 800fed0:	b003      	add	sp, #12
 800fed2:	bd30      	pop	{r4, r5, pc}
 800fed4:	220c      	movs	r2, #12
 800fed6:	6002      	str	r2, [r0, #0]
 800fed8:	2500      	movs	r5, #0
 800feda:	e7f8      	b.n	800fece <_calloc_r+0x16>
 800fedc:	4621      	mov	r1, r4
 800fede:	f7fd fd66 	bl	800d9ae <memset>
 800fee2:	e7f4      	b.n	800fece <_calloc_r+0x16>

0800fee4 <_free_r>:
 800fee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fee6:	2900      	cmp	r1, #0
 800fee8:	d044      	beq.n	800ff74 <_free_r+0x90>
 800feea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800feee:	9001      	str	r0, [sp, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	f1a1 0404 	sub.w	r4, r1, #4
 800fef6:	bfb8      	it	lt
 800fef8:	18e4      	addlt	r4, r4, r3
 800fefa:	f7ff fc4d 	bl	800f798 <__malloc_lock>
 800fefe:	4a1e      	ldr	r2, [pc, #120]	; (800ff78 <_free_r+0x94>)
 800ff00:	9801      	ldr	r0, [sp, #4]
 800ff02:	6813      	ldr	r3, [r2, #0]
 800ff04:	b933      	cbnz	r3, 800ff14 <_free_r+0x30>
 800ff06:	6063      	str	r3, [r4, #4]
 800ff08:	6014      	str	r4, [r2, #0]
 800ff0a:	b003      	add	sp, #12
 800ff0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff10:	f7ff bc48 	b.w	800f7a4 <__malloc_unlock>
 800ff14:	42a3      	cmp	r3, r4
 800ff16:	d908      	bls.n	800ff2a <_free_r+0x46>
 800ff18:	6825      	ldr	r5, [r4, #0]
 800ff1a:	1961      	adds	r1, r4, r5
 800ff1c:	428b      	cmp	r3, r1
 800ff1e:	bf01      	itttt	eq
 800ff20:	6819      	ldreq	r1, [r3, #0]
 800ff22:	685b      	ldreq	r3, [r3, #4]
 800ff24:	1949      	addeq	r1, r1, r5
 800ff26:	6021      	streq	r1, [r4, #0]
 800ff28:	e7ed      	b.n	800ff06 <_free_r+0x22>
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	685b      	ldr	r3, [r3, #4]
 800ff2e:	b10b      	cbz	r3, 800ff34 <_free_r+0x50>
 800ff30:	42a3      	cmp	r3, r4
 800ff32:	d9fa      	bls.n	800ff2a <_free_r+0x46>
 800ff34:	6811      	ldr	r1, [r2, #0]
 800ff36:	1855      	adds	r5, r2, r1
 800ff38:	42a5      	cmp	r5, r4
 800ff3a:	d10b      	bne.n	800ff54 <_free_r+0x70>
 800ff3c:	6824      	ldr	r4, [r4, #0]
 800ff3e:	4421      	add	r1, r4
 800ff40:	1854      	adds	r4, r2, r1
 800ff42:	42a3      	cmp	r3, r4
 800ff44:	6011      	str	r1, [r2, #0]
 800ff46:	d1e0      	bne.n	800ff0a <_free_r+0x26>
 800ff48:	681c      	ldr	r4, [r3, #0]
 800ff4a:	685b      	ldr	r3, [r3, #4]
 800ff4c:	6053      	str	r3, [r2, #4]
 800ff4e:	4421      	add	r1, r4
 800ff50:	6011      	str	r1, [r2, #0]
 800ff52:	e7da      	b.n	800ff0a <_free_r+0x26>
 800ff54:	d902      	bls.n	800ff5c <_free_r+0x78>
 800ff56:	230c      	movs	r3, #12
 800ff58:	6003      	str	r3, [r0, #0]
 800ff5a:	e7d6      	b.n	800ff0a <_free_r+0x26>
 800ff5c:	6825      	ldr	r5, [r4, #0]
 800ff5e:	1961      	adds	r1, r4, r5
 800ff60:	428b      	cmp	r3, r1
 800ff62:	bf04      	itt	eq
 800ff64:	6819      	ldreq	r1, [r3, #0]
 800ff66:	685b      	ldreq	r3, [r3, #4]
 800ff68:	6063      	str	r3, [r4, #4]
 800ff6a:	bf04      	itt	eq
 800ff6c:	1949      	addeq	r1, r1, r5
 800ff6e:	6021      	streq	r1, [r4, #0]
 800ff70:	6054      	str	r4, [r2, #4]
 800ff72:	e7ca      	b.n	800ff0a <_free_r+0x26>
 800ff74:	b003      	add	sp, #12
 800ff76:	bd30      	pop	{r4, r5, pc}
 800ff78:	200055b0 	.word	0x200055b0

0800ff7c <__sfputc_r>:
 800ff7c:	6893      	ldr	r3, [r2, #8]
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	b410      	push	{r4}
 800ff84:	6093      	str	r3, [r2, #8]
 800ff86:	da08      	bge.n	800ff9a <__sfputc_r+0x1e>
 800ff88:	6994      	ldr	r4, [r2, #24]
 800ff8a:	42a3      	cmp	r3, r4
 800ff8c:	db01      	blt.n	800ff92 <__sfputc_r+0x16>
 800ff8e:	290a      	cmp	r1, #10
 800ff90:	d103      	bne.n	800ff9a <__sfputc_r+0x1e>
 800ff92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff96:	f7fe bb5d 	b.w	800e654 <__swbuf_r>
 800ff9a:	6813      	ldr	r3, [r2, #0]
 800ff9c:	1c58      	adds	r0, r3, #1
 800ff9e:	6010      	str	r0, [r2, #0]
 800ffa0:	7019      	strb	r1, [r3, #0]
 800ffa2:	4608      	mov	r0, r1
 800ffa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffa8:	4770      	bx	lr

0800ffaa <__sfputs_r>:
 800ffaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffac:	4606      	mov	r6, r0
 800ffae:	460f      	mov	r7, r1
 800ffb0:	4614      	mov	r4, r2
 800ffb2:	18d5      	adds	r5, r2, r3
 800ffb4:	42ac      	cmp	r4, r5
 800ffb6:	d101      	bne.n	800ffbc <__sfputs_r+0x12>
 800ffb8:	2000      	movs	r0, #0
 800ffba:	e007      	b.n	800ffcc <__sfputs_r+0x22>
 800ffbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffc0:	463a      	mov	r2, r7
 800ffc2:	4630      	mov	r0, r6
 800ffc4:	f7ff ffda 	bl	800ff7c <__sfputc_r>
 800ffc8:	1c43      	adds	r3, r0, #1
 800ffca:	d1f3      	bne.n	800ffb4 <__sfputs_r+0xa>
 800ffcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ffd0 <_vfiprintf_r>:
 800ffd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffd4:	460d      	mov	r5, r1
 800ffd6:	b09d      	sub	sp, #116	; 0x74
 800ffd8:	4614      	mov	r4, r2
 800ffda:	4698      	mov	r8, r3
 800ffdc:	4606      	mov	r6, r0
 800ffde:	b118      	cbz	r0, 800ffe8 <_vfiprintf_r+0x18>
 800ffe0:	6983      	ldr	r3, [r0, #24]
 800ffe2:	b90b      	cbnz	r3, 800ffe8 <_vfiprintf_r+0x18>
 800ffe4:	f7fd fc10 	bl	800d808 <__sinit>
 800ffe8:	4b89      	ldr	r3, [pc, #548]	; (8010210 <_vfiprintf_r+0x240>)
 800ffea:	429d      	cmp	r5, r3
 800ffec:	d11b      	bne.n	8010026 <_vfiprintf_r+0x56>
 800ffee:	6875      	ldr	r5, [r6, #4]
 800fff0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fff2:	07d9      	lsls	r1, r3, #31
 800fff4:	d405      	bmi.n	8010002 <_vfiprintf_r+0x32>
 800fff6:	89ab      	ldrh	r3, [r5, #12]
 800fff8:	059a      	lsls	r2, r3, #22
 800fffa:	d402      	bmi.n	8010002 <_vfiprintf_r+0x32>
 800fffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fffe:	f7fd fcc6 	bl	800d98e <__retarget_lock_acquire_recursive>
 8010002:	89ab      	ldrh	r3, [r5, #12]
 8010004:	071b      	lsls	r3, r3, #28
 8010006:	d501      	bpl.n	801000c <_vfiprintf_r+0x3c>
 8010008:	692b      	ldr	r3, [r5, #16]
 801000a:	b9eb      	cbnz	r3, 8010048 <_vfiprintf_r+0x78>
 801000c:	4629      	mov	r1, r5
 801000e:	4630      	mov	r0, r6
 8010010:	f7fe fb84 	bl	800e71c <__swsetup_r>
 8010014:	b1c0      	cbz	r0, 8010048 <_vfiprintf_r+0x78>
 8010016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010018:	07dc      	lsls	r4, r3, #31
 801001a:	d50e      	bpl.n	801003a <_vfiprintf_r+0x6a>
 801001c:	f04f 30ff 	mov.w	r0, #4294967295
 8010020:	b01d      	add	sp, #116	; 0x74
 8010022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010026:	4b7b      	ldr	r3, [pc, #492]	; (8010214 <_vfiprintf_r+0x244>)
 8010028:	429d      	cmp	r5, r3
 801002a:	d101      	bne.n	8010030 <_vfiprintf_r+0x60>
 801002c:	68b5      	ldr	r5, [r6, #8]
 801002e:	e7df      	b.n	800fff0 <_vfiprintf_r+0x20>
 8010030:	4b79      	ldr	r3, [pc, #484]	; (8010218 <_vfiprintf_r+0x248>)
 8010032:	429d      	cmp	r5, r3
 8010034:	bf08      	it	eq
 8010036:	68f5      	ldreq	r5, [r6, #12]
 8010038:	e7da      	b.n	800fff0 <_vfiprintf_r+0x20>
 801003a:	89ab      	ldrh	r3, [r5, #12]
 801003c:	0598      	lsls	r0, r3, #22
 801003e:	d4ed      	bmi.n	801001c <_vfiprintf_r+0x4c>
 8010040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010042:	f7fd fca5 	bl	800d990 <__retarget_lock_release_recursive>
 8010046:	e7e9      	b.n	801001c <_vfiprintf_r+0x4c>
 8010048:	2300      	movs	r3, #0
 801004a:	9309      	str	r3, [sp, #36]	; 0x24
 801004c:	2320      	movs	r3, #32
 801004e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010052:	f8cd 800c 	str.w	r8, [sp, #12]
 8010056:	2330      	movs	r3, #48	; 0x30
 8010058:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801021c <_vfiprintf_r+0x24c>
 801005c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010060:	f04f 0901 	mov.w	r9, #1
 8010064:	4623      	mov	r3, r4
 8010066:	469a      	mov	sl, r3
 8010068:	f813 2b01 	ldrb.w	r2, [r3], #1
 801006c:	b10a      	cbz	r2, 8010072 <_vfiprintf_r+0xa2>
 801006e:	2a25      	cmp	r2, #37	; 0x25
 8010070:	d1f9      	bne.n	8010066 <_vfiprintf_r+0x96>
 8010072:	ebba 0b04 	subs.w	fp, sl, r4
 8010076:	d00b      	beq.n	8010090 <_vfiprintf_r+0xc0>
 8010078:	465b      	mov	r3, fp
 801007a:	4622      	mov	r2, r4
 801007c:	4629      	mov	r1, r5
 801007e:	4630      	mov	r0, r6
 8010080:	f7ff ff93 	bl	800ffaa <__sfputs_r>
 8010084:	3001      	adds	r0, #1
 8010086:	f000 80aa 	beq.w	80101de <_vfiprintf_r+0x20e>
 801008a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801008c:	445a      	add	r2, fp
 801008e:	9209      	str	r2, [sp, #36]	; 0x24
 8010090:	f89a 3000 	ldrb.w	r3, [sl]
 8010094:	2b00      	cmp	r3, #0
 8010096:	f000 80a2 	beq.w	80101de <_vfiprintf_r+0x20e>
 801009a:	2300      	movs	r3, #0
 801009c:	f04f 32ff 	mov.w	r2, #4294967295
 80100a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100a4:	f10a 0a01 	add.w	sl, sl, #1
 80100a8:	9304      	str	r3, [sp, #16]
 80100aa:	9307      	str	r3, [sp, #28]
 80100ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100b0:	931a      	str	r3, [sp, #104]	; 0x68
 80100b2:	4654      	mov	r4, sl
 80100b4:	2205      	movs	r2, #5
 80100b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100ba:	4858      	ldr	r0, [pc, #352]	; (801021c <_vfiprintf_r+0x24c>)
 80100bc:	f7f0 f890 	bl	80001e0 <memchr>
 80100c0:	9a04      	ldr	r2, [sp, #16]
 80100c2:	b9d8      	cbnz	r0, 80100fc <_vfiprintf_r+0x12c>
 80100c4:	06d1      	lsls	r1, r2, #27
 80100c6:	bf44      	itt	mi
 80100c8:	2320      	movmi	r3, #32
 80100ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100ce:	0713      	lsls	r3, r2, #28
 80100d0:	bf44      	itt	mi
 80100d2:	232b      	movmi	r3, #43	; 0x2b
 80100d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100d8:	f89a 3000 	ldrb.w	r3, [sl]
 80100dc:	2b2a      	cmp	r3, #42	; 0x2a
 80100de:	d015      	beq.n	801010c <_vfiprintf_r+0x13c>
 80100e0:	9a07      	ldr	r2, [sp, #28]
 80100e2:	4654      	mov	r4, sl
 80100e4:	2000      	movs	r0, #0
 80100e6:	f04f 0c0a 	mov.w	ip, #10
 80100ea:	4621      	mov	r1, r4
 80100ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100f0:	3b30      	subs	r3, #48	; 0x30
 80100f2:	2b09      	cmp	r3, #9
 80100f4:	d94e      	bls.n	8010194 <_vfiprintf_r+0x1c4>
 80100f6:	b1b0      	cbz	r0, 8010126 <_vfiprintf_r+0x156>
 80100f8:	9207      	str	r2, [sp, #28]
 80100fa:	e014      	b.n	8010126 <_vfiprintf_r+0x156>
 80100fc:	eba0 0308 	sub.w	r3, r0, r8
 8010100:	fa09 f303 	lsl.w	r3, r9, r3
 8010104:	4313      	orrs	r3, r2
 8010106:	9304      	str	r3, [sp, #16]
 8010108:	46a2      	mov	sl, r4
 801010a:	e7d2      	b.n	80100b2 <_vfiprintf_r+0xe2>
 801010c:	9b03      	ldr	r3, [sp, #12]
 801010e:	1d19      	adds	r1, r3, #4
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	9103      	str	r1, [sp, #12]
 8010114:	2b00      	cmp	r3, #0
 8010116:	bfbb      	ittet	lt
 8010118:	425b      	neglt	r3, r3
 801011a:	f042 0202 	orrlt.w	r2, r2, #2
 801011e:	9307      	strge	r3, [sp, #28]
 8010120:	9307      	strlt	r3, [sp, #28]
 8010122:	bfb8      	it	lt
 8010124:	9204      	strlt	r2, [sp, #16]
 8010126:	7823      	ldrb	r3, [r4, #0]
 8010128:	2b2e      	cmp	r3, #46	; 0x2e
 801012a:	d10c      	bne.n	8010146 <_vfiprintf_r+0x176>
 801012c:	7863      	ldrb	r3, [r4, #1]
 801012e:	2b2a      	cmp	r3, #42	; 0x2a
 8010130:	d135      	bne.n	801019e <_vfiprintf_r+0x1ce>
 8010132:	9b03      	ldr	r3, [sp, #12]
 8010134:	1d1a      	adds	r2, r3, #4
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	9203      	str	r2, [sp, #12]
 801013a:	2b00      	cmp	r3, #0
 801013c:	bfb8      	it	lt
 801013e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010142:	3402      	adds	r4, #2
 8010144:	9305      	str	r3, [sp, #20]
 8010146:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801022c <_vfiprintf_r+0x25c>
 801014a:	7821      	ldrb	r1, [r4, #0]
 801014c:	2203      	movs	r2, #3
 801014e:	4650      	mov	r0, sl
 8010150:	f7f0 f846 	bl	80001e0 <memchr>
 8010154:	b140      	cbz	r0, 8010168 <_vfiprintf_r+0x198>
 8010156:	2340      	movs	r3, #64	; 0x40
 8010158:	eba0 000a 	sub.w	r0, r0, sl
 801015c:	fa03 f000 	lsl.w	r0, r3, r0
 8010160:	9b04      	ldr	r3, [sp, #16]
 8010162:	4303      	orrs	r3, r0
 8010164:	3401      	adds	r4, #1
 8010166:	9304      	str	r3, [sp, #16]
 8010168:	f814 1b01 	ldrb.w	r1, [r4], #1
 801016c:	482c      	ldr	r0, [pc, #176]	; (8010220 <_vfiprintf_r+0x250>)
 801016e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010172:	2206      	movs	r2, #6
 8010174:	f7f0 f834 	bl	80001e0 <memchr>
 8010178:	2800      	cmp	r0, #0
 801017a:	d03f      	beq.n	80101fc <_vfiprintf_r+0x22c>
 801017c:	4b29      	ldr	r3, [pc, #164]	; (8010224 <_vfiprintf_r+0x254>)
 801017e:	bb1b      	cbnz	r3, 80101c8 <_vfiprintf_r+0x1f8>
 8010180:	9b03      	ldr	r3, [sp, #12]
 8010182:	3307      	adds	r3, #7
 8010184:	f023 0307 	bic.w	r3, r3, #7
 8010188:	3308      	adds	r3, #8
 801018a:	9303      	str	r3, [sp, #12]
 801018c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801018e:	443b      	add	r3, r7
 8010190:	9309      	str	r3, [sp, #36]	; 0x24
 8010192:	e767      	b.n	8010064 <_vfiprintf_r+0x94>
 8010194:	fb0c 3202 	mla	r2, ip, r2, r3
 8010198:	460c      	mov	r4, r1
 801019a:	2001      	movs	r0, #1
 801019c:	e7a5      	b.n	80100ea <_vfiprintf_r+0x11a>
 801019e:	2300      	movs	r3, #0
 80101a0:	3401      	adds	r4, #1
 80101a2:	9305      	str	r3, [sp, #20]
 80101a4:	4619      	mov	r1, r3
 80101a6:	f04f 0c0a 	mov.w	ip, #10
 80101aa:	4620      	mov	r0, r4
 80101ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101b0:	3a30      	subs	r2, #48	; 0x30
 80101b2:	2a09      	cmp	r2, #9
 80101b4:	d903      	bls.n	80101be <_vfiprintf_r+0x1ee>
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d0c5      	beq.n	8010146 <_vfiprintf_r+0x176>
 80101ba:	9105      	str	r1, [sp, #20]
 80101bc:	e7c3      	b.n	8010146 <_vfiprintf_r+0x176>
 80101be:	fb0c 2101 	mla	r1, ip, r1, r2
 80101c2:	4604      	mov	r4, r0
 80101c4:	2301      	movs	r3, #1
 80101c6:	e7f0      	b.n	80101aa <_vfiprintf_r+0x1da>
 80101c8:	ab03      	add	r3, sp, #12
 80101ca:	9300      	str	r3, [sp, #0]
 80101cc:	462a      	mov	r2, r5
 80101ce:	4b16      	ldr	r3, [pc, #88]	; (8010228 <_vfiprintf_r+0x258>)
 80101d0:	a904      	add	r1, sp, #16
 80101d2:	4630      	mov	r0, r6
 80101d4:	f7fd fd28 	bl	800dc28 <_printf_float>
 80101d8:	4607      	mov	r7, r0
 80101da:	1c78      	adds	r0, r7, #1
 80101dc:	d1d6      	bne.n	801018c <_vfiprintf_r+0x1bc>
 80101de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101e0:	07d9      	lsls	r1, r3, #31
 80101e2:	d405      	bmi.n	80101f0 <_vfiprintf_r+0x220>
 80101e4:	89ab      	ldrh	r3, [r5, #12]
 80101e6:	059a      	lsls	r2, r3, #22
 80101e8:	d402      	bmi.n	80101f0 <_vfiprintf_r+0x220>
 80101ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101ec:	f7fd fbd0 	bl	800d990 <__retarget_lock_release_recursive>
 80101f0:	89ab      	ldrh	r3, [r5, #12]
 80101f2:	065b      	lsls	r3, r3, #25
 80101f4:	f53f af12 	bmi.w	801001c <_vfiprintf_r+0x4c>
 80101f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101fa:	e711      	b.n	8010020 <_vfiprintf_r+0x50>
 80101fc:	ab03      	add	r3, sp, #12
 80101fe:	9300      	str	r3, [sp, #0]
 8010200:	462a      	mov	r2, r5
 8010202:	4b09      	ldr	r3, [pc, #36]	; (8010228 <_vfiprintf_r+0x258>)
 8010204:	a904      	add	r1, sp, #16
 8010206:	4630      	mov	r0, r6
 8010208:	f7fd ffb2 	bl	800e170 <_printf_i>
 801020c:	e7e4      	b.n	80101d8 <_vfiprintf_r+0x208>
 801020e:	bf00      	nop
 8010210:	08011f30 	.word	0x08011f30
 8010214:	08011f50 	.word	0x08011f50
 8010218:	08011f10 	.word	0x08011f10
 801021c:	08012194 	.word	0x08012194
 8010220:	0801219e 	.word	0x0801219e
 8010224:	0800dc29 	.word	0x0800dc29
 8010228:	0800ffab 	.word	0x0800ffab
 801022c:	0801219a 	.word	0x0801219a

08010230 <_read_r>:
 8010230:	b538      	push	{r3, r4, r5, lr}
 8010232:	4d07      	ldr	r5, [pc, #28]	; (8010250 <_read_r+0x20>)
 8010234:	4604      	mov	r4, r0
 8010236:	4608      	mov	r0, r1
 8010238:	4611      	mov	r1, r2
 801023a:	2200      	movs	r2, #0
 801023c:	602a      	str	r2, [r5, #0]
 801023e:	461a      	mov	r2, r3
 8010240:	f7f3 fb48 	bl	80038d4 <_read>
 8010244:	1c43      	adds	r3, r0, #1
 8010246:	d102      	bne.n	801024e <_read_r+0x1e>
 8010248:	682b      	ldr	r3, [r5, #0]
 801024a:	b103      	cbz	r3, 801024e <_read_r+0x1e>
 801024c:	6023      	str	r3, [r4, #0]
 801024e:	bd38      	pop	{r3, r4, r5, pc}
 8010250:	200055b8 	.word	0x200055b8

08010254 <__assert_func>:
 8010254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010256:	4614      	mov	r4, r2
 8010258:	461a      	mov	r2, r3
 801025a:	4b09      	ldr	r3, [pc, #36]	; (8010280 <__assert_func+0x2c>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	4605      	mov	r5, r0
 8010260:	68d8      	ldr	r0, [r3, #12]
 8010262:	b14c      	cbz	r4, 8010278 <__assert_func+0x24>
 8010264:	4b07      	ldr	r3, [pc, #28]	; (8010284 <__assert_func+0x30>)
 8010266:	9100      	str	r1, [sp, #0]
 8010268:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801026c:	4906      	ldr	r1, [pc, #24]	; (8010288 <__assert_func+0x34>)
 801026e:	462b      	mov	r3, r5
 8010270:	f000 f80e 	bl	8010290 <fiprintf>
 8010274:	f000 f85f 	bl	8010336 <abort>
 8010278:	4b04      	ldr	r3, [pc, #16]	; (801028c <__assert_func+0x38>)
 801027a:	461c      	mov	r4, r3
 801027c:	e7f3      	b.n	8010266 <__assert_func+0x12>
 801027e:	bf00      	nop
 8010280:	200000a0 	.word	0x200000a0
 8010284:	080121a5 	.word	0x080121a5
 8010288:	080121b2 	.word	0x080121b2
 801028c:	080121e0 	.word	0x080121e0

08010290 <fiprintf>:
 8010290:	b40e      	push	{r1, r2, r3}
 8010292:	b503      	push	{r0, r1, lr}
 8010294:	4601      	mov	r1, r0
 8010296:	ab03      	add	r3, sp, #12
 8010298:	4805      	ldr	r0, [pc, #20]	; (80102b0 <fiprintf+0x20>)
 801029a:	f853 2b04 	ldr.w	r2, [r3], #4
 801029e:	6800      	ldr	r0, [r0, #0]
 80102a0:	9301      	str	r3, [sp, #4]
 80102a2:	f7ff fe95 	bl	800ffd0 <_vfiprintf_r>
 80102a6:	b002      	add	sp, #8
 80102a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80102ac:	b003      	add	sp, #12
 80102ae:	4770      	bx	lr
 80102b0:	200000a0 	.word	0x200000a0

080102b4 <_fstat_r>:
 80102b4:	b538      	push	{r3, r4, r5, lr}
 80102b6:	4d07      	ldr	r5, [pc, #28]	; (80102d4 <_fstat_r+0x20>)
 80102b8:	2300      	movs	r3, #0
 80102ba:	4604      	mov	r4, r0
 80102bc:	4608      	mov	r0, r1
 80102be:	4611      	mov	r1, r2
 80102c0:	602b      	str	r3, [r5, #0]
 80102c2:	f7f3 fb30 	bl	8003926 <_fstat>
 80102c6:	1c43      	adds	r3, r0, #1
 80102c8:	d102      	bne.n	80102d0 <_fstat_r+0x1c>
 80102ca:	682b      	ldr	r3, [r5, #0]
 80102cc:	b103      	cbz	r3, 80102d0 <_fstat_r+0x1c>
 80102ce:	6023      	str	r3, [r4, #0]
 80102d0:	bd38      	pop	{r3, r4, r5, pc}
 80102d2:	bf00      	nop
 80102d4:	200055b8 	.word	0x200055b8

080102d8 <_isatty_r>:
 80102d8:	b538      	push	{r3, r4, r5, lr}
 80102da:	4d06      	ldr	r5, [pc, #24]	; (80102f4 <_isatty_r+0x1c>)
 80102dc:	2300      	movs	r3, #0
 80102de:	4604      	mov	r4, r0
 80102e0:	4608      	mov	r0, r1
 80102e2:	602b      	str	r3, [r5, #0]
 80102e4:	f7f3 fb2f 	bl	8003946 <_isatty>
 80102e8:	1c43      	adds	r3, r0, #1
 80102ea:	d102      	bne.n	80102f2 <_isatty_r+0x1a>
 80102ec:	682b      	ldr	r3, [r5, #0]
 80102ee:	b103      	cbz	r3, 80102f2 <_isatty_r+0x1a>
 80102f0:	6023      	str	r3, [r4, #0]
 80102f2:	bd38      	pop	{r3, r4, r5, pc}
 80102f4:	200055b8 	.word	0x200055b8

080102f8 <__ascii_mbtowc>:
 80102f8:	b082      	sub	sp, #8
 80102fa:	b901      	cbnz	r1, 80102fe <__ascii_mbtowc+0x6>
 80102fc:	a901      	add	r1, sp, #4
 80102fe:	b142      	cbz	r2, 8010312 <__ascii_mbtowc+0x1a>
 8010300:	b14b      	cbz	r3, 8010316 <__ascii_mbtowc+0x1e>
 8010302:	7813      	ldrb	r3, [r2, #0]
 8010304:	600b      	str	r3, [r1, #0]
 8010306:	7812      	ldrb	r2, [r2, #0]
 8010308:	1e10      	subs	r0, r2, #0
 801030a:	bf18      	it	ne
 801030c:	2001      	movne	r0, #1
 801030e:	b002      	add	sp, #8
 8010310:	4770      	bx	lr
 8010312:	4610      	mov	r0, r2
 8010314:	e7fb      	b.n	801030e <__ascii_mbtowc+0x16>
 8010316:	f06f 0001 	mvn.w	r0, #1
 801031a:	e7f8      	b.n	801030e <__ascii_mbtowc+0x16>

0801031c <__ascii_wctomb>:
 801031c:	b149      	cbz	r1, 8010332 <__ascii_wctomb+0x16>
 801031e:	2aff      	cmp	r2, #255	; 0xff
 8010320:	bf85      	ittet	hi
 8010322:	238a      	movhi	r3, #138	; 0x8a
 8010324:	6003      	strhi	r3, [r0, #0]
 8010326:	700a      	strbls	r2, [r1, #0]
 8010328:	f04f 30ff 	movhi.w	r0, #4294967295
 801032c:	bf98      	it	ls
 801032e:	2001      	movls	r0, #1
 8010330:	4770      	bx	lr
 8010332:	4608      	mov	r0, r1
 8010334:	4770      	bx	lr

08010336 <abort>:
 8010336:	b508      	push	{r3, lr}
 8010338:	2006      	movs	r0, #6
 801033a:	f000 f82b 	bl	8010394 <raise>
 801033e:	2001      	movs	r0, #1
 8010340:	f7f3 fabe 	bl	80038c0 <_exit>

08010344 <_raise_r>:
 8010344:	291f      	cmp	r1, #31
 8010346:	b538      	push	{r3, r4, r5, lr}
 8010348:	4604      	mov	r4, r0
 801034a:	460d      	mov	r5, r1
 801034c:	d904      	bls.n	8010358 <_raise_r+0x14>
 801034e:	2316      	movs	r3, #22
 8010350:	6003      	str	r3, [r0, #0]
 8010352:	f04f 30ff 	mov.w	r0, #4294967295
 8010356:	bd38      	pop	{r3, r4, r5, pc}
 8010358:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801035a:	b112      	cbz	r2, 8010362 <_raise_r+0x1e>
 801035c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010360:	b94b      	cbnz	r3, 8010376 <_raise_r+0x32>
 8010362:	4620      	mov	r0, r4
 8010364:	f000 f830 	bl	80103c8 <_getpid_r>
 8010368:	462a      	mov	r2, r5
 801036a:	4601      	mov	r1, r0
 801036c:	4620      	mov	r0, r4
 801036e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010372:	f000 b817 	b.w	80103a4 <_kill_r>
 8010376:	2b01      	cmp	r3, #1
 8010378:	d00a      	beq.n	8010390 <_raise_r+0x4c>
 801037a:	1c59      	adds	r1, r3, #1
 801037c:	d103      	bne.n	8010386 <_raise_r+0x42>
 801037e:	2316      	movs	r3, #22
 8010380:	6003      	str	r3, [r0, #0]
 8010382:	2001      	movs	r0, #1
 8010384:	e7e7      	b.n	8010356 <_raise_r+0x12>
 8010386:	2400      	movs	r4, #0
 8010388:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801038c:	4628      	mov	r0, r5
 801038e:	4798      	blx	r3
 8010390:	2000      	movs	r0, #0
 8010392:	e7e0      	b.n	8010356 <_raise_r+0x12>

08010394 <raise>:
 8010394:	4b02      	ldr	r3, [pc, #8]	; (80103a0 <raise+0xc>)
 8010396:	4601      	mov	r1, r0
 8010398:	6818      	ldr	r0, [r3, #0]
 801039a:	f7ff bfd3 	b.w	8010344 <_raise_r>
 801039e:	bf00      	nop
 80103a0:	200000a0 	.word	0x200000a0

080103a4 <_kill_r>:
 80103a4:	b538      	push	{r3, r4, r5, lr}
 80103a6:	4d07      	ldr	r5, [pc, #28]	; (80103c4 <_kill_r+0x20>)
 80103a8:	2300      	movs	r3, #0
 80103aa:	4604      	mov	r4, r0
 80103ac:	4608      	mov	r0, r1
 80103ae:	4611      	mov	r1, r2
 80103b0:	602b      	str	r3, [r5, #0]
 80103b2:	f7f3 fa75 	bl	80038a0 <_kill>
 80103b6:	1c43      	adds	r3, r0, #1
 80103b8:	d102      	bne.n	80103c0 <_kill_r+0x1c>
 80103ba:	682b      	ldr	r3, [r5, #0]
 80103bc:	b103      	cbz	r3, 80103c0 <_kill_r+0x1c>
 80103be:	6023      	str	r3, [r4, #0]
 80103c0:	bd38      	pop	{r3, r4, r5, pc}
 80103c2:	bf00      	nop
 80103c4:	200055b8 	.word	0x200055b8

080103c8 <_getpid_r>:
 80103c8:	f7f3 ba62 	b.w	8003890 <_getpid>
 80103cc:	0000      	movs	r0, r0
	...

080103d0 <cos>:
 80103d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103d2:	ec53 2b10 	vmov	r2, r3, d0
 80103d6:	4826      	ldr	r0, [pc, #152]	; (8010470 <cos+0xa0>)
 80103d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80103dc:	4281      	cmp	r1, r0
 80103de:	dc06      	bgt.n	80103ee <cos+0x1e>
 80103e0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010468 <cos+0x98>
 80103e4:	b005      	add	sp, #20
 80103e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80103ea:	f000 bb79 	b.w	8010ae0 <__kernel_cos>
 80103ee:	4821      	ldr	r0, [pc, #132]	; (8010474 <cos+0xa4>)
 80103f0:	4281      	cmp	r1, r0
 80103f2:	dd09      	ble.n	8010408 <cos+0x38>
 80103f4:	ee10 0a10 	vmov	r0, s0
 80103f8:	4619      	mov	r1, r3
 80103fa:	f7ef ff45 	bl	8000288 <__aeabi_dsub>
 80103fe:	ec41 0b10 	vmov	d0, r0, r1
 8010402:	b005      	add	sp, #20
 8010404:	f85d fb04 	ldr.w	pc, [sp], #4
 8010408:	4668      	mov	r0, sp
 801040a:	f000 f95d 	bl	80106c8 <__ieee754_rem_pio2>
 801040e:	f000 0003 	and.w	r0, r0, #3
 8010412:	2801      	cmp	r0, #1
 8010414:	d00b      	beq.n	801042e <cos+0x5e>
 8010416:	2802      	cmp	r0, #2
 8010418:	d016      	beq.n	8010448 <cos+0x78>
 801041a:	b9e0      	cbnz	r0, 8010456 <cos+0x86>
 801041c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010420:	ed9d 0b00 	vldr	d0, [sp]
 8010424:	f000 fb5c 	bl	8010ae0 <__kernel_cos>
 8010428:	ec51 0b10 	vmov	r0, r1, d0
 801042c:	e7e7      	b.n	80103fe <cos+0x2e>
 801042e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010432:	ed9d 0b00 	vldr	d0, [sp]
 8010436:	f000 ff6b 	bl	8011310 <__kernel_sin>
 801043a:	ec53 2b10 	vmov	r2, r3, d0
 801043e:	ee10 0a10 	vmov	r0, s0
 8010442:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010446:	e7da      	b.n	80103fe <cos+0x2e>
 8010448:	ed9d 1b02 	vldr	d1, [sp, #8]
 801044c:	ed9d 0b00 	vldr	d0, [sp]
 8010450:	f000 fb46 	bl	8010ae0 <__kernel_cos>
 8010454:	e7f1      	b.n	801043a <cos+0x6a>
 8010456:	ed9d 1b02 	vldr	d1, [sp, #8]
 801045a:	ed9d 0b00 	vldr	d0, [sp]
 801045e:	2001      	movs	r0, #1
 8010460:	f000 ff56 	bl	8011310 <__kernel_sin>
 8010464:	e7e0      	b.n	8010428 <cos+0x58>
 8010466:	bf00      	nop
	...
 8010470:	3fe921fb 	.word	0x3fe921fb
 8010474:	7fefffff 	.word	0x7fefffff

08010478 <sin>:
 8010478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801047a:	ec53 2b10 	vmov	r2, r3, d0
 801047e:	4828      	ldr	r0, [pc, #160]	; (8010520 <sin+0xa8>)
 8010480:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010484:	4281      	cmp	r1, r0
 8010486:	dc07      	bgt.n	8010498 <sin+0x20>
 8010488:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010518 <sin+0xa0>
 801048c:	2000      	movs	r0, #0
 801048e:	b005      	add	sp, #20
 8010490:	f85d eb04 	ldr.w	lr, [sp], #4
 8010494:	f000 bf3c 	b.w	8011310 <__kernel_sin>
 8010498:	4822      	ldr	r0, [pc, #136]	; (8010524 <sin+0xac>)
 801049a:	4281      	cmp	r1, r0
 801049c:	dd09      	ble.n	80104b2 <sin+0x3a>
 801049e:	ee10 0a10 	vmov	r0, s0
 80104a2:	4619      	mov	r1, r3
 80104a4:	f7ef fef0 	bl	8000288 <__aeabi_dsub>
 80104a8:	ec41 0b10 	vmov	d0, r0, r1
 80104ac:	b005      	add	sp, #20
 80104ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80104b2:	4668      	mov	r0, sp
 80104b4:	f000 f908 	bl	80106c8 <__ieee754_rem_pio2>
 80104b8:	f000 0003 	and.w	r0, r0, #3
 80104bc:	2801      	cmp	r0, #1
 80104be:	d00c      	beq.n	80104da <sin+0x62>
 80104c0:	2802      	cmp	r0, #2
 80104c2:	d011      	beq.n	80104e8 <sin+0x70>
 80104c4:	b9f0      	cbnz	r0, 8010504 <sin+0x8c>
 80104c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80104ca:	ed9d 0b00 	vldr	d0, [sp]
 80104ce:	2001      	movs	r0, #1
 80104d0:	f000 ff1e 	bl	8011310 <__kernel_sin>
 80104d4:	ec51 0b10 	vmov	r0, r1, d0
 80104d8:	e7e6      	b.n	80104a8 <sin+0x30>
 80104da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80104de:	ed9d 0b00 	vldr	d0, [sp]
 80104e2:	f000 fafd 	bl	8010ae0 <__kernel_cos>
 80104e6:	e7f5      	b.n	80104d4 <sin+0x5c>
 80104e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80104ec:	ed9d 0b00 	vldr	d0, [sp]
 80104f0:	2001      	movs	r0, #1
 80104f2:	f000 ff0d 	bl	8011310 <__kernel_sin>
 80104f6:	ec53 2b10 	vmov	r2, r3, d0
 80104fa:	ee10 0a10 	vmov	r0, s0
 80104fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010502:	e7d1      	b.n	80104a8 <sin+0x30>
 8010504:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010508:	ed9d 0b00 	vldr	d0, [sp]
 801050c:	f000 fae8 	bl	8010ae0 <__kernel_cos>
 8010510:	e7f1      	b.n	80104f6 <sin+0x7e>
 8010512:	bf00      	nop
 8010514:	f3af 8000 	nop.w
	...
 8010520:	3fe921fb 	.word	0x3fe921fb
 8010524:	7fefffff 	.word	0x7fefffff

08010528 <atan2>:
 8010528:	f000 b802 	b.w	8010530 <__ieee754_atan2>
 801052c:	0000      	movs	r0, r0
	...

08010530 <__ieee754_atan2>:
 8010530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010534:	ec57 6b11 	vmov	r6, r7, d1
 8010538:	4273      	negs	r3, r6
 801053a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80106c0 <__ieee754_atan2+0x190>
 801053e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010542:	4333      	orrs	r3, r6
 8010544:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010548:	4573      	cmp	r3, lr
 801054a:	ec51 0b10 	vmov	r0, r1, d0
 801054e:	ee11 8a10 	vmov	r8, s2
 8010552:	d80a      	bhi.n	801056a <__ieee754_atan2+0x3a>
 8010554:	4244      	negs	r4, r0
 8010556:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801055a:	4304      	orrs	r4, r0
 801055c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010560:	4574      	cmp	r4, lr
 8010562:	ee10 9a10 	vmov	r9, s0
 8010566:	468c      	mov	ip, r1
 8010568:	d907      	bls.n	801057a <__ieee754_atan2+0x4a>
 801056a:	4632      	mov	r2, r6
 801056c:	463b      	mov	r3, r7
 801056e:	f7ef fe8d 	bl	800028c <__adddf3>
 8010572:	ec41 0b10 	vmov	d0, r0, r1
 8010576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801057a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801057e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010582:	4334      	orrs	r4, r6
 8010584:	d103      	bne.n	801058e <__ieee754_atan2+0x5e>
 8010586:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801058a:	f000 bf81 	b.w	8011490 <atan>
 801058e:	17bc      	asrs	r4, r7, #30
 8010590:	f004 0402 	and.w	r4, r4, #2
 8010594:	ea53 0909 	orrs.w	r9, r3, r9
 8010598:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801059c:	d107      	bne.n	80105ae <__ieee754_atan2+0x7e>
 801059e:	2c02      	cmp	r4, #2
 80105a0:	d060      	beq.n	8010664 <__ieee754_atan2+0x134>
 80105a2:	2c03      	cmp	r4, #3
 80105a4:	d1e5      	bne.n	8010572 <__ieee754_atan2+0x42>
 80105a6:	a142      	add	r1, pc, #264	; (adr r1, 80106b0 <__ieee754_atan2+0x180>)
 80105a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105ac:	e7e1      	b.n	8010572 <__ieee754_atan2+0x42>
 80105ae:	ea52 0808 	orrs.w	r8, r2, r8
 80105b2:	d106      	bne.n	80105c2 <__ieee754_atan2+0x92>
 80105b4:	f1bc 0f00 	cmp.w	ip, #0
 80105b8:	da5f      	bge.n	801067a <__ieee754_atan2+0x14a>
 80105ba:	a13f      	add	r1, pc, #252	; (adr r1, 80106b8 <__ieee754_atan2+0x188>)
 80105bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105c0:	e7d7      	b.n	8010572 <__ieee754_atan2+0x42>
 80105c2:	4572      	cmp	r2, lr
 80105c4:	d10f      	bne.n	80105e6 <__ieee754_atan2+0xb6>
 80105c6:	4293      	cmp	r3, r2
 80105c8:	f104 34ff 	add.w	r4, r4, #4294967295
 80105cc:	d107      	bne.n	80105de <__ieee754_atan2+0xae>
 80105ce:	2c02      	cmp	r4, #2
 80105d0:	d84c      	bhi.n	801066c <__ieee754_atan2+0x13c>
 80105d2:	4b35      	ldr	r3, [pc, #212]	; (80106a8 <__ieee754_atan2+0x178>)
 80105d4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80105d8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80105dc:	e7c9      	b.n	8010572 <__ieee754_atan2+0x42>
 80105de:	2c02      	cmp	r4, #2
 80105e0:	d848      	bhi.n	8010674 <__ieee754_atan2+0x144>
 80105e2:	4b32      	ldr	r3, [pc, #200]	; (80106ac <__ieee754_atan2+0x17c>)
 80105e4:	e7f6      	b.n	80105d4 <__ieee754_atan2+0xa4>
 80105e6:	4573      	cmp	r3, lr
 80105e8:	d0e4      	beq.n	80105b4 <__ieee754_atan2+0x84>
 80105ea:	1a9b      	subs	r3, r3, r2
 80105ec:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80105f0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80105f4:	da1e      	bge.n	8010634 <__ieee754_atan2+0x104>
 80105f6:	2f00      	cmp	r7, #0
 80105f8:	da01      	bge.n	80105fe <__ieee754_atan2+0xce>
 80105fa:	323c      	adds	r2, #60	; 0x3c
 80105fc:	db1e      	blt.n	801063c <__ieee754_atan2+0x10c>
 80105fe:	4632      	mov	r2, r6
 8010600:	463b      	mov	r3, r7
 8010602:	f7f0 f923 	bl	800084c <__aeabi_ddiv>
 8010606:	ec41 0b10 	vmov	d0, r0, r1
 801060a:	f001 f8e1 	bl	80117d0 <fabs>
 801060e:	f000 ff3f 	bl	8011490 <atan>
 8010612:	ec51 0b10 	vmov	r0, r1, d0
 8010616:	2c01      	cmp	r4, #1
 8010618:	d013      	beq.n	8010642 <__ieee754_atan2+0x112>
 801061a:	2c02      	cmp	r4, #2
 801061c:	d015      	beq.n	801064a <__ieee754_atan2+0x11a>
 801061e:	2c00      	cmp	r4, #0
 8010620:	d0a7      	beq.n	8010572 <__ieee754_atan2+0x42>
 8010622:	a319      	add	r3, pc, #100	; (adr r3, 8010688 <__ieee754_atan2+0x158>)
 8010624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010628:	f7ef fe2e 	bl	8000288 <__aeabi_dsub>
 801062c:	a318      	add	r3, pc, #96	; (adr r3, 8010690 <__ieee754_atan2+0x160>)
 801062e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010632:	e014      	b.n	801065e <__ieee754_atan2+0x12e>
 8010634:	a118      	add	r1, pc, #96	; (adr r1, 8010698 <__ieee754_atan2+0x168>)
 8010636:	e9d1 0100 	ldrd	r0, r1, [r1]
 801063a:	e7ec      	b.n	8010616 <__ieee754_atan2+0xe6>
 801063c:	2000      	movs	r0, #0
 801063e:	2100      	movs	r1, #0
 8010640:	e7e9      	b.n	8010616 <__ieee754_atan2+0xe6>
 8010642:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010646:	4619      	mov	r1, r3
 8010648:	e793      	b.n	8010572 <__ieee754_atan2+0x42>
 801064a:	a30f      	add	r3, pc, #60	; (adr r3, 8010688 <__ieee754_atan2+0x158>)
 801064c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010650:	f7ef fe1a 	bl	8000288 <__aeabi_dsub>
 8010654:	4602      	mov	r2, r0
 8010656:	460b      	mov	r3, r1
 8010658:	a10d      	add	r1, pc, #52	; (adr r1, 8010690 <__ieee754_atan2+0x160>)
 801065a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801065e:	f7ef fe13 	bl	8000288 <__aeabi_dsub>
 8010662:	e786      	b.n	8010572 <__ieee754_atan2+0x42>
 8010664:	a10a      	add	r1, pc, #40	; (adr r1, 8010690 <__ieee754_atan2+0x160>)
 8010666:	e9d1 0100 	ldrd	r0, r1, [r1]
 801066a:	e782      	b.n	8010572 <__ieee754_atan2+0x42>
 801066c:	a10c      	add	r1, pc, #48	; (adr r1, 80106a0 <__ieee754_atan2+0x170>)
 801066e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010672:	e77e      	b.n	8010572 <__ieee754_atan2+0x42>
 8010674:	2000      	movs	r0, #0
 8010676:	2100      	movs	r1, #0
 8010678:	e77b      	b.n	8010572 <__ieee754_atan2+0x42>
 801067a:	a107      	add	r1, pc, #28	; (adr r1, 8010698 <__ieee754_atan2+0x168>)
 801067c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010680:	e777      	b.n	8010572 <__ieee754_atan2+0x42>
 8010682:	bf00      	nop
 8010684:	f3af 8000 	nop.w
 8010688:	33145c07 	.word	0x33145c07
 801068c:	3ca1a626 	.word	0x3ca1a626
 8010690:	54442d18 	.word	0x54442d18
 8010694:	400921fb 	.word	0x400921fb
 8010698:	54442d18 	.word	0x54442d18
 801069c:	3ff921fb 	.word	0x3ff921fb
 80106a0:	54442d18 	.word	0x54442d18
 80106a4:	3fe921fb 	.word	0x3fe921fb
 80106a8:	080122f0 	.word	0x080122f0
 80106ac:	08012308 	.word	0x08012308
 80106b0:	54442d18 	.word	0x54442d18
 80106b4:	c00921fb 	.word	0xc00921fb
 80106b8:	54442d18 	.word	0x54442d18
 80106bc:	bff921fb 	.word	0xbff921fb
 80106c0:	7ff00000 	.word	0x7ff00000
 80106c4:	00000000 	.word	0x00000000

080106c8 <__ieee754_rem_pio2>:
 80106c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106cc:	ed2d 8b02 	vpush	{d8}
 80106d0:	ec55 4b10 	vmov	r4, r5, d0
 80106d4:	4bca      	ldr	r3, [pc, #808]	; (8010a00 <__ieee754_rem_pio2+0x338>)
 80106d6:	b08b      	sub	sp, #44	; 0x2c
 80106d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80106dc:	4598      	cmp	r8, r3
 80106de:	4682      	mov	sl, r0
 80106e0:	9502      	str	r5, [sp, #8]
 80106e2:	dc08      	bgt.n	80106f6 <__ieee754_rem_pio2+0x2e>
 80106e4:	2200      	movs	r2, #0
 80106e6:	2300      	movs	r3, #0
 80106e8:	ed80 0b00 	vstr	d0, [r0]
 80106ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80106f0:	f04f 0b00 	mov.w	fp, #0
 80106f4:	e028      	b.n	8010748 <__ieee754_rem_pio2+0x80>
 80106f6:	4bc3      	ldr	r3, [pc, #780]	; (8010a04 <__ieee754_rem_pio2+0x33c>)
 80106f8:	4598      	cmp	r8, r3
 80106fa:	dc78      	bgt.n	80107ee <__ieee754_rem_pio2+0x126>
 80106fc:	9b02      	ldr	r3, [sp, #8]
 80106fe:	4ec2      	ldr	r6, [pc, #776]	; (8010a08 <__ieee754_rem_pio2+0x340>)
 8010700:	2b00      	cmp	r3, #0
 8010702:	ee10 0a10 	vmov	r0, s0
 8010706:	a3b0      	add	r3, pc, #704	; (adr r3, 80109c8 <__ieee754_rem_pio2+0x300>)
 8010708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801070c:	4629      	mov	r1, r5
 801070e:	dd39      	ble.n	8010784 <__ieee754_rem_pio2+0xbc>
 8010710:	f7ef fdba 	bl	8000288 <__aeabi_dsub>
 8010714:	45b0      	cmp	r8, r6
 8010716:	4604      	mov	r4, r0
 8010718:	460d      	mov	r5, r1
 801071a:	d01b      	beq.n	8010754 <__ieee754_rem_pio2+0x8c>
 801071c:	a3ac      	add	r3, pc, #688	; (adr r3, 80109d0 <__ieee754_rem_pio2+0x308>)
 801071e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010722:	f7ef fdb1 	bl	8000288 <__aeabi_dsub>
 8010726:	4602      	mov	r2, r0
 8010728:	460b      	mov	r3, r1
 801072a:	e9ca 2300 	strd	r2, r3, [sl]
 801072e:	4620      	mov	r0, r4
 8010730:	4629      	mov	r1, r5
 8010732:	f7ef fda9 	bl	8000288 <__aeabi_dsub>
 8010736:	a3a6      	add	r3, pc, #664	; (adr r3, 80109d0 <__ieee754_rem_pio2+0x308>)
 8010738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073c:	f7ef fda4 	bl	8000288 <__aeabi_dsub>
 8010740:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010744:	f04f 0b01 	mov.w	fp, #1
 8010748:	4658      	mov	r0, fp
 801074a:	b00b      	add	sp, #44	; 0x2c
 801074c:	ecbd 8b02 	vpop	{d8}
 8010750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010754:	a3a0      	add	r3, pc, #640	; (adr r3, 80109d8 <__ieee754_rem_pio2+0x310>)
 8010756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075a:	f7ef fd95 	bl	8000288 <__aeabi_dsub>
 801075e:	a3a0      	add	r3, pc, #640	; (adr r3, 80109e0 <__ieee754_rem_pio2+0x318>)
 8010760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010764:	4604      	mov	r4, r0
 8010766:	460d      	mov	r5, r1
 8010768:	f7ef fd8e 	bl	8000288 <__aeabi_dsub>
 801076c:	4602      	mov	r2, r0
 801076e:	460b      	mov	r3, r1
 8010770:	e9ca 2300 	strd	r2, r3, [sl]
 8010774:	4620      	mov	r0, r4
 8010776:	4629      	mov	r1, r5
 8010778:	f7ef fd86 	bl	8000288 <__aeabi_dsub>
 801077c:	a398      	add	r3, pc, #608	; (adr r3, 80109e0 <__ieee754_rem_pio2+0x318>)
 801077e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010782:	e7db      	b.n	801073c <__ieee754_rem_pio2+0x74>
 8010784:	f7ef fd82 	bl	800028c <__adddf3>
 8010788:	45b0      	cmp	r8, r6
 801078a:	4604      	mov	r4, r0
 801078c:	460d      	mov	r5, r1
 801078e:	d016      	beq.n	80107be <__ieee754_rem_pio2+0xf6>
 8010790:	a38f      	add	r3, pc, #572	; (adr r3, 80109d0 <__ieee754_rem_pio2+0x308>)
 8010792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010796:	f7ef fd79 	bl	800028c <__adddf3>
 801079a:	4602      	mov	r2, r0
 801079c:	460b      	mov	r3, r1
 801079e:	e9ca 2300 	strd	r2, r3, [sl]
 80107a2:	4620      	mov	r0, r4
 80107a4:	4629      	mov	r1, r5
 80107a6:	f7ef fd6f 	bl	8000288 <__aeabi_dsub>
 80107aa:	a389      	add	r3, pc, #548	; (adr r3, 80109d0 <__ieee754_rem_pio2+0x308>)
 80107ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b0:	f7ef fd6c 	bl	800028c <__adddf3>
 80107b4:	f04f 3bff 	mov.w	fp, #4294967295
 80107b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80107bc:	e7c4      	b.n	8010748 <__ieee754_rem_pio2+0x80>
 80107be:	a386      	add	r3, pc, #536	; (adr r3, 80109d8 <__ieee754_rem_pio2+0x310>)
 80107c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c4:	f7ef fd62 	bl	800028c <__adddf3>
 80107c8:	a385      	add	r3, pc, #532	; (adr r3, 80109e0 <__ieee754_rem_pio2+0x318>)
 80107ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ce:	4604      	mov	r4, r0
 80107d0:	460d      	mov	r5, r1
 80107d2:	f7ef fd5b 	bl	800028c <__adddf3>
 80107d6:	4602      	mov	r2, r0
 80107d8:	460b      	mov	r3, r1
 80107da:	e9ca 2300 	strd	r2, r3, [sl]
 80107de:	4620      	mov	r0, r4
 80107e0:	4629      	mov	r1, r5
 80107e2:	f7ef fd51 	bl	8000288 <__aeabi_dsub>
 80107e6:	a37e      	add	r3, pc, #504	; (adr r3, 80109e0 <__ieee754_rem_pio2+0x318>)
 80107e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ec:	e7e0      	b.n	80107b0 <__ieee754_rem_pio2+0xe8>
 80107ee:	4b87      	ldr	r3, [pc, #540]	; (8010a0c <__ieee754_rem_pio2+0x344>)
 80107f0:	4598      	cmp	r8, r3
 80107f2:	f300 80d9 	bgt.w	80109a8 <__ieee754_rem_pio2+0x2e0>
 80107f6:	f000 ffeb 	bl	80117d0 <fabs>
 80107fa:	ec55 4b10 	vmov	r4, r5, d0
 80107fe:	ee10 0a10 	vmov	r0, s0
 8010802:	a379      	add	r3, pc, #484	; (adr r3, 80109e8 <__ieee754_rem_pio2+0x320>)
 8010804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010808:	4629      	mov	r1, r5
 801080a:	f7ef fef5 	bl	80005f8 <__aeabi_dmul>
 801080e:	4b80      	ldr	r3, [pc, #512]	; (8010a10 <__ieee754_rem_pio2+0x348>)
 8010810:	2200      	movs	r2, #0
 8010812:	f7ef fd3b 	bl	800028c <__adddf3>
 8010816:	f7f0 f99f 	bl	8000b58 <__aeabi_d2iz>
 801081a:	4683      	mov	fp, r0
 801081c:	f7ef fe82 	bl	8000524 <__aeabi_i2d>
 8010820:	4602      	mov	r2, r0
 8010822:	460b      	mov	r3, r1
 8010824:	ec43 2b18 	vmov	d8, r2, r3
 8010828:	a367      	add	r3, pc, #412	; (adr r3, 80109c8 <__ieee754_rem_pio2+0x300>)
 801082a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082e:	f7ef fee3 	bl	80005f8 <__aeabi_dmul>
 8010832:	4602      	mov	r2, r0
 8010834:	460b      	mov	r3, r1
 8010836:	4620      	mov	r0, r4
 8010838:	4629      	mov	r1, r5
 801083a:	f7ef fd25 	bl	8000288 <__aeabi_dsub>
 801083e:	a364      	add	r3, pc, #400	; (adr r3, 80109d0 <__ieee754_rem_pio2+0x308>)
 8010840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010844:	4606      	mov	r6, r0
 8010846:	460f      	mov	r7, r1
 8010848:	ec51 0b18 	vmov	r0, r1, d8
 801084c:	f7ef fed4 	bl	80005f8 <__aeabi_dmul>
 8010850:	f1bb 0f1f 	cmp.w	fp, #31
 8010854:	4604      	mov	r4, r0
 8010856:	460d      	mov	r5, r1
 8010858:	dc0d      	bgt.n	8010876 <__ieee754_rem_pio2+0x1ae>
 801085a:	4b6e      	ldr	r3, [pc, #440]	; (8010a14 <__ieee754_rem_pio2+0x34c>)
 801085c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010864:	4543      	cmp	r3, r8
 8010866:	d006      	beq.n	8010876 <__ieee754_rem_pio2+0x1ae>
 8010868:	4622      	mov	r2, r4
 801086a:	462b      	mov	r3, r5
 801086c:	4630      	mov	r0, r6
 801086e:	4639      	mov	r1, r7
 8010870:	f7ef fd0a 	bl	8000288 <__aeabi_dsub>
 8010874:	e00f      	b.n	8010896 <__ieee754_rem_pio2+0x1ce>
 8010876:	462b      	mov	r3, r5
 8010878:	4622      	mov	r2, r4
 801087a:	4630      	mov	r0, r6
 801087c:	4639      	mov	r1, r7
 801087e:	f7ef fd03 	bl	8000288 <__aeabi_dsub>
 8010882:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010886:	9303      	str	r3, [sp, #12]
 8010888:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801088c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8010890:	f1b8 0f10 	cmp.w	r8, #16
 8010894:	dc02      	bgt.n	801089c <__ieee754_rem_pio2+0x1d4>
 8010896:	e9ca 0100 	strd	r0, r1, [sl]
 801089a:	e039      	b.n	8010910 <__ieee754_rem_pio2+0x248>
 801089c:	a34e      	add	r3, pc, #312	; (adr r3, 80109d8 <__ieee754_rem_pio2+0x310>)
 801089e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a2:	ec51 0b18 	vmov	r0, r1, d8
 80108a6:	f7ef fea7 	bl	80005f8 <__aeabi_dmul>
 80108aa:	4604      	mov	r4, r0
 80108ac:	460d      	mov	r5, r1
 80108ae:	4602      	mov	r2, r0
 80108b0:	460b      	mov	r3, r1
 80108b2:	4630      	mov	r0, r6
 80108b4:	4639      	mov	r1, r7
 80108b6:	f7ef fce7 	bl	8000288 <__aeabi_dsub>
 80108ba:	4602      	mov	r2, r0
 80108bc:	460b      	mov	r3, r1
 80108be:	4680      	mov	r8, r0
 80108c0:	4689      	mov	r9, r1
 80108c2:	4630      	mov	r0, r6
 80108c4:	4639      	mov	r1, r7
 80108c6:	f7ef fcdf 	bl	8000288 <__aeabi_dsub>
 80108ca:	4622      	mov	r2, r4
 80108cc:	462b      	mov	r3, r5
 80108ce:	f7ef fcdb 	bl	8000288 <__aeabi_dsub>
 80108d2:	a343      	add	r3, pc, #268	; (adr r3, 80109e0 <__ieee754_rem_pio2+0x318>)
 80108d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d8:	4604      	mov	r4, r0
 80108da:	460d      	mov	r5, r1
 80108dc:	ec51 0b18 	vmov	r0, r1, d8
 80108e0:	f7ef fe8a 	bl	80005f8 <__aeabi_dmul>
 80108e4:	4622      	mov	r2, r4
 80108e6:	462b      	mov	r3, r5
 80108e8:	f7ef fcce 	bl	8000288 <__aeabi_dsub>
 80108ec:	4602      	mov	r2, r0
 80108ee:	460b      	mov	r3, r1
 80108f0:	4604      	mov	r4, r0
 80108f2:	460d      	mov	r5, r1
 80108f4:	4640      	mov	r0, r8
 80108f6:	4649      	mov	r1, r9
 80108f8:	f7ef fcc6 	bl	8000288 <__aeabi_dsub>
 80108fc:	9a03      	ldr	r2, [sp, #12]
 80108fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010902:	1ad3      	subs	r3, r2, r3
 8010904:	2b31      	cmp	r3, #49	; 0x31
 8010906:	dc24      	bgt.n	8010952 <__ieee754_rem_pio2+0x28a>
 8010908:	e9ca 0100 	strd	r0, r1, [sl]
 801090c:	4646      	mov	r6, r8
 801090e:	464f      	mov	r7, r9
 8010910:	e9da 8900 	ldrd	r8, r9, [sl]
 8010914:	4630      	mov	r0, r6
 8010916:	4642      	mov	r2, r8
 8010918:	464b      	mov	r3, r9
 801091a:	4639      	mov	r1, r7
 801091c:	f7ef fcb4 	bl	8000288 <__aeabi_dsub>
 8010920:	462b      	mov	r3, r5
 8010922:	4622      	mov	r2, r4
 8010924:	f7ef fcb0 	bl	8000288 <__aeabi_dsub>
 8010928:	9b02      	ldr	r3, [sp, #8]
 801092a:	2b00      	cmp	r3, #0
 801092c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010930:	f6bf af0a 	bge.w	8010748 <__ieee754_rem_pio2+0x80>
 8010934:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010938:	f8ca 3004 	str.w	r3, [sl, #4]
 801093c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010940:	f8ca 8000 	str.w	r8, [sl]
 8010944:	f8ca 0008 	str.w	r0, [sl, #8]
 8010948:	f8ca 300c 	str.w	r3, [sl, #12]
 801094c:	f1cb 0b00 	rsb	fp, fp, #0
 8010950:	e6fa      	b.n	8010748 <__ieee754_rem_pio2+0x80>
 8010952:	a327      	add	r3, pc, #156	; (adr r3, 80109f0 <__ieee754_rem_pio2+0x328>)
 8010954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010958:	ec51 0b18 	vmov	r0, r1, d8
 801095c:	f7ef fe4c 	bl	80005f8 <__aeabi_dmul>
 8010960:	4604      	mov	r4, r0
 8010962:	460d      	mov	r5, r1
 8010964:	4602      	mov	r2, r0
 8010966:	460b      	mov	r3, r1
 8010968:	4640      	mov	r0, r8
 801096a:	4649      	mov	r1, r9
 801096c:	f7ef fc8c 	bl	8000288 <__aeabi_dsub>
 8010970:	4602      	mov	r2, r0
 8010972:	460b      	mov	r3, r1
 8010974:	4606      	mov	r6, r0
 8010976:	460f      	mov	r7, r1
 8010978:	4640      	mov	r0, r8
 801097a:	4649      	mov	r1, r9
 801097c:	f7ef fc84 	bl	8000288 <__aeabi_dsub>
 8010980:	4622      	mov	r2, r4
 8010982:	462b      	mov	r3, r5
 8010984:	f7ef fc80 	bl	8000288 <__aeabi_dsub>
 8010988:	a31b      	add	r3, pc, #108	; (adr r3, 80109f8 <__ieee754_rem_pio2+0x330>)
 801098a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801098e:	4604      	mov	r4, r0
 8010990:	460d      	mov	r5, r1
 8010992:	ec51 0b18 	vmov	r0, r1, d8
 8010996:	f7ef fe2f 	bl	80005f8 <__aeabi_dmul>
 801099a:	4622      	mov	r2, r4
 801099c:	462b      	mov	r3, r5
 801099e:	f7ef fc73 	bl	8000288 <__aeabi_dsub>
 80109a2:	4604      	mov	r4, r0
 80109a4:	460d      	mov	r5, r1
 80109a6:	e75f      	b.n	8010868 <__ieee754_rem_pio2+0x1a0>
 80109a8:	4b1b      	ldr	r3, [pc, #108]	; (8010a18 <__ieee754_rem_pio2+0x350>)
 80109aa:	4598      	cmp	r8, r3
 80109ac:	dd36      	ble.n	8010a1c <__ieee754_rem_pio2+0x354>
 80109ae:	ee10 2a10 	vmov	r2, s0
 80109b2:	462b      	mov	r3, r5
 80109b4:	4620      	mov	r0, r4
 80109b6:	4629      	mov	r1, r5
 80109b8:	f7ef fc66 	bl	8000288 <__aeabi_dsub>
 80109bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80109c0:	e9ca 0100 	strd	r0, r1, [sl]
 80109c4:	e694      	b.n	80106f0 <__ieee754_rem_pio2+0x28>
 80109c6:	bf00      	nop
 80109c8:	54400000 	.word	0x54400000
 80109cc:	3ff921fb 	.word	0x3ff921fb
 80109d0:	1a626331 	.word	0x1a626331
 80109d4:	3dd0b461 	.word	0x3dd0b461
 80109d8:	1a600000 	.word	0x1a600000
 80109dc:	3dd0b461 	.word	0x3dd0b461
 80109e0:	2e037073 	.word	0x2e037073
 80109e4:	3ba3198a 	.word	0x3ba3198a
 80109e8:	6dc9c883 	.word	0x6dc9c883
 80109ec:	3fe45f30 	.word	0x3fe45f30
 80109f0:	2e000000 	.word	0x2e000000
 80109f4:	3ba3198a 	.word	0x3ba3198a
 80109f8:	252049c1 	.word	0x252049c1
 80109fc:	397b839a 	.word	0x397b839a
 8010a00:	3fe921fb 	.word	0x3fe921fb
 8010a04:	4002d97b 	.word	0x4002d97b
 8010a08:	3ff921fb 	.word	0x3ff921fb
 8010a0c:	413921fb 	.word	0x413921fb
 8010a10:	3fe00000 	.word	0x3fe00000
 8010a14:	08012320 	.word	0x08012320
 8010a18:	7fefffff 	.word	0x7fefffff
 8010a1c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8010a20:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8010a24:	ee10 0a10 	vmov	r0, s0
 8010a28:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8010a2c:	ee10 6a10 	vmov	r6, s0
 8010a30:	460f      	mov	r7, r1
 8010a32:	f7f0 f891 	bl	8000b58 <__aeabi_d2iz>
 8010a36:	f7ef fd75 	bl	8000524 <__aeabi_i2d>
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	4630      	mov	r0, r6
 8010a40:	4639      	mov	r1, r7
 8010a42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010a46:	f7ef fc1f 	bl	8000288 <__aeabi_dsub>
 8010a4a:	4b23      	ldr	r3, [pc, #140]	; (8010ad8 <__ieee754_rem_pio2+0x410>)
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	f7ef fdd3 	bl	80005f8 <__aeabi_dmul>
 8010a52:	460f      	mov	r7, r1
 8010a54:	4606      	mov	r6, r0
 8010a56:	f7f0 f87f 	bl	8000b58 <__aeabi_d2iz>
 8010a5a:	f7ef fd63 	bl	8000524 <__aeabi_i2d>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	460b      	mov	r3, r1
 8010a62:	4630      	mov	r0, r6
 8010a64:	4639      	mov	r1, r7
 8010a66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010a6a:	f7ef fc0d 	bl	8000288 <__aeabi_dsub>
 8010a6e:	4b1a      	ldr	r3, [pc, #104]	; (8010ad8 <__ieee754_rem_pio2+0x410>)
 8010a70:	2200      	movs	r2, #0
 8010a72:	f7ef fdc1 	bl	80005f8 <__aeabi_dmul>
 8010a76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010a7a:	ad04      	add	r5, sp, #16
 8010a7c:	f04f 0803 	mov.w	r8, #3
 8010a80:	46a9      	mov	r9, r5
 8010a82:	2600      	movs	r6, #0
 8010a84:	2700      	movs	r7, #0
 8010a86:	4632      	mov	r2, r6
 8010a88:	463b      	mov	r3, r7
 8010a8a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8010a8e:	46c3      	mov	fp, r8
 8010a90:	3d08      	subs	r5, #8
 8010a92:	f108 38ff 	add.w	r8, r8, #4294967295
 8010a96:	f7f0 f817 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a9a:	2800      	cmp	r0, #0
 8010a9c:	d1f3      	bne.n	8010a86 <__ieee754_rem_pio2+0x3be>
 8010a9e:	4b0f      	ldr	r3, [pc, #60]	; (8010adc <__ieee754_rem_pio2+0x414>)
 8010aa0:	9301      	str	r3, [sp, #4]
 8010aa2:	2302      	movs	r3, #2
 8010aa4:	9300      	str	r3, [sp, #0]
 8010aa6:	4622      	mov	r2, r4
 8010aa8:	465b      	mov	r3, fp
 8010aaa:	4651      	mov	r1, sl
 8010aac:	4648      	mov	r0, r9
 8010aae:	f000 f8df 	bl	8010c70 <__kernel_rem_pio2>
 8010ab2:	9b02      	ldr	r3, [sp, #8]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	4683      	mov	fp, r0
 8010ab8:	f6bf ae46 	bge.w	8010748 <__ieee754_rem_pio2+0x80>
 8010abc:	e9da 2100 	ldrd	r2, r1, [sl]
 8010ac0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ac4:	e9ca 2300 	strd	r2, r3, [sl]
 8010ac8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010acc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ad0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010ad4:	e73a      	b.n	801094c <__ieee754_rem_pio2+0x284>
 8010ad6:	bf00      	nop
 8010ad8:	41700000 	.word	0x41700000
 8010adc:	080123a0 	.word	0x080123a0

08010ae0 <__kernel_cos>:
 8010ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ae4:	ec57 6b10 	vmov	r6, r7, d0
 8010ae8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010aec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010af0:	ed8d 1b00 	vstr	d1, [sp]
 8010af4:	da07      	bge.n	8010b06 <__kernel_cos+0x26>
 8010af6:	ee10 0a10 	vmov	r0, s0
 8010afa:	4639      	mov	r1, r7
 8010afc:	f7f0 f82c 	bl	8000b58 <__aeabi_d2iz>
 8010b00:	2800      	cmp	r0, #0
 8010b02:	f000 8088 	beq.w	8010c16 <__kernel_cos+0x136>
 8010b06:	4632      	mov	r2, r6
 8010b08:	463b      	mov	r3, r7
 8010b0a:	4630      	mov	r0, r6
 8010b0c:	4639      	mov	r1, r7
 8010b0e:	f7ef fd73 	bl	80005f8 <__aeabi_dmul>
 8010b12:	4b51      	ldr	r3, [pc, #324]	; (8010c58 <__kernel_cos+0x178>)
 8010b14:	2200      	movs	r2, #0
 8010b16:	4604      	mov	r4, r0
 8010b18:	460d      	mov	r5, r1
 8010b1a:	f7ef fd6d 	bl	80005f8 <__aeabi_dmul>
 8010b1e:	a340      	add	r3, pc, #256	; (adr r3, 8010c20 <__kernel_cos+0x140>)
 8010b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b24:	4682      	mov	sl, r0
 8010b26:	468b      	mov	fp, r1
 8010b28:	4620      	mov	r0, r4
 8010b2a:	4629      	mov	r1, r5
 8010b2c:	f7ef fd64 	bl	80005f8 <__aeabi_dmul>
 8010b30:	a33d      	add	r3, pc, #244	; (adr r3, 8010c28 <__kernel_cos+0x148>)
 8010b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b36:	f7ef fba9 	bl	800028c <__adddf3>
 8010b3a:	4622      	mov	r2, r4
 8010b3c:	462b      	mov	r3, r5
 8010b3e:	f7ef fd5b 	bl	80005f8 <__aeabi_dmul>
 8010b42:	a33b      	add	r3, pc, #236	; (adr r3, 8010c30 <__kernel_cos+0x150>)
 8010b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b48:	f7ef fb9e 	bl	8000288 <__aeabi_dsub>
 8010b4c:	4622      	mov	r2, r4
 8010b4e:	462b      	mov	r3, r5
 8010b50:	f7ef fd52 	bl	80005f8 <__aeabi_dmul>
 8010b54:	a338      	add	r3, pc, #224	; (adr r3, 8010c38 <__kernel_cos+0x158>)
 8010b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5a:	f7ef fb97 	bl	800028c <__adddf3>
 8010b5e:	4622      	mov	r2, r4
 8010b60:	462b      	mov	r3, r5
 8010b62:	f7ef fd49 	bl	80005f8 <__aeabi_dmul>
 8010b66:	a336      	add	r3, pc, #216	; (adr r3, 8010c40 <__kernel_cos+0x160>)
 8010b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b6c:	f7ef fb8c 	bl	8000288 <__aeabi_dsub>
 8010b70:	4622      	mov	r2, r4
 8010b72:	462b      	mov	r3, r5
 8010b74:	f7ef fd40 	bl	80005f8 <__aeabi_dmul>
 8010b78:	a333      	add	r3, pc, #204	; (adr r3, 8010c48 <__kernel_cos+0x168>)
 8010b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b7e:	f7ef fb85 	bl	800028c <__adddf3>
 8010b82:	4622      	mov	r2, r4
 8010b84:	462b      	mov	r3, r5
 8010b86:	f7ef fd37 	bl	80005f8 <__aeabi_dmul>
 8010b8a:	4622      	mov	r2, r4
 8010b8c:	462b      	mov	r3, r5
 8010b8e:	f7ef fd33 	bl	80005f8 <__aeabi_dmul>
 8010b92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b96:	4604      	mov	r4, r0
 8010b98:	460d      	mov	r5, r1
 8010b9a:	4630      	mov	r0, r6
 8010b9c:	4639      	mov	r1, r7
 8010b9e:	f7ef fd2b 	bl	80005f8 <__aeabi_dmul>
 8010ba2:	460b      	mov	r3, r1
 8010ba4:	4602      	mov	r2, r0
 8010ba6:	4629      	mov	r1, r5
 8010ba8:	4620      	mov	r0, r4
 8010baa:	f7ef fb6d 	bl	8000288 <__aeabi_dsub>
 8010bae:	4b2b      	ldr	r3, [pc, #172]	; (8010c5c <__kernel_cos+0x17c>)
 8010bb0:	4598      	cmp	r8, r3
 8010bb2:	4606      	mov	r6, r0
 8010bb4:	460f      	mov	r7, r1
 8010bb6:	dc10      	bgt.n	8010bda <__kernel_cos+0xfa>
 8010bb8:	4602      	mov	r2, r0
 8010bba:	460b      	mov	r3, r1
 8010bbc:	4650      	mov	r0, sl
 8010bbe:	4659      	mov	r1, fp
 8010bc0:	f7ef fb62 	bl	8000288 <__aeabi_dsub>
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	4926      	ldr	r1, [pc, #152]	; (8010c60 <__kernel_cos+0x180>)
 8010bc8:	4602      	mov	r2, r0
 8010bca:	2000      	movs	r0, #0
 8010bcc:	f7ef fb5c 	bl	8000288 <__aeabi_dsub>
 8010bd0:	ec41 0b10 	vmov	d0, r0, r1
 8010bd4:	b003      	add	sp, #12
 8010bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bda:	4b22      	ldr	r3, [pc, #136]	; (8010c64 <__kernel_cos+0x184>)
 8010bdc:	4920      	ldr	r1, [pc, #128]	; (8010c60 <__kernel_cos+0x180>)
 8010bde:	4598      	cmp	r8, r3
 8010be0:	bfcc      	ite	gt
 8010be2:	4d21      	ldrgt	r5, [pc, #132]	; (8010c68 <__kernel_cos+0x188>)
 8010be4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010be8:	2400      	movs	r4, #0
 8010bea:	4622      	mov	r2, r4
 8010bec:	462b      	mov	r3, r5
 8010bee:	2000      	movs	r0, #0
 8010bf0:	f7ef fb4a 	bl	8000288 <__aeabi_dsub>
 8010bf4:	4622      	mov	r2, r4
 8010bf6:	4680      	mov	r8, r0
 8010bf8:	4689      	mov	r9, r1
 8010bfa:	462b      	mov	r3, r5
 8010bfc:	4650      	mov	r0, sl
 8010bfe:	4659      	mov	r1, fp
 8010c00:	f7ef fb42 	bl	8000288 <__aeabi_dsub>
 8010c04:	4632      	mov	r2, r6
 8010c06:	463b      	mov	r3, r7
 8010c08:	f7ef fb3e 	bl	8000288 <__aeabi_dsub>
 8010c0c:	4602      	mov	r2, r0
 8010c0e:	460b      	mov	r3, r1
 8010c10:	4640      	mov	r0, r8
 8010c12:	4649      	mov	r1, r9
 8010c14:	e7da      	b.n	8010bcc <__kernel_cos+0xec>
 8010c16:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010c50 <__kernel_cos+0x170>
 8010c1a:	e7db      	b.n	8010bd4 <__kernel_cos+0xf4>
 8010c1c:	f3af 8000 	nop.w
 8010c20:	be8838d4 	.word	0xbe8838d4
 8010c24:	bda8fae9 	.word	0xbda8fae9
 8010c28:	bdb4b1c4 	.word	0xbdb4b1c4
 8010c2c:	3e21ee9e 	.word	0x3e21ee9e
 8010c30:	809c52ad 	.word	0x809c52ad
 8010c34:	3e927e4f 	.word	0x3e927e4f
 8010c38:	19cb1590 	.word	0x19cb1590
 8010c3c:	3efa01a0 	.word	0x3efa01a0
 8010c40:	16c15177 	.word	0x16c15177
 8010c44:	3f56c16c 	.word	0x3f56c16c
 8010c48:	5555554c 	.word	0x5555554c
 8010c4c:	3fa55555 	.word	0x3fa55555
 8010c50:	00000000 	.word	0x00000000
 8010c54:	3ff00000 	.word	0x3ff00000
 8010c58:	3fe00000 	.word	0x3fe00000
 8010c5c:	3fd33332 	.word	0x3fd33332
 8010c60:	3ff00000 	.word	0x3ff00000
 8010c64:	3fe90000 	.word	0x3fe90000
 8010c68:	3fd20000 	.word	0x3fd20000
 8010c6c:	00000000 	.word	0x00000000

08010c70 <__kernel_rem_pio2>:
 8010c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c74:	ed2d 8b02 	vpush	{d8}
 8010c78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8010c7c:	f112 0f14 	cmn.w	r2, #20
 8010c80:	9308      	str	r3, [sp, #32]
 8010c82:	9101      	str	r1, [sp, #4]
 8010c84:	4bc4      	ldr	r3, [pc, #784]	; (8010f98 <__kernel_rem_pio2+0x328>)
 8010c86:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8010c88:	900b      	str	r0, [sp, #44]	; 0x2c
 8010c8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010c8e:	9302      	str	r3, [sp, #8]
 8010c90:	9b08      	ldr	r3, [sp, #32]
 8010c92:	f103 33ff 	add.w	r3, r3, #4294967295
 8010c96:	bfa8      	it	ge
 8010c98:	1ed4      	subge	r4, r2, #3
 8010c9a:	9306      	str	r3, [sp, #24]
 8010c9c:	bfb2      	itee	lt
 8010c9e:	2400      	movlt	r4, #0
 8010ca0:	2318      	movge	r3, #24
 8010ca2:	fb94 f4f3 	sdivge	r4, r4, r3
 8010ca6:	f06f 0317 	mvn.w	r3, #23
 8010caa:	fb04 3303 	mla	r3, r4, r3, r3
 8010cae:	eb03 0a02 	add.w	sl, r3, r2
 8010cb2:	9b02      	ldr	r3, [sp, #8]
 8010cb4:	9a06      	ldr	r2, [sp, #24]
 8010cb6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8010f88 <__kernel_rem_pio2+0x318>
 8010cba:	eb03 0802 	add.w	r8, r3, r2
 8010cbe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010cc0:	1aa7      	subs	r7, r4, r2
 8010cc2:	ae22      	add	r6, sp, #136	; 0x88
 8010cc4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010cc8:	2500      	movs	r5, #0
 8010cca:	4545      	cmp	r5, r8
 8010ccc:	dd13      	ble.n	8010cf6 <__kernel_rem_pio2+0x86>
 8010cce:	9b08      	ldr	r3, [sp, #32]
 8010cd0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8010f88 <__kernel_rem_pio2+0x318>
 8010cd4:	aa22      	add	r2, sp, #136	; 0x88
 8010cd6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010cda:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8010cde:	f04f 0800 	mov.w	r8, #0
 8010ce2:	9b02      	ldr	r3, [sp, #8]
 8010ce4:	4598      	cmp	r8, r3
 8010ce6:	dc2f      	bgt.n	8010d48 <__kernel_rem_pio2+0xd8>
 8010ce8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010cec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8010cf0:	462f      	mov	r7, r5
 8010cf2:	2600      	movs	r6, #0
 8010cf4:	e01b      	b.n	8010d2e <__kernel_rem_pio2+0xbe>
 8010cf6:	42ef      	cmn	r7, r5
 8010cf8:	d407      	bmi.n	8010d0a <__kernel_rem_pio2+0x9a>
 8010cfa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010cfe:	f7ef fc11 	bl	8000524 <__aeabi_i2d>
 8010d02:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010d06:	3501      	adds	r5, #1
 8010d08:	e7df      	b.n	8010cca <__kernel_rem_pio2+0x5a>
 8010d0a:	ec51 0b18 	vmov	r0, r1, d8
 8010d0e:	e7f8      	b.n	8010d02 <__kernel_rem_pio2+0x92>
 8010d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010d18:	f7ef fc6e 	bl	80005f8 <__aeabi_dmul>
 8010d1c:	4602      	mov	r2, r0
 8010d1e:	460b      	mov	r3, r1
 8010d20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d24:	f7ef fab2 	bl	800028c <__adddf3>
 8010d28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d2c:	3601      	adds	r6, #1
 8010d2e:	9b06      	ldr	r3, [sp, #24]
 8010d30:	429e      	cmp	r6, r3
 8010d32:	f1a7 0708 	sub.w	r7, r7, #8
 8010d36:	ddeb      	ble.n	8010d10 <__kernel_rem_pio2+0xa0>
 8010d38:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010d3c:	f108 0801 	add.w	r8, r8, #1
 8010d40:	ecab 7b02 	vstmia	fp!, {d7}
 8010d44:	3508      	adds	r5, #8
 8010d46:	e7cc      	b.n	8010ce2 <__kernel_rem_pio2+0x72>
 8010d48:	9b02      	ldr	r3, [sp, #8]
 8010d4a:	aa0e      	add	r2, sp, #56	; 0x38
 8010d4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d50:	930d      	str	r3, [sp, #52]	; 0x34
 8010d52:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010d54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010d58:	9c02      	ldr	r4, [sp, #8]
 8010d5a:	930c      	str	r3, [sp, #48]	; 0x30
 8010d5c:	00e3      	lsls	r3, r4, #3
 8010d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8010d60:	ab9a      	add	r3, sp, #616	; 0x268
 8010d62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010d66:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010d6a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8010d6e:	ab72      	add	r3, sp, #456	; 0x1c8
 8010d70:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8010d74:	46c3      	mov	fp, r8
 8010d76:	46a1      	mov	r9, r4
 8010d78:	f1b9 0f00 	cmp.w	r9, #0
 8010d7c:	f1a5 0508 	sub.w	r5, r5, #8
 8010d80:	dc77      	bgt.n	8010e72 <__kernel_rem_pio2+0x202>
 8010d82:	ec47 6b10 	vmov	d0, r6, r7
 8010d86:	4650      	mov	r0, sl
 8010d88:	f000 fdae 	bl	80118e8 <scalbn>
 8010d8c:	ec57 6b10 	vmov	r6, r7, d0
 8010d90:	2200      	movs	r2, #0
 8010d92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010d96:	ee10 0a10 	vmov	r0, s0
 8010d9a:	4639      	mov	r1, r7
 8010d9c:	f7ef fc2c 	bl	80005f8 <__aeabi_dmul>
 8010da0:	ec41 0b10 	vmov	d0, r0, r1
 8010da4:	f000 fd20 	bl	80117e8 <floor>
 8010da8:	4b7c      	ldr	r3, [pc, #496]	; (8010f9c <__kernel_rem_pio2+0x32c>)
 8010daa:	ec51 0b10 	vmov	r0, r1, d0
 8010dae:	2200      	movs	r2, #0
 8010db0:	f7ef fc22 	bl	80005f8 <__aeabi_dmul>
 8010db4:	4602      	mov	r2, r0
 8010db6:	460b      	mov	r3, r1
 8010db8:	4630      	mov	r0, r6
 8010dba:	4639      	mov	r1, r7
 8010dbc:	f7ef fa64 	bl	8000288 <__aeabi_dsub>
 8010dc0:	460f      	mov	r7, r1
 8010dc2:	4606      	mov	r6, r0
 8010dc4:	f7ef fec8 	bl	8000b58 <__aeabi_d2iz>
 8010dc8:	9004      	str	r0, [sp, #16]
 8010dca:	f7ef fbab 	bl	8000524 <__aeabi_i2d>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	4630      	mov	r0, r6
 8010dd4:	4639      	mov	r1, r7
 8010dd6:	f7ef fa57 	bl	8000288 <__aeabi_dsub>
 8010dda:	f1ba 0f00 	cmp.w	sl, #0
 8010dde:	4606      	mov	r6, r0
 8010de0:	460f      	mov	r7, r1
 8010de2:	dd6d      	ble.n	8010ec0 <__kernel_rem_pio2+0x250>
 8010de4:	1e62      	subs	r2, r4, #1
 8010de6:	ab0e      	add	r3, sp, #56	; 0x38
 8010de8:	9d04      	ldr	r5, [sp, #16]
 8010dea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010dee:	f1ca 0118 	rsb	r1, sl, #24
 8010df2:	fa40 f301 	asr.w	r3, r0, r1
 8010df6:	441d      	add	r5, r3
 8010df8:	408b      	lsls	r3, r1
 8010dfa:	1ac0      	subs	r0, r0, r3
 8010dfc:	ab0e      	add	r3, sp, #56	; 0x38
 8010dfe:	9504      	str	r5, [sp, #16]
 8010e00:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010e04:	f1ca 0317 	rsb	r3, sl, #23
 8010e08:	fa40 fb03 	asr.w	fp, r0, r3
 8010e0c:	f1bb 0f00 	cmp.w	fp, #0
 8010e10:	dd65      	ble.n	8010ede <__kernel_rem_pio2+0x26e>
 8010e12:	9b04      	ldr	r3, [sp, #16]
 8010e14:	2200      	movs	r2, #0
 8010e16:	3301      	adds	r3, #1
 8010e18:	9304      	str	r3, [sp, #16]
 8010e1a:	4615      	mov	r5, r2
 8010e1c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010e20:	4294      	cmp	r4, r2
 8010e22:	f300 809c 	bgt.w	8010f5e <__kernel_rem_pio2+0x2ee>
 8010e26:	f1ba 0f00 	cmp.w	sl, #0
 8010e2a:	dd07      	ble.n	8010e3c <__kernel_rem_pio2+0x1cc>
 8010e2c:	f1ba 0f01 	cmp.w	sl, #1
 8010e30:	f000 80c0 	beq.w	8010fb4 <__kernel_rem_pio2+0x344>
 8010e34:	f1ba 0f02 	cmp.w	sl, #2
 8010e38:	f000 80c6 	beq.w	8010fc8 <__kernel_rem_pio2+0x358>
 8010e3c:	f1bb 0f02 	cmp.w	fp, #2
 8010e40:	d14d      	bne.n	8010ede <__kernel_rem_pio2+0x26e>
 8010e42:	4632      	mov	r2, r6
 8010e44:	463b      	mov	r3, r7
 8010e46:	4956      	ldr	r1, [pc, #344]	; (8010fa0 <__kernel_rem_pio2+0x330>)
 8010e48:	2000      	movs	r0, #0
 8010e4a:	f7ef fa1d 	bl	8000288 <__aeabi_dsub>
 8010e4e:	4606      	mov	r6, r0
 8010e50:	460f      	mov	r7, r1
 8010e52:	2d00      	cmp	r5, #0
 8010e54:	d043      	beq.n	8010ede <__kernel_rem_pio2+0x26e>
 8010e56:	4650      	mov	r0, sl
 8010e58:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8010f90 <__kernel_rem_pio2+0x320>
 8010e5c:	f000 fd44 	bl	80118e8 <scalbn>
 8010e60:	4630      	mov	r0, r6
 8010e62:	4639      	mov	r1, r7
 8010e64:	ec53 2b10 	vmov	r2, r3, d0
 8010e68:	f7ef fa0e 	bl	8000288 <__aeabi_dsub>
 8010e6c:	4606      	mov	r6, r0
 8010e6e:	460f      	mov	r7, r1
 8010e70:	e035      	b.n	8010ede <__kernel_rem_pio2+0x26e>
 8010e72:	4b4c      	ldr	r3, [pc, #304]	; (8010fa4 <__kernel_rem_pio2+0x334>)
 8010e74:	2200      	movs	r2, #0
 8010e76:	4630      	mov	r0, r6
 8010e78:	4639      	mov	r1, r7
 8010e7a:	f7ef fbbd 	bl	80005f8 <__aeabi_dmul>
 8010e7e:	f7ef fe6b 	bl	8000b58 <__aeabi_d2iz>
 8010e82:	f7ef fb4f 	bl	8000524 <__aeabi_i2d>
 8010e86:	4602      	mov	r2, r0
 8010e88:	460b      	mov	r3, r1
 8010e8a:	ec43 2b18 	vmov	d8, r2, r3
 8010e8e:	4b46      	ldr	r3, [pc, #280]	; (8010fa8 <__kernel_rem_pio2+0x338>)
 8010e90:	2200      	movs	r2, #0
 8010e92:	f7ef fbb1 	bl	80005f8 <__aeabi_dmul>
 8010e96:	4602      	mov	r2, r0
 8010e98:	460b      	mov	r3, r1
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	4639      	mov	r1, r7
 8010e9e:	f7ef f9f3 	bl	8000288 <__aeabi_dsub>
 8010ea2:	f7ef fe59 	bl	8000b58 <__aeabi_d2iz>
 8010ea6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010eaa:	f84b 0b04 	str.w	r0, [fp], #4
 8010eae:	ec51 0b18 	vmov	r0, r1, d8
 8010eb2:	f7ef f9eb 	bl	800028c <__adddf3>
 8010eb6:	f109 39ff 	add.w	r9, r9, #4294967295
 8010eba:	4606      	mov	r6, r0
 8010ebc:	460f      	mov	r7, r1
 8010ebe:	e75b      	b.n	8010d78 <__kernel_rem_pio2+0x108>
 8010ec0:	d106      	bne.n	8010ed0 <__kernel_rem_pio2+0x260>
 8010ec2:	1e63      	subs	r3, r4, #1
 8010ec4:	aa0e      	add	r2, sp, #56	; 0x38
 8010ec6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010eca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8010ece:	e79d      	b.n	8010e0c <__kernel_rem_pio2+0x19c>
 8010ed0:	4b36      	ldr	r3, [pc, #216]	; (8010fac <__kernel_rem_pio2+0x33c>)
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	f7ef fe16 	bl	8000b04 <__aeabi_dcmpge>
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	d13d      	bne.n	8010f58 <__kernel_rem_pio2+0x2e8>
 8010edc:	4683      	mov	fp, r0
 8010ede:	2200      	movs	r2, #0
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	4630      	mov	r0, r6
 8010ee4:	4639      	mov	r1, r7
 8010ee6:	f7ef fdef 	bl	8000ac8 <__aeabi_dcmpeq>
 8010eea:	2800      	cmp	r0, #0
 8010eec:	f000 80c0 	beq.w	8011070 <__kernel_rem_pio2+0x400>
 8010ef0:	1e65      	subs	r5, r4, #1
 8010ef2:	462b      	mov	r3, r5
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	9902      	ldr	r1, [sp, #8]
 8010ef8:	428b      	cmp	r3, r1
 8010efa:	da6c      	bge.n	8010fd6 <__kernel_rem_pio2+0x366>
 8010efc:	2a00      	cmp	r2, #0
 8010efe:	f000 8089 	beq.w	8011014 <__kernel_rem_pio2+0x3a4>
 8010f02:	ab0e      	add	r3, sp, #56	; 0x38
 8010f04:	f1aa 0a18 	sub.w	sl, sl, #24
 8010f08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	f000 80ad 	beq.w	801106c <__kernel_rem_pio2+0x3fc>
 8010f12:	4650      	mov	r0, sl
 8010f14:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8010f90 <__kernel_rem_pio2+0x320>
 8010f18:	f000 fce6 	bl	80118e8 <scalbn>
 8010f1c:	ab9a      	add	r3, sp, #616	; 0x268
 8010f1e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010f22:	ec57 6b10 	vmov	r6, r7, d0
 8010f26:	00ec      	lsls	r4, r5, #3
 8010f28:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8010f2c:	46aa      	mov	sl, r5
 8010f2e:	f1ba 0f00 	cmp.w	sl, #0
 8010f32:	f280 80d6 	bge.w	80110e2 <__kernel_rem_pio2+0x472>
 8010f36:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8010f88 <__kernel_rem_pio2+0x318>
 8010f3a:	462e      	mov	r6, r5
 8010f3c:	2e00      	cmp	r6, #0
 8010f3e:	f2c0 8104 	blt.w	801114a <__kernel_rem_pio2+0x4da>
 8010f42:	ab72      	add	r3, sp, #456	; 0x1c8
 8010f44:	ed8d 8b06 	vstr	d8, [sp, #24]
 8010f48:	f8df a064 	ldr.w	sl, [pc, #100]	; 8010fb0 <__kernel_rem_pio2+0x340>
 8010f4c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8010f50:	f04f 0800 	mov.w	r8, #0
 8010f54:	1baf      	subs	r7, r5, r6
 8010f56:	e0ea      	b.n	801112e <__kernel_rem_pio2+0x4be>
 8010f58:	f04f 0b02 	mov.w	fp, #2
 8010f5c:	e759      	b.n	8010e12 <__kernel_rem_pio2+0x1a2>
 8010f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8010f62:	b955      	cbnz	r5, 8010f7a <__kernel_rem_pio2+0x30a>
 8010f64:	b123      	cbz	r3, 8010f70 <__kernel_rem_pio2+0x300>
 8010f66:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010f6a:	f8c8 3000 	str.w	r3, [r8]
 8010f6e:	2301      	movs	r3, #1
 8010f70:	3201      	adds	r2, #1
 8010f72:	f108 0804 	add.w	r8, r8, #4
 8010f76:	461d      	mov	r5, r3
 8010f78:	e752      	b.n	8010e20 <__kernel_rem_pio2+0x1b0>
 8010f7a:	1acb      	subs	r3, r1, r3
 8010f7c:	f8c8 3000 	str.w	r3, [r8]
 8010f80:	462b      	mov	r3, r5
 8010f82:	e7f5      	b.n	8010f70 <__kernel_rem_pio2+0x300>
 8010f84:	f3af 8000 	nop.w
	...
 8010f94:	3ff00000 	.word	0x3ff00000
 8010f98:	080124e8 	.word	0x080124e8
 8010f9c:	40200000 	.word	0x40200000
 8010fa0:	3ff00000 	.word	0x3ff00000
 8010fa4:	3e700000 	.word	0x3e700000
 8010fa8:	41700000 	.word	0x41700000
 8010fac:	3fe00000 	.word	0x3fe00000
 8010fb0:	080124a8 	.word	0x080124a8
 8010fb4:	1e62      	subs	r2, r4, #1
 8010fb6:	ab0e      	add	r3, sp, #56	; 0x38
 8010fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fbc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010fc0:	a90e      	add	r1, sp, #56	; 0x38
 8010fc2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010fc6:	e739      	b.n	8010e3c <__kernel_rem_pio2+0x1cc>
 8010fc8:	1e62      	subs	r2, r4, #1
 8010fca:	ab0e      	add	r3, sp, #56	; 0x38
 8010fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fd0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010fd4:	e7f4      	b.n	8010fc0 <__kernel_rem_pio2+0x350>
 8010fd6:	a90e      	add	r1, sp, #56	; 0x38
 8010fd8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010fdc:	3b01      	subs	r3, #1
 8010fde:	430a      	orrs	r2, r1
 8010fe0:	e789      	b.n	8010ef6 <__kernel_rem_pio2+0x286>
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010fe8:	2900      	cmp	r1, #0
 8010fea:	d0fa      	beq.n	8010fe2 <__kernel_rem_pio2+0x372>
 8010fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010fee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8010ff2:	446a      	add	r2, sp
 8010ff4:	3a98      	subs	r2, #152	; 0x98
 8010ff6:	920a      	str	r2, [sp, #40]	; 0x28
 8010ff8:	9a08      	ldr	r2, [sp, #32]
 8010ffa:	18e3      	adds	r3, r4, r3
 8010ffc:	18a5      	adds	r5, r4, r2
 8010ffe:	aa22      	add	r2, sp, #136	; 0x88
 8011000:	f104 0801 	add.w	r8, r4, #1
 8011004:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011008:	9304      	str	r3, [sp, #16]
 801100a:	9b04      	ldr	r3, [sp, #16]
 801100c:	4543      	cmp	r3, r8
 801100e:	da04      	bge.n	801101a <__kernel_rem_pio2+0x3aa>
 8011010:	461c      	mov	r4, r3
 8011012:	e6a3      	b.n	8010d5c <__kernel_rem_pio2+0xec>
 8011014:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011016:	2301      	movs	r3, #1
 8011018:	e7e4      	b.n	8010fe4 <__kernel_rem_pio2+0x374>
 801101a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801101c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011020:	f7ef fa80 	bl	8000524 <__aeabi_i2d>
 8011024:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801102a:	46ab      	mov	fp, r5
 801102c:	461c      	mov	r4, r3
 801102e:	f04f 0900 	mov.w	r9, #0
 8011032:	2600      	movs	r6, #0
 8011034:	2700      	movs	r7, #0
 8011036:	9b06      	ldr	r3, [sp, #24]
 8011038:	4599      	cmp	r9, r3
 801103a:	dd06      	ble.n	801104a <__kernel_rem_pio2+0x3da>
 801103c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801103e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011042:	f108 0801 	add.w	r8, r8, #1
 8011046:	930a      	str	r3, [sp, #40]	; 0x28
 8011048:	e7df      	b.n	801100a <__kernel_rem_pio2+0x39a>
 801104a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801104e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011052:	f7ef fad1 	bl	80005f8 <__aeabi_dmul>
 8011056:	4602      	mov	r2, r0
 8011058:	460b      	mov	r3, r1
 801105a:	4630      	mov	r0, r6
 801105c:	4639      	mov	r1, r7
 801105e:	f7ef f915 	bl	800028c <__adddf3>
 8011062:	f109 0901 	add.w	r9, r9, #1
 8011066:	4606      	mov	r6, r0
 8011068:	460f      	mov	r7, r1
 801106a:	e7e4      	b.n	8011036 <__kernel_rem_pio2+0x3c6>
 801106c:	3d01      	subs	r5, #1
 801106e:	e748      	b.n	8010f02 <__kernel_rem_pio2+0x292>
 8011070:	ec47 6b10 	vmov	d0, r6, r7
 8011074:	f1ca 0000 	rsb	r0, sl, #0
 8011078:	f000 fc36 	bl	80118e8 <scalbn>
 801107c:	ec57 6b10 	vmov	r6, r7, d0
 8011080:	4ba0      	ldr	r3, [pc, #640]	; (8011304 <__kernel_rem_pio2+0x694>)
 8011082:	ee10 0a10 	vmov	r0, s0
 8011086:	2200      	movs	r2, #0
 8011088:	4639      	mov	r1, r7
 801108a:	f7ef fd3b 	bl	8000b04 <__aeabi_dcmpge>
 801108e:	b1f8      	cbz	r0, 80110d0 <__kernel_rem_pio2+0x460>
 8011090:	4b9d      	ldr	r3, [pc, #628]	; (8011308 <__kernel_rem_pio2+0x698>)
 8011092:	2200      	movs	r2, #0
 8011094:	4630      	mov	r0, r6
 8011096:	4639      	mov	r1, r7
 8011098:	f7ef faae 	bl	80005f8 <__aeabi_dmul>
 801109c:	f7ef fd5c 	bl	8000b58 <__aeabi_d2iz>
 80110a0:	4680      	mov	r8, r0
 80110a2:	f7ef fa3f 	bl	8000524 <__aeabi_i2d>
 80110a6:	4b97      	ldr	r3, [pc, #604]	; (8011304 <__kernel_rem_pio2+0x694>)
 80110a8:	2200      	movs	r2, #0
 80110aa:	f7ef faa5 	bl	80005f8 <__aeabi_dmul>
 80110ae:	460b      	mov	r3, r1
 80110b0:	4602      	mov	r2, r0
 80110b2:	4639      	mov	r1, r7
 80110b4:	4630      	mov	r0, r6
 80110b6:	f7ef f8e7 	bl	8000288 <__aeabi_dsub>
 80110ba:	f7ef fd4d 	bl	8000b58 <__aeabi_d2iz>
 80110be:	1c65      	adds	r5, r4, #1
 80110c0:	ab0e      	add	r3, sp, #56	; 0x38
 80110c2:	f10a 0a18 	add.w	sl, sl, #24
 80110c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80110ca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80110ce:	e720      	b.n	8010f12 <__kernel_rem_pio2+0x2a2>
 80110d0:	4630      	mov	r0, r6
 80110d2:	4639      	mov	r1, r7
 80110d4:	f7ef fd40 	bl	8000b58 <__aeabi_d2iz>
 80110d8:	ab0e      	add	r3, sp, #56	; 0x38
 80110da:	4625      	mov	r5, r4
 80110dc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80110e0:	e717      	b.n	8010f12 <__kernel_rem_pio2+0x2a2>
 80110e2:	ab0e      	add	r3, sp, #56	; 0x38
 80110e4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80110e8:	f7ef fa1c 	bl	8000524 <__aeabi_i2d>
 80110ec:	4632      	mov	r2, r6
 80110ee:	463b      	mov	r3, r7
 80110f0:	f7ef fa82 	bl	80005f8 <__aeabi_dmul>
 80110f4:	4b84      	ldr	r3, [pc, #528]	; (8011308 <__kernel_rem_pio2+0x698>)
 80110f6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80110fa:	2200      	movs	r2, #0
 80110fc:	4630      	mov	r0, r6
 80110fe:	4639      	mov	r1, r7
 8011100:	f7ef fa7a 	bl	80005f8 <__aeabi_dmul>
 8011104:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011108:	4606      	mov	r6, r0
 801110a:	460f      	mov	r7, r1
 801110c:	e70f      	b.n	8010f2e <__kernel_rem_pio2+0x2be>
 801110e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8011112:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8011116:	f7ef fa6f 	bl	80005f8 <__aeabi_dmul>
 801111a:	4602      	mov	r2, r0
 801111c:	460b      	mov	r3, r1
 801111e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011122:	f7ef f8b3 	bl	800028c <__adddf3>
 8011126:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801112a:	f108 0801 	add.w	r8, r8, #1
 801112e:	9b02      	ldr	r3, [sp, #8]
 8011130:	4598      	cmp	r8, r3
 8011132:	dc01      	bgt.n	8011138 <__kernel_rem_pio2+0x4c8>
 8011134:	45b8      	cmp	r8, r7
 8011136:	ddea      	ble.n	801110e <__kernel_rem_pio2+0x49e>
 8011138:	ed9d 7b06 	vldr	d7, [sp, #24]
 801113c:	ab4a      	add	r3, sp, #296	; 0x128
 801113e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011142:	ed87 7b00 	vstr	d7, [r7]
 8011146:	3e01      	subs	r6, #1
 8011148:	e6f8      	b.n	8010f3c <__kernel_rem_pio2+0x2cc>
 801114a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801114c:	2b02      	cmp	r3, #2
 801114e:	dc0b      	bgt.n	8011168 <__kernel_rem_pio2+0x4f8>
 8011150:	2b00      	cmp	r3, #0
 8011152:	dc35      	bgt.n	80111c0 <__kernel_rem_pio2+0x550>
 8011154:	d059      	beq.n	801120a <__kernel_rem_pio2+0x59a>
 8011156:	9b04      	ldr	r3, [sp, #16]
 8011158:	f003 0007 	and.w	r0, r3, #7
 801115c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011160:	ecbd 8b02 	vpop	{d8}
 8011164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011168:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801116a:	2b03      	cmp	r3, #3
 801116c:	d1f3      	bne.n	8011156 <__kernel_rem_pio2+0x4e6>
 801116e:	ab4a      	add	r3, sp, #296	; 0x128
 8011170:	4423      	add	r3, r4
 8011172:	9306      	str	r3, [sp, #24]
 8011174:	461c      	mov	r4, r3
 8011176:	469a      	mov	sl, r3
 8011178:	9502      	str	r5, [sp, #8]
 801117a:	9b02      	ldr	r3, [sp, #8]
 801117c:	2b00      	cmp	r3, #0
 801117e:	f1aa 0a08 	sub.w	sl, sl, #8
 8011182:	dc6b      	bgt.n	801125c <__kernel_rem_pio2+0x5ec>
 8011184:	46aa      	mov	sl, r5
 8011186:	f1ba 0f01 	cmp.w	sl, #1
 801118a:	f1a4 0408 	sub.w	r4, r4, #8
 801118e:	f300 8085 	bgt.w	801129c <__kernel_rem_pio2+0x62c>
 8011192:	9c06      	ldr	r4, [sp, #24]
 8011194:	2000      	movs	r0, #0
 8011196:	3408      	adds	r4, #8
 8011198:	2100      	movs	r1, #0
 801119a:	2d01      	cmp	r5, #1
 801119c:	f300 809d 	bgt.w	80112da <__kernel_rem_pio2+0x66a>
 80111a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80111a4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80111a8:	f1bb 0f00 	cmp.w	fp, #0
 80111ac:	f040 809b 	bne.w	80112e6 <__kernel_rem_pio2+0x676>
 80111b0:	9b01      	ldr	r3, [sp, #4]
 80111b2:	e9c3 5600 	strd	r5, r6, [r3]
 80111b6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80111ba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80111be:	e7ca      	b.n	8011156 <__kernel_rem_pio2+0x4e6>
 80111c0:	3408      	adds	r4, #8
 80111c2:	ab4a      	add	r3, sp, #296	; 0x128
 80111c4:	441c      	add	r4, r3
 80111c6:	462e      	mov	r6, r5
 80111c8:	2000      	movs	r0, #0
 80111ca:	2100      	movs	r1, #0
 80111cc:	2e00      	cmp	r6, #0
 80111ce:	da36      	bge.n	801123e <__kernel_rem_pio2+0x5ce>
 80111d0:	f1bb 0f00 	cmp.w	fp, #0
 80111d4:	d039      	beq.n	801124a <__kernel_rem_pio2+0x5da>
 80111d6:	4602      	mov	r2, r0
 80111d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111dc:	9c01      	ldr	r4, [sp, #4]
 80111de:	e9c4 2300 	strd	r2, r3, [r4]
 80111e2:	4602      	mov	r2, r0
 80111e4:	460b      	mov	r3, r1
 80111e6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80111ea:	f7ef f84d 	bl	8000288 <__aeabi_dsub>
 80111ee:	ae4c      	add	r6, sp, #304	; 0x130
 80111f0:	2401      	movs	r4, #1
 80111f2:	42a5      	cmp	r5, r4
 80111f4:	da2c      	bge.n	8011250 <__kernel_rem_pio2+0x5e0>
 80111f6:	f1bb 0f00 	cmp.w	fp, #0
 80111fa:	d002      	beq.n	8011202 <__kernel_rem_pio2+0x592>
 80111fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011200:	4619      	mov	r1, r3
 8011202:	9b01      	ldr	r3, [sp, #4]
 8011204:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011208:	e7a5      	b.n	8011156 <__kernel_rem_pio2+0x4e6>
 801120a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801120e:	eb0d 0403 	add.w	r4, sp, r3
 8011212:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011216:	2000      	movs	r0, #0
 8011218:	2100      	movs	r1, #0
 801121a:	2d00      	cmp	r5, #0
 801121c:	da09      	bge.n	8011232 <__kernel_rem_pio2+0x5c2>
 801121e:	f1bb 0f00 	cmp.w	fp, #0
 8011222:	d002      	beq.n	801122a <__kernel_rem_pio2+0x5ba>
 8011224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011228:	4619      	mov	r1, r3
 801122a:	9b01      	ldr	r3, [sp, #4]
 801122c:	e9c3 0100 	strd	r0, r1, [r3]
 8011230:	e791      	b.n	8011156 <__kernel_rem_pio2+0x4e6>
 8011232:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011236:	f7ef f829 	bl	800028c <__adddf3>
 801123a:	3d01      	subs	r5, #1
 801123c:	e7ed      	b.n	801121a <__kernel_rem_pio2+0x5aa>
 801123e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011242:	f7ef f823 	bl	800028c <__adddf3>
 8011246:	3e01      	subs	r6, #1
 8011248:	e7c0      	b.n	80111cc <__kernel_rem_pio2+0x55c>
 801124a:	4602      	mov	r2, r0
 801124c:	460b      	mov	r3, r1
 801124e:	e7c5      	b.n	80111dc <__kernel_rem_pio2+0x56c>
 8011250:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011254:	f7ef f81a 	bl	800028c <__adddf3>
 8011258:	3401      	adds	r4, #1
 801125a:	e7ca      	b.n	80111f2 <__kernel_rem_pio2+0x582>
 801125c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011260:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011264:	9b02      	ldr	r3, [sp, #8]
 8011266:	3b01      	subs	r3, #1
 8011268:	9302      	str	r3, [sp, #8]
 801126a:	4632      	mov	r2, r6
 801126c:	463b      	mov	r3, r7
 801126e:	4640      	mov	r0, r8
 8011270:	4649      	mov	r1, r9
 8011272:	f7ef f80b 	bl	800028c <__adddf3>
 8011276:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801127a:	4602      	mov	r2, r0
 801127c:	460b      	mov	r3, r1
 801127e:	4640      	mov	r0, r8
 8011280:	4649      	mov	r1, r9
 8011282:	f7ef f801 	bl	8000288 <__aeabi_dsub>
 8011286:	4632      	mov	r2, r6
 8011288:	463b      	mov	r3, r7
 801128a:	f7ee ffff 	bl	800028c <__adddf3>
 801128e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011292:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011296:	ed8a 7b00 	vstr	d7, [sl]
 801129a:	e76e      	b.n	801117a <__kernel_rem_pio2+0x50a>
 801129c:	e9d4 8900 	ldrd	r8, r9, [r4]
 80112a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80112a4:	4640      	mov	r0, r8
 80112a6:	4632      	mov	r2, r6
 80112a8:	463b      	mov	r3, r7
 80112aa:	4649      	mov	r1, r9
 80112ac:	f7ee ffee 	bl	800028c <__adddf3>
 80112b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112b4:	4602      	mov	r2, r0
 80112b6:	460b      	mov	r3, r1
 80112b8:	4640      	mov	r0, r8
 80112ba:	4649      	mov	r1, r9
 80112bc:	f7ee ffe4 	bl	8000288 <__aeabi_dsub>
 80112c0:	4632      	mov	r2, r6
 80112c2:	463b      	mov	r3, r7
 80112c4:	f7ee ffe2 	bl	800028c <__adddf3>
 80112c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80112cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80112d0:	ed84 7b00 	vstr	d7, [r4]
 80112d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112d8:	e755      	b.n	8011186 <__kernel_rem_pio2+0x516>
 80112da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80112de:	f7ee ffd5 	bl	800028c <__adddf3>
 80112e2:	3d01      	subs	r5, #1
 80112e4:	e759      	b.n	801119a <__kernel_rem_pio2+0x52a>
 80112e6:	9b01      	ldr	r3, [sp, #4]
 80112e8:	9a01      	ldr	r2, [sp, #4]
 80112ea:	601d      	str	r5, [r3, #0]
 80112ec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80112f0:	605c      	str	r4, [r3, #4]
 80112f2:	609f      	str	r7, [r3, #8]
 80112f4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80112f8:	60d3      	str	r3, [r2, #12]
 80112fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80112fe:	6110      	str	r0, [r2, #16]
 8011300:	6153      	str	r3, [r2, #20]
 8011302:	e728      	b.n	8011156 <__kernel_rem_pio2+0x4e6>
 8011304:	41700000 	.word	0x41700000
 8011308:	3e700000 	.word	0x3e700000
 801130c:	00000000 	.word	0x00000000

08011310 <__kernel_sin>:
 8011310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011314:	ed2d 8b04 	vpush	{d8-d9}
 8011318:	eeb0 8a41 	vmov.f32	s16, s2
 801131c:	eef0 8a61 	vmov.f32	s17, s3
 8011320:	ec55 4b10 	vmov	r4, r5, d0
 8011324:	b083      	sub	sp, #12
 8011326:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801132a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801132e:	9001      	str	r0, [sp, #4]
 8011330:	da06      	bge.n	8011340 <__kernel_sin+0x30>
 8011332:	ee10 0a10 	vmov	r0, s0
 8011336:	4629      	mov	r1, r5
 8011338:	f7ef fc0e 	bl	8000b58 <__aeabi_d2iz>
 801133c:	2800      	cmp	r0, #0
 801133e:	d051      	beq.n	80113e4 <__kernel_sin+0xd4>
 8011340:	4622      	mov	r2, r4
 8011342:	462b      	mov	r3, r5
 8011344:	4620      	mov	r0, r4
 8011346:	4629      	mov	r1, r5
 8011348:	f7ef f956 	bl	80005f8 <__aeabi_dmul>
 801134c:	4682      	mov	sl, r0
 801134e:	468b      	mov	fp, r1
 8011350:	4602      	mov	r2, r0
 8011352:	460b      	mov	r3, r1
 8011354:	4620      	mov	r0, r4
 8011356:	4629      	mov	r1, r5
 8011358:	f7ef f94e 	bl	80005f8 <__aeabi_dmul>
 801135c:	a341      	add	r3, pc, #260	; (adr r3, 8011464 <__kernel_sin+0x154>)
 801135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011362:	4680      	mov	r8, r0
 8011364:	4689      	mov	r9, r1
 8011366:	4650      	mov	r0, sl
 8011368:	4659      	mov	r1, fp
 801136a:	f7ef f945 	bl	80005f8 <__aeabi_dmul>
 801136e:	a33f      	add	r3, pc, #252	; (adr r3, 801146c <__kernel_sin+0x15c>)
 8011370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011374:	f7ee ff88 	bl	8000288 <__aeabi_dsub>
 8011378:	4652      	mov	r2, sl
 801137a:	465b      	mov	r3, fp
 801137c:	f7ef f93c 	bl	80005f8 <__aeabi_dmul>
 8011380:	a33c      	add	r3, pc, #240	; (adr r3, 8011474 <__kernel_sin+0x164>)
 8011382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011386:	f7ee ff81 	bl	800028c <__adddf3>
 801138a:	4652      	mov	r2, sl
 801138c:	465b      	mov	r3, fp
 801138e:	f7ef f933 	bl	80005f8 <__aeabi_dmul>
 8011392:	a33a      	add	r3, pc, #232	; (adr r3, 801147c <__kernel_sin+0x16c>)
 8011394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011398:	f7ee ff76 	bl	8000288 <__aeabi_dsub>
 801139c:	4652      	mov	r2, sl
 801139e:	465b      	mov	r3, fp
 80113a0:	f7ef f92a 	bl	80005f8 <__aeabi_dmul>
 80113a4:	a337      	add	r3, pc, #220	; (adr r3, 8011484 <__kernel_sin+0x174>)
 80113a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113aa:	f7ee ff6f 	bl	800028c <__adddf3>
 80113ae:	9b01      	ldr	r3, [sp, #4]
 80113b0:	4606      	mov	r6, r0
 80113b2:	460f      	mov	r7, r1
 80113b4:	b9eb      	cbnz	r3, 80113f2 <__kernel_sin+0xe2>
 80113b6:	4602      	mov	r2, r0
 80113b8:	460b      	mov	r3, r1
 80113ba:	4650      	mov	r0, sl
 80113bc:	4659      	mov	r1, fp
 80113be:	f7ef f91b 	bl	80005f8 <__aeabi_dmul>
 80113c2:	a325      	add	r3, pc, #148	; (adr r3, 8011458 <__kernel_sin+0x148>)
 80113c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c8:	f7ee ff5e 	bl	8000288 <__aeabi_dsub>
 80113cc:	4642      	mov	r2, r8
 80113ce:	464b      	mov	r3, r9
 80113d0:	f7ef f912 	bl	80005f8 <__aeabi_dmul>
 80113d4:	4602      	mov	r2, r0
 80113d6:	460b      	mov	r3, r1
 80113d8:	4620      	mov	r0, r4
 80113da:	4629      	mov	r1, r5
 80113dc:	f7ee ff56 	bl	800028c <__adddf3>
 80113e0:	4604      	mov	r4, r0
 80113e2:	460d      	mov	r5, r1
 80113e4:	ec45 4b10 	vmov	d0, r4, r5
 80113e8:	b003      	add	sp, #12
 80113ea:	ecbd 8b04 	vpop	{d8-d9}
 80113ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113f2:	4b1b      	ldr	r3, [pc, #108]	; (8011460 <__kernel_sin+0x150>)
 80113f4:	ec51 0b18 	vmov	r0, r1, d8
 80113f8:	2200      	movs	r2, #0
 80113fa:	f7ef f8fd 	bl	80005f8 <__aeabi_dmul>
 80113fe:	4632      	mov	r2, r6
 8011400:	ec41 0b19 	vmov	d9, r0, r1
 8011404:	463b      	mov	r3, r7
 8011406:	4640      	mov	r0, r8
 8011408:	4649      	mov	r1, r9
 801140a:	f7ef f8f5 	bl	80005f8 <__aeabi_dmul>
 801140e:	4602      	mov	r2, r0
 8011410:	460b      	mov	r3, r1
 8011412:	ec51 0b19 	vmov	r0, r1, d9
 8011416:	f7ee ff37 	bl	8000288 <__aeabi_dsub>
 801141a:	4652      	mov	r2, sl
 801141c:	465b      	mov	r3, fp
 801141e:	f7ef f8eb 	bl	80005f8 <__aeabi_dmul>
 8011422:	ec53 2b18 	vmov	r2, r3, d8
 8011426:	f7ee ff2f 	bl	8000288 <__aeabi_dsub>
 801142a:	a30b      	add	r3, pc, #44	; (adr r3, 8011458 <__kernel_sin+0x148>)
 801142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011430:	4606      	mov	r6, r0
 8011432:	460f      	mov	r7, r1
 8011434:	4640      	mov	r0, r8
 8011436:	4649      	mov	r1, r9
 8011438:	f7ef f8de 	bl	80005f8 <__aeabi_dmul>
 801143c:	4602      	mov	r2, r0
 801143e:	460b      	mov	r3, r1
 8011440:	4630      	mov	r0, r6
 8011442:	4639      	mov	r1, r7
 8011444:	f7ee ff22 	bl	800028c <__adddf3>
 8011448:	4602      	mov	r2, r0
 801144a:	460b      	mov	r3, r1
 801144c:	4620      	mov	r0, r4
 801144e:	4629      	mov	r1, r5
 8011450:	f7ee ff1a 	bl	8000288 <__aeabi_dsub>
 8011454:	e7c4      	b.n	80113e0 <__kernel_sin+0xd0>
 8011456:	bf00      	nop
 8011458:	55555549 	.word	0x55555549
 801145c:	3fc55555 	.word	0x3fc55555
 8011460:	3fe00000 	.word	0x3fe00000
 8011464:	5acfd57c 	.word	0x5acfd57c
 8011468:	3de5d93a 	.word	0x3de5d93a
 801146c:	8a2b9ceb 	.word	0x8a2b9ceb
 8011470:	3e5ae5e6 	.word	0x3e5ae5e6
 8011474:	57b1fe7d 	.word	0x57b1fe7d
 8011478:	3ec71de3 	.word	0x3ec71de3
 801147c:	19c161d5 	.word	0x19c161d5
 8011480:	3f2a01a0 	.word	0x3f2a01a0
 8011484:	1110f8a6 	.word	0x1110f8a6
 8011488:	3f811111 	.word	0x3f811111
 801148c:	00000000 	.word	0x00000000

08011490 <atan>:
 8011490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011494:	ec55 4b10 	vmov	r4, r5, d0
 8011498:	4bc3      	ldr	r3, [pc, #780]	; (80117a8 <atan+0x318>)
 801149a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801149e:	429e      	cmp	r6, r3
 80114a0:	46ab      	mov	fp, r5
 80114a2:	dd18      	ble.n	80114d6 <atan+0x46>
 80114a4:	4bc1      	ldr	r3, [pc, #772]	; (80117ac <atan+0x31c>)
 80114a6:	429e      	cmp	r6, r3
 80114a8:	dc01      	bgt.n	80114ae <atan+0x1e>
 80114aa:	d109      	bne.n	80114c0 <atan+0x30>
 80114ac:	b144      	cbz	r4, 80114c0 <atan+0x30>
 80114ae:	4622      	mov	r2, r4
 80114b0:	462b      	mov	r3, r5
 80114b2:	4620      	mov	r0, r4
 80114b4:	4629      	mov	r1, r5
 80114b6:	f7ee fee9 	bl	800028c <__adddf3>
 80114ba:	4604      	mov	r4, r0
 80114bc:	460d      	mov	r5, r1
 80114be:	e006      	b.n	80114ce <atan+0x3e>
 80114c0:	f1bb 0f00 	cmp.w	fp, #0
 80114c4:	f300 8131 	bgt.w	801172a <atan+0x29a>
 80114c8:	a59b      	add	r5, pc, #620	; (adr r5, 8011738 <atan+0x2a8>)
 80114ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80114ce:	ec45 4b10 	vmov	d0, r4, r5
 80114d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114d6:	4bb6      	ldr	r3, [pc, #728]	; (80117b0 <atan+0x320>)
 80114d8:	429e      	cmp	r6, r3
 80114da:	dc14      	bgt.n	8011506 <atan+0x76>
 80114dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80114e0:	429e      	cmp	r6, r3
 80114e2:	dc0d      	bgt.n	8011500 <atan+0x70>
 80114e4:	a396      	add	r3, pc, #600	; (adr r3, 8011740 <atan+0x2b0>)
 80114e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ea:	ee10 0a10 	vmov	r0, s0
 80114ee:	4629      	mov	r1, r5
 80114f0:	f7ee fecc 	bl	800028c <__adddf3>
 80114f4:	4baf      	ldr	r3, [pc, #700]	; (80117b4 <atan+0x324>)
 80114f6:	2200      	movs	r2, #0
 80114f8:	f7ef fb0e 	bl	8000b18 <__aeabi_dcmpgt>
 80114fc:	2800      	cmp	r0, #0
 80114fe:	d1e6      	bne.n	80114ce <atan+0x3e>
 8011500:	f04f 3aff 	mov.w	sl, #4294967295
 8011504:	e02b      	b.n	801155e <atan+0xce>
 8011506:	f000 f963 	bl	80117d0 <fabs>
 801150a:	4bab      	ldr	r3, [pc, #684]	; (80117b8 <atan+0x328>)
 801150c:	429e      	cmp	r6, r3
 801150e:	ec55 4b10 	vmov	r4, r5, d0
 8011512:	f300 80bf 	bgt.w	8011694 <atan+0x204>
 8011516:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801151a:	429e      	cmp	r6, r3
 801151c:	f300 80a0 	bgt.w	8011660 <atan+0x1d0>
 8011520:	ee10 2a10 	vmov	r2, s0
 8011524:	ee10 0a10 	vmov	r0, s0
 8011528:	462b      	mov	r3, r5
 801152a:	4629      	mov	r1, r5
 801152c:	f7ee feae 	bl	800028c <__adddf3>
 8011530:	4ba0      	ldr	r3, [pc, #640]	; (80117b4 <atan+0x324>)
 8011532:	2200      	movs	r2, #0
 8011534:	f7ee fea8 	bl	8000288 <__aeabi_dsub>
 8011538:	2200      	movs	r2, #0
 801153a:	4606      	mov	r6, r0
 801153c:	460f      	mov	r7, r1
 801153e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011542:	4620      	mov	r0, r4
 8011544:	4629      	mov	r1, r5
 8011546:	f7ee fea1 	bl	800028c <__adddf3>
 801154a:	4602      	mov	r2, r0
 801154c:	460b      	mov	r3, r1
 801154e:	4630      	mov	r0, r6
 8011550:	4639      	mov	r1, r7
 8011552:	f7ef f97b 	bl	800084c <__aeabi_ddiv>
 8011556:	f04f 0a00 	mov.w	sl, #0
 801155a:	4604      	mov	r4, r0
 801155c:	460d      	mov	r5, r1
 801155e:	4622      	mov	r2, r4
 8011560:	462b      	mov	r3, r5
 8011562:	4620      	mov	r0, r4
 8011564:	4629      	mov	r1, r5
 8011566:	f7ef f847 	bl	80005f8 <__aeabi_dmul>
 801156a:	4602      	mov	r2, r0
 801156c:	460b      	mov	r3, r1
 801156e:	4680      	mov	r8, r0
 8011570:	4689      	mov	r9, r1
 8011572:	f7ef f841 	bl	80005f8 <__aeabi_dmul>
 8011576:	a374      	add	r3, pc, #464	; (adr r3, 8011748 <atan+0x2b8>)
 8011578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801157c:	4606      	mov	r6, r0
 801157e:	460f      	mov	r7, r1
 8011580:	f7ef f83a 	bl	80005f8 <__aeabi_dmul>
 8011584:	a372      	add	r3, pc, #456	; (adr r3, 8011750 <atan+0x2c0>)
 8011586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801158a:	f7ee fe7f 	bl	800028c <__adddf3>
 801158e:	4632      	mov	r2, r6
 8011590:	463b      	mov	r3, r7
 8011592:	f7ef f831 	bl	80005f8 <__aeabi_dmul>
 8011596:	a370      	add	r3, pc, #448	; (adr r3, 8011758 <atan+0x2c8>)
 8011598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801159c:	f7ee fe76 	bl	800028c <__adddf3>
 80115a0:	4632      	mov	r2, r6
 80115a2:	463b      	mov	r3, r7
 80115a4:	f7ef f828 	bl	80005f8 <__aeabi_dmul>
 80115a8:	a36d      	add	r3, pc, #436	; (adr r3, 8011760 <atan+0x2d0>)
 80115aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ae:	f7ee fe6d 	bl	800028c <__adddf3>
 80115b2:	4632      	mov	r2, r6
 80115b4:	463b      	mov	r3, r7
 80115b6:	f7ef f81f 	bl	80005f8 <__aeabi_dmul>
 80115ba:	a36b      	add	r3, pc, #428	; (adr r3, 8011768 <atan+0x2d8>)
 80115bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c0:	f7ee fe64 	bl	800028c <__adddf3>
 80115c4:	4632      	mov	r2, r6
 80115c6:	463b      	mov	r3, r7
 80115c8:	f7ef f816 	bl	80005f8 <__aeabi_dmul>
 80115cc:	a368      	add	r3, pc, #416	; (adr r3, 8011770 <atan+0x2e0>)
 80115ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d2:	f7ee fe5b 	bl	800028c <__adddf3>
 80115d6:	4642      	mov	r2, r8
 80115d8:	464b      	mov	r3, r9
 80115da:	f7ef f80d 	bl	80005f8 <__aeabi_dmul>
 80115de:	a366      	add	r3, pc, #408	; (adr r3, 8011778 <atan+0x2e8>)
 80115e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e4:	4680      	mov	r8, r0
 80115e6:	4689      	mov	r9, r1
 80115e8:	4630      	mov	r0, r6
 80115ea:	4639      	mov	r1, r7
 80115ec:	f7ef f804 	bl	80005f8 <__aeabi_dmul>
 80115f0:	a363      	add	r3, pc, #396	; (adr r3, 8011780 <atan+0x2f0>)
 80115f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f6:	f7ee fe47 	bl	8000288 <__aeabi_dsub>
 80115fa:	4632      	mov	r2, r6
 80115fc:	463b      	mov	r3, r7
 80115fe:	f7ee fffb 	bl	80005f8 <__aeabi_dmul>
 8011602:	a361      	add	r3, pc, #388	; (adr r3, 8011788 <atan+0x2f8>)
 8011604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011608:	f7ee fe3e 	bl	8000288 <__aeabi_dsub>
 801160c:	4632      	mov	r2, r6
 801160e:	463b      	mov	r3, r7
 8011610:	f7ee fff2 	bl	80005f8 <__aeabi_dmul>
 8011614:	a35e      	add	r3, pc, #376	; (adr r3, 8011790 <atan+0x300>)
 8011616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801161a:	f7ee fe35 	bl	8000288 <__aeabi_dsub>
 801161e:	4632      	mov	r2, r6
 8011620:	463b      	mov	r3, r7
 8011622:	f7ee ffe9 	bl	80005f8 <__aeabi_dmul>
 8011626:	a35c      	add	r3, pc, #368	; (adr r3, 8011798 <atan+0x308>)
 8011628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801162c:	f7ee fe2c 	bl	8000288 <__aeabi_dsub>
 8011630:	4632      	mov	r2, r6
 8011632:	463b      	mov	r3, r7
 8011634:	f7ee ffe0 	bl	80005f8 <__aeabi_dmul>
 8011638:	4602      	mov	r2, r0
 801163a:	460b      	mov	r3, r1
 801163c:	4640      	mov	r0, r8
 801163e:	4649      	mov	r1, r9
 8011640:	f7ee fe24 	bl	800028c <__adddf3>
 8011644:	4622      	mov	r2, r4
 8011646:	462b      	mov	r3, r5
 8011648:	f7ee ffd6 	bl	80005f8 <__aeabi_dmul>
 801164c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011650:	4602      	mov	r2, r0
 8011652:	460b      	mov	r3, r1
 8011654:	d14b      	bne.n	80116ee <atan+0x25e>
 8011656:	4620      	mov	r0, r4
 8011658:	4629      	mov	r1, r5
 801165a:	f7ee fe15 	bl	8000288 <__aeabi_dsub>
 801165e:	e72c      	b.n	80114ba <atan+0x2a>
 8011660:	ee10 0a10 	vmov	r0, s0
 8011664:	4b53      	ldr	r3, [pc, #332]	; (80117b4 <atan+0x324>)
 8011666:	2200      	movs	r2, #0
 8011668:	4629      	mov	r1, r5
 801166a:	f7ee fe0d 	bl	8000288 <__aeabi_dsub>
 801166e:	4b51      	ldr	r3, [pc, #324]	; (80117b4 <atan+0x324>)
 8011670:	4606      	mov	r6, r0
 8011672:	460f      	mov	r7, r1
 8011674:	2200      	movs	r2, #0
 8011676:	4620      	mov	r0, r4
 8011678:	4629      	mov	r1, r5
 801167a:	f7ee fe07 	bl	800028c <__adddf3>
 801167e:	4602      	mov	r2, r0
 8011680:	460b      	mov	r3, r1
 8011682:	4630      	mov	r0, r6
 8011684:	4639      	mov	r1, r7
 8011686:	f7ef f8e1 	bl	800084c <__aeabi_ddiv>
 801168a:	f04f 0a01 	mov.w	sl, #1
 801168e:	4604      	mov	r4, r0
 8011690:	460d      	mov	r5, r1
 8011692:	e764      	b.n	801155e <atan+0xce>
 8011694:	4b49      	ldr	r3, [pc, #292]	; (80117bc <atan+0x32c>)
 8011696:	429e      	cmp	r6, r3
 8011698:	da1d      	bge.n	80116d6 <atan+0x246>
 801169a:	ee10 0a10 	vmov	r0, s0
 801169e:	4b48      	ldr	r3, [pc, #288]	; (80117c0 <atan+0x330>)
 80116a0:	2200      	movs	r2, #0
 80116a2:	4629      	mov	r1, r5
 80116a4:	f7ee fdf0 	bl	8000288 <__aeabi_dsub>
 80116a8:	4b45      	ldr	r3, [pc, #276]	; (80117c0 <atan+0x330>)
 80116aa:	4606      	mov	r6, r0
 80116ac:	460f      	mov	r7, r1
 80116ae:	2200      	movs	r2, #0
 80116b0:	4620      	mov	r0, r4
 80116b2:	4629      	mov	r1, r5
 80116b4:	f7ee ffa0 	bl	80005f8 <__aeabi_dmul>
 80116b8:	4b3e      	ldr	r3, [pc, #248]	; (80117b4 <atan+0x324>)
 80116ba:	2200      	movs	r2, #0
 80116bc:	f7ee fde6 	bl	800028c <__adddf3>
 80116c0:	4602      	mov	r2, r0
 80116c2:	460b      	mov	r3, r1
 80116c4:	4630      	mov	r0, r6
 80116c6:	4639      	mov	r1, r7
 80116c8:	f7ef f8c0 	bl	800084c <__aeabi_ddiv>
 80116cc:	f04f 0a02 	mov.w	sl, #2
 80116d0:	4604      	mov	r4, r0
 80116d2:	460d      	mov	r5, r1
 80116d4:	e743      	b.n	801155e <atan+0xce>
 80116d6:	462b      	mov	r3, r5
 80116d8:	ee10 2a10 	vmov	r2, s0
 80116dc:	4939      	ldr	r1, [pc, #228]	; (80117c4 <atan+0x334>)
 80116de:	2000      	movs	r0, #0
 80116e0:	f7ef f8b4 	bl	800084c <__aeabi_ddiv>
 80116e4:	f04f 0a03 	mov.w	sl, #3
 80116e8:	4604      	mov	r4, r0
 80116ea:	460d      	mov	r5, r1
 80116ec:	e737      	b.n	801155e <atan+0xce>
 80116ee:	4b36      	ldr	r3, [pc, #216]	; (80117c8 <atan+0x338>)
 80116f0:	4e36      	ldr	r6, [pc, #216]	; (80117cc <atan+0x33c>)
 80116f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80116f6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80116fa:	e9da 2300 	ldrd	r2, r3, [sl]
 80116fe:	f7ee fdc3 	bl	8000288 <__aeabi_dsub>
 8011702:	4622      	mov	r2, r4
 8011704:	462b      	mov	r3, r5
 8011706:	f7ee fdbf 	bl	8000288 <__aeabi_dsub>
 801170a:	4602      	mov	r2, r0
 801170c:	460b      	mov	r3, r1
 801170e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011712:	f7ee fdb9 	bl	8000288 <__aeabi_dsub>
 8011716:	f1bb 0f00 	cmp.w	fp, #0
 801171a:	4604      	mov	r4, r0
 801171c:	460d      	mov	r5, r1
 801171e:	f6bf aed6 	bge.w	80114ce <atan+0x3e>
 8011722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011726:	461d      	mov	r5, r3
 8011728:	e6d1      	b.n	80114ce <atan+0x3e>
 801172a:	a51d      	add	r5, pc, #116	; (adr r5, 80117a0 <atan+0x310>)
 801172c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011730:	e6cd      	b.n	80114ce <atan+0x3e>
 8011732:	bf00      	nop
 8011734:	f3af 8000 	nop.w
 8011738:	54442d18 	.word	0x54442d18
 801173c:	bff921fb 	.word	0xbff921fb
 8011740:	8800759c 	.word	0x8800759c
 8011744:	7e37e43c 	.word	0x7e37e43c
 8011748:	e322da11 	.word	0xe322da11
 801174c:	3f90ad3a 	.word	0x3f90ad3a
 8011750:	24760deb 	.word	0x24760deb
 8011754:	3fa97b4b 	.word	0x3fa97b4b
 8011758:	a0d03d51 	.word	0xa0d03d51
 801175c:	3fb10d66 	.word	0x3fb10d66
 8011760:	c54c206e 	.word	0xc54c206e
 8011764:	3fb745cd 	.word	0x3fb745cd
 8011768:	920083ff 	.word	0x920083ff
 801176c:	3fc24924 	.word	0x3fc24924
 8011770:	5555550d 	.word	0x5555550d
 8011774:	3fd55555 	.word	0x3fd55555
 8011778:	2c6a6c2f 	.word	0x2c6a6c2f
 801177c:	bfa2b444 	.word	0xbfa2b444
 8011780:	52defd9a 	.word	0x52defd9a
 8011784:	3fadde2d 	.word	0x3fadde2d
 8011788:	af749a6d 	.word	0xaf749a6d
 801178c:	3fb3b0f2 	.word	0x3fb3b0f2
 8011790:	fe231671 	.word	0xfe231671
 8011794:	3fbc71c6 	.word	0x3fbc71c6
 8011798:	9998ebc4 	.word	0x9998ebc4
 801179c:	3fc99999 	.word	0x3fc99999
 80117a0:	54442d18 	.word	0x54442d18
 80117a4:	3ff921fb 	.word	0x3ff921fb
 80117a8:	440fffff 	.word	0x440fffff
 80117ac:	7ff00000 	.word	0x7ff00000
 80117b0:	3fdbffff 	.word	0x3fdbffff
 80117b4:	3ff00000 	.word	0x3ff00000
 80117b8:	3ff2ffff 	.word	0x3ff2ffff
 80117bc:	40038000 	.word	0x40038000
 80117c0:	3ff80000 	.word	0x3ff80000
 80117c4:	bff00000 	.word	0xbff00000
 80117c8:	08012518 	.word	0x08012518
 80117cc:	080124f8 	.word	0x080124f8

080117d0 <fabs>:
 80117d0:	ec51 0b10 	vmov	r0, r1, d0
 80117d4:	ee10 2a10 	vmov	r2, s0
 80117d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80117dc:	ec43 2b10 	vmov	d0, r2, r3
 80117e0:	4770      	bx	lr
 80117e2:	0000      	movs	r0, r0
 80117e4:	0000      	movs	r0, r0
	...

080117e8 <floor>:
 80117e8:	ec51 0b10 	vmov	r0, r1, d0
 80117ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80117f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80117f8:	2e13      	cmp	r6, #19
 80117fa:	ee10 5a10 	vmov	r5, s0
 80117fe:	ee10 8a10 	vmov	r8, s0
 8011802:	460c      	mov	r4, r1
 8011804:	dc32      	bgt.n	801186c <floor+0x84>
 8011806:	2e00      	cmp	r6, #0
 8011808:	da14      	bge.n	8011834 <floor+0x4c>
 801180a:	a333      	add	r3, pc, #204	; (adr r3, 80118d8 <floor+0xf0>)
 801180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011810:	f7ee fd3c 	bl	800028c <__adddf3>
 8011814:	2200      	movs	r2, #0
 8011816:	2300      	movs	r3, #0
 8011818:	f7ef f97e 	bl	8000b18 <__aeabi_dcmpgt>
 801181c:	b138      	cbz	r0, 801182e <floor+0x46>
 801181e:	2c00      	cmp	r4, #0
 8011820:	da57      	bge.n	80118d2 <floor+0xea>
 8011822:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011826:	431d      	orrs	r5, r3
 8011828:	d001      	beq.n	801182e <floor+0x46>
 801182a:	4c2d      	ldr	r4, [pc, #180]	; (80118e0 <floor+0xf8>)
 801182c:	2500      	movs	r5, #0
 801182e:	4621      	mov	r1, r4
 8011830:	4628      	mov	r0, r5
 8011832:	e025      	b.n	8011880 <floor+0x98>
 8011834:	4f2b      	ldr	r7, [pc, #172]	; (80118e4 <floor+0xfc>)
 8011836:	4137      	asrs	r7, r6
 8011838:	ea01 0307 	and.w	r3, r1, r7
 801183c:	4303      	orrs	r3, r0
 801183e:	d01f      	beq.n	8011880 <floor+0x98>
 8011840:	a325      	add	r3, pc, #148	; (adr r3, 80118d8 <floor+0xf0>)
 8011842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011846:	f7ee fd21 	bl	800028c <__adddf3>
 801184a:	2200      	movs	r2, #0
 801184c:	2300      	movs	r3, #0
 801184e:	f7ef f963 	bl	8000b18 <__aeabi_dcmpgt>
 8011852:	2800      	cmp	r0, #0
 8011854:	d0eb      	beq.n	801182e <floor+0x46>
 8011856:	2c00      	cmp	r4, #0
 8011858:	bfbe      	ittt	lt
 801185a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801185e:	fa43 f606 	asrlt.w	r6, r3, r6
 8011862:	19a4      	addlt	r4, r4, r6
 8011864:	ea24 0407 	bic.w	r4, r4, r7
 8011868:	2500      	movs	r5, #0
 801186a:	e7e0      	b.n	801182e <floor+0x46>
 801186c:	2e33      	cmp	r6, #51	; 0x33
 801186e:	dd0b      	ble.n	8011888 <floor+0xa0>
 8011870:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011874:	d104      	bne.n	8011880 <floor+0x98>
 8011876:	ee10 2a10 	vmov	r2, s0
 801187a:	460b      	mov	r3, r1
 801187c:	f7ee fd06 	bl	800028c <__adddf3>
 8011880:	ec41 0b10 	vmov	d0, r0, r1
 8011884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011888:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801188c:	f04f 33ff 	mov.w	r3, #4294967295
 8011890:	fa23 f707 	lsr.w	r7, r3, r7
 8011894:	4207      	tst	r7, r0
 8011896:	d0f3      	beq.n	8011880 <floor+0x98>
 8011898:	a30f      	add	r3, pc, #60	; (adr r3, 80118d8 <floor+0xf0>)
 801189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801189e:	f7ee fcf5 	bl	800028c <__adddf3>
 80118a2:	2200      	movs	r2, #0
 80118a4:	2300      	movs	r3, #0
 80118a6:	f7ef f937 	bl	8000b18 <__aeabi_dcmpgt>
 80118aa:	2800      	cmp	r0, #0
 80118ac:	d0bf      	beq.n	801182e <floor+0x46>
 80118ae:	2c00      	cmp	r4, #0
 80118b0:	da02      	bge.n	80118b8 <floor+0xd0>
 80118b2:	2e14      	cmp	r6, #20
 80118b4:	d103      	bne.n	80118be <floor+0xd6>
 80118b6:	3401      	adds	r4, #1
 80118b8:	ea25 0507 	bic.w	r5, r5, r7
 80118bc:	e7b7      	b.n	801182e <floor+0x46>
 80118be:	2301      	movs	r3, #1
 80118c0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80118c4:	fa03 f606 	lsl.w	r6, r3, r6
 80118c8:	4435      	add	r5, r6
 80118ca:	4545      	cmp	r5, r8
 80118cc:	bf38      	it	cc
 80118ce:	18e4      	addcc	r4, r4, r3
 80118d0:	e7f2      	b.n	80118b8 <floor+0xd0>
 80118d2:	2500      	movs	r5, #0
 80118d4:	462c      	mov	r4, r5
 80118d6:	e7aa      	b.n	801182e <floor+0x46>
 80118d8:	8800759c 	.word	0x8800759c
 80118dc:	7e37e43c 	.word	0x7e37e43c
 80118e0:	bff00000 	.word	0xbff00000
 80118e4:	000fffff 	.word	0x000fffff

080118e8 <scalbn>:
 80118e8:	b570      	push	{r4, r5, r6, lr}
 80118ea:	ec55 4b10 	vmov	r4, r5, d0
 80118ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80118f2:	4606      	mov	r6, r0
 80118f4:	462b      	mov	r3, r5
 80118f6:	b99a      	cbnz	r2, 8011920 <scalbn+0x38>
 80118f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80118fc:	4323      	orrs	r3, r4
 80118fe:	d036      	beq.n	801196e <scalbn+0x86>
 8011900:	4b39      	ldr	r3, [pc, #228]	; (80119e8 <scalbn+0x100>)
 8011902:	4629      	mov	r1, r5
 8011904:	ee10 0a10 	vmov	r0, s0
 8011908:	2200      	movs	r2, #0
 801190a:	f7ee fe75 	bl	80005f8 <__aeabi_dmul>
 801190e:	4b37      	ldr	r3, [pc, #220]	; (80119ec <scalbn+0x104>)
 8011910:	429e      	cmp	r6, r3
 8011912:	4604      	mov	r4, r0
 8011914:	460d      	mov	r5, r1
 8011916:	da10      	bge.n	801193a <scalbn+0x52>
 8011918:	a32b      	add	r3, pc, #172	; (adr r3, 80119c8 <scalbn+0xe0>)
 801191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801191e:	e03a      	b.n	8011996 <scalbn+0xae>
 8011920:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011924:	428a      	cmp	r2, r1
 8011926:	d10c      	bne.n	8011942 <scalbn+0x5a>
 8011928:	ee10 2a10 	vmov	r2, s0
 801192c:	4620      	mov	r0, r4
 801192e:	4629      	mov	r1, r5
 8011930:	f7ee fcac 	bl	800028c <__adddf3>
 8011934:	4604      	mov	r4, r0
 8011936:	460d      	mov	r5, r1
 8011938:	e019      	b.n	801196e <scalbn+0x86>
 801193a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801193e:	460b      	mov	r3, r1
 8011940:	3a36      	subs	r2, #54	; 0x36
 8011942:	4432      	add	r2, r6
 8011944:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011948:	428a      	cmp	r2, r1
 801194a:	dd08      	ble.n	801195e <scalbn+0x76>
 801194c:	2d00      	cmp	r5, #0
 801194e:	a120      	add	r1, pc, #128	; (adr r1, 80119d0 <scalbn+0xe8>)
 8011950:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011954:	da1c      	bge.n	8011990 <scalbn+0xa8>
 8011956:	a120      	add	r1, pc, #128	; (adr r1, 80119d8 <scalbn+0xf0>)
 8011958:	e9d1 0100 	ldrd	r0, r1, [r1]
 801195c:	e018      	b.n	8011990 <scalbn+0xa8>
 801195e:	2a00      	cmp	r2, #0
 8011960:	dd08      	ble.n	8011974 <scalbn+0x8c>
 8011962:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011966:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801196a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801196e:	ec45 4b10 	vmov	d0, r4, r5
 8011972:	bd70      	pop	{r4, r5, r6, pc}
 8011974:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011978:	da19      	bge.n	80119ae <scalbn+0xc6>
 801197a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801197e:	429e      	cmp	r6, r3
 8011980:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011984:	dd0a      	ble.n	801199c <scalbn+0xb4>
 8011986:	a112      	add	r1, pc, #72	; (adr r1, 80119d0 <scalbn+0xe8>)
 8011988:	e9d1 0100 	ldrd	r0, r1, [r1]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d1e2      	bne.n	8011956 <scalbn+0x6e>
 8011990:	a30f      	add	r3, pc, #60	; (adr r3, 80119d0 <scalbn+0xe8>)
 8011992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011996:	f7ee fe2f 	bl	80005f8 <__aeabi_dmul>
 801199a:	e7cb      	b.n	8011934 <scalbn+0x4c>
 801199c:	a10a      	add	r1, pc, #40	; (adr r1, 80119c8 <scalbn+0xe0>)
 801199e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d0b8      	beq.n	8011918 <scalbn+0x30>
 80119a6:	a10e      	add	r1, pc, #56	; (adr r1, 80119e0 <scalbn+0xf8>)
 80119a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119ac:	e7b4      	b.n	8011918 <scalbn+0x30>
 80119ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80119b2:	3236      	adds	r2, #54	; 0x36
 80119b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80119b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80119bc:	4620      	mov	r0, r4
 80119be:	4b0c      	ldr	r3, [pc, #48]	; (80119f0 <scalbn+0x108>)
 80119c0:	2200      	movs	r2, #0
 80119c2:	e7e8      	b.n	8011996 <scalbn+0xae>
 80119c4:	f3af 8000 	nop.w
 80119c8:	c2f8f359 	.word	0xc2f8f359
 80119cc:	01a56e1f 	.word	0x01a56e1f
 80119d0:	8800759c 	.word	0x8800759c
 80119d4:	7e37e43c 	.word	0x7e37e43c
 80119d8:	8800759c 	.word	0x8800759c
 80119dc:	fe37e43c 	.word	0xfe37e43c
 80119e0:	c2f8f359 	.word	0xc2f8f359
 80119e4:	81a56e1f 	.word	0x81a56e1f
 80119e8:	43500000 	.word	0x43500000
 80119ec:	ffff3cb0 	.word	0xffff3cb0
 80119f0:	3c900000 	.word	0x3c900000

080119f4 <_init>:
 80119f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119f6:	bf00      	nop
 80119f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119fa:	bc08      	pop	{r3}
 80119fc:	469e      	mov	lr, r3
 80119fe:	4770      	bx	lr

08011a00 <_fini>:
 8011a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a02:	bf00      	nop
 8011a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a06:	bc08      	pop	{r3}
 8011a08:	469e      	mov	lr, r3
 8011a0a:	4770      	bx	lr
