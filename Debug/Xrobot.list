
Xrobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  0800bb54  0800bb54  0001bb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bed8  0800bed8  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bed8  0800bed8  0001bed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bee0  0800bee0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bee0  0800bee0  0001bee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bee4  0800bee4  0001bee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800bee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          0000529c  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005340  20005340  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021ea4  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c00  00000000  00000000  00041f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e0  00000000  00000000  00046b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017e8  00000000  00000000  00048558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006f8d  00000000  00000000  00049d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ea69  00000000  00000000  00050ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d146b  00000000  00000000  0006f736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140ba1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072a4  00000000  00000000  00140bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb3c 	.word	0x0800bb3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	0800bb3c 	.word	0x0800bb3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ws2812NumOn>:

uint16_t g_led_data[(TOTALNUM*24)+CYCLE_RESET]={0,};//CYCLE_RESET of data = 0, not BIT_HIGH or BIT_LOW


void ws2812NumOn(uint32_t led_cnt)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint16_t *)g_led_data, (TOTALNUM*24)+CYCLE_RESET);
 800057c:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <ws2812NumOn+0x20>)
 8000582:	2100      	movs	r1, #0
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <ws2812NumOn+0x24>)
 8000586:	f004 fa57 	bl	8004a38 <HAL_TIM_PWM_Start_DMA>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000c0 	.word	0x200000c0
 8000598:	2000078c 	.word	0x2000078c

0800059c <ws2812SetColor>:


void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 800059c:	b480      	push	{r7}
 800059e:	b09d      	sub	sp, #116	; 0x74
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	4608      	mov	r0, r1
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	4603      	mov	r3, r0
 80005ac:	70fb      	strb	r3, [r7, #3]
 80005ae:	460b      	mov	r3, r1
 80005b0:	70bb      	strb	r3, [r7, #2]
 80005b2:	4613      	mov	r3, r2
 80005b4:	707b      	strb	r3, [r7, #1]
	uint32_t buf[TOTALNUM];

	buf[index] = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 80005b6:	78bb      	ldrb	r3, [r7, #2]
 80005b8:	021a      	lsls	r2, r3, #8
 80005ba:	78fb      	ldrb	r3, [r7, #3]
 80005bc:	4413      	add	r3, r2
 80005be:	021a      	lsls	r2, r3, #8
 80005c0:	787b      	ldrb	r3, [r7, #1]
 80005c2:	4413      	add	r3, r2
 80005c4:	461a      	mov	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	3370      	adds	r3, #112	; 0x70
 80005cc:	443b      	add	r3, r7
 80005ce:	f843 2c64 	str.w	r2, [r3, #-100]

	for(int i=0;i<24;i++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80005d6:	e02c      	b.n	8000632 <ws2812SetColor+0x96>
	{
		if(buf[index]&(1<<i)) {g_led_data[(TOTALNUM-index)*24-i] = BIT_HIGH;}
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	3370      	adds	r3, #112	; 0x70
 80005de:	443b      	add	r3, r7
 80005e0:	f853 3c64 	ldr.w	r3, [r3, #-100]
 80005e4:	2101      	movs	r1, #1
 80005e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80005e8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ec:	4013      	ands	r3, r2
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d00e      	beq.n	8000610 <ws2812SetColor+0x74>
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4613      	mov	r3, r2
 80005f6:	0092      	lsls	r2, r2, #2
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	461a      	mov	r2, r3
 80005fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000606:	4a10      	ldr	r2, [pc, #64]	; (8000648 <ws2812SetColor+0xac>)
 8000608:	2143      	movs	r1, #67	; 0x43
 800060a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800060e:	e00d      	b.n	800062c <ws2812SetColor+0x90>
		else {g_led_data[(TOTALNUM-index)*24-i] = BIT_LOW;}
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	4613      	mov	r3, r2
 8000614:	0092      	lsls	r2, r2, #2
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	461a      	mov	r2, r3
 800061c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000624:	4a08      	ldr	r2, [pc, #32]	; (8000648 <ws2812SetColor+0xac>)
 8000626:	2121      	movs	r1, #33	; 0x21
 8000628:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<24;i++)
 800062c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800062e:	3301      	adds	r3, #1
 8000630:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000634:	2b17      	cmp	r3, #23
 8000636:	ddcf      	ble.n	80005d8 <ws2812SetColor+0x3c>
	}
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3774      	adds	r7, #116	; 0x74
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	200000c0 	.word	0x200000c0

0800064c <ws2812AllColor>:


void ws2812AllColor(uint8_t red, uint8_t green, uint8_t blue)
{
 800064c:	b480      	push	{r7}
 800064e:	b087      	sub	sp, #28
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	460b      	mov	r3, r1
 8000658:	71bb      	strb	r3, [r7, #6]
 800065a:	4613      	mov	r3, r2
 800065c:	717b      	strb	r3, [r7, #5]
	uint32_t buf;

	buf = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	021a      	lsls	r2, r3, #8
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4413      	add	r3, r2
 8000666:	021a      	lsls	r2, r3, #8
 8000668:	797b      	ldrb	r3, [r7, #5]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]

	for(int j=TOTALNUM;j>0;j--)
 800066e:	2318      	movs	r3, #24
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	e02d      	b.n	80006d0 <ws2812AllColor+0x84>
	{
		for(int i=0;i<24;i++)
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	e024      	b.n	80006c4 <ws2812AllColor+0x78>
		{
			if(buf&(1<<i)) {g_led_data[(j*24)-i] = BIT_HIGH;}
 800067a:	2201      	movs	r2, #1
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4013      	ands	r3, r2
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00c      	beq.n	80006a6 <ws2812AllColor+0x5a>
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	4613      	mov	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4413      	add	r3, r2
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	461a      	mov	r2, r3
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	4a11      	ldr	r2, [pc, #68]	; (80006e4 <ws2812AllColor+0x98>)
 800069e:	2143      	movs	r1, #67	; 0x43
 80006a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006a4:	e00b      	b.n	80006be <ws2812AllColor+0x72>
			else {g_led_data[(j*24)-i] = BIT_LOW;}
 80006a6:	697a      	ldr	r2, [r7, #20]
 80006a8:	4613      	mov	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	461a      	mov	r2, r3
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <ws2812AllColor+0x98>)
 80006b8:	2121      	movs	r1, #33	; 0x21
 80006ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<24;i++)
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	3301      	adds	r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	2b17      	cmp	r3, #23
 80006c8:	ddd7      	ble.n	800067a <ws2812AllColor+0x2e>
	for(int j=TOTALNUM;j>0;j--)
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	dcce      	bgt.n	8000674 <ws2812AllColor+0x28>
		}
	}
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	371c      	adds	r7, #28
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	200000c0 	.word	0x200000c0

080006e8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_CAN1_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_CAN1_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_CAN1_Init+0x64>)
 80006f4:	2206      	movs	r2, #6
 80006f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_CAN1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_CAN1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_CAN1_Init+0x64>)
 8000706:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800070a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_CAN1_Init+0x64>)
 800070e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000712:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_CAN1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_CAN1_Init+0x64>)
 800071c:	2201      	movs	r2, #1
 800071e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_CAN1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_CAN1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_CAN1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_CAN1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_CAN1_Init+0x64>)
 800073a:	f001 fce1 	bl	8002100 <HAL_CAN_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 fe74 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000608 	.word	0x20000608
 8000750:	40006400 	.word	0x40006400

08000754 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a1d      	ldr	r2, [pc, #116]	; (80007e8 <HAL_CAN_MspInit+0x94>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d134      	bne.n	80007e0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <HAL_CAN_MspInit+0x98>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <HAL_CAN_MspInit+0x98>)
 8000780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000784:	6413      	str	r3, [r2, #64]	; 0x40
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <HAL_CAN_MspInit+0x98>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <HAL_CAN_MspInit+0x98>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a14      	ldr	r2, [pc, #80]	; (80007ec <HAL_CAN_MspInit+0x98>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_CAN_MspInit+0x98>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007c0:	2309      	movs	r3, #9
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4809      	ldr	r0, [pc, #36]	; (80007f0 <HAL_CAN_MspInit+0x9c>)
 80007cc:	f003 f814 	bl	80037f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2105      	movs	r1, #5
 80007d4:	2014      	movs	r0, #20
 80007d6:	f002 fbe3 	bl	8002fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80007da:	2014      	movs	r0, #20
 80007dc:	f002 fbfc 	bl	8002fd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	; 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40006400 	.word	0x40006400
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400

080007f4 <CanInit>:
}

/* USER CODE BEGIN 1 */

void CanInit(uint32_t id, uint32_t mask)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <CanInit+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <CanInit+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <CanInit+0x98>)
 800080c:	2201      	movs	r2, #1
 800080e:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id<<3)>>16;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	0c1b      	lsrs	r3, r3, #16
 8000816:	4a1d      	ldr	r2, [pc, #116]	; (800088c <CanInit+0x98>)
 8000818:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = ((id<<3)&0xffff)|(0x1<<2);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	b29b      	uxth	r3, r3
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	4a19      	ldr	r2, [pc, #100]	; (800088c <CanInit+0x98>)
 8000826:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask<<3)>>16;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	0c1b      	lsrs	r3, r3, #16
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <CanInit+0x98>)
 8000830:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = ((mask<<3)&0xffff)|(0x1<<2);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	b29b      	uxth	r3, r3
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	4a13      	ldr	r2, [pc, #76]	; (800088c <CanInit+0x98>)
 800083e:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <CanInit+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <CanInit+0x98>)
 8000848:	2201      	movs	r2, #1
 800084a:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <CanInit+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 8000852:	480f      	ldr	r0, [pc, #60]	; (8000890 <CanInit+0x9c>)
 8000854:	f001 fe30 	bl	80024b8 <HAL_CAN_Start>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <CanInit+0x6e>
 800085e:	f000 fde7 	bl	8001430 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 8000862:	2102      	movs	r1, #2
 8000864:	480a      	ldr	r0, [pc, #40]	; (8000890 <CanInit+0x9c>)
 8000866:	f002 f88d 	bl	8002984 <HAL_CAN_ActivateNotification>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d000      	beq.n	8000872 <CanInit+0x7e>
 8000870:	e7fe      	b.n	8000870 <CanInit+0x7c>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000872:	4906      	ldr	r1, [pc, #24]	; (800088c <CanInit+0x98>)
 8000874:	4806      	ldr	r0, [pc, #24]	; (8000890 <CanInit+0x9c>)
 8000876:	f001 fd3f 	bl	80022f8 <HAL_CAN_ConfigFilter>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <CanInit+0x90>
    {
		/* Filter configuration Error */
		Error_Handler();
 8000880:	f000 fdd6 	bl	8001430 <Error_Handler>
    }
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200005e0 	.word	0x200005e0
 8000890:	20000608 	.word	0x20000608

08000894 <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	4611      	mov	r1, r2
 80008a0:	461a      	mov	r2, r3
 80008a2:	460b      	mov	r3, r1
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	4613      	mov	r3, r2
 80008a8:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 80008b6:	79bb      	ldrb	r3, [r7, #6]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <sendCan+0x2c>
 80008bc:	2304      	movs	r3, #4
 80008be:	e000      	b.n	80008c2 <sendCan+0x2e>
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 80008ce:	480d      	ldr	r0, [pc, #52]	; (8000904 <sendCan+0x70>)
 80008d0:	f001 ff11 	bl	80026f6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00d      	beq.n	80008fa <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	f107 0114 	add.w	r1, r7, #20
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	4806      	ldr	r0, [pc, #24]	; (8000904 <sendCan+0x70>)
 80008ea:	f001 fe29 	bl	8002540 <HAL_CAN_AddTxMessage>
 80008ee:	4603      	mov	r3, r0
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 80008f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d000      	beq.n	80008fa <sendCan+0x66>
 80008f8:	e7fe      	b.n	80008f8 <sendCan+0x64>
    }
}
 80008fa:	bf00      	nop
 80008fc:	3730      	adds	r7, #48	; 0x30
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000608 	.word	0x20000608

08000908 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000914:	2100      	movs	r1, #0
 8000916:	480a      	ldr	r0, [pc, #40]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000918:	f001 ff22 	bl	8002760 <HAL_CAN_GetRxMessage>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d000      	beq.n	8000924 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 8000922:	e7fe      	b.n	8000922 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	4a06      	ldr	r2, [pc, #24]	; (8000944 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800092c:	6013      	str	r3, [r2, #0]

}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200005bc 	.word	0x200005bc
 800093c:	200005c4 	.word	0x200005c4
 8000940:	20000608 	.word	0x20000608
 8000944:	200005b8 	.word	0x200005b8

08000948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_DMA_Init+0x68>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <MX_DMA_Init+0x68>)
 8000958:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_DMA_Init+0x68>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_DMA_Init+0x68>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <MX_DMA_Init+0x68>)
 8000974:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_DMA_Init+0x68>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2105      	movs	r1, #5
 800098a:	200e      	movs	r0, #14
 800098c:	f002 fb08 	bl	8002fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000990:	200e      	movs	r0, #14
 8000992:	f002 fb21 	bl	8002fd8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2105      	movs	r1, #5
 800099a:	203a      	movs	r0, #58	; 0x3a
 800099c:	f002 fb00 	bl	8002fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80009a0:	203a      	movs	r0, #58	; 0x3a
 80009a2:	f002 fb19 	bl	8002fd8 <HAL_NVIC_EnableIRQ>

}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <fanInit>:

#include <fan.h>


void fanInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
    //HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_1);//stm32f103
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009b8:	2100      	movs	r1, #0
 80009ba:	4802      	ldr	r0, [pc, #8]	; (80009c4 <fanInit+0x10>)
 80009bc:	f003 ff74 	bl	80048a8 <HAL_TIM_PWM_Start>
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200006fc 	.word	0x200006fc

080009c8 <fanOn>:

void fanOn(uint8_t duty)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	if(duty>=100){duty = 100;}
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b63      	cmp	r3, #99	; 0x63
 80009d6:	d901      	bls.n	80009dc <fanOn+0x14>
 80009d8:	2364      	movs	r3, #100	; 0x64
 80009da:	71fb      	strb	r3, [r7, #7]

	if(duty==0){htim1.Instance->CCR1 = 0;}
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d104      	bne.n	80009ec <fanOn+0x24>
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <fanOn+0x38>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2200      	movs	r2, #0
 80009e8:	635a      	str	r2, [r3, #52]	; 0x34
	else {htim1.Instance->CCR1 = duty;}//write gogo
}
 80009ea:	e003      	b.n	80009f4 <fanOn+0x2c>
	else {htim1.Instance->CCR1 = duty;}//write gogo
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <fanOn+0x38>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	79fa      	ldrb	r2, [r7, #7]
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	200006fc 	.word	0x200006fc

08000a04 <HAL_GPIO_EXTI_Callback>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == PS_SIG1_Pin) {
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	2b10      	cmp	r3, #16
 8000a12:	d108      	bne.n	8000a26 <HAL_GPIO_EXTI_Callback+0x22>
    	//osSemaphoreRelease(PSx_SIG_BinSemHandle);
    	osThreadFlagsSet(IRQ_PSxHandle, 1);
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f006 fe88 	bl	8007730 <osThreadFlagsSet>
    	printf("GPIO_EXTI_Callback PS_SIG1_Pin.\n");
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <HAL_GPIO_EXTI_Callback+0x30>)
 8000a22:	f00a fa2f 	bl	800ae84 <puts>
    }

    if(GPIO_Pin == PS_SIG4_Pin) {
    	//printf("GPIO_EXTI_Callback PS_SIG4_Pin.\n");
    }
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000644 	.word	0x20000644
 8000a34:	0800bb9c 	.word	0x0800bb9c

08000a38 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PSx_SIG_BinSem */
  PSx_SIG_BinSemHandle = osSemaphoreNew(1, 1, &PSx_SIG_BinSem_attributes);
 8000a3c:	4a1c      	ldr	r2, [pc, #112]	; (8000ab0 <MX_FREERTOS_Init+0x78>)
 8000a3e:	2101      	movs	r1, #1
 8000a40:	2001      	movs	r0, #1
 8000a42:	f006 ff71 	bl	8007928 <osSemaphoreNew>
 8000a46:	4603      	mov	r3, r0
 8000a48:	4a1a      	ldr	r2, [pc, #104]	; (8000ab4 <MX_FREERTOS_Init+0x7c>)
 8000a4a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <MX_FREERTOS_Init+0x80>)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	481a      	ldr	r0, [pc, #104]	; (8000abc <MX_FREERTOS_Init+0x84>)
 8000a52:	f006 fdda 	bl	800760a <osThreadNew>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a19      	ldr	r2, [pc, #100]	; (8000ac0 <MX_FREERTOS_Init+0x88>)
 8000a5a:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(StartTask02, NULL, &canTask_attributes);
 8000a5c:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <MX_FREERTOS_Init+0x8c>)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4819      	ldr	r0, [pc, #100]	; (8000ac8 <MX_FREERTOS_Init+0x90>)
 8000a62:	f006 fdd2 	bl	800760a <osThreadNew>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4a18      	ldr	r2, [pc, #96]	; (8000acc <MX_FREERTOS_Init+0x94>)
 8000a6a:	6013      	str	r3, [r2, #0]

  /* creation of UartComm */
  UartCommHandle = osThreadNew(StartTask03, NULL, &UartComm_attributes);
 8000a6c:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <MX_FREERTOS_Init+0x98>)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4818      	ldr	r0, [pc, #96]	; (8000ad4 <MX_FREERTOS_Init+0x9c>)
 8000a72:	f006 fdca 	bl	800760a <osThreadNew>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <MX_FREERTOS_Init+0xa0>)
 8000a7a:	6013      	str	r3, [r2, #0]

  /* creation of NP_LED */
  NP_LEDHandle = osThreadNew(StartTask04, NULL, &NP_LED_attributes);
 8000a7c:	4a17      	ldr	r2, [pc, #92]	; (8000adc <MX_FREERTOS_Init+0xa4>)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4817      	ldr	r0, [pc, #92]	; (8000ae0 <MX_FREERTOS_Init+0xa8>)
 8000a82:	f006 fdc2 	bl	800760a <osThreadNew>
 8000a86:	4603      	mov	r3, r0
 8000a88:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <MX_FREERTOS_Init+0xac>)
 8000a8a:	6013      	str	r3, [r2, #0]

  /* creation of fancntl */
  fancntlHandle = osThreadNew(StartTask05, NULL, &fancntl_attributes);
 8000a8c:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <MX_FREERTOS_Init+0xb0>)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4816      	ldr	r0, [pc, #88]	; (8000aec <MX_FREERTOS_Init+0xb4>)
 8000a92:	f006 fdba 	bl	800760a <osThreadNew>
 8000a96:	4603      	mov	r3, r0
 8000a98:	4a15      	ldr	r2, [pc, #84]	; (8000af0 <MX_FREERTOS_Init+0xb8>)
 8000a9a:	6013      	str	r3, [r2, #0]

  /* creation of IRQ_PSx */
  IRQ_PSxHandle = osThreadNew(StartTask06, NULL, &IRQ_PSx_attributes);
 8000a9c:	4a15      	ldr	r2, [pc, #84]	; (8000af4 <MX_FREERTOS_Init+0xbc>)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4815      	ldr	r0, [pc, #84]	; (8000af8 <MX_FREERTOS_Init+0xc0>)
 8000aa2:	f006 fdb2 	bl	800760a <osThreadNew>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	4a14      	ldr	r2, [pc, #80]	; (8000afc <MX_FREERTOS_Init+0xc4>)
 8000aaa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	0800be10 	.word	0x0800be10
 8000ab4:	20000648 	.word	0x20000648
 8000ab8:	0800bd38 	.word	0x0800bd38
 8000abc:	08000b01 	.word	0x08000b01
 8000ac0:	20000630 	.word	0x20000630
 8000ac4:	0800bd5c 	.word	0x0800bd5c
 8000ac8:	08000b2d 	.word	0x08000b2d
 8000acc:	20000634 	.word	0x20000634
 8000ad0:	0800bd80 	.word	0x0800bd80
 8000ad4:	08000b71 	.word	0x08000b71
 8000ad8:	20000638 	.word	0x20000638
 8000adc:	0800bda4 	.word	0x0800bda4
 8000ae0:	08000bb9 	.word	0x08000bb9
 8000ae4:	2000063c 	.word	0x2000063c
 8000ae8:	0800bdc8 	.word	0x0800bdc8
 8000aec:	08000fe5 	.word	0x08000fe5
 8000af0:	20000640 	.word	0x20000640
 8000af4:	0800bdec 	.word	0x0800bdec
 8000af8:	08001019 	.word	0x08001019
 8000afc:	20000644 	.word	0x20000644

08000b00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	//StartTask01 is related gpio toggle for state check //
	uint32_t lastTime = osKernelGetTickCount();
 8000b08:	f006 fd6a 	bl	80075e0 <osKernelGetTickCount>
 8000b0c:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STATUS_LED;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000b14:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f006 fed9 	bl	80078ce <osDelayUntil>

	HAL_GPIO_TogglePin(testled_GPIO_Port, testled_Pin);
 8000b1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b20:	4801      	ldr	r0, [pc, #4]	; (8000b28 <StartDefaultTask+0x28>)
 8000b22:	f003 f81e 	bl	8003b62 <HAL_GPIO_TogglePin>
	lastTime += PERIOD_STATUS_LED;
 8000b26:	e7f2      	b.n	8000b0e <StartDefaultTask+0xe>
 8000b28:	40020800 	.word	0x40020800

08000b2c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	//StartTask02 is related CAN communication. //
	uint32_t lastTime = osKernelGetTickCount();
 8000b34:	f006 fd54 	bl	80075e0 <osKernelGetTickCount>
 8000b38:	6178      	str	r0, [r7, #20]

	CanInit(0,0);
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff fe59 	bl	80007f4 <CanInit>
  /* Infinite loop */
  for(;;)
  {
	  uint8_t canbuf[8]={1, 2, 3, 4, 5, 6, 7, 8};
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <StartTask02+0x40>)
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b4c:	e883 0003 	stmia.w	r3, {r0, r1}

	lastTime += PERIOD_CANCOMM;;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	3314      	adds	r3, #20
 8000b54:	617b      	str	r3, [r7, #20]
	osDelayUntil(lastTime);
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f006 feb9 	bl	80078ce <osDelayUntil>

	//for(int i=0;i<8;i++){canbuf[i]=0;}
	sendCan(0, canbuf, 8, 0);//(uint32_t ID, uint8_t data[8], uint8_t len, uint8_t ext
 8000b5c:	f107 010c 	add.w	r1, r7, #12
 8000b60:	2300      	movs	r3, #0
 8000b62:	2208      	movs	r2, #8
 8000b64:	2000      	movs	r0, #0
 8000b66:	f7ff fe95 	bl	8000894 <sendCan>
  {
 8000b6a:	e7ea      	b.n	8000b42 <StartTask02+0x16>
 8000b6c:	0800bbbc 	.word	0x0800bbbc

08000b70 <StartTask03>:
					21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
					31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
					41, 42, 43, 44, 45, 46, 47, 48	};
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	uint32_t lastTime = osKernelGetTickCount();
 8000b78:	f006 fd32 	bl	80075e0 <osKernelGetTickCount>
 8000b7c:	60f8      	str	r0, [r7, #12]

	HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <StartTask03+0x3c>)
 8000b86:	f002 ffd3 	bl	8003b30 <HAL_GPIO_WritePin>

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STEERING;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3332      	adds	r3, #50	; 0x32
 8000b8e:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f006 fe9c 	bl	80078ce <osDelayUntil>

	if(HAL_UART_Transmit_DMA(&huart3,testarr, 48)!= HAL_OK){Error_Handler();}
 8000b96:	2230      	movs	r2, #48	; 0x30
 8000b98:	4905      	ldr	r1, [pc, #20]	; (8000bb0 <StartTask03+0x40>)
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <StartTask03+0x44>)
 8000b9c:	f005 fbd4 	bl	8006348 <HAL_UART_Transmit_DMA>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d0f1      	beq.n	8000b8a <StartTask03+0x1a>
 8000ba6:	f000 fc43 	bl	8001430 <Error_Handler>
	lastTime += PERIOD_STEERING;
 8000baa:	e7ee      	b.n	8000b8a <StartTask03+0x1a>
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000878 	.word	0x20000878

08000bb8 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	//StartTask04 is related ws2812b//
	uint32_t lastTime = osKernelGetTickCount();
 8000bc0:	f006 fd0e 	bl	80075e0 <osKernelGetTickCount>
 8000bc4:	60f8      	str	r0, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
		lastTime += PERIOD_NP_LED;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000bcc:	60fb      	str	r3, [r7, #12]
		osDelayUntil(lastTime);
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f006 fe7d 	bl	80078ce <osDelayUntil>


		temp++;
 8000bd4:	4bd0      	ldr	r3, [pc, #832]	; (8000f18 <StartTask04+0x360>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	4acf      	ldr	r2, [pc, #828]	; (8000f18 <StartTask04+0x360>)
 8000bdc:	6013      	str	r3, [r2, #0]
		switch (temp) {
 8000bde:	4bce      	ldr	r3, [pc, #824]	; (8000f18 <StartTask04+0x360>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	2b07      	cmp	r3, #7
 8000be6:	f200 81ea 	bhi.w	8000fbe <StartTask04+0x406>
 8000bea:	a201      	add	r2, pc, #4	; (adr r2, 8000bf0 <StartTask04+0x38>)
 8000bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf0:	08000c11 	.word	0x08000c11
 8000bf4:	08000c79 	.word	0x08000c79
 8000bf8:	08000ce1 	.word	0x08000ce1
 8000bfc:	08000d49 	.word	0x08000d49
 8000c00:	08000db1 	.word	0x08000db1
 8000c04:	08000e31 	.word	0x08000e31
 8000c08:	08000eb1 	.word	0x08000eb1
 8000c0c:	08000f39 	.word	0x08000f39
			case 1:
				printf("case1\n");
 8000c10:	48c2      	ldr	r0, [pc, #776]	; (8000f1c <StartTask04+0x364>)
 8000c12:	f00a f937 	bl	800ae84 <puts>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8000c16:	2301      	movs	r3, #1
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff fcbd 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8000c22:	2300      	movs	r3, #0
 8000c24:	2201      	movs	r2, #1
 8000c26:	2100      	movs	r1, #0
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff fcb7 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 8000c2e:	2300      	movs	r3, #0
 8000c30:	2200      	movs	r2, #0
 8000c32:	2101      	movs	r1, #1
 8000c34:	2002      	movs	r0, #2
 8000c36:	f7ff fcb1 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2003      	movs	r0, #3
 8000c42:	f7ff fcab 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8000c46:	2300      	movs	r3, #0
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2004      	movs	r0, #4
 8000c4e:	f7ff fca5 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 8000c52:	2300      	movs	r3, #0
 8000c54:	2200      	movs	r2, #0
 8000c56:	2101      	movs	r1, #1
 8000c58:	2005      	movs	r0, #5
 8000c5a:	f7ff fc9f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8000c5e:	2301      	movs	r3, #1
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	2006      	movs	r0, #6
 8000c66:	f7ff fc99 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2007      	movs	r0, #7
 8000c72:	f7ff fc93 	bl	800059c <ws2812SetColor>
				break;
 8000c76:	e1a2      	b.n	8000fbe <StartTask04+0x406>
			case 2:
				printf("case2\n");
 8000c78:	48a9      	ldr	r0, [pc, #676]	; (8000f20 <StartTask04+0x368>)
 8000c7a:	f00a f903 	bl	800ae84 <puts>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8000c7e:	2301      	movs	r3, #1
 8000c80:	2200      	movs	r2, #0
 8000c82:	2100      	movs	r1, #0
 8000c84:	2007      	movs	r0, #7
 8000c86:	f7ff fc89 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fc83 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 8000c96:	2300      	movs	r3, #0
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff fc7d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f7ff fc77 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8000cae:	2300      	movs	r3, #0
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f7ff fc71 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2004      	movs	r0, #4
 8000cc2:	f7ff fc6b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2005      	movs	r0, #5
 8000cce:	f7ff fc65 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2006      	movs	r0, #6
 8000cda:	f7ff fc5f 	bl	800059c <ws2812SetColor>
				break;
 8000cde:	e16e      	b.n	8000fbe <StartTask04+0x406>
			case 3:
				printf("case3\n");
 8000ce0:	4890      	ldr	r0, [pc, #576]	; (8000f24 <StartTask04+0x36c>)
 8000ce2:	f00a f8cf 	bl	800ae84 <puts>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2006      	movs	r0, #6
 8000cee:	f7ff fc55 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2007      	movs	r0, #7
 8000cfa:	f7ff fc4f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 8000cfe:	2300      	movs	r3, #0
 8000d00:	2200      	movs	r2, #0
 8000d02:	2101      	movs	r1, #1
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff fc49 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff fc43 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8000d16:	2300      	movs	r3, #0
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f7ff fc3d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 8000d22:	2300      	movs	r3, #0
 8000d24:	2200      	movs	r2, #0
 8000d26:	2101      	movs	r1, #1
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f7ff fc37 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8000d2e:	2301      	movs	r3, #1
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	2004      	movs	r0, #4
 8000d36:	f7ff fc31 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2005      	movs	r0, #5
 8000d42:	f7ff fc2b 	bl	800059c <ws2812SetColor>
				break;
 8000d46:	e13a      	b.n	8000fbe <StartTask04+0x406>
			case 4:
				printf("case4\n");
 8000d48:	4877      	ldr	r0, [pc, #476]	; (8000f28 <StartTask04+0x370>)
 8000d4a:	f00a f89b 	bl	800ae84 <puts>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8000d4e:	2301      	movs	r3, #1
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	2005      	movs	r0, #5
 8000d56:	f7ff fc21 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2006      	movs	r0, #6
 8000d62:	f7ff fc1b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 8000d66:	2300      	movs	r3, #0
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	2007      	movs	r0, #7
 8000d6e:	f7ff fc15 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8000d72:	2301      	movs	r3, #1
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff fc0f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2201      	movs	r2, #1
 8000d82:	2100      	movs	r1, #0
 8000d84:	2001      	movs	r0, #1
 8000d86:	f7ff fc09 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2101      	movs	r1, #1
 8000d90:	2002      	movs	r0, #2
 8000d92:	f7ff fc03 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8000d96:	2301      	movs	r3, #1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f7ff fbfd 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8000da2:	2300      	movs	r3, #0
 8000da4:	2201      	movs	r2, #1
 8000da6:	2100      	movs	r1, #0
 8000da8:	2004      	movs	r0, #4
 8000daa:	f7ff fbf7 	bl	800059c <ws2812SetColor>
				break;
 8000dae:	e106      	b.n	8000fbe <StartTask04+0x406>
			case 5:
				printf("case5\n");
 8000db0:	485e      	ldr	r0, [pc, #376]	; (8000f2c <StartTask04+0x374>)
 8000db2:	f00a f867 	bl	800ae84 <puts>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8000db6:	2301      	movs	r3, #1
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2004      	movs	r0, #4
 8000dbe:	f7ff fbed 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2005      	movs	r0, #5
 8000dca:	f7ff fbe7 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 8000dce:	2300      	movs	r3, #0
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	2006      	movs	r0, #6
 8000dd6:	f7ff fbe1 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8000dda:	2301      	movs	r3, #1
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2007      	movs	r0, #7
 8000de2:	f7ff fbdb 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8000de6:	2300      	movs	r3, #0
 8000de8:	2201      	movs	r2, #1
 8000dea:	2100      	movs	r1, #0
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fbd5 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 8000df2:	2300      	movs	r3, #0
 8000df4:	2200      	movs	r2, #0
 8000df6:	2101      	movs	r1, #1
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f7ff fbcf 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8000dfe:	2301      	movs	r3, #1
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	2002      	movs	r0, #2
 8000e06:	f7ff fbc9 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2003      	movs	r0, #3
 8000e12:	f7ff fbc3 	bl	800059c <ws2812SetColor>
				ws2812SetColor(8,0,0,1);//index, r, g, b
 8000e16:	2301      	movs	r3, #1
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2008      	movs	r0, #8
 8000e1e:	f7ff fbbd 	bl	800059c <ws2812SetColor>
				ws2812SetColor(9,0,1,0);//index, r, g, b
 8000e22:	2300      	movs	r3, #0
 8000e24:	2201      	movs	r2, #1
 8000e26:	2100      	movs	r1, #0
 8000e28:	2009      	movs	r0, #9
 8000e2a:	f7ff fbb7 	bl	800059c <ws2812SetColor>

				break;
 8000e2e:	e0c6      	b.n	8000fbe <StartTask04+0x406>
			case 6:
				printf("case6\n");
 8000e30:	483f      	ldr	r0, [pc, #252]	; (8000f30 <StartTask04+0x378>)
 8000e32:	f00a f827 	bl	800ae84 <puts>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8000e36:	2301      	movs	r3, #1
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f7ff fbad 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8000e42:	2300      	movs	r3, #0
 8000e44:	2201      	movs	r2, #1
 8000e46:	2100      	movs	r1, #0
 8000e48:	2004      	movs	r0, #4
 8000e4a:	f7ff fba7 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 8000e4e:	2300      	movs	r3, #0
 8000e50:	2200      	movs	r2, #0
 8000e52:	2101      	movs	r1, #1
 8000e54:	2005      	movs	r0, #5
 8000e56:	f7ff fba1 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2006      	movs	r0, #6
 8000e62:	f7ff fb9b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8000e66:	2300      	movs	r3, #0
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2007      	movs	r0, #7
 8000e6e:	f7ff fb95 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 8000e72:	2300      	movs	r3, #0
 8000e74:	2200      	movs	r2, #0
 8000e76:	2101      	movs	r1, #1
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff fb8f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	2001      	movs	r0, #1
 8000e86:	f7ff fb89 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2002      	movs	r0, #2
 8000e92:	f7ff fb83 	bl	800059c <ws2812SetColor>
				ws2812SetColor(8,0,1,1);//index, r, g, b
 8000e96:	2301      	movs	r3, #1
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2008      	movs	r0, #8
 8000e9e:	f7ff fb7d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(9,1,1,0);//index, r, g, b
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	2009      	movs	r0, #9
 8000eaa:	f7ff fb77 	bl	800059c <ws2812SetColor>
				break;
 8000eae:	e086      	b.n	8000fbe <StartTask04+0x406>
			case 7:
				printf("case7\n");
 8000eb0:	4820      	ldr	r0, [pc, #128]	; (8000f34 <StartTask04+0x37c>)
 8000eb2:	f009 ffe7 	bl	800ae84 <puts>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f7ff fb6d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f7ff fb67 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	2004      	movs	r0, #4
 8000ed6:	f7ff fb61 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8000eda:	2301      	movs	r3, #1
 8000edc:	2200      	movs	r2, #0
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2005      	movs	r0, #5
 8000ee2:	f7ff fb5b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2100      	movs	r1, #0
 8000eec:	2006      	movs	r0, #6
 8000eee:	f7ff fb55 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	2007      	movs	r0, #7
 8000efa:	f7ff fb4f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8000efe:	2301      	movs	r3, #1
 8000f00:	2200      	movs	r2, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fb49 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2001      	movs	r0, #1
 8000f12:	f7ff fb43 	bl	800059c <ws2812SetColor>
				break;
 8000f16:	e052      	b.n	8000fbe <StartTask04+0x406>
 8000f18:	2000064c 	.word	0x2000064c
 8000f1c:	0800bbc4 	.word	0x0800bbc4
 8000f20:	0800bbcc 	.word	0x0800bbcc
 8000f24:	0800bbd4 	.word	0x0800bbd4
 8000f28:	0800bbdc 	.word	0x0800bbdc
 8000f2c:	0800bbe4 	.word	0x0800bbe4
 8000f30:	0800bbec 	.word	0x0800bbec
 8000f34:	0800bbf4 	.word	0x0800bbf4
			case 8:
				printf("case8\n");
 8000f38:	4827      	ldr	r0, [pc, #156]	; (8000fd8 <StartTask04+0x420>)
 8000f3a:	f009 ffa3 	bl	800ae84 <puts>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8000f3e:	2301      	movs	r3, #1
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff fb29 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2002      	movs	r0, #2
 8000f52:	f7ff fb23 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 8000f56:	2300      	movs	r3, #0
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f7ff fb1d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8000f62:	2301      	movs	r3, #1
 8000f64:	2200      	movs	r2, #0
 8000f66:	2100      	movs	r1, #0
 8000f68:	2004      	movs	r0, #4
 8000f6a:	f7ff fb17 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8000f6e:	2300      	movs	r3, #0
 8000f70:	2201      	movs	r2, #1
 8000f72:	2100      	movs	r1, #0
 8000f74:	2005      	movs	r0, #5
 8000f76:	f7ff fb11 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2101      	movs	r1, #1
 8000f80:	2006      	movs	r0, #6
 8000f82:	f7ff fb0b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8000f86:	2301      	movs	r3, #1
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2007      	movs	r0, #7
 8000f8e:	f7ff fb05 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8000f92:	2300      	movs	r3, #0
 8000f94:	2201      	movs	r2, #1
 8000f96:	2100      	movs	r1, #0
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff faff 	bl	800059c <ws2812SetColor>
				ws2812SetColor(8,1,1,1);//index, r, g, b
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	2008      	movs	r0, #8
 8000fa6:	f7ff faf9 	bl	800059c <ws2812SetColor>
				ws2812SetColor(9,1,1,1);//index, r, g, b
 8000faa:	2301      	movs	r3, #1
 8000fac:	2201      	movs	r2, #1
 8000fae:	2101      	movs	r1, #1
 8000fb0:	2009      	movs	r0, #9
 8000fb2:	f7ff faf3 	bl	800059c <ws2812SetColor>
				temp=1;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <StartTask04+0x424>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
				break;
 8000fbc:	bf00      	nop
		}

		ws2812AllColor(0,0,0);//r, g, b
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f7ff fb42 	bl	800064c <ws2812AllColor>
		ws2812NumOn(NUM_NPLED);
 8000fc8:	2018      	movs	r0, #24
 8000fca:	f7ff fad3 	bl	8000574 <ws2812NumOn>
		printf("task4\n");
 8000fce:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <StartTask04+0x428>)
 8000fd0:	f009 ff58 	bl	800ae84 <puts>
  {
 8000fd4:	e5f7      	b.n	8000bc6 <StartTask04+0xe>
 8000fd6:	bf00      	nop
 8000fd8:	0800bbfc 	.word	0x0800bbfc
 8000fdc:	2000064c 	.word	0x2000064c
 8000fe0:	0800bc04 	.word	0x0800bc04

08000fe4 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	uint32_t lastTime = osKernelGetTickCount();
 8000fec:	f006 faf8 	bl	80075e0 <osKernelGetTickCount>
 8000ff0:	60f8      	str	r0, [r7, #12]

	fanInit();
 8000ff2:	f7ff fcdf 	bl	80009b4 <fanInit>

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_FAN;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ffc:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f006 fc65 	bl	80078ce <osDelayUntil>
	fanOn(30);
 8001004:	201e      	movs	r0, #30
 8001006:	f7ff fcdf 	bl	80009c8 <fanOn>
	//htim1.Instance->CCR1 = 50;
	printf("task5\n");
 800100a:	4802      	ldr	r0, [pc, #8]	; (8001014 <StartTask05+0x30>)
 800100c:	f009 ff3a 	bl	800ae84 <puts>
  {
 8001010:	e7f1      	b.n	8000ff6 <StartTask05+0x12>
 8001012:	bf00      	nop
 8001014:	0800bc0c 	.word	0x0800bc0c

08001018 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
	uint32_t lastTime = osKernelGetTickCount();
 8001020:	f006 fade 	bl	80075e0 <osKernelGetTickCount>
 8001024:	60f8      	str	r0, [r7, #12]
	//	  		  if(osSemaphoreAcquire(PSx_SIG_BinSemHandle, 0) == osOK)
	//	  		  {
	//	  			printf("StartTask06 PS_SIG1_Pin.\n");
	//	  		  }
	//	  	  }
		  osThreadFlagsWait(1, 0, osWaitForever);
 8001026:	f04f 32ff 	mov.w	r2, #4294967295
 800102a:	2100      	movs	r1, #0
 800102c:	2001      	movs	r0, #1
 800102e:	f006 fbcd 	bl	80077cc <osThreadFlagsWait>
		  printf("StartTask06 PS_SIG1_Pin.\n");
 8001032:	4802      	ldr	r0, [pc, #8]	; (800103c <StartTask06+0x24>)
 8001034:	f009 ff26 	bl	800ae84 <puts>
  {
 8001038:	e7f5      	b.n	8001026 <StartTask06+0xe>
 800103a:	bf00      	nop
 800103c:	0800bc14 	.word	0x0800bc14

08001040 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b57      	ldr	r3, [pc, #348]	; (80011b8 <MX_GPIO_Init+0x178>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a56      	ldr	r2, [pc, #344]	; (80011b8 <MX_GPIO_Init+0x178>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b54      	ldr	r3, [pc, #336]	; (80011b8 <MX_GPIO_Init+0x178>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b50      	ldr	r3, [pc, #320]	; (80011b8 <MX_GPIO_Init+0x178>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a4f      	ldr	r2, [pc, #316]	; (80011b8 <MX_GPIO_Init+0x178>)
 800107c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b4d      	ldr	r3, [pc, #308]	; (80011b8 <MX_GPIO_Init+0x178>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	4b49      	ldr	r3, [pc, #292]	; (80011b8 <MX_GPIO_Init+0x178>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a48      	ldr	r2, [pc, #288]	; (80011b8 <MX_GPIO_Init+0x178>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b46      	ldr	r3, [pc, #280]	; (80011b8 <MX_GPIO_Init+0x178>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	4b42      	ldr	r3, [pc, #264]	; (80011b8 <MX_GPIO_Init+0x178>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a41      	ldr	r2, [pc, #260]	; (80011b8 <MX_GPIO_Init+0x178>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <MX_GPIO_Init+0x178>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <MX_GPIO_Init+0x178>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a3a      	ldr	r2, [pc, #232]	; (80011b8 <MX_GPIO_Init+0x178>)
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b38      	ldr	r3, [pc, #224]	; (80011b8 <MX_GPIO_Init+0x178>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 80010e2:	2200      	movs	r2, #0
 80010e4:	f64f 413e 	movw	r1, #64574	; 0xfc3e
 80010e8:	4834      	ldr	r0, [pc, #208]	; (80011bc <MX_GPIO_Init+0x17c>)
 80010ea:	f002 fd21 	bl	8003b30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_DE_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f244 0110 	movw	r1, #16400	; 0x4010
 80010f4:	4832      	ldr	r0, [pc, #200]	; (80011c0 <MX_GPIO_Init+0x180>)
 80010f6:	f002 fd1b 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2104      	movs	r1, #4
 80010fe:	4831      	ldr	r0, [pc, #196]	; (80011c4 <MX_GPIO_Init+0x184>)
 8001100:	f002 fd16 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC1
                           PC2 PC3 PC4 PC5
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8001104:	f64f 433e 	movw	r3, #64574	; 0xfc3e
 8001108:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4827      	ldr	r0, [pc, #156]	; (80011bc <MX_GPIO_Init+0x17c>)
 800111e:	f002 fb6b 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001122:	2301      	movs	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4821      	ldr	r0, [pc, #132]	; (80011bc <MX_GPIO_Init+0x17c>)
 8001136:	f002 fb5f 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PS_SIG1_Pin|PS_SIG2_Pin|PS_SIG3_Pin|PS_SIG4_Pin;
 800113a:	23f0      	movs	r3, #240	; 0xf0
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800113e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	481e      	ldr	r0, [pc, #120]	; (80011c8 <MX_GPIO_Init+0x188>)
 8001150:	f002 fb52 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 */
  GPIO_InitStruct.Pin = RS485_DE_Pin|GPIO_PIN_4;
 8001154:	f244 0310 	movw	r3, #16400	; 0x4010
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	4814      	ldr	r0, [pc, #80]	; (80011c0 <MX_GPIO_Init+0x180>)
 800116e:	f002 fb43 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001172:	2304      	movs	r3, #4
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	480e      	ldr	r0, [pc, #56]	; (80011c4 <MX_GPIO_Init+0x184>)
 800118a:	f002 fb35 	bl	80037f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2105      	movs	r1, #5
 8001192:	200a      	movs	r0, #10
 8001194:	f001 ff04 	bl	8002fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001198:	200a      	movs	r0, #10
 800119a:	f001 ff1d 	bl	8002fd8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2105      	movs	r1, #5
 80011a2:	2017      	movs	r0, #23
 80011a4:	f001 fefc 	bl	8002fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011a8:	2017      	movs	r0, #23
 80011aa:	f001 ff15 	bl	8002fd8 <HAL_NVIC_EnableIRQ>

}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	; 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020800 	.word	0x40020800
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40020c00 	.word	0x40020c00
 80011c8:	40020000 	.word	0x40020000

080011cc <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_I2C1_SMBUS_Init+0x68>)
 80011d2:	4a19      	ldr	r2, [pc, #100]	; (8001238 <MX_I2C1_SMBUS_Init+0x6c>)
 80011d4:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.ClockSpeed = 100000;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_I2C1_SMBUS_Init+0x68>)
 80011d8:	4a18      	ldr	r2, [pc, #96]	; (800123c <MX_I2C1_SMBUS_Init+0x70>)
 80011da:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.OwnAddress1 = 0;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_I2C1_SMBUS_Init+0x68>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_I2C1_SMBUS_Init+0x68>)
 80011e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e8:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_I2C1_SMBUS_Init+0x68>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_I2C1_SMBUS_Init+0x68>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_I2C1_SMBUS_Init+0x68>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <MX_I2C1_SMBUS_Init+0x68>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_I2C1_SMBUS_Init+0x68>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <MX_I2C1_SMBUS_Init+0x68>)
 800120a:	2202      	movs	r2, #2
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 800120e:	4809      	ldr	r0, [pc, #36]	; (8001234 <MX_I2C1_SMBUS_Init+0x68>)
 8001210:	f003 f964 	bl	80044dc <HAL_SMBUS_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_I2C1_SMBUS_Init+0x52>
  {
    Error_Handler();
 800121a:	f000 f909 	bl	8001430 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_I2C1_SMBUS_Init+0x68>)
 8001220:	f003 fa12 	bl	8004648 <HAL_SMBUS_EnableAlert_IT>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 800122a:	f000 f901 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000650 	.word	0x20000650
 8001238:	40005400 	.word	0x40005400
 800123c:	000186a0 	.word	0x000186a0

08001240 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(smbusHandle->Instance==I2C1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <HAL_SMBUS_MspInit+0x84>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d12b      	bne.n	80012ba <HAL_SMBUS_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_SMBUS_MspInit+0x88>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a17      	ldr	r2, [pc, #92]	; (80012c8 <HAL_SMBUS_MspInit+0x88>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_SMBUS_MspInit+0x88>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB5     ------> I2C1_SMBA
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800127e:	23e0      	movs	r3, #224	; 0xe0
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001282:	2312      	movs	r3, #18
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800128e:	2304      	movs	r3, #4
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <HAL_SMBUS_MspInit+0x8c>)
 800129a:	f002 faad 	bl	80037f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_SMBUS_MspInit+0x88>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <HAL_SMBUS_MspInit+0x88>)
 80012a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_SMBUS_MspInit+0x88>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40005400 	.word	0x40005400
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020400 	.word	0x40020400

080012d0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)//485 task for nuri motor must change uart port
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, (uint16_t)len, 100);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	b29a      	uxth	r2, r3
 80012e0:	2364      	movs	r3, #100	; 0x64
 80012e2:	68b9      	ldr	r1, [r7, #8]
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <_write+0x24>)
 80012e6:	f004 ff6c 	bl	80061c2 <HAL_UART_Transmit>
	return (len);
 80012ea:	687b      	ldr	r3, [r7, #4]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000834 	.word	0x20000834

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fc:	f000 febe 	bl	800207c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001300:	f000 f81a 	bl	8001338 <SystemClock_Config>
  MX_TIM3_Init();
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001304:	f7ff fe9c 	bl	8001040 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001308:	f7ff f9ee 	bl	80006e8 <MX_CAN1_Init>

  MX_TIM1_Init();
 800130c:	f000 fa48 	bl	80017a0 <MX_TIM1_Init>
  MX_I2C1_SMBUS_Init();
 8001310:	f7ff ff5c 	bl	80011cc <MX_I2C1_SMBUS_Init>
  MX_DMA_Init();
 8001314:	f7ff fb18 	bl	8000948 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001318:	f000 fd9c 	bl	8001e54 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800131c:	f000 fd70 	bl	8001e00 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8001320:	f000 fb6c 	bl	80019fc <MX_TIM8_Init>
  MX_TIM3_Init();
 8001324:	f000 faee 	bl	8001904 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001328:	f006 f910 	bl	800754c <osKernelInitialize>
  MX_FREERTOS_Init();
 800132c:	f7ff fb84 	bl	8000a38 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001330:	f006 f930 	bl	8007594 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001334:	e7fe      	b.n	8001334 <main+0x3c>
	...

08001338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b094      	sub	sp, #80	; 0x50
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 0320 	add.w	r3, r7, #32
 8001342:	2230      	movs	r2, #48	; 0x30
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f009 fc79 	bl	800ac3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	4b28      	ldr	r3, [pc, #160]	; (8001404 <SystemClock_Config+0xcc>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <SystemClock_Config+0xcc>)
 8001366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136a:	6413      	str	r3, [r2, #64]	; 0x40
 800136c:	4b25      	ldr	r3, [pc, #148]	; (8001404 <SystemClock_Config+0xcc>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001378:	2300      	movs	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <SystemClock_Config+0xd0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a21      	ldr	r2, [pc, #132]	; (8001408 <SystemClock_Config+0xd0>)
 8001382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <SystemClock_Config+0xd0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001394:	2301      	movs	r3, #1
 8001396:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139e:	2302      	movs	r3, #2
 80013a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80013a8:	2306      	movs	r3, #6
 80013aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013ac:	23a8      	movs	r3, #168	; 0xa8
 80013ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013b4:	2304      	movs	r3, #4
 80013b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 fc03 	bl	8003bc8 <HAL_RCC_OscConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013c8:	f000 f832 	bl	8001430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013cc:	230f      	movs	r3, #15
 80013ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d0:	2302      	movs	r3, #2
 80013d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2105      	movs	r1, #5
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 fe64 	bl	80040b8 <HAL_RCC_ClockConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013f6:	f000 f81b 	bl	8001430 <Error_Handler>
  }
}
 80013fa:	bf00      	nop
 80013fc:	3750      	adds	r7, #80	; 0x50
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40007000 	.word	0x40007000

0800140c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800141e:	f000 fe4f 	bl	80020c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40001000 	.word	0x40001000

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001438:	e7fe      	b.n	8001438 <Error_Handler+0x8>
	...

0800143c <HAL_UART_RxCpltCallback>:
void ServoMotor_init()
{
	HAL_UART_Receive_IT(&huart3, tmp_rx, 12);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {printf("hal_rev irq: %d\n", HAL_UART_Receive_IT(&huart3, tmp_rx, 12));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <HAL_UART_RxCpltCallback+0x3c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d109      	bne.n	8001462 <HAL_UART_RxCpltCallback+0x26>
 800144e:	220c      	movs	r2, #12
 8001450:	490a      	ldr	r1, [pc, #40]	; (800147c <HAL_UART_RxCpltCallback+0x40>)
 8001452:	480b      	ldr	r0, [pc, #44]	; (8001480 <HAL_UART_RxCpltCallback+0x44>)
 8001454:	f004 ff47 	bl	80062e6 <HAL_UART_Receive_IT>
 8001458:	4603      	mov	r3, r0
 800145a:	4619      	mov	r1, r3
 800145c:	4809      	ldr	r0, [pc, #36]	; (8001484 <HAL_UART_RxCpltCallback+0x48>)
 800145e:	f009 fc8b 	bl	800ad78 <iprintf>
	}//SET INTERRUPT
	flag_rx = 1;
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_UART_RxCpltCallback+0x4c>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]
	printf("H_URCBf\n");
 8001468:	4808      	ldr	r0, [pc, #32]	; (800148c <HAL_UART_RxCpltCallback+0x50>)
 800146a:	f009 fd0b 	bl	800ae84 <puts>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40004800 	.word	0x40004800
 800147c:	200006a4 	.word	0x200006a4
 8001480:	20000878 	.word	0x20000878
 8001484:	0800bc30 	.word	0x0800bc30
 8001488:	200006a0 	.word	0x200006a0
 800148c:	0800bc44 	.word	0x0800bc44

08001490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_MspInit+0x54>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <HAL_MspInit+0x54>)
 80014a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a4:	6453      	str	r3, [r2, #68]	; 0x44
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_MspInit+0x54>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_MspInit+0x54>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_MspInit+0x54>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_MspInit+0x54>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	210f      	movs	r1, #15
 80014d2:	f06f 0001 	mvn.w	r0, #1
 80014d6:	f001 fd63 	bl	8002fa0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	; 0x30
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	2036      	movs	r0, #54	; 0x36
 80014fe:	f001 fd4f 	bl	8002fa0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001502:	2036      	movs	r0, #54	; 0x36
 8001504:	f001 fd68 	bl	8002fd8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <HAL_InitTick+0xa4>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	4a1e      	ldr	r2, [pc, #120]	; (800158c <HAL_InitTick+0xa4>)
 8001512:	f043 0310 	orr.w	r3, r3, #16
 8001516:	6413      	str	r3, [r2, #64]	; 0x40
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_InitTick+0xa4>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001524:	f107 0210 	add.w	r2, r7, #16
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f002 ffa2 	bl	8004478 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001534:	f002 ff78 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 8001538:	4603      	mov	r3, r0
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800153e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001540:	4a13      	ldr	r2, [pc, #76]	; (8001590 <HAL_InitTick+0xa8>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0c9b      	lsrs	r3, r3, #18
 8001548:	3b01      	subs	r3, #1
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_InitTick+0xac>)
 800154e:	4a12      	ldr	r2, [pc, #72]	; (8001598 <HAL_InitTick+0xb0>)
 8001550:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_InitTick+0xac>)
 8001554:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001558:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800155a:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <HAL_InitTick+0xac>)
 800155c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_InitTick+0xac>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_InitTick+0xac>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800156c:	4809      	ldr	r0, [pc, #36]	; (8001594 <HAL_InitTick+0xac>)
 800156e:	f003 f88b 	bl	8004688 <HAL_TIM_Base_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d104      	bne.n	8001582 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001578:	4806      	ldr	r0, [pc, #24]	; (8001594 <HAL_InitTick+0xac>)
 800157a:	f003 f8d5 	bl	8004728 <HAL_TIM_Base_Start_IT>
 800157e:	4603      	mov	r3, r0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3730      	adds	r7, #48	; 0x30
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	431bde83 	.word	0x431bde83
 8001594:	200006b0 	.word	0x200006b0
 8001598:	40001000 	.word	0x40001000

0800159c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <NMI_Handler+0x4>

080015a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <HardFault_Handler+0x4>

080015a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <MemManage_Handler+0x4>

080015ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <BusFault_Handler+0x4>

080015b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <UsageFault_Handler+0x4>

080015ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG1_Pin);
 80015cc:	2010      	movs	r0, #16
 80015ce:	f002 fae3 	bl	8003b98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <DMA1_Stream3_IRQHandler+0x10>)
 80015de:	f001 fea1 	bl	8003324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200008bc 	.word	0x200008bc

080015ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <CAN1_RX0_IRQHandler+0x10>)
 80015f2:	f001 f9ed 	bl	80029d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000608 	.word	0x20000608

08001600 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG2_Pin);
 8001604:	2020      	movs	r0, #32
 8001606:	f002 fac7 	bl	8003b98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG3_Pin);
 800160a:	2040      	movs	r0, #64	; 0x40
 800160c:	f002 fac4 	bl	8003b98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG4_Pin);
 8001610:	2080      	movs	r0, #128	; 0x80
 8001612:	f002 fac1 	bl	8003b98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <USART2_IRQHandler+0x10>)
 8001622:	f004 ff0f 	bl	8006444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000834 	.word	0x20000834

08001630 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <USART3_IRQHandler+0x10>)
 8001636:	f004 ff05 	bl	8006444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000878 	.word	0x20000878

08001644 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <TIM6_DAC_IRQHandler+0x10>)
 800164a:	f003 fc16 	bl	8004e7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200006b0 	.word	0x200006b0

08001658 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <DMA2_Stream2_IRQHandler+0x10>)
 800165e:	f001 fe61 	bl	8003324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200007d4 	.word	0x200007d4

0800166c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	e00a      	b.n	8001694 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800167e:	f3af 8000 	nop.w
 8001682:	4601      	mov	r1, r0
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	60ba      	str	r2, [r7, #8]
 800168a:	b2ca      	uxtb	r2, r1
 800168c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3301      	adds	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	dbf0      	blt.n	800167e <_read+0x12>
	}

return len;
 800169c:	687b      	ldr	r3, [r7, #4]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	return -1;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ce:	605a      	str	r2, [r3, #4]
	return 0;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <_isatty>:

int _isatty(int file)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
	return 1;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <_sbrk+0x5c>)
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <_sbrk+0x60>)
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <_sbrk+0x64>)
 800172e:	4a12      	ldr	r2, [pc, #72]	; (8001778 <_sbrk+0x68>)
 8001730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	429a      	cmp	r2, r3
 800173e:	d207      	bcs.n	8001750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001740:	f009 f94c 	bl	800a9dc <__errno>
 8001744:	4603      	mov	r3, r0
 8001746:	220c      	movs	r2, #12
 8001748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	e009      	b.n	8001764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <_sbrk+0x64>)
 8001760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20020000 	.word	0x20020000
 8001770:	00000400 	.word	0x00000400
 8001774:	200006f8 	.word	0x200006f8
 8001778:	20005340 	.word	0x20005340

0800177c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <SystemInit+0x20>)
 8001782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <SystemInit+0x20>)
 8001788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800178c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b096      	sub	sp, #88	; 0x58
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
 80017c0:	615a      	str	r2, [r3, #20]
 80017c2:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2220      	movs	r2, #32
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f009 fa30 	bl	800ac3e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017de:	4b47      	ldr	r3, [pc, #284]	; (80018fc <MX_TIM1_Init+0x15c>)
 80017e0:	4a47      	ldr	r2, [pc, #284]	; (8001900 <MX_TIM1_Init+0x160>)
 80017e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680-1;
 80017e4:	4b45      	ldr	r3, [pc, #276]	; (80018fc <MX_TIM1_Init+0x15c>)
 80017e6:	f240 628f 	movw	r2, #1679	; 0x68f
 80017ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ec:	4b43      	ldr	r3, [pc, #268]	; (80018fc <MX_TIM1_Init+0x15c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80017f2:	4b42      	ldr	r3, [pc, #264]	; (80018fc <MX_TIM1_Init+0x15c>)
 80017f4:	2263      	movs	r2, #99	; 0x63
 80017f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f8:	4b40      	ldr	r3, [pc, #256]	; (80018fc <MX_TIM1_Init+0x15c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <MX_TIM1_Init+0x15c>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001804:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <MX_TIM1_Init+0x15c>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800180a:	483c      	ldr	r0, [pc, #240]	; (80018fc <MX_TIM1_Init+0x15c>)
 800180c:	f002 fffc 	bl	8004808 <HAL_TIM_PWM_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001816:	f7ff fe0b 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800181a:	4838      	ldr	r0, [pc, #224]	; (80018fc <MX_TIM1_Init+0x15c>)
 800181c:	f003 fad4 	bl	8004dc8 <HAL_TIM_IC_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001826:	f7ff fe03 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001832:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001836:	4619      	mov	r1, r3
 8001838:	4830      	ldr	r0, [pc, #192]	; (80018fc <MX_TIM1_Init+0x15c>)
 800183a:	f004 fb93 	bl	8005f64 <HAL_TIMEx_MasterConfigSynchronization>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001844:	f7ff fdf4 	bl	8001430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001848:	2360      	movs	r3, #96	; 0x60
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001850:	2300      	movs	r3, #0
 8001852:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001854:	2300      	movs	r3, #0
 8001856:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800185c:	2300      	movs	r3, #0
 800185e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001864:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001868:	2200      	movs	r2, #0
 800186a:	4619      	mov	r1, r3
 800186c:	4823      	ldr	r0, [pc, #140]	; (80018fc <MX_TIM1_Init+0x15c>)
 800186e:	f003 fca9 	bl	80051c4 <HAL_TIM_PWM_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001878:	f7ff fdda 	bl	8001430 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800187c:	2300      	movs	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001880:	2301      	movs	r3, #1
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800188c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001890:	2204      	movs	r2, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4819      	ldr	r0, [pc, #100]	; (80018fc <MX_TIM1_Init+0x15c>)
 8001896:	f003 fbf8 	bl	800508a <HAL_TIM_IC_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 80018a0:	f7ff fdc6 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80018a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a8:	2208      	movs	r2, #8
 80018aa:	4619      	mov	r1, r3
 80018ac:	4813      	ldr	r0, [pc, #76]	; (80018fc <MX_TIM1_Init+0x15c>)
 80018ae:	f003 fbec 	bl	800508a <HAL_TIM_IC_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 80018b8:	f7ff fdba 	bl	8001430 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	4619      	mov	r1, r3
 80018de:	4807      	ldr	r0, [pc, #28]	; (80018fc <MX_TIM1_Init+0x15c>)
 80018e0:	f004 fbbc 	bl	800605c <HAL_TIMEx_ConfigBreakDeadTime>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80018ea:	f7ff fda1 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018ee:	4803      	ldr	r0, [pc, #12]	; (80018fc <MX_TIM1_Init+0x15c>)
 80018f0:	f000 fa22 	bl	8001d38 <HAL_TIM_MspPostInit>

}
 80018f4:	bf00      	nop
 80018f6:	3758      	adds	r7, #88	; 0x58
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200006fc 	.word	0x200006fc
 8001900:	40010000 	.word	0x40010000

08001904 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190a:	f107 0318 	add.w	r3, r7, #24
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001922:	463b      	mov	r3, r7
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800192e:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <MX_TIM3_Init+0xf0>)
 8001930:	4a31      	ldr	r2, [pc, #196]	; (80019f8 <MX_TIM3_Init+0xf4>)
 8001932:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001934:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <MX_TIM3_Init+0xf0>)
 8001936:	2200      	movs	r2, #0
 8001938:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193a:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <MX_TIM3_Init+0xf0>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001940:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <MX_TIM3_Init+0xf0>)
 8001942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001946:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001948:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <MX_TIM3_Init+0xf0>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194e:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <MX_TIM3_Init+0xf0>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001954:	4827      	ldr	r0, [pc, #156]	; (80019f4 <MX_TIM3_Init+0xf0>)
 8001956:	f002 fe97 	bl	8004688 <HAL_TIM_Base_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001960:	f7ff fd66 	bl	8001430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001968:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800196a:	f107 0318 	add.w	r3, r7, #24
 800196e:	4619      	mov	r1, r3
 8001970:	4820      	ldr	r0, [pc, #128]	; (80019f4 <MX_TIM3_Init+0xf0>)
 8001972:	f003 fce9 	bl	8005348 <HAL_TIM_ConfigClockSource>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800197c:	f7ff fd58 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001980:	481c      	ldr	r0, [pc, #112]	; (80019f4 <MX_TIM3_Init+0xf0>)
 8001982:	f003 fa21 	bl	8004dc8 <HAL_TIM_IC_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800198c:	f7ff fd50 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	4619      	mov	r1, r3
 800199e:	4815      	ldr	r0, [pc, #84]	; (80019f4 <MX_TIM3_Init+0xf0>)
 80019a0:	f004 fae0 	bl	8005f64 <HAL_TIMEx_MasterConfigSynchronization>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80019aa:	f7ff fd41 	bl	8001430 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019b2:	2301      	movs	r3, #1
 80019b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80019be:	463b      	mov	r3, r7
 80019c0:	2208      	movs	r2, #8
 80019c2:	4619      	mov	r1, r3
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <MX_TIM3_Init+0xf0>)
 80019c6:	f003 fb60 	bl	800508a <HAL_TIM_IC_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80019d0:	f7ff fd2e 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80019d4:	463b      	mov	r3, r7
 80019d6:	220c      	movs	r2, #12
 80019d8:	4619      	mov	r1, r3
 80019da:	4806      	ldr	r0, [pc, #24]	; (80019f4 <MX_TIM3_Init+0xf0>)
 80019dc:	f003 fb55 	bl	800508a <HAL_TIM_IC_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80019e6:	f7ff fd23 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	3728      	adds	r7, #40	; 0x28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000744 	.word	0x20000744
 80019f8:	40000400 	.word	0x40000400

080019fc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b096      	sub	sp, #88	; 0x58
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	615a      	str	r2, [r3, #20]
 8001a2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	2220      	movs	r2, #32
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f009 f902 	bl	800ac3e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a3a:	4b50      	ldr	r3, [pc, #320]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001a3c:	4a50      	ldr	r2, [pc, #320]	; (8001b80 <MX_TIM8_Init+0x184>)
 8001a3e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8001a40:	4b4e      	ldr	r3, [pc, #312]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a46:	4b4d      	ldr	r3, [pc, #308]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 104;
 8001a4c:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001a4e:	2268      	movs	r2, #104	; 0x68
 8001a50:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a52:	4b4a      	ldr	r3, [pc, #296]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a58:	4b48      	ldr	r3, [pc, #288]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5e:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a64:	4845      	ldr	r0, [pc, #276]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001a66:	f002 fe0f 	bl	8004688 <HAL_TIM_Base_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001a70:	f7ff fcde 	bl	8001430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a7e:	4619      	mov	r1, r3
 8001a80:	483e      	ldr	r0, [pc, #248]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001a82:	f003 fc61 	bl	8005348 <HAL_TIM_ConfigClockSource>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001a8c:	f7ff fcd0 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a90:	483a      	ldr	r0, [pc, #232]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001a92:	f002 feb9 	bl	8004808 <HAL_TIM_PWM_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001a9c:	f7ff fcc8 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001aa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aac:	4619      	mov	r1, r3
 8001aae:	4833      	ldr	r0, [pc, #204]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001ab0:	f004 fa58 	bl	8005f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001aba:	f7ff fcb9 	bl	8001430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001abe:	2360      	movs	r3, #96	; 0x60
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aca:	2300      	movs	r3, #0
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4826      	ldr	r0, [pc, #152]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001ae4:	f003 fb6e 	bl	80051c4 <HAL_TIM_PWM_ConfigChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001aee:	f7ff fc9f 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af6:	2204      	movs	r2, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4820      	ldr	r0, [pc, #128]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001afc:	f003 fb62 	bl	80051c4 <HAL_TIM_PWM_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001b06:	f7ff fc93 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0e:	2208      	movs	r2, #8
 8001b10:	4619      	mov	r1, r3
 8001b12:	481a      	ldr	r0, [pc, #104]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001b14:	f003 fb56 	bl	80051c4 <HAL_TIM_PWM_ConfigChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001b1e:	f7ff fc87 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b26:	220c      	movs	r2, #12
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4814      	ldr	r0, [pc, #80]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001b2c:	f003 fb4a 	bl	80051c4 <HAL_TIM_PWM_ConfigChannel>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001b36:	f7ff fc7b 	bl	8001430 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4807      	ldr	r0, [pc, #28]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001b5e:	f004 fa7d 	bl	800605c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001b68:	f7ff fc62 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001b6c:	4803      	ldr	r0, [pc, #12]	; (8001b7c <MX_TIM8_Init+0x180>)
 8001b6e:	f000 f8e3 	bl	8001d38 <HAL_TIM_MspPostInit>

}
 8001b72:	bf00      	nop
 8001b74:	3758      	adds	r7, #88	; 0x58
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000078c 	.word	0x2000078c
 8001b80:	40010400 	.word	0x40010400

08001b84 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <HAL_TIM_PWM_MspInit+0x84>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d12c      	bne.n	8001c00 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_TIM_PWM_MspInit+0x88>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_TIM_PWM_MspInit+0x88>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_TIM_PWM_MspInit+0x88>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_TIM_PWM_MspInit+0x88>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a10      	ldr	r2, [pc, #64]	; (8001c0c <HAL_TIM_PWM_MspInit+0x88>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <HAL_TIM_PWM_MspInit+0x88>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bde:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <HAL_TIM_PWM_MspInit+0x8c>)
 8001bfc:	f001 fdfc 	bl	80037f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000

08001c14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a3b      	ldr	r2, [pc, #236]	; (8001d20 <HAL_TIM_Base_MspInit+0x10c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d12c      	bne.n	8001c90 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <HAL_TIM_Base_MspInit+0x110>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a39      	ldr	r2, [pc, #228]	; (8001d24 <HAL_TIM_Base_MspInit+0x110>)
 8001c40:	f043 0302 	orr.w	r3, r3, #2
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <HAL_TIM_Base_MspInit+0x110>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <HAL_TIM_Base_MspInit+0x110>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a32      	ldr	r2, [pc, #200]	; (8001d24 <HAL_TIM_Base_MspInit+0x110>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <HAL_TIM_Base_MspInit+0x110>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4619      	mov	r1, r3
 8001c88:	4827      	ldr	r0, [pc, #156]	; (8001d28 <HAL_TIM_Base_MspInit+0x114>)
 8001c8a:	f001 fdb5 	bl	80037f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001c8e:	e042      	b.n	8001d16 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a25      	ldr	r2, [pc, #148]	; (8001d2c <HAL_TIM_Base_MspInit+0x118>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d13d      	bne.n	8001d16 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <HAL_TIM_Base_MspInit+0x110>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a20      	ldr	r2, [pc, #128]	; (8001d24 <HAL_TIM_Base_MspInit+0x110>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_TIM_Base_MspInit+0x110>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_TIM_Base_MspInit+0x11c>)
 8001cb8:	4a1e      	ldr	r2, [pc, #120]	; (8001d34 <HAL_TIM_Base_MspInit+0x120>)
 8001cba:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <HAL_TIM_Base_MspInit+0x11c>)
 8001cbe:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001cc2:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <HAL_TIM_Base_MspInit+0x11c>)
 8001cc6:	2240      	movs	r2, #64	; 0x40
 8001cc8:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_TIM_Base_MspInit+0x11c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <HAL_TIM_Base_MspInit+0x11c>)
 8001cd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd6:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_TIM_Base_MspInit+0x11c>)
 8001cda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cde:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <HAL_TIM_Base_MspInit+0x11c>)
 8001ce2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ce6:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_TIM_Base_MspInit+0x11c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_TIM_Base_MspInit+0x11c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_TIM_Base_MspInit+0x11c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8001cfa:	480d      	ldr	r0, [pc, #52]	; (8001d30 <HAL_TIM_Base_MspInit+0x11c>)
 8001cfc:	f001 f97a 	bl	8002ff4 <HAL_DMA_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_TIM_Base_MspInit+0xf6>
      Error_Handler();
 8001d06:	f7ff fb93 	bl	8001430 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_TIM_Base_MspInit+0x11c>)
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24
 8001d10:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <HAL_TIM_Base_MspInit+0x11c>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d16:	bf00      	nop
 8001d18:	3728      	adds	r7, #40	; 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40000400 	.word	0x40000400
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40010400 	.word	0x40010400
 8001d30:	200007d4 	.word	0x200007d4
 8001d34:	40026440 	.word	0x40026440

08001d38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	; 0x28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a25      	ldr	r2, [pc, #148]	; (8001dec <HAL_TIM_MspPostInit+0xb4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d11f      	bne.n	8001d9a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <HAL_TIM_MspPostInit+0xb8>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a23      	ldr	r2, [pc, #140]	; (8001df0 <HAL_TIM_MspPostInit+0xb8>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <HAL_TIM_MspPostInit+0xb8>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4818      	ldr	r0, [pc, #96]	; (8001df4 <HAL_TIM_MspPostInit+0xbc>)
 8001d94:	f001 fd30 	bl	80037f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001d98:	e023      	b.n	8001de2 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a16      	ldr	r2, [pc, #88]	; (8001df8 <HAL_TIM_MspPostInit+0xc0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d11e      	bne.n	8001de2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_TIM_MspPostInit+0xb8>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <HAL_TIM_MspPostInit+0xb8>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	6313      	str	r3, [r2, #48]	; 0x30
 8001db4:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_TIM_MspPostInit+0xb8>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001dc0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4807      	ldr	r0, [pc, #28]	; (8001dfc <HAL_TIM_MspPostInit+0xc4>)
 8001dde:	f001 fd0b 	bl	80037f8 <HAL_GPIO_Init>
}
 8001de2:	bf00      	nop
 8001de4:	3728      	adds	r7, #40	; 0x28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40010000 	.word	0x40010000
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40010400 	.word	0x40010400
 8001dfc:	40020800 	.word	0x40020800

08001e00 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_USART2_UART_Init+0x4c>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <MX_USART2_UART_Init+0x50>)
 8001e08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <MX_USART2_UART_Init+0x4c>)
 8001e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_USART2_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_USART2_UART_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <MX_USART2_UART_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_USART2_UART_Init+0x4c>)
 8001e26:	220c      	movs	r2, #12
 8001e28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <MX_USART2_UART_Init+0x4c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_USART2_UART_Init+0x4c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e36:	4805      	ldr	r0, [pc, #20]	; (8001e4c <MX_USART2_UART_Init+0x4c>)
 8001e38:	f004 f976 	bl	8006128 <HAL_UART_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e42:	f7ff faf5 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000834 	.word	0x20000834
 8001e50:	40004400 	.word	0x40004400

08001e54 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <MX_USART3_UART_Init+0x50>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_USART3_UART_Init+0x4c>)
 8001e8c:	f004 f94c 	bl	8006128 <HAL_UART_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e96:	f7ff facb 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000878 	.word	0x20000878
 8001ea4:	40004800 	.word	0x40004800

08001ea8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08c      	sub	sp, #48	; 0x30
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a51      	ldr	r2, [pc, #324]	; (800200c <HAL_UART_MspInit+0x164>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d134      	bne.n	8001f34 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	4b50      	ldr	r3, [pc, #320]	; (8002010 <HAL_UART_MspInit+0x168>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a4f      	ldr	r2, [pc, #316]	; (8002010 <HAL_UART_MspInit+0x168>)
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b4d      	ldr	r3, [pc, #308]	; (8002010 <HAL_UART_MspInit+0x168>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	4b49      	ldr	r3, [pc, #292]	; (8002010 <HAL_UART_MspInit+0x168>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a48      	ldr	r2, [pc, #288]	; (8002010 <HAL_UART_MspInit+0x168>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b46      	ldr	r3, [pc, #280]	; (8002010 <HAL_UART_MspInit+0x168>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f02:	230c      	movs	r3, #12
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f12:	2307      	movs	r3, #7
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	483d      	ldr	r0, [pc, #244]	; (8002014 <HAL_UART_MspInit+0x16c>)
 8001f1e:	f001 fc6b 	bl	80037f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2105      	movs	r1, #5
 8001f26:	2026      	movs	r0, #38	; 0x26
 8001f28:	f001 f83a 	bl	8002fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f2c:	2026      	movs	r0, #38	; 0x26
 8001f2e:	f001 f853 	bl	8002fd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f32:	e067      	b.n	8002004 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART3)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a37      	ldr	r2, [pc, #220]	; (8002018 <HAL_UART_MspInit+0x170>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d162      	bne.n	8002004 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	4b33      	ldr	r3, [pc, #204]	; (8002010 <HAL_UART_MspInit+0x168>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	4a32      	ldr	r2, [pc, #200]	; (8002010 <HAL_UART_MspInit+0x168>)
 8001f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4e:	4b30      	ldr	r3, [pc, #192]	; (8002010 <HAL_UART_MspInit+0x168>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <HAL_UART_MspInit+0x168>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <HAL_UART_MspInit+0x168>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_UART_MspInit+0x168>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f88:	2307      	movs	r3, #7
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8c:	f107 031c 	add.w	r3, r7, #28
 8001f90:	4619      	mov	r1, r3
 8001f92:	4822      	ldr	r0, [pc, #136]	; (800201c <HAL_UART_MspInit+0x174>)
 8001f94:	f001 fc30 	bl	80037f8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001f98:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_UART_MspInit+0x178>)
 8001f9a:	4a22      	ldr	r2, [pc, #136]	; (8002024 <HAL_UART_MspInit+0x17c>)
 8001f9c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_UART_MspInit+0x178>)
 8001fa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fa4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_UART_MspInit+0x178>)
 8001fa8:	2240      	movs	r2, #64	; 0x40
 8001faa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fac:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <HAL_UART_MspInit+0x178>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HAL_UART_MspInit+0x178>)
 8001fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fb8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_UART_MspInit+0x178>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc0:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_UART_MspInit+0x178>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <HAL_UART_MspInit+0x178>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_UART_MspInit+0x178>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd2:	4b13      	ldr	r3, [pc, #76]	; (8002020 <HAL_UART_MspInit+0x178>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001fd8:	4811      	ldr	r0, [pc, #68]	; (8002020 <HAL_UART_MspInit+0x178>)
 8001fda:	f001 f80b 	bl	8002ff4 <HAL_DMA_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001fe4:	f7ff fa24 	bl	8001430 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a0d      	ldr	r2, [pc, #52]	; (8002020 <HAL_UART_MspInit+0x178>)
 8001fec:	635a      	str	r2, [r3, #52]	; 0x34
 8001fee:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <HAL_UART_MspInit+0x178>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2105      	movs	r1, #5
 8001ff8:	2027      	movs	r0, #39	; 0x27
 8001ffa:	f000 ffd1 	bl	8002fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ffe:	2027      	movs	r0, #39	; 0x27
 8002000:	f000 ffea 	bl	8002fd8 <HAL_NVIC_EnableIRQ>
}
 8002004:	bf00      	nop
 8002006:	3730      	adds	r7, #48	; 0x30
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40004400 	.word	0x40004400
 8002010:	40023800 	.word	0x40023800
 8002014:	40020000 	.word	0x40020000
 8002018:	40004800 	.word	0x40004800
 800201c:	40020400 	.word	0x40020400
 8002020:	200008bc 	.word	0x200008bc
 8002024:	40026058 	.word	0x40026058

08002028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800202e:	490e      	ldr	r1, [pc, #56]	; (8002068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002030:	4a0e      	ldr	r2, [pc, #56]	; (800206c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002034:	e002      	b.n	800203c <LoopCopyDataInit>

08002036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203a:	3304      	adds	r3, #4

0800203c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800203c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002040:	d3f9      	bcc.n	8002036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002042:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002044:	4c0b      	ldr	r4, [pc, #44]	; (8002074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002048:	e001      	b.n	800204e <LoopFillZerobss>

0800204a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800204c:	3204      	adds	r2, #4

0800204e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002050:	d3fb      	bcc.n	800204a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002052:	f7ff fb93 	bl	800177c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002056:	f008 fdbd 	bl	800abd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800205a:	f7ff f94d 	bl	80012f8 <main>
  bx  lr    
 800205e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002068:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 800206c:	0800bee8 	.word	0x0800bee8
  ldr r2, =_sbss
 8002070:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002074:	20005340 	.word	0x20005340

08002078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC_IRQHandler>
	...

0800207c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <HAL_Init+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <HAL_Init+0x40>)
 8002086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800208a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_Init+0x40>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <HAL_Init+0x40>)
 8002092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a07      	ldr	r2, [pc, #28]	; (80020bc <HAL_Init+0x40>)
 800209e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a4:	2003      	movs	r0, #3
 80020a6:	f000 ff70 	bl	8002f8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020aa:	200f      	movs	r0, #15
 80020ac:	f7ff fa1c 	bl	80014e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b0:	f7ff f9ee 	bl	8001490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023c00 	.word	0x40023c00

080020c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_IncTick+0x20>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_IncTick+0x24>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <HAL_IncTick+0x24>)
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000038 	.word	0x20000038
 80020e4:	2000091c 	.word	0x2000091c

080020e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return uwTick;
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <HAL_GetTick+0x14>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	2000091c 	.word	0x2000091c

08002100 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0ed      	b.n	80022ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fb18 	bl	8000754 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002134:	f7ff ffd8 	bl	80020e8 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800213a:	e012      	b.n	8002162 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800213c:	f7ff ffd4 	bl	80020e8 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b0a      	cmp	r3, #10
 8002148:	d90b      	bls.n	8002162 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2205      	movs	r2, #5
 800215a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e0c5      	b.n	80022ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0e5      	beq.n	800213c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0202 	bic.w	r2, r2, #2
 800217e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002180:	f7ff ffb2 	bl	80020e8 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002186:	e012      	b.n	80021ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002188:	f7ff ffae 	bl	80020e8 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b0a      	cmp	r3, #10
 8002194:	d90b      	bls.n	80021ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2205      	movs	r2, #5
 80021a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e09f      	b.n	80022ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1e5      	bne.n	8002188 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7e1b      	ldrb	r3, [r3, #24]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d108      	bne.n	80021d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	e007      	b.n	80021e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	7e5b      	ldrb	r3, [r3, #25]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d108      	bne.n	8002200 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	e007      	b.n	8002210 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800220e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7e9b      	ldrb	r3, [r3, #26]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d108      	bne.n	800222a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0220 	orr.w	r2, r2, #32
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	e007      	b.n	800223a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0220 	bic.w	r2, r2, #32
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7edb      	ldrb	r3, [r3, #27]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d108      	bne.n	8002254 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0210 	bic.w	r2, r2, #16
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e007      	b.n	8002264 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0210 	orr.w	r2, r2, #16
 8002262:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7f1b      	ldrb	r3, [r3, #28]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d108      	bne.n	800227e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0208 	orr.w	r2, r2, #8
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e007      	b.n	800228e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0208 	bic.w	r2, r2, #8
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7f5b      	ldrb	r3, [r3, #29]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d108      	bne.n	80022a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0204 	orr.w	r2, r2, #4
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e007      	b.n	80022b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0204 	bic.w	r2, r2, #4
 80022b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	ea42 0103 	orr.w	r1, r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	1e5a      	subs	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d003      	beq.n	800231e <HAL_CAN_ConfigFilter+0x26>
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	2b02      	cmp	r3, #2
 800231a:	f040 80be 	bne.w	800249a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800231e:	4b65      	ldr	r3, [pc, #404]	; (80024b4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002320:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002328:	f043 0201 	orr.w	r2, r3, #1
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002338:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	431a      	orrs	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	2201      	movs	r2, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	43db      	mvns	r3, r3
 8002370:	401a      	ands	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d123      	bne.n	80023c8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43db      	mvns	r3, r3
 800238a:	401a      	ands	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3248      	adds	r2, #72	; 0x48
 80023a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023be:	6979      	ldr	r1, [r7, #20]
 80023c0:	3348      	adds	r3, #72	; 0x48
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	440b      	add	r3, r1
 80023c6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d122      	bne.n	8002416 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	431a      	orrs	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3248      	adds	r2, #72	; 0x48
 80023f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800240a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800240c:	6979      	ldr	r1, [r7, #20]
 800240e:	3348      	adds	r3, #72	; 0x48
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	440b      	add	r3, r1
 8002414:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	43db      	mvns	r3, r3
 8002428:	401a      	ands	r2, r3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002430:	e007      	b.n	8002442 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	431a      	orrs	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43db      	mvns	r3, r3
 8002454:	401a      	ands	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800245c:	e007      	b.n	800246e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	431a      	orrs	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d107      	bne.n	8002486 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	431a      	orrs	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800248c:	f023 0201 	bic.w	r2, r3, #1
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e006      	b.n	80024a8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
  }
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	40006400 	.word	0x40006400

080024b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d12e      	bne.n	800252a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024e4:	f7ff fe00 	bl	80020e8 <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024ea:	e012      	b.n	8002512 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024ec:	f7ff fdfc 	bl	80020e8 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b0a      	cmp	r3, #10
 80024f8:	d90b      	bls.n	8002512 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2205      	movs	r2, #5
 800250a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e012      	b.n	8002538 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1e5      	bne.n	80024ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e006      	b.n	8002538 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
  }
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002554:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800255e:	7ffb      	ldrb	r3, [r7, #31]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d003      	beq.n	800256c <HAL_CAN_AddTxMessage+0x2c>
 8002564:	7ffb      	ldrb	r3, [r7, #31]
 8002566:	2b02      	cmp	r3, #2
 8002568:	f040 80b8 	bne.w	80026dc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10a      	bne.n	800258c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800257c:	2b00      	cmp	r3, #0
 800257e:	d105      	bne.n	800258c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 80a0 	beq.w	80026cc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	0e1b      	lsrs	r3, r3, #24
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d907      	bls.n	80025ac <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e09e      	b.n	80026ea <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80025ac:	2201      	movs	r2, #1
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	409a      	lsls	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10d      	bne.n	80025da <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025c8:	68f9      	ldr	r1, [r7, #12]
 80025ca:	6809      	ldr	r1, [r1, #0]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3318      	adds	r3, #24
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	440b      	add	r3, r1
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	e00f      	b.n	80025fa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025e4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025ea:	68f9      	ldr	r1, [r7, #12]
 80025ec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80025ee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3318      	adds	r3, #24
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	440b      	add	r3, r1
 80025f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	3318      	adds	r3, #24
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	440b      	add	r3, r1
 800260a:	3304      	adds	r3, #4
 800260c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	7d1b      	ldrb	r3, [r3, #20]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d111      	bne.n	800263a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	3318      	adds	r3, #24
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	4413      	add	r3, r2
 8002622:	3304      	adds	r3, #4
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	6811      	ldr	r1, [r2, #0]
 800262a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3318      	adds	r3, #24
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	440b      	add	r3, r1
 8002636:	3304      	adds	r3, #4
 8002638:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3307      	adds	r3, #7
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	061a      	lsls	r2, r3, #24
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3306      	adds	r3, #6
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3305      	adds	r3, #5
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	4313      	orrs	r3, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	3204      	adds	r2, #4
 800265a:	7812      	ldrb	r2, [r2, #0]
 800265c:	4610      	mov	r0, r2
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	6811      	ldr	r1, [r2, #0]
 8002662:	ea43 0200 	orr.w	r2, r3, r0
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	440b      	add	r3, r1
 800266c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002670:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3303      	adds	r3, #3
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	061a      	lsls	r2, r3, #24
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3302      	adds	r3, #2
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	041b      	lsls	r3, r3, #16
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3301      	adds	r3, #1
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	4313      	orrs	r3, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	7812      	ldrb	r2, [r2, #0]
 8002692:	4610      	mov	r0, r2
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	6811      	ldr	r1, [r2, #0]
 8002698:	ea43 0200 	orr.w	r2, r3, r0
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	440b      	add	r3, r1
 80026a2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80026a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	3318      	adds	r3, #24
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	4413      	add	r3, r2
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	6811      	ldr	r1, [r2, #0]
 80026ba:	f043 0201 	orr.w	r2, r3, #1
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	3318      	adds	r3, #24
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	440b      	add	r3, r1
 80026c6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e00e      	b.n	80026ea <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e006      	b.n	80026ea <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
  }
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002708:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800270a:	7afb      	ldrb	r3, [r7, #11]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d002      	beq.n	8002716 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002710:	7afb      	ldrb	r3, [r7, #11]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d11d      	bne.n	8002752 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3301      	adds	r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3301      	adds	r3, #1
 800273c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3301      	adds	r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002752:	68fb      	ldr	r3, [r7, #12]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002774:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002776:	7dfb      	ldrb	r3, [r7, #23]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d003      	beq.n	8002784 <HAL_CAN_GetRxMessage+0x24>
 800277c:	7dfb      	ldrb	r3, [r7, #23]
 800277e:	2b02      	cmp	r3, #2
 8002780:	f040 80f3 	bne.w	800296a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10e      	bne.n	80027a8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d116      	bne.n	80027c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0e7      	b.n	8002978 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d107      	bne.n	80027c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e0d8      	b.n	8002978 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	331b      	adds	r3, #27
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	4413      	add	r3, r2
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0204 	and.w	r2, r3, #4
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10c      	bne.n	80027fe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	331b      	adds	r3, #27
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	4413      	add	r3, r2
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	0d5b      	lsrs	r3, r3, #21
 80027f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e00b      	b.n	8002816 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	331b      	adds	r3, #27
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	4413      	add	r3, r2
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	08db      	lsrs	r3, r3, #3
 800280e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	331b      	adds	r3, #27
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	4413      	add	r3, r2
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0202 	and.w	r2, r3, #2
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	331b      	adds	r3, #27
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	4413      	add	r3, r2
 8002838:	3304      	adds	r3, #4
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 020f 	and.w	r2, r3, #15
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	331b      	adds	r3, #27
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	4413      	add	r3, r2
 8002850:	3304      	adds	r3, #4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	b2da      	uxtb	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	331b      	adds	r3, #27
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	4413      	add	r3, r2
 8002868:	3304      	adds	r3, #4
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	b29a      	uxth	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	4413      	add	r3, r2
 800287e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	4413      	add	r3, r2
 8002894:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	0a1a      	lsrs	r2, r3, #8
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	3301      	adds	r3, #1
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	0c1a      	lsrs	r2, r3, #16
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	3302      	adds	r3, #2
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	0e1a      	lsrs	r2, r3, #24
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	3303      	adds	r3, #3
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	3304      	adds	r3, #4
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	0a1a      	lsrs	r2, r3, #8
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	3305      	adds	r3, #5
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	4413      	add	r3, r2
 8002914:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	0c1a      	lsrs	r2, r3, #16
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	3306      	adds	r3, #6
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	4413      	add	r3, r2
 800292e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0e1a      	lsrs	r2, r3, #24
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	3307      	adds	r3, #7
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d108      	bne.n	8002956 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0220 	orr.w	r2, r2, #32
 8002952:	60da      	str	r2, [r3, #12]
 8002954:	e007      	b.n	8002966 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0220 	orr.w	r2, r2, #32
 8002964:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	e006      	b.n	8002978 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
  }
}
 8002978:	4618      	mov	r0, r3
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002994:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d002      	beq.n	80029a2 <HAL_CAN_ActivateNotification+0x1e>
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d109      	bne.n	80029b6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6959      	ldr	r1, [r3, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e006      	b.n	80029c4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
  }
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d07c      	beq.n	8002b10 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d023      	beq.n	8002a68 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2201      	movs	r2, #1
 8002a26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f983 	bl	8002d3e <HAL_CAN_TxMailbox0CompleteCallback>
 8002a38:	e016      	b.n	8002a68 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4c:	e00c      	b.n	8002a68 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d004      	beq.n	8002a62 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a60:	e002      	b.n	8002a68 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f989 	bl	8002d7a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d024      	beq.n	8002abc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f963 	bl	8002d52 <HAL_CAN_TxMailbox1CompleteCallback>
 8002a8c:	e016      	b.n	8002abc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d004      	beq.n	8002aa2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa0:	e00c      	b.n	8002abc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d004      	beq.n	8002ab6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab4:	e002      	b.n	8002abc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f969 	bl	8002d8e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d024      	beq.n	8002b10 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ace:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f943 	bl	8002d66 <HAL_CAN_TxMailbox2CompleteCallback>
 8002ae0:	e016      	b.n	8002b10 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d004      	beq.n	8002af6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
 8002af4:	e00c      	b.n	8002b10 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d004      	beq.n	8002b0a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	e002      	b.n	8002b10 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f949 	bl	8002da2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00c      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2210      	movs	r2, #16
 8002b32:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d006      	beq.n	8002b56 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2208      	movs	r2, #8
 8002b4e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f930 	bl	8002db6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d009      	beq.n	8002b74 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fd feca 	bl	8000908 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00c      	beq.n	8002b98 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d007      	beq.n	8002b98 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2210      	movs	r2, #16
 8002b96:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00b      	beq.n	8002bba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d006      	beq.n	8002bba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2208      	movs	r2, #8
 8002bb2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f912 	bl	8002dde <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d009      	beq.n	8002bd8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f8f9 	bl	8002dca <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f8fc 	bl	8002df2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00b      	beq.n	8002c1c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d006      	beq.n	8002c1c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2208      	movs	r2, #8
 8002c14:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f8f5 	bl	8002e06 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d07b      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d072      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d008      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	f043 0302 	orr.w	r3, r3, #2
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d008      	beq.n	8002c84 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	f043 0304 	orr.w	r3, r3, #4
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d043      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d03e      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c9e:	2b60      	cmp	r3, #96	; 0x60
 8002ca0:	d02b      	beq.n	8002cfa <HAL_CAN_IRQHandler+0x32a>
 8002ca2:	2b60      	cmp	r3, #96	; 0x60
 8002ca4:	d82e      	bhi.n	8002d04 <HAL_CAN_IRQHandler+0x334>
 8002ca6:	2b50      	cmp	r3, #80	; 0x50
 8002ca8:	d022      	beq.n	8002cf0 <HAL_CAN_IRQHandler+0x320>
 8002caa:	2b50      	cmp	r3, #80	; 0x50
 8002cac:	d82a      	bhi.n	8002d04 <HAL_CAN_IRQHandler+0x334>
 8002cae:	2b40      	cmp	r3, #64	; 0x40
 8002cb0:	d019      	beq.n	8002ce6 <HAL_CAN_IRQHandler+0x316>
 8002cb2:	2b40      	cmp	r3, #64	; 0x40
 8002cb4:	d826      	bhi.n	8002d04 <HAL_CAN_IRQHandler+0x334>
 8002cb6:	2b30      	cmp	r3, #48	; 0x30
 8002cb8:	d010      	beq.n	8002cdc <HAL_CAN_IRQHandler+0x30c>
 8002cba:	2b30      	cmp	r3, #48	; 0x30
 8002cbc:	d822      	bhi.n	8002d04 <HAL_CAN_IRQHandler+0x334>
 8002cbe:	2b10      	cmp	r3, #16
 8002cc0:	d002      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0x2f8>
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d005      	beq.n	8002cd2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002cc6:	e01d      	b.n	8002d04 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	f043 0308 	orr.w	r3, r3, #8
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cd0:	e019      	b.n	8002d06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	f043 0310 	orr.w	r3, r3, #16
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cda:	e014      	b.n	8002d06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	f043 0320 	orr.w	r3, r3, #32
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ce4:	e00f      	b.n	8002d06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cee:	e00a      	b.n	8002d06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cf8:	e005      	b.n	8002d06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d02:	e000      	b.n	8002d06 <HAL_CAN_IRQHandler+0x336>
            break;
 8002d04:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d14:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f872 	bl	8002e1a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d36:	bf00      	nop
 8002d38:	3728      	adds	r7, #40	; 0x28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e62:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	60d3      	str	r3, [r2, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <__NVIC_GetPriorityGrouping+0x18>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	f003 0307 	and.w	r3, r3, #7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db0b      	blt.n	8002ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4907      	ldr	r1, [pc, #28]	; (8002ecc <__NVIC_EnableIRQ+0x38>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000e100 	.word	0xe000e100

08002ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	db0a      	blt.n	8002efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	490c      	ldr	r1, [pc, #48]	; (8002f1c <__NVIC_SetPriority+0x4c>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	0112      	lsls	r2, r2, #4
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef8:	e00a      	b.n	8002f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4908      	ldr	r1, [pc, #32]	; (8002f20 <__NVIC_SetPriority+0x50>)
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	3b04      	subs	r3, #4
 8002f08:	0112      	lsls	r2, r2, #4
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	761a      	strb	r2, [r3, #24]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000e100 	.word	0xe000e100
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b089      	sub	sp, #36	; 0x24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f1c3 0307 	rsb	r3, r3, #7
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	bf28      	it	cs
 8002f42:	2304      	movcs	r3, #4
 8002f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d902      	bls.n	8002f54 <NVIC_EncodePriority+0x30>
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3b03      	subs	r3, #3
 8002f52:	e000      	b.n	8002f56 <NVIC_EncodePriority+0x32>
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43da      	mvns	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	401a      	ands	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	43d9      	mvns	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	4313      	orrs	r3, r2
         );
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3724      	adds	r7, #36	; 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ff4c 	bl	8002e30 <__NVIC_SetPriorityGrouping>
}
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb2:	f7ff ff61 	bl	8002e78 <__NVIC_GetPriorityGrouping>
 8002fb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	68b9      	ldr	r1, [r7, #8]
 8002fbc:	6978      	ldr	r0, [r7, #20]
 8002fbe:	f7ff ffb1 	bl	8002f24 <NVIC_EncodePriority>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc8:	4611      	mov	r1, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff ff80 	bl	8002ed0 <__NVIC_SetPriority>
}
 8002fd0:	bf00      	nop
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff ff54 	bl	8002e94 <__NVIC_EnableIRQ>
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003000:	f7ff f872 	bl	80020e8 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e099      	b.n	8003144 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0201 	bic.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003030:	e00f      	b.n	8003052 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003032:	f7ff f859 	bl	80020e8 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b05      	cmp	r3, #5
 800303e:	d908      	bls.n	8003052 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2203      	movs	r2, #3
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e078      	b.n	8003144 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e8      	bne.n	8003032 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4b38      	ldr	r3, [pc, #224]	; (800314c <HAL_DMA_Init+0x158>)
 800306c:	4013      	ands	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800307e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800308a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d107      	bne.n	80030bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	4313      	orrs	r3, r2
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f023 0307 	bic.w	r3, r3, #7
 80030d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d117      	bne.n	8003116 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00e      	beq.n	8003116 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fb01 	bl	8003700 <DMA_CheckFifoParam>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2240      	movs	r2, #64	; 0x40
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003112:	2301      	movs	r3, #1
 8003114:	e016      	b.n	8003144 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fab8 	bl	8003694 <DMA_CalcBaseAndBitshift>
 8003124:	4603      	mov	r3, r0
 8003126:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312c:	223f      	movs	r2, #63	; 0x3f
 800312e:	409a      	lsls	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	f010803f 	.word	0xf010803f

08003150 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003166:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_DMA_Start_IT+0x26>
 8003172:	2302      	movs	r3, #2
 8003174:	e040      	b.n	80031f8 <HAL_DMA_Start_IT+0xa8>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d12f      	bne.n	80031ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2202      	movs	r2, #2
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fa4a 	bl	8003638 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a8:	223f      	movs	r2, #63	; 0x3f
 80031aa:	409a      	lsls	r2, r3
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0216 	orr.w	r2, r2, #22
 80031be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0208 	orr.w	r2, r2, #8
 80031d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	e005      	b.n	80031f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
 80031f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800320e:	f7fe ff6b 	bl	80020e8 <HAL_GetTick>
 8003212:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d008      	beq.n	8003232 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2280      	movs	r2, #128	; 0x80
 8003224:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e052      	b.n	80032d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0216 	bic.w	r2, r2, #22
 8003240:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003250:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <HAL_DMA_Abort+0x62>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0208 	bic.w	r2, r2, #8
 8003270:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0201 	bic.w	r2, r2, #1
 8003280:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003282:	e013      	b.n	80032ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003284:	f7fe ff30 	bl	80020e8 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b05      	cmp	r3, #5
 8003290:	d90c      	bls.n	80032ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2203      	movs	r2, #3
 800329c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e015      	b.n	80032d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1e4      	bne.n	8003284 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032be:	223f      	movs	r2, #63	; 0x3f
 80032c0:	409a      	lsls	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d004      	beq.n	80032fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e00c      	b.n	8003318 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2205      	movs	r2, #5
 8003302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003330:	4b8e      	ldr	r3, [pc, #568]	; (800356c <HAL_DMA_IRQHandler+0x248>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a8e      	ldr	r2, [pc, #568]	; (8003570 <HAL_DMA_IRQHandler+0x24c>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	0a9b      	lsrs	r3, r3, #10
 800333c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334e:	2208      	movs	r2, #8
 8003350:	409a      	lsls	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4013      	ands	r3, r2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d01a      	beq.n	8003390 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d013      	beq.n	8003390 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0204 	bic.w	r2, r2, #4
 8003376:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	2208      	movs	r2, #8
 800337e:	409a      	lsls	r2, r3
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003388:	f043 0201 	orr.w	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003394:	2201      	movs	r2, #1
 8003396:	409a      	lsls	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d012      	beq.n	80033c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b2:	2201      	movs	r2, #1
 80033b4:	409a      	lsls	r2, r3
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033be:	f043 0202 	orr.w	r2, r3, #2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ca:	2204      	movs	r2, #4
 80033cc:	409a      	lsls	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d012      	beq.n	80033fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00b      	beq.n	80033fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	2204      	movs	r2, #4
 80033ea:	409a      	lsls	r2, r3
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	f043 0204 	orr.w	r2, r3, #4
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003400:	2210      	movs	r2, #16
 8003402:	409a      	lsls	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d043      	beq.n	8003494 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d03c      	beq.n	8003494 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	2210      	movs	r2, #16
 8003420:	409a      	lsls	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d018      	beq.n	8003466 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d108      	bne.n	8003454 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	d024      	beq.n	8003494 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
 8003452:	e01f      	b.n	8003494 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01b      	beq.n	8003494 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	4798      	blx	r3
 8003464:	e016      	b.n	8003494 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d107      	bne.n	8003484 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0208 	bic.w	r2, r2, #8
 8003482:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	2220      	movs	r2, #32
 800349a:	409a      	lsls	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 808f 	beq.w	80035c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 8087 	beq.w	80035c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	2220      	movs	r2, #32
 80034bc:	409a      	lsls	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b05      	cmp	r3, #5
 80034cc:	d136      	bne.n	800353c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0216 	bic.w	r2, r2, #22
 80034dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d103      	bne.n	80034fe <HAL_DMA_IRQHandler+0x1da>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d007      	beq.n	800350e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0208 	bic.w	r2, r2, #8
 800350c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003512:	223f      	movs	r2, #63	; 0x3f
 8003514:	409a      	lsls	r2, r3
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352e:	2b00      	cmp	r3, #0
 8003530:	d07e      	beq.n	8003630 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	4798      	blx	r3
        }
        return;
 800353a:	e079      	b.n	8003630 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01d      	beq.n	8003586 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10d      	bne.n	8003574 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	2b00      	cmp	r3, #0
 800355e:	d031      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4798      	blx	r3
 8003568:	e02c      	b.n	80035c4 <HAL_DMA_IRQHandler+0x2a0>
 800356a:	bf00      	nop
 800356c:	20000030 	.word	0x20000030
 8003570:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d023      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
 8003584:	e01e      	b.n	80035c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10f      	bne.n	80035b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0210 	bic.w	r2, r2, #16
 80035a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d032      	beq.n	8003632 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d022      	beq.n	800361e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2205      	movs	r2, #5
 80035dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0201 	bic.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	3301      	adds	r3, #1
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d307      	bcc.n	800360c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f2      	bne.n	80035f0 <HAL_DMA_IRQHandler+0x2cc>
 800360a:	e000      	b.n	800360e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800360c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
 800362e:	e000      	b.n	8003632 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003630:	bf00      	nop
    }
  }
}
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003654:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b40      	cmp	r3, #64	; 0x40
 8003664:	d108      	bne.n	8003678 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003676:	e007      	b.n	8003688 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	60da      	str	r2, [r3, #12]
}
 8003688:	bf00      	nop
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	3b10      	subs	r3, #16
 80036a4:	4a14      	ldr	r2, [pc, #80]	; (80036f8 <DMA_CalcBaseAndBitshift+0x64>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	091b      	lsrs	r3, r3, #4
 80036ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036ae:	4a13      	ldr	r2, [pc, #76]	; (80036fc <DMA_CalcBaseAndBitshift+0x68>)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d909      	bls.n	80036d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036ca:	f023 0303 	bic.w	r3, r3, #3
 80036ce:	1d1a      	adds	r2, r3, #4
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	659a      	str	r2, [r3, #88]	; 0x58
 80036d4:	e007      	b.n	80036e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036de:	f023 0303 	bic.w	r3, r3, #3
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	aaaaaaab 	.word	0xaaaaaaab
 80036fc:	0800be38 	.word	0x0800be38

08003700 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d11f      	bne.n	800375a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b03      	cmp	r3, #3
 800371e:	d856      	bhi.n	80037ce <DMA_CheckFifoParam+0xce>
 8003720:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <DMA_CheckFifoParam+0x28>)
 8003722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003726:	bf00      	nop
 8003728:	08003739 	.word	0x08003739
 800372c:	0800374b 	.word	0x0800374b
 8003730:	08003739 	.word	0x08003739
 8003734:	080037cf 	.word	0x080037cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d046      	beq.n	80037d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003748:	e043      	b.n	80037d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003752:	d140      	bne.n	80037d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003758:	e03d      	b.n	80037d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003762:	d121      	bne.n	80037a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b03      	cmp	r3, #3
 8003768:	d837      	bhi.n	80037da <DMA_CheckFifoParam+0xda>
 800376a:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <DMA_CheckFifoParam+0x70>)
 800376c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003770:	08003781 	.word	0x08003781
 8003774:	08003787 	.word	0x08003787
 8003778:	08003781 	.word	0x08003781
 800377c:	08003799 	.word	0x08003799
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
      break;
 8003784:	e030      	b.n	80037e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d025      	beq.n	80037de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003796:	e022      	b.n	80037de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037a0:	d11f      	bne.n	80037e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037a6:	e01c      	b.n	80037e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d903      	bls.n	80037b6 <DMA_CheckFifoParam+0xb6>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d003      	beq.n	80037bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037b4:	e018      	b.n	80037e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
      break;
 80037ba:	e015      	b.n	80037e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00e      	beq.n	80037e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      break;
 80037cc:	e00b      	b.n	80037e6 <DMA_CheckFifoParam+0xe6>
      break;
 80037ce:	bf00      	nop
 80037d0:	e00a      	b.n	80037e8 <DMA_CheckFifoParam+0xe8>
      break;
 80037d2:	bf00      	nop
 80037d4:	e008      	b.n	80037e8 <DMA_CheckFifoParam+0xe8>
      break;
 80037d6:	bf00      	nop
 80037d8:	e006      	b.n	80037e8 <DMA_CheckFifoParam+0xe8>
      break;
 80037da:	bf00      	nop
 80037dc:	e004      	b.n	80037e8 <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
 80037e0:	e002      	b.n	80037e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80037e2:	bf00      	nop
 80037e4:	e000      	b.n	80037e8 <DMA_CheckFifoParam+0xe8>
      break;
 80037e6:	bf00      	nop
    }
  } 
  
  return status; 
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop

080037f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b089      	sub	sp, #36	; 0x24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	e16b      	b.n	8003aec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003814:	2201      	movs	r2, #1
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4013      	ands	r3, r2
 8003826:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	429a      	cmp	r2, r3
 800382e:	f040 815a 	bne.w	8003ae6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b01      	cmp	r3, #1
 800383c:	d005      	beq.n	800384a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003846:	2b02      	cmp	r3, #2
 8003848:	d130      	bne.n	80038ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	2203      	movs	r2, #3
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43db      	mvns	r3, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4013      	ands	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003880:	2201      	movs	r2, #1
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 0201 	and.w	r2, r3, #1
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d017      	beq.n	80038e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	2203      	movs	r2, #3
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d123      	bne.n	800393c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	08da      	lsrs	r2, r3, #3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3208      	adds	r2, #8
 80038fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003900:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	220f      	movs	r2, #15
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4313      	orrs	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	08da      	lsrs	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3208      	adds	r2, #8
 8003936:	69b9      	ldr	r1, [r7, #24]
 8003938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	2203      	movs	r2, #3
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 0203 	and.w	r2, r3, #3
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4313      	orrs	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80b4 	beq.w	8003ae6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	4b60      	ldr	r3, [pc, #384]	; (8003b04 <HAL_GPIO_Init+0x30c>)
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	4a5f      	ldr	r2, [pc, #380]	; (8003b04 <HAL_GPIO_Init+0x30c>)
 8003988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800398c:	6453      	str	r3, [r2, #68]	; 0x44
 800398e:	4b5d      	ldr	r3, [pc, #372]	; (8003b04 <HAL_GPIO_Init+0x30c>)
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800399a:	4a5b      	ldr	r2, [pc, #364]	; (8003b08 <HAL_GPIO_Init+0x310>)
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	089b      	lsrs	r3, r3, #2
 80039a0:	3302      	adds	r3, #2
 80039a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	220f      	movs	r2, #15
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43db      	mvns	r3, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4013      	ands	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a52      	ldr	r2, [pc, #328]	; (8003b0c <HAL_GPIO_Init+0x314>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d02b      	beq.n	8003a1e <HAL_GPIO_Init+0x226>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a51      	ldr	r2, [pc, #324]	; (8003b10 <HAL_GPIO_Init+0x318>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d025      	beq.n	8003a1a <HAL_GPIO_Init+0x222>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a50      	ldr	r2, [pc, #320]	; (8003b14 <HAL_GPIO_Init+0x31c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d01f      	beq.n	8003a16 <HAL_GPIO_Init+0x21e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a4f      	ldr	r2, [pc, #316]	; (8003b18 <HAL_GPIO_Init+0x320>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d019      	beq.n	8003a12 <HAL_GPIO_Init+0x21a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a4e      	ldr	r2, [pc, #312]	; (8003b1c <HAL_GPIO_Init+0x324>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_GPIO_Init+0x216>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a4d      	ldr	r2, [pc, #308]	; (8003b20 <HAL_GPIO_Init+0x328>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00d      	beq.n	8003a0a <HAL_GPIO_Init+0x212>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a4c      	ldr	r2, [pc, #304]	; (8003b24 <HAL_GPIO_Init+0x32c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d007      	beq.n	8003a06 <HAL_GPIO_Init+0x20e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a4b      	ldr	r2, [pc, #300]	; (8003b28 <HAL_GPIO_Init+0x330>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d101      	bne.n	8003a02 <HAL_GPIO_Init+0x20a>
 80039fe:	2307      	movs	r3, #7
 8003a00:	e00e      	b.n	8003a20 <HAL_GPIO_Init+0x228>
 8003a02:	2308      	movs	r3, #8
 8003a04:	e00c      	b.n	8003a20 <HAL_GPIO_Init+0x228>
 8003a06:	2306      	movs	r3, #6
 8003a08:	e00a      	b.n	8003a20 <HAL_GPIO_Init+0x228>
 8003a0a:	2305      	movs	r3, #5
 8003a0c:	e008      	b.n	8003a20 <HAL_GPIO_Init+0x228>
 8003a0e:	2304      	movs	r3, #4
 8003a10:	e006      	b.n	8003a20 <HAL_GPIO_Init+0x228>
 8003a12:	2303      	movs	r3, #3
 8003a14:	e004      	b.n	8003a20 <HAL_GPIO_Init+0x228>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e002      	b.n	8003a20 <HAL_GPIO_Init+0x228>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_GPIO_Init+0x228>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	f002 0203 	and.w	r2, r2, #3
 8003a26:	0092      	lsls	r2, r2, #2
 8003a28:	4093      	lsls	r3, r2
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a30:	4935      	ldr	r1, [pc, #212]	; (8003b08 <HAL_GPIO_Init+0x310>)
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	3302      	adds	r3, #2
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <HAL_GPIO_Init+0x334>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a62:	4a32      	ldr	r2, [pc, #200]	; (8003b2c <HAL_GPIO_Init+0x334>)
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a68:	4b30      	ldr	r3, [pc, #192]	; (8003b2c <HAL_GPIO_Init+0x334>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4013      	ands	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a8c:	4a27      	ldr	r2, [pc, #156]	; (8003b2c <HAL_GPIO_Init+0x334>)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a92:	4b26      	ldr	r3, [pc, #152]	; (8003b2c <HAL_GPIO_Init+0x334>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ab6:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <HAL_GPIO_Init+0x334>)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003abc:	4b1b      	ldr	r3, [pc, #108]	; (8003b2c <HAL_GPIO_Init+0x334>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ae0:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <HAL_GPIO_Init+0x334>)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b0f      	cmp	r3, #15
 8003af0:	f67f ae90 	bls.w	8003814 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	3724      	adds	r7, #36	; 0x24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40013800 	.word	0x40013800
 8003b0c:	40020000 	.word	0x40020000
 8003b10:	40020400 	.word	0x40020400
 8003b14:	40020800 	.word	0x40020800
 8003b18:	40020c00 	.word	0x40020c00
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40021400 	.word	0x40021400
 8003b24:	40021800 	.word	0x40021800
 8003b28:	40021c00 	.word	0x40021c00
 8003b2c:	40013c00 	.word	0x40013c00

08003b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	807b      	strh	r3, [r7, #2]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b40:	787b      	ldrb	r3, [r7, #1]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b46:	887a      	ldrh	r2, [r7, #2]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b4c:	e003      	b.n	8003b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b4e:	887b      	ldrh	r3, [r7, #2]
 8003b50:	041a      	lsls	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	619a      	str	r2, [r3, #24]
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b74:	887a      	ldrh	r2, [r7, #2]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	041a      	lsls	r2, r3, #16
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	43d9      	mvns	r1, r3
 8003b80:	887b      	ldrh	r3, [r7, #2]
 8003b82:	400b      	ands	r3, r1
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	619a      	str	r2, [r3, #24]
}
 8003b8a:	bf00      	nop
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ba2:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d006      	beq.n	8003bbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bae:	4a05      	ldr	r2, [pc, #20]	; (8003bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bb0:	88fb      	ldrh	r3, [r7, #6]
 8003bb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fc ff24 	bl	8000a04 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40013c00 	.word	0x40013c00

08003bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e267      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d075      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003be6:	4b88      	ldr	r3, [pc, #544]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d00c      	beq.n	8003c0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bf2:	4b85      	ldr	r3, [pc, #532]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d112      	bne.n	8003c24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfe:	4b82      	ldr	r3, [pc, #520]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c0a:	d10b      	bne.n	8003c24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0c:	4b7e      	ldr	r3, [pc, #504]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d05b      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x108>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d157      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e242      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2c:	d106      	bne.n	8003c3c <HAL_RCC_OscConfig+0x74>
 8003c2e:	4b76      	ldr	r3, [pc, #472]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a75      	ldr	r2, [pc, #468]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e01d      	b.n	8003c78 <HAL_RCC_OscConfig+0xb0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x98>
 8003c46:	4b70      	ldr	r3, [pc, #448]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a6f      	ldr	r2, [pc, #444]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	4b6d      	ldr	r3, [pc, #436]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a6c      	ldr	r2, [pc, #432]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	e00b      	b.n	8003c78 <HAL_RCC_OscConfig+0xb0>
 8003c60:	4b69      	ldr	r3, [pc, #420]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a68      	ldr	r2, [pc, #416]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	4b66      	ldr	r3, [pc, #408]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a65      	ldr	r2, [pc, #404]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d013      	beq.n	8003ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fe fa32 	bl	80020e8 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c88:	f7fe fa2e 	bl	80020e8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	; 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e207      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	4b5b      	ldr	r3, [pc, #364]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0xc0>
 8003ca6:	e014      	b.n	8003cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7fe fa1e 	bl	80020e8 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb0:	f7fe fa1a 	bl	80020e8 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	; 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e1f3      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	4b51      	ldr	r3, [pc, #324]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0xe8>
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d063      	beq.n	8003da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cde:	4b4a      	ldr	r3, [pc, #296]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00b      	beq.n	8003d02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cea:	4b47      	ldr	r3, [pc, #284]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d11c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf6:	4b44      	ldr	r3, [pc, #272]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d116      	bne.n	8003d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d02:	4b41      	ldr	r3, [pc, #260]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_RCC_OscConfig+0x152>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e1c7      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1a:	4b3b      	ldr	r3, [pc, #236]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4937      	ldr	r1, [pc, #220]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	e03a      	b.n	8003da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d020      	beq.n	8003d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d38:	4b34      	ldr	r3, [pc, #208]	; (8003e0c <HAL_RCC_OscConfig+0x244>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3e:	f7fe f9d3 	bl	80020e8 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d46:	f7fe f9cf 	bl	80020e8 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e1a8      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d58:	4b2b      	ldr	r3, [pc, #172]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0f0      	beq.n	8003d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d64:	4b28      	ldr	r3, [pc, #160]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4925      	ldr	r1, [pc, #148]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	600b      	str	r3, [r1, #0]
 8003d78:	e015      	b.n	8003da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d7a:	4b24      	ldr	r3, [pc, #144]	; (8003e0c <HAL_RCC_OscConfig+0x244>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fe f9b2 	bl	80020e8 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d88:	f7fe f9ae 	bl	80020e8 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e187      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9a:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d036      	beq.n	8003e20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d016      	beq.n	8003de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dba:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <HAL_RCC_OscConfig+0x248>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc0:	f7fe f992 	bl	80020e8 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc8:	f7fe f98e 	bl	80020e8 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e167      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x200>
 8003de6:	e01b      	b.n	8003e20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de8:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <HAL_RCC_OscConfig+0x248>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dee:	f7fe f97b 	bl	80020e8 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df4:	e00e      	b.n	8003e14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df6:	f7fe f977 	bl	80020e8 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d907      	bls.n	8003e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e150      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	42470000 	.word	0x42470000
 8003e10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e14:	4b88      	ldr	r3, [pc, #544]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1ea      	bne.n	8003df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8097 	beq.w	8003f5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e32:	4b81      	ldr	r3, [pc, #516]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10f      	bne.n	8003e5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	4b7d      	ldr	r3, [pc, #500]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	4a7c      	ldr	r2, [pc, #496]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4e:	4b7a      	ldr	r3, [pc, #488]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5e:	4b77      	ldr	r3, [pc, #476]	; (800403c <HAL_RCC_OscConfig+0x474>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d118      	bne.n	8003e9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e6a:	4b74      	ldr	r3, [pc, #464]	; (800403c <HAL_RCC_OscConfig+0x474>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a73      	ldr	r2, [pc, #460]	; (800403c <HAL_RCC_OscConfig+0x474>)
 8003e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e76:	f7fe f937 	bl	80020e8 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7e:	f7fe f933 	bl	80020e8 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e10c      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e90:	4b6a      	ldr	r3, [pc, #424]	; (800403c <HAL_RCC_OscConfig+0x474>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x2ea>
 8003ea4:	4b64      	ldr	r3, [pc, #400]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea8:	4a63      	ldr	r2, [pc, #396]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb0:	e01c      	b.n	8003eec <HAL_RCC_OscConfig+0x324>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x30c>
 8003eba:	4b5f      	ldr	r3, [pc, #380]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a5e      	ldr	r2, [pc, #376]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	f043 0304 	orr.w	r3, r3, #4
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec6:	4b5c      	ldr	r3, [pc, #368]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	4a5b      	ldr	r2, [pc, #364]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed2:	e00b      	b.n	8003eec <HAL_RCC_OscConfig+0x324>
 8003ed4:	4b58      	ldr	r3, [pc, #352]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	4a57      	ldr	r2, [pc, #348]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee0:	4b55      	ldr	r3, [pc, #340]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	4a54      	ldr	r2, [pc, #336]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ee6:	f023 0304 	bic.w	r3, r3, #4
 8003eea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d015      	beq.n	8003f20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fe f8f8 	bl	80020e8 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efc:	f7fe f8f4 	bl	80020e8 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e0cb      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f12:	4b49      	ldr	r3, [pc, #292]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0ee      	beq.n	8003efc <HAL_RCC_OscConfig+0x334>
 8003f1e:	e014      	b.n	8003f4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f20:	f7fe f8e2 	bl	80020e8 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7fe f8de 	bl	80020e8 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e0b5      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3e:	4b3e      	ldr	r3, [pc, #248]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1ee      	bne.n	8003f28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d105      	bne.n	8003f5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f50:	4b39      	ldr	r3, [pc, #228]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	4a38      	ldr	r2, [pc, #224]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80a1 	beq.w	80040a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f66:	4b34      	ldr	r3, [pc, #208]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d05c      	beq.n	800402c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d141      	bne.n	8003ffe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7a:	4b31      	ldr	r3, [pc, #196]	; (8004040 <HAL_RCC_OscConfig+0x478>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fe f8b2 	bl	80020e8 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f88:	f7fe f8ae 	bl	80020e8 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e087      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	4b27      	ldr	r3, [pc, #156]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	019b      	lsls	r3, r3, #6
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	085b      	lsrs	r3, r3, #1
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	041b      	lsls	r3, r3, #16
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	491b      	ldr	r1, [pc, #108]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <HAL_RCC_OscConfig+0x478>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fe f887 	bl	80020e8 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fe f883 	bl	80020e8 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e05c      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff0:	4b11      	ldr	r3, [pc, #68]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x416>
 8003ffc:	e054      	b.n	80040a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffe:	4b10      	ldr	r3, [pc, #64]	; (8004040 <HAL_RCC_OscConfig+0x478>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004004:	f7fe f870 	bl	80020e8 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400c:	f7fe f86c 	bl	80020e8 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e045      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x444>
 800402a:	e03d      	b.n	80040a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d107      	bne.n	8004044 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e038      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
 8004038:	40023800 	.word	0x40023800
 800403c:	40007000 	.word	0x40007000
 8004040:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004044:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <HAL_RCC_OscConfig+0x4ec>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d028      	beq.n	80040a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405c:	429a      	cmp	r2, r3
 800405e:	d121      	bne.n	80040a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d11a      	bne.n	80040a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004074:	4013      	ands	r3, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800407a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800407c:	4293      	cmp	r3, r2
 800407e:	d111      	bne.n	80040a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	085b      	lsrs	r3, r3, #1
 800408c:	3b01      	subs	r3, #1
 800408e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800

080040b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0cc      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040cc:	4b68      	ldr	r3, [pc, #416]	; (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d90c      	bls.n	80040f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040da:	4b65      	ldr	r3, [pc, #404]	; (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b63      	ldr	r3, [pc, #396]	; (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0b8      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d020      	beq.n	8004142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800410c:	4b59      	ldr	r3, [pc, #356]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4a58      	ldr	r2, [pc, #352]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004116:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004124:	4b53      	ldr	r3, [pc, #332]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4a52      	ldr	r2, [pc, #328]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800412e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004130:	4b50      	ldr	r3, [pc, #320]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	494d      	ldr	r1, [pc, #308]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d044      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d107      	bne.n	8004166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	4b47      	ldr	r3, [pc, #284]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d119      	bne.n	8004196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e07f      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d003      	beq.n	8004176 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004172:	2b03      	cmp	r3, #3
 8004174:	d107      	bne.n	8004186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004176:	4b3f      	ldr	r3, [pc, #252]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e06f      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004186:	4b3b      	ldr	r3, [pc, #236]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e067      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004196:	4b37      	ldr	r3, [pc, #220]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f023 0203 	bic.w	r2, r3, #3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4934      	ldr	r1, [pc, #208]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041a8:	f7fd ff9e 	bl	80020e8 <HAL_GetTick>
 80041ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ae:	e00a      	b.n	80041c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b0:	f7fd ff9a 	bl	80020e8 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e04f      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c6:	4b2b      	ldr	r3, [pc, #172]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 020c 	and.w	r2, r3, #12
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d1eb      	bne.n	80041b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d8:	4b25      	ldr	r3, [pc, #148]	; (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d20c      	bcs.n	8004200 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	4b22      	ldr	r3, [pc, #136]	; (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b20      	ldr	r3, [pc, #128]	; (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e032      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800420c:	4b19      	ldr	r3, [pc, #100]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4916      	ldr	r1, [pc, #88]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	4313      	orrs	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800422a:	4b12      	ldr	r3, [pc, #72]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	490e      	ldr	r1, [pc, #56]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800423e:	f000 f821 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8004242:	4602      	mov	r2, r0
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	490a      	ldr	r1, [pc, #40]	; (8004278 <HAL_RCC_ClockConfig+0x1c0>)
 8004250:	5ccb      	ldrb	r3, [r1, r3]
 8004252:	fa22 f303 	lsr.w	r3, r2, r3
 8004256:	4a09      	ldr	r2, [pc, #36]	; (800427c <HAL_RCC_ClockConfig+0x1c4>)
 8004258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800425a:	4b09      	ldr	r3, [pc, #36]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fd f942 	bl	80014e8 <HAL_InitTick>

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40023c00 	.word	0x40023c00
 8004274:	40023800 	.word	0x40023800
 8004278:	0800be20 	.word	0x0800be20
 800427c:	20000030 	.word	0x20000030
 8004280:	20000034 	.word	0x20000034

08004284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004288:	b090      	sub	sp, #64	; 0x40
 800428a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
 8004290:	2300      	movs	r3, #0
 8004292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004294:	2300      	movs	r3, #0
 8004296:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800429c:	4b59      	ldr	r3, [pc, #356]	; (8004404 <HAL_RCC_GetSysClockFreq+0x180>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 030c 	and.w	r3, r3, #12
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d00d      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x40>
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	f200 80a1 	bhi.w	80043f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0x34>
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d003      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0x3a>
 80042b6:	e09b      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042b8:	4b53      	ldr	r3, [pc, #332]	; (8004408 <HAL_RCC_GetSysClockFreq+0x184>)
 80042ba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80042bc:	e09b      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042be:	4b53      	ldr	r3, [pc, #332]	; (800440c <HAL_RCC_GetSysClockFreq+0x188>)
 80042c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042c2:	e098      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042c4:	4b4f      	ldr	r3, [pc, #316]	; (8004404 <HAL_RCC_GetSysClockFreq+0x180>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042cc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ce:	4b4d      	ldr	r3, [pc, #308]	; (8004404 <HAL_RCC_GetSysClockFreq+0x180>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d028      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042da:	4b4a      	ldr	r3, [pc, #296]	; (8004404 <HAL_RCC_GetSysClockFreq+0x180>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	099b      	lsrs	r3, r3, #6
 80042e0:	2200      	movs	r2, #0
 80042e2:	623b      	str	r3, [r7, #32]
 80042e4:	627a      	str	r2, [r7, #36]	; 0x24
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042ec:	2100      	movs	r1, #0
 80042ee:	4b47      	ldr	r3, [pc, #284]	; (800440c <HAL_RCC_GetSysClockFreq+0x188>)
 80042f0:	fb03 f201 	mul.w	r2, r3, r1
 80042f4:	2300      	movs	r3, #0
 80042f6:	fb00 f303 	mul.w	r3, r0, r3
 80042fa:	4413      	add	r3, r2
 80042fc:	4a43      	ldr	r2, [pc, #268]	; (800440c <HAL_RCC_GetSysClockFreq+0x188>)
 80042fe:	fba0 1202 	umull	r1, r2, r0, r2
 8004302:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004304:	460a      	mov	r2, r1
 8004306:	62ba      	str	r2, [r7, #40]	; 0x28
 8004308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800430a:	4413      	add	r3, r2
 800430c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800430e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004310:	2200      	movs	r2, #0
 8004312:	61bb      	str	r3, [r7, #24]
 8004314:	61fa      	str	r2, [r7, #28]
 8004316:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800431a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800431e:	f7fb ffa7 	bl	8000270 <__aeabi_uldivmod>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4613      	mov	r3, r2
 8004328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800432a:	e053      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432c:	4b35      	ldr	r3, [pc, #212]	; (8004404 <HAL_RCC_GetSysClockFreq+0x180>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	099b      	lsrs	r3, r3, #6
 8004332:	2200      	movs	r2, #0
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	617a      	str	r2, [r7, #20]
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800433e:	f04f 0b00 	mov.w	fp, #0
 8004342:	4652      	mov	r2, sl
 8004344:	465b      	mov	r3, fp
 8004346:	f04f 0000 	mov.w	r0, #0
 800434a:	f04f 0100 	mov.w	r1, #0
 800434e:	0159      	lsls	r1, r3, #5
 8004350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004354:	0150      	lsls	r0, r2, #5
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	ebb2 080a 	subs.w	r8, r2, sl
 800435e:	eb63 090b 	sbc.w	r9, r3, fp
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800436e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004372:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004376:	ebb2 0408 	subs.w	r4, r2, r8
 800437a:	eb63 0509 	sbc.w	r5, r3, r9
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	00eb      	lsls	r3, r5, #3
 8004388:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800438c:	00e2      	lsls	r2, r4, #3
 800438e:	4614      	mov	r4, r2
 8004390:	461d      	mov	r5, r3
 8004392:	eb14 030a 	adds.w	r3, r4, sl
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	eb45 030b 	adc.w	r3, r5, fp
 800439c:	607b      	str	r3, [r7, #4]
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043aa:	4629      	mov	r1, r5
 80043ac:	028b      	lsls	r3, r1, #10
 80043ae:	4621      	mov	r1, r4
 80043b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043b4:	4621      	mov	r1, r4
 80043b6:	028a      	lsls	r2, r1, #10
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043be:	2200      	movs	r2, #0
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	60fa      	str	r2, [r7, #12]
 80043c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043c8:	f7fb ff52 	bl	8000270 <__aeabi_uldivmod>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4613      	mov	r3, r2
 80043d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_RCC_GetSysClockFreq+0x180>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	0c1b      	lsrs	r3, r3, #16
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	3301      	adds	r3, #1
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80043e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043ee:	e002      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <HAL_RCC_GetSysClockFreq+0x184>)
 80043f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3740      	adds	r7, #64	; 0x40
 80043fc:	46bd      	mov	sp, r7
 80043fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004402:	bf00      	nop
 8004404:	40023800 	.word	0x40023800
 8004408:	00f42400 	.word	0x00f42400
 800440c:	00b71b00 	.word	0x00b71b00

08004410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004414:	4b03      	ldr	r3, [pc, #12]	; (8004424 <HAL_RCC_GetHCLKFreq+0x14>)
 8004416:	681b      	ldr	r3, [r3, #0]
}
 8004418:	4618      	mov	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000030 	.word	0x20000030

08004428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800442c:	f7ff fff0 	bl	8004410 <HAL_RCC_GetHCLKFreq>
 8004430:	4602      	mov	r2, r0
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	0a9b      	lsrs	r3, r3, #10
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	4903      	ldr	r1, [pc, #12]	; (800444c <HAL_RCC_GetPCLK1Freq+0x24>)
 800443e:	5ccb      	ldrb	r3, [r1, r3]
 8004440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004444:	4618      	mov	r0, r3
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40023800 	.word	0x40023800
 800444c:	0800be30 	.word	0x0800be30

08004450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004454:	f7ff ffdc 	bl	8004410 <HAL_RCC_GetHCLKFreq>
 8004458:	4602      	mov	r2, r0
 800445a:	4b05      	ldr	r3, [pc, #20]	; (8004470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	0b5b      	lsrs	r3, r3, #13
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	4903      	ldr	r1, [pc, #12]	; (8004474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004466:	5ccb      	ldrb	r3, [r1, r3]
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40023800 	.word	0x40023800
 8004474:	0800be30 	.word	0x0800be30

08004478 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	220f      	movs	r2, #15
 8004486:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004488:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <HAL_RCC_GetClockConfig+0x5c>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0203 	and.w	r2, r3, #3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004494:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <HAL_RCC_GetClockConfig+0x5c>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044a0:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <HAL_RCC_GetClockConfig+0x5c>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044ac:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <HAL_RCC_GetClockConfig+0x5c>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	08db      	lsrs	r3, r3, #3
 80044b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044ba:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <HAL_RCC_GetClockConfig+0x60>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0207 	and.w	r2, r3, #7
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	601a      	str	r2, [r3, #0]
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40023800 	.word	0x40023800
 80044d8:	40023c00 	.word	0x40023c00

080044dc <HAL_SMBUS_Init>:
  * @param  hsmbus pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60bb      	str	r3, [r7, #8]

  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_SMBUS_Init+0x1a>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e0a1      	b.n	800463a <HAL_SMBUS_Init+0x15e>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_SMBUS_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fc fe98 	bl	8001240 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2224      	movs	r2, #36	; 0x24
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004528:	f7ff ff7e 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 800452c:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = SMBUS_FREQRANGE(pclk1);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4a44      	ldr	r2, [pc, #272]	; (8004644 <HAL_SMBUS_Init+0x168>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	0c9b      	lsrs	r3, r3, #18
 8004538:	60fb      	str	r3, [r7, #12]

  /*---------------------------- SMBUSx CR2 Configuration ----------------------*/
  /* Configure SMBUSx: Frequency range */
  MODIFY_REG(hsmbus->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	430a      	orrs	r2, r1
 800454c:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx TRISE Configuration --------------------*/
  /* Configure SMBUSx: Rise Time */
  MODIFY_REG(hsmbus->Instance->TRISE, I2C_TRISE_TRISE, SMBUS_RISE_TIME(freqrange));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	621a      	str	r2, [r3, #32]

  /*---------------------------- SMBUSx CCR Configuration ----------------------*/
  /* Configure SMBUSx: Speed */
  MODIFY_REG(hsmbus->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), SMBUS_SPEED_STANDARD(pclk1, hsmbus->Init.ClockSpeed));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 800456e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6852      	ldr	r2, [r2, #4]
 8004576:	0052      	lsls	r2, r2, #1
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	fbb1 f1f2 	udiv	r1, r1, r2
 800457e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004582:	400a      	ands	r2, r1
 8004584:	2a00      	cmp	r2, #0
 8004586:	d006      	beq.n	8004596 <HAL_SMBUS_Init+0xba>
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6852      	ldr	r2, [r2, #4]
 800458c:	0052      	lsls	r2, r2, #1
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	fbb1 f2f2 	udiv	r2, r1, r2
 8004594:	e000      	b.n	8004598 <HAL_SMBUS_Init+0xbc>
 8004596:	2204      	movs	r2, #4
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	6809      	ldr	r1, [r1, #0]
 800459c:	4313      	orrs	r3, r2
 800459e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- SMBUSx CR1 Configuration ----------------------*/
  /* Configure SMBUSx: Generalcall , PEC , Peripheral mode and  NoStretch mode */
  MODIFY_REG(hsmbus->Instance->CR1, (I2C_CR1_NOSTRETCH | I2C_CR1_ENGC | I2C_CR1_ENPEC | I2C_CR1_ENARP | I2C_CR1_SMBTYPE | I2C_CR1_SMBUS), (hsmbus->Init.NoStretchMode | hsmbus->Init.GeneralCallMode |  hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 01fa 	bic.w	r1, r3, #250	; 0xfa
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1a      	ldr	r2, [r3, #32]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx OAR1 Configuration ---------------------*/
  /* Configure SMBUSx: Own Address1 and addressing mode */
  MODIFY_REG(hsmbus->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hsmbus->Init.AddressingMode | hsmbus->Init.OwnAddress1));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6911      	ldr	r1, [r2, #16]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	68d2      	ldr	r2, [r2, #12]
 80045de:	4311      	orrs	r1, r2
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- SMBUSx OAR2 Configuration ---------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  MODIFY_REG(hsmbus->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	60da      	str	r2, [r3, #12]
  /* Configure SMBUSx: Analog noise filter */
  SET_BIT(hsmbus->Instance->FLTR, hsmbus->Init.AnalogFilter);
#endif

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hsmbus->PreviousState = SMBUS_STATE_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	639a      	str	r2, [r3, #56]	; 0x38
  hsmbus->Mode = HAL_SMBUS_MODE_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hsmbus->XferPEC = 0x00;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	431bde83 	.word	0x431bde83

08004648 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  SET_BIT(hsmbus->Instance->CR1, I2C_CR1_ALERT);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800465e:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_SMBALERT);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8004668:	615a      	str	r2, [r3, #20]

  /* Enable Alert Interrupt */
  __HAL_SMBUS_ENABLE_IT(hsmbus, SMBUS_IT_ERR);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004678:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e041      	b.n	800471e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fd fab0 	bl	8001c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f001 f812 	bl	80056f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	d001      	beq.n	8004740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e04e      	b.n	80047de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a23      	ldr	r2, [pc, #140]	; (80047ec <HAL_TIM_Base_Start_IT+0xc4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d022      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x80>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476a:	d01d      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x80>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1f      	ldr	r2, [pc, #124]	; (80047f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d018      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x80>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1e      	ldr	r2, [pc, #120]	; (80047f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d013      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x80>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1c      	ldr	r2, [pc, #112]	; (80047f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00e      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x80>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a1b      	ldr	r2, [pc, #108]	; (80047fc <HAL_TIM_Base_Start_IT+0xd4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d009      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x80>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a19      	ldr	r2, [pc, #100]	; (8004800 <HAL_TIM_Base_Start_IT+0xd8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d004      	beq.n	80047a8 <HAL_TIM_Base_Start_IT+0x80>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a18      	ldr	r2, [pc, #96]	; (8004804 <HAL_TIM_Base_Start_IT+0xdc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d111      	bne.n	80047cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b06      	cmp	r3, #6
 80047b8:	d010      	beq.n	80047dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0201 	orr.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ca:	e007      	b.n	80047dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40010000 	.word	0x40010000
 80047f0:	40000400 	.word	0x40000400
 80047f4:	40000800 	.word	0x40000800
 80047f8:	40000c00 	.word	0x40000c00
 80047fc:	40010400 	.word	0x40010400
 8004800:	40014000 	.word	0x40014000
 8004804:	40001800 	.word	0x40001800

08004808 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e041      	b.n	800489e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fd f9a8 	bl	8001b84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3304      	adds	r3, #4
 8004844:	4619      	mov	r1, r3
 8004846:	4610      	mov	r0, r2
 8004848:	f000 ff52 	bl	80056f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d109      	bne.n	80048cc <HAL_TIM_PWM_Start+0x24>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	e022      	b.n	8004912 <HAL_TIM_PWM_Start+0x6a>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d109      	bne.n	80048e6 <HAL_TIM_PWM_Start+0x3e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b01      	cmp	r3, #1
 80048dc:	bf14      	ite	ne
 80048de:	2301      	movne	r3, #1
 80048e0:	2300      	moveq	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	e015      	b.n	8004912 <HAL_TIM_PWM_Start+0x6a>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d109      	bne.n	8004900 <HAL_TIM_PWM_Start+0x58>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	e008      	b.n	8004912 <HAL_TIM_PWM_Start+0x6a>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e07c      	b.n	8004a14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <HAL_TIM_PWM_Start+0x82>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004928:	e013      	b.n	8004952 <HAL_TIM_PWM_Start+0xaa>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b04      	cmp	r3, #4
 800492e:	d104      	bne.n	800493a <HAL_TIM_PWM_Start+0x92>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004938:	e00b      	b.n	8004952 <HAL_TIM_PWM_Start+0xaa>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d104      	bne.n	800494a <HAL_TIM_PWM_Start+0xa2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004948:	e003      	b.n	8004952 <HAL_TIM_PWM_Start+0xaa>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2202      	movs	r2, #2
 800494e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2201      	movs	r2, #1
 8004958:	6839      	ldr	r1, [r7, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f001 fadc 	bl	8005f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a2d      	ldr	r2, [pc, #180]	; (8004a1c <HAL_TIM_PWM_Start+0x174>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d004      	beq.n	8004974 <HAL_TIM_PWM_Start+0xcc>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2c      	ldr	r2, [pc, #176]	; (8004a20 <HAL_TIM_PWM_Start+0x178>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d101      	bne.n	8004978 <HAL_TIM_PWM_Start+0xd0>
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <HAL_TIM_PWM_Start+0xd2>
 8004978:	2300      	movs	r3, #0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800498c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a22      	ldr	r2, [pc, #136]	; (8004a1c <HAL_TIM_PWM_Start+0x174>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d022      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a0:	d01d      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1f      	ldr	r2, [pc, #124]	; (8004a24 <HAL_TIM_PWM_Start+0x17c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d018      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1d      	ldr	r2, [pc, #116]	; (8004a28 <HAL_TIM_PWM_Start+0x180>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1c      	ldr	r2, [pc, #112]	; (8004a2c <HAL_TIM_PWM_Start+0x184>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00e      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a16      	ldr	r2, [pc, #88]	; (8004a20 <HAL_TIM_PWM_Start+0x178>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d009      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a18      	ldr	r2, [pc, #96]	; (8004a30 <HAL_TIM_PWM_Start+0x188>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a16      	ldr	r2, [pc, #88]	; (8004a34 <HAL_TIM_PWM_Start+0x18c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d111      	bne.n	8004a02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b06      	cmp	r3, #6
 80049ee:	d010      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a00:	e007      	b.n	8004a12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0201 	orr.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	40010400 	.word	0x40010400
 8004a24:	40000400 	.word	0x40000400
 8004a28:	40000800 	.word	0x40000800
 8004a2c:	40000c00 	.word	0x40000c00
 8004a30:	40014000 	.word	0x40014000
 8004a34:	40001800 	.word	0x40001800

08004a38 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d109      	bne.n	8004a64 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	e022      	b.n	8004aaa <HAL_TIM_PWM_Start_DMA+0x72>
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d109      	bne.n	8004a7e <HAL_TIM_PWM_Start_DMA+0x46>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	bf0c      	ite	eq
 8004a76:	2301      	moveq	r3, #1
 8004a78:	2300      	movne	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	e015      	b.n	8004aaa <HAL_TIM_PWM_Start_DMA+0x72>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d109      	bne.n	8004a98 <HAL_TIM_PWM_Start_DMA+0x60>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	bf0c      	ite	eq
 8004a90:	2301      	moveq	r3, #1
 8004a92:	2300      	movne	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	e008      	b.n	8004aaa <HAL_TIM_PWM_Start_DMA+0x72>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e171      	b.n	8004d96 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d109      	bne.n	8004acc <HAL_TIM_PWM_Start_DMA+0x94>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	bf0c      	ite	eq
 8004ac4:	2301      	moveq	r3, #1
 8004ac6:	2300      	movne	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	e022      	b.n	8004b12 <HAL_TIM_PWM_Start_DMA+0xda>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d109      	bne.n	8004ae6 <HAL_TIM_PWM_Start_DMA+0xae>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	bf0c      	ite	eq
 8004ade:	2301      	moveq	r3, #1
 8004ae0:	2300      	movne	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	e015      	b.n	8004b12 <HAL_TIM_PWM_Start_DMA+0xda>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d109      	bne.n	8004b00 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	e008      	b.n	8004b12 <HAL_TIM_PWM_Start_DMA+0xda>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2301      	moveq	r3, #1
 8004b0e:	2300      	movne	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d024      	beq.n	8004b60 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d104      	bne.n	8004b26 <HAL_TIM_PWM_Start_DMA+0xee>
 8004b1c:	887b      	ldrh	r3, [r7, #2]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e137      	b.n	8004d96 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d104      	bne.n	8004b36 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b34:	e016      	b.n	8004b64 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d104      	bne.n	8004b46 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b44:	e00e      	b.n	8004b64 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d104      	bne.n	8004b56 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b54:	e006      	b.n	8004b64 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b5e:	e001      	b.n	8004b64 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e118      	b.n	8004d96 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b0c      	cmp	r3, #12
 8004b68:	f200 80ae 	bhi.w	8004cc8 <HAL_TIM_PWM_Start_DMA+0x290>
 8004b6c:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004ba9 	.word	0x08004ba9
 8004b78:	08004cc9 	.word	0x08004cc9
 8004b7c:	08004cc9 	.word	0x08004cc9
 8004b80:	08004cc9 	.word	0x08004cc9
 8004b84:	08004bf1 	.word	0x08004bf1
 8004b88:	08004cc9 	.word	0x08004cc9
 8004b8c:	08004cc9 	.word	0x08004cc9
 8004b90:	08004cc9 	.word	0x08004cc9
 8004b94:	08004c39 	.word	0x08004c39
 8004b98:	08004cc9 	.word	0x08004cc9
 8004b9c:	08004cc9 	.word	0x08004cc9
 8004ba0:	08004cc9 	.word	0x08004cc9
 8004ba4:	08004c81 	.word	0x08004c81
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	4a7c      	ldr	r2, [pc, #496]	; (8004da0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004bae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	4a7b      	ldr	r2, [pc, #492]	; (8004da4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	4a7a      	ldr	r2, [pc, #488]	; (8004da8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004bbe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3334      	adds	r3, #52	; 0x34
 8004bcc:	461a      	mov	r2, r3
 8004bce:	887b      	ldrh	r3, [r7, #2]
 8004bd0:	f7fe fabe 	bl	8003150 <HAL_DMA_Start_IT>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e0db      	b.n	8004d96 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bec:	60da      	str	r2, [r3, #12]
      break;
 8004bee:	e06e      	b.n	8004cce <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	4a6a      	ldr	r2, [pc, #424]	; (8004da0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004bf6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	4a69      	ldr	r2, [pc, #420]	; (8004da4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004bfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	4a68      	ldr	r2, [pc, #416]	; (8004da8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004c06:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3338      	adds	r3, #56	; 0x38
 8004c14:	461a      	mov	r2, r3
 8004c16:	887b      	ldrh	r3, [r7, #2]
 8004c18:	f7fe fa9a 	bl	8003150 <HAL_DMA_Start_IT>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e0b7      	b.n	8004d96 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c34:	60da      	str	r2, [r3, #12]
      break;
 8004c36:	e04a      	b.n	8004cce <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	4a58      	ldr	r2, [pc, #352]	; (8004da0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004c3e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	4a57      	ldr	r2, [pc, #348]	; (8004da4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	4a56      	ldr	r2, [pc, #344]	; (8004da8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004c4e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	333c      	adds	r3, #60	; 0x3c
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	887b      	ldrh	r3, [r7, #2]
 8004c60:	f7fe fa76 	bl	8003150 <HAL_DMA_Start_IT>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e093      	b.n	8004d96 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c7c:	60da      	str	r2, [r3, #12]
      break;
 8004c7e:	e026      	b.n	8004cce <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	4a46      	ldr	r2, [pc, #280]	; (8004da0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004c86:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	4a45      	ldr	r2, [pc, #276]	; (8004da4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004c8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	4a44      	ldr	r2, [pc, #272]	; (8004da8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004c96:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3340      	adds	r3, #64	; 0x40
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	887b      	ldrh	r3, [r7, #2]
 8004ca8:	f7fe fa52 	bl	8003150 <HAL_DMA_Start_IT>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e06f      	b.n	8004d96 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cc4:	60da      	str	r2, [r3, #12]
      break;
 8004cc6:	e002      	b.n	8004cce <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	75fb      	strb	r3, [r7, #23]
      break;
 8004ccc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004cce:	7dfb      	ldrb	r3, [r7, #23]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d15f      	bne.n	8004d94 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 f91b 	bl	8005f18 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a31      	ldr	r2, [pc, #196]	; (8004dac <HAL_TIM_PWM_Start_DMA+0x374>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d004      	beq.n	8004cf6 <HAL_TIM_PWM_Start_DMA+0x2be>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a2f      	ldr	r2, [pc, #188]	; (8004db0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d101      	bne.n	8004cfa <HAL_TIM_PWM_Start_DMA+0x2c2>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d0e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a25      	ldr	r2, [pc, #148]	; (8004dac <HAL_TIM_PWM_Start_DMA+0x374>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d022      	beq.n	8004d60 <HAL_TIM_PWM_Start_DMA+0x328>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d22:	d01d      	beq.n	8004d60 <HAL_TIM_PWM_Start_DMA+0x328>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a22      	ldr	r2, [pc, #136]	; (8004db4 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d018      	beq.n	8004d60 <HAL_TIM_PWM_Start_DMA+0x328>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a21      	ldr	r2, [pc, #132]	; (8004db8 <HAL_TIM_PWM_Start_DMA+0x380>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d013      	beq.n	8004d60 <HAL_TIM_PWM_Start_DMA+0x328>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1f      	ldr	r2, [pc, #124]	; (8004dbc <HAL_TIM_PWM_Start_DMA+0x384>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00e      	beq.n	8004d60 <HAL_TIM_PWM_Start_DMA+0x328>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1a      	ldr	r2, [pc, #104]	; (8004db0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d009      	beq.n	8004d60 <HAL_TIM_PWM_Start_DMA+0x328>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1b      	ldr	r2, [pc, #108]	; (8004dc0 <HAL_TIM_PWM_Start_DMA+0x388>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d004      	beq.n	8004d60 <HAL_TIM_PWM_Start_DMA+0x328>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1a      	ldr	r2, [pc, #104]	; (8004dc4 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d111      	bne.n	8004d84 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	2b06      	cmp	r3, #6
 8004d70:	d010      	beq.n	8004d94 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0201 	orr.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d82:	e007      	b.n	8004d94 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	080055e1 	.word	0x080055e1
 8004da4:	08005689 	.word	0x08005689
 8004da8:	0800554f 	.word	0x0800554f
 8004dac:	40010000 	.word	0x40010000
 8004db0:	40010400 	.word	0x40010400
 8004db4:	40000400 	.word	0x40000400
 8004db8:	40000800 	.word	0x40000800
 8004dbc:	40000c00 	.word	0x40000c00
 8004dc0:	40014000 	.word	0x40014000
 8004dc4:	40001800 	.word	0x40001800

08004dc8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e041      	b.n	8004e5e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f839 	bl	8004e66 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3304      	adds	r3, #4
 8004e04:	4619      	mov	r1, r3
 8004e06:	4610      	mov	r0, r2
 8004e08:	f000 fc72 	bl	80056f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b082      	sub	sp, #8
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d122      	bne.n	8004ed6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d11b      	bne.n	8004ed6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f06f 0202 	mvn.w	r2, #2
 8004ea6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	f003 0303 	and.w	r3, r3, #3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fb14 	bl	80054ea <HAL_TIM_IC_CaptureCallback>
 8004ec2:	e005      	b.n	8004ed0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fb06 	bl	80054d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fb17 	bl	80054fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d122      	bne.n	8004f2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f003 0304 	and.w	r3, r3, #4
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d11b      	bne.n	8004f2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f06f 0204 	mvn.w	r2, #4
 8004efa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 faea 	bl	80054ea <HAL_TIM_IC_CaptureCallback>
 8004f16:	e005      	b.n	8004f24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fadc 	bl	80054d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 faed 	bl	80054fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d122      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d11b      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f06f 0208 	mvn.w	r2, #8
 8004f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2204      	movs	r2, #4
 8004f54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fac0 	bl	80054ea <HAL_TIM_IC_CaptureCallback>
 8004f6a:	e005      	b.n	8004f78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fab2 	bl	80054d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fac3 	bl	80054fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d122      	bne.n	8004fd2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f003 0310 	and.w	r3, r3, #16
 8004f96:	2b10      	cmp	r3, #16
 8004f98:	d11b      	bne.n	8004fd2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f06f 0210 	mvn.w	r2, #16
 8004fa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2208      	movs	r2, #8
 8004fa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fa96 	bl	80054ea <HAL_TIM_IC_CaptureCallback>
 8004fbe:	e005      	b.n	8004fcc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fa88 	bl	80054d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fa99 	bl	80054fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d10e      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d107      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f06f 0201 	mvn.w	r2, #1
 8004ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7fc fa07 	bl	800140c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005008:	2b80      	cmp	r3, #128	; 0x80
 800500a:	d10e      	bne.n	800502a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005016:	2b80      	cmp	r3, #128	; 0x80
 8005018:	d107      	bne.n	800502a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f001 f875 	bl	8006114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d10e      	bne.n	8005056 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b40      	cmp	r3, #64	; 0x40
 8005044:	d107      	bne.n	8005056 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800504e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fa68 	bl	8005526 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b20      	cmp	r3, #32
 8005062:	d10e      	bne.n	8005082 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b20      	cmp	r3, #32
 8005070:	d107      	bne.n	8005082 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f06f 0220 	mvn.w	r2, #32
 800507a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f001 f83f 	bl	8006100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005082:	bf00      	nop
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b086      	sub	sp, #24
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e088      	b.n	80051ba <HAL_TIM_IC_ConfigChannel+0x130>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d11b      	bne.n	80050ee <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	6819      	ldr	r1, [r3, #0]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f000 fd63 	bl	8005b90 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	699a      	ldr	r2, [r3, #24]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 020c 	bic.w	r2, r2, #12
 80050d8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6999      	ldr	r1, [r3, #24]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	619a      	str	r2, [r3, #24]
 80050ec:	e060      	b.n	80051b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d11c      	bne.n	800512e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	6819      	ldr	r1, [r3, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f000 fde7 	bl	8005cd6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699a      	ldr	r2, [r3, #24]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005116:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6999      	ldr	r1, [r3, #24]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	021a      	lsls	r2, r3, #8
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	619a      	str	r2, [r3, #24]
 800512c:	e040      	b.n	80051b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d11b      	bne.n	800516c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	6819      	ldr	r1, [r3, #0]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f000 fe34 	bl	8005db0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69da      	ldr	r2, [r3, #28]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 020c 	bic.w	r2, r2, #12
 8005156:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69d9      	ldr	r1, [r3, #28]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	61da      	str	r2, [r3, #28]
 800516a:	e021      	b.n	80051b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b0c      	cmp	r3, #12
 8005170:	d11c      	bne.n	80051ac <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6818      	ldr	r0, [r3, #0]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	6819      	ldr	r1, [r3, #0]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f000 fe51 	bl	8005e28 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69da      	ldr	r2, [r3, #28]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005194:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69d9      	ldr	r1, [r3, #28]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	021a      	lsls	r2, r3, #8
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	61da      	str	r2, [r3, #28]
 80051aa:	e001      	b.n	80051b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051de:	2302      	movs	r3, #2
 80051e0:	e0ae      	b.n	8005340 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b0c      	cmp	r3, #12
 80051ee:	f200 809f 	bhi.w	8005330 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051f2:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	0800522d 	.word	0x0800522d
 80051fc:	08005331 	.word	0x08005331
 8005200:	08005331 	.word	0x08005331
 8005204:	08005331 	.word	0x08005331
 8005208:	0800526d 	.word	0x0800526d
 800520c:	08005331 	.word	0x08005331
 8005210:	08005331 	.word	0x08005331
 8005214:	08005331 	.word	0x08005331
 8005218:	080052af 	.word	0x080052af
 800521c:	08005331 	.word	0x08005331
 8005220:	08005331 	.word	0x08005331
 8005224:	08005331 	.word	0x08005331
 8005228:	080052ef 	.word	0x080052ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fafc 	bl	8005830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0208 	orr.w	r2, r2, #8
 8005246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0204 	bic.w	r2, r2, #4
 8005256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6999      	ldr	r1, [r3, #24]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	619a      	str	r2, [r3, #24]
      break;
 800526a:	e064      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fb4c 	bl	8005910 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6999      	ldr	r1, [r3, #24]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	021a      	lsls	r2, r3, #8
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	619a      	str	r2, [r3, #24]
      break;
 80052ac:	e043      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fba1 	bl	80059fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69da      	ldr	r2, [r3, #28]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0208 	orr.w	r2, r2, #8
 80052c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0204 	bic.w	r2, r2, #4
 80052d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69d9      	ldr	r1, [r3, #28]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	61da      	str	r2, [r3, #28]
      break;
 80052ec:	e023      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fbf5 	bl	8005ae4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69da      	ldr	r2, [r3, #28]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69da      	ldr	r2, [r3, #28]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69d9      	ldr	r1, [r3, #28]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	021a      	lsls	r2, r3, #8
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	61da      	str	r2, [r3, #28]
      break;
 800532e:	e002      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	75fb      	strb	r3, [r7, #23]
      break;
 8005334:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800533e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_TIM_ConfigClockSource+0x1c>
 8005360:	2302      	movs	r3, #2
 8005362:	e0b4      	b.n	80054ce <HAL_TIM_ConfigClockSource+0x186>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800538a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800539c:	d03e      	beq.n	800541c <HAL_TIM_ConfigClockSource+0xd4>
 800539e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a2:	f200 8087 	bhi.w	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053aa:	f000 8086 	beq.w	80054ba <HAL_TIM_ConfigClockSource+0x172>
 80053ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b2:	d87f      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053b4:	2b70      	cmp	r3, #112	; 0x70
 80053b6:	d01a      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0xa6>
 80053b8:	2b70      	cmp	r3, #112	; 0x70
 80053ba:	d87b      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053bc:	2b60      	cmp	r3, #96	; 0x60
 80053be:	d050      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x11a>
 80053c0:	2b60      	cmp	r3, #96	; 0x60
 80053c2:	d877      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053c4:	2b50      	cmp	r3, #80	; 0x50
 80053c6:	d03c      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0xfa>
 80053c8:	2b50      	cmp	r3, #80	; 0x50
 80053ca:	d873      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053cc:	2b40      	cmp	r3, #64	; 0x40
 80053ce:	d058      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0x13a>
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d86f      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053d4:	2b30      	cmp	r3, #48	; 0x30
 80053d6:	d064      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x15a>
 80053d8:	2b30      	cmp	r3, #48	; 0x30
 80053da:	d86b      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d060      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x15a>
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d867      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d05c      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x15a>
 80053e8:	2b10      	cmp	r3, #16
 80053ea:	d05a      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x15a>
 80053ec:	e062      	b.n	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6899      	ldr	r1, [r3, #8]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f000 fd6b 	bl	8005ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005410:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	609a      	str	r2, [r3, #8]
      break;
 800541a:	e04f      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	6899      	ldr	r1, [r3, #8]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f000 fd54 	bl	8005ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800543e:	609a      	str	r2, [r3, #8]
      break;
 8005440:	e03c      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6859      	ldr	r1, [r3, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	461a      	mov	r2, r3
 8005450:	f000 fc12 	bl	8005c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2150      	movs	r1, #80	; 0x50
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fd21 	bl	8005ea2 <TIM_ITRx_SetConfig>
      break;
 8005460:	e02c      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6859      	ldr	r1, [r3, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	461a      	mov	r2, r3
 8005470:	f000 fc6e 	bl	8005d50 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2160      	movs	r1, #96	; 0x60
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fd11 	bl	8005ea2 <TIM_ITRx_SetConfig>
      break;
 8005480:	e01c      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6859      	ldr	r1, [r3, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	461a      	mov	r2, r3
 8005490:	f000 fbf2 	bl	8005c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2140      	movs	r1, #64	; 0x40
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fd01 	bl	8005ea2 <TIM_ITRx_SetConfig>
      break;
 80054a0:	e00c      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4619      	mov	r1, r3
 80054ac:	4610      	mov	r0, r2
 80054ae:	f000 fcf8 	bl	8005ea2 <TIM_ITRx_SetConfig>
      break;
 80054b2:	e003      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
      break;
 80054b8:	e000      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	429a      	cmp	r2, r3
 8005564:	d107      	bne.n	8005576 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005574:	e02a      	b.n	80055cc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	429a      	cmp	r2, r3
 800557e:	d107      	bne.n	8005590 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2202      	movs	r2, #2
 8005584:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800558e:	e01d      	b.n	80055cc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	429a      	cmp	r2, r3
 8005598:	d107      	bne.n	80055aa <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2204      	movs	r2, #4
 800559e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055a8:	e010      	b.n	80055cc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d107      	bne.n	80055c4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2208      	movs	r2, #8
 80055b8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055c2:	e003      	b.n	80055cc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f7ff ffb4 	bl	800553a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	771a      	strb	r2, [r3, #28]
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d10b      	bne.n	8005610 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d136      	bne.n	8005674 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800560e:	e031      	b.n	8005674 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	429a      	cmp	r2, r3
 8005618:	d10b      	bne.n	8005632 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2202      	movs	r2, #2
 800561e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d125      	bne.n	8005674 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005630:	e020      	b.n	8005674 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	429a      	cmp	r2, r3
 800563a:	d10b      	bne.n	8005654 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2204      	movs	r2, #4
 8005640:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d114      	bne.n	8005674 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005652:	e00f      	b.n	8005674 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	429a      	cmp	r2, r3
 800565c:	d10a      	bne.n	8005674 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2208      	movs	r2, #8
 8005662:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d103      	bne.n	8005674 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f7ff ff42 	bl	80054fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	771a      	strb	r2, [r3, #28]
}
 8005680:	bf00      	nop
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	429a      	cmp	r2, r3
 800569e:	d103      	bne.n	80056a8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	771a      	strb	r2, [r3, #28]
 80056a6:	e019      	b.n	80056dc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d103      	bne.n	80056ba <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2202      	movs	r2, #2
 80056b6:	771a      	strb	r2, [r3, #28]
 80056b8:	e010      	b.n	80056dc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d103      	bne.n	80056cc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2204      	movs	r2, #4
 80056c8:	771a      	strb	r2, [r3, #28]
 80056ca:	e007      	b.n	80056dc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d102      	bne.n	80056dc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2208      	movs	r2, #8
 80056da:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f7ff ff18 	bl	8005512 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
}
 80056e8:	bf00      	nop
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a40      	ldr	r2, [pc, #256]	; (8005804 <TIM_Base_SetConfig+0x114>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d013      	beq.n	8005730 <TIM_Base_SetConfig+0x40>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800570e:	d00f      	beq.n	8005730 <TIM_Base_SetConfig+0x40>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a3d      	ldr	r2, [pc, #244]	; (8005808 <TIM_Base_SetConfig+0x118>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00b      	beq.n	8005730 <TIM_Base_SetConfig+0x40>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a3c      	ldr	r2, [pc, #240]	; (800580c <TIM_Base_SetConfig+0x11c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d007      	beq.n	8005730 <TIM_Base_SetConfig+0x40>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a3b      	ldr	r2, [pc, #236]	; (8005810 <TIM_Base_SetConfig+0x120>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d003      	beq.n	8005730 <TIM_Base_SetConfig+0x40>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a3a      	ldr	r2, [pc, #232]	; (8005814 <TIM_Base_SetConfig+0x124>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d108      	bne.n	8005742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a2f      	ldr	r2, [pc, #188]	; (8005804 <TIM_Base_SetConfig+0x114>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d02b      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005750:	d027      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a2c      	ldr	r2, [pc, #176]	; (8005808 <TIM_Base_SetConfig+0x118>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d023      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a2b      	ldr	r2, [pc, #172]	; (800580c <TIM_Base_SetConfig+0x11c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d01f      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a2a      	ldr	r2, [pc, #168]	; (8005810 <TIM_Base_SetConfig+0x120>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d01b      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a29      	ldr	r2, [pc, #164]	; (8005814 <TIM_Base_SetConfig+0x124>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d017      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a28      	ldr	r2, [pc, #160]	; (8005818 <TIM_Base_SetConfig+0x128>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d013      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a27      	ldr	r2, [pc, #156]	; (800581c <TIM_Base_SetConfig+0x12c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00f      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a26      	ldr	r2, [pc, #152]	; (8005820 <TIM_Base_SetConfig+0x130>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00b      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a25      	ldr	r2, [pc, #148]	; (8005824 <TIM_Base_SetConfig+0x134>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d007      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a24      	ldr	r2, [pc, #144]	; (8005828 <TIM_Base_SetConfig+0x138>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d003      	beq.n	80057a2 <TIM_Base_SetConfig+0xb2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a23      	ldr	r2, [pc, #140]	; (800582c <TIM_Base_SetConfig+0x13c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d108      	bne.n	80057b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a0a      	ldr	r2, [pc, #40]	; (8005804 <TIM_Base_SetConfig+0x114>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_Base_SetConfig+0xf8>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a0c      	ldr	r2, [pc, #48]	; (8005814 <TIM_Base_SetConfig+0x124>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d103      	bne.n	80057f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	615a      	str	r2, [r3, #20]
}
 80057f6:	bf00      	nop
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40010000 	.word	0x40010000
 8005808:	40000400 	.word	0x40000400
 800580c:	40000800 	.word	0x40000800
 8005810:	40000c00 	.word	0x40000c00
 8005814:	40010400 	.word	0x40010400
 8005818:	40014000 	.word	0x40014000
 800581c:	40014400 	.word	0x40014400
 8005820:	40014800 	.word	0x40014800
 8005824:	40001800 	.word	0x40001800
 8005828:	40001c00 	.word	0x40001c00
 800582c:	40002000 	.word	0x40002000

08005830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	f023 0201 	bic.w	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0303 	bic.w	r3, r3, #3
 8005866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f023 0302 	bic.w	r3, r3, #2
 8005878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a20      	ldr	r2, [pc, #128]	; (8005908 <TIM_OC1_SetConfig+0xd8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d003      	beq.n	8005894 <TIM_OC1_SetConfig+0x64>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a1f      	ldr	r2, [pc, #124]	; (800590c <TIM_OC1_SetConfig+0xdc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d10c      	bne.n	80058ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f023 0308 	bic.w	r3, r3, #8
 800589a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f023 0304 	bic.w	r3, r3, #4
 80058ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a15      	ldr	r2, [pc, #84]	; (8005908 <TIM_OC1_SetConfig+0xd8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d003      	beq.n	80058be <TIM_OC1_SetConfig+0x8e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a14      	ldr	r2, [pc, #80]	; (800590c <TIM_OC1_SetConfig+0xdc>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d111      	bne.n	80058e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	621a      	str	r2, [r3, #32]
}
 80058fc:	bf00      	nop
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	40010000 	.word	0x40010000
 800590c:	40010400 	.word	0x40010400

08005910 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	f023 0210 	bic.w	r2, r3, #16
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f023 0320 	bic.w	r3, r3, #32
 800595a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a22      	ldr	r2, [pc, #136]	; (80059f4 <TIM_OC2_SetConfig+0xe4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_OC2_SetConfig+0x68>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a21      	ldr	r2, [pc, #132]	; (80059f8 <TIM_OC2_SetConfig+0xe8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d10d      	bne.n	8005994 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800597e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005992:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a17      	ldr	r2, [pc, #92]	; (80059f4 <TIM_OC2_SetConfig+0xe4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_OC2_SetConfig+0x94>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a16      	ldr	r2, [pc, #88]	; (80059f8 <TIM_OC2_SetConfig+0xe8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d113      	bne.n	80059cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40010000 	.word	0x40010000
 80059f8:	40010400 	.word	0x40010400

080059fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0303 	bic.w	r3, r3, #3
 8005a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	021b      	lsls	r3, r3, #8
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a21      	ldr	r2, [pc, #132]	; (8005adc <TIM_OC3_SetConfig+0xe0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d003      	beq.n	8005a62 <TIM_OC3_SetConfig+0x66>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a20      	ldr	r2, [pc, #128]	; (8005ae0 <TIM_OC3_SetConfig+0xe4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d10d      	bne.n	8005a7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a16      	ldr	r2, [pc, #88]	; (8005adc <TIM_OC3_SetConfig+0xe0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d003      	beq.n	8005a8e <TIM_OC3_SetConfig+0x92>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <TIM_OC3_SetConfig+0xe4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d113      	bne.n	8005ab6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	011b      	lsls	r3, r3, #4
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	621a      	str	r2, [r3, #32]
}
 8005ad0:	bf00      	nop
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40010400 	.word	0x40010400

08005ae4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	031b      	lsls	r3, r3, #12
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a12      	ldr	r2, [pc, #72]	; (8005b88 <TIM_OC4_SetConfig+0xa4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d003      	beq.n	8005b4c <TIM_OC4_SetConfig+0x68>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a11      	ldr	r2, [pc, #68]	; (8005b8c <TIM_OC4_SetConfig+0xa8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d109      	bne.n	8005b60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	019b      	lsls	r3, r3, #6
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	621a      	str	r2, [r3, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40010000 	.word	0x40010000
 8005b8c:	40010400 	.word	0x40010400

08005b90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	f023 0201 	bic.w	r2, r3, #1
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4a28      	ldr	r2, [pc, #160]	; (8005c5c <TIM_TI1_SetConfig+0xcc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01b      	beq.n	8005bf6 <TIM_TI1_SetConfig+0x66>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc4:	d017      	beq.n	8005bf6 <TIM_TI1_SetConfig+0x66>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4a25      	ldr	r2, [pc, #148]	; (8005c60 <TIM_TI1_SetConfig+0xd0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <TIM_TI1_SetConfig+0x66>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4a24      	ldr	r2, [pc, #144]	; (8005c64 <TIM_TI1_SetConfig+0xd4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00f      	beq.n	8005bf6 <TIM_TI1_SetConfig+0x66>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4a23      	ldr	r2, [pc, #140]	; (8005c68 <TIM_TI1_SetConfig+0xd8>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_TI1_SetConfig+0x66>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4a22      	ldr	r2, [pc, #136]	; (8005c6c <TIM_TI1_SetConfig+0xdc>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <TIM_TI1_SetConfig+0x66>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4a21      	ldr	r2, [pc, #132]	; (8005c70 <TIM_TI1_SetConfig+0xe0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d003      	beq.n	8005bf6 <TIM_TI1_SetConfig+0x66>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4a20      	ldr	r2, [pc, #128]	; (8005c74 <TIM_TI1_SetConfig+0xe4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d101      	bne.n	8005bfa <TIM_TI1_SetConfig+0x6a>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <TIM_TI1_SetConfig+0x6c>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d008      	beq.n	8005c12 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	e003      	b.n	8005c1a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f043 0301 	orr.w	r3, r3, #1
 8005c18:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f023 030a 	bic.w	r3, r3, #10
 8005c34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f003 030a 	and.w	r3, r3, #10
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40000400 	.word	0x40000400
 8005c64:	40000800 	.word	0x40000800
 8005c68:	40000c00 	.word	0x40000c00
 8005c6c:	40010400 	.word	0x40010400
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40001800 	.word	0x40001800

08005c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f023 0201 	bic.w	r2, r3, #1
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f023 030a 	bic.w	r3, r3, #10
 8005cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b087      	sub	sp, #28
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
 8005ce2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	f023 0210 	bic.w	r2, r3, #16
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	021b      	lsls	r3, r3, #8
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	031b      	lsls	r3, r3, #12
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	621a      	str	r2, [r3, #32]
}
 8005d44:	bf00      	nop
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	f023 0210 	bic.w	r2, r3, #16
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	031b      	lsls	r3, r3, #12
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	621a      	str	r2, [r3, #32]
}
 8005da4:	bf00      	nop
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f023 0303 	bic.w	r3, r3, #3
 8005ddc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005e00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	621a      	str	r2, [r3, #32]
}
 8005e1c:	bf00      	nop
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	021b      	lsls	r3, r3, #8
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e66:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	031b      	lsls	r3, r3, #12
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005e7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	031b      	lsls	r3, r3, #12
 8005e80:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	621a      	str	r2, [r3, #32]
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b085      	sub	sp, #20
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	f043 0307 	orr.w	r3, r3, #7
 8005ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	609a      	str	r2, [r3, #8]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	021a      	lsls	r2, r3, #8
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	609a      	str	r2, [r3, #8]
}
 8005f0c:	bf00      	nop
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f003 031f 	and.w	r3, r3, #31
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a1a      	ldr	r2, [r3, #32]
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	43db      	mvns	r3, r3
 8005f3a:	401a      	ands	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a1a      	ldr	r2, [r3, #32]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f003 031f 	and.w	r3, r3, #31
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f50:	431a      	orrs	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
	...

08005f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d101      	bne.n	8005f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e05a      	b.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a21      	ldr	r2, [pc, #132]	; (8006040 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d022      	beq.n	8006006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc8:	d01d      	beq.n	8006006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a1d      	ldr	r2, [pc, #116]	; (8006044 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d018      	beq.n	8006006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a1b      	ldr	r2, [pc, #108]	; (8006048 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d013      	beq.n	8006006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a1a      	ldr	r2, [pc, #104]	; (800604c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00e      	beq.n	8006006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a18      	ldr	r2, [pc, #96]	; (8006050 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d009      	beq.n	8006006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a17      	ldr	r2, [pc, #92]	; (8006054 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d004      	beq.n	8006006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a15      	ldr	r2, [pc, #84]	; (8006058 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d10c      	bne.n	8006020 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800600c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	4313      	orrs	r3, r2
 8006016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40010000 	.word	0x40010000
 8006044:	40000400 	.word	0x40000400
 8006048:	40000800 	.word	0x40000800
 800604c:	40000c00 	.word	0x40000c00
 8006050:	40010400 	.word	0x40010400
 8006054:	40014000 	.word	0x40014000
 8006058:	40001800 	.word	0x40001800

0800605c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006074:	2302      	movs	r3, #2
 8006076:	e03d      	b.n	80060f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e03f      	b.n	80061ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fb feaa 	bl	8001ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2224      	movs	r2, #36	; 0x24
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800616a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 ff35 	bl	8006fdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695a      	ldr	r2, [r3, #20]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b08a      	sub	sp, #40	; 0x28
 80061c6:	af02      	add	r7, sp, #8
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	603b      	str	r3, [r7, #0]
 80061ce:	4613      	mov	r3, r2
 80061d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d17c      	bne.n	80062dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <HAL_UART_Transmit+0x2c>
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e075      	b.n	80062de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_UART_Transmit+0x3e>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e06e      	b.n	80062de <HAL_UART_Transmit+0x11c>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2221      	movs	r2, #33	; 0x21
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006216:	f7fb ff67 	bl	80020e8 <HAL_GetTick>
 800621a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	88fa      	ldrh	r2, [r7, #6]
 8006220:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	88fa      	ldrh	r2, [r7, #6]
 8006226:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006230:	d108      	bne.n	8006244 <HAL_UART_Transmit+0x82>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d104      	bne.n	8006244 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800623a:	2300      	movs	r3, #0
 800623c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	61bb      	str	r3, [r7, #24]
 8006242:	e003      	b.n	800624c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006248:	2300      	movs	r3, #0
 800624a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006254:	e02a      	b.n	80062ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2200      	movs	r2, #0
 800625e:	2180      	movs	r1, #128	; 0x80
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 fc4c 	bl	8006afe <UART_WaitOnFlagUntilTimeout>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e036      	b.n	80062de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10b      	bne.n	800628e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006284:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	3302      	adds	r3, #2
 800628a:	61bb      	str	r3, [r7, #24]
 800628c:	e007      	b.n	800629e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	781a      	ldrb	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	3301      	adds	r3, #1
 800629c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1cf      	bne.n	8006256 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2200      	movs	r2, #0
 80062be:	2140      	movs	r1, #64	; 0x40
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 fc1c 	bl	8006afe <UART_WaitOnFlagUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e006      	b.n	80062de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80062d8:	2300      	movs	r3, #0
 80062da:	e000      	b.n	80062de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80062dc:	2302      	movs	r3, #2
  }
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3720      	adds	r7, #32
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b084      	sub	sp, #16
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	60f8      	str	r0, [r7, #12]
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	4613      	mov	r3, r2
 80062f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d11d      	bne.n	800633c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <HAL_UART_Receive_IT+0x26>
 8006306:	88fb      	ldrh	r3, [r7, #6]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e016      	b.n	800633e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006316:	2b01      	cmp	r3, #1
 8006318:	d101      	bne.n	800631e <HAL_UART_Receive_IT+0x38>
 800631a:	2302      	movs	r3, #2
 800631c:	e00f      	b.n	800633e <HAL_UART_Receive_IT+0x58>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	461a      	mov	r2, r3
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 fc51 	bl	8006bda <UART_Start_Receive_IT>
 8006338:	4603      	mov	r3, r0
 800633a:	e000      	b.n	800633e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800633c:	2302      	movs	r3, #2
  }
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08c      	sub	sp, #48	; 0x30
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	4613      	mov	r3, r2
 8006354:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b20      	cmp	r3, #32
 8006360:	d165      	bne.n	800642e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <HAL_UART_Transmit_DMA+0x26>
 8006368:	88fb      	ldrh	r3, [r7, #6]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e05e      	b.n	8006430 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006378:	2b01      	cmp	r3, #1
 800637a:	d101      	bne.n	8006380 <HAL_UART_Transmit_DMA+0x38>
 800637c:	2302      	movs	r3, #2
 800637e:	e057      	b.n	8006430 <HAL_UART_Transmit_DMA+0xe8>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	88fa      	ldrh	r2, [r7, #6]
 8006392:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	88fa      	ldrh	r2, [r7, #6]
 8006398:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2221      	movs	r2, #33	; 0x21
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ac:	4a22      	ldr	r2, [pc, #136]	; (8006438 <HAL_UART_Transmit_DMA+0xf0>)
 80063ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b4:	4a21      	ldr	r2, [pc, #132]	; (800643c <HAL_UART_Transmit_DMA+0xf4>)
 80063b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063bc:	4a20      	ldr	r2, [pc, #128]	; (8006440 <HAL_UART_Transmit_DMA+0xf8>)
 80063be:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c4:	2200      	movs	r2, #0
 80063c6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80063c8:	f107 0308 	add.w	r3, r7, #8
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80063d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d4:	6819      	ldr	r1, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3304      	adds	r3, #4
 80063dc:	461a      	mov	r2, r3
 80063de:	88fb      	ldrh	r3, [r7, #6]
 80063e0:	f7fc feb6 	bl	8003150 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063ec:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3314      	adds	r3, #20
 80063fc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	617b      	str	r3, [r7, #20]
   return(result);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640c:	62bb      	str	r3, [r7, #40]	; 0x28
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3314      	adds	r3, #20
 8006414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006416:	627a      	str	r2, [r7, #36]	; 0x24
 8006418:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6a39      	ldr	r1, [r7, #32]
 800641c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	61fb      	str	r3, [r7, #28]
   return(result);
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e5      	bne.n	80063f6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	e000      	b.n	8006430 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800642e:	2302      	movs	r3, #2
  }
}
 8006430:	4618      	mov	r0, r3
 8006432:	3730      	adds	r7, #48	; 0x30
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	080069b5 	.word	0x080069b5
 800643c:	08006a4f 	.word	0x08006a4f
 8006440:	08006a6b 	.word	0x08006a6b

08006444 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b0ba      	sub	sp, #232	; 0xe8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800646a:	2300      	movs	r3, #0
 800646c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006470:	2300      	movs	r3, #0
 8006472:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10f      	bne.n	80064aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800648a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b00      	cmp	r3, #0
 8006494:	d009      	beq.n	80064aa <HAL_UART_IRQHandler+0x66>
 8006496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fcde 	bl	8006e64 <UART_Receive_IT>
      return;
 80064a8:	e256      	b.n	8006958 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 80de 	beq.w	8006670 <HAL_UART_IRQHandler+0x22c>
 80064b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d106      	bne.n	80064ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 80d1 	beq.w	8006670 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00b      	beq.n	80064f2 <HAL_UART_IRQHandler+0xae>
 80064da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	f043 0201 	orr.w	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f6:	f003 0304 	and.w	r3, r3, #4
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00b      	beq.n	8006516 <HAL_UART_IRQHandler+0xd2>
 80064fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d005      	beq.n	8006516 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	f043 0202 	orr.w	r2, r3, #2
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00b      	beq.n	800653a <HAL_UART_IRQHandler+0xf6>
 8006522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f043 0204 	orr.w	r2, r3, #4
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800653a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653e:	f003 0308 	and.w	r3, r3, #8
 8006542:	2b00      	cmp	r3, #0
 8006544:	d011      	beq.n	800656a <HAL_UART_IRQHandler+0x126>
 8006546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d105      	bne.n	800655e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d005      	beq.n	800656a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	f043 0208 	orr.w	r2, r3, #8
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 81ed 	beq.w	800694e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006578:	f003 0320 	and.w	r3, r3, #32
 800657c:	2b00      	cmp	r3, #0
 800657e:	d008      	beq.n	8006592 <HAL_UART_IRQHandler+0x14e>
 8006580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006584:	f003 0320 	and.w	r3, r3, #32
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fc69 	bl	8006e64 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	bf0c      	ite	eq
 80065a0:	2301      	moveq	r3, #1
 80065a2:	2300      	movne	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	f003 0308 	and.w	r3, r3, #8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d103      	bne.n	80065be <HAL_UART_IRQHandler+0x17a>
 80065b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d04f      	beq.n	800665e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fb71 	bl	8006ca6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ce:	2b40      	cmp	r3, #64	; 0x40
 80065d0:	d141      	bne.n	8006656 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3314      	adds	r3, #20
 80065d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3314      	adds	r3, #20
 80065fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800660a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800660e:	e841 2300 	strex	r3, r2, [r1]
 8006612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006616:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1d9      	bne.n	80065d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	2b00      	cmp	r3, #0
 8006624:	d013      	beq.n	800664e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662a:	4a7d      	ldr	r2, [pc, #500]	; (8006820 <HAL_UART_IRQHandler+0x3dc>)
 800662c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006632:	4618      	mov	r0, r3
 8006634:	f7fc fe54 	bl	80032e0 <HAL_DMA_Abort_IT>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d016      	beq.n	800666c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006648:	4610      	mov	r0, r2
 800664a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800664c:	e00e      	b.n	800666c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f99a 	bl	8006988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006654:	e00a      	b.n	800666c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f996 	bl	8006988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800665c:	e006      	b.n	800666c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f992 	bl	8006988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800666a:	e170      	b.n	800694e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800666c:	bf00      	nop
    return;
 800666e:	e16e      	b.n	800694e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	2b01      	cmp	r3, #1
 8006676:	f040 814a 	bne.w	800690e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800667a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667e:	f003 0310 	and.w	r3, r3, #16
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 8143 	beq.w	800690e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800668c:	f003 0310 	and.w	r3, r3, #16
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 813c 	beq.w	800690e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006696:	2300      	movs	r3, #0
 8006698:	60bb      	str	r3, [r7, #8]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60bb      	str	r3, [r7, #8]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	60bb      	str	r3, [r7, #8]
 80066aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b40      	cmp	r3, #64	; 0x40
 80066b8:	f040 80b4 	bne.w	8006824 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8140 	beq.w	8006952 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066da:	429a      	cmp	r2, r3
 80066dc:	f080 8139 	bcs.w	8006952 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066f2:	f000 8088 	beq.w	8006806 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	330c      	adds	r3, #12
 80066fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800670c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006714:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	330c      	adds	r3, #12
 800671e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006722:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800672e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800673a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1d9      	bne.n	80066f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3314      	adds	r3, #20
 8006748:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006754:	f023 0301 	bic.w	r3, r3, #1
 8006758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3314      	adds	r3, #20
 8006762:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006766:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800676a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800676e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006772:	e841 2300 	strex	r3, r2, [r1]
 8006776:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1e1      	bne.n	8006742 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3314      	adds	r3, #20
 8006784:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006788:	e853 3f00 	ldrex	r3, [r3]
 800678c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800678e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006794:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3314      	adds	r3, #20
 800679e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e3      	bne.n	800677e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	330c      	adds	r3, #12
 80067ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ce:	e853 3f00 	ldrex	r3, [r3]
 80067d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067d6:	f023 0310 	bic.w	r3, r3, #16
 80067da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	330c      	adds	r3, #12
 80067e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80067e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80067ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e3      	bne.n	80067c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	4618      	mov	r0, r3
 8006802:	f7fc fcfd 	bl	8003200 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800680e:	b29b      	uxth	r3, r3
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	b29b      	uxth	r3, r3
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f8c0 	bl	800699c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800681c:	e099      	b.n	8006952 <HAL_UART_IRQHandler+0x50e>
 800681e:	bf00      	nop
 8006820:	08006d6d 	.word	0x08006d6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800682c:	b29b      	uxth	r3, r3
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006838:	b29b      	uxth	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 808b 	beq.w	8006956 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 8086 	beq.w	8006956 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	330c      	adds	r3, #12
 8006850:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800685a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006860:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	330c      	adds	r3, #12
 800686a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800686e:	647a      	str	r2, [r7, #68]	; 0x44
 8006870:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800687c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e3      	bne.n	800684a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3314      	adds	r3, #20
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	623b      	str	r3, [r7, #32]
   return(result);
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	f023 0301 	bic.w	r3, r3, #1
 8006898:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3314      	adds	r3, #20
 80068a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068a6:	633a      	str	r2, [r7, #48]	; 0x30
 80068a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e3      	bne.n	8006882 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	330c      	adds	r3, #12
 80068ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0310 	bic.w	r3, r3, #16
 80068de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	330c      	adds	r3, #12
 80068e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80068ec:	61fa      	str	r2, [r7, #28]
 80068ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	69b9      	ldr	r1, [r7, #24]
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	e841 2300 	strex	r3, r2, [r1]
 80068f8:	617b      	str	r3, [r7, #20]
   return(result);
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e3      	bne.n	80068c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f848 	bl	800699c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800690c:	e023      	b.n	8006956 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <HAL_UART_IRQHandler+0x4ea>
 800691a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800691e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fa34 	bl	8006d94 <UART_Transmit_IT>
    return;
 800692c:	e014      	b.n	8006958 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800692e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00e      	beq.n	8006958 <HAL_UART_IRQHandler+0x514>
 800693a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800693e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	d008      	beq.n	8006958 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa74 	bl	8006e34 <UART_EndTransmit_IT>
    return;
 800694c:	e004      	b.n	8006958 <HAL_UART_IRQHandler+0x514>
    return;
 800694e:	bf00      	nop
 8006950:	e002      	b.n	8006958 <HAL_UART_IRQHandler+0x514>
      return;
 8006952:	bf00      	nop
 8006954:	e000      	b.n	8006958 <HAL_UART_IRQHandler+0x514>
      return;
 8006956:	bf00      	nop
  }
}
 8006958:	37e8      	adds	r7, #232	; 0xe8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop

08006960 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b090      	sub	sp, #64	; 0x40
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d137      	bne.n	8006a40 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80069d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d2:	2200      	movs	r2, #0
 80069d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3314      	adds	r3, #20
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	e853 3f00 	ldrex	r3, [r3]
 80069e4:	623b      	str	r3, [r7, #32]
   return(result);
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80069ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3314      	adds	r3, #20
 80069f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069f6:	633a      	str	r2, [r7, #48]	; 0x30
 80069f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e5      	bne.n	80069d6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	330c      	adds	r3, #12
 8006a10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a20:	637b      	str	r3, [r7, #52]	; 0x34
 8006a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	330c      	adds	r3, #12
 8006a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a2a:	61fa      	str	r2, [r7, #28]
 8006a2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	69b9      	ldr	r1, [r7, #24]
 8006a30:	69fa      	ldr	r2, [r7, #28]
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	617b      	str	r3, [r7, #20]
   return(result);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e5      	bne.n	8006a0a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a3e:	e002      	b.n	8006a46 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006a40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a42:	f7ff ff8d 	bl	8006960 <HAL_UART_TxCpltCallback>
}
 8006a46:	bf00      	nop
 8006a48:	3740      	adds	r7, #64	; 0x40
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b084      	sub	sp, #16
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f7ff ff89 	bl	8006974 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a86:	2b80      	cmp	r3, #128	; 0x80
 8006a88:	bf0c      	ite	eq
 8006a8a:	2301      	moveq	r3, #1
 8006a8c:	2300      	movne	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b21      	cmp	r3, #33	; 0x21
 8006a9c:	d108      	bne.n	8006ab0 <UART_DMAError+0x46>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006aaa:	68b8      	ldr	r0, [r7, #8]
 8006aac:	f000 f8d3 	bl	8006c56 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aba:	2b40      	cmp	r3, #64	; 0x40
 8006abc:	bf0c      	ite	eq
 8006abe:	2301      	moveq	r3, #1
 8006ac0:	2300      	movne	r3, #0
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b22      	cmp	r3, #34	; 0x22
 8006ad0:	d108      	bne.n	8006ae4 <UART_DMAError+0x7a>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2200      	movs	r2, #0
 8006adc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006ade:	68b8      	ldr	r0, [r7, #8]
 8006ae0:	f000 f8e1 	bl	8006ca6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae8:	f043 0210 	orr.w	r2, r3, #16
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006af0:	68b8      	ldr	r0, [r7, #8]
 8006af2:	f7ff ff49 	bl	8006988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006af6:	bf00      	nop
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b090      	sub	sp, #64	; 0x40
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	603b      	str	r3, [r7, #0]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b0e:	e050      	b.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d04c      	beq.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d007      	beq.n	8006b2e <UART_WaitOnFlagUntilTimeout+0x30>
 8006b1e:	f7fb fae3 	bl	80020e8 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d241      	bcs.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	330c      	adds	r3, #12
 8006b34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	330c      	adds	r3, #12
 8006b4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b4e:	637a      	str	r2, [r7, #52]	; 0x34
 8006b50:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e5      	bne.n	8006b2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3314      	adds	r3, #20
 8006b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	e853 3f00 	ldrex	r3, [r3]
 8006b70:	613b      	str	r3, [r7, #16]
   return(result);
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f023 0301 	bic.w	r3, r3, #1
 8006b78:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3314      	adds	r3, #20
 8006b80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b82:	623a      	str	r2, [r7, #32]
 8006b84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	69f9      	ldr	r1, [r7, #28]
 8006b88:	6a3a      	ldr	r2, [r7, #32]
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e5      	bne.n	8006b62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e00f      	b.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	bf0c      	ite	eq
 8006bc2:	2301      	moveq	r3, #1
 8006bc4:	2300      	movne	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	461a      	mov	r2, r3
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d09f      	beq.n	8006b10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3740      	adds	r7, #64	; 0x40
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b085      	sub	sp, #20
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	4613      	mov	r3, r2
 8006be6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	88fa      	ldrh	r2, [r7, #6]
 8006bf2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	88fa      	ldrh	r2, [r7, #6]
 8006bf8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2222      	movs	r2, #34	; 0x22
 8006c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d007      	beq.n	8006c28 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c26:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	695a      	ldr	r2, [r3, #20]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0201 	orr.w	r2, r2, #1
 8006c36:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68da      	ldr	r2, [r3, #12]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 0220 	orr.w	r2, r2, #32
 8006c46:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b089      	sub	sp, #36	; 0x24
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	330c      	adds	r3, #12
 8006c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	330c      	adds	r3, #12
 8006c7c:	69fa      	ldr	r2, [r7, #28]
 8006c7e:	61ba      	str	r2, [r7, #24]
 8006c80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	6979      	ldr	r1, [r7, #20]
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	e841 2300 	strex	r3, r2, [r1]
 8006c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1e5      	bne.n	8006c5e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006c9a:	bf00      	nop
 8006c9c:	3724      	adds	r7, #36	; 0x24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b095      	sub	sp, #84	; 0x54
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	330c      	adds	r3, #12
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cce:	643a      	str	r2, [r7, #64]	; 0x40
 8006cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e5      	bne.n	8006cae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3314      	adds	r3, #20
 8006ce8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	f023 0301 	bic.w	r3, r3, #1
 8006cf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3314      	adds	r3, #20
 8006d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d0a:	e841 2300 	strex	r3, r2, [r1]
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e5      	bne.n	8006ce2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d119      	bne.n	8006d52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	330c      	adds	r3, #12
 8006d24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f023 0310 	bic.w	r3, r3, #16
 8006d34:	647b      	str	r3, [r7, #68]	; 0x44
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	330c      	adds	r3, #12
 8006d3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d3e:	61ba      	str	r2, [r7, #24]
 8006d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d42:	6979      	ldr	r1, [r7, #20]
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	e841 2300 	strex	r3, r2, [r1]
 8006d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1e5      	bne.n	8006d1e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2220      	movs	r2, #32
 8006d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d60:	bf00      	nop
 8006d62:	3754      	adds	r7, #84	; 0x54
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff fdfe 	bl	8006988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d8c:	bf00      	nop
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b21      	cmp	r3, #33	; 0x21
 8006da6:	d13e      	bne.n	8006e26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db0:	d114      	bne.n	8006ddc <UART_Transmit_IT+0x48>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d110      	bne.n	8006ddc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	1c9a      	adds	r2, r3, #2
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	621a      	str	r2, [r3, #32]
 8006dda:	e008      	b.n	8006dee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	1c59      	adds	r1, r3, #1
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6211      	str	r1, [r2, #32]
 8006de6:	781a      	ldrb	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10f      	bne.n	8006e22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68da      	ldr	r2, [r3, #12]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68da      	ldr	r2, [r3, #12]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	e000      	b.n	8006e28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e26:	2302      	movs	r3, #2
  }
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e4a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff fd83 	bl	8006960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08c      	sub	sp, #48	; 0x30
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b22      	cmp	r3, #34	; 0x22
 8006e76:	f040 80ab 	bne.w	8006fd0 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e82:	d117      	bne.n	8006eb4 <UART_Receive_IT+0x50>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d113      	bne.n	8006eb4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e94:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eac:	1c9a      	adds	r2, r3, #2
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	629a      	str	r2, [r3, #40]	; 0x28
 8006eb2:	e026      	b.n	8006f02 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec6:	d007      	beq.n	8006ed8 <UART_Receive_IT+0x74>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <UART_Receive_IT+0x82>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d106      	bne.n	8006ee6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee2:	701a      	strb	r2, [r3, #0]
 8006ee4:	e008      	b.n	8006ef8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d15a      	bne.n	8006fcc <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0220 	bic.w	r2, r2, #32
 8006f24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	695a      	ldr	r2, [r3, #20]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0201 	bic.w	r2, r2, #1
 8006f44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d135      	bne.n	8006fc2 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	330c      	adds	r3, #12
 8006f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	e853 3f00 	ldrex	r3, [r3]
 8006f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f023 0310 	bic.w	r3, r3, #16
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f7c:	623a      	str	r2, [r7, #32]
 8006f7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	69f9      	ldr	r1, [r7, #28]
 8006f82:	6a3a      	ldr	r2, [r7, #32]
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e5      	bne.n	8006f5c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0310 	and.w	r3, r3, #16
 8006f9a:	2b10      	cmp	r3, #16
 8006f9c:	d10a      	bne.n	8006fb4 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff fcee 	bl	800699c <HAL_UARTEx_RxEventCallback>
 8006fc0:	e002      	b.n	8006fc8 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fa fa3a 	bl	800143c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e002      	b.n	8006fd2 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e000      	b.n	8006fd2 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006fd0:	2302      	movs	r3, #2
  }
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3730      	adds	r7, #48	; 0x30
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fe0:	b0c0      	sub	sp, #256	; 0x100
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff8:	68d9      	ldr	r1, [r3, #12]
 8006ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	ea40 0301 	orr.w	r3, r0, r1
 8007004:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	431a      	orrs	r2, r3
 8007014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	431a      	orrs	r2, r3
 800701c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	4313      	orrs	r3, r2
 8007024:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007034:	f021 010c 	bic.w	r1, r1, #12
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007042:	430b      	orrs	r3, r1
 8007044:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007056:	6999      	ldr	r1, [r3, #24]
 8007058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	ea40 0301 	orr.w	r3, r0, r1
 8007062:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	4b8f      	ldr	r3, [pc, #572]	; (80072a8 <UART_SetConfig+0x2cc>)
 800706c:	429a      	cmp	r2, r3
 800706e:	d005      	beq.n	800707c <UART_SetConfig+0xa0>
 8007070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	4b8d      	ldr	r3, [pc, #564]	; (80072ac <UART_SetConfig+0x2d0>)
 8007078:	429a      	cmp	r2, r3
 800707a:	d104      	bne.n	8007086 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800707c:	f7fd f9e8 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 8007080:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007084:	e003      	b.n	800708e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007086:	f7fd f9cf 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 800708a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800708e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007098:	f040 810c 	bne.w	80072b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800709c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070a0:	2200      	movs	r2, #0
 80070a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80070aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80070ae:	4622      	mov	r2, r4
 80070b0:	462b      	mov	r3, r5
 80070b2:	1891      	adds	r1, r2, r2
 80070b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80070b6:	415b      	adcs	r3, r3
 80070b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80070be:	4621      	mov	r1, r4
 80070c0:	eb12 0801 	adds.w	r8, r2, r1
 80070c4:	4629      	mov	r1, r5
 80070c6:	eb43 0901 	adc.w	r9, r3, r1
 80070ca:	f04f 0200 	mov.w	r2, #0
 80070ce:	f04f 0300 	mov.w	r3, #0
 80070d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070de:	4690      	mov	r8, r2
 80070e0:	4699      	mov	r9, r3
 80070e2:	4623      	mov	r3, r4
 80070e4:	eb18 0303 	adds.w	r3, r8, r3
 80070e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070ec:	462b      	mov	r3, r5
 80070ee:	eb49 0303 	adc.w	r3, r9, r3
 80070f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007102:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007106:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800710a:	460b      	mov	r3, r1
 800710c:	18db      	adds	r3, r3, r3
 800710e:	653b      	str	r3, [r7, #80]	; 0x50
 8007110:	4613      	mov	r3, r2
 8007112:	eb42 0303 	adc.w	r3, r2, r3
 8007116:	657b      	str	r3, [r7, #84]	; 0x54
 8007118:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800711c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007120:	f7f9 f8a6 	bl	8000270 <__aeabi_uldivmod>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4b61      	ldr	r3, [pc, #388]	; (80072b0 <UART_SetConfig+0x2d4>)
 800712a:	fba3 2302 	umull	r2, r3, r3, r2
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	011c      	lsls	r4, r3, #4
 8007132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007136:	2200      	movs	r2, #0
 8007138:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800713c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007140:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007144:	4642      	mov	r2, r8
 8007146:	464b      	mov	r3, r9
 8007148:	1891      	adds	r1, r2, r2
 800714a:	64b9      	str	r1, [r7, #72]	; 0x48
 800714c:	415b      	adcs	r3, r3
 800714e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007150:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007154:	4641      	mov	r1, r8
 8007156:	eb12 0a01 	adds.w	sl, r2, r1
 800715a:	4649      	mov	r1, r9
 800715c:	eb43 0b01 	adc.w	fp, r3, r1
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	f04f 0300 	mov.w	r3, #0
 8007168:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800716c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007170:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007174:	4692      	mov	sl, r2
 8007176:	469b      	mov	fp, r3
 8007178:	4643      	mov	r3, r8
 800717a:	eb1a 0303 	adds.w	r3, sl, r3
 800717e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007182:	464b      	mov	r3, r9
 8007184:	eb4b 0303 	adc.w	r3, fp, r3
 8007188:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800718c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007198:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800719c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80071a0:	460b      	mov	r3, r1
 80071a2:	18db      	adds	r3, r3, r3
 80071a4:	643b      	str	r3, [r7, #64]	; 0x40
 80071a6:	4613      	mov	r3, r2
 80071a8:	eb42 0303 	adc.w	r3, r2, r3
 80071ac:	647b      	str	r3, [r7, #68]	; 0x44
 80071ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80071b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80071b6:	f7f9 f85b 	bl	8000270 <__aeabi_uldivmod>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4611      	mov	r1, r2
 80071c0:	4b3b      	ldr	r3, [pc, #236]	; (80072b0 <UART_SetConfig+0x2d4>)
 80071c2:	fba3 2301 	umull	r2, r3, r3, r1
 80071c6:	095b      	lsrs	r3, r3, #5
 80071c8:	2264      	movs	r2, #100	; 0x64
 80071ca:	fb02 f303 	mul.w	r3, r2, r3
 80071ce:	1acb      	subs	r3, r1, r3
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80071d6:	4b36      	ldr	r3, [pc, #216]	; (80072b0 <UART_SetConfig+0x2d4>)
 80071d8:	fba3 2302 	umull	r2, r3, r3, r2
 80071dc:	095b      	lsrs	r3, r3, #5
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071e4:	441c      	add	r4, r3
 80071e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80071f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80071f8:	4642      	mov	r2, r8
 80071fa:	464b      	mov	r3, r9
 80071fc:	1891      	adds	r1, r2, r2
 80071fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8007200:	415b      	adcs	r3, r3
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007204:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007208:	4641      	mov	r1, r8
 800720a:	1851      	adds	r1, r2, r1
 800720c:	6339      	str	r1, [r7, #48]	; 0x30
 800720e:	4649      	mov	r1, r9
 8007210:	414b      	adcs	r3, r1
 8007212:	637b      	str	r3, [r7, #52]	; 0x34
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007220:	4659      	mov	r1, fp
 8007222:	00cb      	lsls	r3, r1, #3
 8007224:	4651      	mov	r1, sl
 8007226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800722a:	4651      	mov	r1, sl
 800722c:	00ca      	lsls	r2, r1, #3
 800722e:	4610      	mov	r0, r2
 8007230:	4619      	mov	r1, r3
 8007232:	4603      	mov	r3, r0
 8007234:	4642      	mov	r2, r8
 8007236:	189b      	adds	r3, r3, r2
 8007238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800723c:	464b      	mov	r3, r9
 800723e:	460a      	mov	r2, r1
 8007240:	eb42 0303 	adc.w	r3, r2, r3
 8007244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007254:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007258:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800725c:	460b      	mov	r3, r1
 800725e:	18db      	adds	r3, r3, r3
 8007260:	62bb      	str	r3, [r7, #40]	; 0x28
 8007262:	4613      	mov	r3, r2
 8007264:	eb42 0303 	adc.w	r3, r2, r3
 8007268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800726a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800726e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007272:	f7f8 fffd 	bl	8000270 <__aeabi_uldivmod>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	4b0d      	ldr	r3, [pc, #52]	; (80072b0 <UART_SetConfig+0x2d4>)
 800727c:	fba3 1302 	umull	r1, r3, r3, r2
 8007280:	095b      	lsrs	r3, r3, #5
 8007282:	2164      	movs	r1, #100	; 0x64
 8007284:	fb01 f303 	mul.w	r3, r1, r3
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	3332      	adds	r3, #50	; 0x32
 800728e:	4a08      	ldr	r2, [pc, #32]	; (80072b0 <UART_SetConfig+0x2d4>)
 8007290:	fba2 2303 	umull	r2, r3, r2, r3
 8007294:	095b      	lsrs	r3, r3, #5
 8007296:	f003 0207 	and.w	r2, r3, #7
 800729a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4422      	add	r2, r4
 80072a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072a4:	e105      	b.n	80074b2 <UART_SetConfig+0x4d6>
 80072a6:	bf00      	nop
 80072a8:	40011000 	.word	0x40011000
 80072ac:	40011400 	.word	0x40011400
 80072b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072b8:	2200      	movs	r2, #0
 80072ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80072be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80072c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80072c6:	4642      	mov	r2, r8
 80072c8:	464b      	mov	r3, r9
 80072ca:	1891      	adds	r1, r2, r2
 80072cc:	6239      	str	r1, [r7, #32]
 80072ce:	415b      	adcs	r3, r3
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24
 80072d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072d6:	4641      	mov	r1, r8
 80072d8:	1854      	adds	r4, r2, r1
 80072da:	4649      	mov	r1, r9
 80072dc:	eb43 0501 	adc.w	r5, r3, r1
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	f04f 0300 	mov.w	r3, #0
 80072e8:	00eb      	lsls	r3, r5, #3
 80072ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072ee:	00e2      	lsls	r2, r4, #3
 80072f0:	4614      	mov	r4, r2
 80072f2:	461d      	mov	r5, r3
 80072f4:	4643      	mov	r3, r8
 80072f6:	18e3      	adds	r3, r4, r3
 80072f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072fc:	464b      	mov	r3, r9
 80072fe:	eb45 0303 	adc.w	r3, r5, r3
 8007302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007312:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007316:	f04f 0200 	mov.w	r2, #0
 800731a:	f04f 0300 	mov.w	r3, #0
 800731e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007322:	4629      	mov	r1, r5
 8007324:	008b      	lsls	r3, r1, #2
 8007326:	4621      	mov	r1, r4
 8007328:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800732c:	4621      	mov	r1, r4
 800732e:	008a      	lsls	r2, r1, #2
 8007330:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007334:	f7f8 ff9c 	bl	8000270 <__aeabi_uldivmod>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	4b60      	ldr	r3, [pc, #384]	; (80074c0 <UART_SetConfig+0x4e4>)
 800733e:	fba3 2302 	umull	r2, r3, r3, r2
 8007342:	095b      	lsrs	r3, r3, #5
 8007344:	011c      	lsls	r4, r3, #4
 8007346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800734a:	2200      	movs	r2, #0
 800734c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007350:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007354:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007358:	4642      	mov	r2, r8
 800735a:	464b      	mov	r3, r9
 800735c:	1891      	adds	r1, r2, r2
 800735e:	61b9      	str	r1, [r7, #24]
 8007360:	415b      	adcs	r3, r3
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007368:	4641      	mov	r1, r8
 800736a:	1851      	adds	r1, r2, r1
 800736c:	6139      	str	r1, [r7, #16]
 800736e:	4649      	mov	r1, r9
 8007370:	414b      	adcs	r3, r1
 8007372:	617b      	str	r3, [r7, #20]
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	f04f 0300 	mov.w	r3, #0
 800737c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007380:	4659      	mov	r1, fp
 8007382:	00cb      	lsls	r3, r1, #3
 8007384:	4651      	mov	r1, sl
 8007386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800738a:	4651      	mov	r1, sl
 800738c:	00ca      	lsls	r2, r1, #3
 800738e:	4610      	mov	r0, r2
 8007390:	4619      	mov	r1, r3
 8007392:	4603      	mov	r3, r0
 8007394:	4642      	mov	r2, r8
 8007396:	189b      	adds	r3, r3, r2
 8007398:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800739c:	464b      	mov	r3, r9
 800739e:	460a      	mov	r2, r1
 80073a0:	eb42 0303 	adc.w	r3, r2, r3
 80073a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80073b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80073b4:	f04f 0200 	mov.w	r2, #0
 80073b8:	f04f 0300 	mov.w	r3, #0
 80073bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80073c0:	4649      	mov	r1, r9
 80073c2:	008b      	lsls	r3, r1, #2
 80073c4:	4641      	mov	r1, r8
 80073c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073ca:	4641      	mov	r1, r8
 80073cc:	008a      	lsls	r2, r1, #2
 80073ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80073d2:	f7f8 ff4d 	bl	8000270 <__aeabi_uldivmod>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4b39      	ldr	r3, [pc, #228]	; (80074c0 <UART_SetConfig+0x4e4>)
 80073dc:	fba3 1302 	umull	r1, r3, r3, r2
 80073e0:	095b      	lsrs	r3, r3, #5
 80073e2:	2164      	movs	r1, #100	; 0x64
 80073e4:	fb01 f303 	mul.w	r3, r1, r3
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	3332      	adds	r3, #50	; 0x32
 80073ee:	4a34      	ldr	r2, [pc, #208]	; (80074c0 <UART_SetConfig+0x4e4>)
 80073f0:	fba2 2303 	umull	r2, r3, r2, r3
 80073f4:	095b      	lsrs	r3, r3, #5
 80073f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073fa:	441c      	add	r4, r3
 80073fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007400:	2200      	movs	r2, #0
 8007402:	673b      	str	r3, [r7, #112]	; 0x70
 8007404:	677a      	str	r2, [r7, #116]	; 0x74
 8007406:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800740a:	4642      	mov	r2, r8
 800740c:	464b      	mov	r3, r9
 800740e:	1891      	adds	r1, r2, r2
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	415b      	adcs	r3, r3
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800741a:	4641      	mov	r1, r8
 800741c:	1851      	adds	r1, r2, r1
 800741e:	6039      	str	r1, [r7, #0]
 8007420:	4649      	mov	r1, r9
 8007422:	414b      	adcs	r3, r1
 8007424:	607b      	str	r3, [r7, #4]
 8007426:	f04f 0200 	mov.w	r2, #0
 800742a:	f04f 0300 	mov.w	r3, #0
 800742e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007432:	4659      	mov	r1, fp
 8007434:	00cb      	lsls	r3, r1, #3
 8007436:	4651      	mov	r1, sl
 8007438:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800743c:	4651      	mov	r1, sl
 800743e:	00ca      	lsls	r2, r1, #3
 8007440:	4610      	mov	r0, r2
 8007442:	4619      	mov	r1, r3
 8007444:	4603      	mov	r3, r0
 8007446:	4642      	mov	r2, r8
 8007448:	189b      	adds	r3, r3, r2
 800744a:	66bb      	str	r3, [r7, #104]	; 0x68
 800744c:	464b      	mov	r3, r9
 800744e:	460a      	mov	r2, r1
 8007450:	eb42 0303 	adc.w	r3, r2, r3
 8007454:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	663b      	str	r3, [r7, #96]	; 0x60
 8007460:	667a      	str	r2, [r7, #100]	; 0x64
 8007462:	f04f 0200 	mov.w	r2, #0
 8007466:	f04f 0300 	mov.w	r3, #0
 800746a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800746e:	4649      	mov	r1, r9
 8007470:	008b      	lsls	r3, r1, #2
 8007472:	4641      	mov	r1, r8
 8007474:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007478:	4641      	mov	r1, r8
 800747a:	008a      	lsls	r2, r1, #2
 800747c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007480:	f7f8 fef6 	bl	8000270 <__aeabi_uldivmod>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4b0d      	ldr	r3, [pc, #52]	; (80074c0 <UART_SetConfig+0x4e4>)
 800748a:	fba3 1302 	umull	r1, r3, r3, r2
 800748e:	095b      	lsrs	r3, r3, #5
 8007490:	2164      	movs	r1, #100	; 0x64
 8007492:	fb01 f303 	mul.w	r3, r1, r3
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	3332      	adds	r3, #50	; 0x32
 800749c:	4a08      	ldr	r2, [pc, #32]	; (80074c0 <UART_SetConfig+0x4e4>)
 800749e:	fba2 2303 	umull	r2, r3, r2, r3
 80074a2:	095b      	lsrs	r3, r3, #5
 80074a4:	f003 020f 	and.w	r2, r3, #15
 80074a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4422      	add	r2, r4
 80074b0:	609a      	str	r2, [r3, #8]
}
 80074b2:	bf00      	nop
 80074b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80074b8:	46bd      	mov	sp, r7
 80074ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074be:	bf00      	nop
 80074c0:	51eb851f 	.word	0x51eb851f

080074c4 <__NVIC_SetPriority>:
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	4603      	mov	r3, r0
 80074cc:	6039      	str	r1, [r7, #0]
 80074ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	db0a      	blt.n	80074ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	490c      	ldr	r1, [pc, #48]	; (8007510 <__NVIC_SetPriority+0x4c>)
 80074de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074e2:	0112      	lsls	r2, r2, #4
 80074e4:	b2d2      	uxtb	r2, r2
 80074e6:	440b      	add	r3, r1
 80074e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80074ec:	e00a      	b.n	8007504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	4908      	ldr	r1, [pc, #32]	; (8007514 <__NVIC_SetPriority+0x50>)
 80074f4:	79fb      	ldrb	r3, [r7, #7]
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	3b04      	subs	r3, #4
 80074fc:	0112      	lsls	r2, r2, #4
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	440b      	add	r3, r1
 8007502:	761a      	strb	r2, [r3, #24]
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	e000e100 	.word	0xe000e100
 8007514:	e000ed00 	.word	0xe000ed00

08007518 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800751c:	4b05      	ldr	r3, [pc, #20]	; (8007534 <SysTick_Handler+0x1c>)
 800751e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007520:	f001 fff6 	bl	8009510 <xTaskGetSchedulerState>
 8007524:	4603      	mov	r3, r0
 8007526:	2b01      	cmp	r3, #1
 8007528:	d001      	beq.n	800752e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800752a:	f002 ffdd 	bl	800a4e8 <xPortSysTickHandler>
  }
}
 800752e:	bf00      	nop
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	e000e010 	.word	0xe000e010

08007538 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007538:	b580      	push	{r7, lr}
 800753a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800753c:	2100      	movs	r1, #0
 800753e:	f06f 0004 	mvn.w	r0, #4
 8007542:	f7ff ffbf 	bl	80074c4 <__NVIC_SetPriority>
#endif
}
 8007546:	bf00      	nop
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007552:	f3ef 8305 	mrs	r3, IPSR
 8007556:	603b      	str	r3, [r7, #0]
  return(result);
 8007558:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800755e:	f06f 0305 	mvn.w	r3, #5
 8007562:	607b      	str	r3, [r7, #4]
 8007564:	e00c      	b.n	8007580 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007566:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <osKernelInitialize+0x44>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d105      	bne.n	800757a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800756e:	4b08      	ldr	r3, [pc, #32]	; (8007590 <osKernelInitialize+0x44>)
 8007570:	2201      	movs	r2, #1
 8007572:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007574:	2300      	movs	r3, #0
 8007576:	607b      	str	r3, [r7, #4]
 8007578:	e002      	b.n	8007580 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800757a:	f04f 33ff 	mov.w	r3, #4294967295
 800757e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007580:	687b      	ldr	r3, [r7, #4]
}
 8007582:	4618      	mov	r0, r3
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	20000920 	.word	0x20000920

08007594 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800759a:	f3ef 8305 	mrs	r3, IPSR
 800759e:	603b      	str	r3, [r7, #0]
  return(result);
 80075a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80075a6:	f06f 0305 	mvn.w	r3, #5
 80075aa:	607b      	str	r3, [r7, #4]
 80075ac:	e010      	b.n	80075d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80075ae:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <osKernelStart+0x48>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d109      	bne.n	80075ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80075b6:	f7ff ffbf 	bl	8007538 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80075ba:	4b08      	ldr	r3, [pc, #32]	; (80075dc <osKernelStart+0x48>)
 80075bc:	2202      	movs	r2, #2
 80075be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80075c0:	f001 fb38 	bl	8008c34 <vTaskStartScheduler>
      stat = osOK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	607b      	str	r3, [r7, #4]
 80075c8:	e002      	b.n	80075d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80075ca:	f04f 33ff 	mov.w	r3, #4294967295
 80075ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80075d0:	687b      	ldr	r3, [r7, #4]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20000920 	.word	0x20000920

080075e0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075e6:	f3ef 8305 	mrs	r3, IPSR
 80075ea:	603b      	str	r3, [r7, #0]
  return(result);
 80075ec:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80075f2:	f001 fc4b 	bl	8008e8c <xTaskGetTickCountFromISR>
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	e002      	b.n	8007600 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80075fa:	f001 fc37 	bl	8008e6c <xTaskGetTickCount>
 80075fe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8007600:	687b      	ldr	r3, [r7, #4]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800760a:	b580      	push	{r7, lr}
 800760c:	b08e      	sub	sp, #56	; 0x38
 800760e:	af04      	add	r7, sp, #16
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	60b9      	str	r1, [r7, #8]
 8007614:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800761a:	f3ef 8305 	mrs	r3, IPSR
 800761e:	617b      	str	r3, [r7, #20]
  return(result);
 8007620:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007622:	2b00      	cmp	r3, #0
 8007624:	d17e      	bne.n	8007724 <osThreadNew+0x11a>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d07b      	beq.n	8007724 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800762c:	2380      	movs	r3, #128	; 0x80
 800762e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007630:	2318      	movs	r3, #24
 8007632:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007634:	2300      	movs	r3, #0
 8007636:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007638:	f04f 33ff 	mov.w	r3, #4294967295
 800763c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d045      	beq.n	80076d0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <osThreadNew+0x48>
        name = attr->name;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d008      	beq.n	8007678 <osThreadNew+0x6e>
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	2b38      	cmp	r3, #56	; 0x38
 800766a:	d805      	bhi.n	8007678 <osThreadNew+0x6e>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <osThreadNew+0x72>
        return (NULL);
 8007678:	2300      	movs	r3, #0
 800767a:	e054      	b.n	8007726 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d003      	beq.n	800768c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	089b      	lsrs	r3, r3, #2
 800768a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00e      	beq.n	80076b2 <osThreadNew+0xa8>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	2bbb      	cmp	r3, #187	; 0xbb
 800769a:	d90a      	bls.n	80076b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d006      	beq.n	80076b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d002      	beq.n	80076b2 <osThreadNew+0xa8>
        mem = 1;
 80076ac:	2301      	movs	r3, #1
 80076ae:	61bb      	str	r3, [r7, #24]
 80076b0:	e010      	b.n	80076d4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10c      	bne.n	80076d4 <osThreadNew+0xca>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d108      	bne.n	80076d4 <osThreadNew+0xca>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <osThreadNew+0xca>
          mem = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	61bb      	str	r3, [r7, #24]
 80076ce:	e001      	b.n	80076d4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d110      	bne.n	80076fc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076e2:	9202      	str	r2, [sp, #8]
 80076e4:	9301      	str	r3, [sp, #4]
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	6a3a      	ldr	r2, [r7, #32]
 80076ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f001 f869 	bl	80087c8 <xTaskCreateStatic>
 80076f6:	4603      	mov	r3, r0
 80076f8:	613b      	str	r3, [r7, #16]
 80076fa:	e013      	b.n	8007724 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d110      	bne.n	8007724 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	b29a      	uxth	r2, r3
 8007706:	f107 0310 	add.w	r3, r7, #16
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f001 f8b4 	bl	8008882 <xTaskCreate>
 800771a:	4603      	mov	r3, r0
 800771c:	2b01      	cmp	r3, #1
 800771e:	d001      	beq.n	8007724 <osThreadNew+0x11a>
            hTask = NULL;
 8007720:	2300      	movs	r3, #0
 8007722:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007724:	693b      	ldr	r3, [r7, #16]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3728      	adds	r7, #40	; 0x28
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af02      	add	r7, sp, #8
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <osThreadFlagsSet+0x1a>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	da03      	bge.n	8007752 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800774a:	f06f 0303 	mvn.w	r3, #3
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	e035      	b.n	80077be <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8007752:	f04f 33ff 	mov.w	r3, #4294967295
 8007756:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007758:	f3ef 8305 	mrs	r3, IPSR
 800775c:	613b      	str	r3, [r7, #16]
  return(result);
 800775e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8007760:	2b00      	cmp	r3, #0
 8007762:	d01f      	beq.n	80077a4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8007764:	2300      	movs	r3, #0
 8007766:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8007768:	f107 0308 	add.w	r3, r7, #8
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	2300      	movs	r3, #0
 8007770:	2201      	movs	r2, #1
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6978      	ldr	r0, [r7, #20]
 8007776:	f002 f875 	bl	8009864 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800777a:	f107 030c 	add.w	r3, r7, #12
 800777e:	2200      	movs	r2, #0
 8007780:	9200      	str	r2, [sp, #0]
 8007782:	2200      	movs	r2, #0
 8007784:	2100      	movs	r1, #0
 8007786:	6978      	ldr	r0, [r7, #20]
 8007788:	f002 f86c 	bl	8009864 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d015      	beq.n	80077be <osThreadFlagsSet+0x8e>
 8007792:	4b0d      	ldr	r3, [pc, #52]	; (80077c8 <osThreadFlagsSet+0x98>)
 8007794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	e00c      	b.n	80077be <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80077a4:	2300      	movs	r3, #0
 80077a6:	2201      	movs	r2, #1
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6978      	ldr	r0, [r7, #20]
 80077ac:	f001 ff9c 	bl	80096e8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80077b0:	f107 030c 	add.w	r3, r7, #12
 80077b4:	2200      	movs	r2, #0
 80077b6:	2100      	movs	r1, #0
 80077b8:	6978      	ldr	r0, [r7, #20]
 80077ba:	f001 ff95 	bl	80096e8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80077be:	68fb      	ldr	r3, [r7, #12]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	e000ed04 	.word	0xe000ed04

080077cc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08c      	sub	sp, #48	; 0x30
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077d8:	f3ef 8305 	mrs	r3, IPSR
 80077dc:	617b      	str	r3, [r7, #20]
  return(result);
 80077de:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80077e4:	f06f 0305 	mvn.w	r3, #5
 80077e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077ea:	e06b      	b.n	80078c4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	da03      	bge.n	80077fa <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80077f2:	f06f 0303 	mvn.w	r3, #3
 80077f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077f8:	e064      	b.n	80078c4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8007804:	2300      	movs	r3, #0
 8007806:	62bb      	str	r3, [r7, #40]	; 0x28
 8007808:	e001      	b.n	800780e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8007816:	f001 fb29 	bl	8008e6c <xTaskGetTickCount>
 800781a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800781c:	f107 0210 	add.w	r2, r7, #16
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007824:	2000      	movs	r0, #0
 8007826:	f001 feff 	bl	8009628 <xTaskNotifyWait>
 800782a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d137      	bne.n	80078a2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8007832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4013      	ands	r3, r2
 8007838:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800783e:	4313      	orrs	r3, r2
 8007840:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00c      	beq.n	8007866 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007850:	4013      	ands	r3, r2
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	429a      	cmp	r2, r3
 8007856:	d032      	beq.n	80078be <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10f      	bne.n	800787e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800785e:	f06f 0302 	mvn.w	r3, #2
 8007862:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8007864:	e02e      	b.n	80078c4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	4013      	ands	r3, r2
 800786c:	2b00      	cmp	r3, #0
 800786e:	d128      	bne.n	80078c2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d103      	bne.n	800787e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8007876:	f06f 0302 	mvn.w	r3, #2
 800787a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800787c:	e022      	b.n	80078c4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800787e:	f001 faf5 	bl	8008e6c <xTaskGetTickCount>
 8007882:	4602      	mov	r2, r0
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	429a      	cmp	r2, r3
 8007890:	d902      	bls.n	8007898 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	627b      	str	r3, [r7, #36]	; 0x24
 8007896:	e00e      	b.n	80078b6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8007898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
 80078a0:	e009      	b.n	80078b6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d103      	bne.n	80078b0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80078a8:	f06f 0302 	mvn.w	r3, #2
 80078ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078ae:	e002      	b.n	80078b6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80078b0:	f06f 0301 	mvn.w	r3, #1
 80078b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1af      	bne.n	800781c <osThreadFlagsWait+0x50>
 80078bc:	e002      	b.n	80078c4 <osThreadFlagsWait+0xf8>
            break;
 80078be:	bf00      	nop
 80078c0:	e000      	b.n	80078c4 <osThreadFlagsWait+0xf8>
            break;
 80078c2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80078c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3730      	adds	r7, #48	; 0x30
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b086      	sub	sp, #24
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078d6:	f3ef 8305 	mrs	r3, IPSR
 80078da:	60fb      	str	r3, [r7, #12]
  return(result);
 80078dc:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <osDelayUntil+0x1c>
    stat = osErrorISR;
 80078e2:	f06f 0305 	mvn.w	r3, #5
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	e019      	b.n	800791e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80078ee:	f001 fabd 	bl	8008e6c <xTaskGetTickCount>
 80078f2:	4603      	mov	r3, r0
 80078f4:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d009      	beq.n	8007918 <osDelayUntil+0x4a>
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	db06      	blt.n	8007918 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800790a:	f107 0308 	add.w	r3, r7, #8
 800790e:	6939      	ldr	r1, [r7, #16]
 8007910:	4618      	mov	r0, r3
 8007912:	f001 f911 	bl	8008b38 <vTaskDelayUntil>
 8007916:	e002      	b.n	800791e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8007918:	f06f 0303 	mvn.w	r3, #3
 800791c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800791e:	697b      	ldr	r3, [r7, #20]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007928:	b580      	push	{r7, lr}
 800792a:	b08a      	sub	sp, #40	; 0x28
 800792c:	af02      	add	r7, sp, #8
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007934:	2300      	movs	r3, #0
 8007936:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007938:	f3ef 8305 	mrs	r3, IPSR
 800793c:	613b      	str	r3, [r7, #16]
  return(result);
 800793e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007940:	2b00      	cmp	r3, #0
 8007942:	d175      	bne.n	8007a30 <osSemaphoreNew+0x108>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d072      	beq.n	8007a30 <osSemaphoreNew+0x108>
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	429a      	cmp	r2, r3
 8007950:	d86e      	bhi.n	8007a30 <osSemaphoreNew+0x108>
    mem = -1;
 8007952:	f04f 33ff 	mov.w	r3, #4294967295
 8007956:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d015      	beq.n	800798a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d006      	beq.n	8007974 <osSemaphoreNew+0x4c>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	2b4f      	cmp	r3, #79	; 0x4f
 800796c:	d902      	bls.n	8007974 <osSemaphoreNew+0x4c>
        mem = 1;
 800796e:	2301      	movs	r3, #1
 8007970:	61bb      	str	r3, [r7, #24]
 8007972:	e00c      	b.n	800798e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d108      	bne.n	800798e <osSemaphoreNew+0x66>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d104      	bne.n	800798e <osSemaphoreNew+0x66>
          mem = 0;
 8007984:	2300      	movs	r3, #0
 8007986:	61bb      	str	r3, [r7, #24]
 8007988:	e001      	b.n	800798e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007994:	d04c      	beq.n	8007a30 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d128      	bne.n	80079ee <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d10a      	bne.n	80079b8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	2203      	movs	r2, #3
 80079a8:	9200      	str	r2, [sp, #0]
 80079aa:	2200      	movs	r2, #0
 80079ac:	2100      	movs	r1, #0
 80079ae:	2001      	movs	r0, #1
 80079b0:	f000 f994 	bl	8007cdc <xQueueGenericCreateStatic>
 80079b4:	61f8      	str	r0, [r7, #28]
 80079b6:	e005      	b.n	80079c4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80079b8:	2203      	movs	r2, #3
 80079ba:	2100      	movs	r1, #0
 80079bc:	2001      	movs	r0, #1
 80079be:	f000 fa05 	bl	8007dcc <xQueueGenericCreate>
 80079c2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d022      	beq.n	8007a10 <osSemaphoreNew+0xe8>
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d01f      	beq.n	8007a10 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80079d0:	2300      	movs	r3, #0
 80079d2:	2200      	movs	r2, #0
 80079d4:	2100      	movs	r1, #0
 80079d6:	69f8      	ldr	r0, [r7, #28]
 80079d8:	f000 fac0 	bl	8007f5c <xQueueGenericSend>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d016      	beq.n	8007a10 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80079e2:	69f8      	ldr	r0, [r7, #28]
 80079e4:	f000 fd34 	bl	8008450 <vQueueDelete>
            hSemaphore = NULL;
 80079e8:	2300      	movs	r3, #0
 80079ea:	61fb      	str	r3, [r7, #28]
 80079ec:	e010      	b.n	8007a10 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d108      	bne.n	8007a06 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	461a      	mov	r2, r3
 80079fa:	68b9      	ldr	r1, [r7, #8]
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 fa42 	bl	8007e86 <xQueueCreateCountingSemaphoreStatic>
 8007a02:	61f8      	str	r0, [r7, #28]
 8007a04:	e004      	b.n	8007a10 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 fa73 	bl	8007ef4 <xQueueCreateCountingSemaphore>
 8007a0e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00c      	beq.n	8007a30 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <osSemaphoreNew+0xfc>
          name = attr->name;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	617b      	str	r3, [r7, #20]
 8007a22:	e001      	b.n	8007a28 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007a28:	6979      	ldr	r1, [r7, #20]
 8007a2a:	69f8      	ldr	r0, [r7, #28]
 8007a2c:	f000 fe44 	bl	80086b8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007a30:	69fb      	ldr	r3, [r7, #28]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3720      	adds	r7, #32
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	4a07      	ldr	r2, [pc, #28]	; (8007a68 <vApplicationGetIdleTaskMemory+0x2c>)
 8007a4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	4a06      	ldr	r2, [pc, #24]	; (8007a6c <vApplicationGetIdleTaskMemory+0x30>)
 8007a52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2280      	movs	r2, #128	; 0x80
 8007a58:	601a      	str	r2, [r3, #0]
}
 8007a5a:	bf00      	nop
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	20000924 	.word	0x20000924
 8007a6c:	200009e0 	.word	0x200009e0

08007a70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4a07      	ldr	r2, [pc, #28]	; (8007a9c <vApplicationGetTimerTaskMemory+0x2c>)
 8007a80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	4a06      	ldr	r2, [pc, #24]	; (8007aa0 <vApplicationGetTimerTaskMemory+0x30>)
 8007a86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a8e:	601a      	str	r2, [r3, #0]
}
 8007a90:	bf00      	nop
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	20000be0 	.word	0x20000be0
 8007aa0:	20000c9c 	.word	0x20000c9c

08007aa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f103 0208 	add.w	r2, r3, #8
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8007abc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f103 0208 	add.w	r2, r3, #8
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f103 0208 	add.w	r2, r3, #8
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007afe:	b480      	push	{r7}
 8007b00:	b085      	sub	sp, #20
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	1c5a      	adds	r2, r3, #1
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	601a      	str	r2, [r3, #0]
}
 8007b3a:	bf00      	nop
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b46:	b480      	push	{r7}
 8007b48:	b085      	sub	sp, #20
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5c:	d103      	bne.n	8007b66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	e00c      	b.n	8007b80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3308      	adds	r3, #8
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	e002      	b.n	8007b74 <vListInsert+0x2e>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d2f6      	bcs.n	8007b6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	601a      	str	r2, [r3, #0]
}
 8007bac:	bf00      	nop
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	6892      	ldr	r2, [r2, #8]
 8007bce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	6852      	ldr	r2, [r2, #4]
 8007bd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d103      	bne.n	8007bec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	1e5a      	subs	r2, r3, #1
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10a      	bne.n	8007c36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007c36:	f002 fbc5 	bl	800a3c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c42:	68f9      	ldr	r1, [r7, #12]
 8007c44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c46:	fb01 f303 	mul.w	r3, r1, r3
 8007c4a:	441a      	add	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c66:	3b01      	subs	r3, #1
 8007c68:	68f9      	ldr	r1, [r7, #12]
 8007c6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c6c:	fb01 f303 	mul.w	r3, r1, r3
 8007c70:	441a      	add	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	22ff      	movs	r2, #255	; 0xff
 8007c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	22ff      	movs	r2, #255	; 0xff
 8007c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d114      	bne.n	8007cb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01a      	beq.n	8007cca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	3310      	adds	r3, #16
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f001 fa77 	bl	800918c <xTaskRemoveFromEventList>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d012      	beq.n	8007cca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ca4:	4b0c      	ldr	r3, [pc, #48]	; (8007cd8 <xQueueGenericReset+0xcc>)
 8007ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007caa:	601a      	str	r2, [r3, #0]
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	e009      	b.n	8007cca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	3310      	adds	r3, #16
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7ff fef2 	bl	8007aa4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3324      	adds	r3, #36	; 0x24
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7ff feed 	bl	8007aa4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007cca:	f002 fbab 	bl	800a424 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007cce:	2301      	movs	r3, #1
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	e000ed04 	.word	0xe000ed04

08007cdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b08e      	sub	sp, #56	; 0x38
 8007ce0:	af02      	add	r7, sp, #8
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10a      	bne.n	8007d06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d02:	bf00      	nop
 8007d04:	e7fe      	b.n	8007d04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10a      	bne.n	8007d22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d10:	f383 8811 	msr	BASEPRI, r3
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d1e:	bf00      	nop
 8007d20:	e7fe      	b.n	8007d20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <xQueueGenericCreateStatic+0x52>
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <xQueueGenericCreateStatic+0x56>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e000      	b.n	8007d34 <xQueueGenericCreateStatic+0x58>
 8007d32:	2300      	movs	r3, #0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10a      	bne.n	8007d4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3c:	f383 8811 	msr	BASEPRI, r3
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	623b      	str	r3, [r7, #32]
}
 8007d4a:	bf00      	nop
 8007d4c:	e7fe      	b.n	8007d4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d102      	bne.n	8007d5a <xQueueGenericCreateStatic+0x7e>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <xQueueGenericCreateStatic+0x82>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e000      	b.n	8007d60 <xQueueGenericCreateStatic+0x84>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10a      	bne.n	8007d7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	61fb      	str	r3, [r7, #28]
}
 8007d76:	bf00      	nop
 8007d78:	e7fe      	b.n	8007d78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007d7a:	2350      	movs	r3, #80	; 0x50
 8007d7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2b50      	cmp	r3, #80	; 0x50
 8007d82:	d00a      	beq.n	8007d9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	61bb      	str	r3, [r7, #24]
}
 8007d96:	bf00      	nop
 8007d98:	e7fe      	b.n	8007d98 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d9a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00d      	beq.n	8007dc2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007dae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	4613      	mov	r3, r2
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	68b9      	ldr	r1, [r7, #8]
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f000 f83f 	bl	8007e40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3730      	adds	r7, #48	; 0x30
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b08a      	sub	sp, #40	; 0x28
 8007dd0:	af02      	add	r7, sp, #8
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10a      	bne.n	8007df6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	613b      	str	r3, [r7, #16]
}
 8007df2:	bf00      	nop
 8007df4:	e7fe      	b.n	8007df4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	fb02 f303 	mul.w	r3, r2, r3
 8007dfe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	3350      	adds	r3, #80	; 0x50
 8007e04:	4618      	mov	r0, r3
 8007e06:	f002 fbff 	bl	800a608 <pvPortMalloc>
 8007e0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d011      	beq.n	8007e36 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	3350      	adds	r3, #80	; 0x50
 8007e1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e24:	79fa      	ldrb	r2, [r7, #7]
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	68b9      	ldr	r1, [r7, #8]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 f805 	bl	8007e40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e36:	69bb      	ldr	r3, [r7, #24]
	}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3720      	adds	r7, #32
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d103      	bne.n	8007e5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	e002      	b.n	8007e62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e6e:	2101      	movs	r1, #1
 8007e70:	69b8      	ldr	r0, [r7, #24]
 8007e72:	f7ff fecb 	bl	8007c0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	78fa      	ldrb	r2, [r7, #3]
 8007e7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e7e:	bf00      	nop
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b08a      	sub	sp, #40	; 0x28
 8007e8a:	af02      	add	r7, sp, #8
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10a      	bne.n	8007eae <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	61bb      	str	r3, [r7, #24]
}
 8007eaa:	bf00      	nop
 8007eac:	e7fe      	b.n	8007eac <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d90a      	bls.n	8007ecc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	617b      	str	r3, [r7, #20]
}
 8007ec8:	bf00      	nop
 8007eca:	e7fe      	b.n	8007eca <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007ecc:	2302      	movs	r3, #2
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f7ff ff00 	bl	8007cdc <xQueueGenericCreateStatic>
 8007edc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007eea:	69fb      	ldr	r3, [r7, #28]
	}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3720      	adds	r7, #32
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10a      	bne.n	8007f1a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	613b      	str	r3, [r7, #16]
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d90a      	bls.n	8007f38 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	60fb      	str	r3, [r7, #12]
}
 8007f34:	bf00      	nop
 8007f36:	e7fe      	b.n	8007f36 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007f38:	2202      	movs	r2, #2
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff ff45 	bl	8007dcc <xQueueGenericCreate>
 8007f42:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d002      	beq.n	8007f50 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007f50:	697b      	ldr	r3, [r7, #20]
	}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08e      	sub	sp, #56	; 0x38
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
 8007f68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10a      	bne.n	8007f8e <xQueueGenericSend+0x32>
	__asm volatile
 8007f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f8a:	bf00      	nop
 8007f8c:	e7fe      	b.n	8007f8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d103      	bne.n	8007f9c <xQueueGenericSend+0x40>
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <xQueueGenericSend+0x44>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e000      	b.n	8007fa2 <xQueueGenericSend+0x46>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10a      	bne.n	8007fbc <xQueueGenericSend+0x60>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fb8:	bf00      	nop
 8007fba:	e7fe      	b.n	8007fba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d103      	bne.n	8007fca <xQueueGenericSend+0x6e>
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d101      	bne.n	8007fce <xQueueGenericSend+0x72>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e000      	b.n	8007fd0 <xQueueGenericSend+0x74>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10a      	bne.n	8007fea <xQueueGenericSend+0x8e>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	623b      	str	r3, [r7, #32]
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fea:	f001 fa91 	bl	8009510 <xTaskGetSchedulerState>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d102      	bne.n	8007ffa <xQueueGenericSend+0x9e>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <xQueueGenericSend+0xa2>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e000      	b.n	8008000 <xQueueGenericSend+0xa4>
 8007ffe:	2300      	movs	r3, #0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10a      	bne.n	800801a <xQueueGenericSend+0xbe>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	61fb      	str	r3, [r7, #28]
}
 8008016:	bf00      	nop
 8008018:	e7fe      	b.n	8008018 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800801a:	f002 f9d3 	bl	800a3c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008026:	429a      	cmp	r2, r3
 8008028:	d302      	bcc.n	8008030 <xQueueGenericSend+0xd4>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b02      	cmp	r3, #2
 800802e:	d129      	bne.n	8008084 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008036:	f000 fa2e 	bl	8008496 <prvCopyDataToQueue>
 800803a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	2b00      	cmp	r3, #0
 8008042:	d010      	beq.n	8008066 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	3324      	adds	r3, #36	; 0x24
 8008048:	4618      	mov	r0, r3
 800804a:	f001 f89f 	bl	800918c <xTaskRemoveFromEventList>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d013      	beq.n	800807c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008054:	4b3f      	ldr	r3, [pc, #252]	; (8008154 <xQueueGenericSend+0x1f8>)
 8008056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	e00a      	b.n	800807c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008068:	2b00      	cmp	r3, #0
 800806a:	d007      	beq.n	800807c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800806c:	4b39      	ldr	r3, [pc, #228]	; (8008154 <xQueueGenericSend+0x1f8>)
 800806e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800807c:	f002 f9d2 	bl	800a424 <vPortExitCritical>
				return pdPASS;
 8008080:	2301      	movs	r3, #1
 8008082:	e063      	b.n	800814c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d103      	bne.n	8008092 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800808a:	f002 f9cb 	bl	800a424 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800808e:	2300      	movs	r3, #0
 8008090:	e05c      	b.n	800814c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008094:	2b00      	cmp	r3, #0
 8008096:	d106      	bne.n	80080a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008098:	f107 0314 	add.w	r3, r7, #20
 800809c:	4618      	mov	r0, r3
 800809e:	f001 f8d9 	bl	8009254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080a2:	2301      	movs	r3, #1
 80080a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080a6:	f002 f9bd 	bl	800a424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080aa:	f000 fe33 	bl	8008d14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080ae:	f002 f989 	bl	800a3c4 <vPortEnterCritical>
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080b8:	b25b      	sxtb	r3, r3
 80080ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080be:	d103      	bne.n	80080c8 <xQueueGenericSend+0x16c>
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080ce:	b25b      	sxtb	r3, r3
 80080d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d4:	d103      	bne.n	80080de <xQueueGenericSend+0x182>
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080de:	f002 f9a1 	bl	800a424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080e2:	1d3a      	adds	r2, r7, #4
 80080e4:	f107 0314 	add.w	r3, r7, #20
 80080e8:	4611      	mov	r1, r2
 80080ea:	4618      	mov	r0, r3
 80080ec:	f001 f8c8 	bl	8009280 <xTaskCheckForTimeOut>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d124      	bne.n	8008140 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080f8:	f000 fac5 	bl	8008686 <prvIsQueueFull>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d018      	beq.n	8008134 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	3310      	adds	r3, #16
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	4611      	mov	r1, r2
 800810a:	4618      	mov	r0, r3
 800810c:	f000 ffee 	bl	80090ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008112:	f000 fa50 	bl	80085b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008116:	f000 fe0b 	bl	8008d30 <xTaskResumeAll>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	f47f af7c 	bne.w	800801a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008122:	4b0c      	ldr	r3, [pc, #48]	; (8008154 <xQueueGenericSend+0x1f8>)
 8008124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	e772      	b.n	800801a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008136:	f000 fa3e 	bl	80085b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800813a:	f000 fdf9 	bl	8008d30 <xTaskResumeAll>
 800813e:	e76c      	b.n	800801a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008142:	f000 fa38 	bl	80085b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008146:	f000 fdf3 	bl	8008d30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800814a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800814c:	4618      	mov	r0, r3
 800814e:	3738      	adds	r7, #56	; 0x38
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	e000ed04 	.word	0xe000ed04

08008158 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b090      	sub	sp, #64	; 0x40
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
 8008164:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10a      	bne.n	8008186 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008182:	bf00      	nop
 8008184:	e7fe      	b.n	8008184 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d103      	bne.n	8008194 <xQueueGenericSendFromISR+0x3c>
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <xQueueGenericSendFromISR+0x40>
 8008194:	2301      	movs	r3, #1
 8008196:	e000      	b.n	800819a <xQueueGenericSendFromISR+0x42>
 8008198:	2300      	movs	r3, #0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10a      	bne.n	80081b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081b0:	bf00      	nop
 80081b2:	e7fe      	b.n	80081b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d103      	bne.n	80081c2 <xQueueGenericSendFromISR+0x6a>
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d101      	bne.n	80081c6 <xQueueGenericSendFromISR+0x6e>
 80081c2:	2301      	movs	r3, #1
 80081c4:	e000      	b.n	80081c8 <xQueueGenericSendFromISR+0x70>
 80081c6:	2300      	movs	r3, #0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10a      	bne.n	80081e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80081cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	623b      	str	r3, [r7, #32]
}
 80081de:	bf00      	nop
 80081e0:	e7fe      	b.n	80081e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081e2:	f002 f9d1 	bl	800a588 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80081e6:	f3ef 8211 	mrs	r2, BASEPRI
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	61fa      	str	r2, [r7, #28]
 80081fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80081fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008200:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820a:	429a      	cmp	r2, r3
 800820c:	d302      	bcc.n	8008214 <xQueueGenericSendFromISR+0xbc>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d12f      	bne.n	8008274 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800821a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008222:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	68b9      	ldr	r1, [r7, #8]
 8008228:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800822a:	f000 f934 	bl	8008496 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800822e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008236:	d112      	bne.n	800825e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	2b00      	cmp	r3, #0
 800823e:	d016      	beq.n	800826e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	3324      	adds	r3, #36	; 0x24
 8008244:	4618      	mov	r0, r3
 8008246:	f000 ffa1 	bl	800918c <xTaskRemoveFromEventList>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00e      	beq.n	800826e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00b      	beq.n	800826e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	e007      	b.n	800826e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800825e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008262:	3301      	adds	r3, #1
 8008264:	b2db      	uxtb	r3, r3
 8008266:	b25a      	sxtb	r2, r3
 8008268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800826e:	2301      	movs	r3, #1
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008272:	e001      	b.n	8008278 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008274:	2300      	movs	r3, #0
 8008276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008282:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008286:	4618      	mov	r0, r3
 8008288:	3740      	adds	r7, #64	; 0x40
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
	...

08008290 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b08c      	sub	sp, #48	; 0x30
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800829c:	2300      	movs	r3, #0
 800829e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10a      	bne.n	80082c0 <xQueueReceive+0x30>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	623b      	str	r3, [r7, #32]
}
 80082bc:	bf00      	nop
 80082be:	e7fe      	b.n	80082be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d103      	bne.n	80082ce <xQueueReceive+0x3e>
 80082c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <xQueueReceive+0x42>
 80082ce:	2301      	movs	r3, #1
 80082d0:	e000      	b.n	80082d4 <xQueueReceive+0x44>
 80082d2:	2300      	movs	r3, #0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10a      	bne.n	80082ee <xQueueReceive+0x5e>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	61fb      	str	r3, [r7, #28]
}
 80082ea:	bf00      	nop
 80082ec:	e7fe      	b.n	80082ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082ee:	f001 f90f 	bl	8009510 <xTaskGetSchedulerState>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d102      	bne.n	80082fe <xQueueReceive+0x6e>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <xQueueReceive+0x72>
 80082fe:	2301      	movs	r3, #1
 8008300:	e000      	b.n	8008304 <xQueueReceive+0x74>
 8008302:	2300      	movs	r3, #0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10a      	bne.n	800831e <xQueueReceive+0x8e>
	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	61bb      	str	r3, [r7, #24]
}
 800831a:	bf00      	nop
 800831c:	e7fe      	b.n	800831c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800831e:	f002 f851 	bl	800a3c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008326:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	2b00      	cmp	r3, #0
 800832c:	d01f      	beq.n	800836e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800832e:	68b9      	ldr	r1, [r7, #8]
 8008330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008332:	f000 f91a 	bl	800856a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	1e5a      	subs	r2, r3, #1
 800833a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00f      	beq.n	8008366 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008348:	3310      	adds	r3, #16
 800834a:	4618      	mov	r0, r3
 800834c:	f000 ff1e 	bl	800918c <xTaskRemoveFromEventList>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d007      	beq.n	8008366 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008356:	4b3d      	ldr	r3, [pc, #244]	; (800844c <xQueueReceive+0x1bc>)
 8008358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008366:	f002 f85d 	bl	800a424 <vPortExitCritical>
				return pdPASS;
 800836a:	2301      	movs	r3, #1
 800836c:	e069      	b.n	8008442 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d103      	bne.n	800837c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008374:	f002 f856 	bl	800a424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008378:	2300      	movs	r3, #0
 800837a:	e062      	b.n	8008442 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	2b00      	cmp	r3, #0
 8008380:	d106      	bne.n	8008390 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008382:	f107 0310 	add.w	r3, r7, #16
 8008386:	4618      	mov	r0, r3
 8008388:	f000 ff64 	bl	8009254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800838c:	2301      	movs	r3, #1
 800838e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008390:	f002 f848 	bl	800a424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008394:	f000 fcbe 	bl	8008d14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008398:	f002 f814 	bl	800a3c4 <vPortEnterCritical>
 800839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083a2:	b25b      	sxtb	r3, r3
 80083a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a8:	d103      	bne.n	80083b2 <xQueueReceive+0x122>
 80083aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083b8:	b25b      	sxtb	r3, r3
 80083ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083be:	d103      	bne.n	80083c8 <xQueueReceive+0x138>
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083c8:	f002 f82c 	bl	800a424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083cc:	1d3a      	adds	r2, r7, #4
 80083ce:	f107 0310 	add.w	r3, r7, #16
 80083d2:	4611      	mov	r1, r2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 ff53 	bl	8009280 <xTaskCheckForTimeOut>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d123      	bne.n	8008428 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e2:	f000 f93a 	bl	800865a <prvIsQueueEmpty>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d017      	beq.n	800841c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ee:	3324      	adds	r3, #36	; 0x24
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	4611      	mov	r1, r2
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 fe79 	bl	80090ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083fc:	f000 f8db 	bl	80085b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008400:	f000 fc96 	bl	8008d30 <xTaskResumeAll>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d189      	bne.n	800831e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800840a:	4b10      	ldr	r3, [pc, #64]	; (800844c <xQueueReceive+0x1bc>)
 800840c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	e780      	b.n	800831e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800841c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800841e:	f000 f8ca 	bl	80085b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008422:	f000 fc85 	bl	8008d30 <xTaskResumeAll>
 8008426:	e77a      	b.n	800831e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800842a:	f000 f8c4 	bl	80085b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800842e:	f000 fc7f 	bl	8008d30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008434:	f000 f911 	bl	800865a <prvIsQueueEmpty>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	f43f af6f 	beq.w	800831e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008440:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008442:	4618      	mov	r0, r3
 8008444:	3730      	adds	r7, #48	; 0x30
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	e000ed04 	.word	0xe000ed04

08008450 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10a      	bne.n	8008478 <vQueueDelete+0x28>
	__asm volatile
 8008462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	60bb      	str	r3, [r7, #8]
}
 8008474:	bf00      	nop
 8008476:	e7fe      	b.n	8008476 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 f947 	bl	800870c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008484:	2b00      	cmp	r3, #0
 8008486:	d102      	bne.n	800848e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f002 f989 	bl	800a7a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800848e:	bf00      	nop
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b086      	sub	sp, #24
 800849a:	af00      	add	r7, sp, #0
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084a2:	2300      	movs	r3, #0
 80084a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10d      	bne.n	80084d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d14d      	bne.n	8008558 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f001 f843 	bl	800954c <xTaskPriorityDisinherit>
 80084c6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	609a      	str	r2, [r3, #8]
 80084ce:	e043      	b.n	8008558 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d119      	bne.n	800850a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6858      	ldr	r0, [r3, #4]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084de:	461a      	mov	r2, r3
 80084e0:	68b9      	ldr	r1, [r7, #8]
 80084e2:	f002 fb9e 	bl	800ac22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ee:	441a      	add	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d32b      	bcc.n	8008558 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	605a      	str	r2, [r3, #4]
 8008508:	e026      	b.n	8008558 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	68d8      	ldr	r0, [r3, #12]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008512:	461a      	mov	r2, r3
 8008514:	68b9      	ldr	r1, [r7, #8]
 8008516:	f002 fb84 	bl	800ac22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008522:	425b      	negs	r3, r3
 8008524:	441a      	add	r2, r3
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	68da      	ldr	r2, [r3, #12]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	429a      	cmp	r2, r3
 8008534:	d207      	bcs.n	8008546 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	689a      	ldr	r2, [r3, #8]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853e:	425b      	negs	r3, r3
 8008540:	441a      	add	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b02      	cmp	r3, #2
 800854a:	d105      	bne.n	8008558 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d002      	beq.n	8008558 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	3b01      	subs	r3, #1
 8008556:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	1c5a      	adds	r2, r3, #1
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008560:	697b      	ldr	r3, [r7, #20]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008578:	2b00      	cmp	r3, #0
 800857a:	d018      	beq.n	80085ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	68da      	ldr	r2, [r3, #12]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008584:	441a      	add	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	429a      	cmp	r2, r3
 8008594:	d303      	bcc.n	800859e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68d9      	ldr	r1, [r3, #12]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a6:	461a      	mov	r2, r3
 80085a8:	6838      	ldr	r0, [r7, #0]
 80085aa:	f002 fb3a 	bl	800ac22 <memcpy>
	}
}
 80085ae:	bf00      	nop
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085be:	f001 ff01 	bl	800a3c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085ca:	e011      	b.n	80085f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d012      	beq.n	80085fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	3324      	adds	r3, #36	; 0x24
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fdd7 	bl	800918c <xTaskRemoveFromEventList>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085e4:	f000 feae 	bl	8009344 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	dce9      	bgt.n	80085cc <prvUnlockQueue+0x16>
 80085f8:	e000      	b.n	80085fc <prvUnlockQueue+0x46>
					break;
 80085fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	22ff      	movs	r2, #255	; 0xff
 8008600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008604:	f001 ff0e 	bl	800a424 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008608:	f001 fedc 	bl	800a3c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008612:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008614:	e011      	b.n	800863a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d012      	beq.n	8008644 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	3310      	adds	r3, #16
 8008622:	4618      	mov	r0, r3
 8008624:	f000 fdb2 	bl	800918c <xTaskRemoveFromEventList>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800862e:	f000 fe89 	bl	8009344 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	3b01      	subs	r3, #1
 8008636:	b2db      	uxtb	r3, r3
 8008638:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800863a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800863e:	2b00      	cmp	r3, #0
 8008640:	dce9      	bgt.n	8008616 <prvUnlockQueue+0x60>
 8008642:	e000      	b.n	8008646 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008644:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	22ff      	movs	r2, #255	; 0xff
 800864a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800864e:	f001 fee9 	bl	800a424 <vPortExitCritical>
}
 8008652:	bf00      	nop
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008662:	f001 feaf 	bl	800a3c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866a:	2b00      	cmp	r3, #0
 800866c:	d102      	bne.n	8008674 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800866e:	2301      	movs	r3, #1
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	e001      	b.n	8008678 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008674:	2300      	movs	r3, #0
 8008676:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008678:	f001 fed4 	bl	800a424 <vPortExitCritical>

	return xReturn;
 800867c:	68fb      	ldr	r3, [r7, #12]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800868e:	f001 fe99 	bl	800a3c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869a:	429a      	cmp	r2, r3
 800869c:	d102      	bne.n	80086a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800869e:	2301      	movs	r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	e001      	b.n	80086a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086a8:	f001 febc 	bl	800a424 <vPortExitCritical>

	return xReturn;
 80086ac:	68fb      	ldr	r3, [r7, #12]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086c2:	2300      	movs	r3, #0
 80086c4:	60fb      	str	r3, [r7, #12]
 80086c6:	e014      	b.n	80086f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086c8:	4a0f      	ldr	r2, [pc, #60]	; (8008708 <vQueueAddToRegistry+0x50>)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10b      	bne.n	80086ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086d4:	490c      	ldr	r1, [pc, #48]	; (8008708 <vQueueAddToRegistry+0x50>)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086de:	4a0a      	ldr	r2, [pc, #40]	; (8008708 <vQueueAddToRegistry+0x50>)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	4413      	add	r3, r2
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80086ea:	e006      	b.n	80086fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	3301      	adds	r3, #1
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b07      	cmp	r3, #7
 80086f6:	d9e7      	bls.n	80086c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80086f8:	bf00      	nop
 80086fa:	bf00      	nop
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	2000109c 	.word	0x2000109c

0800870c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008714:	2300      	movs	r3, #0
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	e016      	b.n	8008748 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800871a:	4a10      	ldr	r2, [pc, #64]	; (800875c <vQueueUnregisterQueue+0x50>)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	4413      	add	r3, r2
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	429a      	cmp	r2, r3
 8008728:	d10b      	bne.n	8008742 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800872a:	4a0c      	ldr	r2, [pc, #48]	; (800875c <vQueueUnregisterQueue+0x50>)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2100      	movs	r1, #0
 8008730:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008734:	4a09      	ldr	r2, [pc, #36]	; (800875c <vQueueUnregisterQueue+0x50>)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	00db      	lsls	r3, r3, #3
 800873a:	4413      	add	r3, r2
 800873c:	2200      	movs	r2, #0
 800873e:	605a      	str	r2, [r3, #4]
				break;
 8008740:	e006      	b.n	8008750 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3301      	adds	r3, #1
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2b07      	cmp	r3, #7
 800874c:	d9e5      	bls.n	800871a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800874e:	bf00      	nop
 8008750:	bf00      	nop
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	2000109c 	.word	0x2000109c

08008760 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008770:	f001 fe28 	bl	800a3c4 <vPortEnterCritical>
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800877a:	b25b      	sxtb	r3, r3
 800877c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008780:	d103      	bne.n	800878a <vQueueWaitForMessageRestricted+0x2a>
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008790:	b25b      	sxtb	r3, r3
 8008792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008796:	d103      	bne.n	80087a0 <vQueueWaitForMessageRestricted+0x40>
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087a0:	f001 fe40 	bl	800a424 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d106      	bne.n	80087ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	3324      	adds	r3, #36	; 0x24
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	68b9      	ldr	r1, [r7, #8]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 fcbd 	bl	8009134 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80087ba:	6978      	ldr	r0, [r7, #20]
 80087bc:	f7ff fefb 	bl	80085b6 <prvUnlockQueue>
	}
 80087c0:	bf00      	nop
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08e      	sub	sp, #56	; 0x38
 80087cc:	af04      	add	r7, sp, #16
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
 80087d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10a      	bne.n	80087f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	623b      	str	r3, [r7, #32]
}
 80087ee:	bf00      	nop
 80087f0:	e7fe      	b.n	80087f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80087f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10a      	bne.n	800880e <xTaskCreateStatic+0x46>
	__asm volatile
 80087f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	61fb      	str	r3, [r7, #28]
}
 800880a:	bf00      	nop
 800880c:	e7fe      	b.n	800880c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800880e:	23bc      	movs	r3, #188	; 0xbc
 8008810:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	2bbc      	cmp	r3, #188	; 0xbc
 8008816:	d00a      	beq.n	800882e <xTaskCreateStatic+0x66>
	__asm volatile
 8008818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	61bb      	str	r3, [r7, #24]
}
 800882a:	bf00      	nop
 800882c:	e7fe      	b.n	800882c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800882e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008832:	2b00      	cmp	r3, #0
 8008834:	d01e      	beq.n	8008874 <xTaskCreateStatic+0xac>
 8008836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008838:	2b00      	cmp	r3, #0
 800883a:	d01b      	beq.n	8008874 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800883c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008844:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	2202      	movs	r2, #2
 800884a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800884e:	2300      	movs	r3, #0
 8008850:	9303      	str	r3, [sp, #12]
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	9302      	str	r3, [sp, #8]
 8008856:	f107 0314 	add.w	r3, r7, #20
 800885a:	9301      	str	r3, [sp, #4]
 800885c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	68b9      	ldr	r1, [r7, #8]
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f000 f850 	bl	800890c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800886c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800886e:	f000 f8f3 	bl	8008a58 <prvAddNewTaskToReadyList>
 8008872:	e001      	b.n	8008878 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008874:	2300      	movs	r3, #0
 8008876:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008878:	697b      	ldr	r3, [r7, #20]
	}
 800887a:	4618      	mov	r0, r3
 800887c:	3728      	adds	r7, #40	; 0x28
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008882:	b580      	push	{r7, lr}
 8008884:	b08c      	sub	sp, #48	; 0x30
 8008886:	af04      	add	r7, sp, #16
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	603b      	str	r3, [r7, #0]
 800888e:	4613      	mov	r3, r2
 8008890:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008892:	88fb      	ldrh	r3, [r7, #6]
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4618      	mov	r0, r3
 8008898:	f001 feb6 	bl	800a608 <pvPortMalloc>
 800889c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00e      	beq.n	80088c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088a4:	20bc      	movs	r0, #188	; 0xbc
 80088a6:	f001 feaf 	bl	800a608 <pvPortMalloc>
 80088aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	631a      	str	r2, [r3, #48]	; 0x30
 80088b8:	e005      	b.n	80088c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80088ba:	6978      	ldr	r0, [r7, #20]
 80088bc:	f001 ff70 	bl	800a7a0 <vPortFree>
 80088c0:	e001      	b.n	80088c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d017      	beq.n	80088fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088d4:	88fa      	ldrh	r2, [r7, #6]
 80088d6:	2300      	movs	r3, #0
 80088d8:	9303      	str	r3, [sp, #12]
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	9302      	str	r3, [sp, #8]
 80088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e0:	9301      	str	r3, [sp, #4]
 80088e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	68b9      	ldr	r1, [r7, #8]
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 f80e 	bl	800890c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088f0:	69f8      	ldr	r0, [r7, #28]
 80088f2:	f000 f8b1 	bl	8008a58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80088f6:	2301      	movs	r3, #1
 80088f8:	61bb      	str	r3, [r7, #24]
 80088fa:	e002      	b.n	8008902 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80088fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008900:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008902:	69bb      	ldr	r3, [r7, #24]
	}
 8008904:	4618      	mov	r0, r3
 8008906:	3720      	adds	r7, #32
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b088      	sub	sp, #32
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
 8008918:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	461a      	mov	r2, r3
 8008924:	21a5      	movs	r1, #165	; 0xa5
 8008926:	f002 f98a 	bl	800ac3e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008934:	3b01      	subs	r3, #1
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	f023 0307 	bic.w	r3, r3, #7
 8008942:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00a      	beq.n	8008964 <prvInitialiseNewTask+0x58>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	617b      	str	r3, [r7, #20]
}
 8008960:	bf00      	nop
 8008962:	e7fe      	b.n	8008962 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d01f      	beq.n	80089aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800896a:	2300      	movs	r3, #0
 800896c:	61fb      	str	r3, [r7, #28]
 800896e:	e012      	b.n	8008996 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	4413      	add	r3, r2
 8008976:	7819      	ldrb	r1, [r3, #0]
 8008978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	4413      	add	r3, r2
 800897e:	3334      	adds	r3, #52	; 0x34
 8008980:	460a      	mov	r2, r1
 8008982:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	4413      	add	r3, r2
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d006      	beq.n	800899e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	3301      	adds	r3, #1
 8008994:	61fb      	str	r3, [r7, #28]
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	2b0f      	cmp	r3, #15
 800899a:	d9e9      	bls.n	8008970 <prvInitialiseNewTask+0x64>
 800899c:	e000      	b.n	80089a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800899e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089a8:	e003      	b.n	80089b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b4:	2b37      	cmp	r3, #55	; 0x37
 80089b6:	d901      	bls.n	80089bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089b8:	2337      	movs	r3, #55	; 0x37
 80089ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	2200      	movs	r2, #0
 80089cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	3304      	adds	r3, #4
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7ff f886 	bl	8007ae4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80089d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089da:	3318      	adds	r3, #24
 80089dc:	4618      	mov	r0, r3
 80089de:	f7ff f881 	bl	8007ae4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80089e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80089f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80089f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	3354      	adds	r3, #84	; 0x54
 8008a0c:	2260      	movs	r2, #96	; 0x60
 8008a0e:	2100      	movs	r1, #0
 8008a10:	4618      	mov	r0, r3
 8008a12:	f002 f914 	bl	800ac3e <memset>
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	4a0c      	ldr	r2, [pc, #48]	; (8008a4c <prvInitialiseNewTask+0x140>)
 8008a1a:	659a      	str	r2, [r3, #88]	; 0x58
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1e:	4a0c      	ldr	r2, [pc, #48]	; (8008a50 <prvInitialiseNewTask+0x144>)
 8008a20:	65da      	str	r2, [r3, #92]	; 0x5c
 8008a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a24:	4a0b      	ldr	r2, [pc, #44]	; (8008a54 <prvInitialiseNewTask+0x148>)
 8008a26:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	68f9      	ldr	r1, [r7, #12]
 8008a2c:	69b8      	ldr	r0, [r7, #24]
 8008a2e:	f001 fb9f 	bl	800a170 <pxPortInitialiseStack>
 8008a32:	4602      	mov	r2, r0
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d002      	beq.n	8008a44 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a44:	bf00      	nop
 8008a46:	3720      	adds	r7, #32
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	0800be60 	.word	0x0800be60
 8008a50:	0800be80 	.word	0x0800be80
 8008a54:	0800be40 	.word	0x0800be40

08008a58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a60:	f001 fcb0 	bl	800a3c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a64:	4b2d      	ldr	r3, [pc, #180]	; (8008b1c <prvAddNewTaskToReadyList+0xc4>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	4a2c      	ldr	r2, [pc, #176]	; (8008b1c <prvAddNewTaskToReadyList+0xc4>)
 8008a6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a6e:	4b2c      	ldr	r3, [pc, #176]	; (8008b20 <prvAddNewTaskToReadyList+0xc8>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d109      	bne.n	8008a8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a76:	4a2a      	ldr	r2, [pc, #168]	; (8008b20 <prvAddNewTaskToReadyList+0xc8>)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a7c:	4b27      	ldr	r3, [pc, #156]	; (8008b1c <prvAddNewTaskToReadyList+0xc4>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d110      	bne.n	8008aa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a84:	f000 fc82 	bl	800938c <prvInitialiseTaskLists>
 8008a88:	e00d      	b.n	8008aa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a8a:	4b26      	ldr	r3, [pc, #152]	; (8008b24 <prvAddNewTaskToReadyList+0xcc>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d109      	bne.n	8008aa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a92:	4b23      	ldr	r3, [pc, #140]	; (8008b20 <prvAddNewTaskToReadyList+0xc8>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d802      	bhi.n	8008aa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008aa0:	4a1f      	ldr	r2, [pc, #124]	; (8008b20 <prvAddNewTaskToReadyList+0xc8>)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008aa6:	4b20      	ldr	r3, [pc, #128]	; (8008b28 <prvAddNewTaskToReadyList+0xd0>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	4a1e      	ldr	r2, [pc, #120]	; (8008b28 <prvAddNewTaskToReadyList+0xd0>)
 8008aae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ab0:	4b1d      	ldr	r3, [pc, #116]	; (8008b28 <prvAddNewTaskToReadyList+0xd0>)
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008abc:	4b1b      	ldr	r3, [pc, #108]	; (8008b2c <prvAddNewTaskToReadyList+0xd4>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d903      	bls.n	8008acc <prvAddNewTaskToReadyList+0x74>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac8:	4a18      	ldr	r2, [pc, #96]	; (8008b2c <prvAddNewTaskToReadyList+0xd4>)
 8008aca:	6013      	str	r3, [r2, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4a15      	ldr	r2, [pc, #84]	; (8008b30 <prvAddNewTaskToReadyList+0xd8>)
 8008ada:	441a      	add	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3304      	adds	r3, #4
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	4610      	mov	r0, r2
 8008ae4:	f7ff f80b 	bl	8007afe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ae8:	f001 fc9c 	bl	800a424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008aec:	4b0d      	ldr	r3, [pc, #52]	; (8008b24 <prvAddNewTaskToReadyList+0xcc>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00e      	beq.n	8008b12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008af4:	4b0a      	ldr	r3, [pc, #40]	; (8008b20 <prvAddNewTaskToReadyList+0xc8>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d207      	bcs.n	8008b12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b02:	4b0c      	ldr	r3, [pc, #48]	; (8008b34 <prvAddNewTaskToReadyList+0xdc>)
 8008b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b08:	601a      	str	r2, [r3, #0]
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b12:	bf00      	nop
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	200015b0 	.word	0x200015b0
 8008b20:	200010dc 	.word	0x200010dc
 8008b24:	200015bc 	.word	0x200015bc
 8008b28:	200015cc 	.word	0x200015cc
 8008b2c:	200015b8 	.word	0x200015b8
 8008b30:	200010e0 	.word	0x200010e0
 8008b34:	e000ed04 	.word	0xe000ed04

08008b38 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08a      	sub	sp, #40	; 0x28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008b42:	2300      	movs	r3, #0
 8008b44:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10a      	bne.n	8008b62 <vTaskDelayUntil+0x2a>
	__asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	617b      	str	r3, [r7, #20]
}
 8008b5e:	bf00      	nop
 8008b60:	e7fe      	b.n	8008b60 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10a      	bne.n	8008b7e <vTaskDelayUntil+0x46>
	__asm volatile
 8008b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6c:	f383 8811 	msr	BASEPRI, r3
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	613b      	str	r3, [r7, #16]
}
 8008b7a:	bf00      	nop
 8008b7c:	e7fe      	b.n	8008b7c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008b7e:	4b2a      	ldr	r3, [pc, #168]	; (8008c28 <vTaskDelayUntil+0xf0>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00a      	beq.n	8008b9c <vTaskDelayUntil+0x64>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	60fb      	str	r3, [r7, #12]
}
 8008b98:	bf00      	nop
 8008b9a:	e7fe      	b.n	8008b9a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008b9c:	f000 f8ba 	bl	8008d14 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008ba0:	4b22      	ldr	r3, [pc, #136]	; (8008c2c <vTaskDelayUntil+0xf4>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	4413      	add	r3, r2
 8008bae:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6a3a      	ldr	r2, [r7, #32]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d20b      	bcs.n	8008bd2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	69fa      	ldr	r2, [r7, #28]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d211      	bcs.n	8008be8 <vTaskDelayUntil+0xb0>
 8008bc4:	69fa      	ldr	r2, [r7, #28]
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d90d      	bls.n	8008be8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	627b      	str	r3, [r7, #36]	; 0x24
 8008bd0:	e00a      	b.n	8008be8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	69fa      	ldr	r2, [r7, #28]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d303      	bcc.n	8008be4 <vTaskDelayUntil+0xac>
 8008bdc:	69fa      	ldr	r2, [r7, #28]
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d901      	bls.n	8008be8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008be4:	2301      	movs	r3, #1
 8008be6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	69fa      	ldr	r2, [r7, #28]
 8008bec:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d006      	beq.n	8008c02 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008bf4:	69fa      	ldr	r2, [r7, #28]
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f000 ff15 	bl	8009a2c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008c02:	f000 f895 	bl	8008d30 <xTaskResumeAll>
 8008c06:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d107      	bne.n	8008c1e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008c0e:	4b08      	ldr	r3, [pc, #32]	; (8008c30 <vTaskDelayUntil+0xf8>)
 8008c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c1e:	bf00      	nop
 8008c20:	3728      	adds	r7, #40	; 0x28
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	200015d8 	.word	0x200015d8
 8008c2c:	200015b4 	.word	0x200015b4
 8008c30:	e000ed04 	.word	0xe000ed04

08008c34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b08a      	sub	sp, #40	; 0x28
 8008c38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c42:	463a      	mov	r2, r7
 8008c44:	1d39      	adds	r1, r7, #4
 8008c46:	f107 0308 	add.w	r3, r7, #8
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe fef6 	bl	8007a3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	9202      	str	r2, [sp, #8]
 8008c58:	9301      	str	r3, [sp, #4]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	2300      	movs	r3, #0
 8008c60:	460a      	mov	r2, r1
 8008c62:	4924      	ldr	r1, [pc, #144]	; (8008cf4 <vTaskStartScheduler+0xc0>)
 8008c64:	4824      	ldr	r0, [pc, #144]	; (8008cf8 <vTaskStartScheduler+0xc4>)
 8008c66:	f7ff fdaf 	bl	80087c8 <xTaskCreateStatic>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	4a23      	ldr	r2, [pc, #140]	; (8008cfc <vTaskStartScheduler+0xc8>)
 8008c6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c70:	4b22      	ldr	r3, [pc, #136]	; (8008cfc <vTaskStartScheduler+0xc8>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d002      	beq.n	8008c7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	617b      	str	r3, [r7, #20]
 8008c7c:	e001      	b.n	8008c82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d102      	bne.n	8008c8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c88:	f000 ff24 	bl	8009ad4 <xTimerCreateTimerTask>
 8008c8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d11b      	bne.n	8008ccc <vTaskStartScheduler+0x98>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	613b      	str	r3, [r7, #16]
}
 8008ca6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ca8:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <vTaskStartScheduler+0xcc>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	3354      	adds	r3, #84	; 0x54
 8008cae:	4a15      	ldr	r2, [pc, #84]	; (8008d04 <vTaskStartScheduler+0xd0>)
 8008cb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008cb2:	4b15      	ldr	r3, [pc, #84]	; (8008d08 <vTaskStartScheduler+0xd4>)
 8008cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008cba:	4b14      	ldr	r3, [pc, #80]	; (8008d0c <vTaskStartScheduler+0xd8>)
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008cc0:	4b13      	ldr	r3, [pc, #76]	; (8008d10 <vTaskStartScheduler+0xdc>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008cc6:	f001 fadb 	bl	800a280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008cca:	e00e      	b.n	8008cea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd2:	d10a      	bne.n	8008cea <vTaskStartScheduler+0xb6>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	60fb      	str	r3, [r7, #12]
}
 8008ce6:	bf00      	nop
 8008ce8:	e7fe      	b.n	8008ce8 <vTaskStartScheduler+0xb4>
}
 8008cea:	bf00      	nop
 8008cec:	3718      	adds	r7, #24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	0800bd20 	.word	0x0800bd20
 8008cf8:	0800935d 	.word	0x0800935d
 8008cfc:	200015d4 	.word	0x200015d4
 8008d00:	200010dc 	.word	0x200010dc
 8008d04:	20000040 	.word	0x20000040
 8008d08:	200015d0 	.word	0x200015d0
 8008d0c:	200015bc 	.word	0x200015bc
 8008d10:	200015b4 	.word	0x200015b4

08008d14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d14:	b480      	push	{r7}
 8008d16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d18:	4b04      	ldr	r3, [pc, #16]	; (8008d2c <vTaskSuspendAll+0x18>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	4a03      	ldr	r2, [pc, #12]	; (8008d2c <vTaskSuspendAll+0x18>)
 8008d20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d22:	bf00      	nop
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr
 8008d2c:	200015d8 	.word	0x200015d8

08008d30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d36:	2300      	movs	r3, #0
 8008d38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d3e:	4b42      	ldr	r3, [pc, #264]	; (8008e48 <xTaskResumeAll+0x118>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10a      	bne.n	8008d5c <xTaskResumeAll+0x2c>
	__asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	603b      	str	r3, [r7, #0]
}
 8008d58:	bf00      	nop
 8008d5a:	e7fe      	b.n	8008d5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d5c:	f001 fb32 	bl	800a3c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d60:	4b39      	ldr	r3, [pc, #228]	; (8008e48 <xTaskResumeAll+0x118>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	3b01      	subs	r3, #1
 8008d66:	4a38      	ldr	r2, [pc, #224]	; (8008e48 <xTaskResumeAll+0x118>)
 8008d68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d6a:	4b37      	ldr	r3, [pc, #220]	; (8008e48 <xTaskResumeAll+0x118>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d162      	bne.n	8008e38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d72:	4b36      	ldr	r3, [pc, #216]	; (8008e4c <xTaskResumeAll+0x11c>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d05e      	beq.n	8008e38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d7a:	e02f      	b.n	8008ddc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d7c:	4b34      	ldr	r3, [pc, #208]	; (8008e50 <xTaskResumeAll+0x120>)
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	3318      	adds	r3, #24
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fe ff15 	bl	8007bb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	3304      	adds	r3, #4
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fe ff10 	bl	8007bb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9c:	4b2d      	ldr	r3, [pc, #180]	; (8008e54 <xTaskResumeAll+0x124>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d903      	bls.n	8008dac <xTaskResumeAll+0x7c>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	4a2a      	ldr	r2, [pc, #168]	; (8008e54 <xTaskResumeAll+0x124>)
 8008daa:	6013      	str	r3, [r2, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db0:	4613      	mov	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4a27      	ldr	r2, [pc, #156]	; (8008e58 <xTaskResumeAll+0x128>)
 8008dba:	441a      	add	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	f7fe fe9b 	bl	8007afe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dcc:	4b23      	ldr	r3, [pc, #140]	; (8008e5c <xTaskResumeAll+0x12c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d302      	bcc.n	8008ddc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008dd6:	4b22      	ldr	r3, [pc, #136]	; (8008e60 <xTaskResumeAll+0x130>)
 8008dd8:	2201      	movs	r2, #1
 8008dda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ddc:	4b1c      	ldr	r3, [pc, #112]	; (8008e50 <xTaskResumeAll+0x120>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1cb      	bne.n	8008d7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008dea:	f000 fb71 	bl	80094d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008dee:	4b1d      	ldr	r3, [pc, #116]	; (8008e64 <xTaskResumeAll+0x134>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d010      	beq.n	8008e1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008dfa:	f000 f859 	bl	8008eb0 <xTaskIncrementTick>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008e04:	4b16      	ldr	r3, [pc, #88]	; (8008e60 <xTaskResumeAll+0x130>)
 8008e06:	2201      	movs	r2, #1
 8008e08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1f1      	bne.n	8008dfa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008e16:	4b13      	ldr	r3, [pc, #76]	; (8008e64 <xTaskResumeAll+0x134>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e1c:	4b10      	ldr	r3, [pc, #64]	; (8008e60 <xTaskResumeAll+0x130>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d009      	beq.n	8008e38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e24:	2301      	movs	r3, #1
 8008e26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e28:	4b0f      	ldr	r3, [pc, #60]	; (8008e68 <xTaskResumeAll+0x138>)
 8008e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e38:	f001 faf4 	bl	800a424 <vPortExitCritical>

	return xAlreadyYielded;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	200015d8 	.word	0x200015d8
 8008e4c:	200015b0 	.word	0x200015b0
 8008e50:	20001570 	.word	0x20001570
 8008e54:	200015b8 	.word	0x200015b8
 8008e58:	200010e0 	.word	0x200010e0
 8008e5c:	200010dc 	.word	0x200010dc
 8008e60:	200015c4 	.word	0x200015c4
 8008e64:	200015c0 	.word	0x200015c0
 8008e68:	e000ed04 	.word	0xe000ed04

08008e6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e72:	4b05      	ldr	r3, [pc, #20]	; (8008e88 <xTaskGetTickCount+0x1c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e78:	687b      	ldr	r3, [r7, #4]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	200015b4 	.word	0x200015b4

08008e8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e92:	f001 fb79 	bl	800a588 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008e96:	2300      	movs	r3, #0
 8008e98:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008e9a:	4b04      	ldr	r3, [pc, #16]	; (8008eac <xTaskGetTickCountFromISR+0x20>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ea0:	683b      	ldr	r3, [r7, #0]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	200015b4 	.word	0x200015b4

08008eb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eba:	4b4f      	ldr	r3, [pc, #316]	; (8008ff8 <xTaskIncrementTick+0x148>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f040 808f 	bne.w	8008fe2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ec4:	4b4d      	ldr	r3, [pc, #308]	; (8008ffc <xTaskIncrementTick+0x14c>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ecc:	4a4b      	ldr	r2, [pc, #300]	; (8008ffc <xTaskIncrementTick+0x14c>)
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d120      	bne.n	8008f1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ed8:	4b49      	ldr	r3, [pc, #292]	; (8009000 <xTaskIncrementTick+0x150>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00a      	beq.n	8008ef8 <xTaskIncrementTick+0x48>
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	603b      	str	r3, [r7, #0]
}
 8008ef4:	bf00      	nop
 8008ef6:	e7fe      	b.n	8008ef6 <xTaskIncrementTick+0x46>
 8008ef8:	4b41      	ldr	r3, [pc, #260]	; (8009000 <xTaskIncrementTick+0x150>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	60fb      	str	r3, [r7, #12]
 8008efe:	4b41      	ldr	r3, [pc, #260]	; (8009004 <xTaskIncrementTick+0x154>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a3f      	ldr	r2, [pc, #252]	; (8009000 <xTaskIncrementTick+0x150>)
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	4a3f      	ldr	r2, [pc, #252]	; (8009004 <xTaskIncrementTick+0x154>)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6013      	str	r3, [r2, #0]
 8008f0c:	4b3e      	ldr	r3, [pc, #248]	; (8009008 <xTaskIncrementTick+0x158>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3301      	adds	r3, #1
 8008f12:	4a3d      	ldr	r2, [pc, #244]	; (8009008 <xTaskIncrementTick+0x158>)
 8008f14:	6013      	str	r3, [r2, #0]
 8008f16:	f000 fadb 	bl	80094d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f1a:	4b3c      	ldr	r3, [pc, #240]	; (800900c <xTaskIncrementTick+0x15c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d349      	bcc.n	8008fb8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f24:	4b36      	ldr	r3, [pc, #216]	; (8009000 <xTaskIncrementTick+0x150>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d104      	bne.n	8008f38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f2e:	4b37      	ldr	r3, [pc, #220]	; (800900c <xTaskIncrementTick+0x15c>)
 8008f30:	f04f 32ff 	mov.w	r2, #4294967295
 8008f34:	601a      	str	r2, [r3, #0]
					break;
 8008f36:	e03f      	b.n	8008fb8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f38:	4b31      	ldr	r3, [pc, #196]	; (8009000 <xTaskIncrementTick+0x150>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d203      	bcs.n	8008f58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f50:	4a2e      	ldr	r2, [pc, #184]	; (800900c <xTaskIncrementTick+0x15c>)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f56:	e02f      	b.n	8008fb8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	3304      	adds	r3, #4
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fe fe2b 	bl	8007bb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d004      	beq.n	8008f74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	3318      	adds	r3, #24
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe fe22 	bl	8007bb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f78:	4b25      	ldr	r3, [pc, #148]	; (8009010 <xTaskIncrementTick+0x160>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d903      	bls.n	8008f88 <xTaskIncrementTick+0xd8>
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f84:	4a22      	ldr	r2, [pc, #136]	; (8009010 <xTaskIncrementTick+0x160>)
 8008f86:	6013      	str	r3, [r2, #0]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4a1f      	ldr	r2, [pc, #124]	; (8009014 <xTaskIncrementTick+0x164>)
 8008f96:	441a      	add	r2, r3
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	f7fe fdad 	bl	8007afe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa8:	4b1b      	ldr	r3, [pc, #108]	; (8009018 <xTaskIncrementTick+0x168>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d3b8      	bcc.n	8008f24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fb6:	e7b5      	b.n	8008f24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fb8:	4b17      	ldr	r3, [pc, #92]	; (8009018 <xTaskIncrementTick+0x168>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbe:	4915      	ldr	r1, [pc, #84]	; (8009014 <xTaskIncrementTick+0x164>)
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	440b      	add	r3, r1
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d901      	bls.n	8008fd4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008fd4:	4b11      	ldr	r3, [pc, #68]	; (800901c <xTaskIncrementTick+0x16c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d007      	beq.n	8008fec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	617b      	str	r3, [r7, #20]
 8008fe0:	e004      	b.n	8008fec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008fe2:	4b0f      	ldr	r3, [pc, #60]	; (8009020 <xTaskIncrementTick+0x170>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	4a0d      	ldr	r2, [pc, #52]	; (8009020 <xTaskIncrementTick+0x170>)
 8008fea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008fec:	697b      	ldr	r3, [r7, #20]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	200015d8 	.word	0x200015d8
 8008ffc:	200015b4 	.word	0x200015b4
 8009000:	20001568 	.word	0x20001568
 8009004:	2000156c 	.word	0x2000156c
 8009008:	200015c8 	.word	0x200015c8
 800900c:	200015d0 	.word	0x200015d0
 8009010:	200015b8 	.word	0x200015b8
 8009014:	200010e0 	.word	0x200010e0
 8009018:	200010dc 	.word	0x200010dc
 800901c:	200015c4 	.word	0x200015c4
 8009020:	200015c0 	.word	0x200015c0

08009024 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800902a:	4b2a      	ldr	r3, [pc, #168]	; (80090d4 <vTaskSwitchContext+0xb0>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d003      	beq.n	800903a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009032:	4b29      	ldr	r3, [pc, #164]	; (80090d8 <vTaskSwitchContext+0xb4>)
 8009034:	2201      	movs	r2, #1
 8009036:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009038:	e046      	b.n	80090c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800903a:	4b27      	ldr	r3, [pc, #156]	; (80090d8 <vTaskSwitchContext+0xb4>)
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009040:	4b26      	ldr	r3, [pc, #152]	; (80090dc <vTaskSwitchContext+0xb8>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	60fb      	str	r3, [r7, #12]
 8009046:	e010      	b.n	800906a <vTaskSwitchContext+0x46>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10a      	bne.n	8009064 <vTaskSwitchContext+0x40>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	607b      	str	r3, [r7, #4]
}
 8009060:	bf00      	nop
 8009062:	e7fe      	b.n	8009062 <vTaskSwitchContext+0x3e>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	3b01      	subs	r3, #1
 8009068:	60fb      	str	r3, [r7, #12]
 800906a:	491d      	ldr	r1, [pc, #116]	; (80090e0 <vTaskSwitchContext+0xbc>)
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	4613      	mov	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4413      	add	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	440b      	add	r3, r1
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d0e4      	beq.n	8009048 <vTaskSwitchContext+0x24>
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	4613      	mov	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4413      	add	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4a15      	ldr	r2, [pc, #84]	; (80090e0 <vTaskSwitchContext+0xbc>)
 800908a:	4413      	add	r3, r2
 800908c:	60bb      	str	r3, [r7, #8]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	685a      	ldr	r2, [r3, #4]
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	605a      	str	r2, [r3, #4]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	3308      	adds	r3, #8
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d104      	bne.n	80090ae <vTaskSwitchContext+0x8a>
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	685a      	ldr	r2, [r3, #4]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	605a      	str	r2, [r3, #4]
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	4a0b      	ldr	r2, [pc, #44]	; (80090e4 <vTaskSwitchContext+0xc0>)
 80090b6:	6013      	str	r3, [r2, #0]
 80090b8:	4a08      	ldr	r2, [pc, #32]	; (80090dc <vTaskSwitchContext+0xb8>)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090be:	4b09      	ldr	r3, [pc, #36]	; (80090e4 <vTaskSwitchContext+0xc0>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3354      	adds	r3, #84	; 0x54
 80090c4:	4a08      	ldr	r2, [pc, #32]	; (80090e8 <vTaskSwitchContext+0xc4>)
 80090c6:	6013      	str	r3, [r2, #0]
}
 80090c8:	bf00      	nop
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	200015d8 	.word	0x200015d8
 80090d8:	200015c4 	.word	0x200015c4
 80090dc:	200015b8 	.word	0x200015b8
 80090e0:	200010e0 	.word	0x200010e0
 80090e4:	200010dc 	.word	0x200010dc
 80090e8:	20000040 	.word	0x20000040

080090ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10a      	bne.n	8009112 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80090fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	60fb      	str	r3, [r7, #12]
}
 800910e:	bf00      	nop
 8009110:	e7fe      	b.n	8009110 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009112:	4b07      	ldr	r3, [pc, #28]	; (8009130 <vTaskPlaceOnEventList+0x44>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3318      	adds	r3, #24
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7fe fd13 	bl	8007b46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009120:	2101      	movs	r1, #1
 8009122:	6838      	ldr	r0, [r7, #0]
 8009124:	f000 fc82 	bl	8009a2c <prvAddCurrentTaskToDelayedList>
}
 8009128:	bf00      	nop
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	200010dc 	.word	0x200010dc

08009134 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10a      	bne.n	800915c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	617b      	str	r3, [r7, #20]
}
 8009158:	bf00      	nop
 800915a:	e7fe      	b.n	800915a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800915c:	4b0a      	ldr	r3, [pc, #40]	; (8009188 <vTaskPlaceOnEventListRestricted+0x54>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3318      	adds	r3, #24
 8009162:	4619      	mov	r1, r3
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f7fe fcca 	bl	8007afe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d002      	beq.n	8009176 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009170:	f04f 33ff 	mov.w	r3, #4294967295
 8009174:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009176:	6879      	ldr	r1, [r7, #4]
 8009178:	68b8      	ldr	r0, [r7, #8]
 800917a:	f000 fc57 	bl	8009a2c <prvAddCurrentTaskToDelayedList>
	}
 800917e:	bf00      	nop
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	200010dc 	.word	0x200010dc

0800918c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10a      	bne.n	80091b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80091a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a6:	f383 8811 	msr	BASEPRI, r3
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	60fb      	str	r3, [r7, #12]
}
 80091b4:	bf00      	nop
 80091b6:	e7fe      	b.n	80091b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	3318      	adds	r3, #24
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fe fcfb 	bl	8007bb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091c2:	4b1e      	ldr	r3, [pc, #120]	; (800923c <xTaskRemoveFromEventList+0xb0>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d11d      	bne.n	8009206 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	3304      	adds	r3, #4
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fe fcf2 	bl	8007bb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d8:	4b19      	ldr	r3, [pc, #100]	; (8009240 <xTaskRemoveFromEventList+0xb4>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d903      	bls.n	80091e8 <xTaskRemoveFromEventList+0x5c>
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e4:	4a16      	ldr	r2, [pc, #88]	; (8009240 <xTaskRemoveFromEventList+0xb4>)
 80091e6:	6013      	str	r3, [r2, #0]
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ec:	4613      	mov	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	4413      	add	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4a13      	ldr	r2, [pc, #76]	; (8009244 <xTaskRemoveFromEventList+0xb8>)
 80091f6:	441a      	add	r2, r3
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	3304      	adds	r3, #4
 80091fc:	4619      	mov	r1, r3
 80091fe:	4610      	mov	r0, r2
 8009200:	f7fe fc7d 	bl	8007afe <vListInsertEnd>
 8009204:	e005      	b.n	8009212 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	3318      	adds	r3, #24
 800920a:	4619      	mov	r1, r3
 800920c:	480e      	ldr	r0, [pc, #56]	; (8009248 <xTaskRemoveFromEventList+0xbc>)
 800920e:	f7fe fc76 	bl	8007afe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009216:	4b0d      	ldr	r3, [pc, #52]	; (800924c <xTaskRemoveFromEventList+0xc0>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921c:	429a      	cmp	r2, r3
 800921e:	d905      	bls.n	800922c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009220:	2301      	movs	r3, #1
 8009222:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009224:	4b0a      	ldr	r3, [pc, #40]	; (8009250 <xTaskRemoveFromEventList+0xc4>)
 8009226:	2201      	movs	r2, #1
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	e001      	b.n	8009230 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800922c:	2300      	movs	r3, #0
 800922e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009230:	697b      	ldr	r3, [r7, #20]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3718      	adds	r7, #24
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	200015d8 	.word	0x200015d8
 8009240:	200015b8 	.word	0x200015b8
 8009244:	200010e0 	.word	0x200010e0
 8009248:	20001570 	.word	0x20001570
 800924c:	200010dc 	.word	0x200010dc
 8009250:	200015c4 	.word	0x200015c4

08009254 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800925c:	4b06      	ldr	r3, [pc, #24]	; (8009278 <vTaskInternalSetTimeOutState+0x24>)
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009264:	4b05      	ldr	r3, [pc, #20]	; (800927c <vTaskInternalSetTimeOutState+0x28>)
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	605a      	str	r2, [r3, #4]
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	200015c8 	.word	0x200015c8
 800927c:	200015b4 	.word	0x200015b4

08009280 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b088      	sub	sp, #32
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10a      	bne.n	80092a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	613b      	str	r3, [r7, #16]
}
 80092a2:	bf00      	nop
 80092a4:	e7fe      	b.n	80092a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d10a      	bne.n	80092c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80092ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	60fb      	str	r3, [r7, #12]
}
 80092be:	bf00      	nop
 80092c0:	e7fe      	b.n	80092c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80092c2:	f001 f87f 	bl	800a3c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092c6:	4b1d      	ldr	r3, [pc, #116]	; (800933c <xTaskCheckForTimeOut+0xbc>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092de:	d102      	bne.n	80092e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80092e0:	2300      	movs	r3, #0
 80092e2:	61fb      	str	r3, [r7, #28]
 80092e4:	e023      	b.n	800932e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	4b15      	ldr	r3, [pc, #84]	; (8009340 <xTaskCheckForTimeOut+0xc0>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d007      	beq.n	8009302 <xTaskCheckForTimeOut+0x82>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d302      	bcc.n	8009302 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80092fc:	2301      	movs	r3, #1
 80092fe:	61fb      	str	r3, [r7, #28]
 8009300:	e015      	b.n	800932e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	429a      	cmp	r2, r3
 800930a:	d20b      	bcs.n	8009324 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	1ad2      	subs	r2, r2, r3
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f7ff ff9b 	bl	8009254 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800931e:	2300      	movs	r3, #0
 8009320:	61fb      	str	r3, [r7, #28]
 8009322:	e004      	b.n	800932e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	2200      	movs	r2, #0
 8009328:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800932a:	2301      	movs	r3, #1
 800932c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800932e:	f001 f879 	bl	800a424 <vPortExitCritical>

	return xReturn;
 8009332:	69fb      	ldr	r3, [r7, #28]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3720      	adds	r7, #32
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	200015b4 	.word	0x200015b4
 8009340:	200015c8 	.word	0x200015c8

08009344 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009344:	b480      	push	{r7}
 8009346:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009348:	4b03      	ldr	r3, [pc, #12]	; (8009358 <vTaskMissedYield+0x14>)
 800934a:	2201      	movs	r2, #1
 800934c:	601a      	str	r2, [r3, #0]
}
 800934e:	bf00      	nop
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	200015c4 	.word	0x200015c4

0800935c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009364:	f000 f852 	bl	800940c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009368:	4b06      	ldr	r3, [pc, #24]	; (8009384 <prvIdleTask+0x28>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d9f9      	bls.n	8009364 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009370:	4b05      	ldr	r3, [pc, #20]	; (8009388 <prvIdleTask+0x2c>)
 8009372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009376:	601a      	str	r2, [r3, #0]
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009380:	e7f0      	b.n	8009364 <prvIdleTask+0x8>
 8009382:	bf00      	nop
 8009384:	200010e0 	.word	0x200010e0
 8009388:	e000ed04 	.word	0xe000ed04

0800938c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009392:	2300      	movs	r3, #0
 8009394:	607b      	str	r3, [r7, #4]
 8009396:	e00c      	b.n	80093b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	4613      	mov	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4a12      	ldr	r2, [pc, #72]	; (80093ec <prvInitialiseTaskLists+0x60>)
 80093a4:	4413      	add	r3, r2
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fe fb7c 	bl	8007aa4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3301      	adds	r3, #1
 80093b0:	607b      	str	r3, [r7, #4]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2b37      	cmp	r3, #55	; 0x37
 80093b6:	d9ef      	bls.n	8009398 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093b8:	480d      	ldr	r0, [pc, #52]	; (80093f0 <prvInitialiseTaskLists+0x64>)
 80093ba:	f7fe fb73 	bl	8007aa4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093be:	480d      	ldr	r0, [pc, #52]	; (80093f4 <prvInitialiseTaskLists+0x68>)
 80093c0:	f7fe fb70 	bl	8007aa4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093c4:	480c      	ldr	r0, [pc, #48]	; (80093f8 <prvInitialiseTaskLists+0x6c>)
 80093c6:	f7fe fb6d 	bl	8007aa4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093ca:	480c      	ldr	r0, [pc, #48]	; (80093fc <prvInitialiseTaskLists+0x70>)
 80093cc:	f7fe fb6a 	bl	8007aa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80093d0:	480b      	ldr	r0, [pc, #44]	; (8009400 <prvInitialiseTaskLists+0x74>)
 80093d2:	f7fe fb67 	bl	8007aa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80093d6:	4b0b      	ldr	r3, [pc, #44]	; (8009404 <prvInitialiseTaskLists+0x78>)
 80093d8:	4a05      	ldr	r2, [pc, #20]	; (80093f0 <prvInitialiseTaskLists+0x64>)
 80093da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80093dc:	4b0a      	ldr	r3, [pc, #40]	; (8009408 <prvInitialiseTaskLists+0x7c>)
 80093de:	4a05      	ldr	r2, [pc, #20]	; (80093f4 <prvInitialiseTaskLists+0x68>)
 80093e0:	601a      	str	r2, [r3, #0]
}
 80093e2:	bf00      	nop
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	200010e0 	.word	0x200010e0
 80093f0:	20001540 	.word	0x20001540
 80093f4:	20001554 	.word	0x20001554
 80093f8:	20001570 	.word	0x20001570
 80093fc:	20001584 	.word	0x20001584
 8009400:	2000159c 	.word	0x2000159c
 8009404:	20001568 	.word	0x20001568
 8009408:	2000156c 	.word	0x2000156c

0800940c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009412:	e019      	b.n	8009448 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009414:	f000 ffd6 	bl	800a3c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009418:	4b10      	ldr	r3, [pc, #64]	; (800945c <prvCheckTasksWaitingTermination+0x50>)
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	3304      	adds	r3, #4
 8009424:	4618      	mov	r0, r3
 8009426:	f7fe fbc7 	bl	8007bb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800942a:	4b0d      	ldr	r3, [pc, #52]	; (8009460 <prvCheckTasksWaitingTermination+0x54>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	3b01      	subs	r3, #1
 8009430:	4a0b      	ldr	r2, [pc, #44]	; (8009460 <prvCheckTasksWaitingTermination+0x54>)
 8009432:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009434:	4b0b      	ldr	r3, [pc, #44]	; (8009464 <prvCheckTasksWaitingTermination+0x58>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3b01      	subs	r3, #1
 800943a:	4a0a      	ldr	r2, [pc, #40]	; (8009464 <prvCheckTasksWaitingTermination+0x58>)
 800943c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800943e:	f000 fff1 	bl	800a424 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f810 	bl	8009468 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009448:	4b06      	ldr	r3, [pc, #24]	; (8009464 <prvCheckTasksWaitingTermination+0x58>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e1      	bne.n	8009414 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009450:	bf00      	nop
 8009452:	bf00      	nop
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20001584 	.word	0x20001584
 8009460:	200015b0 	.word	0x200015b0
 8009464:	20001598 	.word	0x20001598

08009468 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	3354      	adds	r3, #84	; 0x54
 8009474:	4618      	mov	r0, r3
 8009476:	f001 fd1b 	bl	800aeb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009480:	2b00      	cmp	r3, #0
 8009482:	d108      	bne.n	8009496 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009488:	4618      	mov	r0, r3
 800948a:	f001 f989 	bl	800a7a0 <vPortFree>
				vPortFree( pxTCB );
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f001 f986 	bl	800a7a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009494:	e018      	b.n	80094c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800949c:	2b01      	cmp	r3, #1
 800949e:	d103      	bne.n	80094a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f001 f97d 	bl	800a7a0 <vPortFree>
	}
 80094a6:	e00f      	b.n	80094c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d00a      	beq.n	80094c8 <prvDeleteTCB+0x60>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	60fb      	str	r3, [r7, #12]
}
 80094c4:	bf00      	nop
 80094c6:	e7fe      	b.n	80094c6 <prvDeleteTCB+0x5e>
	}
 80094c8:	bf00      	nop
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094d6:	4b0c      	ldr	r3, [pc, #48]	; (8009508 <prvResetNextTaskUnblockTime+0x38>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d104      	bne.n	80094ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80094e0:	4b0a      	ldr	r3, [pc, #40]	; (800950c <prvResetNextTaskUnblockTime+0x3c>)
 80094e2:	f04f 32ff 	mov.w	r2, #4294967295
 80094e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80094e8:	e008      	b.n	80094fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ea:	4b07      	ldr	r3, [pc, #28]	; (8009508 <prvResetNextTaskUnblockTime+0x38>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	4a04      	ldr	r2, [pc, #16]	; (800950c <prvResetNextTaskUnblockTime+0x3c>)
 80094fa:	6013      	str	r3, [r2, #0]
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	20001568 	.word	0x20001568
 800950c:	200015d0 	.word	0x200015d0

08009510 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009516:	4b0b      	ldr	r3, [pc, #44]	; (8009544 <xTaskGetSchedulerState+0x34>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d102      	bne.n	8009524 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800951e:	2301      	movs	r3, #1
 8009520:	607b      	str	r3, [r7, #4]
 8009522:	e008      	b.n	8009536 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009524:	4b08      	ldr	r3, [pc, #32]	; (8009548 <xTaskGetSchedulerState+0x38>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d102      	bne.n	8009532 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800952c:	2302      	movs	r3, #2
 800952e:	607b      	str	r3, [r7, #4]
 8009530:	e001      	b.n	8009536 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009532:	2300      	movs	r3, #0
 8009534:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009536:	687b      	ldr	r3, [r7, #4]
	}
 8009538:	4618      	mov	r0, r3
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr
 8009544:	200015bc 	.word	0x200015bc
 8009548:	200015d8 	.word	0x200015d8

0800954c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009558:	2300      	movs	r3, #0
 800955a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d056      	beq.n	8009610 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009562:	4b2e      	ldr	r3, [pc, #184]	; (800961c <xTaskPriorityDisinherit+0xd0>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	429a      	cmp	r2, r3
 800956a:	d00a      	beq.n	8009582 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	60fb      	str	r3, [r7, #12]
}
 800957e:	bf00      	nop
 8009580:	e7fe      	b.n	8009580 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10a      	bne.n	80095a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	60bb      	str	r3, [r7, #8]
}
 800959c:	bf00      	nop
 800959e:	e7fe      	b.n	800959e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a4:	1e5a      	subs	r2, r3, #1
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d02c      	beq.n	8009610 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d128      	bne.n	8009610 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	3304      	adds	r3, #4
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe faf8 	bl	8007bb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e0:	4b0f      	ldr	r3, [pc, #60]	; (8009620 <xTaskPriorityDisinherit+0xd4>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d903      	bls.n	80095f0 <xTaskPriorityDisinherit+0xa4>
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ec:	4a0c      	ldr	r2, [pc, #48]	; (8009620 <xTaskPriorityDisinherit+0xd4>)
 80095ee:	6013      	str	r3, [r2, #0]
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f4:	4613      	mov	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4a09      	ldr	r2, [pc, #36]	; (8009624 <xTaskPriorityDisinherit+0xd8>)
 80095fe:	441a      	add	r2, r3
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	3304      	adds	r3, #4
 8009604:	4619      	mov	r1, r3
 8009606:	4610      	mov	r0, r2
 8009608:	f7fe fa79 	bl	8007afe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800960c:	2301      	movs	r3, #1
 800960e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009610:	697b      	ldr	r3, [r7, #20]
	}
 8009612:	4618      	mov	r0, r3
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	200010dc 	.word	0x200010dc
 8009620:	200015b8 	.word	0x200015b8
 8009624:	200010e0 	.word	0x200010e0

08009628 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
 8009634:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009636:	f000 fec5 	bl	800a3c4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800963a:	4b29      	ldr	r3, [pc, #164]	; (80096e0 <xTaskNotifyWait+0xb8>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b02      	cmp	r3, #2
 8009646:	d01c      	beq.n	8009682 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009648:	4b25      	ldr	r3, [pc, #148]	; (80096e0 <xTaskNotifyWait+0xb8>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	43d2      	mvns	r2, r2
 8009654:	400a      	ands	r2, r1
 8009656:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800965a:	4b21      	ldr	r3, [pc, #132]	; (80096e0 <xTaskNotifyWait+0xb8>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00b      	beq.n	8009682 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800966a:	2101      	movs	r1, #1
 800966c:	6838      	ldr	r0, [r7, #0]
 800966e:	f000 f9dd 	bl	8009a2c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009672:	4b1c      	ldr	r3, [pc, #112]	; (80096e4 <xTaskNotifyWait+0xbc>)
 8009674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009678:	601a      	str	r2, [r3, #0]
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009682:	f000 fecf 	bl	800a424 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009686:	f000 fe9d 	bl	800a3c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d005      	beq.n	800969c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009690:	4b13      	ldr	r3, [pc, #76]	; (80096e0 <xTaskNotifyWait+0xb8>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800969c:	4b10      	ldr	r3, [pc, #64]	; (80096e0 <xTaskNotifyWait+0xb8>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d002      	beq.n	80096b0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80096aa:	2300      	movs	r3, #0
 80096ac:	617b      	str	r3, [r7, #20]
 80096ae:	e00a      	b.n	80096c6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80096b0:	4b0b      	ldr	r3, [pc, #44]	; (80096e0 <xTaskNotifyWait+0xb8>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	43d2      	mvns	r2, r2
 80096bc:	400a      	ands	r2, r1
 80096be:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 80096c2:	2301      	movs	r3, #1
 80096c4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096c6:	4b06      	ldr	r3, [pc, #24]	; (80096e0 <xTaskNotifyWait+0xb8>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80096d0:	f000 fea8 	bl	800a424 <vPortExitCritical>

		return xReturn;
 80096d4:	697b      	ldr	r3, [r7, #20]
	}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3718      	adds	r7, #24
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	200010dc 	.word	0x200010dc
 80096e4:	e000ed04 	.word	0xe000ed04

080096e8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b08a      	sub	sp, #40	; 0x28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	603b      	str	r3, [r7, #0]
 80096f4:	4613      	mov	r3, r2
 80096f6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80096f8:	2301      	movs	r3, #1
 80096fa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10a      	bne.n	8009718 <xTaskGenericNotify+0x30>
	__asm volatile
 8009702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	61bb      	str	r3, [r7, #24]
}
 8009714:	bf00      	nop
 8009716:	e7fe      	b.n	8009716 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800971c:	f000 fe52 	bl	800a3c4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d004      	beq.n	8009730 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009736:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	2202      	movs	r2, #2
 800973c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009740:	79fb      	ldrb	r3, [r7, #7]
 8009742:	2b04      	cmp	r3, #4
 8009744:	d82d      	bhi.n	80097a2 <xTaskGenericNotify+0xba>
 8009746:	a201      	add	r2, pc, #4	; (adr r2, 800974c <xTaskGenericNotify+0x64>)
 8009748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974c:	080097c5 	.word	0x080097c5
 8009750:	08009761 	.word	0x08009761
 8009754:	08009773 	.word	0x08009773
 8009758:	08009783 	.word	0x08009783
 800975c:	0800978d 	.word	0x0800978d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	431a      	orrs	r2, r3
 800976a:	6a3b      	ldr	r3, [r7, #32]
 800976c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009770:	e02b      	b.n	80097ca <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009772:	6a3b      	ldr	r3, [r7, #32]
 8009774:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009778:	1c5a      	adds	r2, r3, #1
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009780:	e023      	b.n	80097ca <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800978a:	e01e      	b.n	80097ca <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800978c:	7ffb      	ldrb	r3, [r7, #31]
 800978e:	2b02      	cmp	r3, #2
 8009790:	d004      	beq.n	800979c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009792:	6a3b      	ldr	r3, [r7, #32]
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800979a:	e016      	b.n	80097ca <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800979c:	2300      	movs	r3, #0
 800979e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80097a0:	e013      	b.n	80097ca <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80097a2:	6a3b      	ldr	r3, [r7, #32]
 80097a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80097a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ac:	d00c      	beq.n	80097c8 <xTaskGenericNotify+0xe0>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	617b      	str	r3, [r7, #20]
}
 80097c0:	bf00      	nop
 80097c2:	e7fe      	b.n	80097c2 <xTaskGenericNotify+0xda>
					break;
 80097c4:	bf00      	nop
 80097c6:	e000      	b.n	80097ca <xTaskGenericNotify+0xe2>

					break;
 80097c8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80097ca:	7ffb      	ldrb	r3, [r7, #31]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d13a      	bne.n	8009846 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097d0:	6a3b      	ldr	r3, [r7, #32]
 80097d2:	3304      	adds	r3, #4
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fe f9ef 	bl	8007bb8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097de:	4b1d      	ldr	r3, [pc, #116]	; (8009854 <xTaskGenericNotify+0x16c>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d903      	bls.n	80097ee <xTaskGenericNotify+0x106>
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ea:	4a1a      	ldr	r2, [pc, #104]	; (8009854 <xTaskGenericNotify+0x16c>)
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f2:	4613      	mov	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4a17      	ldr	r2, [pc, #92]	; (8009858 <xTaskGenericNotify+0x170>)
 80097fc:	441a      	add	r2, r3
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	3304      	adds	r3, #4
 8009802:	4619      	mov	r1, r3
 8009804:	4610      	mov	r0, r2
 8009806:	f7fe f97a 	bl	8007afe <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <xTaskGenericNotify+0x140>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	613b      	str	r3, [r7, #16]
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800982c:	4b0b      	ldr	r3, [pc, #44]	; (800985c <xTaskGenericNotify+0x174>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009832:	429a      	cmp	r2, r3
 8009834:	d907      	bls.n	8009846 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009836:	4b0a      	ldr	r3, [pc, #40]	; (8009860 <xTaskGenericNotify+0x178>)
 8009838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800983c:	601a      	str	r2, [r3, #0]
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009846:	f000 fded 	bl	800a424 <vPortExitCritical>

		return xReturn;
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800984c:	4618      	mov	r0, r3
 800984e:	3728      	adds	r7, #40	; 0x28
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	200015b8 	.word	0x200015b8
 8009858:	200010e0 	.word	0x200010e0
 800985c:	200010dc 	.word	0x200010dc
 8009860:	e000ed04 	.word	0xe000ed04

08009864 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009864:	b580      	push	{r7, lr}
 8009866:	b08e      	sub	sp, #56	; 0x38
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	4613      	mov	r3, r2
 8009872:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009874:	2301      	movs	r3, #1
 8009876:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10a      	bne.n	8009894 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009890:	bf00      	nop
 8009892:	e7fe      	b.n	8009892 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009894:	f000 fe78 	bl	800a588 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800989c:	f3ef 8211 	mrs	r2, BASEPRI
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	623a      	str	r2, [r7, #32]
 80098b2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80098b4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d004      	beq.n	80098c8 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80098be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80098c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ca:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80098ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80098d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d4:	2202      	movs	r2, #2
 80098d6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80098da:	79fb      	ldrb	r3, [r7, #7]
 80098dc:	2b04      	cmp	r3, #4
 80098de:	d82f      	bhi.n	8009940 <xTaskGenericNotifyFromISR+0xdc>
 80098e0:	a201      	add	r2, pc, #4	; (adr r2, 80098e8 <xTaskGenericNotifyFromISR+0x84>)
 80098e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e6:	bf00      	nop
 80098e8:	08009963 	.word	0x08009963
 80098ec:	080098fd 	.word	0x080098fd
 80098f0:	0800990f 	.word	0x0800990f
 80098f4:	0800991f 	.word	0x0800991f
 80098f8:	08009929 	.word	0x08009929
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80098fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	431a      	orrs	r2, r3
 8009906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009908:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800990c:	e02c      	b.n	8009968 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009914:	1c5a      	adds	r2, r3, #1
 8009916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009918:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800991c:	e024      	b.n	8009968 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009926:	e01f      	b.n	8009968 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009928:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800992c:	2b02      	cmp	r3, #2
 800992e:	d004      	beq.n	800993a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009938:	e016      	b.n	8009968 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800993a:	2300      	movs	r3, #0
 800993c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800993e:	e013      	b.n	8009968 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009942:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994a:	d00c      	beq.n	8009966 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800994c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	61bb      	str	r3, [r7, #24]
}
 800995e:	bf00      	nop
 8009960:	e7fe      	b.n	8009960 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009962:	bf00      	nop
 8009964:	e000      	b.n	8009968 <xTaskGenericNotifyFromISR+0x104>
					break;
 8009966:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009968:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800996c:	2b01      	cmp	r3, #1
 800996e:	d146      	bne.n	80099fe <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00a      	beq.n	800998e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	617b      	str	r3, [r7, #20]
}
 800998a:	bf00      	nop
 800998c:	e7fe      	b.n	800998c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800998e:	4b21      	ldr	r3, [pc, #132]	; (8009a14 <xTaskGenericNotifyFromISR+0x1b0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d11d      	bne.n	80099d2 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	3304      	adds	r3, #4
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe f90c 	bl	8007bb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a4:	4b1c      	ldr	r3, [pc, #112]	; (8009a18 <xTaskGenericNotifyFromISR+0x1b4>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d903      	bls.n	80099b4 <xTaskGenericNotifyFromISR+0x150>
 80099ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b0:	4a19      	ldr	r2, [pc, #100]	; (8009a18 <xTaskGenericNotifyFromISR+0x1b4>)
 80099b2:	6013      	str	r3, [r2, #0]
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b8:	4613      	mov	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4413      	add	r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4a16      	ldr	r2, [pc, #88]	; (8009a1c <xTaskGenericNotifyFromISR+0x1b8>)
 80099c2:	441a      	add	r2, r3
 80099c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c6:	3304      	adds	r3, #4
 80099c8:	4619      	mov	r1, r3
 80099ca:	4610      	mov	r0, r2
 80099cc:	f7fe f897 	bl	8007afe <vListInsertEnd>
 80099d0:	e005      	b.n	80099de <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80099d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d4:	3318      	adds	r3, #24
 80099d6:	4619      	mov	r1, r3
 80099d8:	4811      	ldr	r0, [pc, #68]	; (8009a20 <xTaskGenericNotifyFromISR+0x1bc>)
 80099da:	f7fe f890 	bl	8007afe <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80099de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e2:	4b10      	ldr	r3, [pc, #64]	; (8009a24 <xTaskGenericNotifyFromISR+0x1c0>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d908      	bls.n	80099fe <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80099ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d002      	beq.n	80099f8 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80099f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099f4:	2201      	movs	r2, #1
 80099f6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80099f8:	4b0b      	ldr	r3, [pc, #44]	; (8009a28 <xTaskGenericNotifyFromISR+0x1c4>)
 80099fa:	2201      	movs	r2, #1
 80099fc:	601a      	str	r2, [r3, #0]
 80099fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	f383 8811 	msr	BASEPRI, r3
}
 8009a08:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3738      	adds	r7, #56	; 0x38
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	200015d8 	.word	0x200015d8
 8009a18:	200015b8 	.word	0x200015b8
 8009a1c:	200010e0 	.word	0x200010e0
 8009a20:	20001570 	.word	0x20001570
 8009a24:	200010dc 	.word	0x200010dc
 8009a28:	200015c4 	.word	0x200015c4

08009a2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a36:	4b21      	ldr	r3, [pc, #132]	; (8009abc <prvAddCurrentTaskToDelayedList+0x90>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a3c:	4b20      	ldr	r3, [pc, #128]	; (8009ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3304      	adds	r3, #4
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fe f8b8 	bl	8007bb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4e:	d10a      	bne.n	8009a66 <prvAddCurrentTaskToDelayedList+0x3a>
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d007      	beq.n	8009a66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a56:	4b1a      	ldr	r3, [pc, #104]	; (8009ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3304      	adds	r3, #4
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	4819      	ldr	r0, [pc, #100]	; (8009ac4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009a60:	f7fe f84d 	bl	8007afe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a64:	e026      	b.n	8009ab4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a6e:	4b14      	ldr	r3, [pc, #80]	; (8009ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d209      	bcs.n	8009a92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a7e:	4b12      	ldr	r3, [pc, #72]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	4b0f      	ldr	r3, [pc, #60]	; (8009ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3304      	adds	r3, #4
 8009a88:	4619      	mov	r1, r3
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	f7fe f85b 	bl	8007b46 <vListInsert>
}
 8009a90:	e010      	b.n	8009ab4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a92:	4b0e      	ldr	r3, [pc, #56]	; (8009acc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	4b0a      	ldr	r3, [pc, #40]	; (8009ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	4610      	mov	r0, r2
 8009aa0:	f7fe f851 	bl	8007b46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009aa4:	4b0a      	ldr	r3, [pc, #40]	; (8009ad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d202      	bcs.n	8009ab4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009aae:	4a08      	ldr	r2, [pc, #32]	; (8009ad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	6013      	str	r3, [r2, #0]
}
 8009ab4:	bf00      	nop
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	200015b4 	.word	0x200015b4
 8009ac0:	200010dc 	.word	0x200010dc
 8009ac4:	2000159c 	.word	0x2000159c
 8009ac8:	2000156c 	.word	0x2000156c
 8009acc:	20001568 	.word	0x20001568
 8009ad0:	200015d0 	.word	0x200015d0

08009ad4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b08a      	sub	sp, #40	; 0x28
 8009ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ada:	2300      	movs	r3, #0
 8009adc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009ade:	f000 fb07 	bl	800a0f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009ae2:	4b1c      	ldr	r3, [pc, #112]	; (8009b54 <xTimerCreateTimerTask+0x80>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d021      	beq.n	8009b2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009aea:	2300      	movs	r3, #0
 8009aec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009af2:	1d3a      	adds	r2, r7, #4
 8009af4:	f107 0108 	add.w	r1, r7, #8
 8009af8:	f107 030c 	add.w	r3, r7, #12
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fd ffb7 	bl	8007a70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b02:	6879      	ldr	r1, [r7, #4]
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	9202      	str	r2, [sp, #8]
 8009b0a:	9301      	str	r3, [sp, #4]
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	2300      	movs	r3, #0
 8009b12:	460a      	mov	r2, r1
 8009b14:	4910      	ldr	r1, [pc, #64]	; (8009b58 <xTimerCreateTimerTask+0x84>)
 8009b16:	4811      	ldr	r0, [pc, #68]	; (8009b5c <xTimerCreateTimerTask+0x88>)
 8009b18:	f7fe fe56 	bl	80087c8 <xTaskCreateStatic>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	4a10      	ldr	r2, [pc, #64]	; (8009b60 <xTimerCreateTimerTask+0x8c>)
 8009b20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b22:	4b0f      	ldr	r3, [pc, #60]	; (8009b60 <xTimerCreateTimerTask+0x8c>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10a      	bne.n	8009b4a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b38:	f383 8811 	msr	BASEPRI, r3
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	613b      	str	r3, [r7, #16]
}
 8009b46:	bf00      	nop
 8009b48:	e7fe      	b.n	8009b48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b4a:	697b      	ldr	r3, [r7, #20]
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3718      	adds	r7, #24
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	2000160c 	.word	0x2000160c
 8009b58:	0800bd28 	.word	0x0800bd28
 8009b5c:	08009c99 	.word	0x08009c99
 8009b60:	20001610 	.word	0x20001610

08009b64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b08a      	sub	sp, #40	; 0x28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
 8009b70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b72:	2300      	movs	r3, #0
 8009b74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10a      	bne.n	8009b92 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	623b      	str	r3, [r7, #32]
}
 8009b8e:	bf00      	nop
 8009b90:	e7fe      	b.n	8009b90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b92:	4b1a      	ldr	r3, [pc, #104]	; (8009bfc <xTimerGenericCommand+0x98>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d02a      	beq.n	8009bf0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	2b05      	cmp	r3, #5
 8009baa:	dc18      	bgt.n	8009bde <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009bac:	f7ff fcb0 	bl	8009510 <xTaskGetSchedulerState>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d109      	bne.n	8009bca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009bb6:	4b11      	ldr	r3, [pc, #68]	; (8009bfc <xTimerGenericCommand+0x98>)
 8009bb8:	6818      	ldr	r0, [r3, #0]
 8009bba:	f107 0110 	add.w	r1, r7, #16
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bc2:	f7fe f9cb 	bl	8007f5c <xQueueGenericSend>
 8009bc6:	6278      	str	r0, [r7, #36]	; 0x24
 8009bc8:	e012      	b.n	8009bf0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009bca:	4b0c      	ldr	r3, [pc, #48]	; (8009bfc <xTimerGenericCommand+0x98>)
 8009bcc:	6818      	ldr	r0, [r3, #0]
 8009bce:	f107 0110 	add.w	r1, r7, #16
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f7fe f9c1 	bl	8007f5c <xQueueGenericSend>
 8009bda:	6278      	str	r0, [r7, #36]	; 0x24
 8009bdc:	e008      	b.n	8009bf0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009bde:	4b07      	ldr	r3, [pc, #28]	; (8009bfc <xTimerGenericCommand+0x98>)
 8009be0:	6818      	ldr	r0, [r3, #0]
 8009be2:	f107 0110 	add.w	r1, r7, #16
 8009be6:	2300      	movs	r3, #0
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	f7fe fab5 	bl	8008158 <xQueueGenericSendFromISR>
 8009bee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3728      	adds	r7, #40	; 0x28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	2000160c 	.word	0x2000160c

08009c00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b088      	sub	sp, #32
 8009c04:	af02      	add	r7, sp, #8
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c0a:	4b22      	ldr	r3, [pc, #136]	; (8009c94 <prvProcessExpiredTimer+0x94>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	3304      	adds	r3, #4
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fd ffcd 	bl	8007bb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c24:	f003 0304 	and.w	r3, r3, #4
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d022      	beq.n	8009c72 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	699a      	ldr	r2, [r3, #24]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	18d1      	adds	r1, r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	6978      	ldr	r0, [r7, #20]
 8009c3a:	f000 f8d1 	bl	8009de0 <prvInsertTimerInActiveList>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d01f      	beq.n	8009c84 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c44:	2300      	movs	r3, #0
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	2300      	movs	r3, #0
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	6978      	ldr	r0, [r7, #20]
 8009c50:	f7ff ff88 	bl	8009b64 <xTimerGenericCommand>
 8009c54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d113      	bne.n	8009c84 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	60fb      	str	r3, [r7, #12]
}
 8009c6e:	bf00      	nop
 8009c70:	e7fe      	b.n	8009c70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c78:	f023 0301 	bic.w	r3, r3, #1
 8009c7c:	b2da      	uxtb	r2, r3
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	6a1b      	ldr	r3, [r3, #32]
 8009c88:	6978      	ldr	r0, [r7, #20]
 8009c8a:	4798      	blx	r3
}
 8009c8c:	bf00      	nop
 8009c8e:	3718      	adds	r7, #24
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	20001604 	.word	0x20001604

08009c98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ca0:	f107 0308 	add.w	r3, r7, #8
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f000 f857 	bl	8009d58 <prvGetNextExpireTime>
 8009caa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f000 f803 	bl	8009cbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009cb6:	f000 f8d5 	bl	8009e64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cba:	e7f1      	b.n	8009ca0 <prvTimerTask+0x8>

08009cbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009cc6:	f7ff f825 	bl	8008d14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cca:	f107 0308 	add.w	r3, r7, #8
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 f866 	bl	8009da0 <prvSampleTimeNow>
 8009cd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d130      	bne.n	8009d3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10a      	bne.n	8009cf8 <prvProcessTimerOrBlockTask+0x3c>
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d806      	bhi.n	8009cf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009cea:	f7ff f821 	bl	8008d30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009cee:	68f9      	ldr	r1, [r7, #12]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7ff ff85 	bl	8009c00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009cf6:	e024      	b.n	8009d42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d008      	beq.n	8009d10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009cfe:	4b13      	ldr	r3, [pc, #76]	; (8009d4c <prvProcessTimerOrBlockTask+0x90>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d101      	bne.n	8009d0c <prvProcessTimerOrBlockTask+0x50>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e000      	b.n	8009d0e <prvProcessTimerOrBlockTask+0x52>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d10:	4b0f      	ldr	r3, [pc, #60]	; (8009d50 <prvProcessTimerOrBlockTask+0x94>)
 8009d12:	6818      	ldr	r0, [r3, #0]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	1ad3      	subs	r3, r2, r3
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	f7fe fd1f 	bl	8008760 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d22:	f7ff f805 	bl	8008d30 <xTaskResumeAll>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10a      	bne.n	8009d42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d2c:	4b09      	ldr	r3, [pc, #36]	; (8009d54 <prvProcessTimerOrBlockTask+0x98>)
 8009d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	f3bf 8f6f 	isb	sy
}
 8009d3c:	e001      	b.n	8009d42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d3e:	f7fe fff7 	bl	8008d30 <xTaskResumeAll>
}
 8009d42:	bf00      	nop
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20001608 	.word	0x20001608
 8009d50:	2000160c 	.word	0x2000160c
 8009d54:	e000ed04 	.word	0xe000ed04

08009d58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d60:	4b0e      	ldr	r3, [pc, #56]	; (8009d9c <prvGetNextExpireTime+0x44>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d101      	bne.n	8009d6e <prvGetNextExpireTime+0x16>
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	e000      	b.n	8009d70 <prvGetNextExpireTime+0x18>
 8009d6e:	2200      	movs	r2, #0
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d105      	bne.n	8009d88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d7c:	4b07      	ldr	r3, [pc, #28]	; (8009d9c <prvGetNextExpireTime+0x44>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	60fb      	str	r3, [r7, #12]
 8009d86:	e001      	b.n	8009d8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	20001604 	.word	0x20001604

08009da0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009da8:	f7ff f860 	bl	8008e6c <xTaskGetTickCount>
 8009dac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009dae:	4b0b      	ldr	r3, [pc, #44]	; (8009ddc <prvSampleTimeNow+0x3c>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d205      	bcs.n	8009dc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009db8:	f000 f936 	bl	800a028 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	601a      	str	r2, [r3, #0]
 8009dc2:	e002      	b.n	8009dca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009dca:	4a04      	ldr	r2, [pc, #16]	; (8009ddc <prvSampleTimeNow+0x3c>)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	20001614 	.word	0x20001614

08009de0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
 8009dec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009dee:	2300      	movs	r3, #0
 8009df0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d812      	bhi.n	8009e2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	1ad2      	subs	r2, r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	699b      	ldr	r3, [r3, #24]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d302      	bcc.n	8009e1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e14:	2301      	movs	r3, #1
 8009e16:	617b      	str	r3, [r7, #20]
 8009e18:	e01b      	b.n	8009e52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e1a:	4b10      	ldr	r3, [pc, #64]	; (8009e5c <prvInsertTimerInActiveList+0x7c>)
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	3304      	adds	r3, #4
 8009e22:	4619      	mov	r1, r3
 8009e24:	4610      	mov	r0, r2
 8009e26:	f7fd fe8e 	bl	8007b46 <vListInsert>
 8009e2a:	e012      	b.n	8009e52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d206      	bcs.n	8009e42 <prvInsertTimerInActiveList+0x62>
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d302      	bcc.n	8009e42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	617b      	str	r3, [r7, #20]
 8009e40:	e007      	b.n	8009e52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e42:	4b07      	ldr	r3, [pc, #28]	; (8009e60 <prvInsertTimerInActiveList+0x80>)
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3304      	adds	r3, #4
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	4610      	mov	r0, r2
 8009e4e:	f7fd fe7a 	bl	8007b46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e52:	697b      	ldr	r3, [r7, #20]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3718      	adds	r7, #24
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	20001608 	.word	0x20001608
 8009e60:	20001604 	.word	0x20001604

08009e64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08e      	sub	sp, #56	; 0x38
 8009e68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e6a:	e0ca      	b.n	800a002 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	da18      	bge.n	8009ea4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e72:	1d3b      	adds	r3, r7, #4
 8009e74:	3304      	adds	r3, #4
 8009e76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10a      	bne.n	8009e94 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	61fb      	str	r3, [r7, #28]
}
 8009e90:	bf00      	nop
 8009e92:	e7fe      	b.n	8009e92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e9a:	6850      	ldr	r0, [r2, #4]
 8009e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e9e:	6892      	ldr	r2, [r2, #8]
 8009ea0:	4611      	mov	r1, r2
 8009ea2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f2c0 80aa 	blt.w	800a000 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d004      	beq.n	8009ec2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eba:	3304      	adds	r3, #4
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fd fe7b 	bl	8007bb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ec2:	463b      	mov	r3, r7
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7ff ff6b 	bl	8009da0 <prvSampleTimeNow>
 8009eca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b09      	cmp	r3, #9
 8009ed0:	f200 8097 	bhi.w	800a002 <prvProcessReceivedCommands+0x19e>
 8009ed4:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <prvProcessReceivedCommands+0x78>)
 8009ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eda:	bf00      	nop
 8009edc:	08009f05 	.word	0x08009f05
 8009ee0:	08009f05 	.word	0x08009f05
 8009ee4:	08009f05 	.word	0x08009f05
 8009ee8:	08009f79 	.word	0x08009f79
 8009eec:	08009f8d 	.word	0x08009f8d
 8009ef0:	08009fd7 	.word	0x08009fd7
 8009ef4:	08009f05 	.word	0x08009f05
 8009ef8:	08009f05 	.word	0x08009f05
 8009efc:	08009f79 	.word	0x08009f79
 8009f00:	08009f8d 	.word	0x08009f8d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f0a:	f043 0301 	orr.w	r3, r3, #1
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	18d1      	adds	r1, r2, r3
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f24:	f7ff ff5c 	bl	8009de0 <prvInsertTimerInActiveList>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d069      	beq.n	800a002 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f3c:	f003 0304 	and.w	r3, r3, #4
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d05e      	beq.n	800a002 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	441a      	add	r2, r3
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	9300      	str	r3, [sp, #0]
 8009f50:	2300      	movs	r3, #0
 8009f52:	2100      	movs	r1, #0
 8009f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f56:	f7ff fe05 	bl	8009b64 <xTimerGenericCommand>
 8009f5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f5c:	6a3b      	ldr	r3, [r7, #32]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d14f      	bne.n	800a002 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	61bb      	str	r3, [r7, #24]
}
 8009f74:	bf00      	nop
 8009f76:	e7fe      	b.n	8009f76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f7e:	f023 0301 	bic.w	r3, r3, #1
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009f8a:	e03a      	b.n	800a002 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f92:	f043 0301 	orr.w	r3, r3, #1
 8009f96:	b2da      	uxtb	r2, r3
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10a      	bne.n	8009fc2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb0:	f383 8811 	msr	BASEPRI, r3
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	617b      	str	r3, [r7, #20]
}
 8009fbe:	bf00      	nop
 8009fc0:	e7fe      	b.n	8009fc0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc4:	699a      	ldr	r2, [r3, #24]
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc8:	18d1      	adds	r1, r2, r3
 8009fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fd0:	f7ff ff06 	bl	8009de0 <prvInsertTimerInActiveList>
					break;
 8009fd4:	e015      	b.n	800a002 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fdc:	f003 0302 	and.w	r3, r3, #2
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d103      	bne.n	8009fec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fe6:	f000 fbdb 	bl	800a7a0 <vPortFree>
 8009fea:	e00a      	b.n	800a002 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ff2:	f023 0301 	bic.w	r3, r3, #1
 8009ff6:	b2da      	uxtb	r2, r3
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009ffe:	e000      	b.n	800a002 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a000:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a002:	4b08      	ldr	r3, [pc, #32]	; (800a024 <prvProcessReceivedCommands+0x1c0>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	1d39      	adds	r1, r7, #4
 800a008:	2200      	movs	r2, #0
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe f940 	bl	8008290 <xQueueReceive>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	f47f af2a 	bne.w	8009e6c <prvProcessReceivedCommands+0x8>
	}
}
 800a018:	bf00      	nop
 800a01a:	bf00      	nop
 800a01c:	3730      	adds	r7, #48	; 0x30
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	2000160c 	.word	0x2000160c

0800a028 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b088      	sub	sp, #32
 800a02c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a02e:	e048      	b.n	800a0c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a030:	4b2d      	ldr	r3, [pc, #180]	; (800a0e8 <prvSwitchTimerLists+0xc0>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a03a:	4b2b      	ldr	r3, [pc, #172]	; (800a0e8 <prvSwitchTimerLists+0xc0>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	3304      	adds	r3, #4
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fd fdb5 	bl	8007bb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a05c:	f003 0304 	and.w	r3, r3, #4
 800a060:	2b00      	cmp	r3, #0
 800a062:	d02e      	beq.n	800a0c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	693a      	ldr	r2, [r7, #16]
 800a06a:	4413      	add	r3, r2
 800a06c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	429a      	cmp	r2, r3
 800a074:	d90e      	bls.n	800a094 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a082:	4b19      	ldr	r3, [pc, #100]	; (800a0e8 <prvSwitchTimerLists+0xc0>)
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	3304      	adds	r3, #4
 800a08a:	4619      	mov	r1, r3
 800a08c:	4610      	mov	r0, r2
 800a08e:	f7fd fd5a 	bl	8007b46 <vListInsert>
 800a092:	e016      	b.n	800a0c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a094:	2300      	movs	r3, #0
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	2300      	movs	r3, #0
 800a09a:	693a      	ldr	r2, [r7, #16]
 800a09c:	2100      	movs	r1, #0
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f7ff fd60 	bl	8009b64 <xTimerGenericCommand>
 800a0a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10a      	bne.n	800a0c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	603b      	str	r3, [r7, #0]
}
 800a0be:	bf00      	nop
 800a0c0:	e7fe      	b.n	800a0c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0c2:	4b09      	ldr	r3, [pc, #36]	; (800a0e8 <prvSwitchTimerLists+0xc0>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1b1      	bne.n	800a030 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a0cc:	4b06      	ldr	r3, [pc, #24]	; (800a0e8 <prvSwitchTimerLists+0xc0>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a0d2:	4b06      	ldr	r3, [pc, #24]	; (800a0ec <prvSwitchTimerLists+0xc4>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a04      	ldr	r2, [pc, #16]	; (800a0e8 <prvSwitchTimerLists+0xc0>)
 800a0d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a0da:	4a04      	ldr	r2, [pc, #16]	; (800a0ec <prvSwitchTimerLists+0xc4>)
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	6013      	str	r3, [r2, #0]
}
 800a0e0:	bf00      	nop
 800a0e2:	3718      	adds	r7, #24
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	20001604 	.word	0x20001604
 800a0ec:	20001608 	.word	0x20001608

0800a0f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a0f6:	f000 f965 	bl	800a3c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a0fa:	4b15      	ldr	r3, [pc, #84]	; (800a150 <prvCheckForValidListAndQueue+0x60>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d120      	bne.n	800a144 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a102:	4814      	ldr	r0, [pc, #80]	; (800a154 <prvCheckForValidListAndQueue+0x64>)
 800a104:	f7fd fcce 	bl	8007aa4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a108:	4813      	ldr	r0, [pc, #76]	; (800a158 <prvCheckForValidListAndQueue+0x68>)
 800a10a:	f7fd fccb 	bl	8007aa4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a10e:	4b13      	ldr	r3, [pc, #76]	; (800a15c <prvCheckForValidListAndQueue+0x6c>)
 800a110:	4a10      	ldr	r2, [pc, #64]	; (800a154 <prvCheckForValidListAndQueue+0x64>)
 800a112:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a114:	4b12      	ldr	r3, [pc, #72]	; (800a160 <prvCheckForValidListAndQueue+0x70>)
 800a116:	4a10      	ldr	r2, [pc, #64]	; (800a158 <prvCheckForValidListAndQueue+0x68>)
 800a118:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a11a:	2300      	movs	r3, #0
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	4b11      	ldr	r3, [pc, #68]	; (800a164 <prvCheckForValidListAndQueue+0x74>)
 800a120:	4a11      	ldr	r2, [pc, #68]	; (800a168 <prvCheckForValidListAndQueue+0x78>)
 800a122:	2110      	movs	r1, #16
 800a124:	200a      	movs	r0, #10
 800a126:	f7fd fdd9 	bl	8007cdc <xQueueGenericCreateStatic>
 800a12a:	4603      	mov	r3, r0
 800a12c:	4a08      	ldr	r2, [pc, #32]	; (800a150 <prvCheckForValidListAndQueue+0x60>)
 800a12e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a130:	4b07      	ldr	r3, [pc, #28]	; (800a150 <prvCheckForValidListAndQueue+0x60>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d005      	beq.n	800a144 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a138:	4b05      	ldr	r3, [pc, #20]	; (800a150 <prvCheckForValidListAndQueue+0x60>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	490b      	ldr	r1, [pc, #44]	; (800a16c <prvCheckForValidListAndQueue+0x7c>)
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fe faba 	bl	80086b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a144:	f000 f96e 	bl	800a424 <vPortExitCritical>
}
 800a148:	bf00      	nop
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	2000160c 	.word	0x2000160c
 800a154:	200015dc 	.word	0x200015dc
 800a158:	200015f0 	.word	0x200015f0
 800a15c:	20001604 	.word	0x20001604
 800a160:	20001608 	.word	0x20001608
 800a164:	200016b8 	.word	0x200016b8
 800a168:	20001618 	.word	0x20001618
 800a16c:	0800bd30 	.word	0x0800bd30

0800a170 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	3b04      	subs	r3, #4
 800a180:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	3b04      	subs	r3, #4
 800a18e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	f023 0201 	bic.w	r2, r3, #1
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	3b04      	subs	r3, #4
 800a19e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a1a0:	4a0c      	ldr	r2, [pc, #48]	; (800a1d4 <pxPortInitialiseStack+0x64>)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	3b14      	subs	r3, #20
 800a1aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	3b04      	subs	r3, #4
 800a1b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f06f 0202 	mvn.w	r2, #2
 800a1be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	3b20      	subs	r3, #32
 800a1c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	0800a1d9 	.word	0x0800a1d9

0800a1d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a1e2:	4b12      	ldr	r3, [pc, #72]	; (800a22c <prvTaskExitError+0x54>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ea:	d00a      	beq.n	800a202 <prvTaskExitError+0x2a>
	__asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f0:	f383 8811 	msr	BASEPRI, r3
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	60fb      	str	r3, [r7, #12]
}
 800a1fe:	bf00      	nop
 800a200:	e7fe      	b.n	800a200 <prvTaskExitError+0x28>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	60bb      	str	r3, [r7, #8]
}
 800a214:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a216:	bf00      	nop
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d0fc      	beq.n	800a218 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a21e:	bf00      	nop
 800a220:	bf00      	nop
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	2000003c 	.word	0x2000003c

0800a230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a230:	4b07      	ldr	r3, [pc, #28]	; (800a250 <pxCurrentTCBConst2>)
 800a232:	6819      	ldr	r1, [r3, #0]
 800a234:	6808      	ldr	r0, [r1, #0]
 800a236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23a:	f380 8809 	msr	PSP, r0
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f04f 0000 	mov.w	r0, #0
 800a246:	f380 8811 	msr	BASEPRI, r0
 800a24a:	4770      	bx	lr
 800a24c:	f3af 8000 	nop.w

0800a250 <pxCurrentTCBConst2>:
 800a250:	200010dc 	.word	0x200010dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a254:	bf00      	nop
 800a256:	bf00      	nop

0800a258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a258:	4808      	ldr	r0, [pc, #32]	; (800a27c <prvPortStartFirstTask+0x24>)
 800a25a:	6800      	ldr	r0, [r0, #0]
 800a25c:	6800      	ldr	r0, [r0, #0]
 800a25e:	f380 8808 	msr	MSP, r0
 800a262:	f04f 0000 	mov.w	r0, #0
 800a266:	f380 8814 	msr	CONTROL, r0
 800a26a:	b662      	cpsie	i
 800a26c:	b661      	cpsie	f
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	df00      	svc	0
 800a278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a27a:	bf00      	nop
 800a27c:	e000ed08 	.word	0xe000ed08

0800a280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a286:	4b46      	ldr	r3, [pc, #280]	; (800a3a0 <xPortStartScheduler+0x120>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a46      	ldr	r2, [pc, #280]	; (800a3a4 <xPortStartScheduler+0x124>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d10a      	bne.n	800a2a6 <xPortStartScheduler+0x26>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	613b      	str	r3, [r7, #16]
}
 800a2a2:	bf00      	nop
 800a2a4:	e7fe      	b.n	800a2a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a2a6:	4b3e      	ldr	r3, [pc, #248]	; (800a3a0 <xPortStartScheduler+0x120>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a3f      	ldr	r2, [pc, #252]	; (800a3a8 <xPortStartScheduler+0x128>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d10a      	bne.n	800a2c6 <xPortStartScheduler+0x46>
	__asm volatile
 800a2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	60fb      	str	r3, [r7, #12]
}
 800a2c2:	bf00      	nop
 800a2c4:	e7fe      	b.n	800a2c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a2c6:	4b39      	ldr	r3, [pc, #228]	; (800a3ac <xPortStartScheduler+0x12c>)
 800a2c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	22ff      	movs	r2, #255	; 0xff
 800a2d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a2e0:	78fb      	ldrb	r3, [r7, #3]
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a2e8:	b2da      	uxtb	r2, r3
 800a2ea:	4b31      	ldr	r3, [pc, #196]	; (800a3b0 <xPortStartScheduler+0x130>)
 800a2ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a2ee:	4b31      	ldr	r3, [pc, #196]	; (800a3b4 <xPortStartScheduler+0x134>)
 800a2f0:	2207      	movs	r2, #7
 800a2f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2f4:	e009      	b.n	800a30a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a2f6:	4b2f      	ldr	r3, [pc, #188]	; (800a3b4 <xPortStartScheduler+0x134>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	4a2d      	ldr	r2, [pc, #180]	; (800a3b4 <xPortStartScheduler+0x134>)
 800a2fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a300:	78fb      	ldrb	r3, [r7, #3]
 800a302:	b2db      	uxtb	r3, r3
 800a304:	005b      	lsls	r3, r3, #1
 800a306:	b2db      	uxtb	r3, r3
 800a308:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a30a:	78fb      	ldrb	r3, [r7, #3]
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a312:	2b80      	cmp	r3, #128	; 0x80
 800a314:	d0ef      	beq.n	800a2f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a316:	4b27      	ldr	r3, [pc, #156]	; (800a3b4 <xPortStartScheduler+0x134>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f1c3 0307 	rsb	r3, r3, #7
 800a31e:	2b04      	cmp	r3, #4
 800a320:	d00a      	beq.n	800a338 <xPortStartScheduler+0xb8>
	__asm volatile
 800a322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a326:	f383 8811 	msr	BASEPRI, r3
 800a32a:	f3bf 8f6f 	isb	sy
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	60bb      	str	r3, [r7, #8]
}
 800a334:	bf00      	nop
 800a336:	e7fe      	b.n	800a336 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a338:	4b1e      	ldr	r3, [pc, #120]	; (800a3b4 <xPortStartScheduler+0x134>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	021b      	lsls	r3, r3, #8
 800a33e:	4a1d      	ldr	r2, [pc, #116]	; (800a3b4 <xPortStartScheduler+0x134>)
 800a340:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a342:	4b1c      	ldr	r3, [pc, #112]	; (800a3b4 <xPortStartScheduler+0x134>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a34a:	4a1a      	ldr	r2, [pc, #104]	; (800a3b4 <xPortStartScheduler+0x134>)
 800a34c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	b2da      	uxtb	r2, r3
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a356:	4b18      	ldr	r3, [pc, #96]	; (800a3b8 <xPortStartScheduler+0x138>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a17      	ldr	r2, [pc, #92]	; (800a3b8 <xPortStartScheduler+0x138>)
 800a35c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a360:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a362:	4b15      	ldr	r3, [pc, #84]	; (800a3b8 <xPortStartScheduler+0x138>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a14      	ldr	r2, [pc, #80]	; (800a3b8 <xPortStartScheduler+0x138>)
 800a368:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a36c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a36e:	f000 f8dd 	bl	800a52c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a372:	4b12      	ldr	r3, [pc, #72]	; (800a3bc <xPortStartScheduler+0x13c>)
 800a374:	2200      	movs	r2, #0
 800a376:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a378:	f000 f8fc 	bl	800a574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a37c:	4b10      	ldr	r3, [pc, #64]	; (800a3c0 <xPortStartScheduler+0x140>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a0f      	ldr	r2, [pc, #60]	; (800a3c0 <xPortStartScheduler+0x140>)
 800a382:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a386:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a388:	f7ff ff66 	bl	800a258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a38c:	f7fe fe4a 	bl	8009024 <vTaskSwitchContext>
	prvTaskExitError();
 800a390:	f7ff ff22 	bl	800a1d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3718      	adds	r7, #24
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	e000ed00 	.word	0xe000ed00
 800a3a4:	410fc271 	.word	0x410fc271
 800a3a8:	410fc270 	.word	0x410fc270
 800a3ac:	e000e400 	.word	0xe000e400
 800a3b0:	20001708 	.word	0x20001708
 800a3b4:	2000170c 	.word	0x2000170c
 800a3b8:	e000ed20 	.word	0xe000ed20
 800a3bc:	2000003c 	.word	0x2000003c
 800a3c0:	e000ef34 	.word	0xe000ef34

0800a3c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
	__asm volatile
 800a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	607b      	str	r3, [r7, #4]
}
 800a3dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a3de:	4b0f      	ldr	r3, [pc, #60]	; (800a41c <vPortEnterCritical+0x58>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	4a0d      	ldr	r2, [pc, #52]	; (800a41c <vPortEnterCritical+0x58>)
 800a3e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a3e8:	4b0c      	ldr	r3, [pc, #48]	; (800a41c <vPortEnterCritical+0x58>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d10f      	bne.n	800a410 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a3f0:	4b0b      	ldr	r3, [pc, #44]	; (800a420 <vPortEnterCritical+0x5c>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00a      	beq.n	800a410 <vPortEnterCritical+0x4c>
	__asm volatile
 800a3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fe:	f383 8811 	msr	BASEPRI, r3
 800a402:	f3bf 8f6f 	isb	sy
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	603b      	str	r3, [r7, #0]
}
 800a40c:	bf00      	nop
 800a40e:	e7fe      	b.n	800a40e <vPortEnterCritical+0x4a>
	}
}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	2000003c 	.word	0x2000003c
 800a420:	e000ed04 	.word	0xe000ed04

0800a424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a42a:	4b12      	ldr	r3, [pc, #72]	; (800a474 <vPortExitCritical+0x50>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10a      	bne.n	800a448 <vPortExitCritical+0x24>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	607b      	str	r3, [r7, #4]
}
 800a444:	bf00      	nop
 800a446:	e7fe      	b.n	800a446 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a448:	4b0a      	ldr	r3, [pc, #40]	; (800a474 <vPortExitCritical+0x50>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3b01      	subs	r3, #1
 800a44e:	4a09      	ldr	r2, [pc, #36]	; (800a474 <vPortExitCritical+0x50>)
 800a450:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a452:	4b08      	ldr	r3, [pc, #32]	; (800a474 <vPortExitCritical+0x50>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d105      	bne.n	800a466 <vPortExitCritical+0x42>
 800a45a:	2300      	movs	r3, #0
 800a45c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	f383 8811 	msr	BASEPRI, r3
}
 800a464:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a466:	bf00      	nop
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	2000003c 	.word	0x2000003c
	...

0800a480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a480:	f3ef 8009 	mrs	r0, PSP
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	4b15      	ldr	r3, [pc, #84]	; (800a4e0 <pxCurrentTCBConst>)
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	f01e 0f10 	tst.w	lr, #16
 800a490:	bf08      	it	eq
 800a492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a49a:	6010      	str	r0, [r2, #0]
 800a49c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a4a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a4a4:	f380 8811 	msr	BASEPRI, r0
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	f7fe fdb8 	bl	8009024 <vTaskSwitchContext>
 800a4b4:	f04f 0000 	mov.w	r0, #0
 800a4b8:	f380 8811 	msr	BASEPRI, r0
 800a4bc:	bc09      	pop	{r0, r3}
 800a4be:	6819      	ldr	r1, [r3, #0]
 800a4c0:	6808      	ldr	r0, [r1, #0]
 800a4c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c6:	f01e 0f10 	tst.w	lr, #16
 800a4ca:	bf08      	it	eq
 800a4cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a4d0:	f380 8809 	msr	PSP, r0
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	f3af 8000 	nop.w

0800a4e0 <pxCurrentTCBConst>:
 800a4e0:	200010dc 	.word	0x200010dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a4e4:	bf00      	nop
 800a4e6:	bf00      	nop

0800a4e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	607b      	str	r3, [r7, #4]
}
 800a500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a502:	f7fe fcd5 	bl	8008eb0 <xTaskIncrementTick>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d003      	beq.n	800a514 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a50c:	4b06      	ldr	r3, [pc, #24]	; (800a528 <xPortSysTickHandler+0x40>)
 800a50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	2300      	movs	r3, #0
 800a516:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	f383 8811 	msr	BASEPRI, r3
}
 800a51e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a520:	bf00      	nop
 800a522:	3708      	adds	r7, #8
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	e000ed04 	.word	0xe000ed04

0800a52c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a52c:	b480      	push	{r7}
 800a52e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a530:	4b0b      	ldr	r3, [pc, #44]	; (800a560 <vPortSetupTimerInterrupt+0x34>)
 800a532:	2200      	movs	r2, #0
 800a534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a536:	4b0b      	ldr	r3, [pc, #44]	; (800a564 <vPortSetupTimerInterrupt+0x38>)
 800a538:	2200      	movs	r2, #0
 800a53a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a53c:	4b0a      	ldr	r3, [pc, #40]	; (800a568 <vPortSetupTimerInterrupt+0x3c>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a0a      	ldr	r2, [pc, #40]	; (800a56c <vPortSetupTimerInterrupt+0x40>)
 800a542:	fba2 2303 	umull	r2, r3, r2, r3
 800a546:	099b      	lsrs	r3, r3, #6
 800a548:	4a09      	ldr	r2, [pc, #36]	; (800a570 <vPortSetupTimerInterrupt+0x44>)
 800a54a:	3b01      	subs	r3, #1
 800a54c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a54e:	4b04      	ldr	r3, [pc, #16]	; (800a560 <vPortSetupTimerInterrupt+0x34>)
 800a550:	2207      	movs	r2, #7
 800a552:	601a      	str	r2, [r3, #0]
}
 800a554:	bf00      	nop
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	e000e010 	.word	0xe000e010
 800a564:	e000e018 	.word	0xe000e018
 800a568:	20000030 	.word	0x20000030
 800a56c:	10624dd3 	.word	0x10624dd3
 800a570:	e000e014 	.word	0xe000e014

0800a574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a574:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a584 <vPortEnableVFP+0x10>
 800a578:	6801      	ldr	r1, [r0, #0]
 800a57a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a57e:	6001      	str	r1, [r0, #0]
 800a580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a582:	bf00      	nop
 800a584:	e000ed88 	.word	0xe000ed88

0800a588 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a58e:	f3ef 8305 	mrs	r3, IPSR
 800a592:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2b0f      	cmp	r3, #15
 800a598:	d914      	bls.n	800a5c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a59a:	4a17      	ldr	r2, [pc, #92]	; (800a5f8 <vPortValidateInterruptPriority+0x70>)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	4413      	add	r3, r2
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a5a4:	4b15      	ldr	r3, [pc, #84]	; (800a5fc <vPortValidateInterruptPriority+0x74>)
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	7afa      	ldrb	r2, [r7, #11]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d20a      	bcs.n	800a5c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	607b      	str	r3, [r7, #4]
}
 800a5c0:	bf00      	nop
 800a5c2:	e7fe      	b.n	800a5c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a5c4:	4b0e      	ldr	r3, [pc, #56]	; (800a600 <vPortValidateInterruptPriority+0x78>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a5cc:	4b0d      	ldr	r3, [pc, #52]	; (800a604 <vPortValidateInterruptPriority+0x7c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d90a      	bls.n	800a5ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d8:	f383 8811 	msr	BASEPRI, r3
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	603b      	str	r3, [r7, #0]
}
 800a5e6:	bf00      	nop
 800a5e8:	e7fe      	b.n	800a5e8 <vPortValidateInterruptPriority+0x60>
	}
 800a5ea:	bf00      	nop
 800a5ec:	3714      	adds	r7, #20
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	e000e3f0 	.word	0xe000e3f0
 800a5fc:	20001708 	.word	0x20001708
 800a600:	e000ed0c 	.word	0xe000ed0c
 800a604:	2000170c 	.word	0x2000170c

0800a608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b08a      	sub	sp, #40	; 0x28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a610:	2300      	movs	r3, #0
 800a612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a614:	f7fe fb7e 	bl	8008d14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a618:	4b5b      	ldr	r3, [pc, #364]	; (800a788 <pvPortMalloc+0x180>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d101      	bne.n	800a624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a620:	f000 f920 	bl	800a864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a624:	4b59      	ldr	r3, [pc, #356]	; (800a78c <pvPortMalloc+0x184>)
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4013      	ands	r3, r2
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f040 8093 	bne.w	800a758 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d01d      	beq.n	800a674 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a638:	2208      	movs	r2, #8
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4413      	add	r3, r2
 800a63e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f003 0307 	and.w	r3, r3, #7
 800a646:	2b00      	cmp	r3, #0
 800a648:	d014      	beq.n	800a674 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f023 0307 	bic.w	r3, r3, #7
 800a650:	3308      	adds	r3, #8
 800a652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f003 0307 	and.w	r3, r3, #7
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00a      	beq.n	800a674 <pvPortMalloc+0x6c>
	__asm volatile
 800a65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	617b      	str	r3, [r7, #20]
}
 800a670:	bf00      	nop
 800a672:	e7fe      	b.n	800a672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d06e      	beq.n	800a758 <pvPortMalloc+0x150>
 800a67a:	4b45      	ldr	r3, [pc, #276]	; (800a790 <pvPortMalloc+0x188>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	429a      	cmp	r2, r3
 800a682:	d869      	bhi.n	800a758 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a684:	4b43      	ldr	r3, [pc, #268]	; (800a794 <pvPortMalloc+0x18c>)
 800a686:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a688:	4b42      	ldr	r3, [pc, #264]	; (800a794 <pvPortMalloc+0x18c>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a68e:	e004      	b.n	800a69a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a692:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d903      	bls.n	800a6ac <pvPortMalloc+0xa4>
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1f1      	bne.n	800a690 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a6ac:	4b36      	ldr	r3, [pc, #216]	; (800a788 <pvPortMalloc+0x180>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d050      	beq.n	800a758 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2208      	movs	r2, #8
 800a6bc:	4413      	add	r3, r2
 800a6be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	6a3b      	ldr	r3, [r7, #32]
 800a6c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ca:	685a      	ldr	r2, [r3, #4]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	1ad2      	subs	r2, r2, r3
 800a6d0:	2308      	movs	r3, #8
 800a6d2:	005b      	lsls	r3, r3, #1
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d91f      	bls.n	800a718 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4413      	add	r3, r2
 800a6de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	f003 0307 	and.w	r3, r3, #7
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00a      	beq.n	800a700 <pvPortMalloc+0xf8>
	__asm volatile
 800a6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ee:	f383 8811 	msr	BASEPRI, r3
 800a6f2:	f3bf 8f6f 	isb	sy
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	613b      	str	r3, [r7, #16]
}
 800a6fc:	bf00      	nop
 800a6fe:	e7fe      	b.n	800a6fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	685a      	ldr	r2, [r3, #4]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	1ad2      	subs	r2, r2, r3
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a712:	69b8      	ldr	r0, [r7, #24]
 800a714:	f000 f908 	bl	800a928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a718:	4b1d      	ldr	r3, [pc, #116]	; (800a790 <pvPortMalloc+0x188>)
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	4a1b      	ldr	r2, [pc, #108]	; (800a790 <pvPortMalloc+0x188>)
 800a724:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a726:	4b1a      	ldr	r3, [pc, #104]	; (800a790 <pvPortMalloc+0x188>)
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	4b1b      	ldr	r3, [pc, #108]	; (800a798 <pvPortMalloc+0x190>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d203      	bcs.n	800a73a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a732:	4b17      	ldr	r3, [pc, #92]	; (800a790 <pvPortMalloc+0x188>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a18      	ldr	r2, [pc, #96]	; (800a798 <pvPortMalloc+0x190>)
 800a738:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	685a      	ldr	r2, [r3, #4]
 800a73e:	4b13      	ldr	r3, [pc, #76]	; (800a78c <pvPortMalloc+0x184>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	431a      	orrs	r2, r3
 800a744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a746:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74a:	2200      	movs	r2, #0
 800a74c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a74e:	4b13      	ldr	r3, [pc, #76]	; (800a79c <pvPortMalloc+0x194>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	3301      	adds	r3, #1
 800a754:	4a11      	ldr	r2, [pc, #68]	; (800a79c <pvPortMalloc+0x194>)
 800a756:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a758:	f7fe faea 	bl	8008d30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	f003 0307 	and.w	r3, r3, #7
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00a      	beq.n	800a77c <pvPortMalloc+0x174>
	__asm volatile
 800a766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76a:	f383 8811 	msr	BASEPRI, r3
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	f3bf 8f4f 	dsb	sy
 800a776:	60fb      	str	r3, [r7, #12]
}
 800a778:	bf00      	nop
 800a77a:	e7fe      	b.n	800a77a <pvPortMalloc+0x172>
	return pvReturn;
 800a77c:	69fb      	ldr	r3, [r7, #28]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3728      	adds	r7, #40	; 0x28
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	20005318 	.word	0x20005318
 800a78c:	2000532c 	.word	0x2000532c
 800a790:	2000531c 	.word	0x2000531c
 800a794:	20005310 	.word	0x20005310
 800a798:	20005320 	.word	0x20005320
 800a79c:	20005324 	.word	0x20005324

0800a7a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d04d      	beq.n	800a84e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a7b2:	2308      	movs	r3, #8
 800a7b4:	425b      	negs	r3, r3
 800a7b6:	697a      	ldr	r2, [r7, #20]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	4b24      	ldr	r3, [pc, #144]	; (800a858 <vPortFree+0xb8>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4013      	ands	r3, r2
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10a      	bne.n	800a7e4 <vPortFree+0x44>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	60fb      	str	r3, [r7, #12]
}
 800a7e0:	bf00      	nop
 800a7e2:	e7fe      	b.n	800a7e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00a      	beq.n	800a802 <vPortFree+0x62>
	__asm volatile
 800a7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	60bb      	str	r3, [r7, #8]
}
 800a7fe:	bf00      	nop
 800a800:	e7fe      	b.n	800a800 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	685a      	ldr	r2, [r3, #4]
 800a806:	4b14      	ldr	r3, [pc, #80]	; (800a858 <vPortFree+0xb8>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4013      	ands	r3, r2
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d01e      	beq.n	800a84e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d11a      	bne.n	800a84e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	4b0e      	ldr	r3, [pc, #56]	; (800a858 <vPortFree+0xb8>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	43db      	mvns	r3, r3
 800a822:	401a      	ands	r2, r3
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a828:	f7fe fa74 	bl	8008d14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	685a      	ldr	r2, [r3, #4]
 800a830:	4b0a      	ldr	r3, [pc, #40]	; (800a85c <vPortFree+0xbc>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4413      	add	r3, r2
 800a836:	4a09      	ldr	r2, [pc, #36]	; (800a85c <vPortFree+0xbc>)
 800a838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a83a:	6938      	ldr	r0, [r7, #16]
 800a83c:	f000 f874 	bl	800a928 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a840:	4b07      	ldr	r3, [pc, #28]	; (800a860 <vPortFree+0xc0>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	3301      	adds	r3, #1
 800a846:	4a06      	ldr	r2, [pc, #24]	; (800a860 <vPortFree+0xc0>)
 800a848:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a84a:	f7fe fa71 	bl	8008d30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a84e:	bf00      	nop
 800a850:	3718      	adds	r7, #24
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	2000532c 	.word	0x2000532c
 800a85c:	2000531c 	.word	0x2000531c
 800a860:	20005328 	.word	0x20005328

0800a864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a864:	b480      	push	{r7}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a86a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a86e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a870:	4b27      	ldr	r3, [pc, #156]	; (800a910 <prvHeapInit+0xac>)
 800a872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f003 0307 	and.w	r3, r3, #7
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00c      	beq.n	800a898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3307      	adds	r3, #7
 800a882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f023 0307 	bic.w	r3, r3, #7
 800a88a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	4a1f      	ldr	r2, [pc, #124]	; (800a910 <prvHeapInit+0xac>)
 800a894:	4413      	add	r3, r2
 800a896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a89c:	4a1d      	ldr	r2, [pc, #116]	; (800a914 <prvHeapInit+0xb0>)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8a2:	4b1c      	ldr	r3, [pc, #112]	; (800a914 <prvHeapInit+0xb0>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a8b0:	2208      	movs	r2, #8
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	1a9b      	subs	r3, r3, r2
 800a8b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f023 0307 	bic.w	r3, r3, #7
 800a8be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	4a15      	ldr	r2, [pc, #84]	; (800a918 <prvHeapInit+0xb4>)
 800a8c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a8c6:	4b14      	ldr	r3, [pc, #80]	; (800a918 <prvHeapInit+0xb4>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a8ce:	4b12      	ldr	r3, [pc, #72]	; (800a918 <prvHeapInit+0xb4>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	1ad2      	subs	r2, r2, r3
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a8e4:	4b0c      	ldr	r3, [pc, #48]	; (800a918 <prvHeapInit+0xb4>)
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	4a0a      	ldr	r2, [pc, #40]	; (800a91c <prvHeapInit+0xb8>)
 800a8f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	4a09      	ldr	r2, [pc, #36]	; (800a920 <prvHeapInit+0xbc>)
 800a8fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a8fc:	4b09      	ldr	r3, [pc, #36]	; (800a924 <prvHeapInit+0xc0>)
 800a8fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a902:	601a      	str	r2, [r3, #0]
}
 800a904:	bf00      	nop
 800a906:	3714      	adds	r7, #20
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr
 800a910:	20001710 	.word	0x20001710
 800a914:	20005310 	.word	0x20005310
 800a918:	20005318 	.word	0x20005318
 800a91c:	20005320 	.word	0x20005320
 800a920:	2000531c 	.word	0x2000531c
 800a924:	2000532c 	.word	0x2000532c

0800a928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a930:	4b28      	ldr	r3, [pc, #160]	; (800a9d4 <prvInsertBlockIntoFreeList+0xac>)
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	e002      	b.n	800a93c <prvInsertBlockIntoFreeList+0x14>
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	429a      	cmp	r2, r3
 800a944:	d8f7      	bhi.n	800a936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	4413      	add	r3, r2
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	429a      	cmp	r2, r3
 800a956:	d108      	bne.n	800a96a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	441a      	add	r2, r3
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	441a      	add	r2, r3
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d118      	bne.n	800a9b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	4b15      	ldr	r3, [pc, #84]	; (800a9d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	429a      	cmp	r2, r3
 800a988:	d00d      	beq.n	800a9a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	685a      	ldr	r2, [r3, #4]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	441a      	add	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	e008      	b.n	800a9b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a9a6:	4b0c      	ldr	r3, [pc, #48]	; (800a9d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	601a      	str	r2, [r3, #0]
 800a9ae:	e003      	b.n	800a9b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d002      	beq.n	800a9c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9c6:	bf00      	nop
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	20005310 	.word	0x20005310
 800a9d8:	20005318 	.word	0x20005318

0800a9dc <__errno>:
 800a9dc:	4b01      	ldr	r3, [pc, #4]	; (800a9e4 <__errno+0x8>)
 800a9de:	6818      	ldr	r0, [r3, #0]
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	20000040 	.word	0x20000040

0800a9e8 <std>:
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	b510      	push	{r4, lr}
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	e9c0 3300 	strd	r3, r3, [r0]
 800a9f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9f6:	6083      	str	r3, [r0, #8]
 800a9f8:	8181      	strh	r1, [r0, #12]
 800a9fa:	6643      	str	r3, [r0, #100]	; 0x64
 800a9fc:	81c2      	strh	r2, [r0, #14]
 800a9fe:	6183      	str	r3, [r0, #24]
 800aa00:	4619      	mov	r1, r3
 800aa02:	2208      	movs	r2, #8
 800aa04:	305c      	adds	r0, #92	; 0x5c
 800aa06:	f000 f91a 	bl	800ac3e <memset>
 800aa0a:	4b05      	ldr	r3, [pc, #20]	; (800aa20 <std+0x38>)
 800aa0c:	6263      	str	r3, [r4, #36]	; 0x24
 800aa0e:	4b05      	ldr	r3, [pc, #20]	; (800aa24 <std+0x3c>)
 800aa10:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa12:	4b05      	ldr	r3, [pc, #20]	; (800aa28 <std+0x40>)
 800aa14:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa16:	4b05      	ldr	r3, [pc, #20]	; (800aa2c <std+0x44>)
 800aa18:	6224      	str	r4, [r4, #32]
 800aa1a:	6323      	str	r3, [r4, #48]	; 0x30
 800aa1c:	bd10      	pop	{r4, pc}
 800aa1e:	bf00      	nop
 800aa20:	0800af89 	.word	0x0800af89
 800aa24:	0800afab 	.word	0x0800afab
 800aa28:	0800afe3 	.word	0x0800afe3
 800aa2c:	0800b007 	.word	0x0800b007

0800aa30 <_cleanup_r>:
 800aa30:	4901      	ldr	r1, [pc, #4]	; (800aa38 <_cleanup_r+0x8>)
 800aa32:	f000 b8af 	b.w	800ab94 <_fwalk_reent>
 800aa36:	bf00      	nop
 800aa38:	0800b2e1 	.word	0x0800b2e1

0800aa3c <__sfmoreglue>:
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	2268      	movs	r2, #104	; 0x68
 800aa40:	1e4d      	subs	r5, r1, #1
 800aa42:	4355      	muls	r5, r2
 800aa44:	460e      	mov	r6, r1
 800aa46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa4a:	f000 f921 	bl	800ac90 <_malloc_r>
 800aa4e:	4604      	mov	r4, r0
 800aa50:	b140      	cbz	r0, 800aa64 <__sfmoreglue+0x28>
 800aa52:	2100      	movs	r1, #0
 800aa54:	e9c0 1600 	strd	r1, r6, [r0]
 800aa58:	300c      	adds	r0, #12
 800aa5a:	60a0      	str	r0, [r4, #8]
 800aa5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa60:	f000 f8ed 	bl	800ac3e <memset>
 800aa64:	4620      	mov	r0, r4
 800aa66:	bd70      	pop	{r4, r5, r6, pc}

0800aa68 <__sfp_lock_acquire>:
 800aa68:	4801      	ldr	r0, [pc, #4]	; (800aa70 <__sfp_lock_acquire+0x8>)
 800aa6a:	f000 b8d8 	b.w	800ac1e <__retarget_lock_acquire_recursive>
 800aa6e:	bf00      	nop
 800aa70:	20005331 	.word	0x20005331

0800aa74 <__sfp_lock_release>:
 800aa74:	4801      	ldr	r0, [pc, #4]	; (800aa7c <__sfp_lock_release+0x8>)
 800aa76:	f000 b8d3 	b.w	800ac20 <__retarget_lock_release_recursive>
 800aa7a:	bf00      	nop
 800aa7c:	20005331 	.word	0x20005331

0800aa80 <__sinit_lock_acquire>:
 800aa80:	4801      	ldr	r0, [pc, #4]	; (800aa88 <__sinit_lock_acquire+0x8>)
 800aa82:	f000 b8cc 	b.w	800ac1e <__retarget_lock_acquire_recursive>
 800aa86:	bf00      	nop
 800aa88:	20005332 	.word	0x20005332

0800aa8c <__sinit_lock_release>:
 800aa8c:	4801      	ldr	r0, [pc, #4]	; (800aa94 <__sinit_lock_release+0x8>)
 800aa8e:	f000 b8c7 	b.w	800ac20 <__retarget_lock_release_recursive>
 800aa92:	bf00      	nop
 800aa94:	20005332 	.word	0x20005332

0800aa98 <__sinit>:
 800aa98:	b510      	push	{r4, lr}
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	f7ff fff0 	bl	800aa80 <__sinit_lock_acquire>
 800aaa0:	69a3      	ldr	r3, [r4, #24]
 800aaa2:	b11b      	cbz	r3, 800aaac <__sinit+0x14>
 800aaa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaa8:	f7ff bff0 	b.w	800aa8c <__sinit_lock_release>
 800aaac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aab0:	6523      	str	r3, [r4, #80]	; 0x50
 800aab2:	4b13      	ldr	r3, [pc, #76]	; (800ab00 <__sinit+0x68>)
 800aab4:	4a13      	ldr	r2, [pc, #76]	; (800ab04 <__sinit+0x6c>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	62a2      	str	r2, [r4, #40]	; 0x28
 800aaba:	42a3      	cmp	r3, r4
 800aabc:	bf04      	itt	eq
 800aabe:	2301      	moveq	r3, #1
 800aac0:	61a3      	streq	r3, [r4, #24]
 800aac2:	4620      	mov	r0, r4
 800aac4:	f000 f820 	bl	800ab08 <__sfp>
 800aac8:	6060      	str	r0, [r4, #4]
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 f81c 	bl	800ab08 <__sfp>
 800aad0:	60a0      	str	r0, [r4, #8]
 800aad2:	4620      	mov	r0, r4
 800aad4:	f000 f818 	bl	800ab08 <__sfp>
 800aad8:	2200      	movs	r2, #0
 800aada:	60e0      	str	r0, [r4, #12]
 800aadc:	2104      	movs	r1, #4
 800aade:	6860      	ldr	r0, [r4, #4]
 800aae0:	f7ff ff82 	bl	800a9e8 <std>
 800aae4:	68a0      	ldr	r0, [r4, #8]
 800aae6:	2201      	movs	r2, #1
 800aae8:	2109      	movs	r1, #9
 800aaea:	f7ff ff7d 	bl	800a9e8 <std>
 800aaee:	68e0      	ldr	r0, [r4, #12]
 800aaf0:	2202      	movs	r2, #2
 800aaf2:	2112      	movs	r1, #18
 800aaf4:	f7ff ff78 	bl	800a9e8 <std>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	61a3      	str	r3, [r4, #24]
 800aafc:	e7d2      	b.n	800aaa4 <__sinit+0xc>
 800aafe:	bf00      	nop
 800ab00:	0800bea0 	.word	0x0800bea0
 800ab04:	0800aa31 	.word	0x0800aa31

0800ab08 <__sfp>:
 800ab08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0a:	4607      	mov	r7, r0
 800ab0c:	f7ff ffac 	bl	800aa68 <__sfp_lock_acquire>
 800ab10:	4b1e      	ldr	r3, [pc, #120]	; (800ab8c <__sfp+0x84>)
 800ab12:	681e      	ldr	r6, [r3, #0]
 800ab14:	69b3      	ldr	r3, [r6, #24]
 800ab16:	b913      	cbnz	r3, 800ab1e <__sfp+0x16>
 800ab18:	4630      	mov	r0, r6
 800ab1a:	f7ff ffbd 	bl	800aa98 <__sinit>
 800ab1e:	3648      	adds	r6, #72	; 0x48
 800ab20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab24:	3b01      	subs	r3, #1
 800ab26:	d503      	bpl.n	800ab30 <__sfp+0x28>
 800ab28:	6833      	ldr	r3, [r6, #0]
 800ab2a:	b30b      	cbz	r3, 800ab70 <__sfp+0x68>
 800ab2c:	6836      	ldr	r6, [r6, #0]
 800ab2e:	e7f7      	b.n	800ab20 <__sfp+0x18>
 800ab30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab34:	b9d5      	cbnz	r5, 800ab6c <__sfp+0x64>
 800ab36:	4b16      	ldr	r3, [pc, #88]	; (800ab90 <__sfp+0x88>)
 800ab38:	60e3      	str	r3, [r4, #12]
 800ab3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab3e:	6665      	str	r5, [r4, #100]	; 0x64
 800ab40:	f000 f86c 	bl	800ac1c <__retarget_lock_init_recursive>
 800ab44:	f7ff ff96 	bl	800aa74 <__sfp_lock_release>
 800ab48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab50:	6025      	str	r5, [r4, #0]
 800ab52:	61a5      	str	r5, [r4, #24]
 800ab54:	2208      	movs	r2, #8
 800ab56:	4629      	mov	r1, r5
 800ab58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab5c:	f000 f86f 	bl	800ac3e <memset>
 800ab60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab68:	4620      	mov	r0, r4
 800ab6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab6c:	3468      	adds	r4, #104	; 0x68
 800ab6e:	e7d9      	b.n	800ab24 <__sfp+0x1c>
 800ab70:	2104      	movs	r1, #4
 800ab72:	4638      	mov	r0, r7
 800ab74:	f7ff ff62 	bl	800aa3c <__sfmoreglue>
 800ab78:	4604      	mov	r4, r0
 800ab7a:	6030      	str	r0, [r6, #0]
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	d1d5      	bne.n	800ab2c <__sfp+0x24>
 800ab80:	f7ff ff78 	bl	800aa74 <__sfp_lock_release>
 800ab84:	230c      	movs	r3, #12
 800ab86:	603b      	str	r3, [r7, #0]
 800ab88:	e7ee      	b.n	800ab68 <__sfp+0x60>
 800ab8a:	bf00      	nop
 800ab8c:	0800bea0 	.word	0x0800bea0
 800ab90:	ffff0001 	.word	0xffff0001

0800ab94 <_fwalk_reent>:
 800ab94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab98:	4606      	mov	r6, r0
 800ab9a:	4688      	mov	r8, r1
 800ab9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aba0:	2700      	movs	r7, #0
 800aba2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aba6:	f1b9 0901 	subs.w	r9, r9, #1
 800abaa:	d505      	bpl.n	800abb8 <_fwalk_reent+0x24>
 800abac:	6824      	ldr	r4, [r4, #0]
 800abae:	2c00      	cmp	r4, #0
 800abb0:	d1f7      	bne.n	800aba2 <_fwalk_reent+0xe>
 800abb2:	4638      	mov	r0, r7
 800abb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abb8:	89ab      	ldrh	r3, [r5, #12]
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d907      	bls.n	800abce <_fwalk_reent+0x3a>
 800abbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abc2:	3301      	adds	r3, #1
 800abc4:	d003      	beq.n	800abce <_fwalk_reent+0x3a>
 800abc6:	4629      	mov	r1, r5
 800abc8:	4630      	mov	r0, r6
 800abca:	47c0      	blx	r8
 800abcc:	4307      	orrs	r7, r0
 800abce:	3568      	adds	r5, #104	; 0x68
 800abd0:	e7e9      	b.n	800aba6 <_fwalk_reent+0x12>
	...

0800abd4 <__libc_init_array>:
 800abd4:	b570      	push	{r4, r5, r6, lr}
 800abd6:	4d0d      	ldr	r5, [pc, #52]	; (800ac0c <__libc_init_array+0x38>)
 800abd8:	4c0d      	ldr	r4, [pc, #52]	; (800ac10 <__libc_init_array+0x3c>)
 800abda:	1b64      	subs	r4, r4, r5
 800abdc:	10a4      	asrs	r4, r4, #2
 800abde:	2600      	movs	r6, #0
 800abe0:	42a6      	cmp	r6, r4
 800abe2:	d109      	bne.n	800abf8 <__libc_init_array+0x24>
 800abe4:	4d0b      	ldr	r5, [pc, #44]	; (800ac14 <__libc_init_array+0x40>)
 800abe6:	4c0c      	ldr	r4, [pc, #48]	; (800ac18 <__libc_init_array+0x44>)
 800abe8:	f000 ffa8 	bl	800bb3c <_init>
 800abec:	1b64      	subs	r4, r4, r5
 800abee:	10a4      	asrs	r4, r4, #2
 800abf0:	2600      	movs	r6, #0
 800abf2:	42a6      	cmp	r6, r4
 800abf4:	d105      	bne.n	800ac02 <__libc_init_array+0x2e>
 800abf6:	bd70      	pop	{r4, r5, r6, pc}
 800abf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abfc:	4798      	blx	r3
 800abfe:	3601      	adds	r6, #1
 800ac00:	e7ee      	b.n	800abe0 <__libc_init_array+0xc>
 800ac02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac06:	4798      	blx	r3
 800ac08:	3601      	adds	r6, #1
 800ac0a:	e7f2      	b.n	800abf2 <__libc_init_array+0x1e>
 800ac0c:	0800bee0 	.word	0x0800bee0
 800ac10:	0800bee0 	.word	0x0800bee0
 800ac14:	0800bee0 	.word	0x0800bee0
 800ac18:	0800bee4 	.word	0x0800bee4

0800ac1c <__retarget_lock_init_recursive>:
 800ac1c:	4770      	bx	lr

0800ac1e <__retarget_lock_acquire_recursive>:
 800ac1e:	4770      	bx	lr

0800ac20 <__retarget_lock_release_recursive>:
 800ac20:	4770      	bx	lr

0800ac22 <memcpy>:
 800ac22:	440a      	add	r2, r1
 800ac24:	4291      	cmp	r1, r2
 800ac26:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac2a:	d100      	bne.n	800ac2e <memcpy+0xc>
 800ac2c:	4770      	bx	lr
 800ac2e:	b510      	push	{r4, lr}
 800ac30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac38:	4291      	cmp	r1, r2
 800ac3a:	d1f9      	bne.n	800ac30 <memcpy+0xe>
 800ac3c:	bd10      	pop	{r4, pc}

0800ac3e <memset>:
 800ac3e:	4402      	add	r2, r0
 800ac40:	4603      	mov	r3, r0
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d100      	bne.n	800ac48 <memset+0xa>
 800ac46:	4770      	bx	lr
 800ac48:	f803 1b01 	strb.w	r1, [r3], #1
 800ac4c:	e7f9      	b.n	800ac42 <memset+0x4>
	...

0800ac50 <sbrk_aligned>:
 800ac50:	b570      	push	{r4, r5, r6, lr}
 800ac52:	4e0e      	ldr	r6, [pc, #56]	; (800ac8c <sbrk_aligned+0x3c>)
 800ac54:	460c      	mov	r4, r1
 800ac56:	6831      	ldr	r1, [r6, #0]
 800ac58:	4605      	mov	r5, r0
 800ac5a:	b911      	cbnz	r1, 800ac62 <sbrk_aligned+0x12>
 800ac5c:	f000 f984 	bl	800af68 <_sbrk_r>
 800ac60:	6030      	str	r0, [r6, #0]
 800ac62:	4621      	mov	r1, r4
 800ac64:	4628      	mov	r0, r5
 800ac66:	f000 f97f 	bl	800af68 <_sbrk_r>
 800ac6a:	1c43      	adds	r3, r0, #1
 800ac6c:	d00a      	beq.n	800ac84 <sbrk_aligned+0x34>
 800ac6e:	1cc4      	adds	r4, r0, #3
 800ac70:	f024 0403 	bic.w	r4, r4, #3
 800ac74:	42a0      	cmp	r0, r4
 800ac76:	d007      	beq.n	800ac88 <sbrk_aligned+0x38>
 800ac78:	1a21      	subs	r1, r4, r0
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	f000 f974 	bl	800af68 <_sbrk_r>
 800ac80:	3001      	adds	r0, #1
 800ac82:	d101      	bne.n	800ac88 <sbrk_aligned+0x38>
 800ac84:	f04f 34ff 	mov.w	r4, #4294967295
 800ac88:	4620      	mov	r0, r4
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
 800ac8c:	20005338 	.word	0x20005338

0800ac90 <_malloc_r>:
 800ac90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac94:	1ccd      	adds	r5, r1, #3
 800ac96:	f025 0503 	bic.w	r5, r5, #3
 800ac9a:	3508      	adds	r5, #8
 800ac9c:	2d0c      	cmp	r5, #12
 800ac9e:	bf38      	it	cc
 800aca0:	250c      	movcc	r5, #12
 800aca2:	2d00      	cmp	r5, #0
 800aca4:	4607      	mov	r7, r0
 800aca6:	db01      	blt.n	800acac <_malloc_r+0x1c>
 800aca8:	42a9      	cmp	r1, r5
 800acaa:	d905      	bls.n	800acb8 <_malloc_r+0x28>
 800acac:	230c      	movs	r3, #12
 800acae:	603b      	str	r3, [r7, #0]
 800acb0:	2600      	movs	r6, #0
 800acb2:	4630      	mov	r0, r6
 800acb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acb8:	4e2e      	ldr	r6, [pc, #184]	; (800ad74 <_malloc_r+0xe4>)
 800acba:	f000 fbc5 	bl	800b448 <__malloc_lock>
 800acbe:	6833      	ldr	r3, [r6, #0]
 800acc0:	461c      	mov	r4, r3
 800acc2:	bb34      	cbnz	r4, 800ad12 <_malloc_r+0x82>
 800acc4:	4629      	mov	r1, r5
 800acc6:	4638      	mov	r0, r7
 800acc8:	f7ff ffc2 	bl	800ac50 <sbrk_aligned>
 800accc:	1c43      	adds	r3, r0, #1
 800acce:	4604      	mov	r4, r0
 800acd0:	d14d      	bne.n	800ad6e <_malloc_r+0xde>
 800acd2:	6834      	ldr	r4, [r6, #0]
 800acd4:	4626      	mov	r6, r4
 800acd6:	2e00      	cmp	r6, #0
 800acd8:	d140      	bne.n	800ad5c <_malloc_r+0xcc>
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	4631      	mov	r1, r6
 800acde:	4638      	mov	r0, r7
 800ace0:	eb04 0803 	add.w	r8, r4, r3
 800ace4:	f000 f940 	bl	800af68 <_sbrk_r>
 800ace8:	4580      	cmp	r8, r0
 800acea:	d13a      	bne.n	800ad62 <_malloc_r+0xd2>
 800acec:	6821      	ldr	r1, [r4, #0]
 800acee:	3503      	adds	r5, #3
 800acf0:	1a6d      	subs	r5, r5, r1
 800acf2:	f025 0503 	bic.w	r5, r5, #3
 800acf6:	3508      	adds	r5, #8
 800acf8:	2d0c      	cmp	r5, #12
 800acfa:	bf38      	it	cc
 800acfc:	250c      	movcc	r5, #12
 800acfe:	4629      	mov	r1, r5
 800ad00:	4638      	mov	r0, r7
 800ad02:	f7ff ffa5 	bl	800ac50 <sbrk_aligned>
 800ad06:	3001      	adds	r0, #1
 800ad08:	d02b      	beq.n	800ad62 <_malloc_r+0xd2>
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	442b      	add	r3, r5
 800ad0e:	6023      	str	r3, [r4, #0]
 800ad10:	e00e      	b.n	800ad30 <_malloc_r+0xa0>
 800ad12:	6822      	ldr	r2, [r4, #0]
 800ad14:	1b52      	subs	r2, r2, r5
 800ad16:	d41e      	bmi.n	800ad56 <_malloc_r+0xc6>
 800ad18:	2a0b      	cmp	r2, #11
 800ad1a:	d916      	bls.n	800ad4a <_malloc_r+0xba>
 800ad1c:	1961      	adds	r1, r4, r5
 800ad1e:	42a3      	cmp	r3, r4
 800ad20:	6025      	str	r5, [r4, #0]
 800ad22:	bf18      	it	ne
 800ad24:	6059      	strne	r1, [r3, #4]
 800ad26:	6863      	ldr	r3, [r4, #4]
 800ad28:	bf08      	it	eq
 800ad2a:	6031      	streq	r1, [r6, #0]
 800ad2c:	5162      	str	r2, [r4, r5]
 800ad2e:	604b      	str	r3, [r1, #4]
 800ad30:	4638      	mov	r0, r7
 800ad32:	f104 060b 	add.w	r6, r4, #11
 800ad36:	f000 fb8d 	bl	800b454 <__malloc_unlock>
 800ad3a:	f026 0607 	bic.w	r6, r6, #7
 800ad3e:	1d23      	adds	r3, r4, #4
 800ad40:	1af2      	subs	r2, r6, r3
 800ad42:	d0b6      	beq.n	800acb2 <_malloc_r+0x22>
 800ad44:	1b9b      	subs	r3, r3, r6
 800ad46:	50a3      	str	r3, [r4, r2]
 800ad48:	e7b3      	b.n	800acb2 <_malloc_r+0x22>
 800ad4a:	6862      	ldr	r2, [r4, #4]
 800ad4c:	42a3      	cmp	r3, r4
 800ad4e:	bf0c      	ite	eq
 800ad50:	6032      	streq	r2, [r6, #0]
 800ad52:	605a      	strne	r2, [r3, #4]
 800ad54:	e7ec      	b.n	800ad30 <_malloc_r+0xa0>
 800ad56:	4623      	mov	r3, r4
 800ad58:	6864      	ldr	r4, [r4, #4]
 800ad5a:	e7b2      	b.n	800acc2 <_malloc_r+0x32>
 800ad5c:	4634      	mov	r4, r6
 800ad5e:	6876      	ldr	r6, [r6, #4]
 800ad60:	e7b9      	b.n	800acd6 <_malloc_r+0x46>
 800ad62:	230c      	movs	r3, #12
 800ad64:	603b      	str	r3, [r7, #0]
 800ad66:	4638      	mov	r0, r7
 800ad68:	f000 fb74 	bl	800b454 <__malloc_unlock>
 800ad6c:	e7a1      	b.n	800acb2 <_malloc_r+0x22>
 800ad6e:	6025      	str	r5, [r4, #0]
 800ad70:	e7de      	b.n	800ad30 <_malloc_r+0xa0>
 800ad72:	bf00      	nop
 800ad74:	20005334 	.word	0x20005334

0800ad78 <iprintf>:
 800ad78:	b40f      	push	{r0, r1, r2, r3}
 800ad7a:	4b0a      	ldr	r3, [pc, #40]	; (800ada4 <iprintf+0x2c>)
 800ad7c:	b513      	push	{r0, r1, r4, lr}
 800ad7e:	681c      	ldr	r4, [r3, #0]
 800ad80:	b124      	cbz	r4, 800ad8c <iprintf+0x14>
 800ad82:	69a3      	ldr	r3, [r4, #24]
 800ad84:	b913      	cbnz	r3, 800ad8c <iprintf+0x14>
 800ad86:	4620      	mov	r0, r4
 800ad88:	f7ff fe86 	bl	800aa98 <__sinit>
 800ad8c:	ab05      	add	r3, sp, #20
 800ad8e:	9a04      	ldr	r2, [sp, #16]
 800ad90:	68a1      	ldr	r1, [r4, #8]
 800ad92:	9301      	str	r3, [sp, #4]
 800ad94:	4620      	mov	r0, r4
 800ad96:	f000 fbd9 	bl	800b54c <_vfiprintf_r>
 800ad9a:	b002      	add	sp, #8
 800ad9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ada0:	b004      	add	sp, #16
 800ada2:	4770      	bx	lr
 800ada4:	20000040 	.word	0x20000040

0800ada8 <_puts_r>:
 800ada8:	b570      	push	{r4, r5, r6, lr}
 800adaa:	460e      	mov	r6, r1
 800adac:	4605      	mov	r5, r0
 800adae:	b118      	cbz	r0, 800adb8 <_puts_r+0x10>
 800adb0:	6983      	ldr	r3, [r0, #24]
 800adb2:	b90b      	cbnz	r3, 800adb8 <_puts_r+0x10>
 800adb4:	f7ff fe70 	bl	800aa98 <__sinit>
 800adb8:	69ab      	ldr	r3, [r5, #24]
 800adba:	68ac      	ldr	r4, [r5, #8]
 800adbc:	b913      	cbnz	r3, 800adc4 <_puts_r+0x1c>
 800adbe:	4628      	mov	r0, r5
 800adc0:	f7ff fe6a 	bl	800aa98 <__sinit>
 800adc4:	4b2c      	ldr	r3, [pc, #176]	; (800ae78 <_puts_r+0xd0>)
 800adc6:	429c      	cmp	r4, r3
 800adc8:	d120      	bne.n	800ae0c <_puts_r+0x64>
 800adca:	686c      	ldr	r4, [r5, #4]
 800adcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adce:	07db      	lsls	r3, r3, #31
 800add0:	d405      	bmi.n	800adde <_puts_r+0x36>
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	0598      	lsls	r0, r3, #22
 800add6:	d402      	bmi.n	800adde <_puts_r+0x36>
 800add8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adda:	f7ff ff20 	bl	800ac1e <__retarget_lock_acquire_recursive>
 800adde:	89a3      	ldrh	r3, [r4, #12]
 800ade0:	0719      	lsls	r1, r3, #28
 800ade2:	d51d      	bpl.n	800ae20 <_puts_r+0x78>
 800ade4:	6923      	ldr	r3, [r4, #16]
 800ade6:	b1db      	cbz	r3, 800ae20 <_puts_r+0x78>
 800ade8:	3e01      	subs	r6, #1
 800adea:	68a3      	ldr	r3, [r4, #8]
 800adec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800adf0:	3b01      	subs	r3, #1
 800adf2:	60a3      	str	r3, [r4, #8]
 800adf4:	bb39      	cbnz	r1, 800ae46 <_puts_r+0x9e>
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	da38      	bge.n	800ae6c <_puts_r+0xc4>
 800adfa:	4622      	mov	r2, r4
 800adfc:	210a      	movs	r1, #10
 800adfe:	4628      	mov	r0, r5
 800ae00:	f000 f906 	bl	800b010 <__swbuf_r>
 800ae04:	3001      	adds	r0, #1
 800ae06:	d011      	beq.n	800ae2c <_puts_r+0x84>
 800ae08:	250a      	movs	r5, #10
 800ae0a:	e011      	b.n	800ae30 <_puts_r+0x88>
 800ae0c:	4b1b      	ldr	r3, [pc, #108]	; (800ae7c <_puts_r+0xd4>)
 800ae0e:	429c      	cmp	r4, r3
 800ae10:	d101      	bne.n	800ae16 <_puts_r+0x6e>
 800ae12:	68ac      	ldr	r4, [r5, #8]
 800ae14:	e7da      	b.n	800adcc <_puts_r+0x24>
 800ae16:	4b1a      	ldr	r3, [pc, #104]	; (800ae80 <_puts_r+0xd8>)
 800ae18:	429c      	cmp	r4, r3
 800ae1a:	bf08      	it	eq
 800ae1c:	68ec      	ldreq	r4, [r5, #12]
 800ae1e:	e7d5      	b.n	800adcc <_puts_r+0x24>
 800ae20:	4621      	mov	r1, r4
 800ae22:	4628      	mov	r0, r5
 800ae24:	f000 f958 	bl	800b0d8 <__swsetup_r>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d0dd      	beq.n	800ade8 <_puts_r+0x40>
 800ae2c:	f04f 35ff 	mov.w	r5, #4294967295
 800ae30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae32:	07da      	lsls	r2, r3, #31
 800ae34:	d405      	bmi.n	800ae42 <_puts_r+0x9a>
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	059b      	lsls	r3, r3, #22
 800ae3a:	d402      	bmi.n	800ae42 <_puts_r+0x9a>
 800ae3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae3e:	f7ff feef 	bl	800ac20 <__retarget_lock_release_recursive>
 800ae42:	4628      	mov	r0, r5
 800ae44:	bd70      	pop	{r4, r5, r6, pc}
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	da04      	bge.n	800ae54 <_puts_r+0xac>
 800ae4a:	69a2      	ldr	r2, [r4, #24]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	dc06      	bgt.n	800ae5e <_puts_r+0xb6>
 800ae50:	290a      	cmp	r1, #10
 800ae52:	d004      	beq.n	800ae5e <_puts_r+0xb6>
 800ae54:	6823      	ldr	r3, [r4, #0]
 800ae56:	1c5a      	adds	r2, r3, #1
 800ae58:	6022      	str	r2, [r4, #0]
 800ae5a:	7019      	strb	r1, [r3, #0]
 800ae5c:	e7c5      	b.n	800adea <_puts_r+0x42>
 800ae5e:	4622      	mov	r2, r4
 800ae60:	4628      	mov	r0, r5
 800ae62:	f000 f8d5 	bl	800b010 <__swbuf_r>
 800ae66:	3001      	adds	r0, #1
 800ae68:	d1bf      	bne.n	800adea <_puts_r+0x42>
 800ae6a:	e7df      	b.n	800ae2c <_puts_r+0x84>
 800ae6c:	6823      	ldr	r3, [r4, #0]
 800ae6e:	250a      	movs	r5, #10
 800ae70:	1c5a      	adds	r2, r3, #1
 800ae72:	6022      	str	r2, [r4, #0]
 800ae74:	701d      	strb	r5, [r3, #0]
 800ae76:	e7db      	b.n	800ae30 <_puts_r+0x88>
 800ae78:	0800be60 	.word	0x0800be60
 800ae7c:	0800be80 	.word	0x0800be80
 800ae80:	0800be40 	.word	0x0800be40

0800ae84 <puts>:
 800ae84:	4b02      	ldr	r3, [pc, #8]	; (800ae90 <puts+0xc>)
 800ae86:	4601      	mov	r1, r0
 800ae88:	6818      	ldr	r0, [r3, #0]
 800ae8a:	f7ff bf8d 	b.w	800ada8 <_puts_r>
 800ae8e:	bf00      	nop
 800ae90:	20000040 	.word	0x20000040

0800ae94 <cleanup_glue>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	460c      	mov	r4, r1
 800ae98:	6809      	ldr	r1, [r1, #0]
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	b109      	cbz	r1, 800aea2 <cleanup_glue+0xe>
 800ae9e:	f7ff fff9 	bl	800ae94 <cleanup_glue>
 800aea2:	4621      	mov	r1, r4
 800aea4:	4628      	mov	r0, r5
 800aea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aeaa:	f000 bad9 	b.w	800b460 <_free_r>
	...

0800aeb0 <_reclaim_reent>:
 800aeb0:	4b2c      	ldr	r3, [pc, #176]	; (800af64 <_reclaim_reent+0xb4>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4283      	cmp	r3, r0
 800aeb6:	b570      	push	{r4, r5, r6, lr}
 800aeb8:	4604      	mov	r4, r0
 800aeba:	d051      	beq.n	800af60 <_reclaim_reent+0xb0>
 800aebc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aebe:	b143      	cbz	r3, 800aed2 <_reclaim_reent+0x22>
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d14a      	bne.n	800af5c <_reclaim_reent+0xac>
 800aec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aec8:	6819      	ldr	r1, [r3, #0]
 800aeca:	b111      	cbz	r1, 800aed2 <_reclaim_reent+0x22>
 800aecc:	4620      	mov	r0, r4
 800aece:	f000 fac7 	bl	800b460 <_free_r>
 800aed2:	6961      	ldr	r1, [r4, #20]
 800aed4:	b111      	cbz	r1, 800aedc <_reclaim_reent+0x2c>
 800aed6:	4620      	mov	r0, r4
 800aed8:	f000 fac2 	bl	800b460 <_free_r>
 800aedc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aede:	b111      	cbz	r1, 800aee6 <_reclaim_reent+0x36>
 800aee0:	4620      	mov	r0, r4
 800aee2:	f000 fabd 	bl	800b460 <_free_r>
 800aee6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aee8:	b111      	cbz	r1, 800aef0 <_reclaim_reent+0x40>
 800aeea:	4620      	mov	r0, r4
 800aeec:	f000 fab8 	bl	800b460 <_free_r>
 800aef0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800aef2:	b111      	cbz	r1, 800aefa <_reclaim_reent+0x4a>
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 fab3 	bl	800b460 <_free_r>
 800aefa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800aefc:	b111      	cbz	r1, 800af04 <_reclaim_reent+0x54>
 800aefe:	4620      	mov	r0, r4
 800af00:	f000 faae 	bl	800b460 <_free_r>
 800af04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800af06:	b111      	cbz	r1, 800af0e <_reclaim_reent+0x5e>
 800af08:	4620      	mov	r0, r4
 800af0a:	f000 faa9 	bl	800b460 <_free_r>
 800af0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800af10:	b111      	cbz	r1, 800af18 <_reclaim_reent+0x68>
 800af12:	4620      	mov	r0, r4
 800af14:	f000 faa4 	bl	800b460 <_free_r>
 800af18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af1a:	b111      	cbz	r1, 800af22 <_reclaim_reent+0x72>
 800af1c:	4620      	mov	r0, r4
 800af1e:	f000 fa9f 	bl	800b460 <_free_r>
 800af22:	69a3      	ldr	r3, [r4, #24]
 800af24:	b1e3      	cbz	r3, 800af60 <_reclaim_reent+0xb0>
 800af26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800af28:	4620      	mov	r0, r4
 800af2a:	4798      	blx	r3
 800af2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800af2e:	b1b9      	cbz	r1, 800af60 <_reclaim_reent+0xb0>
 800af30:	4620      	mov	r0, r4
 800af32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af36:	f7ff bfad 	b.w	800ae94 <cleanup_glue>
 800af3a:	5949      	ldr	r1, [r1, r5]
 800af3c:	b941      	cbnz	r1, 800af50 <_reclaim_reent+0xa0>
 800af3e:	3504      	adds	r5, #4
 800af40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af42:	2d80      	cmp	r5, #128	; 0x80
 800af44:	68d9      	ldr	r1, [r3, #12]
 800af46:	d1f8      	bne.n	800af3a <_reclaim_reent+0x8a>
 800af48:	4620      	mov	r0, r4
 800af4a:	f000 fa89 	bl	800b460 <_free_r>
 800af4e:	e7ba      	b.n	800aec6 <_reclaim_reent+0x16>
 800af50:	680e      	ldr	r6, [r1, #0]
 800af52:	4620      	mov	r0, r4
 800af54:	f000 fa84 	bl	800b460 <_free_r>
 800af58:	4631      	mov	r1, r6
 800af5a:	e7ef      	b.n	800af3c <_reclaim_reent+0x8c>
 800af5c:	2500      	movs	r5, #0
 800af5e:	e7ef      	b.n	800af40 <_reclaim_reent+0x90>
 800af60:	bd70      	pop	{r4, r5, r6, pc}
 800af62:	bf00      	nop
 800af64:	20000040 	.word	0x20000040

0800af68 <_sbrk_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4d06      	ldr	r5, [pc, #24]	; (800af84 <_sbrk_r+0x1c>)
 800af6c:	2300      	movs	r3, #0
 800af6e:	4604      	mov	r4, r0
 800af70:	4608      	mov	r0, r1
 800af72:	602b      	str	r3, [r5, #0]
 800af74:	f7f6 fbcc 	bl	8001710 <_sbrk>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d102      	bne.n	800af82 <_sbrk_r+0x1a>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	b103      	cbz	r3, 800af82 <_sbrk_r+0x1a>
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	2000533c 	.word	0x2000533c

0800af88 <__sread>:
 800af88:	b510      	push	{r4, lr}
 800af8a:	460c      	mov	r4, r1
 800af8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af90:	f000 fda0 	bl	800bad4 <_read_r>
 800af94:	2800      	cmp	r0, #0
 800af96:	bfab      	itete	ge
 800af98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af9a:	89a3      	ldrhlt	r3, [r4, #12]
 800af9c:	181b      	addge	r3, r3, r0
 800af9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afa2:	bfac      	ite	ge
 800afa4:	6563      	strge	r3, [r4, #84]	; 0x54
 800afa6:	81a3      	strhlt	r3, [r4, #12]
 800afa8:	bd10      	pop	{r4, pc}

0800afaa <__swrite>:
 800afaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afae:	461f      	mov	r7, r3
 800afb0:	898b      	ldrh	r3, [r1, #12]
 800afb2:	05db      	lsls	r3, r3, #23
 800afb4:	4605      	mov	r5, r0
 800afb6:	460c      	mov	r4, r1
 800afb8:	4616      	mov	r6, r2
 800afba:	d505      	bpl.n	800afc8 <__swrite+0x1e>
 800afbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc0:	2302      	movs	r3, #2
 800afc2:	2200      	movs	r2, #0
 800afc4:	f000 f9c8 	bl	800b358 <_lseek_r>
 800afc8:	89a3      	ldrh	r3, [r4, #12]
 800afca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afd2:	81a3      	strh	r3, [r4, #12]
 800afd4:	4632      	mov	r2, r6
 800afd6:	463b      	mov	r3, r7
 800afd8:	4628      	mov	r0, r5
 800afda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afde:	f000 b869 	b.w	800b0b4 <_write_r>

0800afe2 <__sseek>:
 800afe2:	b510      	push	{r4, lr}
 800afe4:	460c      	mov	r4, r1
 800afe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afea:	f000 f9b5 	bl	800b358 <_lseek_r>
 800afee:	1c43      	adds	r3, r0, #1
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	bf15      	itete	ne
 800aff4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800affa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800affe:	81a3      	strheq	r3, [r4, #12]
 800b000:	bf18      	it	ne
 800b002:	81a3      	strhne	r3, [r4, #12]
 800b004:	bd10      	pop	{r4, pc}

0800b006 <__sclose>:
 800b006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b00a:	f000 b8d3 	b.w	800b1b4 <_close_r>
	...

0800b010 <__swbuf_r>:
 800b010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b012:	460e      	mov	r6, r1
 800b014:	4614      	mov	r4, r2
 800b016:	4605      	mov	r5, r0
 800b018:	b118      	cbz	r0, 800b022 <__swbuf_r+0x12>
 800b01a:	6983      	ldr	r3, [r0, #24]
 800b01c:	b90b      	cbnz	r3, 800b022 <__swbuf_r+0x12>
 800b01e:	f7ff fd3b 	bl	800aa98 <__sinit>
 800b022:	4b21      	ldr	r3, [pc, #132]	; (800b0a8 <__swbuf_r+0x98>)
 800b024:	429c      	cmp	r4, r3
 800b026:	d12b      	bne.n	800b080 <__swbuf_r+0x70>
 800b028:	686c      	ldr	r4, [r5, #4]
 800b02a:	69a3      	ldr	r3, [r4, #24]
 800b02c:	60a3      	str	r3, [r4, #8]
 800b02e:	89a3      	ldrh	r3, [r4, #12]
 800b030:	071a      	lsls	r2, r3, #28
 800b032:	d52f      	bpl.n	800b094 <__swbuf_r+0x84>
 800b034:	6923      	ldr	r3, [r4, #16]
 800b036:	b36b      	cbz	r3, 800b094 <__swbuf_r+0x84>
 800b038:	6923      	ldr	r3, [r4, #16]
 800b03a:	6820      	ldr	r0, [r4, #0]
 800b03c:	1ac0      	subs	r0, r0, r3
 800b03e:	6963      	ldr	r3, [r4, #20]
 800b040:	b2f6      	uxtb	r6, r6
 800b042:	4283      	cmp	r3, r0
 800b044:	4637      	mov	r7, r6
 800b046:	dc04      	bgt.n	800b052 <__swbuf_r+0x42>
 800b048:	4621      	mov	r1, r4
 800b04a:	4628      	mov	r0, r5
 800b04c:	f000 f948 	bl	800b2e0 <_fflush_r>
 800b050:	bb30      	cbnz	r0, 800b0a0 <__swbuf_r+0x90>
 800b052:	68a3      	ldr	r3, [r4, #8]
 800b054:	3b01      	subs	r3, #1
 800b056:	60a3      	str	r3, [r4, #8]
 800b058:	6823      	ldr	r3, [r4, #0]
 800b05a:	1c5a      	adds	r2, r3, #1
 800b05c:	6022      	str	r2, [r4, #0]
 800b05e:	701e      	strb	r6, [r3, #0]
 800b060:	6963      	ldr	r3, [r4, #20]
 800b062:	3001      	adds	r0, #1
 800b064:	4283      	cmp	r3, r0
 800b066:	d004      	beq.n	800b072 <__swbuf_r+0x62>
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	07db      	lsls	r3, r3, #31
 800b06c:	d506      	bpl.n	800b07c <__swbuf_r+0x6c>
 800b06e:	2e0a      	cmp	r6, #10
 800b070:	d104      	bne.n	800b07c <__swbuf_r+0x6c>
 800b072:	4621      	mov	r1, r4
 800b074:	4628      	mov	r0, r5
 800b076:	f000 f933 	bl	800b2e0 <_fflush_r>
 800b07a:	b988      	cbnz	r0, 800b0a0 <__swbuf_r+0x90>
 800b07c:	4638      	mov	r0, r7
 800b07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b080:	4b0a      	ldr	r3, [pc, #40]	; (800b0ac <__swbuf_r+0x9c>)
 800b082:	429c      	cmp	r4, r3
 800b084:	d101      	bne.n	800b08a <__swbuf_r+0x7a>
 800b086:	68ac      	ldr	r4, [r5, #8]
 800b088:	e7cf      	b.n	800b02a <__swbuf_r+0x1a>
 800b08a:	4b09      	ldr	r3, [pc, #36]	; (800b0b0 <__swbuf_r+0xa0>)
 800b08c:	429c      	cmp	r4, r3
 800b08e:	bf08      	it	eq
 800b090:	68ec      	ldreq	r4, [r5, #12]
 800b092:	e7ca      	b.n	800b02a <__swbuf_r+0x1a>
 800b094:	4621      	mov	r1, r4
 800b096:	4628      	mov	r0, r5
 800b098:	f000 f81e 	bl	800b0d8 <__swsetup_r>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	d0cb      	beq.n	800b038 <__swbuf_r+0x28>
 800b0a0:	f04f 37ff 	mov.w	r7, #4294967295
 800b0a4:	e7ea      	b.n	800b07c <__swbuf_r+0x6c>
 800b0a6:	bf00      	nop
 800b0a8:	0800be60 	.word	0x0800be60
 800b0ac:	0800be80 	.word	0x0800be80
 800b0b0:	0800be40 	.word	0x0800be40

0800b0b4 <_write_r>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	4d07      	ldr	r5, [pc, #28]	; (800b0d4 <_write_r+0x20>)
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	4608      	mov	r0, r1
 800b0bc:	4611      	mov	r1, r2
 800b0be:	2200      	movs	r2, #0
 800b0c0:	602a      	str	r2, [r5, #0]
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	f7f6 f904 	bl	80012d0 <_write>
 800b0c8:	1c43      	adds	r3, r0, #1
 800b0ca:	d102      	bne.n	800b0d2 <_write_r+0x1e>
 800b0cc:	682b      	ldr	r3, [r5, #0]
 800b0ce:	b103      	cbz	r3, 800b0d2 <_write_r+0x1e>
 800b0d0:	6023      	str	r3, [r4, #0]
 800b0d2:	bd38      	pop	{r3, r4, r5, pc}
 800b0d4:	2000533c 	.word	0x2000533c

0800b0d8 <__swsetup_r>:
 800b0d8:	4b32      	ldr	r3, [pc, #200]	; (800b1a4 <__swsetup_r+0xcc>)
 800b0da:	b570      	push	{r4, r5, r6, lr}
 800b0dc:	681d      	ldr	r5, [r3, #0]
 800b0de:	4606      	mov	r6, r0
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	b125      	cbz	r5, 800b0ee <__swsetup_r+0x16>
 800b0e4:	69ab      	ldr	r3, [r5, #24]
 800b0e6:	b913      	cbnz	r3, 800b0ee <__swsetup_r+0x16>
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	f7ff fcd5 	bl	800aa98 <__sinit>
 800b0ee:	4b2e      	ldr	r3, [pc, #184]	; (800b1a8 <__swsetup_r+0xd0>)
 800b0f0:	429c      	cmp	r4, r3
 800b0f2:	d10f      	bne.n	800b114 <__swsetup_r+0x3c>
 800b0f4:	686c      	ldr	r4, [r5, #4]
 800b0f6:	89a3      	ldrh	r3, [r4, #12]
 800b0f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0fc:	0719      	lsls	r1, r3, #28
 800b0fe:	d42c      	bmi.n	800b15a <__swsetup_r+0x82>
 800b100:	06dd      	lsls	r5, r3, #27
 800b102:	d411      	bmi.n	800b128 <__swsetup_r+0x50>
 800b104:	2309      	movs	r3, #9
 800b106:	6033      	str	r3, [r6, #0]
 800b108:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b10c:	81a3      	strh	r3, [r4, #12]
 800b10e:	f04f 30ff 	mov.w	r0, #4294967295
 800b112:	e03e      	b.n	800b192 <__swsetup_r+0xba>
 800b114:	4b25      	ldr	r3, [pc, #148]	; (800b1ac <__swsetup_r+0xd4>)
 800b116:	429c      	cmp	r4, r3
 800b118:	d101      	bne.n	800b11e <__swsetup_r+0x46>
 800b11a:	68ac      	ldr	r4, [r5, #8]
 800b11c:	e7eb      	b.n	800b0f6 <__swsetup_r+0x1e>
 800b11e:	4b24      	ldr	r3, [pc, #144]	; (800b1b0 <__swsetup_r+0xd8>)
 800b120:	429c      	cmp	r4, r3
 800b122:	bf08      	it	eq
 800b124:	68ec      	ldreq	r4, [r5, #12]
 800b126:	e7e6      	b.n	800b0f6 <__swsetup_r+0x1e>
 800b128:	0758      	lsls	r0, r3, #29
 800b12a:	d512      	bpl.n	800b152 <__swsetup_r+0x7a>
 800b12c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b12e:	b141      	cbz	r1, 800b142 <__swsetup_r+0x6a>
 800b130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b134:	4299      	cmp	r1, r3
 800b136:	d002      	beq.n	800b13e <__swsetup_r+0x66>
 800b138:	4630      	mov	r0, r6
 800b13a:	f000 f991 	bl	800b460 <_free_r>
 800b13e:	2300      	movs	r3, #0
 800b140:	6363      	str	r3, [r4, #52]	; 0x34
 800b142:	89a3      	ldrh	r3, [r4, #12]
 800b144:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b148:	81a3      	strh	r3, [r4, #12]
 800b14a:	2300      	movs	r3, #0
 800b14c:	6063      	str	r3, [r4, #4]
 800b14e:	6923      	ldr	r3, [r4, #16]
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	f043 0308 	orr.w	r3, r3, #8
 800b158:	81a3      	strh	r3, [r4, #12]
 800b15a:	6923      	ldr	r3, [r4, #16]
 800b15c:	b94b      	cbnz	r3, 800b172 <__swsetup_r+0x9a>
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b168:	d003      	beq.n	800b172 <__swsetup_r+0x9a>
 800b16a:	4621      	mov	r1, r4
 800b16c:	4630      	mov	r0, r6
 800b16e:	f000 f92b 	bl	800b3c8 <__smakebuf_r>
 800b172:	89a0      	ldrh	r0, [r4, #12]
 800b174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b178:	f010 0301 	ands.w	r3, r0, #1
 800b17c:	d00a      	beq.n	800b194 <__swsetup_r+0xbc>
 800b17e:	2300      	movs	r3, #0
 800b180:	60a3      	str	r3, [r4, #8]
 800b182:	6963      	ldr	r3, [r4, #20]
 800b184:	425b      	negs	r3, r3
 800b186:	61a3      	str	r3, [r4, #24]
 800b188:	6923      	ldr	r3, [r4, #16]
 800b18a:	b943      	cbnz	r3, 800b19e <__swsetup_r+0xc6>
 800b18c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b190:	d1ba      	bne.n	800b108 <__swsetup_r+0x30>
 800b192:	bd70      	pop	{r4, r5, r6, pc}
 800b194:	0781      	lsls	r1, r0, #30
 800b196:	bf58      	it	pl
 800b198:	6963      	ldrpl	r3, [r4, #20]
 800b19a:	60a3      	str	r3, [r4, #8]
 800b19c:	e7f4      	b.n	800b188 <__swsetup_r+0xb0>
 800b19e:	2000      	movs	r0, #0
 800b1a0:	e7f7      	b.n	800b192 <__swsetup_r+0xba>
 800b1a2:	bf00      	nop
 800b1a4:	20000040 	.word	0x20000040
 800b1a8:	0800be60 	.word	0x0800be60
 800b1ac:	0800be80 	.word	0x0800be80
 800b1b0:	0800be40 	.word	0x0800be40

0800b1b4 <_close_r>:
 800b1b4:	b538      	push	{r3, r4, r5, lr}
 800b1b6:	4d06      	ldr	r5, [pc, #24]	; (800b1d0 <_close_r+0x1c>)
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	4608      	mov	r0, r1
 800b1be:	602b      	str	r3, [r5, #0]
 800b1c0:	f7f6 fa71 	bl	80016a6 <_close>
 800b1c4:	1c43      	adds	r3, r0, #1
 800b1c6:	d102      	bne.n	800b1ce <_close_r+0x1a>
 800b1c8:	682b      	ldr	r3, [r5, #0]
 800b1ca:	b103      	cbz	r3, 800b1ce <_close_r+0x1a>
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	bd38      	pop	{r3, r4, r5, pc}
 800b1d0:	2000533c 	.word	0x2000533c

0800b1d4 <__sflush_r>:
 800b1d4:	898a      	ldrh	r2, [r1, #12]
 800b1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1da:	4605      	mov	r5, r0
 800b1dc:	0710      	lsls	r0, r2, #28
 800b1de:	460c      	mov	r4, r1
 800b1e0:	d458      	bmi.n	800b294 <__sflush_r+0xc0>
 800b1e2:	684b      	ldr	r3, [r1, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	dc05      	bgt.n	800b1f4 <__sflush_r+0x20>
 800b1e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	dc02      	bgt.n	800b1f4 <__sflush_r+0x20>
 800b1ee:	2000      	movs	r0, #0
 800b1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1f6:	2e00      	cmp	r6, #0
 800b1f8:	d0f9      	beq.n	800b1ee <__sflush_r+0x1a>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b200:	682f      	ldr	r7, [r5, #0]
 800b202:	602b      	str	r3, [r5, #0]
 800b204:	d032      	beq.n	800b26c <__sflush_r+0x98>
 800b206:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	075a      	lsls	r2, r3, #29
 800b20c:	d505      	bpl.n	800b21a <__sflush_r+0x46>
 800b20e:	6863      	ldr	r3, [r4, #4]
 800b210:	1ac0      	subs	r0, r0, r3
 800b212:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b214:	b10b      	cbz	r3, 800b21a <__sflush_r+0x46>
 800b216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b218:	1ac0      	subs	r0, r0, r3
 800b21a:	2300      	movs	r3, #0
 800b21c:	4602      	mov	r2, r0
 800b21e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b220:	6a21      	ldr	r1, [r4, #32]
 800b222:	4628      	mov	r0, r5
 800b224:	47b0      	blx	r6
 800b226:	1c43      	adds	r3, r0, #1
 800b228:	89a3      	ldrh	r3, [r4, #12]
 800b22a:	d106      	bne.n	800b23a <__sflush_r+0x66>
 800b22c:	6829      	ldr	r1, [r5, #0]
 800b22e:	291d      	cmp	r1, #29
 800b230:	d82c      	bhi.n	800b28c <__sflush_r+0xb8>
 800b232:	4a2a      	ldr	r2, [pc, #168]	; (800b2dc <__sflush_r+0x108>)
 800b234:	40ca      	lsrs	r2, r1
 800b236:	07d6      	lsls	r6, r2, #31
 800b238:	d528      	bpl.n	800b28c <__sflush_r+0xb8>
 800b23a:	2200      	movs	r2, #0
 800b23c:	6062      	str	r2, [r4, #4]
 800b23e:	04d9      	lsls	r1, r3, #19
 800b240:	6922      	ldr	r2, [r4, #16]
 800b242:	6022      	str	r2, [r4, #0]
 800b244:	d504      	bpl.n	800b250 <__sflush_r+0x7c>
 800b246:	1c42      	adds	r2, r0, #1
 800b248:	d101      	bne.n	800b24e <__sflush_r+0x7a>
 800b24a:	682b      	ldr	r3, [r5, #0]
 800b24c:	b903      	cbnz	r3, 800b250 <__sflush_r+0x7c>
 800b24e:	6560      	str	r0, [r4, #84]	; 0x54
 800b250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b252:	602f      	str	r7, [r5, #0]
 800b254:	2900      	cmp	r1, #0
 800b256:	d0ca      	beq.n	800b1ee <__sflush_r+0x1a>
 800b258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b25c:	4299      	cmp	r1, r3
 800b25e:	d002      	beq.n	800b266 <__sflush_r+0x92>
 800b260:	4628      	mov	r0, r5
 800b262:	f000 f8fd 	bl	800b460 <_free_r>
 800b266:	2000      	movs	r0, #0
 800b268:	6360      	str	r0, [r4, #52]	; 0x34
 800b26a:	e7c1      	b.n	800b1f0 <__sflush_r+0x1c>
 800b26c:	6a21      	ldr	r1, [r4, #32]
 800b26e:	2301      	movs	r3, #1
 800b270:	4628      	mov	r0, r5
 800b272:	47b0      	blx	r6
 800b274:	1c41      	adds	r1, r0, #1
 800b276:	d1c7      	bne.n	800b208 <__sflush_r+0x34>
 800b278:	682b      	ldr	r3, [r5, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d0c4      	beq.n	800b208 <__sflush_r+0x34>
 800b27e:	2b1d      	cmp	r3, #29
 800b280:	d001      	beq.n	800b286 <__sflush_r+0xb2>
 800b282:	2b16      	cmp	r3, #22
 800b284:	d101      	bne.n	800b28a <__sflush_r+0xb6>
 800b286:	602f      	str	r7, [r5, #0]
 800b288:	e7b1      	b.n	800b1ee <__sflush_r+0x1a>
 800b28a:	89a3      	ldrh	r3, [r4, #12]
 800b28c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b290:	81a3      	strh	r3, [r4, #12]
 800b292:	e7ad      	b.n	800b1f0 <__sflush_r+0x1c>
 800b294:	690f      	ldr	r7, [r1, #16]
 800b296:	2f00      	cmp	r7, #0
 800b298:	d0a9      	beq.n	800b1ee <__sflush_r+0x1a>
 800b29a:	0793      	lsls	r3, r2, #30
 800b29c:	680e      	ldr	r6, [r1, #0]
 800b29e:	bf08      	it	eq
 800b2a0:	694b      	ldreq	r3, [r1, #20]
 800b2a2:	600f      	str	r7, [r1, #0]
 800b2a4:	bf18      	it	ne
 800b2a6:	2300      	movne	r3, #0
 800b2a8:	eba6 0807 	sub.w	r8, r6, r7
 800b2ac:	608b      	str	r3, [r1, #8]
 800b2ae:	f1b8 0f00 	cmp.w	r8, #0
 800b2b2:	dd9c      	ble.n	800b1ee <__sflush_r+0x1a>
 800b2b4:	6a21      	ldr	r1, [r4, #32]
 800b2b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2b8:	4643      	mov	r3, r8
 800b2ba:	463a      	mov	r2, r7
 800b2bc:	4628      	mov	r0, r5
 800b2be:	47b0      	blx	r6
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	dc06      	bgt.n	800b2d2 <__sflush_r+0xfe>
 800b2c4:	89a3      	ldrh	r3, [r4, #12]
 800b2c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ca:	81a3      	strh	r3, [r4, #12]
 800b2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d0:	e78e      	b.n	800b1f0 <__sflush_r+0x1c>
 800b2d2:	4407      	add	r7, r0
 800b2d4:	eba8 0800 	sub.w	r8, r8, r0
 800b2d8:	e7e9      	b.n	800b2ae <__sflush_r+0xda>
 800b2da:	bf00      	nop
 800b2dc:	20400001 	.word	0x20400001

0800b2e0 <_fflush_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	690b      	ldr	r3, [r1, #16]
 800b2e4:	4605      	mov	r5, r0
 800b2e6:	460c      	mov	r4, r1
 800b2e8:	b913      	cbnz	r3, 800b2f0 <_fflush_r+0x10>
 800b2ea:	2500      	movs	r5, #0
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	bd38      	pop	{r3, r4, r5, pc}
 800b2f0:	b118      	cbz	r0, 800b2fa <_fflush_r+0x1a>
 800b2f2:	6983      	ldr	r3, [r0, #24]
 800b2f4:	b90b      	cbnz	r3, 800b2fa <_fflush_r+0x1a>
 800b2f6:	f7ff fbcf 	bl	800aa98 <__sinit>
 800b2fa:	4b14      	ldr	r3, [pc, #80]	; (800b34c <_fflush_r+0x6c>)
 800b2fc:	429c      	cmp	r4, r3
 800b2fe:	d11b      	bne.n	800b338 <_fflush_r+0x58>
 800b300:	686c      	ldr	r4, [r5, #4]
 800b302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d0ef      	beq.n	800b2ea <_fflush_r+0xa>
 800b30a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b30c:	07d0      	lsls	r0, r2, #31
 800b30e:	d404      	bmi.n	800b31a <_fflush_r+0x3a>
 800b310:	0599      	lsls	r1, r3, #22
 800b312:	d402      	bmi.n	800b31a <_fflush_r+0x3a>
 800b314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b316:	f7ff fc82 	bl	800ac1e <__retarget_lock_acquire_recursive>
 800b31a:	4628      	mov	r0, r5
 800b31c:	4621      	mov	r1, r4
 800b31e:	f7ff ff59 	bl	800b1d4 <__sflush_r>
 800b322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b324:	07da      	lsls	r2, r3, #31
 800b326:	4605      	mov	r5, r0
 800b328:	d4e0      	bmi.n	800b2ec <_fflush_r+0xc>
 800b32a:	89a3      	ldrh	r3, [r4, #12]
 800b32c:	059b      	lsls	r3, r3, #22
 800b32e:	d4dd      	bmi.n	800b2ec <_fflush_r+0xc>
 800b330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b332:	f7ff fc75 	bl	800ac20 <__retarget_lock_release_recursive>
 800b336:	e7d9      	b.n	800b2ec <_fflush_r+0xc>
 800b338:	4b05      	ldr	r3, [pc, #20]	; (800b350 <_fflush_r+0x70>)
 800b33a:	429c      	cmp	r4, r3
 800b33c:	d101      	bne.n	800b342 <_fflush_r+0x62>
 800b33e:	68ac      	ldr	r4, [r5, #8]
 800b340:	e7df      	b.n	800b302 <_fflush_r+0x22>
 800b342:	4b04      	ldr	r3, [pc, #16]	; (800b354 <_fflush_r+0x74>)
 800b344:	429c      	cmp	r4, r3
 800b346:	bf08      	it	eq
 800b348:	68ec      	ldreq	r4, [r5, #12]
 800b34a:	e7da      	b.n	800b302 <_fflush_r+0x22>
 800b34c:	0800be60 	.word	0x0800be60
 800b350:	0800be80 	.word	0x0800be80
 800b354:	0800be40 	.word	0x0800be40

0800b358 <_lseek_r>:
 800b358:	b538      	push	{r3, r4, r5, lr}
 800b35a:	4d07      	ldr	r5, [pc, #28]	; (800b378 <_lseek_r+0x20>)
 800b35c:	4604      	mov	r4, r0
 800b35e:	4608      	mov	r0, r1
 800b360:	4611      	mov	r1, r2
 800b362:	2200      	movs	r2, #0
 800b364:	602a      	str	r2, [r5, #0]
 800b366:	461a      	mov	r2, r3
 800b368:	f7f6 f9c4 	bl	80016f4 <_lseek>
 800b36c:	1c43      	adds	r3, r0, #1
 800b36e:	d102      	bne.n	800b376 <_lseek_r+0x1e>
 800b370:	682b      	ldr	r3, [r5, #0]
 800b372:	b103      	cbz	r3, 800b376 <_lseek_r+0x1e>
 800b374:	6023      	str	r3, [r4, #0]
 800b376:	bd38      	pop	{r3, r4, r5, pc}
 800b378:	2000533c 	.word	0x2000533c

0800b37c <__swhatbuf_r>:
 800b37c:	b570      	push	{r4, r5, r6, lr}
 800b37e:	460e      	mov	r6, r1
 800b380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b384:	2900      	cmp	r1, #0
 800b386:	b096      	sub	sp, #88	; 0x58
 800b388:	4614      	mov	r4, r2
 800b38a:	461d      	mov	r5, r3
 800b38c:	da08      	bge.n	800b3a0 <__swhatbuf_r+0x24>
 800b38e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b392:	2200      	movs	r2, #0
 800b394:	602a      	str	r2, [r5, #0]
 800b396:	061a      	lsls	r2, r3, #24
 800b398:	d410      	bmi.n	800b3bc <__swhatbuf_r+0x40>
 800b39a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b39e:	e00e      	b.n	800b3be <__swhatbuf_r+0x42>
 800b3a0:	466a      	mov	r2, sp
 800b3a2:	f000 fba9 	bl	800baf8 <_fstat_r>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	dbf1      	blt.n	800b38e <__swhatbuf_r+0x12>
 800b3aa:	9a01      	ldr	r2, [sp, #4]
 800b3ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3b4:	425a      	negs	r2, r3
 800b3b6:	415a      	adcs	r2, r3
 800b3b8:	602a      	str	r2, [r5, #0]
 800b3ba:	e7ee      	b.n	800b39a <__swhatbuf_r+0x1e>
 800b3bc:	2340      	movs	r3, #64	; 0x40
 800b3be:	2000      	movs	r0, #0
 800b3c0:	6023      	str	r3, [r4, #0]
 800b3c2:	b016      	add	sp, #88	; 0x58
 800b3c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b3c8 <__smakebuf_r>:
 800b3c8:	898b      	ldrh	r3, [r1, #12]
 800b3ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3cc:	079d      	lsls	r5, r3, #30
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	460c      	mov	r4, r1
 800b3d2:	d507      	bpl.n	800b3e4 <__smakebuf_r+0x1c>
 800b3d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3d8:	6023      	str	r3, [r4, #0]
 800b3da:	6123      	str	r3, [r4, #16]
 800b3dc:	2301      	movs	r3, #1
 800b3de:	6163      	str	r3, [r4, #20]
 800b3e0:	b002      	add	sp, #8
 800b3e2:	bd70      	pop	{r4, r5, r6, pc}
 800b3e4:	ab01      	add	r3, sp, #4
 800b3e6:	466a      	mov	r2, sp
 800b3e8:	f7ff ffc8 	bl	800b37c <__swhatbuf_r>
 800b3ec:	9900      	ldr	r1, [sp, #0]
 800b3ee:	4605      	mov	r5, r0
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	f7ff fc4d 	bl	800ac90 <_malloc_r>
 800b3f6:	b948      	cbnz	r0, 800b40c <__smakebuf_r+0x44>
 800b3f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3fc:	059a      	lsls	r2, r3, #22
 800b3fe:	d4ef      	bmi.n	800b3e0 <__smakebuf_r+0x18>
 800b400:	f023 0303 	bic.w	r3, r3, #3
 800b404:	f043 0302 	orr.w	r3, r3, #2
 800b408:	81a3      	strh	r3, [r4, #12]
 800b40a:	e7e3      	b.n	800b3d4 <__smakebuf_r+0xc>
 800b40c:	4b0d      	ldr	r3, [pc, #52]	; (800b444 <__smakebuf_r+0x7c>)
 800b40e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b410:	89a3      	ldrh	r3, [r4, #12]
 800b412:	6020      	str	r0, [r4, #0]
 800b414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b418:	81a3      	strh	r3, [r4, #12]
 800b41a:	9b00      	ldr	r3, [sp, #0]
 800b41c:	6163      	str	r3, [r4, #20]
 800b41e:	9b01      	ldr	r3, [sp, #4]
 800b420:	6120      	str	r0, [r4, #16]
 800b422:	b15b      	cbz	r3, 800b43c <__smakebuf_r+0x74>
 800b424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b428:	4630      	mov	r0, r6
 800b42a:	f000 fb77 	bl	800bb1c <_isatty_r>
 800b42e:	b128      	cbz	r0, 800b43c <__smakebuf_r+0x74>
 800b430:	89a3      	ldrh	r3, [r4, #12]
 800b432:	f023 0303 	bic.w	r3, r3, #3
 800b436:	f043 0301 	orr.w	r3, r3, #1
 800b43a:	81a3      	strh	r3, [r4, #12]
 800b43c:	89a0      	ldrh	r0, [r4, #12]
 800b43e:	4305      	orrs	r5, r0
 800b440:	81a5      	strh	r5, [r4, #12]
 800b442:	e7cd      	b.n	800b3e0 <__smakebuf_r+0x18>
 800b444:	0800aa31 	.word	0x0800aa31

0800b448 <__malloc_lock>:
 800b448:	4801      	ldr	r0, [pc, #4]	; (800b450 <__malloc_lock+0x8>)
 800b44a:	f7ff bbe8 	b.w	800ac1e <__retarget_lock_acquire_recursive>
 800b44e:	bf00      	nop
 800b450:	20005330 	.word	0x20005330

0800b454 <__malloc_unlock>:
 800b454:	4801      	ldr	r0, [pc, #4]	; (800b45c <__malloc_unlock+0x8>)
 800b456:	f7ff bbe3 	b.w	800ac20 <__retarget_lock_release_recursive>
 800b45a:	bf00      	nop
 800b45c:	20005330 	.word	0x20005330

0800b460 <_free_r>:
 800b460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b462:	2900      	cmp	r1, #0
 800b464:	d044      	beq.n	800b4f0 <_free_r+0x90>
 800b466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b46a:	9001      	str	r0, [sp, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f1a1 0404 	sub.w	r4, r1, #4
 800b472:	bfb8      	it	lt
 800b474:	18e4      	addlt	r4, r4, r3
 800b476:	f7ff ffe7 	bl	800b448 <__malloc_lock>
 800b47a:	4a1e      	ldr	r2, [pc, #120]	; (800b4f4 <_free_r+0x94>)
 800b47c:	9801      	ldr	r0, [sp, #4]
 800b47e:	6813      	ldr	r3, [r2, #0]
 800b480:	b933      	cbnz	r3, 800b490 <_free_r+0x30>
 800b482:	6063      	str	r3, [r4, #4]
 800b484:	6014      	str	r4, [r2, #0]
 800b486:	b003      	add	sp, #12
 800b488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b48c:	f7ff bfe2 	b.w	800b454 <__malloc_unlock>
 800b490:	42a3      	cmp	r3, r4
 800b492:	d908      	bls.n	800b4a6 <_free_r+0x46>
 800b494:	6825      	ldr	r5, [r4, #0]
 800b496:	1961      	adds	r1, r4, r5
 800b498:	428b      	cmp	r3, r1
 800b49a:	bf01      	itttt	eq
 800b49c:	6819      	ldreq	r1, [r3, #0]
 800b49e:	685b      	ldreq	r3, [r3, #4]
 800b4a0:	1949      	addeq	r1, r1, r5
 800b4a2:	6021      	streq	r1, [r4, #0]
 800b4a4:	e7ed      	b.n	800b482 <_free_r+0x22>
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	b10b      	cbz	r3, 800b4b0 <_free_r+0x50>
 800b4ac:	42a3      	cmp	r3, r4
 800b4ae:	d9fa      	bls.n	800b4a6 <_free_r+0x46>
 800b4b0:	6811      	ldr	r1, [r2, #0]
 800b4b2:	1855      	adds	r5, r2, r1
 800b4b4:	42a5      	cmp	r5, r4
 800b4b6:	d10b      	bne.n	800b4d0 <_free_r+0x70>
 800b4b8:	6824      	ldr	r4, [r4, #0]
 800b4ba:	4421      	add	r1, r4
 800b4bc:	1854      	adds	r4, r2, r1
 800b4be:	42a3      	cmp	r3, r4
 800b4c0:	6011      	str	r1, [r2, #0]
 800b4c2:	d1e0      	bne.n	800b486 <_free_r+0x26>
 800b4c4:	681c      	ldr	r4, [r3, #0]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	6053      	str	r3, [r2, #4]
 800b4ca:	4421      	add	r1, r4
 800b4cc:	6011      	str	r1, [r2, #0]
 800b4ce:	e7da      	b.n	800b486 <_free_r+0x26>
 800b4d0:	d902      	bls.n	800b4d8 <_free_r+0x78>
 800b4d2:	230c      	movs	r3, #12
 800b4d4:	6003      	str	r3, [r0, #0]
 800b4d6:	e7d6      	b.n	800b486 <_free_r+0x26>
 800b4d8:	6825      	ldr	r5, [r4, #0]
 800b4da:	1961      	adds	r1, r4, r5
 800b4dc:	428b      	cmp	r3, r1
 800b4de:	bf04      	itt	eq
 800b4e0:	6819      	ldreq	r1, [r3, #0]
 800b4e2:	685b      	ldreq	r3, [r3, #4]
 800b4e4:	6063      	str	r3, [r4, #4]
 800b4e6:	bf04      	itt	eq
 800b4e8:	1949      	addeq	r1, r1, r5
 800b4ea:	6021      	streq	r1, [r4, #0]
 800b4ec:	6054      	str	r4, [r2, #4]
 800b4ee:	e7ca      	b.n	800b486 <_free_r+0x26>
 800b4f0:	b003      	add	sp, #12
 800b4f2:	bd30      	pop	{r4, r5, pc}
 800b4f4:	20005334 	.word	0x20005334

0800b4f8 <__sfputc_r>:
 800b4f8:	6893      	ldr	r3, [r2, #8]
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	b410      	push	{r4}
 800b500:	6093      	str	r3, [r2, #8]
 800b502:	da08      	bge.n	800b516 <__sfputc_r+0x1e>
 800b504:	6994      	ldr	r4, [r2, #24]
 800b506:	42a3      	cmp	r3, r4
 800b508:	db01      	blt.n	800b50e <__sfputc_r+0x16>
 800b50a:	290a      	cmp	r1, #10
 800b50c:	d103      	bne.n	800b516 <__sfputc_r+0x1e>
 800b50e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b512:	f7ff bd7d 	b.w	800b010 <__swbuf_r>
 800b516:	6813      	ldr	r3, [r2, #0]
 800b518:	1c58      	adds	r0, r3, #1
 800b51a:	6010      	str	r0, [r2, #0]
 800b51c:	7019      	strb	r1, [r3, #0]
 800b51e:	4608      	mov	r0, r1
 800b520:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b524:	4770      	bx	lr

0800b526 <__sfputs_r>:
 800b526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b528:	4606      	mov	r6, r0
 800b52a:	460f      	mov	r7, r1
 800b52c:	4614      	mov	r4, r2
 800b52e:	18d5      	adds	r5, r2, r3
 800b530:	42ac      	cmp	r4, r5
 800b532:	d101      	bne.n	800b538 <__sfputs_r+0x12>
 800b534:	2000      	movs	r0, #0
 800b536:	e007      	b.n	800b548 <__sfputs_r+0x22>
 800b538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b53c:	463a      	mov	r2, r7
 800b53e:	4630      	mov	r0, r6
 800b540:	f7ff ffda 	bl	800b4f8 <__sfputc_r>
 800b544:	1c43      	adds	r3, r0, #1
 800b546:	d1f3      	bne.n	800b530 <__sfputs_r+0xa>
 800b548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b54c <_vfiprintf_r>:
 800b54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b550:	460d      	mov	r5, r1
 800b552:	b09d      	sub	sp, #116	; 0x74
 800b554:	4614      	mov	r4, r2
 800b556:	4698      	mov	r8, r3
 800b558:	4606      	mov	r6, r0
 800b55a:	b118      	cbz	r0, 800b564 <_vfiprintf_r+0x18>
 800b55c:	6983      	ldr	r3, [r0, #24]
 800b55e:	b90b      	cbnz	r3, 800b564 <_vfiprintf_r+0x18>
 800b560:	f7ff fa9a 	bl	800aa98 <__sinit>
 800b564:	4b89      	ldr	r3, [pc, #548]	; (800b78c <_vfiprintf_r+0x240>)
 800b566:	429d      	cmp	r5, r3
 800b568:	d11b      	bne.n	800b5a2 <_vfiprintf_r+0x56>
 800b56a:	6875      	ldr	r5, [r6, #4]
 800b56c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b56e:	07d9      	lsls	r1, r3, #31
 800b570:	d405      	bmi.n	800b57e <_vfiprintf_r+0x32>
 800b572:	89ab      	ldrh	r3, [r5, #12]
 800b574:	059a      	lsls	r2, r3, #22
 800b576:	d402      	bmi.n	800b57e <_vfiprintf_r+0x32>
 800b578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b57a:	f7ff fb50 	bl	800ac1e <__retarget_lock_acquire_recursive>
 800b57e:	89ab      	ldrh	r3, [r5, #12]
 800b580:	071b      	lsls	r3, r3, #28
 800b582:	d501      	bpl.n	800b588 <_vfiprintf_r+0x3c>
 800b584:	692b      	ldr	r3, [r5, #16]
 800b586:	b9eb      	cbnz	r3, 800b5c4 <_vfiprintf_r+0x78>
 800b588:	4629      	mov	r1, r5
 800b58a:	4630      	mov	r0, r6
 800b58c:	f7ff fda4 	bl	800b0d8 <__swsetup_r>
 800b590:	b1c0      	cbz	r0, 800b5c4 <_vfiprintf_r+0x78>
 800b592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b594:	07dc      	lsls	r4, r3, #31
 800b596:	d50e      	bpl.n	800b5b6 <_vfiprintf_r+0x6a>
 800b598:	f04f 30ff 	mov.w	r0, #4294967295
 800b59c:	b01d      	add	sp, #116	; 0x74
 800b59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a2:	4b7b      	ldr	r3, [pc, #492]	; (800b790 <_vfiprintf_r+0x244>)
 800b5a4:	429d      	cmp	r5, r3
 800b5a6:	d101      	bne.n	800b5ac <_vfiprintf_r+0x60>
 800b5a8:	68b5      	ldr	r5, [r6, #8]
 800b5aa:	e7df      	b.n	800b56c <_vfiprintf_r+0x20>
 800b5ac:	4b79      	ldr	r3, [pc, #484]	; (800b794 <_vfiprintf_r+0x248>)
 800b5ae:	429d      	cmp	r5, r3
 800b5b0:	bf08      	it	eq
 800b5b2:	68f5      	ldreq	r5, [r6, #12]
 800b5b4:	e7da      	b.n	800b56c <_vfiprintf_r+0x20>
 800b5b6:	89ab      	ldrh	r3, [r5, #12]
 800b5b8:	0598      	lsls	r0, r3, #22
 800b5ba:	d4ed      	bmi.n	800b598 <_vfiprintf_r+0x4c>
 800b5bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5be:	f7ff fb2f 	bl	800ac20 <__retarget_lock_release_recursive>
 800b5c2:	e7e9      	b.n	800b598 <_vfiprintf_r+0x4c>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b5c8:	2320      	movs	r3, #32
 800b5ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5d2:	2330      	movs	r3, #48	; 0x30
 800b5d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b798 <_vfiprintf_r+0x24c>
 800b5d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5dc:	f04f 0901 	mov.w	r9, #1
 800b5e0:	4623      	mov	r3, r4
 800b5e2:	469a      	mov	sl, r3
 800b5e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5e8:	b10a      	cbz	r2, 800b5ee <_vfiprintf_r+0xa2>
 800b5ea:	2a25      	cmp	r2, #37	; 0x25
 800b5ec:	d1f9      	bne.n	800b5e2 <_vfiprintf_r+0x96>
 800b5ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b5f2:	d00b      	beq.n	800b60c <_vfiprintf_r+0xc0>
 800b5f4:	465b      	mov	r3, fp
 800b5f6:	4622      	mov	r2, r4
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	f7ff ff93 	bl	800b526 <__sfputs_r>
 800b600:	3001      	adds	r0, #1
 800b602:	f000 80aa 	beq.w	800b75a <_vfiprintf_r+0x20e>
 800b606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b608:	445a      	add	r2, fp
 800b60a:	9209      	str	r2, [sp, #36]	; 0x24
 800b60c:	f89a 3000 	ldrb.w	r3, [sl]
 800b610:	2b00      	cmp	r3, #0
 800b612:	f000 80a2 	beq.w	800b75a <_vfiprintf_r+0x20e>
 800b616:	2300      	movs	r3, #0
 800b618:	f04f 32ff 	mov.w	r2, #4294967295
 800b61c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b620:	f10a 0a01 	add.w	sl, sl, #1
 800b624:	9304      	str	r3, [sp, #16]
 800b626:	9307      	str	r3, [sp, #28]
 800b628:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b62c:	931a      	str	r3, [sp, #104]	; 0x68
 800b62e:	4654      	mov	r4, sl
 800b630:	2205      	movs	r2, #5
 800b632:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b636:	4858      	ldr	r0, [pc, #352]	; (800b798 <_vfiprintf_r+0x24c>)
 800b638:	f7f4 fdca 	bl	80001d0 <memchr>
 800b63c:	9a04      	ldr	r2, [sp, #16]
 800b63e:	b9d8      	cbnz	r0, 800b678 <_vfiprintf_r+0x12c>
 800b640:	06d1      	lsls	r1, r2, #27
 800b642:	bf44      	itt	mi
 800b644:	2320      	movmi	r3, #32
 800b646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b64a:	0713      	lsls	r3, r2, #28
 800b64c:	bf44      	itt	mi
 800b64e:	232b      	movmi	r3, #43	; 0x2b
 800b650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b654:	f89a 3000 	ldrb.w	r3, [sl]
 800b658:	2b2a      	cmp	r3, #42	; 0x2a
 800b65a:	d015      	beq.n	800b688 <_vfiprintf_r+0x13c>
 800b65c:	9a07      	ldr	r2, [sp, #28]
 800b65e:	4654      	mov	r4, sl
 800b660:	2000      	movs	r0, #0
 800b662:	f04f 0c0a 	mov.w	ip, #10
 800b666:	4621      	mov	r1, r4
 800b668:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b66c:	3b30      	subs	r3, #48	; 0x30
 800b66e:	2b09      	cmp	r3, #9
 800b670:	d94e      	bls.n	800b710 <_vfiprintf_r+0x1c4>
 800b672:	b1b0      	cbz	r0, 800b6a2 <_vfiprintf_r+0x156>
 800b674:	9207      	str	r2, [sp, #28]
 800b676:	e014      	b.n	800b6a2 <_vfiprintf_r+0x156>
 800b678:	eba0 0308 	sub.w	r3, r0, r8
 800b67c:	fa09 f303 	lsl.w	r3, r9, r3
 800b680:	4313      	orrs	r3, r2
 800b682:	9304      	str	r3, [sp, #16]
 800b684:	46a2      	mov	sl, r4
 800b686:	e7d2      	b.n	800b62e <_vfiprintf_r+0xe2>
 800b688:	9b03      	ldr	r3, [sp, #12]
 800b68a:	1d19      	adds	r1, r3, #4
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	9103      	str	r1, [sp, #12]
 800b690:	2b00      	cmp	r3, #0
 800b692:	bfbb      	ittet	lt
 800b694:	425b      	neglt	r3, r3
 800b696:	f042 0202 	orrlt.w	r2, r2, #2
 800b69a:	9307      	strge	r3, [sp, #28]
 800b69c:	9307      	strlt	r3, [sp, #28]
 800b69e:	bfb8      	it	lt
 800b6a0:	9204      	strlt	r2, [sp, #16]
 800b6a2:	7823      	ldrb	r3, [r4, #0]
 800b6a4:	2b2e      	cmp	r3, #46	; 0x2e
 800b6a6:	d10c      	bne.n	800b6c2 <_vfiprintf_r+0x176>
 800b6a8:	7863      	ldrb	r3, [r4, #1]
 800b6aa:	2b2a      	cmp	r3, #42	; 0x2a
 800b6ac:	d135      	bne.n	800b71a <_vfiprintf_r+0x1ce>
 800b6ae:	9b03      	ldr	r3, [sp, #12]
 800b6b0:	1d1a      	adds	r2, r3, #4
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	9203      	str	r2, [sp, #12]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	bfb8      	it	lt
 800b6ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6be:	3402      	adds	r4, #2
 800b6c0:	9305      	str	r3, [sp, #20]
 800b6c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b7a8 <_vfiprintf_r+0x25c>
 800b6c6:	7821      	ldrb	r1, [r4, #0]
 800b6c8:	2203      	movs	r2, #3
 800b6ca:	4650      	mov	r0, sl
 800b6cc:	f7f4 fd80 	bl	80001d0 <memchr>
 800b6d0:	b140      	cbz	r0, 800b6e4 <_vfiprintf_r+0x198>
 800b6d2:	2340      	movs	r3, #64	; 0x40
 800b6d4:	eba0 000a 	sub.w	r0, r0, sl
 800b6d8:	fa03 f000 	lsl.w	r0, r3, r0
 800b6dc:	9b04      	ldr	r3, [sp, #16]
 800b6de:	4303      	orrs	r3, r0
 800b6e0:	3401      	adds	r4, #1
 800b6e2:	9304      	str	r3, [sp, #16]
 800b6e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6e8:	482c      	ldr	r0, [pc, #176]	; (800b79c <_vfiprintf_r+0x250>)
 800b6ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6ee:	2206      	movs	r2, #6
 800b6f0:	f7f4 fd6e 	bl	80001d0 <memchr>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d03f      	beq.n	800b778 <_vfiprintf_r+0x22c>
 800b6f8:	4b29      	ldr	r3, [pc, #164]	; (800b7a0 <_vfiprintf_r+0x254>)
 800b6fa:	bb1b      	cbnz	r3, 800b744 <_vfiprintf_r+0x1f8>
 800b6fc:	9b03      	ldr	r3, [sp, #12]
 800b6fe:	3307      	adds	r3, #7
 800b700:	f023 0307 	bic.w	r3, r3, #7
 800b704:	3308      	adds	r3, #8
 800b706:	9303      	str	r3, [sp, #12]
 800b708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b70a:	443b      	add	r3, r7
 800b70c:	9309      	str	r3, [sp, #36]	; 0x24
 800b70e:	e767      	b.n	800b5e0 <_vfiprintf_r+0x94>
 800b710:	fb0c 3202 	mla	r2, ip, r2, r3
 800b714:	460c      	mov	r4, r1
 800b716:	2001      	movs	r0, #1
 800b718:	e7a5      	b.n	800b666 <_vfiprintf_r+0x11a>
 800b71a:	2300      	movs	r3, #0
 800b71c:	3401      	adds	r4, #1
 800b71e:	9305      	str	r3, [sp, #20]
 800b720:	4619      	mov	r1, r3
 800b722:	f04f 0c0a 	mov.w	ip, #10
 800b726:	4620      	mov	r0, r4
 800b728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b72c:	3a30      	subs	r2, #48	; 0x30
 800b72e:	2a09      	cmp	r2, #9
 800b730:	d903      	bls.n	800b73a <_vfiprintf_r+0x1ee>
 800b732:	2b00      	cmp	r3, #0
 800b734:	d0c5      	beq.n	800b6c2 <_vfiprintf_r+0x176>
 800b736:	9105      	str	r1, [sp, #20]
 800b738:	e7c3      	b.n	800b6c2 <_vfiprintf_r+0x176>
 800b73a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b73e:	4604      	mov	r4, r0
 800b740:	2301      	movs	r3, #1
 800b742:	e7f0      	b.n	800b726 <_vfiprintf_r+0x1da>
 800b744:	ab03      	add	r3, sp, #12
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	462a      	mov	r2, r5
 800b74a:	4b16      	ldr	r3, [pc, #88]	; (800b7a4 <_vfiprintf_r+0x258>)
 800b74c:	a904      	add	r1, sp, #16
 800b74e:	4630      	mov	r0, r6
 800b750:	f3af 8000 	nop.w
 800b754:	4607      	mov	r7, r0
 800b756:	1c78      	adds	r0, r7, #1
 800b758:	d1d6      	bne.n	800b708 <_vfiprintf_r+0x1bc>
 800b75a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b75c:	07d9      	lsls	r1, r3, #31
 800b75e:	d405      	bmi.n	800b76c <_vfiprintf_r+0x220>
 800b760:	89ab      	ldrh	r3, [r5, #12]
 800b762:	059a      	lsls	r2, r3, #22
 800b764:	d402      	bmi.n	800b76c <_vfiprintf_r+0x220>
 800b766:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b768:	f7ff fa5a 	bl	800ac20 <__retarget_lock_release_recursive>
 800b76c:	89ab      	ldrh	r3, [r5, #12]
 800b76e:	065b      	lsls	r3, r3, #25
 800b770:	f53f af12 	bmi.w	800b598 <_vfiprintf_r+0x4c>
 800b774:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b776:	e711      	b.n	800b59c <_vfiprintf_r+0x50>
 800b778:	ab03      	add	r3, sp, #12
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	462a      	mov	r2, r5
 800b77e:	4b09      	ldr	r3, [pc, #36]	; (800b7a4 <_vfiprintf_r+0x258>)
 800b780:	a904      	add	r1, sp, #16
 800b782:	4630      	mov	r0, r6
 800b784:	f000 f880 	bl	800b888 <_printf_i>
 800b788:	e7e4      	b.n	800b754 <_vfiprintf_r+0x208>
 800b78a:	bf00      	nop
 800b78c:	0800be60 	.word	0x0800be60
 800b790:	0800be80 	.word	0x0800be80
 800b794:	0800be40 	.word	0x0800be40
 800b798:	0800bea4 	.word	0x0800bea4
 800b79c:	0800beae 	.word	0x0800beae
 800b7a0:	00000000 	.word	0x00000000
 800b7a4:	0800b527 	.word	0x0800b527
 800b7a8:	0800beaa 	.word	0x0800beaa

0800b7ac <_printf_common>:
 800b7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b0:	4616      	mov	r6, r2
 800b7b2:	4699      	mov	r9, r3
 800b7b4:	688a      	ldr	r2, [r1, #8]
 800b7b6:	690b      	ldr	r3, [r1, #16]
 800b7b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	bfb8      	it	lt
 800b7c0:	4613      	movlt	r3, r2
 800b7c2:	6033      	str	r3, [r6, #0]
 800b7c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7c8:	4607      	mov	r7, r0
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	b10a      	cbz	r2, 800b7d2 <_printf_common+0x26>
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	6033      	str	r3, [r6, #0]
 800b7d2:	6823      	ldr	r3, [r4, #0]
 800b7d4:	0699      	lsls	r1, r3, #26
 800b7d6:	bf42      	ittt	mi
 800b7d8:	6833      	ldrmi	r3, [r6, #0]
 800b7da:	3302      	addmi	r3, #2
 800b7dc:	6033      	strmi	r3, [r6, #0]
 800b7de:	6825      	ldr	r5, [r4, #0]
 800b7e0:	f015 0506 	ands.w	r5, r5, #6
 800b7e4:	d106      	bne.n	800b7f4 <_printf_common+0x48>
 800b7e6:	f104 0a19 	add.w	sl, r4, #25
 800b7ea:	68e3      	ldr	r3, [r4, #12]
 800b7ec:	6832      	ldr	r2, [r6, #0]
 800b7ee:	1a9b      	subs	r3, r3, r2
 800b7f0:	42ab      	cmp	r3, r5
 800b7f2:	dc26      	bgt.n	800b842 <_printf_common+0x96>
 800b7f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7f8:	1e13      	subs	r3, r2, #0
 800b7fa:	6822      	ldr	r2, [r4, #0]
 800b7fc:	bf18      	it	ne
 800b7fe:	2301      	movne	r3, #1
 800b800:	0692      	lsls	r2, r2, #26
 800b802:	d42b      	bmi.n	800b85c <_printf_common+0xb0>
 800b804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b808:	4649      	mov	r1, r9
 800b80a:	4638      	mov	r0, r7
 800b80c:	47c0      	blx	r8
 800b80e:	3001      	adds	r0, #1
 800b810:	d01e      	beq.n	800b850 <_printf_common+0xa4>
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	68e5      	ldr	r5, [r4, #12]
 800b816:	6832      	ldr	r2, [r6, #0]
 800b818:	f003 0306 	and.w	r3, r3, #6
 800b81c:	2b04      	cmp	r3, #4
 800b81e:	bf08      	it	eq
 800b820:	1aad      	subeq	r5, r5, r2
 800b822:	68a3      	ldr	r3, [r4, #8]
 800b824:	6922      	ldr	r2, [r4, #16]
 800b826:	bf0c      	ite	eq
 800b828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b82c:	2500      	movne	r5, #0
 800b82e:	4293      	cmp	r3, r2
 800b830:	bfc4      	itt	gt
 800b832:	1a9b      	subgt	r3, r3, r2
 800b834:	18ed      	addgt	r5, r5, r3
 800b836:	2600      	movs	r6, #0
 800b838:	341a      	adds	r4, #26
 800b83a:	42b5      	cmp	r5, r6
 800b83c:	d11a      	bne.n	800b874 <_printf_common+0xc8>
 800b83e:	2000      	movs	r0, #0
 800b840:	e008      	b.n	800b854 <_printf_common+0xa8>
 800b842:	2301      	movs	r3, #1
 800b844:	4652      	mov	r2, sl
 800b846:	4649      	mov	r1, r9
 800b848:	4638      	mov	r0, r7
 800b84a:	47c0      	blx	r8
 800b84c:	3001      	adds	r0, #1
 800b84e:	d103      	bne.n	800b858 <_printf_common+0xac>
 800b850:	f04f 30ff 	mov.w	r0, #4294967295
 800b854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b858:	3501      	adds	r5, #1
 800b85a:	e7c6      	b.n	800b7ea <_printf_common+0x3e>
 800b85c:	18e1      	adds	r1, r4, r3
 800b85e:	1c5a      	adds	r2, r3, #1
 800b860:	2030      	movs	r0, #48	; 0x30
 800b862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b866:	4422      	add	r2, r4
 800b868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b86c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b870:	3302      	adds	r3, #2
 800b872:	e7c7      	b.n	800b804 <_printf_common+0x58>
 800b874:	2301      	movs	r3, #1
 800b876:	4622      	mov	r2, r4
 800b878:	4649      	mov	r1, r9
 800b87a:	4638      	mov	r0, r7
 800b87c:	47c0      	blx	r8
 800b87e:	3001      	adds	r0, #1
 800b880:	d0e6      	beq.n	800b850 <_printf_common+0xa4>
 800b882:	3601      	adds	r6, #1
 800b884:	e7d9      	b.n	800b83a <_printf_common+0x8e>
	...

0800b888 <_printf_i>:
 800b888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b88c:	7e0f      	ldrb	r7, [r1, #24]
 800b88e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b890:	2f78      	cmp	r7, #120	; 0x78
 800b892:	4691      	mov	r9, r2
 800b894:	4680      	mov	r8, r0
 800b896:	460c      	mov	r4, r1
 800b898:	469a      	mov	sl, r3
 800b89a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b89e:	d807      	bhi.n	800b8b0 <_printf_i+0x28>
 800b8a0:	2f62      	cmp	r7, #98	; 0x62
 800b8a2:	d80a      	bhi.n	800b8ba <_printf_i+0x32>
 800b8a4:	2f00      	cmp	r7, #0
 800b8a6:	f000 80d8 	beq.w	800ba5a <_printf_i+0x1d2>
 800b8aa:	2f58      	cmp	r7, #88	; 0x58
 800b8ac:	f000 80a3 	beq.w	800b9f6 <_printf_i+0x16e>
 800b8b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b8b8:	e03a      	b.n	800b930 <_printf_i+0xa8>
 800b8ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b8be:	2b15      	cmp	r3, #21
 800b8c0:	d8f6      	bhi.n	800b8b0 <_printf_i+0x28>
 800b8c2:	a101      	add	r1, pc, #4	; (adr r1, 800b8c8 <_printf_i+0x40>)
 800b8c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8c8:	0800b921 	.word	0x0800b921
 800b8cc:	0800b935 	.word	0x0800b935
 800b8d0:	0800b8b1 	.word	0x0800b8b1
 800b8d4:	0800b8b1 	.word	0x0800b8b1
 800b8d8:	0800b8b1 	.word	0x0800b8b1
 800b8dc:	0800b8b1 	.word	0x0800b8b1
 800b8e0:	0800b935 	.word	0x0800b935
 800b8e4:	0800b8b1 	.word	0x0800b8b1
 800b8e8:	0800b8b1 	.word	0x0800b8b1
 800b8ec:	0800b8b1 	.word	0x0800b8b1
 800b8f0:	0800b8b1 	.word	0x0800b8b1
 800b8f4:	0800ba41 	.word	0x0800ba41
 800b8f8:	0800b965 	.word	0x0800b965
 800b8fc:	0800ba23 	.word	0x0800ba23
 800b900:	0800b8b1 	.word	0x0800b8b1
 800b904:	0800b8b1 	.word	0x0800b8b1
 800b908:	0800ba63 	.word	0x0800ba63
 800b90c:	0800b8b1 	.word	0x0800b8b1
 800b910:	0800b965 	.word	0x0800b965
 800b914:	0800b8b1 	.word	0x0800b8b1
 800b918:	0800b8b1 	.word	0x0800b8b1
 800b91c:	0800ba2b 	.word	0x0800ba2b
 800b920:	682b      	ldr	r3, [r5, #0]
 800b922:	1d1a      	adds	r2, r3, #4
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	602a      	str	r2, [r5, #0]
 800b928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b92c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b930:	2301      	movs	r3, #1
 800b932:	e0a3      	b.n	800ba7c <_printf_i+0x1f4>
 800b934:	6820      	ldr	r0, [r4, #0]
 800b936:	6829      	ldr	r1, [r5, #0]
 800b938:	0606      	lsls	r6, r0, #24
 800b93a:	f101 0304 	add.w	r3, r1, #4
 800b93e:	d50a      	bpl.n	800b956 <_printf_i+0xce>
 800b940:	680e      	ldr	r6, [r1, #0]
 800b942:	602b      	str	r3, [r5, #0]
 800b944:	2e00      	cmp	r6, #0
 800b946:	da03      	bge.n	800b950 <_printf_i+0xc8>
 800b948:	232d      	movs	r3, #45	; 0x2d
 800b94a:	4276      	negs	r6, r6
 800b94c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b950:	485e      	ldr	r0, [pc, #376]	; (800bacc <_printf_i+0x244>)
 800b952:	230a      	movs	r3, #10
 800b954:	e019      	b.n	800b98a <_printf_i+0x102>
 800b956:	680e      	ldr	r6, [r1, #0]
 800b958:	602b      	str	r3, [r5, #0]
 800b95a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b95e:	bf18      	it	ne
 800b960:	b236      	sxthne	r6, r6
 800b962:	e7ef      	b.n	800b944 <_printf_i+0xbc>
 800b964:	682b      	ldr	r3, [r5, #0]
 800b966:	6820      	ldr	r0, [r4, #0]
 800b968:	1d19      	adds	r1, r3, #4
 800b96a:	6029      	str	r1, [r5, #0]
 800b96c:	0601      	lsls	r1, r0, #24
 800b96e:	d501      	bpl.n	800b974 <_printf_i+0xec>
 800b970:	681e      	ldr	r6, [r3, #0]
 800b972:	e002      	b.n	800b97a <_printf_i+0xf2>
 800b974:	0646      	lsls	r6, r0, #25
 800b976:	d5fb      	bpl.n	800b970 <_printf_i+0xe8>
 800b978:	881e      	ldrh	r6, [r3, #0]
 800b97a:	4854      	ldr	r0, [pc, #336]	; (800bacc <_printf_i+0x244>)
 800b97c:	2f6f      	cmp	r7, #111	; 0x6f
 800b97e:	bf0c      	ite	eq
 800b980:	2308      	moveq	r3, #8
 800b982:	230a      	movne	r3, #10
 800b984:	2100      	movs	r1, #0
 800b986:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b98a:	6865      	ldr	r5, [r4, #4]
 800b98c:	60a5      	str	r5, [r4, #8]
 800b98e:	2d00      	cmp	r5, #0
 800b990:	bfa2      	ittt	ge
 800b992:	6821      	ldrge	r1, [r4, #0]
 800b994:	f021 0104 	bicge.w	r1, r1, #4
 800b998:	6021      	strge	r1, [r4, #0]
 800b99a:	b90e      	cbnz	r6, 800b9a0 <_printf_i+0x118>
 800b99c:	2d00      	cmp	r5, #0
 800b99e:	d04d      	beq.n	800ba3c <_printf_i+0x1b4>
 800b9a0:	4615      	mov	r5, r2
 800b9a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b9a6:	fb03 6711 	mls	r7, r3, r1, r6
 800b9aa:	5dc7      	ldrb	r7, [r0, r7]
 800b9ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b9b0:	4637      	mov	r7, r6
 800b9b2:	42bb      	cmp	r3, r7
 800b9b4:	460e      	mov	r6, r1
 800b9b6:	d9f4      	bls.n	800b9a2 <_printf_i+0x11a>
 800b9b8:	2b08      	cmp	r3, #8
 800b9ba:	d10b      	bne.n	800b9d4 <_printf_i+0x14c>
 800b9bc:	6823      	ldr	r3, [r4, #0]
 800b9be:	07de      	lsls	r6, r3, #31
 800b9c0:	d508      	bpl.n	800b9d4 <_printf_i+0x14c>
 800b9c2:	6923      	ldr	r3, [r4, #16]
 800b9c4:	6861      	ldr	r1, [r4, #4]
 800b9c6:	4299      	cmp	r1, r3
 800b9c8:	bfde      	ittt	le
 800b9ca:	2330      	movle	r3, #48	; 0x30
 800b9cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b9d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b9d4:	1b52      	subs	r2, r2, r5
 800b9d6:	6122      	str	r2, [r4, #16]
 800b9d8:	f8cd a000 	str.w	sl, [sp]
 800b9dc:	464b      	mov	r3, r9
 800b9de:	aa03      	add	r2, sp, #12
 800b9e0:	4621      	mov	r1, r4
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	f7ff fee2 	bl	800b7ac <_printf_common>
 800b9e8:	3001      	adds	r0, #1
 800b9ea:	d14c      	bne.n	800ba86 <_printf_i+0x1fe>
 800b9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f0:	b004      	add	sp, #16
 800b9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f6:	4835      	ldr	r0, [pc, #212]	; (800bacc <_printf_i+0x244>)
 800b9f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b9fc:	6829      	ldr	r1, [r5, #0]
 800b9fe:	6823      	ldr	r3, [r4, #0]
 800ba00:	f851 6b04 	ldr.w	r6, [r1], #4
 800ba04:	6029      	str	r1, [r5, #0]
 800ba06:	061d      	lsls	r5, r3, #24
 800ba08:	d514      	bpl.n	800ba34 <_printf_i+0x1ac>
 800ba0a:	07df      	lsls	r7, r3, #31
 800ba0c:	bf44      	itt	mi
 800ba0e:	f043 0320 	orrmi.w	r3, r3, #32
 800ba12:	6023      	strmi	r3, [r4, #0]
 800ba14:	b91e      	cbnz	r6, 800ba1e <_printf_i+0x196>
 800ba16:	6823      	ldr	r3, [r4, #0]
 800ba18:	f023 0320 	bic.w	r3, r3, #32
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	2310      	movs	r3, #16
 800ba20:	e7b0      	b.n	800b984 <_printf_i+0xfc>
 800ba22:	6823      	ldr	r3, [r4, #0]
 800ba24:	f043 0320 	orr.w	r3, r3, #32
 800ba28:	6023      	str	r3, [r4, #0]
 800ba2a:	2378      	movs	r3, #120	; 0x78
 800ba2c:	4828      	ldr	r0, [pc, #160]	; (800bad0 <_printf_i+0x248>)
 800ba2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba32:	e7e3      	b.n	800b9fc <_printf_i+0x174>
 800ba34:	0659      	lsls	r1, r3, #25
 800ba36:	bf48      	it	mi
 800ba38:	b2b6      	uxthmi	r6, r6
 800ba3a:	e7e6      	b.n	800ba0a <_printf_i+0x182>
 800ba3c:	4615      	mov	r5, r2
 800ba3e:	e7bb      	b.n	800b9b8 <_printf_i+0x130>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	6826      	ldr	r6, [r4, #0]
 800ba44:	6961      	ldr	r1, [r4, #20]
 800ba46:	1d18      	adds	r0, r3, #4
 800ba48:	6028      	str	r0, [r5, #0]
 800ba4a:	0635      	lsls	r5, r6, #24
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	d501      	bpl.n	800ba54 <_printf_i+0x1cc>
 800ba50:	6019      	str	r1, [r3, #0]
 800ba52:	e002      	b.n	800ba5a <_printf_i+0x1d2>
 800ba54:	0670      	lsls	r0, r6, #25
 800ba56:	d5fb      	bpl.n	800ba50 <_printf_i+0x1c8>
 800ba58:	8019      	strh	r1, [r3, #0]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	6123      	str	r3, [r4, #16]
 800ba5e:	4615      	mov	r5, r2
 800ba60:	e7ba      	b.n	800b9d8 <_printf_i+0x150>
 800ba62:	682b      	ldr	r3, [r5, #0]
 800ba64:	1d1a      	adds	r2, r3, #4
 800ba66:	602a      	str	r2, [r5, #0]
 800ba68:	681d      	ldr	r5, [r3, #0]
 800ba6a:	6862      	ldr	r2, [r4, #4]
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	4628      	mov	r0, r5
 800ba70:	f7f4 fbae 	bl	80001d0 <memchr>
 800ba74:	b108      	cbz	r0, 800ba7a <_printf_i+0x1f2>
 800ba76:	1b40      	subs	r0, r0, r5
 800ba78:	6060      	str	r0, [r4, #4]
 800ba7a:	6863      	ldr	r3, [r4, #4]
 800ba7c:	6123      	str	r3, [r4, #16]
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba84:	e7a8      	b.n	800b9d8 <_printf_i+0x150>
 800ba86:	6923      	ldr	r3, [r4, #16]
 800ba88:	462a      	mov	r2, r5
 800ba8a:	4649      	mov	r1, r9
 800ba8c:	4640      	mov	r0, r8
 800ba8e:	47d0      	blx	sl
 800ba90:	3001      	adds	r0, #1
 800ba92:	d0ab      	beq.n	800b9ec <_printf_i+0x164>
 800ba94:	6823      	ldr	r3, [r4, #0]
 800ba96:	079b      	lsls	r3, r3, #30
 800ba98:	d413      	bmi.n	800bac2 <_printf_i+0x23a>
 800ba9a:	68e0      	ldr	r0, [r4, #12]
 800ba9c:	9b03      	ldr	r3, [sp, #12]
 800ba9e:	4298      	cmp	r0, r3
 800baa0:	bfb8      	it	lt
 800baa2:	4618      	movlt	r0, r3
 800baa4:	e7a4      	b.n	800b9f0 <_printf_i+0x168>
 800baa6:	2301      	movs	r3, #1
 800baa8:	4632      	mov	r2, r6
 800baaa:	4649      	mov	r1, r9
 800baac:	4640      	mov	r0, r8
 800baae:	47d0      	blx	sl
 800bab0:	3001      	adds	r0, #1
 800bab2:	d09b      	beq.n	800b9ec <_printf_i+0x164>
 800bab4:	3501      	adds	r5, #1
 800bab6:	68e3      	ldr	r3, [r4, #12]
 800bab8:	9903      	ldr	r1, [sp, #12]
 800baba:	1a5b      	subs	r3, r3, r1
 800babc:	42ab      	cmp	r3, r5
 800babe:	dcf2      	bgt.n	800baa6 <_printf_i+0x21e>
 800bac0:	e7eb      	b.n	800ba9a <_printf_i+0x212>
 800bac2:	2500      	movs	r5, #0
 800bac4:	f104 0619 	add.w	r6, r4, #25
 800bac8:	e7f5      	b.n	800bab6 <_printf_i+0x22e>
 800baca:	bf00      	nop
 800bacc:	0800beb5 	.word	0x0800beb5
 800bad0:	0800bec6 	.word	0x0800bec6

0800bad4 <_read_r>:
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	4d07      	ldr	r5, [pc, #28]	; (800baf4 <_read_r+0x20>)
 800bad8:	4604      	mov	r4, r0
 800bada:	4608      	mov	r0, r1
 800badc:	4611      	mov	r1, r2
 800bade:	2200      	movs	r2, #0
 800bae0:	602a      	str	r2, [r5, #0]
 800bae2:	461a      	mov	r2, r3
 800bae4:	f7f5 fdc2 	bl	800166c <_read>
 800bae8:	1c43      	adds	r3, r0, #1
 800baea:	d102      	bne.n	800baf2 <_read_r+0x1e>
 800baec:	682b      	ldr	r3, [r5, #0]
 800baee:	b103      	cbz	r3, 800baf2 <_read_r+0x1e>
 800baf0:	6023      	str	r3, [r4, #0]
 800baf2:	bd38      	pop	{r3, r4, r5, pc}
 800baf4:	2000533c 	.word	0x2000533c

0800baf8 <_fstat_r>:
 800baf8:	b538      	push	{r3, r4, r5, lr}
 800bafa:	4d07      	ldr	r5, [pc, #28]	; (800bb18 <_fstat_r+0x20>)
 800bafc:	2300      	movs	r3, #0
 800bafe:	4604      	mov	r4, r0
 800bb00:	4608      	mov	r0, r1
 800bb02:	4611      	mov	r1, r2
 800bb04:	602b      	str	r3, [r5, #0]
 800bb06:	f7f5 fdda 	bl	80016be <_fstat>
 800bb0a:	1c43      	adds	r3, r0, #1
 800bb0c:	d102      	bne.n	800bb14 <_fstat_r+0x1c>
 800bb0e:	682b      	ldr	r3, [r5, #0]
 800bb10:	b103      	cbz	r3, 800bb14 <_fstat_r+0x1c>
 800bb12:	6023      	str	r3, [r4, #0]
 800bb14:	bd38      	pop	{r3, r4, r5, pc}
 800bb16:	bf00      	nop
 800bb18:	2000533c 	.word	0x2000533c

0800bb1c <_isatty_r>:
 800bb1c:	b538      	push	{r3, r4, r5, lr}
 800bb1e:	4d06      	ldr	r5, [pc, #24]	; (800bb38 <_isatty_r+0x1c>)
 800bb20:	2300      	movs	r3, #0
 800bb22:	4604      	mov	r4, r0
 800bb24:	4608      	mov	r0, r1
 800bb26:	602b      	str	r3, [r5, #0]
 800bb28:	f7f5 fdd9 	bl	80016de <_isatty>
 800bb2c:	1c43      	adds	r3, r0, #1
 800bb2e:	d102      	bne.n	800bb36 <_isatty_r+0x1a>
 800bb30:	682b      	ldr	r3, [r5, #0]
 800bb32:	b103      	cbz	r3, 800bb36 <_isatty_r+0x1a>
 800bb34:	6023      	str	r3, [r4, #0]
 800bb36:	bd38      	pop	{r3, r4, r5, pc}
 800bb38:	2000533c 	.word	0x2000533c

0800bb3c <_init>:
 800bb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3e:	bf00      	nop
 800bb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb42:	bc08      	pop	{r3}
 800bb44:	469e      	mov	lr, r3
 800bb46:	4770      	bx	lr

0800bb48 <_fini>:
 800bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4a:	bf00      	nop
 800bb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb4e:	bc08      	pop	{r3}
 800bb50:	469e      	mov	lr, r3
 800bb52:	4770      	bx	lr
