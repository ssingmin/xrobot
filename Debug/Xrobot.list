
Xrobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  0800c114  0800c114  0001c114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c508  0800c508  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c508  0800c508  0001c508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c510  0800c510  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c510  0800c510  0001c510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c514  0800c514  0001c514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000052a0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005314  20005314  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021e38  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cff  00000000  00000000  00041edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a18  00000000  00000000  00046be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001820  00000000  00000000  000485f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006fb6  00000000  00000000  00049e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ecf3  00000000  00000000  00050dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1541  00000000  00000000  0006fac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141002  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000073c4  00000000  00000000  00141054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c0fc 	.word	0x0800c0fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800c0fc 	.word	0x0800c0fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ws2812NumOn>:

uint16_t g_led_data[(TOTALNUM*24)+CYCLE_RESET]={0,};//CYCLE_RESET of data = 0, not BIT_HIGH or BIT_LOW


void ws2812NumOn(uint32_t led_cnt)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint16_t *)g_led_data, (TOTALNUM*24)+CYCLE_RESET);
 800057c:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <ws2812NumOn+0x20>)
 8000582:	2100      	movs	r1, #0
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <ws2812NumOn+0x24>)
 8000586:	f004 fce9 	bl	8004f5c <HAL_TIM_PWM_Start_DMA>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000090 	.word	0x20000090
 8000598:	20000760 	.word	0x20000760

0800059c <ws2812SetColor>:


void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 800059c:	b480      	push	{r7}
 800059e:	b09d      	sub	sp, #116	; 0x74
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	4608      	mov	r0, r1
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	4603      	mov	r3, r0
 80005ac:	70fb      	strb	r3, [r7, #3]
 80005ae:	460b      	mov	r3, r1
 80005b0:	70bb      	strb	r3, [r7, #2]
 80005b2:	4613      	mov	r3, r2
 80005b4:	707b      	strb	r3, [r7, #1]
	uint32_t buf[TOTALNUM];

	buf[index] = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 80005b6:	78bb      	ldrb	r3, [r7, #2]
 80005b8:	021a      	lsls	r2, r3, #8
 80005ba:	78fb      	ldrb	r3, [r7, #3]
 80005bc:	4413      	add	r3, r2
 80005be:	021a      	lsls	r2, r3, #8
 80005c0:	787b      	ldrb	r3, [r7, #1]
 80005c2:	4413      	add	r3, r2
 80005c4:	461a      	mov	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	3370      	adds	r3, #112	; 0x70
 80005cc:	443b      	add	r3, r7
 80005ce:	f843 2c64 	str.w	r2, [r3, #-100]

	for(int i=0;i<24;i++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80005d6:	e02c      	b.n	8000632 <ws2812SetColor+0x96>
	{
		if(buf[index]&(1<<i)) {g_led_data[(TOTALNUM-index)*24-i] = BIT_HIGH;}
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	3370      	adds	r3, #112	; 0x70
 80005de:	443b      	add	r3, r7
 80005e0:	f853 3c64 	ldr.w	r3, [r3, #-100]
 80005e4:	2101      	movs	r1, #1
 80005e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80005e8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ec:	4013      	ands	r3, r2
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d00e      	beq.n	8000610 <ws2812SetColor+0x74>
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4613      	mov	r3, r2
 80005f6:	0092      	lsls	r2, r2, #2
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	461a      	mov	r2, r3
 80005fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000606:	4a10      	ldr	r2, [pc, #64]	; (8000648 <ws2812SetColor+0xac>)
 8000608:	2143      	movs	r1, #67	; 0x43
 800060a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800060e:	e00d      	b.n	800062c <ws2812SetColor+0x90>
		else {g_led_data[(TOTALNUM-index)*24-i] = BIT_LOW;}
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	4613      	mov	r3, r2
 8000614:	0092      	lsls	r2, r2, #2
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	461a      	mov	r2, r3
 800061c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000624:	4a08      	ldr	r2, [pc, #32]	; (8000648 <ws2812SetColor+0xac>)
 8000626:	2121      	movs	r1, #33	; 0x21
 8000628:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<24;i++)
 800062c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800062e:	3301      	adds	r3, #1
 8000630:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000634:	2b17      	cmp	r3, #23
 8000636:	ddcf      	ble.n	80005d8 <ws2812SetColor+0x3c>
	}
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3774      	adds	r7, #116	; 0x74
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000090 	.word	0x20000090

0800064c <ws2812AllColor>:


void ws2812AllColor(uint8_t red, uint8_t green, uint8_t blue)
{
 800064c:	b480      	push	{r7}
 800064e:	b087      	sub	sp, #28
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	460b      	mov	r3, r1
 8000658:	71bb      	strb	r3, [r7, #6]
 800065a:	4613      	mov	r3, r2
 800065c:	717b      	strb	r3, [r7, #5]
	uint32_t buf;

	buf = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	021a      	lsls	r2, r3, #8
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4413      	add	r3, r2
 8000666:	021a      	lsls	r2, r3, #8
 8000668:	797b      	ldrb	r3, [r7, #5]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]

	for(int j=TOTALNUM;j>0;j--)
 800066e:	2318      	movs	r3, #24
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	e02d      	b.n	80006d0 <ws2812AllColor+0x84>
	{
		for(int i=0;i<24;i++)
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	e024      	b.n	80006c4 <ws2812AllColor+0x78>
		{
			if(buf&(1<<i)) {g_led_data[(j*24)-i] = BIT_HIGH;}
 800067a:	2201      	movs	r2, #1
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4013      	ands	r3, r2
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00c      	beq.n	80006a6 <ws2812AllColor+0x5a>
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	4613      	mov	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4413      	add	r3, r2
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	461a      	mov	r2, r3
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	4a11      	ldr	r2, [pc, #68]	; (80006e4 <ws2812AllColor+0x98>)
 800069e:	2143      	movs	r1, #67	; 0x43
 80006a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006a4:	e00b      	b.n	80006be <ws2812AllColor+0x72>
			else {g_led_data[(j*24)-i] = BIT_LOW;}
 80006a6:	697a      	ldr	r2, [r7, #20]
 80006a8:	4613      	mov	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	461a      	mov	r2, r3
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <ws2812AllColor+0x98>)
 80006b8:	2121      	movs	r1, #33	; 0x21
 80006ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<24;i++)
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	3301      	adds	r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	2b17      	cmp	r3, #23
 80006c8:	ddd7      	ble.n	800067a <ws2812AllColor+0x2e>
	for(int j=TOTALNUM;j>0;j--)
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	dcce      	bgt.n	8000674 <ws2812AllColor+0x28>
		}
	}
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	371c      	adds	r7, #28
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	20000090 	.word	0x20000090

080006e8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_CAN1_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_CAN1_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_CAN1_Init+0x64>)
 80006f4:	2206      	movs	r2, #6
 80006f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_CAN1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_CAN1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_CAN1_Init+0x64>)
 8000706:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800070a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_CAN1_Init+0x64>)
 800070e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000712:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_CAN1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_CAN1_Init+0x64>)
 800071c:	2201      	movs	r2, #1
 800071e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_CAN1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_CAN1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_CAN1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_CAN1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_CAN1_Init+0x64>)
 800073a:	f001 ff73 	bl	8002624 <HAL_CAN_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000744:	f001 f878 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200005d8 	.word	0x200005d8
 8000750:	40006400 	.word	0x40006400

08000754 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a1d      	ldr	r2, [pc, #116]	; (80007e8 <HAL_CAN_MspInit+0x94>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d134      	bne.n	80007e0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <HAL_CAN_MspInit+0x98>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <HAL_CAN_MspInit+0x98>)
 8000780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000784:	6413      	str	r3, [r2, #64]	; 0x40
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <HAL_CAN_MspInit+0x98>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <HAL_CAN_MspInit+0x98>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a14      	ldr	r2, [pc, #80]	; (80007ec <HAL_CAN_MspInit+0x98>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_CAN_MspInit+0x98>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007c0:	2309      	movs	r3, #9
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4809      	ldr	r0, [pc, #36]	; (80007f0 <HAL_CAN_MspInit+0x9c>)
 80007cc:	f003 faa6 	bl	8003d1c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2105      	movs	r1, #5
 80007d4:	2014      	movs	r0, #20
 80007d6:	f002 fe75 	bl	80034c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80007da:	2014      	movs	r0, #20
 80007dc:	f002 fe8e 	bl	80034fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	; 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40006400 	.word	0x40006400
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400

080007f4 <CanInit>:
}

/* USER CODE BEGIN 1 */

void CanInit(uint32_t id, uint32_t mask)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <CanInit+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <CanInit+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <CanInit+0x98>)
 800080c:	2201      	movs	r2, #1
 800080e:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id<<3)>>16;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	0c1b      	lsrs	r3, r3, #16
 8000816:	4a1d      	ldr	r2, [pc, #116]	; (800088c <CanInit+0x98>)
 8000818:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = ((id<<3)&0xffff)|(0x1<<2);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	b29b      	uxth	r3, r3
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	4a19      	ldr	r2, [pc, #100]	; (800088c <CanInit+0x98>)
 8000826:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask<<3)>>16;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	0c1b      	lsrs	r3, r3, #16
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <CanInit+0x98>)
 8000830:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = ((mask<<3)&0xffff)|(0x1<<2);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	b29b      	uxth	r3, r3
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	4a13      	ldr	r2, [pc, #76]	; (800088c <CanInit+0x98>)
 800083e:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <CanInit+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <CanInit+0x98>)
 8000848:	2201      	movs	r2, #1
 800084a:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <CanInit+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 8000852:	480f      	ldr	r0, [pc, #60]	; (8000890 <CanInit+0x9c>)
 8000854:	f002 f8c2 	bl	80029dc <HAL_CAN_Start>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <CanInit+0x6e>
 800085e:	f000 ffeb 	bl	8001838 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 8000862:	2102      	movs	r1, #2
 8000864:	480a      	ldr	r0, [pc, #40]	; (8000890 <CanInit+0x9c>)
 8000866:	f002 fb1f 	bl	8002ea8 <HAL_CAN_ActivateNotification>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d000      	beq.n	8000872 <CanInit+0x7e>
 8000870:	e7fe      	b.n	8000870 <CanInit+0x7c>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000872:	4906      	ldr	r1, [pc, #24]	; (800088c <CanInit+0x98>)
 8000874:	4806      	ldr	r0, [pc, #24]	; (8000890 <CanInit+0x9c>)
 8000876:	f001 ffd1 	bl	800281c <HAL_CAN_ConfigFilter>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <CanInit+0x90>
    {
		/* Filter configuration Error */
		Error_Handler();
 8000880:	f000 ffda 	bl	8001838 <Error_Handler>
    }
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200005b0 	.word	0x200005b0
 8000890:	200005d8 	.word	0x200005d8

08000894 <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	4611      	mov	r1, r2
 80008a0:	461a      	mov	r2, r3
 80008a2:	460b      	mov	r3, r1
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	4613      	mov	r3, r2
 80008a8:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 80008b6:	79bb      	ldrb	r3, [r7, #6]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <sendCan+0x2c>
 80008bc:	2304      	movs	r3, #4
 80008be:	e000      	b.n	80008c2 <sendCan+0x2e>
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 80008ce:	480e      	ldr	r0, [pc, #56]	; (8000908 <sendCan+0x74>)
 80008d0:	f002 f9a3 	bl	8002c1a <HAL_CAN_GetTxMailboxesFreeLevel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00d      	beq.n	80008fa <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	f107 0114 	add.w	r1, r7, #20
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	4807      	ldr	r0, [pc, #28]	; (8000908 <sendCan+0x74>)
 80008ea:	f002 f8bb 	bl	8002a64 <HAL_CAN_AddTxMessage>
 80008ee:	4603      	mov	r3, r0
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 80008f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d000      	beq.n	80008fa <sendCan+0x66>
 80008f8:	e7fe      	b.n	80008f8 <sendCan+0x64>
    }
    osDelay(1);
 80008fa:	2001      	movs	r0, #1
 80008fc:	f007 fa79 	bl	8007df2 <osDelay>
}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	; 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200005d8 	.word	0x200005d8

0800090c <SDOMsg>:

void SDOMsg(uint8_t Node_id,uint16_t index, uint8_t subindex, uint32_t msg, uint8_t len)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	4603      	mov	r3, r0
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	460b      	mov	r3, r1
 800091a:	80bb      	strh	r3, [r7, #4]
 800091c:	4613      	mov	r3, r2
 800091e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[8]={0,};
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]

	switch (len) {
 8000928:	7e3b      	ldrb	r3, [r7, #24]
 800092a:	3b01      	subs	r3, #1
 800092c:	2b03      	cmp	r3, #3
 800092e:	d817      	bhi.n	8000960 <SDOMsg+0x54>
 8000930:	a201      	add	r2, pc, #4	; (adr r2, 8000938 <SDOMsg+0x2c>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000949 	.word	0x08000949
 800093c:	0800094f 	.word	0x0800094f
 8000940:	08000955 	.word	0x08000955
 8000944:	0800095b 	.word	0x0800095b
		case 1:
			buf[0]=0x2f;	break;	//1byte
 8000948:	232f      	movs	r3, #47	; 0x2f
 800094a:	723b      	strb	r3, [r7, #8]
 800094c:	e008      	b.n	8000960 <SDOMsg+0x54>
		case 2:
			buf[0]=0x2b;	break;	//2byte
 800094e:	232b      	movs	r3, #43	; 0x2b
 8000950:	723b      	strb	r3, [r7, #8]
 8000952:	e005      	b.n	8000960 <SDOMsg+0x54>
		case 3:
			buf[0]=0x27;	break;	//3byte
 8000954:	2327      	movs	r3, #39	; 0x27
 8000956:	723b      	strb	r3, [r7, #8]
 8000958:	e002      	b.n	8000960 <SDOMsg+0x54>
		case 4:
			buf[0]=0x23;	break;	//4byte
 800095a:	2323      	movs	r3, #35	; 0x23
 800095c:	723b      	strb	r3, [r7, #8]
 800095e:	bf00      	nop
	}

	memcpy(buf+1,&index,2);	//index
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	3301      	adds	r3, #1
 8000966:	88ba      	ldrh	r2, [r7, #4]
 8000968:	801a      	strh	r2, [r3, #0]
	buf[3]=subindex;		//subindex
 800096a:	79bb      	ldrb	r3, [r7, #6]
 800096c:	72fb      	strb	r3, [r7, #11]
	memcpy(buf+4,&msg,len);	//data
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	3304      	adds	r3, #4
 8000974:	7e3a      	ldrb	r2, [r7, #24]
 8000976:	4639      	mov	r1, r7
 8000978:	4618      	mov	r0, r3
 800097a:	f00a fc32 	bl	800b1e2 <memcpy>

	sendCan(0x600+Node_id,buf,8,0);
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000984:	4618      	mov	r0, r3
 8000986:	f107 0108 	add.w	r1, r7, #8
 800098a:	2300      	movs	r3, #0
 800098c:	2208      	movs	r2, #8
 800098e:	f7ff ff81 	bl	8000894 <sendCan>
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop

0800099c <NMT_Mode>:

void NMT_Mode(uint8_t command, uint8_t Node_id)// command 1= pre-operation, 2=operation
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	460a      	mov	r2, r1
 80009a6:	71fb      	strb	r3, [r7, #7]
 80009a8:	4613      	mov	r3, r2
 80009aa:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[8]={0,};
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]


	if(command == 1){buf[0]=0x80;}//enter nmt pre-operational command
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d102      	bne.n	80009c0 <NMT_Mode+0x24>
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	723b      	strb	r3, [r7, #8]
 80009be:	e001      	b.n	80009c4 <NMT_Mode+0x28>
	else{buf[0]=0x01;}//enter nmt operational command for PDO operation
 80009c0:	2301      	movs	r3, #1
 80009c2:	723b      	strb	r3, [r7, #8]
	buf[1]=Node_id;//node id
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	727b      	strb	r3, [r7, #9]

	sendCan(0, buf, 8, 0);
 80009c8:	f107 0108 	add.w	r1, r7, #8
 80009cc:	2300      	movs	r3, #0
 80009ce:	2208      	movs	r2, #8
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff ff5f 	bl	8000894 <sendCan>
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <PDOMapping>:


int PDOMapping(uint8_t Node_id, uint16_t PDO_index, MappingPar Param, uint8_t Num_entry)//entry rr
{//노드아이디 배열로 바꿈 관련된거 수정할 것
 80009e0:	b082      	sub	sp, #8
 80009e2:	b590      	push	{r4, r7, lr}
 80009e4:	b087      	sub	sp, #28
 80009e6:	af02      	add	r7, sp, #8
 80009e8:	f107 0420 	add.w	r4, r7, #32
 80009ec:	e884 000c 	stmia.w	r4, {r2, r3}
 80009f0:	4603      	mov	r3, r0
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	460b      	mov	r3, r1
 80009f6:	80bb      	strh	r3, [r7, #4]
	uint32_t tmp=0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]

	if(Num_entry>=5){printf("Num_entry error: %d\n", Num_entry); return 0;}
 80009fc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a00:	2b04      	cmp	r3, #4
 8000a02:	d907      	bls.n	8000a14 <PDOMapping+0x34>
 8000a04:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a08:	4619      	mov	r1, r3
 8000a0a:	483e      	ldr	r0, [pc, #248]	; (8000b04 <PDOMapping+0x124>)
 8000a0c:	f00a fc94 	bl	800b338 <iprintf>
 8000a10:	2300      	movs	r3, #0
 8000a12:	e070      	b.n	8000af6 <PDOMapping+0x116>
	//
	NMT_Mode(PRE_OPERATION, Node_id);//pre-operation mode
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	4619      	mov	r1, r3
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f7ff ffbf 	bl	800099c <NMT_Mode>

	for(int i=0;i<Num_entry;i++) {//clear rpdo0 mapping, 0x60ff(index) 03(subindex) 20(length)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	e05d      	b.n	8000ae0 <PDOMapping+0x100>
		SDOMsg(Node_id, PDO_index, 0, 0, 1);//clear rpdo0 mapping
 8000a24:	88b9      	ldrh	r1, [r7, #4]
 8000a26:	79f8      	ldrb	r0, [r7, #7]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f7ff ff6c 	bl	800090c <SDOMsg>
		tmp=(0x10000*Param.index[i])+(0x100* Param.subindex[i])+(Param.length[i]);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f107 0220 	add.w	r2, r7, #32
 8000a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	440a      	add	r2, r1
 8000a48:	7812      	ldrb	r2, [r2, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	440a      	add	r2, r1
 8000a56:	7812      	ldrb	r2, [r2, #0]
 8000a58:	4413      	add	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
		SDOMsg(Node_id, PDO_index, i+1, tmp, 4);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	3301      	adds	r3, #1
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	88b9      	ldrh	r1, [r7, #4]
 8000a66:	79f8      	ldrb	r0, [r7, #7]
 8000a68:	2304      	movs	r3, #4
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	f7ff ff4d 	bl	800090c <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 1, 0x200+Node_id, 4);//cob-id??
 8000a72:	88bb      	ldrh	r3, [r7, #4]
 8000a74:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000a78:	b299      	uxth	r1, r3
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a80:	461a      	mov	r2, r3
 8000a82:	79f8      	ldrb	r0, [r7, #7]
 8000a84:	2304      	movs	r3, #4
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f7ff ff3e 	bl	800090c <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 2, 0xff, 1);//transmission type, fix asynchronous with 0xff
 8000a90:	88bb      	ldrh	r3, [r7, #4]
 8000a92:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000a96:	b299      	uxth	r1, r3
 8000a98:	79f8      	ldrb	r0, [r7, #7]
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	23ff      	movs	r3, #255	; 0xff
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	f7ff ff33 	bl	800090c <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 3+(Param.option*2), Param.option_time, 4);//not necessary 3= inhibit mode, 5=event timer mode
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000aac:	b299      	uxth	r1, r3
 8000aae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	3303      	adds	r3, #3
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000abc:	461c      	mov	r4, r3
 8000abe:	79f8      	ldrb	r0, [r7, #7]
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	4623      	mov	r3, r4
 8000ac6:	f7ff ff21 	bl	800090c <SDOMsg>
		SDOMsg(Node_id, PDO_index, 0, 0x01, 1);//set rpdo0 mapping
 8000aca:	88b9      	ldrh	r1, [r7, #4]
 8000acc:	79f8      	ldrb	r0, [r7, #7]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f7ff ff19 	bl	800090c <SDOMsg>
	for(int i=0;i<Num_entry;i++) {//clear rpdo0 mapping, 0x60ff(index) 03(subindex) 20(length)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	3301      	adds	r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	db9c      	blt.n	8000a24 <PDOMapping+0x44>
	}

	NMT_Mode(OPERATION, Node_id);//operation mode
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	4619      	mov	r1, r3
 8000aee:	2002      	movs	r0, #2
 8000af0:	f7ff ff54 	bl	800099c <NMT_Mode>

	return 1;
 8000af4:	2301      	movs	r3, #1
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b00:	b002      	add	sp, #8
 8000b02:	4770      	bx	lr
 8000b04:	0800c114 	.word	0x0800c114

08000b08 <PDOMsg>:

void PDOMsg(uint8_t Node_id, uint16_t PDO_index, uint8_t *buf)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	603a      	str	r2, [r7, #0]
 8000b12:	71fb      	strb	r3, [r7, #7]
 8000b14:	460b      	mov	r3, r1
 8000b16:	80bb      	strh	r3, [r7, #4]
	sendCan((PDO_index-0x1400)+Node_id,buf,8,0);
 8000b18:	88bb      	ldrh	r3, [r7, #4]
 8000b1a:	f5a3 52a0 	sub.w	r2, r3, #5120	; 0x1400
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	4413      	add	r3, r2
 8000b22:	4618      	mov	r0, r3
 8000b24:	2300      	movs	r3, #0
 8000b26:	2208      	movs	r2, #8
 8000b28:	6839      	ldr	r1, [r7, #0]
 8000b2a:	f7ff feb3 	bl	8000894 <sendCan>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <Vel_PDOMsg>:

void Vel_PDOMsg(uint8_t Node_id, uint16_t PDO_index, uint16_t vel_left, uint16_t vel_right)
{
 8000b36:	b590      	push	{r4, r7, lr}
 8000b38:	b085      	sub	sp, #20
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	4608      	mov	r0, r1
 8000b40:	4611      	mov	r1, r2
 8000b42:	461a      	mov	r2, r3
 8000b44:	4623      	mov	r3, r4
 8000b46:	71fb      	strb	r3, [r7, #7]
 8000b48:	4603      	mov	r3, r0
 8000b4a:	80bb      	strh	r3, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	807b      	strh	r3, [r7, #2]
 8000b50:	4613      	mov	r3, r2
 8000b52:	803b      	strh	r3, [r7, #0]
	uint8_t buf[8];

	buf[0]=(uint8_t)vel_left;
 8000b54:	887b      	ldrh	r3, [r7, #2]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	723b      	strb	r3, [r7, #8]
	buf[1]=(uint8_t)(vel_left>>8);
 8000b5a:	887b      	ldrh	r3, [r7, #2]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	727b      	strb	r3, [r7, #9]
	buf[2]=(uint8_t)vel_right;
 8000b64:	883b      	ldrh	r3, [r7, #0]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	72bb      	strb	r3, [r7, #10]
	buf[3]=(uint8_t)(vel_right>>8);
 8000b6a:	883b      	ldrh	r3, [r7, #0]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	72fb      	strb	r3, [r7, #11]

	PDOMsg(Node_id, PDO_index, buf);
 8000b74:	f107 0208 	add.w	r2, r7, #8
 8000b78:	88b9      	ldrh	r1, [r7, #4]
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ffc3 	bl	8000b08 <PDOMsg>
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd90      	pop	{r4, r7, pc}
	...

08000b8c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000b9c:	f002 f872 	bl	8002c84 <HAL_CAN_GetRxMessage>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d000      	beq.n	8000ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 8000ba6:	e7fe      	b.n	8000ba6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3301      	adds	r3, #1
 8000bae:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000bb0:	6013      	str	r3, [r2, #0]
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2000058c 	.word	0x2000058c
 8000bc0:	20000594 	.word	0x20000594
 8000bc4:	200005d8 	.word	0x200005d8
 8000bc8:	20000588 	.word	0x20000588

08000bcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_DMA_Init+0x68>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a16      	ldr	r2, [pc, #88]	; (8000c34 <MX_DMA_Init+0x68>)
 8000bdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_DMA_Init+0x68>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_DMA_Init+0x68>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <MX_DMA_Init+0x68>)
 8000bf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <MX_DMA_Init+0x68>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2105      	movs	r1, #5
 8000c0e:	200e      	movs	r0, #14
 8000c10:	f002 fc58 	bl	80034c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c14:	200e      	movs	r0, #14
 8000c16:	f002 fc71 	bl	80034fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2105      	movs	r1, #5
 8000c1e:	203a      	movs	r0, #58	; 0x3a
 8000c20:	f002 fc50 	bl	80034c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000c24:	203a      	movs	r0, #58	; 0x3a
 8000c26:	f002 fc69 	bl	80034fc <HAL_NVIC_EnableIRQ>

}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800

08000c38 <fanInit>:

#include <fan.h>


void fanInit(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    //HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_1);//stm32f103
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4802      	ldr	r0, [pc, #8]	; (8000c48 <fanInit+0x10>)
 8000c40:	f004 f8c4 	bl	8004dcc <HAL_TIM_PWM_Start>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200006d0 	.word	0x200006d0

08000c4c <fanOn>:

void fanOn(uint8_t duty)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	if(duty>=100){duty = 100;}
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b63      	cmp	r3, #99	; 0x63
 8000c5a:	d901      	bls.n	8000c60 <fanOn+0x14>
 8000c5c:	2364      	movs	r3, #100	; 0x64
 8000c5e:	71fb      	strb	r3, [r7, #7]

	if(duty==0){htim1.Instance->CCR1 = 0;}
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d104      	bne.n	8000c70 <fanOn+0x24>
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <fanOn+0x38>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	635a      	str	r2, [r3, #52]	; 0x34
	else {htim1.Instance->CCR1 = duty;}//write gogo
}
 8000c6e:	e003      	b.n	8000c78 <fanOn+0x2c>
	else {htim1.Instance->CCR1 = duty;}//write gogo
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <fanOn+0x38>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	79fa      	ldrb	r2, [r7, #7]
 8000c76:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	200006d0 	.word	0x200006d0

08000c88 <HAL_GPIO_EXTI_Callback>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
	osThreadFlagsSet(IRQ_PSxHandle, 1);
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2101      	movs	r1, #1
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f006 ffdb 	bl	8007c54 <osThreadFlagsSet>

    if(GPIO_Pin == PS_SIG1_Pin) {
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	2b10      	cmp	r3, #16
 8000ca2:	d102      	bne.n	8000caa <HAL_GPIO_EXTI_Callback+0x22>
    	//osSemaphoreRelease(PSx_SIG_BinSemHandle);
    	printf("GPIO_EXTI_Callback PS_SIG1_Pin.\n");
 8000ca4:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x30>)
 8000ca6:	f00a fbcd 	bl	800b444 <puts>
    }

    if(GPIO_Pin == PS_SIG4_Pin) {
    	//printf("GPIO_EXTI_Callback PS_SIG4_Pin.\n");
    }
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000614 	.word	0x20000614
 8000cb8:	0800c174 	.word	0x0800c174

08000cbc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PSx_SIG_BinSem */
  PSx_SIG_BinSemHandle = osSemaphoreNew(1, 1, &PSx_SIG_BinSem_attributes);
 8000cc0:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <MX_FREERTOS_Init+0x78>)
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f007 f8dc 	bl	8007e82 <osSemaphoreNew>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a1a      	ldr	r2, [pc, #104]	; (8000d38 <MX_FREERTOS_Init+0x7c>)
 8000cce:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cd0:	4a1a      	ldr	r2, [pc, #104]	; (8000d3c <MX_FREERTOS_Init+0x80>)
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	481a      	ldr	r0, [pc, #104]	; (8000d40 <MX_FREERTOS_Init+0x84>)
 8000cd6:	f006 ff2a 	bl	8007b2e <osThreadNew>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <MX_FREERTOS_Init+0x88>)
 8000cde:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(StartTask02, NULL, &canTask_attributes);
 8000ce0:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <MX_FREERTOS_Init+0x8c>)
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4819      	ldr	r0, [pc, #100]	; (8000d4c <MX_FREERTOS_Init+0x90>)
 8000ce6:	f006 ff22 	bl	8007b2e <osThreadNew>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <MX_FREERTOS_Init+0x94>)
 8000cee:	6013      	str	r3, [r2, #0]

  /* creation of UartComm */
  UartCommHandle = osThreadNew(StartTask03, NULL, &UartComm_attributes);
 8000cf0:	4a18      	ldr	r2, [pc, #96]	; (8000d54 <MX_FREERTOS_Init+0x98>)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4818      	ldr	r0, [pc, #96]	; (8000d58 <MX_FREERTOS_Init+0x9c>)
 8000cf6:	f006 ff1a 	bl	8007b2e <osThreadNew>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4a17      	ldr	r2, [pc, #92]	; (8000d5c <MX_FREERTOS_Init+0xa0>)
 8000cfe:	6013      	str	r3, [r2, #0]

  /* creation of NP_LED */
  NP_LEDHandle = osThreadNew(StartTask04, NULL, &NP_LED_attributes);
 8000d00:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <MX_FREERTOS_Init+0xa4>)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4817      	ldr	r0, [pc, #92]	; (8000d64 <MX_FREERTOS_Init+0xa8>)
 8000d06:	f006 ff12 	bl	8007b2e <osThreadNew>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a16      	ldr	r2, [pc, #88]	; (8000d68 <MX_FREERTOS_Init+0xac>)
 8000d0e:	6013      	str	r3, [r2, #0]

  /* creation of fancntl */
  fancntlHandle = osThreadNew(StartTask05, NULL, &fancntl_attributes);
 8000d10:	4a16      	ldr	r2, [pc, #88]	; (8000d6c <MX_FREERTOS_Init+0xb0>)
 8000d12:	2100      	movs	r1, #0
 8000d14:	4816      	ldr	r0, [pc, #88]	; (8000d70 <MX_FREERTOS_Init+0xb4>)
 8000d16:	f006 ff0a 	bl	8007b2e <osThreadNew>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a15      	ldr	r2, [pc, #84]	; (8000d74 <MX_FREERTOS_Init+0xb8>)
 8000d1e:	6013      	str	r3, [r2, #0]

  /* creation of IRQ_PSx */
  IRQ_PSxHandle = osThreadNew(StartTask06, NULL, &IRQ_PSx_attributes);
 8000d20:	4a15      	ldr	r2, [pc, #84]	; (8000d78 <MX_FREERTOS_Init+0xbc>)
 8000d22:	2100      	movs	r1, #0
 8000d24:	4815      	ldr	r0, [pc, #84]	; (8000d7c <MX_FREERTOS_Init+0xc0>)
 8000d26:	f006 ff02 	bl	8007b2e <osThreadNew>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <MX_FREERTOS_Init+0xc4>)
 8000d2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	0800c440 	.word	0x0800c440
 8000d38:	20000618 	.word	0x20000618
 8000d3c:	0800c368 	.word	0x0800c368
 8000d40:	08000d85 	.word	0x08000d85
 8000d44:	20000600 	.word	0x20000600
 8000d48:	0800c38c 	.word	0x0800c38c
 8000d4c:	08000db1 	.word	0x08000db1
 8000d50:	20000604 	.word	0x20000604
 8000d54:	0800c3b0 	.word	0x0800c3b0
 8000d58:	08000f75 	.word	0x08000f75
 8000d5c:	20000608 	.word	0x20000608
 8000d60:	0800c3d4 	.word	0x0800c3d4
 8000d64:	08000fc9 	.word	0x08000fc9
 8000d68:	2000060c 	.word	0x2000060c
 8000d6c:	0800c3f8 	.word	0x0800c3f8
 8000d70:	080013f5 	.word	0x080013f5
 8000d74:	20000610 	.word	0x20000610
 8000d78:	0800c41c 	.word	0x0800c41c
 8000d7c:	08001429 	.word	0x08001429
 8000d80:	20000614 	.word	0x20000614

08000d84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	//StartTask01 is related gpio toggle for state check //
	uint32_t lastTime = osKernelGetTickCount();
 8000d8c:	f006 feba 	bl	8007b04 <osKernelGetTickCount>
 8000d90:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STATUS_LED;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000d98:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f007 f844 	bl	8007e28 <osDelayUntil>

	HAL_GPIO_TogglePin(testled_GPIO_Port, testled_Pin);
 8000da0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da4:	4801      	ldr	r0, [pc, #4]	; (8000dac <StartDefaultTask+0x28>)
 8000da6:	f003 f96e 	bl	8004086 <HAL_GPIO_TogglePin>
	lastTime += PERIOD_STATUS_LED;
 8000daa:	e7f2      	b.n	8000d92 <StartDefaultTask+0xe>
 8000dac:	40020800 	.word	0x40020800

08000db0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000db0:	b5b0      	push	{r4, r5, r7, lr}
 8000db2:	b094      	sub	sp, #80	; 0x50
 8000db4:	af04      	add	r7, sp, #16
 8000db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	//StartTask02 is related CAN communication. //
	uint8_t canbuf[8]={1, 2, 3, 4, 5, 6, 7, 8};
 8000db8:	4a6b      	ldr	r2, [pc, #428]	; (8000f68 <StartTask02+0x1b8>)
 8000dba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dc2:	e883 0003 	stmia.w	r3, {r0, r1}

	MappingPar vel_RxPDO0={	{0x60ff,0,0,0},//index //target speed
 8000dc6:	4b69      	ldr	r3, [pc, #420]	; (8000f6c <StartTask02+0x1bc>)
 8000dc8:	f107 041c 	add.w	r4, r7, #28
 8000dcc:	461d      	mov	r5, r3
 8000dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd2:	682b      	ldr	r3, [r5, #0]
 8000dd4:	6023      	str	r3, [r4, #0]
							{0x03,0,0,0},//subindex //left and rigt target speed combination
							{0x20,0,0,0},//length //32bit
							0x01,//option//event timer
							0x1f4};//option_time //500

	MappingPar vel_TxPDO0={	{0x606C,0,0,0},//index //target speed
 8000dd6:	4b66      	ldr	r3, [pc, #408]	; (8000f70 <StartTask02+0x1c0>)
 8000dd8:	f107 0408 	add.w	r4, r7, #8
 8000ddc:	461d      	mov	r5, r3
 8000dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de2:	682b      	ldr	r3, [r5, #0]
 8000de4:	6023      	str	r3, [r4, #0]
							{0x03,0,0,0},//subindex //left and rigt target speed combination
							{0x20,0,0,0},//length //32bit
							0x00,//option//inhibit time
							0x1f4};//option_time //500

	uint32_t lastTime = osKernelGetTickCount();
 8000de6:	f006 fe8d 	bl	8007b04 <osKernelGetTickCount>
 8000dea:	63f8      	str	r0, [r7, #60]	; 0x3c

	CanInit(0,0);
 8000dec:	2100      	movs	r1, #0
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff fd00 	bl	80007f4 <CanInit>

	PDOMapping(1, 0x1600, vel_RxPDO0, 1);
 8000df4:	2301      	movs	r3, #1
 8000df6:	9303      	str	r3, [sp, #12]
 8000df8:	466c      	mov	r4, sp
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	cb0c      	ldmia	r3, {r2, r3}
 8000e0c:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8000e10:	2001      	movs	r0, #1
 8000e12:	f7ff fde5 	bl	80009e0 <PDOMapping>
	PDOMapping(2, 0x1600, vel_RxPDO0, 1);
 8000e16:	2301      	movs	r3, #1
 8000e18:	9303      	str	r3, [sp, #12]
 8000e1a:	466c      	mov	r4, sp
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	cb0c      	ldmia	r3, {r2, r3}
 8000e2e:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8000e32:	2002      	movs	r0, #2
 8000e34:	f7ff fdd4 	bl	80009e0 <PDOMapping>
	PDOMapping(1, 0x1A00, vel_TxPDO0, 1);
 8000e38:	2301      	movs	r3, #1
 8000e3a:	9303      	str	r3, [sp, #12]
 8000e3c:	466c      	mov	r4, sp
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	cb0c      	ldmia	r3, {r2, r3}
 8000e50:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8000e54:	2001      	movs	r0, #1
 8000e56:	f7ff fdc3 	bl	80009e0 <PDOMapping>
	PDOMapping(2, 0x1A00, vel_TxPDO0, 1);
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	9303      	str	r3, [sp, #12]
 8000e5e:	466c      	mov	r4, sp
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	cb0c      	ldmia	r3, {r2, r3}
 8000e72:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8000e76:	2002      	movs	r0, #2
 8000e78:	f7ff fdb2 	bl	80009e0 <PDOMapping>



	for(int i=0;i<2;i++){
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e80:	e056      	b.n	8000f30 <StartTask02+0x180>
		SDOMsg(i+1,0x2010, 0x0, 0x01, 1);//Node_id, index,  subindex,  msg,  len//save eeprom
 8000e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	3301      	adds	r3, #1
 8000e88:	b2d8      	uxtb	r0, r3
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2301      	movs	r3, #1
 8000e90:	2200      	movs	r2, #0
 8000e92:	f242 0110 	movw	r1, #8208	; 0x2010
 8000e96:	f7ff fd39 	bl	800090c <SDOMsg>

		SDOMsg(i+1,0x6040, 0x0, 0x00, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
 8000e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b2d8      	uxtb	r0, r3
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f246 0140 	movw	r1, #24640	; 0x6040
 8000eae:	f7ff fd2d 	bl	800090c <SDOMsg>
		SDOMsg(i+1,0x6040, 0x0, 0x06, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 1: At this time, the low 4-bit status of 6041 is 0001, motor is released;
 8000eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	b2d8      	uxtb	r0, r3
 8000eba:	2302      	movs	r3, #2
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f246 0140 	movw	r1, #24640	; 0x6040
 8000ec6:	f7ff fd21 	bl	800090c <SDOMsg>
		SDOMsg(i+1,0x6040, 0x0, 0x07, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 2: At this time, the low 4-bit status of 6041 is 0011, motor is enabled;
 8000eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	3301      	adds	r3, #1
 8000ed0:	b2d8      	uxtb	r0, r3
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2307      	movs	r3, #7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f246 0140 	movw	r1, #24640	; 0x6040
 8000ede:	f7ff fd15 	bl	800090c <SDOMsg>
		SDOMsg(i+1,0x6040, 0x0, 0x0f, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 3: At this time, the low 4-bit status of 6041 is 0111, motor is enabled;
 8000ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2d8      	uxtb	r0, r3
 8000eea:	2302      	movs	r3, #2
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	230f      	movs	r3, #15
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f246 0140 	movw	r1, #24640	; 0x6040
 8000ef6:	f7ff fd09 	bl	800090c <SDOMsg>

		SDOMsg(i+1,0x6060, 0x0, 0x03, 1);//Node_id, index,  subindex,  msg,  len
 8000efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	3301      	adds	r3, #1
 8000f00:	b2d8      	uxtb	r0, r3
 8000f02:	2301      	movs	r3, #1
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2303      	movs	r3, #3
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f246 0160 	movw	r1, #24672	; 0x6060
 8000f0e:	f7ff fcfd 	bl	800090c <SDOMsg>
		SDOMsg(i+1,0x200f, 0x0, 0x01, 2);//Node_id, index,  subindex,  msg,  len
 8000f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	3301      	adds	r3, #1
 8000f18:	b2d8      	uxtb	r0, r3
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	2200      	movs	r2, #0
 8000f22:	f242 010f 	movw	r1, #8207	; 0x200f
 8000f26:	f7ff fcf1 	bl	800090c <SDOMsg>
	for(int i=0;i<2;i++){
 8000f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	dda5      	ble.n	8000e82 <StartTask02+0xd2>

  /* Infinite loop */
  for(;;)
  {

	lastTime += PERIOD_CANCOMM;;
 8000f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f38:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	osDelayUntil(lastTime);
 8000f3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000f40:	f006 ff72 	bl	8007e28 <osDelayUntil>

	Vel_PDOMsg(1, 0x1600, 0x2, 0x1);
 8000f44:	2301      	movs	r3, #1
 8000f46:	2202      	movs	r2, #2
 8000f48:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f7ff fdf2 	bl	8000b36 <Vel_PDOMsg>
	Vel_PDOMsg(2, 0x1600, 0x100, 0x200);
 8000f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5a:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f7ff fde9 	bl	8000b36 <Vel_PDOMsg>
  {
 8000f64:	e7e7      	b.n	8000f36 <StartTask02+0x186>
 8000f66:	bf00      	nop
 8000f68:	0800c194 	.word	0x0800c194
 8000f6c:	0800c19c 	.word	0x0800c19c
 8000f70:	0800c1b0 	.word	0x0800c1b0

08000f74 <StartTask03>:
* @retval None
*/

/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b092      	sub	sp, #72	; 0x48
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	char buf[48]={	 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,		//1 front right
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <StartTask03+0x50>)
 8000f7e:	f107 040c 	add.w	r4, r7, #12
 8000f82:	461d      	mov	r5, r3
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					13, 14, 15, 16, 17, 18, 19, 20, 21, 22,	23, 24,		//2 front left
					25, 26, 27, 28, 29, 30, 31, 32,	33, 34, 35, 36,		//3 rear right
					37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48	};	//4 rear left

	uint32_t lastTime = osKernelGetTickCount();
 8000f94:	f006 fdb6 	bl	8007b04 <osKernelGetTickCount>
 8000f98:	63f8      	str	r0, [r7, #60]	; 0x3c


  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STEERING;
 8000f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f9c:	3332      	adds	r3, #50	; 0x32
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	osDelayUntil(lastTime);
 8000fa0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000fa2:	f006 ff41 	bl	8007e28 <osDelayUntil>
	DataSetSteering(buf, 3, 0, 0, 0);
 8000fa6:	f107 000c 	add.w	r0, r7, #12
 8000faa:	2300      	movs	r3, #0
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	f000 fc98 	bl	80018e8 <DataSetSteering>

	ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fc6b 	bl	8001898 <ServoMotor_writeDMA>
	lastTime += PERIOD_STEERING;
 8000fc2:	e7ea      	b.n	8000f9a <StartTask03+0x26>
 8000fc4:	0800c1c4 	.word	0x0800c1c4

08000fc8 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	//StartTask04 is related ws2812b//
	uint32_t lastTime = osKernelGetTickCount();
 8000fd0:	f006 fd98 	bl	8007b04 <osKernelGetTickCount>
 8000fd4:	60f8      	str	r0, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
		lastTime += PERIOD_NP_LED;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000fdc:	60fb      	str	r3, [r7, #12]
		osDelayUntil(lastTime);
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f006 ff22 	bl	8007e28 <osDelayUntil>


		temp++;
 8000fe4:	4bd0      	ldr	r3, [pc, #832]	; (8001328 <StartTask04+0x360>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	4acf      	ldr	r2, [pc, #828]	; (8001328 <StartTask04+0x360>)
 8000fec:	6013      	str	r3, [r2, #0]
		switch (temp) {
 8000fee:	4bce      	ldr	r3, [pc, #824]	; (8001328 <StartTask04+0x360>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	2b07      	cmp	r3, #7
 8000ff6:	f200 81ea 	bhi.w	80013ce <StartTask04+0x406>
 8000ffa:	a201      	add	r2, pc, #4	; (adr r2, 8001000 <StartTask04+0x38>)
 8000ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001000:	08001021 	.word	0x08001021
 8001004:	08001089 	.word	0x08001089
 8001008:	080010f1 	.word	0x080010f1
 800100c:	08001159 	.word	0x08001159
 8001010:	080011c1 	.word	0x080011c1
 8001014:	08001241 	.word	0x08001241
 8001018:	080012c1 	.word	0x080012c1
 800101c:	08001349 	.word	0x08001349
			case 1:
				printf("case1\n");
 8001020:	48c2      	ldr	r0, [pc, #776]	; (800132c <StartTask04+0x364>)
 8001022:	f00a fa0f 	bl	800b444 <puts>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8001026:	2301      	movs	r3, #1
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff fab5 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8001032:	2300      	movs	r3, #0
 8001034:	2201      	movs	r2, #1
 8001036:	2100      	movs	r1, #0
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff faaf 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 800103e:	2300      	movs	r3, #0
 8001040:	2200      	movs	r2, #0
 8001042:	2101      	movs	r1, #1
 8001044:	2002      	movs	r0, #2
 8001046:	f7ff faa9 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 800104a:	2301      	movs	r3, #1
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	2003      	movs	r0, #3
 8001052:	f7ff faa3 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8001056:	2300      	movs	r3, #0
 8001058:	2201      	movs	r2, #1
 800105a:	2100      	movs	r1, #0
 800105c:	2004      	movs	r0, #4
 800105e:	f7ff fa9d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 8001062:	2300      	movs	r3, #0
 8001064:	2200      	movs	r2, #0
 8001066:	2101      	movs	r1, #1
 8001068:	2005      	movs	r0, #5
 800106a:	f7ff fa97 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 800106e:	2301      	movs	r3, #1
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	2006      	movs	r0, #6
 8001076:	f7ff fa91 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 800107a:	2300      	movs	r3, #0
 800107c:	2201      	movs	r2, #1
 800107e:	2100      	movs	r1, #0
 8001080:	2007      	movs	r0, #7
 8001082:	f7ff fa8b 	bl	800059c <ws2812SetColor>
				break;
 8001086:	e1a2      	b.n	80013ce <StartTask04+0x406>
			case 2:
				printf("case2\n");
 8001088:	48a9      	ldr	r0, [pc, #676]	; (8001330 <StartTask04+0x368>)
 800108a:	f00a f9db 	bl	800b444 <puts>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 800108e:	2301      	movs	r3, #1
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2007      	movs	r0, #7
 8001096:	f7ff fa81 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 800109a:	2300      	movs	r3, #0
 800109c:	2201      	movs	r2, #1
 800109e:	2100      	movs	r1, #0
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff fa7b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 80010a6:	2300      	movs	r3, #0
 80010a8:	2200      	movs	r2, #0
 80010aa:	2101      	movs	r1, #1
 80010ac:	2001      	movs	r0, #1
 80010ae:	f7ff fa75 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 80010b2:	2301      	movs	r3, #1
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	2002      	movs	r0, #2
 80010ba:	f7ff fa6f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 80010be:	2300      	movs	r3, #0
 80010c0:	2201      	movs	r2, #1
 80010c2:	2100      	movs	r1, #0
 80010c4:	2003      	movs	r0, #3
 80010c6:	f7ff fa69 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 80010ca:	2300      	movs	r3, #0
 80010cc:	2200      	movs	r2, #0
 80010ce:	2101      	movs	r1, #1
 80010d0:	2004      	movs	r0, #4
 80010d2:	f7ff fa63 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 80010d6:	2301      	movs	r3, #1
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2005      	movs	r0, #5
 80010de:	f7ff fa5d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 80010e2:	2300      	movs	r3, #0
 80010e4:	2201      	movs	r2, #1
 80010e6:	2100      	movs	r1, #0
 80010e8:	2006      	movs	r0, #6
 80010ea:	f7ff fa57 	bl	800059c <ws2812SetColor>
				break;
 80010ee:	e16e      	b.n	80013ce <StartTask04+0x406>
			case 3:
				printf("case3\n");
 80010f0:	4890      	ldr	r0, [pc, #576]	; (8001334 <StartTask04+0x36c>)
 80010f2:	f00a f9a7 	bl	800b444 <puts>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 80010f6:	2301      	movs	r3, #1
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2006      	movs	r0, #6
 80010fe:	f7ff fa4d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8001102:	2300      	movs	r3, #0
 8001104:	2201      	movs	r2, #1
 8001106:	2100      	movs	r1, #0
 8001108:	2007      	movs	r0, #7
 800110a:	f7ff fa47 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 800110e:	2300      	movs	r3, #0
 8001110:	2200      	movs	r2, #0
 8001112:	2101      	movs	r1, #1
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff fa41 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 800111a:	2301      	movs	r3, #1
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2001      	movs	r0, #1
 8001122:	f7ff fa3b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8001126:	2300      	movs	r3, #0
 8001128:	2201      	movs	r2, #1
 800112a:	2100      	movs	r1, #0
 800112c:	2002      	movs	r0, #2
 800112e:	f7ff fa35 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 8001132:	2300      	movs	r3, #0
 8001134:	2200      	movs	r2, #0
 8001136:	2101      	movs	r1, #1
 8001138:	2003      	movs	r0, #3
 800113a:	f7ff fa2f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 800113e:	2301      	movs	r3, #1
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2004      	movs	r0, #4
 8001146:	f7ff fa29 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 800114a:	2300      	movs	r3, #0
 800114c:	2201      	movs	r2, #1
 800114e:	2100      	movs	r1, #0
 8001150:	2005      	movs	r0, #5
 8001152:	f7ff fa23 	bl	800059c <ws2812SetColor>
				break;
 8001156:	e13a      	b.n	80013ce <StartTask04+0x406>
			case 4:
				printf("case4\n");
 8001158:	4877      	ldr	r0, [pc, #476]	; (8001338 <StartTask04+0x370>)
 800115a:	f00a f973 	bl	800b444 <puts>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 800115e:	2301      	movs	r3, #1
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	2005      	movs	r0, #5
 8001166:	f7ff fa19 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 800116a:	2300      	movs	r3, #0
 800116c:	2201      	movs	r2, #1
 800116e:	2100      	movs	r1, #0
 8001170:	2006      	movs	r0, #6
 8001172:	f7ff fa13 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 8001176:	2300      	movs	r3, #0
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	2007      	movs	r0, #7
 800117e:	f7ff fa0d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8001182:	2301      	movs	r3, #1
 8001184:	2200      	movs	r2, #0
 8001186:	2100      	movs	r1, #0
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fa07 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 800118e:	2300      	movs	r3, #0
 8001190:	2201      	movs	r2, #1
 8001192:	2100      	movs	r1, #0
 8001194:	2001      	movs	r0, #1
 8001196:	f7ff fa01 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 800119a:	2300      	movs	r3, #0
 800119c:	2200      	movs	r2, #0
 800119e:	2101      	movs	r1, #1
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff f9fb 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 80011a6:	2301      	movs	r3, #1
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2003      	movs	r0, #3
 80011ae:	f7ff f9f5 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 80011b2:	2300      	movs	r3, #0
 80011b4:	2201      	movs	r2, #1
 80011b6:	2100      	movs	r1, #0
 80011b8:	2004      	movs	r0, #4
 80011ba:	f7ff f9ef 	bl	800059c <ws2812SetColor>
				break;
 80011be:	e106      	b.n	80013ce <StartTask04+0x406>
			case 5:
				printf("case5\n");
 80011c0:	485e      	ldr	r0, [pc, #376]	; (800133c <StartTask04+0x374>)
 80011c2:	f00a f93f 	bl	800b444 <puts>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 80011c6:	2301      	movs	r3, #1
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	2004      	movs	r0, #4
 80011ce:	f7ff f9e5 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 80011d2:	2300      	movs	r3, #0
 80011d4:	2201      	movs	r2, #1
 80011d6:	2100      	movs	r1, #0
 80011d8:	2005      	movs	r0, #5
 80011da:	f7ff f9df 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 80011de:	2300      	movs	r3, #0
 80011e0:	2200      	movs	r2, #0
 80011e2:	2101      	movs	r1, #1
 80011e4:	2006      	movs	r0, #6
 80011e6:	f7ff f9d9 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 80011ea:	2301      	movs	r3, #1
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	2007      	movs	r0, #7
 80011f2:	f7ff f9d3 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 80011f6:	2300      	movs	r3, #0
 80011f8:	2201      	movs	r2, #1
 80011fa:	2100      	movs	r1, #0
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff f9cd 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 8001202:	2300      	movs	r3, #0
 8001204:	2200      	movs	r2, #0
 8001206:	2101      	movs	r1, #1
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff f9c7 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 800120e:	2301      	movs	r3, #1
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	2002      	movs	r0, #2
 8001216:	f7ff f9c1 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 800121a:	2300      	movs	r3, #0
 800121c:	2201      	movs	r2, #1
 800121e:	2100      	movs	r1, #0
 8001220:	2003      	movs	r0, #3
 8001222:	f7ff f9bb 	bl	800059c <ws2812SetColor>
				ws2812SetColor(8,0,0,1);//index, r, g, b
 8001226:	2301      	movs	r3, #1
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2008      	movs	r0, #8
 800122e:	f7ff f9b5 	bl	800059c <ws2812SetColor>
				ws2812SetColor(9,0,1,0);//index, r, g, b
 8001232:	2300      	movs	r3, #0
 8001234:	2201      	movs	r2, #1
 8001236:	2100      	movs	r1, #0
 8001238:	2009      	movs	r0, #9
 800123a:	f7ff f9af 	bl	800059c <ws2812SetColor>

				break;
 800123e:	e0c6      	b.n	80013ce <StartTask04+0x406>
			case 6:
				printf("case6\n");
 8001240:	483f      	ldr	r0, [pc, #252]	; (8001340 <StartTask04+0x378>)
 8001242:	f00a f8ff 	bl	800b444 <puts>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8001246:	2301      	movs	r3, #1
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	2003      	movs	r0, #3
 800124e:	f7ff f9a5 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8001252:	2300      	movs	r3, #0
 8001254:	2201      	movs	r2, #1
 8001256:	2100      	movs	r1, #0
 8001258:	2004      	movs	r0, #4
 800125a:	f7ff f99f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 800125e:	2300      	movs	r3, #0
 8001260:	2200      	movs	r2, #0
 8001262:	2101      	movs	r1, #1
 8001264:	2005      	movs	r0, #5
 8001266:	f7ff f999 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 800126a:	2301      	movs	r3, #1
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2006      	movs	r0, #6
 8001272:	f7ff f993 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8001276:	2300      	movs	r3, #0
 8001278:	2201      	movs	r2, #1
 800127a:	2100      	movs	r1, #0
 800127c:	2007      	movs	r0, #7
 800127e:	f7ff f98d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 8001282:	2300      	movs	r3, #0
 8001284:	2200      	movs	r2, #0
 8001286:	2101      	movs	r1, #1
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff f987 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 800128e:	2301      	movs	r3, #1
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2001      	movs	r0, #1
 8001296:	f7ff f981 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 800129a:	2300      	movs	r3, #0
 800129c:	2201      	movs	r2, #1
 800129e:	2100      	movs	r1, #0
 80012a0:	2002      	movs	r0, #2
 80012a2:	f7ff f97b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(8,0,1,1);//index, r, g, b
 80012a6:	2301      	movs	r3, #1
 80012a8:	2201      	movs	r2, #1
 80012aa:	2100      	movs	r1, #0
 80012ac:	2008      	movs	r0, #8
 80012ae:	f7ff f975 	bl	800059c <ws2812SetColor>
				ws2812SetColor(9,1,1,0);//index, r, g, b
 80012b2:	2300      	movs	r3, #0
 80012b4:	2201      	movs	r2, #1
 80012b6:	2101      	movs	r1, #1
 80012b8:	2009      	movs	r0, #9
 80012ba:	f7ff f96f 	bl	800059c <ws2812SetColor>
				break;
 80012be:	e086      	b.n	80013ce <StartTask04+0x406>
			case 7:
				printf("case7\n");
 80012c0:	4820      	ldr	r0, [pc, #128]	; (8001344 <StartTask04+0x37c>)
 80012c2:	f00a f8bf 	bl	800b444 <puts>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 80012c6:	2301      	movs	r3, #1
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	2002      	movs	r0, #2
 80012ce:	f7ff f965 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 80012d2:	2300      	movs	r3, #0
 80012d4:	2201      	movs	r2, #1
 80012d6:	2100      	movs	r1, #0
 80012d8:	2003      	movs	r0, #3
 80012da:	f7ff f95f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 80012de:	2300      	movs	r3, #0
 80012e0:	2200      	movs	r2, #0
 80012e2:	2101      	movs	r1, #1
 80012e4:	2004      	movs	r0, #4
 80012e6:	f7ff f959 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 80012ea:	2301      	movs	r3, #1
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	2005      	movs	r0, #5
 80012f2:	f7ff f953 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 80012f6:	2300      	movs	r3, #0
 80012f8:	2201      	movs	r2, #1
 80012fa:	2100      	movs	r1, #0
 80012fc:	2006      	movs	r0, #6
 80012fe:	f7ff f94d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 8001302:	2300      	movs	r3, #0
 8001304:	2200      	movs	r2, #0
 8001306:	2101      	movs	r1, #1
 8001308:	2007      	movs	r0, #7
 800130a:	f7ff f947 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 800130e:	2301      	movs	r3, #1
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff f941 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 800131a:	2300      	movs	r3, #0
 800131c:	2201      	movs	r2, #1
 800131e:	2100      	movs	r1, #0
 8001320:	2001      	movs	r0, #1
 8001322:	f7ff f93b 	bl	800059c <ws2812SetColor>
				break;
 8001326:	e052      	b.n	80013ce <StartTask04+0x406>
 8001328:	2000061c 	.word	0x2000061c
 800132c:	0800c1f4 	.word	0x0800c1f4
 8001330:	0800c1fc 	.word	0x0800c1fc
 8001334:	0800c204 	.word	0x0800c204
 8001338:	0800c20c 	.word	0x0800c20c
 800133c:	0800c214 	.word	0x0800c214
 8001340:	0800c21c 	.word	0x0800c21c
 8001344:	0800c224 	.word	0x0800c224
			case 8:
				printf("case8\n");
 8001348:	4827      	ldr	r0, [pc, #156]	; (80013e8 <StartTask04+0x420>)
 800134a:	f00a f87b 	bl	800b444 <puts>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 800134e:	2301      	movs	r3, #1
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff f921 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 800135a:	2300      	movs	r3, #0
 800135c:	2201      	movs	r2, #1
 800135e:	2100      	movs	r1, #0
 8001360:	2002      	movs	r0, #2
 8001362:	f7ff f91b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 8001366:	2300      	movs	r3, #0
 8001368:	2200      	movs	r2, #0
 800136a:	2101      	movs	r1, #1
 800136c:	2003      	movs	r0, #3
 800136e:	f7ff f915 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8001372:	2301      	movs	r3, #1
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2004      	movs	r0, #4
 800137a:	f7ff f90f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 800137e:	2300      	movs	r3, #0
 8001380:	2201      	movs	r2, #1
 8001382:	2100      	movs	r1, #0
 8001384:	2005      	movs	r0, #5
 8001386:	f7ff f909 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 800138a:	2300      	movs	r3, #0
 800138c:	2200      	movs	r2, #0
 800138e:	2101      	movs	r1, #1
 8001390:	2006      	movs	r0, #6
 8001392:	f7ff f903 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8001396:	2301      	movs	r3, #1
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	2007      	movs	r0, #7
 800139e:	f7ff f8fd 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 80013a2:	2300      	movs	r3, #0
 80013a4:	2201      	movs	r2, #1
 80013a6:	2100      	movs	r1, #0
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff f8f7 	bl	800059c <ws2812SetColor>
				ws2812SetColor(8,1,1,1);//index, r, g, b
 80013ae:	2301      	movs	r3, #1
 80013b0:	2201      	movs	r2, #1
 80013b2:	2101      	movs	r1, #1
 80013b4:	2008      	movs	r0, #8
 80013b6:	f7ff f8f1 	bl	800059c <ws2812SetColor>
				ws2812SetColor(9,1,1,1);//index, r, g, b
 80013ba:	2301      	movs	r3, #1
 80013bc:	2201      	movs	r2, #1
 80013be:	2101      	movs	r1, #1
 80013c0:	2009      	movs	r0, #9
 80013c2:	f7ff f8eb 	bl	800059c <ws2812SetColor>
				temp=1;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <StartTask04+0x424>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]
				break;
 80013cc:	bf00      	nop
		}

		ws2812AllColor(0,0,0);//r, g, b
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff f93a 	bl	800064c <ws2812AllColor>
		ws2812NumOn(NUM_NPLED);
 80013d8:	2018      	movs	r0, #24
 80013da:	f7ff f8cb 	bl	8000574 <ws2812NumOn>
		printf("task4\n");
 80013de:	4804      	ldr	r0, [pc, #16]	; (80013f0 <StartTask04+0x428>)
 80013e0:	f00a f830 	bl	800b444 <puts>
  {
 80013e4:	e5f7      	b.n	8000fd6 <StartTask04+0xe>
 80013e6:	bf00      	nop
 80013e8:	0800c22c 	.word	0x0800c22c
 80013ec:	2000061c 	.word	0x2000061c
 80013f0:	0800c234 	.word	0x0800c234

080013f4 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	uint32_t lastTime = osKernelGetTickCount();
 80013fc:	f006 fb82 	bl	8007b04 <osKernelGetTickCount>
 8001400:	60f8      	str	r0, [r7, #12]

	fanInit();
 8001402:	f7ff fc19 	bl	8000c38 <fanInit>

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_FAN;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800140c:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f006 fd0a 	bl	8007e28 <osDelayUntil>
	fanOn(30);
 8001414:	201e      	movs	r0, #30
 8001416:	f7ff fc19 	bl	8000c4c <fanOn>
	//htim1.Instance->CCR1 = 50;
	printf("task5\n");
 800141a:	4802      	ldr	r0, [pc, #8]	; (8001424 <StartTask05+0x30>)
 800141c:	f00a f812 	bl	800b444 <puts>
  {
 8001420:	e7f1      	b.n	8001406 <StartTask05+0x12>
 8001422:	bf00      	nop
 8001424:	0800c23c 	.word	0x0800c23c

08001428 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	//	  		  if(osSemaphoreAcquire(PSx_SIG_BinSemHandle, 0) == osOK)
	//	  		  {
	//	  			printf("StartTask06 PS_SIG1_Pin.\n");
	//	  		  }
	//	  	  }
		  osThreadFlagsWait(1, 0, osWaitForever);
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	2100      	movs	r1, #0
 8001436:	2001      	movs	r0, #1
 8001438:	f006 fc5a 	bl	8007cf0 <osThreadFlagsWait>
		  printf("StartTask06 PS_SIG1_Pin.\n");
 800143c:	4801      	ldr	r0, [pc, #4]	; (8001444 <StartTask06+0x1c>)
 800143e:	f00a f801 	bl	800b444 <puts>
  {
 8001442:	e7f5      	b.n	8001430 <StartTask06+0x8>
 8001444:	0800c244 	.word	0x0800c244

08001448 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b57      	ldr	r3, [pc, #348]	; (80015c0 <MX_GPIO_Init+0x178>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a56      	ldr	r2, [pc, #344]	; (80015c0 <MX_GPIO_Init+0x178>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b54      	ldr	r3, [pc, #336]	; (80015c0 <MX_GPIO_Init+0x178>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <MX_GPIO_Init+0x178>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a4f      	ldr	r2, [pc, #316]	; (80015c0 <MX_GPIO_Init+0x178>)
 8001484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b4d      	ldr	r3, [pc, #308]	; (80015c0 <MX_GPIO_Init+0x178>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <MX_GPIO_Init+0x178>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a48      	ldr	r2, [pc, #288]	; (80015c0 <MX_GPIO_Init+0x178>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b46      	ldr	r3, [pc, #280]	; (80015c0 <MX_GPIO_Init+0x178>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <MX_GPIO_Init+0x178>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a41      	ldr	r2, [pc, #260]	; (80015c0 <MX_GPIO_Init+0x178>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b3f      	ldr	r3, [pc, #252]	; (80015c0 <MX_GPIO_Init+0x178>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <MX_GPIO_Init+0x178>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a3a      	ldr	r2, [pc, #232]	; (80015c0 <MX_GPIO_Init+0x178>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b38      	ldr	r3, [pc, #224]	; (80015c0 <MX_GPIO_Init+0x178>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 80014ea:	2200      	movs	r2, #0
 80014ec:	f64f 413e 	movw	r1, #64574	; 0xfc3e
 80014f0:	4834      	ldr	r0, [pc, #208]	; (80015c4 <MX_GPIO_Init+0x17c>)
 80014f2:	f002 fdaf 	bl	8004054 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_DE_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	f244 0110 	movw	r1, #16400	; 0x4010
 80014fc:	4832      	ldr	r0, [pc, #200]	; (80015c8 <MX_GPIO_Init+0x180>)
 80014fe:	f002 fda9 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2104      	movs	r1, #4
 8001506:	4831      	ldr	r0, [pc, #196]	; (80015cc <MX_GPIO_Init+0x184>)
 8001508:	f002 fda4 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC1
                           PC2 PC3 PC4 PC5
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 800150c:	f64f 433e 	movw	r3, #64574	; 0xfc3e
 8001510:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4827      	ldr	r0, [pc, #156]	; (80015c4 <MX_GPIO_Init+0x17c>)
 8001526:	f002 fbf9 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800152a:	2301      	movs	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152e:	2303      	movs	r3, #3
 8001530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4821      	ldr	r0, [pc, #132]	; (80015c4 <MX_GPIO_Init+0x17c>)
 800153e:	f002 fbed 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PS_SIG1_Pin|PS_SIG2_Pin|PS_SIG3_Pin|PS_SIG4_Pin;
 8001542:	23f0      	movs	r3, #240	; 0xf0
 8001544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001546:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800154a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	481e      	ldr	r0, [pc, #120]	; (80015d0 <MX_GPIO_Init+0x188>)
 8001558:	f002 fbe0 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 */
  GPIO_InitStruct.Pin = RS485_DE_Pin|GPIO_PIN_4;
 800155c:	f244 0310 	movw	r3, #16400	; 0x4010
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4814      	ldr	r0, [pc, #80]	; (80015c8 <MX_GPIO_Init+0x180>)
 8001576:	f002 fbd1 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800157a:	2304      	movs	r3, #4
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	480e      	ldr	r0, [pc, #56]	; (80015cc <MX_GPIO_Init+0x184>)
 8001592:	f002 fbc3 	bl	8003d1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2105      	movs	r1, #5
 800159a:	200a      	movs	r0, #10
 800159c:	f001 ff92 	bl	80034c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015a0:	200a      	movs	r0, #10
 80015a2:	f001 ffab 	bl	80034fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2105      	movs	r1, #5
 80015aa:	2017      	movs	r0, #23
 80015ac:	f001 ff8a 	bl	80034c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015b0:	2017      	movs	r0, #23
 80015b2:	f001 ffa3 	bl	80034fc <HAL_NVIC_EnableIRQ>

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40020000 	.word	0x40020000

080015d4 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <MX_I2C1_SMBUS_Init+0x68>)
 80015da:	4a19      	ldr	r2, [pc, #100]	; (8001640 <MX_I2C1_SMBUS_Init+0x6c>)
 80015dc:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.ClockSpeed = 100000;
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_I2C1_SMBUS_Init+0x68>)
 80015e0:	4a18      	ldr	r2, [pc, #96]	; (8001644 <MX_I2C1_SMBUS_Init+0x70>)
 80015e2:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.OwnAddress1 = 0;
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <MX_I2C1_SMBUS_Init+0x68>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_I2C1_SMBUS_Init+0x68>)
 80015ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f0:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <MX_I2C1_SMBUS_Init+0x68>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <MX_I2C1_SMBUS_Init+0x68>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_I2C1_SMBUS_Init+0x68>)
 8001600:	2200      	movs	r2, #0
 8001602:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001604:	4b0d      	ldr	r3, [pc, #52]	; (800163c <MX_I2C1_SMBUS_Init+0x68>)
 8001606:	2200      	movs	r2, #0
 8001608:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_I2C1_SMBUS_Init+0x68>)
 800160c:	2200      	movs	r2, #0
 800160e:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <MX_I2C1_SMBUS_Init+0x68>)
 8001612:	2202      	movs	r2, #2
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8001616:	4809      	ldr	r0, [pc, #36]	; (800163c <MX_I2C1_SMBUS_Init+0x68>)
 8001618:	f003 f9f2 	bl	8004a00 <HAL_SMBUS_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_I2C1_SMBUS_Init+0x52>
  {
    Error_Handler();
 8001622:	f000 f909 	bl	8001838 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_I2C1_SMBUS_Init+0x68>)
 8001628:	f003 faa0 	bl	8004b6c <HAL_SMBUS_EnableAlert_IT>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 8001632:	f000 f901 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000620 	.word	0x20000620
 8001640:	40005400 	.word	0x40005400
 8001644:	000186a0 	.word	0x000186a0

08001648 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(smbusHandle->Instance==I2C1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a19      	ldr	r2, [pc, #100]	; (80016cc <HAL_SMBUS_MspInit+0x84>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d12b      	bne.n	80016c2 <HAL_SMBUS_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_SMBUS_MspInit+0x88>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <HAL_SMBUS_MspInit+0x88>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_SMBUS_MspInit+0x88>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB5     ------> I2C1_SMBA
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001686:	23e0      	movs	r3, #224	; 0xe0
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168a:	2312      	movs	r3, #18
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001696:	2304      	movs	r3, #4
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <HAL_SMBUS_MspInit+0x8c>)
 80016a2:	f002 fb3b 	bl	8003d1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_SMBUS_MspInit+0x88>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <HAL_SMBUS_MspInit+0x88>)
 80016b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_SMBUS_MspInit+0x88>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	; 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40005400 	.word	0x40005400
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020400 	.word	0x40020400

080016d8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)//485 task for nuri motor must change uart port
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, (uint16_t)len, 100);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	2364      	movs	r3, #100	; 0x64
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	4803      	ldr	r0, [pc, #12]	; (80016fc <_write+0x24>)
 80016ee:	f004 fffa 	bl	80066e6 <HAL_UART_Transmit>
	return (len);
 80016f2:	687b      	ldr	r3, [r7, #4]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000808 	.word	0x20000808

08001700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001704:	f000 ff4c 	bl	80025a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001708:	f000 f81a 	bl	8001740 <SystemClock_Config>
  MX_TIM3_Init();
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800170c:	f7ff fe9c 	bl	8001448 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001710:	f7fe ffea 	bl	80006e8 <MX_CAN1_Init>

  MX_TIM1_Init();
 8001714:	f000 fad6 	bl	8001cc4 <MX_TIM1_Init>
  MX_I2C1_SMBUS_Init();
 8001718:	f7ff ff5c 	bl	80015d4 <MX_I2C1_SMBUS_Init>
  MX_DMA_Init();
 800171c:	f7ff fa56 	bl	8000bcc <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001720:	f000 fe2a 	bl	8002378 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001724:	f000 fdfe 	bl	8002324 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8001728:	f000 fbfa 	bl	8001f20 <MX_TIM8_Init>
  MX_TIM3_Init();
 800172c:	f000 fb7c 	bl	8001e28 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001730:	f006 f99e 	bl	8007a70 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001734:	f7ff fac2 	bl	8000cbc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001738:	f006 f9be 	bl	8007ab8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800173c:	e7fe      	b.n	800173c <main+0x3c>
	...

08001740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b094      	sub	sp, #80	; 0x50
 8001744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	2230      	movs	r2, #48	; 0x30
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f009 fd55 	bl	800b1fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <SystemClock_Config+0xcc>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	4a27      	ldr	r2, [pc, #156]	; (800180c <SystemClock_Config+0xcc>)
 800176e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001772:	6413      	str	r3, [r2, #64]	; 0x40
 8001774:	4b25      	ldr	r3, [pc, #148]	; (800180c <SystemClock_Config+0xcc>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <SystemClock_Config+0xd0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a21      	ldr	r2, [pc, #132]	; (8001810 <SystemClock_Config+0xd0>)
 800178a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <SystemClock_Config+0xd0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800179c:	2301      	movs	r3, #1
 800179e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a6:	2302      	movs	r3, #2
 80017a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80017b0:	2306      	movs	r3, #6
 80017b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017b4:	23a8      	movs	r3, #168	; 0xa8
 80017b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b8:	2302      	movs	r3, #2
 80017ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017bc:	2304      	movs	r3, #4
 80017be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c0:	f107 0320 	add.w	r3, r7, #32
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fc91 	bl	80040ec <HAL_RCC_OscConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017d0:	f000 f832 	bl	8001838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d4:	230f      	movs	r3, #15
 80017d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d8:	2302      	movs	r3, #2
 80017da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2105      	movs	r1, #5
 80017f2:	4618      	mov	r0, r3
 80017f4:	f002 fef2 	bl	80045dc <HAL_RCC_ClockConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017fe:	f000 f81b 	bl	8001838 <Error_Handler>
  }
}
 8001802:	bf00      	nop
 8001804:	3750      	adds	r7, #80	; 0x50
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000

08001814 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a04      	ldr	r2, [pc, #16]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d101      	bne.n	800182a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001826:	f000 fedd 	bl	80025e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40001000 	.word	0x40001000

08001838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
}
 800183e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001840:	e7fe      	b.n	8001840 <Error_Handler+0x8>
	...

08001844 <HAL_UART_RxCpltCallback>:
void ServoMotor_init()
{
	HAL_UART_Receive_IT(&huart3, tmp_rx, 12);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {printf("hal_rev irq: %d\n", HAL_UART_Receive_IT(&huart3, tmp_rx, 12));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <HAL_UART_RxCpltCallback+0x3c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d109      	bne.n	800186a <HAL_UART_RxCpltCallback+0x26>
 8001856:	220c      	movs	r2, #12
 8001858:	490a      	ldr	r1, [pc, #40]	; (8001884 <HAL_UART_RxCpltCallback+0x40>)
 800185a:	480b      	ldr	r0, [pc, #44]	; (8001888 <HAL_UART_RxCpltCallback+0x44>)
 800185c:	f004 ffd5 	bl	800680a <HAL_UART_Receive_IT>
 8001860:	4603      	mov	r3, r0
 8001862:	4619      	mov	r1, r3
 8001864:	4809      	ldr	r0, [pc, #36]	; (800188c <HAL_UART_RxCpltCallback+0x48>)
 8001866:	f009 fd67 	bl	800b338 <iprintf>
	}//SET INTERRUPT
	flag_rx = 1;
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_UART_RxCpltCallback+0x4c>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]
	printf("H_URCBf\n");
 8001870:	4808      	ldr	r0, [pc, #32]	; (8001894 <HAL_UART_RxCpltCallback+0x50>)
 8001872:	f009 fde7 	bl	800b444 <puts>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40004800 	.word	0x40004800
 8001884:	20000678 	.word	0x20000678
 8001888:	2000084c 	.word	0x2000084c
 800188c:	0800c260 	.word	0x0800c260
 8001890:	20000674 	.word	0x20000674
 8001894:	0800c274 	.word	0x0800c274

08001898 <ServoMotor_writeDMA>:

    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
}

void ServoMotor_writeDMA(const char* str)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a6:	480e      	ldr	r0, [pc, #56]	; (80018e0 <ServoMotor_writeDMA+0x48>)
 80018a8:	f002 fbd4 	bl	8004054 <HAL_GPIO_WritePin>
    osDelay(6);//because transmit_DMA
 80018ac:	2006      	movs	r0, #6
 80018ae:	f006 faa0 	bl	8007df2 <osDelay>
    if(HAL_UART_Transmit_DMA(&huart3,str, 48)!= HAL_OK){Error_Handler();}
 80018b2:	2230      	movs	r2, #48	; 0x30
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	480b      	ldr	r0, [pc, #44]	; (80018e4 <ServoMotor_writeDMA+0x4c>)
 80018b8:	f004 ffd8 	bl	800686c <HAL_UART_Transmit_DMA>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <ServoMotor_writeDMA+0x2e>
 80018c2:	f7ff ffb9 	bl	8001838 <Error_Handler>
    osDelay(6);//because transmit_DMA
 80018c6:	2006      	movs	r0, #6
 80018c8:	f006 fa93 	bl	8007df2 <osDelay>
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d2:	4803      	ldr	r0, [pc, #12]	; (80018e0 <ServoMotor_writeDMA+0x48>)
 80018d4:	f002 fbbe 	bl	8004054 <HAL_GPIO_WritePin>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40020400 	.word	0x40020400
 80018e4:	2000084c 	.word	0x2000084c

080018e8 <DataSetSteering>:
    ServoMotor_write(buf);
    
}

void DataSetSteering(const char* str, char id, char direction, unsigned short position, char init)
{
 80018e8:	b490      	push	{r4, r7}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	4608      	mov	r0, r1
 80018f2:	4611      	mov	r1, r2
 80018f4:	461a      	mov	r2, r3
 80018f6:	4603      	mov	r3, r0
 80018f8:	70fb      	strb	r3, [r7, #3]
 80018fa:	460b      	mov	r3, r1
 80018fc:	70bb      	strb	r3, [r7, #2]
 80018fe:	4613      	mov	r3, r2
 8001900:	803b      	strh	r3, [r7, #0]
    char buf[12];

    buf[0]=0xFF;//header
 8001902:	23ff      	movs	r3, #255	; 0xff
 8001904:	723b      	strb	r3, [r7, #8]
    buf[1]=0xFE;//header
 8001906:	23fe      	movs	r3, #254	; 0xfe
 8001908:	727b      	strb	r3, [r7, #9]
    buf[2]=id;//id fixed
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	72bb      	strb	r3, [r7, #10]
    buf[3]=0x06;//length
 800190e:	2306      	movs	r3, #6
 8001910:	72fb      	strb	r3, [r7, #11]
    buf[4]=0x00;//checksum
 8001912:	2300      	movs	r3, #0
 8001914:	733b      	strb	r3, [r7, #12]
    buf[5]=0x02 + init;//mode,  2=position control mode , 3=speed control mode
 8001916:	f897 3020 	ldrb.w	r3, [r7, #32]
 800191a:	3302      	adds	r3, #2
 800191c:	b2db      	uxtb	r3, r3
 800191e:	737b      	strb	r3, [r7, #13]
    buf[6]=direction;//direction ccw=0x00, cw=0x01
 8001920:	78bb      	ldrb	r3, [r7, #2]
 8001922:	73bb      	strb	r3, [r7, #14]
    buf[7]=(char)(position>>8);//position
 8001924:	883b      	ldrh	r3, [r7, #0]
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	b29b      	uxth	r3, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	73fb      	strb	r3, [r7, #15]
    buf[8]=(char)position;//position
 800192e:	883b      	ldrh	r3, [r7, #0]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	743b      	strb	r3, [r7, #16]
    if(init == 1){buf[9]=STOP_SPEED;}//stop speed 0.3s>>0.6s 220520>>0.8s 220621
 8001934:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d102      	bne.n	8001942 <DataSetSteering+0x5a>
 800193c:	230a      	movs	r3, #10
 800193e:	747b      	strb	r3, [r7, #17]
 8001940:	e001      	b.n	8001946 <DataSetSteering+0x5e>
    else buf[9]=0x1E;//speed, position second = 3s
 8001942:	231e      	movs	r3, #30
 8001944:	747b      	strb	r3, [r7, #17]
    buf[10]=0x00;//reservation
 8001946:	2300      	movs	r3, #0
 8001948:	74bb      	strb	r3, [r7, #18]
    buf[11]=0x00;//reservation
 800194a:	2300      	movs	r3, #0
 800194c:	74fb      	strb	r3, [r7, #19]

    //FF FE 00 06 EC 03 00 00 00 0A
    //0  1  2  3  4  5  6  7  8  9
    for(int i=2;i<SERVO_BUFLEN;i++) {checksum_val += buf[i];}//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 800194e:	2302      	movs	r3, #2
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	e00d      	b.n	8001970 <DataSetSteering+0x88>
 8001954:	f107 0208 	add.w	r2, r7, #8
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	4413      	add	r3, r2
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <DataSetSteering+0xc8>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <DataSetSteering+0xc8>)
 8001968:	701a      	strb	r2, [r3, #0]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3301      	adds	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b09      	cmp	r3, #9
 8001974:	ddee      	ble.n	8001954 <DataSetSteering+0x6c>
    buf[4]=~(checksum_val);//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <DataSetSteering+0xc8>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	43db      	mvns	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	733b      	strb	r3, [r7, #12]
    checksum_val=0x00;//checksum
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <DataSetSteering+0xc8>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]

    memcpy(str+(12*id), buf, sizeof(buf));
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	461a      	mov	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	461c      	mov	r4, r3
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800199e:	6020      	str	r0, [r4, #0]
 80019a0:	6061      	str	r1, [r4, #4]
 80019a2:	60a2      	str	r2, [r4, #8]

}
 80019a4:	bf00      	nop
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc90      	pop	{r4, r7}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000670 	.word	0x20000670

080019b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_MspInit+0x54>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <HAL_MspInit+0x54>)
 80019c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <HAL_MspInit+0x54>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_MspInit+0x54>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <HAL_MspInit+0x54>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e4:	6413      	str	r3, [r2, #64]	; 0x40
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_MspInit+0x54>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	210f      	movs	r1, #15
 80019f6:	f06f 0001 	mvn.w	r0, #1
 80019fa:	f001 fd63 	bl	80034c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800

08001a0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	; 0x30
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	2036      	movs	r0, #54	; 0x36
 8001a22:	f001 fd4f 	bl	80034c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a26:	2036      	movs	r0, #54	; 0x36
 8001a28:	f001 fd68 	bl	80034fc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <HAL_InitTick+0xa4>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	4a1e      	ldr	r2, [pc, #120]	; (8001ab0 <HAL_InitTick+0xa4>)
 8001a36:	f043 0310 	orr.w	r3, r3, #16
 8001a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3c:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <HAL_InitTick+0xa4>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a48:	f107 0210 	add.w	r2, r7, #16
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 ffa2 	bl	800499c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a58:	f002 ff78 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a64:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <HAL_InitTick+0xa8>)
 8001a66:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6a:	0c9b      	lsrs	r3, r3, #18
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_InitTick+0xac>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <HAL_InitTick+0xb0>)
 8001a74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_InitTick+0xac>)
 8001a78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a7c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <HAL_InitTick+0xac>)
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_InitTick+0xac>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_InitTick+0xac>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a90:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <HAL_InitTick+0xac>)
 8001a92:	f003 f88b 	bl	8004bac <HAL_TIM_Base_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d104      	bne.n	8001aa6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001a9c:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <HAL_InitTick+0xac>)
 8001a9e:	f003 f8d5 	bl	8004c4c <HAL_TIM_Base_Start_IT>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	e000      	b.n	8001aa8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3730      	adds	r7, #48	; 0x30
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	431bde83 	.word	0x431bde83
 8001ab8:	20000684 	.word	0x20000684
 8001abc:	40001000 	.word	0x40001000

08001ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <NMI_Handler+0x4>

08001ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <HardFault_Handler+0x4>

08001acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <MemManage_Handler+0x4>

08001ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <BusFault_Handler+0x4>

08001ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <UsageFault_Handler+0x4>

08001ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG1_Pin);
 8001af0:	2010      	movs	r0, #16
 8001af2:	f002 fae3 	bl	80040bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <DMA1_Stream3_IRQHandler+0x10>)
 8001b02:	f001 fea1 	bl	8003848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000890 	.word	0x20000890

08001b10 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <CAN1_RX0_IRQHandler+0x10>)
 8001b16:	f001 f9ed 	bl	8002ef4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200005d8 	.word	0x200005d8

08001b24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG2_Pin);
 8001b28:	2020      	movs	r0, #32
 8001b2a:	f002 fac7 	bl	80040bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG3_Pin);
 8001b2e:	2040      	movs	r0, #64	; 0x40
 8001b30:	f002 fac4 	bl	80040bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG4_Pin);
 8001b34:	2080      	movs	r0, #128	; 0x80
 8001b36:	f002 fac1 	bl	80040bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <USART2_IRQHandler+0x10>)
 8001b46:	f004 ff0f 	bl	8006968 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000808 	.word	0x20000808

08001b54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <USART3_IRQHandler+0x10>)
 8001b5a:	f004 ff05 	bl	8006968 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000084c 	.word	0x2000084c

08001b68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <TIM6_DAC_IRQHandler+0x10>)
 8001b6e:	f003 fc16 	bl	800539e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000684 	.word	0x20000684

08001b7c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <DMA2_Stream2_IRQHandler+0x10>)
 8001b82:	f001 fe61 	bl	8003848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200007a8 	.word	0x200007a8

08001b90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	e00a      	b.n	8001bb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ba2:	f3af 8000 	nop.w
 8001ba6:	4601      	mov	r1, r0
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	60ba      	str	r2, [r7, #8]
 8001bae:	b2ca      	uxtb	r2, r1
 8001bb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dbf0      	blt.n	8001ba2 <_read+0x12>
	}

return len;
 8001bc0:	687b      	ldr	r3, [r7, #4]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_close>:
	}
	return len;
}

int _close(int file)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
	return -1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf2:	605a      	str	r2, [r3, #4]
	return 0;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_isatty>:

int _isatty(int file)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
	return 1;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
	return 0;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c3c:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <_sbrk+0x5c>)
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <_sbrk+0x60>)
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <_sbrk+0x64>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <_sbrk+0x68>)
 8001c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d207      	bcs.n	8001c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c64:	f009 f99a 	bl	800af9c <__errno>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	e009      	b.n	8001c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <_sbrk+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <_sbrk+0x64>)
 8001c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c86:	68fb      	ldr	r3, [r7, #12]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20020000 	.word	0x20020000
 8001c94:	00000400 	.word	0x00000400
 8001c98:	200006cc 	.word	0x200006cc
 8001c9c:	20005318 	.word	0x20005318

08001ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <SystemInit+0x20>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001caa:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <SystemInit+0x20>)
 8001cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b096      	sub	sp, #88	; 0x58
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
 8001ce4:	615a      	str	r2, [r3, #20]
 8001ce6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f009 fa7e 	bl	800b1fe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d02:	4b47      	ldr	r3, [pc, #284]	; (8001e20 <MX_TIM1_Init+0x15c>)
 8001d04:	4a47      	ldr	r2, [pc, #284]	; (8001e24 <MX_TIM1_Init+0x160>)
 8001d06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680-1;
 8001d08:	4b45      	ldr	r3, [pc, #276]	; (8001e20 <MX_TIM1_Init+0x15c>)
 8001d0a:	f240 628f 	movw	r2, #1679	; 0x68f
 8001d0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d10:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <MX_TIM1_Init+0x15c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001d16:	4b42      	ldr	r3, [pc, #264]	; (8001e20 <MX_TIM1_Init+0x15c>)
 8001d18:	2263      	movs	r2, #99	; 0x63
 8001d1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1c:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <MX_TIM1_Init+0x15c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d22:	4b3f      	ldr	r3, [pc, #252]	; (8001e20 <MX_TIM1_Init+0x15c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d28:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <MX_TIM1_Init+0x15c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d2e:	483c      	ldr	r0, [pc, #240]	; (8001e20 <MX_TIM1_Init+0x15c>)
 8001d30:	f002 fffc 	bl	8004d2c <HAL_TIM_PWM_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d3a:	f7ff fd7d 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001d3e:	4838      	ldr	r0, [pc, #224]	; (8001e20 <MX_TIM1_Init+0x15c>)
 8001d40:	f003 fad4 	bl	80052ec <HAL_TIM_IC_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001d4a:	f7ff fd75 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4830      	ldr	r0, [pc, #192]	; (8001e20 <MX_TIM1_Init+0x15c>)
 8001d5e:	f004 fb93 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001d68:	f7ff fd66 	bl	8001838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d6c:	2360      	movs	r3, #96	; 0x60
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d74:	2300      	movs	r3, #0
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d80:	2300      	movs	r3, #0
 8001d82:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4823      	ldr	r0, [pc, #140]	; (8001e20 <MX_TIM1_Init+0x15c>)
 8001d92:	f003 fca9 	bl	80056e8 <HAL_TIM_PWM_ConfigChannel>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001d9c:	f7ff fd4c 	bl	8001838 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001da4:	2301      	movs	r3, #1
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db4:	2204      	movs	r2, #4
 8001db6:	4619      	mov	r1, r3
 8001db8:	4819      	ldr	r0, [pc, #100]	; (8001e20 <MX_TIM1_Init+0x15c>)
 8001dba:	f003 fbf8 	bl	80055ae <HAL_TIM_IC_ConfigChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8001dc4:	f7ff fd38 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dcc:	2208      	movs	r2, #8
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4813      	ldr	r0, [pc, #76]	; (8001e20 <MX_TIM1_Init+0x15c>)
 8001dd2:	f003 fbec 	bl	80055ae <HAL_TIM_IC_ConfigChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8001ddc:	f7ff fd2c 	bl	8001838 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	4619      	mov	r1, r3
 8001e02:	4807      	ldr	r0, [pc, #28]	; (8001e20 <MX_TIM1_Init+0x15c>)
 8001e04:	f004 fbbc 	bl	8006580 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001e0e:	f7ff fd13 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e12:	4803      	ldr	r0, [pc, #12]	; (8001e20 <MX_TIM1_Init+0x15c>)
 8001e14:	f000 fa22 	bl	800225c <HAL_TIM_MspPostInit>

}
 8001e18:	bf00      	nop
 8001e1a:	3758      	adds	r7, #88	; 0x58
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200006d0 	.word	0x200006d0
 8001e24:	40010000 	.word	0x40010000

08001e28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e2e:	f107 0318 	add.w	r3, r7, #24
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e46:	463b      	mov	r3, r7
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e52:	4b31      	ldr	r3, [pc, #196]	; (8001f18 <MX_TIM3_Init+0xf0>)
 8001e54:	4a31      	ldr	r2, [pc, #196]	; (8001f1c <MX_TIM3_Init+0xf4>)
 8001e56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e58:	4b2f      	ldr	r3, [pc, #188]	; (8001f18 <MX_TIM3_Init+0xf0>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5e:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <MX_TIM3_Init+0xf0>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e64:	4b2c      	ldr	r3, [pc, #176]	; (8001f18 <MX_TIM3_Init+0xf0>)
 8001e66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6c:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <MX_TIM3_Init+0xf0>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e72:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <MX_TIM3_Init+0xf0>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e78:	4827      	ldr	r0, [pc, #156]	; (8001f18 <MX_TIM3_Init+0xf0>)
 8001e7a:	f002 fe97 	bl	8004bac <HAL_TIM_Base_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001e84:	f7ff fcd8 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e8e:	f107 0318 	add.w	r3, r7, #24
 8001e92:	4619      	mov	r1, r3
 8001e94:	4820      	ldr	r0, [pc, #128]	; (8001f18 <MX_TIM3_Init+0xf0>)
 8001e96:	f003 fce9 	bl	800586c <HAL_TIM_ConfigClockSource>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ea0:	f7ff fcca 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001ea4:	481c      	ldr	r0, [pc, #112]	; (8001f18 <MX_TIM3_Init+0xf0>)
 8001ea6:	f003 fa21 	bl	80052ec <HAL_TIM_IC_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001eb0:	f7ff fcc2 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4815      	ldr	r0, [pc, #84]	; (8001f18 <MX_TIM3_Init+0xf0>)
 8001ec4:	f004 fae0 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001ece:	f7ff fcb3 	bl	8001838 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001ee2:	463b      	mov	r3, r7
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480b      	ldr	r0, [pc, #44]	; (8001f18 <MX_TIM3_Init+0xf0>)
 8001eea:	f003 fb60 	bl	80055ae <HAL_TIM_IC_ConfigChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001ef4:	f7ff fca0 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001ef8:	463b      	mov	r3, r7
 8001efa:	220c      	movs	r2, #12
 8001efc:	4619      	mov	r1, r3
 8001efe:	4806      	ldr	r0, [pc, #24]	; (8001f18 <MX_TIM3_Init+0xf0>)
 8001f00:	f003 fb55 	bl	80055ae <HAL_TIM_IC_ConfigChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001f0a:	f7ff fc95 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	3728      	adds	r7, #40	; 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000718 	.word	0x20000718
 8001f1c:	40000400 	.word	0x40000400

08001f20 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b096      	sub	sp, #88	; 0x58
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]
 8001f4e:	615a      	str	r2, [r3, #20]
 8001f50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	2220      	movs	r2, #32
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f009 f950 	bl	800b1fe <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f5e:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <MX_TIM8_Init+0x180>)
 8001f60:	4a50      	ldr	r2, [pc, #320]	; (80020a4 <MX_TIM8_Init+0x184>)
 8001f62:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8001f64:	4b4e      	ldr	r3, [pc, #312]	; (80020a0 <MX_TIM8_Init+0x180>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6a:	4b4d      	ldr	r3, [pc, #308]	; (80020a0 <MX_TIM8_Init+0x180>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 104;
 8001f70:	4b4b      	ldr	r3, [pc, #300]	; (80020a0 <MX_TIM8_Init+0x180>)
 8001f72:	2268      	movs	r2, #104	; 0x68
 8001f74:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f76:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <MX_TIM8_Init+0x180>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f7c:	4b48      	ldr	r3, [pc, #288]	; (80020a0 <MX_TIM8_Init+0x180>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <MX_TIM8_Init+0x180>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f88:	4845      	ldr	r0, [pc, #276]	; (80020a0 <MX_TIM8_Init+0x180>)
 8001f8a:	f002 fe0f 	bl	8004bac <HAL_TIM_Base_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001f94:	f7ff fc50 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	483e      	ldr	r0, [pc, #248]	; (80020a0 <MX_TIM8_Init+0x180>)
 8001fa6:	f003 fc61 	bl	800586c <HAL_TIM_ConfigClockSource>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001fb0:	f7ff fc42 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001fb4:	483a      	ldr	r0, [pc, #232]	; (80020a0 <MX_TIM8_Init+0x180>)
 8001fb6:	f002 feb9 	bl	8004d2c <HAL_TIM_PWM_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001fc0:	f7ff fc3a 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4833      	ldr	r0, [pc, #204]	; (80020a0 <MX_TIM8_Init+0x180>)
 8001fd4:	f004 fa58 	bl	8006488 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001fde:	f7ff fc2b 	bl	8001838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe2:	2360      	movs	r3, #96	; 0x60
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002002:	2200      	movs	r2, #0
 8002004:	4619      	mov	r1, r3
 8002006:	4826      	ldr	r0, [pc, #152]	; (80020a0 <MX_TIM8_Init+0x180>)
 8002008:	f003 fb6e 	bl	80056e8 <HAL_TIM_PWM_ConfigChannel>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8002012:	f7ff fc11 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201a:	2204      	movs	r2, #4
 800201c:	4619      	mov	r1, r3
 800201e:	4820      	ldr	r0, [pc, #128]	; (80020a0 <MX_TIM8_Init+0x180>)
 8002020:	f003 fb62 	bl	80056e8 <HAL_TIM_PWM_ConfigChannel>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 800202a:	f7ff fc05 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800202e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002032:	2208      	movs	r2, #8
 8002034:	4619      	mov	r1, r3
 8002036:	481a      	ldr	r0, [pc, #104]	; (80020a0 <MX_TIM8_Init+0x180>)
 8002038:	f003 fb56 	bl	80056e8 <HAL_TIM_PWM_ConfigChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8002042:	f7ff fbf9 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204a:	220c      	movs	r2, #12
 800204c:	4619      	mov	r1, r3
 800204e:	4814      	ldr	r0, [pc, #80]	; (80020a0 <MX_TIM8_Init+0x180>)
 8002050:	f003 fb4a 	bl	80056e8 <HAL_TIM_PWM_ConfigChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 800205a:	f7ff fbed 	bl	8001838 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002072:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002076:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	4619      	mov	r1, r3
 8002080:	4807      	ldr	r0, [pc, #28]	; (80020a0 <MX_TIM8_Init+0x180>)
 8002082:	f004 fa7d 	bl	8006580 <HAL_TIMEx_ConfigBreakDeadTime>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 800208c:	f7ff fbd4 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002090:	4803      	ldr	r0, [pc, #12]	; (80020a0 <MX_TIM8_Init+0x180>)
 8002092:	f000 f8e3 	bl	800225c <HAL_TIM_MspPostInit>

}
 8002096:	bf00      	nop
 8002098:	3758      	adds	r7, #88	; 0x58
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000760 	.word	0x20000760
 80020a4:	40010400 	.word	0x40010400

080020a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a19      	ldr	r2, [pc, #100]	; (800212c <HAL_TIM_PWM_MspInit+0x84>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d12c      	bne.n	8002124 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_TIM_PWM_MspInit+0x88>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a17      	ldr	r2, [pc, #92]	; (8002130 <HAL_TIM_PWM_MspInit+0x88>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <HAL_TIM_PWM_MspInit+0x88>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HAL_TIM_PWM_MspInit+0x88>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a10      	ldr	r2, [pc, #64]	; (8002130 <HAL_TIM_PWM_MspInit+0x88>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_TIM_PWM_MspInit+0x88>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002102:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002114:	2301      	movs	r3, #1
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4619      	mov	r1, r3
 800211e:	4805      	ldr	r0, [pc, #20]	; (8002134 <HAL_TIM_PWM_MspInit+0x8c>)
 8002120:	f001 fdfc 	bl	8003d1c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002124:	bf00      	nop
 8002126:	3728      	adds	r7, #40	; 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40010000 	.word	0x40010000
 8002130:	40023800 	.word	0x40023800
 8002134:	40020000 	.word	0x40020000

08002138 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a3b      	ldr	r2, [pc, #236]	; (8002244 <HAL_TIM_Base_MspInit+0x10c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d12c      	bne.n	80021b4 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b3a      	ldr	r3, [pc, #232]	; (8002248 <HAL_TIM_Base_MspInit+0x110>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a39      	ldr	r2, [pc, #228]	; (8002248 <HAL_TIM_Base_MspInit+0x110>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b37      	ldr	r3, [pc, #220]	; (8002248 <HAL_TIM_Base_MspInit+0x110>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b33      	ldr	r3, [pc, #204]	; (8002248 <HAL_TIM_Base_MspInit+0x110>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a32      	ldr	r2, [pc, #200]	; (8002248 <HAL_TIM_Base_MspInit+0x110>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b30      	ldr	r3, [pc, #192]	; (8002248 <HAL_TIM_Base_MspInit+0x110>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002192:	2303      	movs	r3, #3
 8002194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021a2:	2302      	movs	r3, #2
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4619      	mov	r1, r3
 80021ac:	4827      	ldr	r0, [pc, #156]	; (800224c <HAL_TIM_Base_MspInit+0x114>)
 80021ae:	f001 fdb5 	bl	8003d1c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80021b2:	e042      	b.n	800223a <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a25      	ldr	r2, [pc, #148]	; (8002250 <HAL_TIM_Base_MspInit+0x118>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d13d      	bne.n	800223a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	4b21      	ldr	r3, [pc, #132]	; (8002248 <HAL_TIM_Base_MspInit+0x110>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a20      	ldr	r2, [pc, #128]	; (8002248 <HAL_TIM_Base_MspInit+0x110>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <HAL_TIM_Base_MspInit+0x110>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_TIM_Base_MspInit+0x11c>)
 80021dc:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_TIM_Base_MspInit+0x120>)
 80021de:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 80021e0:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <HAL_TIM_Base_MspInit+0x11c>)
 80021e2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80021e6:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021e8:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_TIM_Base_MspInit+0x11c>)
 80021ea:	2240      	movs	r2, #64	; 0x40
 80021ec:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ee:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_TIM_Base_MspInit+0x11c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80021f4:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_TIM_Base_MspInit+0x11c>)
 80021f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021fa:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_TIM_Base_MspInit+0x11c>)
 80021fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002202:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_TIM_Base_MspInit+0x11c>)
 8002206:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800220a:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_TIM_Base_MspInit+0x11c>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <HAL_TIM_Base_MspInit+0x11c>)
 8002214:	2200      	movs	r2, #0
 8002216:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002218:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <HAL_TIM_Base_MspInit+0x11c>)
 800221a:	2200      	movs	r2, #0
 800221c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <HAL_TIM_Base_MspInit+0x11c>)
 8002220:	f001 f97a 	bl	8003518 <HAL_DMA_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_TIM_Base_MspInit+0xf6>
      Error_Handler();
 800222a:	f7ff fb05 	bl	8001838 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a08      	ldr	r2, [pc, #32]	; (8002254 <HAL_TIM_Base_MspInit+0x11c>)
 8002232:	625a      	str	r2, [r3, #36]	; 0x24
 8002234:	4a07      	ldr	r2, [pc, #28]	; (8002254 <HAL_TIM_Base_MspInit+0x11c>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6393      	str	r3, [r2, #56]	; 0x38
}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	; 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40000400 	.word	0x40000400
 8002248:	40023800 	.word	0x40023800
 800224c:	40020400 	.word	0x40020400
 8002250:	40010400 	.word	0x40010400
 8002254:	200007a8 	.word	0x200007a8
 8002258:	40026440 	.word	0x40026440

0800225c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	; 0x28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a25      	ldr	r2, [pc, #148]	; (8002310 <HAL_TIM_MspPostInit+0xb4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d11f      	bne.n	80022be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_TIM_MspPostInit+0xb8>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a23      	ldr	r2, [pc, #140]	; (8002314 <HAL_TIM_MspPostInit+0xb8>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_TIM_MspPostInit+0xb8>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800229a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800229e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a8:	2300      	movs	r3, #0
 80022aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022ac:	2301      	movs	r3, #1
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	4619      	mov	r1, r3
 80022b6:	4818      	ldr	r0, [pc, #96]	; (8002318 <HAL_TIM_MspPostInit+0xbc>)
 80022b8:	f001 fd30 	bl	8003d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80022bc:	e023      	b.n	8002306 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a16      	ldr	r2, [pc, #88]	; (800231c <HAL_TIM_MspPostInit+0xc0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d11e      	bne.n	8002306 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_TIM_MspPostInit+0xb8>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	4a10      	ldr	r2, [pc, #64]	; (8002314 <HAL_TIM_MspPostInit+0xb8>)
 80022d2:	f043 0304 	orr.w	r3, r3, #4
 80022d6:	6313      	str	r3, [r2, #48]	; 0x30
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <HAL_TIM_MspPostInit+0xb8>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80022e4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80022e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80022f6:	2303      	movs	r3, #3
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	4619      	mov	r1, r3
 8002300:	4807      	ldr	r0, [pc, #28]	; (8002320 <HAL_TIM_MspPostInit+0xc4>)
 8002302:	f001 fd0b 	bl	8003d1c <HAL_GPIO_Init>
}
 8002306:	bf00      	nop
 8002308:	3728      	adds	r7, #40	; 0x28
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40010000 	.word	0x40010000
 8002314:	40023800 	.word	0x40023800
 8002318:	40020000 	.word	0x40020000
 800231c:	40010400 	.word	0x40010400
 8002320:	40020800 	.word	0x40020800

08002324 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <MX_USART2_UART_Init+0x50>)
 800232c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 8002330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 800234a:	220c      	movs	r2, #12
 800234c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 800235c:	f004 f976 	bl	800664c <HAL_UART_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002366:	f7ff fa67 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000808 	.word	0x20000808
 8002374:	40004400 	.word	0x40004400

08002378 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <MX_USART3_UART_Init+0x4c>)
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <MX_USART3_UART_Init+0x50>)
 8002380:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MX_USART3_UART_Init+0x4c>)
 8002384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002388:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <MX_USART3_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <MX_USART3_UART_Init+0x4c>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <MX_USART3_UART_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <MX_USART3_UART_Init+0x4c>)
 800239e:	220c      	movs	r2, #12
 80023a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <MX_USART3_UART_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <MX_USART3_UART_Init+0x4c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_USART3_UART_Init+0x4c>)
 80023b0:	f004 f94c 	bl	800664c <HAL_UART_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80023ba:	f7ff fa3d 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000084c 	.word	0x2000084c
 80023c8:	40004800 	.word	0x40004800

080023cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08c      	sub	sp, #48	; 0x30
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 031c 	add.w	r3, r7, #28
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a51      	ldr	r2, [pc, #324]	; (8002530 <HAL_UART_MspInit+0x164>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d134      	bne.n	8002458 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	4b50      	ldr	r3, [pc, #320]	; (8002534 <HAL_UART_MspInit+0x168>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a4f      	ldr	r2, [pc, #316]	; (8002534 <HAL_UART_MspInit+0x168>)
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b4d      	ldr	r3, [pc, #308]	; (8002534 <HAL_UART_MspInit+0x168>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	61bb      	str	r3, [r7, #24]
 8002408:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	4b49      	ldr	r3, [pc, #292]	; (8002534 <HAL_UART_MspInit+0x168>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a48      	ldr	r2, [pc, #288]	; (8002534 <HAL_UART_MspInit+0x168>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b46      	ldr	r3, [pc, #280]	; (8002534 <HAL_UART_MspInit+0x168>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002426:	230c      	movs	r3, #12
 8002428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002432:	2303      	movs	r3, #3
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002436:	2307      	movs	r3, #7
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243a:	f107 031c 	add.w	r3, r7, #28
 800243e:	4619      	mov	r1, r3
 8002440:	483d      	ldr	r0, [pc, #244]	; (8002538 <HAL_UART_MspInit+0x16c>)
 8002442:	f001 fc6b 	bl	8003d1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2105      	movs	r1, #5
 800244a:	2026      	movs	r0, #38	; 0x26
 800244c:	f001 f83a 	bl	80034c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002450:	2026      	movs	r0, #38	; 0x26
 8002452:	f001 f853 	bl	80034fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002456:	e067      	b.n	8002528 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART3)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a37      	ldr	r2, [pc, #220]	; (800253c <HAL_UART_MspInit+0x170>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d162      	bne.n	8002528 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_UART_MspInit+0x168>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a32      	ldr	r2, [pc, #200]	; (8002534 <HAL_UART_MspInit+0x168>)
 800246c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
 8002472:	4b30      	ldr	r3, [pc, #192]	; (8002534 <HAL_UART_MspInit+0x168>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <HAL_UART_MspInit+0x168>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a2b      	ldr	r2, [pc, #172]	; (8002534 <HAL_UART_MspInit+0x168>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b29      	ldr	r3, [pc, #164]	; (8002534 <HAL_UART_MspInit+0x168>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800249a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024ac:	2307      	movs	r3, #7
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	4619      	mov	r1, r3
 80024b6:	4822      	ldr	r0, [pc, #136]	; (8002540 <HAL_UART_MspInit+0x174>)
 80024b8:	f001 fc30 	bl	8003d1c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80024bc:	4b21      	ldr	r3, [pc, #132]	; (8002544 <HAL_UART_MspInit+0x178>)
 80024be:	4a22      	ldr	r2, [pc, #136]	; (8002548 <HAL_UART_MspInit+0x17c>)
 80024c0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_UART_MspInit+0x178>)
 80024c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024c8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024ca:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_UART_MspInit+0x178>)
 80024cc:	2240      	movs	r2, #64	; 0x40
 80024ce:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024d0:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <HAL_UART_MspInit+0x178>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024d6:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <HAL_UART_MspInit+0x178>)
 80024d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024dc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024de:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_UART_MspInit+0x178>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024e4:	4b17      	ldr	r3, [pc, #92]	; (8002544 <HAL_UART_MspInit+0x178>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80024ea:	4b16      	ldr	r3, [pc, #88]	; (8002544 <HAL_UART_MspInit+0x178>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <HAL_UART_MspInit+0x178>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <HAL_UART_MspInit+0x178>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80024fc:	4811      	ldr	r0, [pc, #68]	; (8002544 <HAL_UART_MspInit+0x178>)
 80024fe:	f001 f80b 	bl	8003518 <HAL_DMA_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_UART_MspInit+0x140>
      Error_Handler();
 8002508:	f7ff f996 	bl	8001838 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <HAL_UART_MspInit+0x178>)
 8002510:	635a      	str	r2, [r3, #52]	; 0x34
 8002512:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <HAL_UART_MspInit+0x178>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002518:	2200      	movs	r2, #0
 800251a:	2105      	movs	r1, #5
 800251c:	2027      	movs	r0, #39	; 0x27
 800251e:	f000 ffd1 	bl	80034c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002522:	2027      	movs	r0, #39	; 0x27
 8002524:	f000 ffea 	bl	80034fc <HAL_NVIC_EnableIRQ>
}
 8002528:	bf00      	nop
 800252a:	3730      	adds	r7, #48	; 0x30
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40004400 	.word	0x40004400
 8002534:	40023800 	.word	0x40023800
 8002538:	40020000 	.word	0x40020000
 800253c:	40004800 	.word	0x40004800
 8002540:	40020400 	.word	0x40020400
 8002544:	20000890 	.word	0x20000890
 8002548:	40026058 	.word	0x40026058

0800254c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800254c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002584 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002550:	480d      	ldr	r0, [pc, #52]	; (8002588 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002552:	490e      	ldr	r1, [pc, #56]	; (800258c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002554:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002558:	e002      	b.n	8002560 <LoopCopyDataInit>

0800255a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800255c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255e:	3304      	adds	r3, #4

08002560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002564:	d3f9      	bcc.n	800255a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002566:	4a0b      	ldr	r2, [pc, #44]	; (8002594 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002568:	4c0b      	ldr	r4, [pc, #44]	; (8002598 <LoopFillZerobss+0x26>)
  movs r3, #0
 800256a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800256c:	e001      	b.n	8002572 <LoopFillZerobss>

0800256e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002570:	3204      	adds	r2, #4

08002572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002574:	d3fb      	bcc.n	800256e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002576:	f7ff fb93 	bl	8001ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800257a:	f008 fe0b 	bl	800b194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800257e:	f7ff f8bf 	bl	8001700 <main>
  bx  lr    
 8002582:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002584:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800258c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002590:	0800c518 	.word	0x0800c518
  ldr r2, =_sbss
 8002594:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002598:	20005314 	.word	0x20005314

0800259c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800259c:	e7fe      	b.n	800259c <ADC_IRQHandler>
	...

080025a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <HAL_Init+0x40>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <HAL_Init+0x40>)
 80025aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_Init+0x40>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <HAL_Init+0x40>)
 80025b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_Init+0x40>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <HAL_Init+0x40>)
 80025c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c8:	2003      	movs	r0, #3
 80025ca:	f000 ff70 	bl	80034ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ce:	200f      	movs	r0, #15
 80025d0:	f7ff fa1c 	bl	8001a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d4:	f7ff f9ee 	bl	80019b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023c00 	.word	0x40023c00

080025e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_IncTick+0x20>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_IncTick+0x24>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	4a04      	ldr	r2, [pc, #16]	; (8002608 <HAL_IncTick+0x24>)
 80025f6:	6013      	str	r3, [r2, #0]
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000008 	.word	0x20000008
 8002608:	200008f0 	.word	0x200008f0

0800260c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return uwTick;
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <HAL_GetTick+0x14>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	200008f0 	.word	0x200008f0

08002624 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e0ed      	b.n	8002812 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3020 	ldrb.w	r3, [r3, #32]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe f886 	bl	8000754 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002658:	f7ff ffd8 	bl	800260c <HAL_GetTick>
 800265c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800265e:	e012      	b.n	8002686 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002660:	f7ff ffd4 	bl	800260c <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b0a      	cmp	r3, #10
 800266c:	d90b      	bls.n	8002686 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2205      	movs	r2, #5
 800267e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e0c5      	b.n	8002812 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0e5      	beq.n	8002660 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0202 	bic.w	r2, r2, #2
 80026a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026a4:	f7ff ffb2 	bl	800260c <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026aa:	e012      	b.n	80026d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026ac:	f7ff ffae 	bl	800260c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b0a      	cmp	r3, #10
 80026b8:	d90b      	bls.n	80026d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2205      	movs	r2, #5
 80026ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e09f      	b.n	8002812 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1e5      	bne.n	80026ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	7e1b      	ldrb	r3, [r3, #24]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d108      	bne.n	80026fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e007      	b.n	800270a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002708:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7e5b      	ldrb	r3, [r3, #25]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d108      	bne.n	8002724 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e007      	b.n	8002734 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002732:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	7e9b      	ldrb	r3, [r3, #26]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d108      	bne.n	800274e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0220 	orr.w	r2, r2, #32
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e007      	b.n	800275e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0220 	bic.w	r2, r2, #32
 800275c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	7edb      	ldrb	r3, [r3, #27]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d108      	bne.n	8002778 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0210 	bic.w	r2, r2, #16
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e007      	b.n	8002788 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0210 	orr.w	r2, r2, #16
 8002786:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	7f1b      	ldrb	r3, [r3, #28]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d108      	bne.n	80027a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0208 	orr.w	r2, r2, #8
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e007      	b.n	80027b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0208 	bic.w	r2, r2, #8
 80027b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	7f5b      	ldrb	r3, [r3, #29]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d108      	bne.n	80027cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0204 	orr.w	r2, r2, #4
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	e007      	b.n	80027dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0204 	bic.w	r2, r2, #4
 80027da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	ea42 0103 	orr.w	r1, r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	1e5a      	subs	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002832:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d003      	beq.n	8002842 <HAL_CAN_ConfigFilter+0x26>
 800283a:	7cfb      	ldrb	r3, [r7, #19]
 800283c:	2b02      	cmp	r3, #2
 800283e:	f040 80be 	bne.w	80029be <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002842:	4b65      	ldr	r3, [pc, #404]	; (80029d8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002844:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800284c:	f043 0201 	orr.w	r2, r3, #1
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800285c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	431a      	orrs	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	2201      	movs	r2, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	43db      	mvns	r3, r3
 8002894:	401a      	ands	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d123      	bne.n	80028ec <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	401a      	ands	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	3248      	adds	r2, #72	; 0x48
 80028cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028e2:	6979      	ldr	r1, [r7, #20]
 80028e4:	3348      	adds	r3, #72	; 0x48
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	440b      	add	r3, r1
 80028ea:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d122      	bne.n	800293a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002914:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3248      	adds	r2, #72	; 0x48
 800291a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800292e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002930:	6979      	ldr	r1, [r7, #20]
 8002932:	3348      	adds	r3, #72	; 0x48
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	43db      	mvns	r3, r3
 800294c:	401a      	ands	r2, r3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002954:	e007      	b.n	8002966 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	431a      	orrs	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	43db      	mvns	r3, r3
 8002978:	401a      	ands	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002980:	e007      	b.n	8002992 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	431a      	orrs	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d107      	bne.n	80029aa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029b0:	f023 0201 	bic.w	r2, r3, #1
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e006      	b.n	80029cc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
  }
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	40006400 	.word	0x40006400

080029dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d12e      	bne.n	8002a4e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a08:	f7ff fe00 	bl	800260c <HAL_GetTick>
 8002a0c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a0e:	e012      	b.n	8002a36 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a10:	f7ff fdfc 	bl	800260c <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b0a      	cmp	r3, #10
 8002a1c:	d90b      	bls.n	8002a36 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2205      	movs	r2, #5
 8002a2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e012      	b.n	8002a5c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e5      	bne.n	8002a10 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e006      	b.n	8002a5c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
  }
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	; 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a78:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a82:	7ffb      	ldrb	r3, [r7, #31]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d003      	beq.n	8002a90 <HAL_CAN_AddTxMessage+0x2c>
 8002a88:	7ffb      	ldrb	r3, [r7, #31]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	f040 80b8 	bne.w	8002c00 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80a0 	beq.w	8002bf0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	0e1b      	lsrs	r3, r3, #24
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d907      	bls.n	8002ad0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e09e      	b.n	8002c0e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10d      	bne.n	8002afe <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002aec:	68f9      	ldr	r1, [r7, #12]
 8002aee:	6809      	ldr	r1, [r1, #0]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3318      	adds	r3, #24
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	440b      	add	r3, r1
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e00f      	b.n	8002b1e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b08:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b0e:	68f9      	ldr	r1, [r7, #12]
 8002b10:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002b12:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3318      	adds	r3, #24
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	440b      	add	r3, r1
 8002b1c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6819      	ldr	r1, [r3, #0]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3318      	adds	r3, #24
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	440b      	add	r3, r1
 8002b2e:	3304      	adds	r3, #4
 8002b30:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	7d1b      	ldrb	r3, [r3, #20]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d111      	bne.n	8002b5e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	3318      	adds	r3, #24
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	4413      	add	r3, r2
 8002b46:	3304      	adds	r3, #4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	6811      	ldr	r1, [r2, #0]
 8002b4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3318      	adds	r3, #24
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	440b      	add	r3, r1
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3307      	adds	r3, #7
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	061a      	lsls	r2, r3, #24
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3306      	adds	r3, #6
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3305      	adds	r3, #5
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	3204      	adds	r2, #4
 8002b7e:	7812      	ldrb	r2, [r2, #0]
 8002b80:	4610      	mov	r0, r2
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	6811      	ldr	r1, [r2, #0]
 8002b86:	ea43 0200 	orr.w	r2, r3, r0
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	440b      	add	r3, r1
 8002b90:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002b94:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3303      	adds	r3, #3
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	061a      	lsls	r2, r3, #24
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	041b      	lsls	r3, r3, #16
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3301      	adds	r3, #1
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	7812      	ldrb	r2, [r2, #0]
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	6811      	ldr	r1, [r2, #0]
 8002bbc:	ea43 0200 	orr.w	r2, r3, r0
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	440b      	add	r3, r1
 8002bc6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002bca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3318      	adds	r3, #24
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	4413      	add	r3, r2
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	6811      	ldr	r1, [r2, #0]
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	3318      	adds	r3, #24
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	440b      	add	r3, r1
 8002bea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e00e      	b.n	8002c0e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e006      	b.n	8002c0e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
  }
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c2c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c2e:	7afb      	ldrb	r3, [r7, #11]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d002      	beq.n	8002c3a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002c34:	7afb      	ldrb	r3, [r7, #11]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d11d      	bne.n	8002c76 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3301      	adds	r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002c76:	68fb      	ldr	r3, [r7, #12]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c98:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d003      	beq.n	8002ca8 <HAL_CAN_GetRxMessage+0x24>
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	f040 80f3 	bne.w	8002e8e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10e      	bne.n	8002ccc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d116      	bne.n	8002cea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0e7      	b.n	8002e9c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d107      	bne.n	8002cea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e0d8      	b.n	8002e9c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	331b      	adds	r3, #27
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	4413      	add	r3, r2
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0204 	and.w	r2, r3, #4
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10c      	bne.n	8002d22 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	331b      	adds	r3, #27
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	4413      	add	r3, r2
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	0d5b      	lsrs	r3, r3, #21
 8002d18:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	e00b      	b.n	8002d3a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	331b      	adds	r3, #27
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	4413      	add	r3, r2
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	08db      	lsrs	r3, r3, #3
 8002d32:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	331b      	adds	r3, #27
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	4413      	add	r3, r2
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0202 	and.w	r2, r3, #2
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	331b      	adds	r3, #27
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 020f 	and.w	r2, r3, #15
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	331b      	adds	r3, #27
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	4413      	add	r3, r2
 8002d74:	3304      	adds	r3, #4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	331b      	adds	r3, #27
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	0a1a      	lsrs	r2, r3, #8
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	0c1a      	lsrs	r2, r3, #16
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	3302      	adds	r3, #2
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	0e1a      	lsrs	r2, r3, #24
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	3303      	adds	r3, #3
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0a1a      	lsrs	r2, r3, #8
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	3305      	adds	r3, #5
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	0c1a      	lsrs	r2, r3, #16
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	3306      	adds	r3, #6
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	0e1a      	lsrs	r2, r3, #24
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	3307      	adds	r3, #7
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d108      	bne.n	8002e7a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0220 	orr.w	r2, r2, #32
 8002e76:	60da      	str	r2, [r3, #12]
 8002e78:	e007      	b.n	8002e8a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0220 	orr.w	r2, r2, #32
 8002e88:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e006      	b.n	8002e9c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
  }
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d002      	beq.n	8002ec6 <HAL_CAN_ActivateNotification+0x1e>
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d109      	bne.n	8002eda <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6959      	ldr	r1, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e006      	b.n	8002ee8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
  }
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08a      	sub	sp, #40	; 0x28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d07c      	beq.n	8003034 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d023      	beq.n	8002f8c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f983 	bl	8003262 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f5c:	e016      	b.n	8002f8c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f70:	e00c      	b.n	8002f8c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
 8002f84:	e002      	b.n	8002f8c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f989 	bl	800329e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d024      	beq.n	8002fe0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f963 	bl	8003276 <HAL_CAN_TxMailbox1CompleteCallback>
 8002fb0:	e016      	b.n	8002fe0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d004      	beq.n	8002fc6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc4:	e00c      	b.n	8002fe0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd8:	e002      	b.n	8002fe0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f969 	bl	80032b2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d024      	beq.n	8003034 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ff2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f943 	bl	800328a <HAL_CAN_TxMailbox2CompleteCallback>
 8003004:	e016      	b.n	8003034 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
 8003018:	e00c      	b.n	8003034 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
 800302c:	e002      	b.n	8003034 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f949 	bl	80032c6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00c      	beq.n	8003058 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	d007      	beq.n	8003058 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800304e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2210      	movs	r2, #16
 8003056:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00b      	beq.n	800307a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2208      	movs	r2, #8
 8003072:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f930 	bl	80032da <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d009      	beq.n	8003098 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd fd7a 	bl	8000b8c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00c      	beq.n	80030bc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2210      	movs	r2, #16
 80030ba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2208      	movs	r2, #8
 80030d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f912 	bl	8003302 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d009      	beq.n	80030fc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8f9 	bl	80032ee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	d006      	beq.n	800311e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2210      	movs	r2, #16
 8003116:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f8fc 	bl	8003316 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00b      	beq.n	8003140 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d006      	beq.n	8003140 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2208      	movs	r2, #8
 8003138:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8f5 	bl	800332a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d07b      	beq.n	8003242 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d072      	beq.n	800323a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	f043 0302 	orr.w	r3, r3, #2
 800318a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d043      	beq.n	800323a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d03e      	beq.n	800323a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031c2:	2b60      	cmp	r3, #96	; 0x60
 80031c4:	d02b      	beq.n	800321e <HAL_CAN_IRQHandler+0x32a>
 80031c6:	2b60      	cmp	r3, #96	; 0x60
 80031c8:	d82e      	bhi.n	8003228 <HAL_CAN_IRQHandler+0x334>
 80031ca:	2b50      	cmp	r3, #80	; 0x50
 80031cc:	d022      	beq.n	8003214 <HAL_CAN_IRQHandler+0x320>
 80031ce:	2b50      	cmp	r3, #80	; 0x50
 80031d0:	d82a      	bhi.n	8003228 <HAL_CAN_IRQHandler+0x334>
 80031d2:	2b40      	cmp	r3, #64	; 0x40
 80031d4:	d019      	beq.n	800320a <HAL_CAN_IRQHandler+0x316>
 80031d6:	2b40      	cmp	r3, #64	; 0x40
 80031d8:	d826      	bhi.n	8003228 <HAL_CAN_IRQHandler+0x334>
 80031da:	2b30      	cmp	r3, #48	; 0x30
 80031dc:	d010      	beq.n	8003200 <HAL_CAN_IRQHandler+0x30c>
 80031de:	2b30      	cmp	r3, #48	; 0x30
 80031e0:	d822      	bhi.n	8003228 <HAL_CAN_IRQHandler+0x334>
 80031e2:	2b10      	cmp	r3, #16
 80031e4:	d002      	beq.n	80031ec <HAL_CAN_IRQHandler+0x2f8>
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d005      	beq.n	80031f6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80031ea:	e01d      	b.n	8003228 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	f043 0308 	orr.w	r3, r3, #8
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031f4:	e019      	b.n	800322a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	f043 0310 	orr.w	r3, r3, #16
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031fe:	e014      	b.n	800322a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	f043 0320 	orr.w	r3, r3, #32
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003208:	e00f      	b.n	800322a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003212:	e00a      	b.n	800322a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800321c:	e005      	b.n	800322a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003226:	e000      	b.n	800322a <HAL_CAN_IRQHandler+0x336>
            break;
 8003228:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699a      	ldr	r2, [r3, #24]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003238:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2204      	movs	r2, #4
 8003240:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f872 	bl	800333e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800325a:	bf00      	nop
 800325c:	3728      	adds	r7, #40	; 0x28
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003364:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <__NVIC_SetPriorityGrouping+0x44>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003370:	4013      	ands	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800337c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003386:	4a04      	ldr	r2, [pc, #16]	; (8003398 <__NVIC_SetPriorityGrouping+0x44>)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	60d3      	str	r3, [r2, #12]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <__NVIC_GetPriorityGrouping+0x18>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	0a1b      	lsrs	r3, r3, #8
 80033a6:	f003 0307 	and.w	r3, r3, #7
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	db0b      	blt.n	80033e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	f003 021f 	and.w	r2, r3, #31
 80033d0:	4907      	ldr	r1, [pc, #28]	; (80033f0 <__NVIC_EnableIRQ+0x38>)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2001      	movs	r0, #1
 80033da:	fa00 f202 	lsl.w	r2, r0, r2
 80033de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000e100 	.word	0xe000e100

080033f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	6039      	str	r1, [r7, #0]
 80033fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003404:	2b00      	cmp	r3, #0
 8003406:	db0a      	blt.n	800341e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	b2da      	uxtb	r2, r3
 800340c:	490c      	ldr	r1, [pc, #48]	; (8003440 <__NVIC_SetPriority+0x4c>)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	0112      	lsls	r2, r2, #4
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	440b      	add	r3, r1
 8003418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800341c:	e00a      	b.n	8003434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4908      	ldr	r1, [pc, #32]	; (8003444 <__NVIC_SetPriority+0x50>)
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	3b04      	subs	r3, #4
 800342c:	0112      	lsls	r2, r2, #4
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	440b      	add	r3, r1
 8003432:	761a      	strb	r2, [r3, #24]
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000e100 	.word	0xe000e100
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003448:	b480      	push	{r7}
 800344a:	b089      	sub	sp, #36	; 0x24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f1c3 0307 	rsb	r3, r3, #7
 8003462:	2b04      	cmp	r3, #4
 8003464:	bf28      	it	cs
 8003466:	2304      	movcs	r3, #4
 8003468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3304      	adds	r3, #4
 800346e:	2b06      	cmp	r3, #6
 8003470:	d902      	bls.n	8003478 <NVIC_EncodePriority+0x30>
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3b03      	subs	r3, #3
 8003476:	e000      	b.n	800347a <NVIC_EncodePriority+0x32>
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800347c:	f04f 32ff 	mov.w	r2, #4294967295
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43da      	mvns	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	401a      	ands	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003490:	f04f 31ff 	mov.w	r1, #4294967295
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	43d9      	mvns	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a0:	4313      	orrs	r3, r2
         );
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3724      	adds	r7, #36	; 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff ff4c 	bl	8003354 <__NVIC_SetPriorityGrouping>
}
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034d6:	f7ff ff61 	bl	800339c <__NVIC_GetPriorityGrouping>
 80034da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	6978      	ldr	r0, [r7, #20]
 80034e2:	f7ff ffb1 	bl	8003448 <NVIC_EncodePriority>
 80034e6:	4602      	mov	r2, r0
 80034e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ec:	4611      	mov	r1, r2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff ff80 	bl	80033f4 <__NVIC_SetPriority>
}
 80034f4:	bf00      	nop
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff ff54 	bl	80033b8 <__NVIC_EnableIRQ>
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003524:	f7ff f872 	bl	800260c <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e099      	b.n	8003668 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0201 	bic.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003554:	e00f      	b.n	8003576 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003556:	f7ff f859 	bl	800260c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b05      	cmp	r3, #5
 8003562:	d908      	bls.n	8003576 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2203      	movs	r2, #3
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e078      	b.n	8003668 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e8      	bne.n	8003556 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	4b38      	ldr	r3, [pc, #224]	; (8003670 <HAL_DMA_Init+0x158>)
 8003590:	4013      	ands	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d107      	bne.n	80035e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	4313      	orrs	r3, r2
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f023 0307 	bic.w	r3, r3, #7
 80035f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	2b04      	cmp	r3, #4
 8003608:	d117      	bne.n	800363a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00e      	beq.n	800363a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fb01 	bl	8003c24 <DMA_CheckFifoParam>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2240      	movs	r2, #64	; 0x40
 800362c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003636:	2301      	movs	r3, #1
 8003638:	e016      	b.n	8003668 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fab8 	bl	8003bb8 <DMA_CalcBaseAndBitshift>
 8003648:	4603      	mov	r3, r0
 800364a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003650:	223f      	movs	r2, #63	; 0x3f
 8003652:	409a      	lsls	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	f010803f 	.word	0xf010803f

08003674 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_DMA_Start_IT+0x26>
 8003696:	2302      	movs	r3, #2
 8003698:	e040      	b.n	800371c <HAL_DMA_Start_IT+0xa8>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d12f      	bne.n	800370e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2202      	movs	r2, #2
 80036b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 fa4a 	bl	8003b5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	223f      	movs	r2, #63	; 0x3f
 80036ce:	409a      	lsls	r2, r3
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0216 	orr.w	r2, r2, #22
 80036e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0208 	orr.w	r2, r2, #8
 80036fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	e005      	b.n	800371a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003716:	2302      	movs	r3, #2
 8003718:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800371a:	7dfb      	ldrb	r3, [r7, #23]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003732:	f7fe ff6b 	bl	800260c <HAL_GetTick>
 8003736:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d008      	beq.n	8003756 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2280      	movs	r2, #128	; 0x80
 8003748:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e052      	b.n	80037fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0216 	bic.w	r2, r2, #22
 8003764:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003774:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d103      	bne.n	8003786 <HAL_DMA_Abort+0x62>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0208 	bic.w	r2, r2, #8
 8003794:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037a6:	e013      	b.n	80037d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037a8:	f7fe ff30 	bl	800260c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b05      	cmp	r3, #5
 80037b4:	d90c      	bls.n	80037d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2203      	movs	r2, #3
 80037c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e015      	b.n	80037fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e4      	bne.n	80037a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e2:	223f      	movs	r2, #63	; 0x3f
 80037e4:	409a      	lsls	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d004      	beq.n	8003822 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e00c      	b.n	800383c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2205      	movs	r2, #5
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003854:	4b8e      	ldr	r3, [pc, #568]	; (8003a90 <HAL_DMA_IRQHandler+0x248>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a8e      	ldr	r2, [pc, #568]	; (8003a94 <HAL_DMA_IRQHandler+0x24c>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	0a9b      	lsrs	r3, r3, #10
 8003860:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	2208      	movs	r2, #8
 8003874:	409a      	lsls	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d01a      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d013      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0204 	bic.w	r2, r2, #4
 800389a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	2208      	movs	r2, #8
 80038a2:	409a      	lsls	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	f043 0201 	orr.w	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	2201      	movs	r2, #1
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d012      	beq.n	80038ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	2201      	movs	r2, #1
 80038d8:	409a      	lsls	r2, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e2:	f043 0202 	orr.w	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	2204      	movs	r2, #4
 80038f0:	409a      	lsls	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d012      	beq.n	8003920 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00b      	beq.n	8003920 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	2204      	movs	r2, #4
 800390e:	409a      	lsls	r2, r3
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	f043 0204 	orr.w	r2, r3, #4
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	2210      	movs	r2, #16
 8003926:	409a      	lsls	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d043      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d03c      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003942:	2210      	movs	r2, #16
 8003944:	409a      	lsls	r2, r3
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d018      	beq.n	800398a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d108      	bne.n	8003978 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d024      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4798      	blx	r3
 8003976:	e01f      	b.n	80039b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01b      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
 8003988:	e016      	b.n	80039b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d107      	bne.n	80039a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0208 	bic.w	r2, r2, #8
 80039a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	2220      	movs	r2, #32
 80039be:	409a      	lsls	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 808f 	beq.w	8003ae8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 8087 	beq.w	8003ae8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039de:	2220      	movs	r2, #32
 80039e0:	409a      	lsls	r2, r3
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d136      	bne.n	8003a60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0216 	bic.w	r2, r2, #22
 8003a00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <HAL_DMA_IRQHandler+0x1da>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0208 	bic.w	r2, r2, #8
 8003a30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a36:	223f      	movs	r2, #63	; 0x3f
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d07e      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	4798      	blx	r3
        }
        return;
 8003a5e:	e079      	b.n	8003b54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01d      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10d      	bne.n	8003a98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d031      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4798      	blx	r3
 8003a8c:	e02c      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x2a0>
 8003a8e:	bf00      	nop
 8003a90:	20000000 	.word	0x20000000
 8003a94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d023      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
 8003aa8:	e01e      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10f      	bne.n	8003ad8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0210 	bic.w	r2, r2, #16
 8003ac6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d032      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d022      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2205      	movs	r2, #5
 8003b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	3301      	adds	r3, #1
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d307      	bcc.n	8003b30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f2      	bne.n	8003b14 <HAL_DMA_IRQHandler+0x2cc>
 8003b2e:	e000      	b.n	8003b32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	4798      	blx	r3
 8003b52:	e000      	b.n	8003b56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b54:	bf00      	nop
    }
  }
}
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b40      	cmp	r3, #64	; 0x40
 8003b88:	d108      	bne.n	8003b9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b9a:	e007      	b.n	8003bac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	60da      	str	r2, [r3, #12]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	3b10      	subs	r3, #16
 8003bc8:	4a14      	ldr	r2, [pc, #80]	; (8003c1c <DMA_CalcBaseAndBitshift+0x64>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bd2:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <DMA_CalcBaseAndBitshift+0x68>)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d909      	bls.n	8003bfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	1d1a      	adds	r2, r3, #4
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	659a      	str	r2, [r3, #88]	; 0x58
 8003bf8:	e007      	b.n	8003c0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	aaaaaaab 	.word	0xaaaaaaab
 8003c20:	0800c468 	.word	0x0800c468

08003c24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d11f      	bne.n	8003c7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d856      	bhi.n	8003cf2 <DMA_CheckFifoParam+0xce>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <DMA_CheckFifoParam+0x28>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c5d 	.word	0x08003c5d
 8003c50:	08003c6f 	.word	0x08003c6f
 8003c54:	08003c5d 	.word	0x08003c5d
 8003c58:	08003cf3 	.word	0x08003cf3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d046      	beq.n	8003cf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6c:	e043      	b.n	8003cf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c76:	d140      	bne.n	8003cfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c7c:	e03d      	b.n	8003cfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c86:	d121      	bne.n	8003ccc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d837      	bhi.n	8003cfe <DMA_CheckFifoParam+0xda>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <DMA_CheckFifoParam+0x70>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003ca5 	.word	0x08003ca5
 8003c98:	08003cab 	.word	0x08003cab
 8003c9c:	08003ca5 	.word	0x08003ca5
 8003ca0:	08003cbd 	.word	0x08003cbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca8:	e030      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d025      	beq.n	8003d02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cba:	e022      	b.n	8003d02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cc4:	d11f      	bne.n	8003d06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cca:	e01c      	b.n	8003d06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d903      	bls.n	8003cda <DMA_CheckFifoParam+0xb6>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d003      	beq.n	8003ce0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cd8:	e018      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8003cde:	e015      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00e      	beq.n	8003d0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf0:	e00b      	b.n	8003d0a <DMA_CheckFifoParam+0xe6>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e00a      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
      break;
 8003cf6:	bf00      	nop
 8003cf8:	e008      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
      break;
 8003cfa:	bf00      	nop
 8003cfc:	e006      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e004      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
      break;
 8003d02:	bf00      	nop
 8003d04:	e002      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
      break;   
 8003d06:	bf00      	nop
 8003d08:	e000      	b.n	8003d0c <DMA_CheckFifoParam+0xe8>
      break;
 8003d0a:	bf00      	nop
    }
  } 
  
  return status; 
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop

08003d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	; 0x24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	e16b      	b.n	8004010 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d38:	2201      	movs	r2, #1
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	f040 815a 	bne.w	800400a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d005      	beq.n	8003d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d130      	bne.n	8003dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	2203      	movs	r2, #3
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4013      	ands	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003da4:	2201      	movs	r2, #1
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f003 0201 	and.w	r2, r3, #1
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d017      	beq.n	8003e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	2203      	movs	r2, #3
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d123      	bne.n	8003e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	08da      	lsrs	r2, r3, #3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3208      	adds	r2, #8
 8003e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	220f      	movs	r2, #15
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	08da      	lsrs	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3208      	adds	r2, #8
 8003e5a:	69b9      	ldr	r1, [r7, #24]
 8003e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 0203 	and.w	r2, r3, #3
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80b4 	beq.w	800400a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	4b60      	ldr	r3, [pc, #384]	; (8004028 <HAL_GPIO_Init+0x30c>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	4a5f      	ldr	r2, [pc, #380]	; (8004028 <HAL_GPIO_Init+0x30c>)
 8003eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003eb2:	4b5d      	ldr	r3, [pc, #372]	; (8004028 <HAL_GPIO_Init+0x30c>)
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ebe:	4a5b      	ldr	r2, [pc, #364]	; (800402c <HAL_GPIO_Init+0x310>)
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	089b      	lsrs	r3, r3, #2
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	220f      	movs	r2, #15
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a52      	ldr	r2, [pc, #328]	; (8004030 <HAL_GPIO_Init+0x314>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02b      	beq.n	8003f42 <HAL_GPIO_Init+0x226>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a51      	ldr	r2, [pc, #324]	; (8004034 <HAL_GPIO_Init+0x318>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d025      	beq.n	8003f3e <HAL_GPIO_Init+0x222>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a50      	ldr	r2, [pc, #320]	; (8004038 <HAL_GPIO_Init+0x31c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01f      	beq.n	8003f3a <HAL_GPIO_Init+0x21e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a4f      	ldr	r2, [pc, #316]	; (800403c <HAL_GPIO_Init+0x320>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d019      	beq.n	8003f36 <HAL_GPIO_Init+0x21a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a4e      	ldr	r2, [pc, #312]	; (8004040 <HAL_GPIO_Init+0x324>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <HAL_GPIO_Init+0x216>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a4d      	ldr	r2, [pc, #308]	; (8004044 <HAL_GPIO_Init+0x328>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00d      	beq.n	8003f2e <HAL_GPIO_Init+0x212>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a4c      	ldr	r2, [pc, #304]	; (8004048 <HAL_GPIO_Init+0x32c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d007      	beq.n	8003f2a <HAL_GPIO_Init+0x20e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a4b      	ldr	r2, [pc, #300]	; (800404c <HAL_GPIO_Init+0x330>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d101      	bne.n	8003f26 <HAL_GPIO_Init+0x20a>
 8003f22:	2307      	movs	r3, #7
 8003f24:	e00e      	b.n	8003f44 <HAL_GPIO_Init+0x228>
 8003f26:	2308      	movs	r3, #8
 8003f28:	e00c      	b.n	8003f44 <HAL_GPIO_Init+0x228>
 8003f2a:	2306      	movs	r3, #6
 8003f2c:	e00a      	b.n	8003f44 <HAL_GPIO_Init+0x228>
 8003f2e:	2305      	movs	r3, #5
 8003f30:	e008      	b.n	8003f44 <HAL_GPIO_Init+0x228>
 8003f32:	2304      	movs	r3, #4
 8003f34:	e006      	b.n	8003f44 <HAL_GPIO_Init+0x228>
 8003f36:	2303      	movs	r3, #3
 8003f38:	e004      	b.n	8003f44 <HAL_GPIO_Init+0x228>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e002      	b.n	8003f44 <HAL_GPIO_Init+0x228>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <HAL_GPIO_Init+0x228>
 8003f42:	2300      	movs	r3, #0
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	f002 0203 	and.w	r2, r2, #3
 8003f4a:	0092      	lsls	r2, r2, #2
 8003f4c:	4093      	lsls	r3, r2
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f54:	4935      	ldr	r1, [pc, #212]	; (800402c <HAL_GPIO_Init+0x310>)
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	089b      	lsrs	r3, r3, #2
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f62:	4b3b      	ldr	r3, [pc, #236]	; (8004050 <HAL_GPIO_Init+0x334>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f86:	4a32      	ldr	r2, [pc, #200]	; (8004050 <HAL_GPIO_Init+0x334>)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f8c:	4b30      	ldr	r3, [pc, #192]	; (8004050 <HAL_GPIO_Init+0x334>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fb0:	4a27      	ldr	r2, [pc, #156]	; (8004050 <HAL_GPIO_Init+0x334>)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fb6:	4b26      	ldr	r3, [pc, #152]	; (8004050 <HAL_GPIO_Init+0x334>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fda:	4a1d      	ldr	r2, [pc, #116]	; (8004050 <HAL_GPIO_Init+0x334>)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fe0:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <HAL_GPIO_Init+0x334>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004004:	4a12      	ldr	r2, [pc, #72]	; (8004050 <HAL_GPIO_Init+0x334>)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3301      	adds	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b0f      	cmp	r3, #15
 8004014:	f67f ae90 	bls.w	8003d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	3724      	adds	r7, #36	; 0x24
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800
 800402c:	40013800 	.word	0x40013800
 8004030:	40020000 	.word	0x40020000
 8004034:	40020400 	.word	0x40020400
 8004038:	40020800 	.word	0x40020800
 800403c:	40020c00 	.word	0x40020c00
 8004040:	40021000 	.word	0x40021000
 8004044:	40021400 	.word	0x40021400
 8004048:	40021800 	.word	0x40021800
 800404c:	40021c00 	.word	0x40021c00
 8004050:	40013c00 	.word	0x40013c00

08004054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	807b      	strh	r3, [r7, #2]
 8004060:	4613      	mov	r3, r2
 8004062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004064:	787b      	ldrb	r3, [r7, #1]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800406a:	887a      	ldrh	r2, [r7, #2]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004070:	e003      	b.n	800407a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004072:	887b      	ldrh	r3, [r7, #2]
 8004074:	041a      	lsls	r2, r3, #16
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	619a      	str	r2, [r3, #24]
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004086:	b480      	push	{r7}
 8004088:	b085      	sub	sp, #20
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004098:	887a      	ldrh	r2, [r7, #2]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4013      	ands	r3, r2
 800409e:	041a      	lsls	r2, r3, #16
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	43d9      	mvns	r1, r3
 80040a4:	887b      	ldrh	r3, [r7, #2]
 80040a6:	400b      	ands	r3, r1
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	619a      	str	r2, [r3, #24]
}
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
	...

080040bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	4013      	ands	r3, r2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d006      	beq.n	80040e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040d2:	4a05      	ldr	r2, [pc, #20]	; (80040e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040d8:	88fb      	ldrh	r3, [r7, #6]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fc fdd4 	bl	8000c88 <HAL_GPIO_EXTI_Callback>
  }
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40013c00 	.word	0x40013c00

080040ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e267      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d075      	beq.n	80041f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800410a:	4b88      	ldr	r3, [pc, #544]	; (800432c <HAL_RCC_OscConfig+0x240>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	2b04      	cmp	r3, #4
 8004114:	d00c      	beq.n	8004130 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004116:	4b85      	ldr	r3, [pc, #532]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800411e:	2b08      	cmp	r3, #8
 8004120:	d112      	bne.n	8004148 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004122:	4b82      	ldr	r3, [pc, #520]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800412e:	d10b      	bne.n	8004148 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004130:	4b7e      	ldr	r3, [pc, #504]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d05b      	beq.n	80041f4 <HAL_RCC_OscConfig+0x108>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d157      	bne.n	80041f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e242      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004150:	d106      	bne.n	8004160 <HAL_RCC_OscConfig+0x74>
 8004152:	4b76      	ldr	r3, [pc, #472]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a75      	ldr	r2, [pc, #468]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e01d      	b.n	800419c <HAL_RCC_OscConfig+0xb0>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004168:	d10c      	bne.n	8004184 <HAL_RCC_OscConfig+0x98>
 800416a:	4b70      	ldr	r3, [pc, #448]	; (800432c <HAL_RCC_OscConfig+0x240>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a6f      	ldr	r2, [pc, #444]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	4b6d      	ldr	r3, [pc, #436]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a6c      	ldr	r2, [pc, #432]	; (800432c <HAL_RCC_OscConfig+0x240>)
 800417c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	e00b      	b.n	800419c <HAL_RCC_OscConfig+0xb0>
 8004184:	4b69      	ldr	r3, [pc, #420]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a68      	ldr	r2, [pc, #416]	; (800432c <HAL_RCC_OscConfig+0x240>)
 800418a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	4b66      	ldr	r3, [pc, #408]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a65      	ldr	r2, [pc, #404]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800419a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d013      	beq.n	80041cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a4:	f7fe fa32 	bl	800260c <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041ac:	f7fe fa2e 	bl	800260c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	; 0x64
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e207      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	4b5b      	ldr	r3, [pc, #364]	; (800432c <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0xc0>
 80041ca:	e014      	b.n	80041f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fe fa1e 	bl	800260c <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d4:	f7fe fa1a 	bl	800260c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e1f3      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e6:	4b51      	ldr	r3, [pc, #324]	; (800432c <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0xe8>
 80041f2:	e000      	b.n	80041f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d063      	beq.n	80042ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004202:	4b4a      	ldr	r3, [pc, #296]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00b      	beq.n	8004226 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800420e:	4b47      	ldr	r3, [pc, #284]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004216:	2b08      	cmp	r3, #8
 8004218:	d11c      	bne.n	8004254 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800421a:	4b44      	ldr	r3, [pc, #272]	; (800432c <HAL_RCC_OscConfig+0x240>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d116      	bne.n	8004254 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004226:	4b41      	ldr	r3, [pc, #260]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <HAL_RCC_OscConfig+0x152>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d001      	beq.n	800423e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e1c7      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423e:	4b3b      	ldr	r3, [pc, #236]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4937      	ldr	r1, [pc, #220]	; (800432c <HAL_RCC_OscConfig+0x240>)
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004252:	e03a      	b.n	80042ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d020      	beq.n	800429e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800425c:	4b34      	ldr	r3, [pc, #208]	; (8004330 <HAL_RCC_OscConfig+0x244>)
 800425e:	2201      	movs	r2, #1
 8004260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004262:	f7fe f9d3 	bl	800260c <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800426a:	f7fe f9cf 	bl	800260c <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e1a8      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427c:	4b2b      	ldr	r3, [pc, #172]	; (800432c <HAL_RCC_OscConfig+0x240>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004288:	4b28      	ldr	r3, [pc, #160]	; (800432c <HAL_RCC_OscConfig+0x240>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4925      	ldr	r1, [pc, #148]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004298:	4313      	orrs	r3, r2
 800429a:	600b      	str	r3, [r1, #0]
 800429c:	e015      	b.n	80042ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800429e:	4b24      	ldr	r3, [pc, #144]	; (8004330 <HAL_RCC_OscConfig+0x244>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7fe f9b2 	bl	800260c <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ac:	f7fe f9ae 	bl	800260c <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e187      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042be:	4b1b      	ldr	r3, [pc, #108]	; (800432c <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f0      	bne.n	80042ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d036      	beq.n	8004344 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d016      	beq.n	800430c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <HAL_RCC_OscConfig+0x248>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7fe f992 	bl	800260c <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ec:	f7fe f98e 	bl	800260c <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e167      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fe:	4b0b      	ldr	r3, [pc, #44]	; (800432c <HAL_RCC_OscConfig+0x240>)
 8004300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0x200>
 800430a:	e01b      	b.n	8004344 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_RCC_OscConfig+0x248>)
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004312:	f7fe f97b 	bl	800260c <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004318:	e00e      	b.n	8004338 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800431a:	f7fe f977 	bl	800260c <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d907      	bls.n	8004338 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e150      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
 800432c:	40023800 	.word	0x40023800
 8004330:	42470000 	.word	0x42470000
 8004334:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004338:	4b88      	ldr	r3, [pc, #544]	; (800455c <HAL_RCC_OscConfig+0x470>)
 800433a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1ea      	bne.n	800431a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 8097 	beq.w	8004480 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004352:	2300      	movs	r3, #0
 8004354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004356:	4b81      	ldr	r3, [pc, #516]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10f      	bne.n	8004382 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	4b7d      	ldr	r3, [pc, #500]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	4a7c      	ldr	r2, [pc, #496]	; (800455c <HAL_RCC_OscConfig+0x470>)
 800436c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004370:	6413      	str	r3, [r2, #64]	; 0x40
 8004372:	4b7a      	ldr	r3, [pc, #488]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800437e:	2301      	movs	r3, #1
 8004380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004382:	4b77      	ldr	r3, [pc, #476]	; (8004560 <HAL_RCC_OscConfig+0x474>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d118      	bne.n	80043c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800438e:	4b74      	ldr	r3, [pc, #464]	; (8004560 <HAL_RCC_OscConfig+0x474>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a73      	ldr	r2, [pc, #460]	; (8004560 <HAL_RCC_OscConfig+0x474>)
 8004394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800439a:	f7fe f937 	bl	800260c <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a2:	f7fe f933 	bl	800260c <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e10c      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b4:	4b6a      	ldr	r3, [pc, #424]	; (8004560 <HAL_RCC_OscConfig+0x474>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d106      	bne.n	80043d6 <HAL_RCC_OscConfig+0x2ea>
 80043c8:	4b64      	ldr	r3, [pc, #400]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	4a63      	ldr	r2, [pc, #396]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70
 80043d4:	e01c      	b.n	8004410 <HAL_RCC_OscConfig+0x324>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b05      	cmp	r3, #5
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x30c>
 80043de:	4b5f      	ldr	r3, [pc, #380]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	4a5e      	ldr	r2, [pc, #376]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80043e4:	f043 0304 	orr.w	r3, r3, #4
 80043e8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ea:	4b5c      	ldr	r3, [pc, #368]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	4a5b      	ldr	r2, [pc, #364]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	6713      	str	r3, [r2, #112]	; 0x70
 80043f6:	e00b      	b.n	8004410 <HAL_RCC_OscConfig+0x324>
 80043f8:	4b58      	ldr	r3, [pc, #352]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fc:	4a57      	ldr	r2, [pc, #348]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	6713      	str	r3, [r2, #112]	; 0x70
 8004404:	4b55      	ldr	r3, [pc, #340]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004408:	4a54      	ldr	r2, [pc, #336]	; (800455c <HAL_RCC_OscConfig+0x470>)
 800440a:	f023 0304 	bic.w	r3, r3, #4
 800440e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d015      	beq.n	8004444 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004418:	f7fe f8f8 	bl	800260c <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441e:	e00a      	b.n	8004436 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004420:	f7fe f8f4 	bl	800260c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e0cb      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004436:	4b49      	ldr	r3, [pc, #292]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0ee      	beq.n	8004420 <HAL_RCC_OscConfig+0x334>
 8004442:	e014      	b.n	800446e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004444:	f7fe f8e2 	bl	800260c <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444a:	e00a      	b.n	8004462 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800444c:	f7fe f8de 	bl	800260c <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	; 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e0b5      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004462:	4b3e      	ldr	r3, [pc, #248]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1ee      	bne.n	800444c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800446e:	7dfb      	ldrb	r3, [r7, #23]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d105      	bne.n	8004480 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004474:	4b39      	ldr	r3, [pc, #228]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	4a38      	ldr	r2, [pc, #224]	; (800455c <HAL_RCC_OscConfig+0x470>)
 800447a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800447e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80a1 	beq.w	80045cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800448a:	4b34      	ldr	r3, [pc, #208]	; (800455c <HAL_RCC_OscConfig+0x470>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b08      	cmp	r3, #8
 8004494:	d05c      	beq.n	8004550 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d141      	bne.n	8004522 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449e:	4b31      	ldr	r3, [pc, #196]	; (8004564 <HAL_RCC_OscConfig+0x478>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a4:	f7fe f8b2 	bl	800260c <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ac:	f7fe f8ae 	bl	800260c <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e087      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044be:	4b27      	ldr	r3, [pc, #156]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69da      	ldr	r2, [r3, #28]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	019b      	lsls	r3, r3, #6
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	085b      	lsrs	r3, r3, #1
 80044e2:	3b01      	subs	r3, #1
 80044e4:	041b      	lsls	r3, r3, #16
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	061b      	lsls	r3, r3, #24
 80044ee:	491b      	ldr	r1, [pc, #108]	; (800455c <HAL_RCC_OscConfig+0x470>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f4:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <HAL_RCC_OscConfig+0x478>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fa:	f7fe f887 	bl	800260c <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004502:	f7fe f883 	bl	800260c <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e05c      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004514:	4b11      	ldr	r3, [pc, #68]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x416>
 8004520:	e054      	b.n	80045cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004522:	4b10      	ldr	r3, [pc, #64]	; (8004564 <HAL_RCC_OscConfig+0x478>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004528:	f7fe f870 	bl	800260c <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004530:	f7fe f86c 	bl	800260c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e045      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_RCC_OscConfig+0x470>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x444>
 800454e:	e03d      	b.n	80045cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d107      	bne.n	8004568 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e038      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
 800455c:	40023800 	.word	0x40023800
 8004560:	40007000 	.word	0x40007000
 8004564:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004568:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_RCC_OscConfig+0x4ec>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d028      	beq.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004580:	429a      	cmp	r2, r3
 8004582:	d121      	bne.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800458e:	429a      	cmp	r2, r3
 8004590:	d11a      	bne.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004598:	4013      	ands	r3, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800459e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d111      	bne.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	085b      	lsrs	r3, r3, #1
 80045b0:	3b01      	subs	r3, #1
 80045b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d107      	bne.n	80045c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800

080045dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0cc      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045f0:	4b68      	ldr	r3, [pc, #416]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d90c      	bls.n	8004618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fe:	4b65      	ldr	r3, [pc, #404]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004606:	4b63      	ldr	r3, [pc, #396]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d001      	beq.n	8004618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0b8      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d020      	beq.n	8004666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004630:	4b59      	ldr	r3, [pc, #356]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	4a58      	ldr	r2, [pc, #352]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800463a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004648:	4b53      	ldr	r3, [pc, #332]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	4a52      	ldr	r2, [pc, #328]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004654:	4b50      	ldr	r3, [pc, #320]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	494d      	ldr	r1, [pc, #308]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	4313      	orrs	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d044      	beq.n	80046fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467a:	4b47      	ldr	r3, [pc, #284]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d119      	bne.n	80046ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e07f      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d003      	beq.n	800469a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004696:	2b03      	cmp	r3, #3
 8004698:	d107      	bne.n	80046aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469a:	4b3f      	ldr	r3, [pc, #252]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d109      	bne.n	80046ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e06f      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046aa:	4b3b      	ldr	r3, [pc, #236]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e067      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ba:	4b37      	ldr	r3, [pc, #220]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f023 0203 	bic.w	r2, r3, #3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	4934      	ldr	r1, [pc, #208]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046cc:	f7fd ff9e 	bl	800260c <HAL_GetTick>
 80046d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d2:	e00a      	b.n	80046ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d4:	f7fd ff9a 	bl	800260c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e04f      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ea:	4b2b      	ldr	r3, [pc, #172]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 020c 	and.w	r2, r3, #12
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d1eb      	bne.n	80046d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046fc:	4b25      	ldr	r3, [pc, #148]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d20c      	bcs.n	8004724 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470a:	4b22      	ldr	r3, [pc, #136]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004712:	4b20      	ldr	r3, [pc, #128]	; (8004794 <HAL_RCC_ClockConfig+0x1b8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d001      	beq.n	8004724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e032      	b.n	800478a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004730:	4b19      	ldr	r3, [pc, #100]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4916      	ldr	r1, [pc, #88]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800474e:	4b12      	ldr	r3, [pc, #72]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	490e      	ldr	r1, [pc, #56]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	4313      	orrs	r3, r2
 8004760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004762:	f000 f821 	bl	80047a8 <HAL_RCC_GetSysClockFreq>
 8004766:	4602      	mov	r2, r0
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	490a      	ldr	r1, [pc, #40]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 8004774:	5ccb      	ldrb	r3, [r1, r3]
 8004776:	fa22 f303 	lsr.w	r3, r2, r3
 800477a:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 800477c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800477e:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f7fd f942 	bl	8001a0c <HAL_InitTick>

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40023c00 	.word	0x40023c00
 8004798:	40023800 	.word	0x40023800
 800479c:	0800c450 	.word	0x0800c450
 80047a0:	20000000 	.word	0x20000000
 80047a4:	20000004 	.word	0x20000004

080047a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ac:	b090      	sub	sp, #64	; 0x40
 80047ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
 80047b4:	2300      	movs	r3, #0
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b8:	2300      	movs	r3, #0
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c0:	4b59      	ldr	r3, [pc, #356]	; (8004928 <HAL_RCC_GetSysClockFreq+0x180>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 030c 	and.w	r3, r3, #12
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d00d      	beq.n	80047e8 <HAL_RCC_GetSysClockFreq+0x40>
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	f200 80a1 	bhi.w	8004914 <HAL_RCC_GetSysClockFreq+0x16c>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <HAL_RCC_GetSysClockFreq+0x34>
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d003      	beq.n	80047e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80047da:	e09b      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047dc:	4b53      	ldr	r3, [pc, #332]	; (800492c <HAL_RCC_GetSysClockFreq+0x184>)
 80047de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80047e0:	e09b      	b.n	800491a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047e2:	4b53      	ldr	r3, [pc, #332]	; (8004930 <HAL_RCC_GetSysClockFreq+0x188>)
 80047e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047e6:	e098      	b.n	800491a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047e8:	4b4f      	ldr	r3, [pc, #316]	; (8004928 <HAL_RCC_GetSysClockFreq+0x180>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047f2:	4b4d      	ldr	r3, [pc, #308]	; (8004928 <HAL_RCC_GetSysClockFreq+0x180>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d028      	beq.n	8004850 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047fe:	4b4a      	ldr	r3, [pc, #296]	; (8004928 <HAL_RCC_GetSysClockFreq+0x180>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	099b      	lsrs	r3, r3, #6
 8004804:	2200      	movs	r2, #0
 8004806:	623b      	str	r3, [r7, #32]
 8004808:	627a      	str	r2, [r7, #36]	; 0x24
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004810:	2100      	movs	r1, #0
 8004812:	4b47      	ldr	r3, [pc, #284]	; (8004930 <HAL_RCC_GetSysClockFreq+0x188>)
 8004814:	fb03 f201 	mul.w	r2, r3, r1
 8004818:	2300      	movs	r3, #0
 800481a:	fb00 f303 	mul.w	r3, r0, r3
 800481e:	4413      	add	r3, r2
 8004820:	4a43      	ldr	r2, [pc, #268]	; (8004930 <HAL_RCC_GetSysClockFreq+0x188>)
 8004822:	fba0 1202 	umull	r1, r2, r0, r2
 8004826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004828:	460a      	mov	r2, r1
 800482a:	62ba      	str	r2, [r7, #40]	; 0x28
 800482c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482e:	4413      	add	r3, r2
 8004830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004834:	2200      	movs	r2, #0
 8004836:	61bb      	str	r3, [r7, #24]
 8004838:	61fa      	str	r2, [r7, #28]
 800483a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800483e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004842:	f7fb fd15 	bl	8000270 <__aeabi_uldivmod>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4613      	mov	r3, r2
 800484c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800484e:	e053      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004850:	4b35      	ldr	r3, [pc, #212]	; (8004928 <HAL_RCC_GetSysClockFreq+0x180>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	099b      	lsrs	r3, r3, #6
 8004856:	2200      	movs	r2, #0
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	617a      	str	r2, [r7, #20]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004862:	f04f 0b00 	mov.w	fp, #0
 8004866:	4652      	mov	r2, sl
 8004868:	465b      	mov	r3, fp
 800486a:	f04f 0000 	mov.w	r0, #0
 800486e:	f04f 0100 	mov.w	r1, #0
 8004872:	0159      	lsls	r1, r3, #5
 8004874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004878:	0150      	lsls	r0, r2, #5
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	ebb2 080a 	subs.w	r8, r2, sl
 8004882:	eb63 090b 	sbc.w	r9, r3, fp
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004892:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004896:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800489a:	ebb2 0408 	subs.w	r4, r2, r8
 800489e:	eb63 0509 	sbc.w	r5, r3, r9
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	00eb      	lsls	r3, r5, #3
 80048ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048b0:	00e2      	lsls	r2, r4, #3
 80048b2:	4614      	mov	r4, r2
 80048b4:	461d      	mov	r5, r3
 80048b6:	eb14 030a 	adds.w	r3, r4, sl
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	eb45 030b 	adc.w	r3, r5, fp
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048ce:	4629      	mov	r1, r5
 80048d0:	028b      	lsls	r3, r1, #10
 80048d2:	4621      	mov	r1, r4
 80048d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048d8:	4621      	mov	r1, r4
 80048da:	028a      	lsls	r2, r1, #10
 80048dc:	4610      	mov	r0, r2
 80048de:	4619      	mov	r1, r3
 80048e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e2:	2200      	movs	r2, #0
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	60fa      	str	r2, [r7, #12]
 80048e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048ec:	f7fb fcc0 	bl	8000270 <__aeabi_uldivmod>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4613      	mov	r3, r2
 80048f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048f8:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <HAL_RCC_GetSysClockFreq+0x180>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	0c1b      	lsrs	r3, r3, #16
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	3301      	adds	r3, #1
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004912:	e002      	b.n	800491a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <HAL_RCC_GetSysClockFreq+0x184>)
 8004916:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800491c:	4618      	mov	r0, r3
 800491e:	3740      	adds	r7, #64	; 0x40
 8004920:	46bd      	mov	sp, r7
 8004922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004926:	bf00      	nop
 8004928:	40023800 	.word	0x40023800
 800492c:	00f42400 	.word	0x00f42400
 8004930:	00b71b00 	.word	0x00b71b00

08004934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004938:	4b03      	ldr	r3, [pc, #12]	; (8004948 <HAL_RCC_GetHCLKFreq+0x14>)
 800493a:	681b      	ldr	r3, [r3, #0]
}
 800493c:	4618      	mov	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20000000 	.word	0x20000000

0800494c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004950:	f7ff fff0 	bl	8004934 <HAL_RCC_GetHCLKFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	0a9b      	lsrs	r3, r3, #10
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4903      	ldr	r1, [pc, #12]	; (8004970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40023800 	.word	0x40023800
 8004970:	0800c460 	.word	0x0800c460

08004974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004978:	f7ff ffdc 	bl	8004934 <HAL_RCC_GetHCLKFreq>
 800497c:	4602      	mov	r2, r0
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	0b5b      	lsrs	r3, r3, #13
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	4903      	ldr	r1, [pc, #12]	; (8004998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800498a:	5ccb      	ldrb	r3, [r1, r3]
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004990:	4618      	mov	r0, r3
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40023800 	.word	0x40023800
 8004998:	0800c460 	.word	0x0800c460

0800499c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	220f      	movs	r2, #15
 80049aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049ac:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <HAL_RCC_GetClockConfig+0x5c>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 0203 	and.w	r2, r3, #3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <HAL_RCC_GetClockConfig+0x5c>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049c4:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <HAL_RCC_GetClockConfig+0x5c>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049d0:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <HAL_RCC_GetClockConfig+0x5c>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	08db      	lsrs	r3, r3, #3
 80049d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049de:	4b07      	ldr	r3, [pc, #28]	; (80049fc <HAL_RCC_GetClockConfig+0x60>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0207 	and.w	r2, r3, #7
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	601a      	str	r2, [r3, #0]
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800
 80049fc:	40023c00 	.word	0x40023c00

08004a00 <HAL_SMBUS_Init>:
  * @param  hsmbus pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60bb      	str	r3, [r7, #8]

  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_SMBUS_Init+0x1a>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e0a1      	b.n	8004b5e <HAL_SMBUS_Init+0x15e>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_SMBUS_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fc fe0a 	bl	8001648 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2224      	movs	r2, #36	; 0x24
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0201 	bic.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a4c:	f7ff ff7e 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 8004a50:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = SMBUS_FREQRANGE(pclk1);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4a44      	ldr	r2, [pc, #272]	; (8004b68 <HAL_SMBUS_Init+0x168>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	0c9b      	lsrs	r3, r3, #18
 8004a5c:	60fb      	str	r3, [r7, #12]

  /*---------------------------- SMBUSx CR2 Configuration ----------------------*/
  /* Configure SMBUSx: Frequency range */
  MODIFY_REG(hsmbus->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx TRISE Configuration --------------------*/
  /* Configure SMBUSx: Rise Time */
  MODIFY_REG(hsmbus->Instance->TRISE, I2C_TRISE_TRISE, SMBUS_RISE_TIME(freqrange));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	621a      	str	r2, [r3, #32]

  /*---------------------------- SMBUSx CCR Configuration ----------------------*/
  /* Configure SMBUSx: Speed */
  MODIFY_REG(hsmbus->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), SMBUS_SPEED_STANDARD(pclk1, hsmbus->Init.ClockSpeed));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8004a92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6852      	ldr	r2, [r2, #4]
 8004a9a:	0052      	lsls	r2, r2, #1
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	fbb1 f1f2 	udiv	r1, r1, r2
 8004aa2:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004aa6:	400a      	ands	r2, r1
 8004aa8:	2a00      	cmp	r2, #0
 8004aaa:	d006      	beq.n	8004aba <HAL_SMBUS_Init+0xba>
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6852      	ldr	r2, [r2, #4]
 8004ab0:	0052      	lsls	r2, r2, #1
 8004ab2:	68b9      	ldr	r1, [r7, #8]
 8004ab4:	fbb1 f2f2 	udiv	r2, r1, r2
 8004ab8:	e000      	b.n	8004abc <HAL_SMBUS_Init+0xbc>
 8004aba:	2204      	movs	r2, #4
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	6809      	ldr	r1, [r1, #0]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- SMBUSx CR1 Configuration ----------------------*/
  /* Configure SMBUSx: Generalcall , PEC , Peripheral mode and  NoStretch mode */
  MODIFY_REG(hsmbus->Instance->CR1, (I2C_CR1_NOSTRETCH | I2C_CR1_ENGC | I2C_CR1_ENPEC | I2C_CR1_ENARP | I2C_CR1_SMBTYPE | I2C_CR1_SMBUS), (hsmbus->Init.NoStretchMode | hsmbus->Init.GeneralCallMode |  hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f023 01fa 	bic.w	r1, r3, #250	; 0xfa
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1a      	ldr	r2, [r3, #32]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx OAR1 Configuration ---------------------*/
  /* Configure SMBUSx: Own Address1 and addressing mode */
  MODIFY_REG(hsmbus->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hsmbus->Init.AddressingMode | hsmbus->Init.OwnAddress1));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004af6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6911      	ldr	r1, [r2, #16]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68d2      	ldr	r2, [r2, #12]
 8004b02:	4311      	orrs	r1, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- SMBUSx OAR2 Configuration ---------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  MODIFY_REG(hsmbus->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695a      	ldr	r2, [r3, #20]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	60da      	str	r2, [r3, #12]
  /* Configure SMBUSx: Analog noise filter */
  SET_BIT(hsmbus->Instance->FLTR, hsmbus->Init.AnalogFilter);
#endif

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hsmbus->PreviousState = SMBUS_STATE_NONE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	639a      	str	r2, [r3, #56]	; 0x38
  hsmbus->Mode = HAL_SMBUS_MODE_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hsmbus->XferPEC = 0x00;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	431bde83 	.word	0x431bde83

08004b6c <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  SET_BIT(hsmbus->Instance->CR1, I2C_CR1_ALERT);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b82:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_SMBALERT);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8004b8c:	615a      	str	r2, [r3, #20]

  /* Enable Alert Interrupt */
  __HAL_SMBUS_ENABLE_IT(hsmbus, SMBUS_IT_ERR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b9c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e041      	b.n	8004c42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fd fab0 	bl	8002138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4619      	mov	r1, r3
 8004bea:	4610      	mov	r0, r2
 8004bec:	f001 f812 	bl	8005c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
	...

08004c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d001      	beq.n	8004c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e04e      	b.n	8004d02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a23      	ldr	r2, [pc, #140]	; (8004d10 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d022      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x80>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8e:	d01d      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x80>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d018      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x80>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d013      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x80>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1c      	ldr	r2, [pc, #112]	; (8004d1c <HAL_TIM_Base_Start_IT+0xd0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00e      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x80>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d009      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x80>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a19      	ldr	r2, [pc, #100]	; (8004d24 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0x80>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a18      	ldr	r2, [pc, #96]	; (8004d28 <HAL_TIM_Base_Start_IT+0xdc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d111      	bne.n	8004cf0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b06      	cmp	r3, #6
 8004cdc:	d010      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cee:	e007      	b.n	8004d00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40010000 	.word	0x40010000
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40000c00 	.word	0x40000c00
 8004d20:	40010400 	.word	0x40010400
 8004d24:	40014000 	.word	0x40014000
 8004d28:	40001800 	.word	0x40001800

08004d2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e041      	b.n	8004dc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fd f9a8 	bl	80020a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3304      	adds	r3, #4
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	f000 ff52 	bl	8005c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d109      	bne.n	8004df0 <HAL_TIM_PWM_Start+0x24>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	bf14      	ite	ne
 8004de8:	2301      	movne	r3, #1
 8004dea:	2300      	moveq	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	e022      	b.n	8004e36 <HAL_TIM_PWM_Start+0x6a>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d109      	bne.n	8004e0a <HAL_TIM_PWM_Start+0x3e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	bf14      	ite	ne
 8004e02:	2301      	movne	r3, #1
 8004e04:	2300      	moveq	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	e015      	b.n	8004e36 <HAL_TIM_PWM_Start+0x6a>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d109      	bne.n	8004e24 <HAL_TIM_PWM_Start+0x58>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	bf14      	ite	ne
 8004e1c:	2301      	movne	r3, #1
 8004e1e:	2300      	moveq	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	e008      	b.n	8004e36 <HAL_TIM_PWM_Start+0x6a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	bf14      	ite	ne
 8004e30:	2301      	movne	r3, #1
 8004e32:	2300      	moveq	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e07c      	b.n	8004f38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_PWM_Start+0x82>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e4c:	e013      	b.n	8004e76 <HAL_TIM_PWM_Start+0xaa>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d104      	bne.n	8004e5e <HAL_TIM_PWM_Start+0x92>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e5c:	e00b      	b.n	8004e76 <HAL_TIM_PWM_Start+0xaa>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d104      	bne.n	8004e6e <HAL_TIM_PWM_Start+0xa2>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e6c:	e003      	b.n	8004e76 <HAL_TIM_PWM_Start+0xaa>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2202      	movs	r2, #2
 8004e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f001 fadc 	bl	800643c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a2d      	ldr	r2, [pc, #180]	; (8004f40 <HAL_TIM_PWM_Start+0x174>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d004      	beq.n	8004e98 <HAL_TIM_PWM_Start+0xcc>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2c      	ldr	r2, [pc, #176]	; (8004f44 <HAL_TIM_PWM_Start+0x178>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d101      	bne.n	8004e9c <HAL_TIM_PWM_Start+0xd0>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e000      	b.n	8004e9e <HAL_TIM_PWM_Start+0xd2>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d007      	beq.n	8004eb2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a22      	ldr	r2, [pc, #136]	; (8004f40 <HAL_TIM_PWM_Start+0x174>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d022      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x136>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec4:	d01d      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x136>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1f      	ldr	r2, [pc, #124]	; (8004f48 <HAL_TIM_PWM_Start+0x17c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d018      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x136>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1d      	ldr	r2, [pc, #116]	; (8004f4c <HAL_TIM_PWM_Start+0x180>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x136>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1c      	ldr	r2, [pc, #112]	; (8004f50 <HAL_TIM_PWM_Start+0x184>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00e      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x136>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a16      	ldr	r2, [pc, #88]	; (8004f44 <HAL_TIM_PWM_Start+0x178>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d009      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x136>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <HAL_TIM_PWM_Start+0x188>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d004      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x136>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a16      	ldr	r2, [pc, #88]	; (8004f58 <HAL_TIM_PWM_Start+0x18c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d111      	bne.n	8004f26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b06      	cmp	r3, #6
 8004f12:	d010      	beq.n	8004f36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f24:	e007      	b.n	8004f36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40010400 	.word	0x40010400
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	40000800 	.word	0x40000800
 8004f50:	40000c00 	.word	0x40000c00
 8004f54:	40014000 	.word	0x40014000
 8004f58:	40001800 	.word	0x40001800

08004f5c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	bf0c      	ite	eq
 8004f80:	2301      	moveq	r3, #1
 8004f82:	2300      	movne	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	e022      	b.n	8004fce <HAL_TIM_PWM_Start_DMA+0x72>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d109      	bne.n	8004fa2 <HAL_TIM_PWM_Start_DMA+0x46>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	bf0c      	ite	eq
 8004f9a:	2301      	moveq	r3, #1
 8004f9c:	2300      	movne	r3, #0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	e015      	b.n	8004fce <HAL_TIM_PWM_Start_DMA+0x72>
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d109      	bne.n	8004fbc <HAL_TIM_PWM_Start_DMA+0x60>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	e008      	b.n	8004fce <HAL_TIM_PWM_Start_DMA+0x72>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2301      	moveq	r3, #1
 8004fca:	2300      	movne	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e171      	b.n	80052ba <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <HAL_TIM_PWM_Start_DMA+0x94>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	bf0c      	ite	eq
 8004fe8:	2301      	moveq	r3, #1
 8004fea:	2300      	movne	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	e022      	b.n	8005036 <HAL_TIM_PWM_Start_DMA+0xda>
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d109      	bne.n	800500a <HAL_TIM_PWM_Start_DMA+0xae>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	bf0c      	ite	eq
 8005002:	2301      	moveq	r3, #1
 8005004:	2300      	movne	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	e015      	b.n	8005036 <HAL_TIM_PWM_Start_DMA+0xda>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b08      	cmp	r3, #8
 800500e:	d109      	bne.n	8005024 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	bf0c      	ite	eq
 800501c:	2301      	moveq	r3, #1
 800501e:	2300      	movne	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	e008      	b.n	8005036 <HAL_TIM_PWM_Start_DMA+0xda>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b01      	cmp	r3, #1
 800502e:	bf0c      	ite	eq
 8005030:	2301      	moveq	r3, #1
 8005032:	2300      	movne	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d024      	beq.n	8005084 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d104      	bne.n	800504a <HAL_TIM_PWM_Start_DMA+0xee>
 8005040:	887b      	ldrh	r3, [r7, #2]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e137      	b.n	80052ba <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <HAL_TIM_PWM_Start_DMA+0xfe>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005058:	e016      	b.n	8005088 <HAL_TIM_PWM_Start_DMA+0x12c>
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b04      	cmp	r3, #4
 800505e:	d104      	bne.n	800506a <HAL_TIM_PWM_Start_DMA+0x10e>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005068:	e00e      	b.n	8005088 <HAL_TIM_PWM_Start_DMA+0x12c>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b08      	cmp	r3, #8
 800506e:	d104      	bne.n	800507a <HAL_TIM_PWM_Start_DMA+0x11e>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005078:	e006      	b.n	8005088 <HAL_TIM_PWM_Start_DMA+0x12c>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2202      	movs	r2, #2
 800507e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005082:	e001      	b.n	8005088 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e118      	b.n	80052ba <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b0c      	cmp	r3, #12
 800508c:	f200 80ae 	bhi.w	80051ec <HAL_TIM_PWM_Start_DMA+0x290>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050cd 	.word	0x080050cd
 800509c:	080051ed 	.word	0x080051ed
 80050a0:	080051ed 	.word	0x080051ed
 80050a4:	080051ed 	.word	0x080051ed
 80050a8:	08005115 	.word	0x08005115
 80050ac:	080051ed 	.word	0x080051ed
 80050b0:	080051ed 	.word	0x080051ed
 80050b4:	080051ed 	.word	0x080051ed
 80050b8:	0800515d 	.word	0x0800515d
 80050bc:	080051ed 	.word	0x080051ed
 80050c0:	080051ed 	.word	0x080051ed
 80050c4:	080051ed 	.word	0x080051ed
 80050c8:	080051a5 	.word	0x080051a5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	4a7c      	ldr	r2, [pc, #496]	; (80052c4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80050d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	4a7b      	ldr	r2, [pc, #492]	; (80052c8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80050da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	4a7a      	ldr	r2, [pc, #488]	; (80052cc <HAL_TIM_PWM_Start_DMA+0x370>)
 80050e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3334      	adds	r3, #52	; 0x34
 80050f0:	461a      	mov	r2, r3
 80050f2:	887b      	ldrh	r3, [r7, #2]
 80050f4:	f7fe fabe 	bl	8003674 <HAL_DMA_Start_IT>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e0db      	b.n	80052ba <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005110:	60da      	str	r2, [r3, #12]
      break;
 8005112:	e06e      	b.n	80051f2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	4a6a      	ldr	r2, [pc, #424]	; (80052c4 <HAL_TIM_PWM_Start_DMA+0x368>)
 800511a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	4a69      	ldr	r2, [pc, #420]	; (80052c8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	4a68      	ldr	r2, [pc, #416]	; (80052cc <HAL_TIM_PWM_Start_DMA+0x370>)
 800512a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3338      	adds	r3, #56	; 0x38
 8005138:	461a      	mov	r2, r3
 800513a:	887b      	ldrh	r3, [r7, #2]
 800513c:	f7fe fa9a 	bl	8003674 <HAL_DMA_Start_IT>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e0b7      	b.n	80052ba <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005158:	60da      	str	r2, [r3, #12]
      break;
 800515a:	e04a      	b.n	80051f2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	4a58      	ldr	r2, [pc, #352]	; (80052c4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005162:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	4a57      	ldr	r2, [pc, #348]	; (80052c8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800516a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	4a56      	ldr	r2, [pc, #344]	; (80052cc <HAL_TIM_PWM_Start_DMA+0x370>)
 8005172:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	333c      	adds	r3, #60	; 0x3c
 8005180:	461a      	mov	r2, r3
 8005182:	887b      	ldrh	r3, [r7, #2]
 8005184:	f7fe fa76 	bl	8003674 <HAL_DMA_Start_IT>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e093      	b.n	80052ba <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a0:	60da      	str	r2, [r3, #12]
      break;
 80051a2:	e026      	b.n	80051f2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a8:	4a46      	ldr	r2, [pc, #280]	; (80052c4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80051aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b0:	4a45      	ldr	r2, [pc, #276]	; (80052c8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80051b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b8:	4a44      	ldr	r2, [pc, #272]	; (80052cc <HAL_TIM_PWM_Start_DMA+0x370>)
 80051ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3340      	adds	r3, #64	; 0x40
 80051c8:	461a      	mov	r2, r3
 80051ca:	887b      	ldrh	r3, [r7, #2]
 80051cc:	f7fe fa52 	bl	8003674 <HAL_DMA_Start_IT>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e06f      	b.n	80052ba <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051e8:	60da      	str	r2, [r3, #12]
      break;
 80051ea:	e002      	b.n	80051f2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	75fb      	strb	r3, [r7, #23]
      break;
 80051f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80051f2:	7dfb      	ldrb	r3, [r7, #23]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d15f      	bne.n	80052b8 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2201      	movs	r2, #1
 80051fe:	68b9      	ldr	r1, [r7, #8]
 8005200:	4618      	mov	r0, r3
 8005202:	f001 f91b 	bl	800643c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a31      	ldr	r2, [pc, #196]	; (80052d0 <HAL_TIM_PWM_Start_DMA+0x374>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d004      	beq.n	800521a <HAL_TIM_PWM_Start_DMA+0x2be>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a2f      	ldr	r2, [pc, #188]	; (80052d4 <HAL_TIM_PWM_Start_DMA+0x378>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d101      	bne.n	800521e <HAL_TIM_PWM_Start_DMA+0x2c2>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800521e:	2300      	movs	r3, #0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005232:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a25      	ldr	r2, [pc, #148]	; (80052d0 <HAL_TIM_PWM_Start_DMA+0x374>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d022      	beq.n	8005284 <HAL_TIM_PWM_Start_DMA+0x328>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005246:	d01d      	beq.n	8005284 <HAL_TIM_PWM_Start_DMA+0x328>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a22      	ldr	r2, [pc, #136]	; (80052d8 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d018      	beq.n	8005284 <HAL_TIM_PWM_Start_DMA+0x328>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a21      	ldr	r2, [pc, #132]	; (80052dc <HAL_TIM_PWM_Start_DMA+0x380>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d013      	beq.n	8005284 <HAL_TIM_PWM_Start_DMA+0x328>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <HAL_TIM_PWM_Start_DMA+0x384>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00e      	beq.n	8005284 <HAL_TIM_PWM_Start_DMA+0x328>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1a      	ldr	r2, [pc, #104]	; (80052d4 <HAL_TIM_PWM_Start_DMA+0x378>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d009      	beq.n	8005284 <HAL_TIM_PWM_Start_DMA+0x328>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <HAL_TIM_PWM_Start_DMA+0x388>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_TIM_PWM_Start_DMA+0x328>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1a      	ldr	r2, [pc, #104]	; (80052e8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d111      	bne.n	80052a8 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b06      	cmp	r3, #6
 8005294:	d010      	beq.n	80052b8 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	e007      	b.n	80052b8 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	08005b05 	.word	0x08005b05
 80052c8:	08005bad 	.word	0x08005bad
 80052cc:	08005a73 	.word	0x08005a73
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40010400 	.word	0x40010400
 80052d8:	40000400 	.word	0x40000400
 80052dc:	40000800 	.word	0x40000800
 80052e0:	40000c00 	.word	0x40000c00
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40001800 	.word	0x40001800

080052ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e041      	b.n	8005382 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f839 	bl	800538a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f000 fc72 	bl	8005c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b082      	sub	sp, #8
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d122      	bne.n	80053fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d11b      	bne.n	80053fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f06f 0202 	mvn.w	r2, #2
 80053ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fb14 	bl	8005a0e <HAL_TIM_IC_CaptureCallback>
 80053e6:	e005      	b.n	80053f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fb06 	bl	80059fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fb17 	bl	8005a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b04      	cmp	r3, #4
 8005406:	d122      	bne.n	800544e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b04      	cmp	r3, #4
 8005414:	d11b      	bne.n	800544e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f06f 0204 	mvn.w	r2, #4
 800541e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 faea 	bl	8005a0e <HAL_TIM_IC_CaptureCallback>
 800543a:	e005      	b.n	8005448 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fadc 	bl	80059fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 faed 	bl	8005a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f003 0308 	and.w	r3, r3, #8
 8005458:	2b08      	cmp	r3, #8
 800545a:	d122      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b08      	cmp	r3, #8
 8005468:	d11b      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f06f 0208 	mvn.w	r2, #8
 8005472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2204      	movs	r2, #4
 8005478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fac0 	bl	8005a0e <HAL_TIM_IC_CaptureCallback>
 800548e:	e005      	b.n	800549c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fab2 	bl	80059fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fac3 	bl	8005a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b10      	cmp	r3, #16
 80054ae:	d122      	bne.n	80054f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	2b10      	cmp	r3, #16
 80054bc:	d11b      	bne.n	80054f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f06f 0210 	mvn.w	r2, #16
 80054c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2208      	movs	r2, #8
 80054cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fa96 	bl	8005a0e <HAL_TIM_IC_CaptureCallback>
 80054e2:	e005      	b.n	80054f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fa88 	bl	80059fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fa99 	bl	8005a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b01      	cmp	r3, #1
 8005502:	d10e      	bne.n	8005522 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b01      	cmp	r3, #1
 8005510:	d107      	bne.n	8005522 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f06f 0201 	mvn.w	r2, #1
 800551a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7fc f979 	bl	8001814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552c:	2b80      	cmp	r3, #128	; 0x80
 800552e:	d10e      	bne.n	800554e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553a:	2b80      	cmp	r3, #128	; 0x80
 800553c:	d107      	bne.n	800554e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f001 f875 	bl	8006638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005558:	2b40      	cmp	r3, #64	; 0x40
 800555a:	d10e      	bne.n	800557a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	2b40      	cmp	r3, #64	; 0x40
 8005568:	d107      	bne.n	800557a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fa68 	bl	8005a4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	f003 0320 	and.w	r3, r3, #32
 8005584:	2b20      	cmp	r3, #32
 8005586:	d10e      	bne.n	80055a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f003 0320 	and.w	r3, r3, #32
 8005592:	2b20      	cmp	r3, #32
 8005594:	d107      	bne.n	80055a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f06f 0220 	mvn.w	r2, #32
 800559e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f001 f83f 	bl	8006624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b086      	sub	sp, #24
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_TIM_IC_ConfigChannel+0x1e>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e088      	b.n	80056de <HAL_TIM_IC_ConfigChannel+0x130>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d11b      	bne.n	8005612 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6818      	ldr	r0, [r3, #0]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	6819      	ldr	r1, [r3, #0]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f000 fd63 	bl	80060b4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699a      	ldr	r2, [r3, #24]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 020c 	bic.w	r2, r2, #12
 80055fc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6999      	ldr	r1, [r3, #24]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	619a      	str	r2, [r3, #24]
 8005610:	e060      	b.n	80056d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b04      	cmp	r3, #4
 8005616:	d11c      	bne.n	8005652 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6818      	ldr	r0, [r3, #0]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	6819      	ldr	r1, [r3, #0]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f000 fde7 	bl	80061fa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800563a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6999      	ldr	r1, [r3, #24]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	021a      	lsls	r2, r3, #8
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	619a      	str	r2, [r3, #24]
 8005650:	e040      	b.n	80056d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b08      	cmp	r3, #8
 8005656:	d11b      	bne.n	8005690 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6818      	ldr	r0, [r3, #0]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	6819      	ldr	r1, [r3, #0]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f000 fe34 	bl	80062d4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	69da      	ldr	r2, [r3, #28]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 020c 	bic.w	r2, r2, #12
 800567a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	69d9      	ldr	r1, [r3, #28]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	61da      	str	r2, [r3, #28]
 800568e:	e021      	b.n	80056d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b0c      	cmp	r3, #12
 8005694:	d11c      	bne.n	80056d0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6818      	ldr	r0, [r3, #0]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	6819      	ldr	r1, [r3, #0]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f000 fe51 	bl	800634c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69da      	ldr	r2, [r3, #28]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69d9      	ldr	r1, [r3, #28]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	021a      	lsls	r2, r3, #8
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	61da      	str	r2, [r3, #28]
 80056ce:	e001      	b.n	80056d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d101      	bne.n	8005706 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005702:	2302      	movs	r3, #2
 8005704:	e0ae      	b.n	8005864 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b0c      	cmp	r3, #12
 8005712:	f200 809f 	bhi.w	8005854 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005716:	a201      	add	r2, pc, #4	; (adr r2, 800571c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571c:	08005751 	.word	0x08005751
 8005720:	08005855 	.word	0x08005855
 8005724:	08005855 	.word	0x08005855
 8005728:	08005855 	.word	0x08005855
 800572c:	08005791 	.word	0x08005791
 8005730:	08005855 	.word	0x08005855
 8005734:	08005855 	.word	0x08005855
 8005738:	08005855 	.word	0x08005855
 800573c:	080057d3 	.word	0x080057d3
 8005740:	08005855 	.word	0x08005855
 8005744:	08005855 	.word	0x08005855
 8005748:	08005855 	.word	0x08005855
 800574c:	08005813 	.word	0x08005813
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fafc 	bl	8005d54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0208 	orr.w	r2, r2, #8
 800576a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0204 	bic.w	r2, r2, #4
 800577a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6999      	ldr	r1, [r3, #24]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	619a      	str	r2, [r3, #24]
      break;
 800578e:	e064      	b.n	800585a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fb4c 	bl	8005e34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6999      	ldr	r1, [r3, #24]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	021a      	lsls	r2, r3, #8
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	619a      	str	r2, [r3, #24]
      break;
 80057d0:	e043      	b.n	800585a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68b9      	ldr	r1, [r7, #8]
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fba1 	bl	8005f20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0208 	orr.w	r2, r2, #8
 80057ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69da      	ldr	r2, [r3, #28]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0204 	bic.w	r2, r2, #4
 80057fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69d9      	ldr	r1, [r3, #28]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	691a      	ldr	r2, [r3, #16]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	61da      	str	r2, [r3, #28]
      break;
 8005810:	e023      	b.n	800585a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	4618      	mov	r0, r3
 800581a:	f000 fbf5 	bl	8006008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800582c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800583c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69d9      	ldr	r1, [r3, #28]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	021a      	lsls	r2, r3, #8
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	61da      	str	r2, [r3, #28]
      break;
 8005852:	e002      	b.n	800585a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	75fb      	strb	r3, [r7, #23]
      break;
 8005858:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005862:	7dfb      	ldrb	r3, [r7, #23]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_TIM_ConfigClockSource+0x1c>
 8005884:	2302      	movs	r3, #2
 8005886:	e0b4      	b.n	80059f2 <HAL_TIM_ConfigClockSource+0x186>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c0:	d03e      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0xd4>
 80058c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c6:	f200 8087 	bhi.w	80059d8 <HAL_TIM_ConfigClockSource+0x16c>
 80058ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ce:	f000 8086 	beq.w	80059de <HAL_TIM_ConfigClockSource+0x172>
 80058d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d6:	d87f      	bhi.n	80059d8 <HAL_TIM_ConfigClockSource+0x16c>
 80058d8:	2b70      	cmp	r3, #112	; 0x70
 80058da:	d01a      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0xa6>
 80058dc:	2b70      	cmp	r3, #112	; 0x70
 80058de:	d87b      	bhi.n	80059d8 <HAL_TIM_ConfigClockSource+0x16c>
 80058e0:	2b60      	cmp	r3, #96	; 0x60
 80058e2:	d050      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x11a>
 80058e4:	2b60      	cmp	r3, #96	; 0x60
 80058e6:	d877      	bhi.n	80059d8 <HAL_TIM_ConfigClockSource+0x16c>
 80058e8:	2b50      	cmp	r3, #80	; 0x50
 80058ea:	d03c      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0xfa>
 80058ec:	2b50      	cmp	r3, #80	; 0x50
 80058ee:	d873      	bhi.n	80059d8 <HAL_TIM_ConfigClockSource+0x16c>
 80058f0:	2b40      	cmp	r3, #64	; 0x40
 80058f2:	d058      	beq.n	80059a6 <HAL_TIM_ConfigClockSource+0x13a>
 80058f4:	2b40      	cmp	r3, #64	; 0x40
 80058f6:	d86f      	bhi.n	80059d8 <HAL_TIM_ConfigClockSource+0x16c>
 80058f8:	2b30      	cmp	r3, #48	; 0x30
 80058fa:	d064      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0x15a>
 80058fc:	2b30      	cmp	r3, #48	; 0x30
 80058fe:	d86b      	bhi.n	80059d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005900:	2b20      	cmp	r3, #32
 8005902:	d060      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005904:	2b20      	cmp	r3, #32
 8005906:	d867      	bhi.n	80059d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005908:	2b00      	cmp	r3, #0
 800590a:	d05c      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0x15a>
 800590c:	2b10      	cmp	r3, #16
 800590e:	d05a      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005910:	e062      	b.n	80059d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6899      	ldr	r1, [r3, #8]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f000 fd6b 	bl	80063fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	609a      	str	r2, [r3, #8]
      break;
 800593e:	e04f      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6818      	ldr	r0, [r3, #0]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	6899      	ldr	r1, [r3, #8]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f000 fd54 	bl	80063fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005962:	609a      	str	r2, [r3, #8]
      break;
 8005964:	e03c      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6859      	ldr	r1, [r3, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	461a      	mov	r2, r3
 8005974:	f000 fc12 	bl	800619c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2150      	movs	r1, #80	; 0x50
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fd21 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8005984:	e02c      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	6859      	ldr	r1, [r3, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	461a      	mov	r2, r3
 8005994:	f000 fc6e 	bl	8006274 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2160      	movs	r1, #96	; 0x60
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fd11 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 80059a4:	e01c      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	6859      	ldr	r1, [r3, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	461a      	mov	r2, r3
 80059b4:	f000 fbf2 	bl	800619c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2140      	movs	r1, #64	; 0x40
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 fd01 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 80059c4:	e00c      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4619      	mov	r1, r3
 80059d0:	4610      	mov	r0, r2
 80059d2:	f000 fcf8 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 80059d6:	e003      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	73fb      	strb	r3, [r7, #15]
      break;
 80059dc:	e000      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d107      	bne.n	8005a9a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a98:	e02a      	b.n	8005af0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d107      	bne.n	8005ab4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ab2:	e01d      	b.n	8005af0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d107      	bne.n	8005ace <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005acc:	e010      	b.n	8005af0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d107      	bne.n	8005ae8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2208      	movs	r2, #8
 8005adc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ae6:	e003      	b.n	8005af0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f7ff ffb4 	bl	8005a5e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	771a      	strb	r2, [r3, #28]
}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d10b      	bne.n	8005b34 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d136      	bne.n	8005b98 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b32:	e031      	b.n	8005b98 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d10b      	bne.n	8005b56 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2202      	movs	r2, #2
 8005b42:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d125      	bne.n	8005b98 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b54:	e020      	b.n	8005b98 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d10b      	bne.n	8005b78 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2204      	movs	r2, #4
 8005b64:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d114      	bne.n	8005b98 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b76:	e00f      	b.n	8005b98 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d10a      	bne.n	8005b98 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2208      	movs	r2, #8
 8005b86:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d103      	bne.n	8005b98 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f7ff ff42 	bl	8005a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	771a      	strb	r2, [r3, #28]
}
 8005ba4:	bf00      	nop
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d103      	bne.n	8005bcc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	771a      	strb	r2, [r3, #28]
 8005bca:	e019      	b.n	8005c00 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d103      	bne.n	8005bde <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	771a      	strb	r2, [r3, #28]
 8005bdc:	e010      	b.n	8005c00 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d103      	bne.n	8005bf0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2204      	movs	r2, #4
 8005bec:	771a      	strb	r2, [r3, #28]
 8005bee:	e007      	b.n	8005c00 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d102      	bne.n	8005c00 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2208      	movs	r2, #8
 8005bfe:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f7ff ff18 	bl	8005a36 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	771a      	strb	r2, [r3, #28]
}
 8005c0c:	bf00      	nop
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a40      	ldr	r2, [pc, #256]	; (8005d28 <TIM_Base_SetConfig+0x114>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d013      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c32:	d00f      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a3d      	ldr	r2, [pc, #244]	; (8005d2c <TIM_Base_SetConfig+0x118>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00b      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a3c      	ldr	r2, [pc, #240]	; (8005d30 <TIM_Base_SetConfig+0x11c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d007      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a3b      	ldr	r2, [pc, #236]	; (8005d34 <TIM_Base_SetConfig+0x120>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3a      	ldr	r2, [pc, #232]	; (8005d38 <TIM_Base_SetConfig+0x124>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d108      	bne.n	8005c66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a2f      	ldr	r2, [pc, #188]	; (8005d28 <TIM_Base_SetConfig+0x114>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d02b      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c74:	d027      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a2c      	ldr	r2, [pc, #176]	; (8005d2c <TIM_Base_SetConfig+0x118>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d023      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a2b      	ldr	r2, [pc, #172]	; (8005d30 <TIM_Base_SetConfig+0x11c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d01f      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2a      	ldr	r2, [pc, #168]	; (8005d34 <TIM_Base_SetConfig+0x120>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01b      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a29      	ldr	r2, [pc, #164]	; (8005d38 <TIM_Base_SetConfig+0x124>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d017      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a28      	ldr	r2, [pc, #160]	; (8005d3c <TIM_Base_SetConfig+0x128>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d013      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a27      	ldr	r2, [pc, #156]	; (8005d40 <TIM_Base_SetConfig+0x12c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00f      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a26      	ldr	r2, [pc, #152]	; (8005d44 <TIM_Base_SetConfig+0x130>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00b      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a25      	ldr	r2, [pc, #148]	; (8005d48 <TIM_Base_SetConfig+0x134>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d007      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a24      	ldr	r2, [pc, #144]	; (8005d4c <TIM_Base_SetConfig+0x138>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d003      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a23      	ldr	r2, [pc, #140]	; (8005d50 <TIM_Base_SetConfig+0x13c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d108      	bne.n	8005cd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <TIM_Base_SetConfig+0x114>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_Base_SetConfig+0xf8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a0c      	ldr	r2, [pc, #48]	; (8005d38 <TIM_Base_SetConfig+0x124>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d103      	bne.n	8005d14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	615a      	str	r2, [r3, #20]
}
 8005d1a:	bf00      	nop
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40010000 	.word	0x40010000
 8005d2c:	40000400 	.word	0x40000400
 8005d30:	40000800 	.word	0x40000800
 8005d34:	40000c00 	.word	0x40000c00
 8005d38:	40010400 	.word	0x40010400
 8005d3c:	40014000 	.word	0x40014000
 8005d40:	40014400 	.word	0x40014400
 8005d44:	40014800 	.word	0x40014800
 8005d48:	40001800 	.word	0x40001800
 8005d4c:	40001c00 	.word	0x40001c00
 8005d50:	40002000 	.word	0x40002000

08005d54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f023 0201 	bic.w	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0303 	bic.w	r3, r3, #3
 8005d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f023 0302 	bic.w	r3, r3, #2
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a20      	ldr	r2, [pc, #128]	; (8005e2c <TIM_OC1_SetConfig+0xd8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <TIM_OC1_SetConfig+0x64>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a1f      	ldr	r2, [pc, #124]	; (8005e30 <TIM_OC1_SetConfig+0xdc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d10c      	bne.n	8005dd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f023 0308 	bic.w	r3, r3, #8
 8005dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f023 0304 	bic.w	r3, r3, #4
 8005dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a15      	ldr	r2, [pc, #84]	; (8005e2c <TIM_OC1_SetConfig+0xd8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_OC1_SetConfig+0x8e>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a14      	ldr	r2, [pc, #80]	; (8005e30 <TIM_OC1_SetConfig+0xdc>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d111      	bne.n	8005e06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	621a      	str	r2, [r3, #32]
}
 8005e20:	bf00      	nop
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	40010000 	.word	0x40010000
 8005e30:	40010400 	.word	0x40010400

08005e34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	f023 0210 	bic.w	r2, r3, #16
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	021b      	lsls	r3, r3, #8
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f023 0320 	bic.w	r3, r3, #32
 8005e7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	011b      	lsls	r3, r3, #4
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a22      	ldr	r2, [pc, #136]	; (8005f18 <TIM_OC2_SetConfig+0xe4>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d003      	beq.n	8005e9c <TIM_OC2_SetConfig+0x68>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a21      	ldr	r2, [pc, #132]	; (8005f1c <TIM_OC2_SetConfig+0xe8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d10d      	bne.n	8005eb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <TIM_OC2_SetConfig+0xe4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d003      	beq.n	8005ec8 <TIM_OC2_SetConfig+0x94>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a16      	ldr	r2, [pc, #88]	; (8005f1c <TIM_OC2_SetConfig+0xe8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d113      	bne.n	8005ef0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ece:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	621a      	str	r2, [r3, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40010400 	.word	0x40010400

08005f20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0303 	bic.w	r3, r3, #3
 8005f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a21      	ldr	r2, [pc, #132]	; (8006000 <TIM_OC3_SetConfig+0xe0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d003      	beq.n	8005f86 <TIM_OC3_SetConfig+0x66>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a20      	ldr	r2, [pc, #128]	; (8006004 <TIM_OC3_SetConfig+0xe4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d10d      	bne.n	8005fa2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	021b      	lsls	r3, r3, #8
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a16      	ldr	r2, [pc, #88]	; (8006000 <TIM_OC3_SetConfig+0xe0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d003      	beq.n	8005fb2 <TIM_OC3_SetConfig+0x92>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a15      	ldr	r2, [pc, #84]	; (8006004 <TIM_OC3_SetConfig+0xe4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d113      	bne.n	8005fda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	621a      	str	r2, [r3, #32]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	40010000 	.word	0x40010000
 8006004:	40010400 	.word	0x40010400

08006008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	021b      	lsls	r3, r3, #8
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	031b      	lsls	r3, r3, #12
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a12      	ldr	r2, [pc, #72]	; (80060ac <TIM_OC4_SetConfig+0xa4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d003      	beq.n	8006070 <TIM_OC4_SetConfig+0x68>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a11      	ldr	r2, [pc, #68]	; (80060b0 <TIM_OC4_SetConfig+0xa8>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d109      	bne.n	8006084 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006076:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	019b      	lsls	r3, r3, #6
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	621a      	str	r2, [r3, #32]
}
 800609e:	bf00      	nop
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40010000 	.word	0x40010000
 80060b0:	40010400 	.word	0x40010400

080060b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	f023 0201 	bic.w	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4a28      	ldr	r2, [pc, #160]	; (8006180 <TIM_TI1_SetConfig+0xcc>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d01b      	beq.n	800611a <TIM_TI1_SetConfig+0x66>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e8:	d017      	beq.n	800611a <TIM_TI1_SetConfig+0x66>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4a25      	ldr	r2, [pc, #148]	; (8006184 <TIM_TI1_SetConfig+0xd0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <TIM_TI1_SetConfig+0x66>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4a24      	ldr	r2, [pc, #144]	; (8006188 <TIM_TI1_SetConfig+0xd4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00f      	beq.n	800611a <TIM_TI1_SetConfig+0x66>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4a23      	ldr	r2, [pc, #140]	; (800618c <TIM_TI1_SetConfig+0xd8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00b      	beq.n	800611a <TIM_TI1_SetConfig+0x66>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	4a22      	ldr	r2, [pc, #136]	; (8006190 <TIM_TI1_SetConfig+0xdc>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d007      	beq.n	800611a <TIM_TI1_SetConfig+0x66>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4a21      	ldr	r2, [pc, #132]	; (8006194 <TIM_TI1_SetConfig+0xe0>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d003      	beq.n	800611a <TIM_TI1_SetConfig+0x66>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4a20      	ldr	r2, [pc, #128]	; (8006198 <TIM_TI1_SetConfig+0xe4>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d101      	bne.n	800611e <TIM_TI1_SetConfig+0x6a>
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <TIM_TI1_SetConfig+0x6c>
 800611e:	2300      	movs	r3, #0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d008      	beq.n	8006136 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f023 0303 	bic.w	r3, r3, #3
 800612a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	e003      	b.n	800613e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f043 0301 	orr.w	r3, r3, #1
 800613c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006144:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	b2db      	uxtb	r3, r3
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f023 030a 	bic.w	r3, r3, #10
 8006158:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f003 030a 	and.w	r3, r3, #10
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	4313      	orrs	r3, r2
 8006164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	621a      	str	r2, [r3, #32]
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40010000 	.word	0x40010000
 8006184:	40000400 	.word	0x40000400
 8006188:	40000800 	.word	0x40000800
 800618c:	40000c00 	.word	0x40000c00
 8006190:	40010400 	.word	0x40010400
 8006194:	40014000 	.word	0x40014000
 8006198:	40001800 	.word	0x40001800

0800619c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f023 0201 	bic.w	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	011b      	lsls	r3, r3, #4
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f023 030a 	bic.w	r3, r3, #10
 80061d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b087      	sub	sp, #28
 80061fe:	af00      	add	r7, sp, #0
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	607a      	str	r2, [r7, #4]
 8006206:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	f023 0210 	bic.w	r2, r3, #16
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006226:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	4313      	orrs	r3, r2
 8006230:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	031b      	lsls	r3, r3, #12
 800623e:	b29b      	uxth	r3, r3
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800624c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	621a      	str	r2, [r3, #32]
}
 8006268:	bf00      	nop
 800626a:	371c      	adds	r7, #28
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	f023 0210 	bic.w	r2, r3, #16
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800629e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	031b      	lsls	r3, r3, #12
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	011b      	lsls	r3, r3, #4
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	621a      	str	r2, [r3, #32]
}
 80062c8:	bf00      	nop
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f023 0303 	bic.w	r3, r3, #3
 8006300:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006310:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	011b      	lsls	r3, r3, #4
 8006316:	b2db      	uxtb	r3, r3
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006324:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4313      	orrs	r3, r2
 8006332:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	621a      	str	r2, [r3, #32]
}
 8006340:	bf00      	nop
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006378:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800638a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	031b      	lsls	r3, r3, #12
 8006390:	b29b      	uxth	r3, r3
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800639e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	031b      	lsls	r3, r3, #12
 80063a4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	621a      	str	r2, [r3, #32]
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f043 0307 	orr.w	r3, r3, #7
 80063e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	609a      	str	r2, [r3, #8]
}
 80063f0:	bf00      	nop
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006416:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	021a      	lsls	r2, r3, #8
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	431a      	orrs	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4313      	orrs	r3, r2
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	609a      	str	r2, [r3, #8]
}
 8006430:	bf00      	nop
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f003 031f 	and.w	r3, r3, #31
 800644e:	2201      	movs	r2, #1
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a1a      	ldr	r2, [r3, #32]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	43db      	mvns	r3, r3
 800645e:	401a      	ands	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	fa01 f303 	lsl.w	r3, r1, r3
 8006474:	431a      	orrs	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
	...

08006488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800649c:	2302      	movs	r3, #2
 800649e:	e05a      	b.n	8006556 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a21      	ldr	r2, [pc, #132]	; (8006564 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d022      	beq.n	800652a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ec:	d01d      	beq.n	800652a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a1d      	ldr	r2, [pc, #116]	; (8006568 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d018      	beq.n	800652a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1b      	ldr	r2, [pc, #108]	; (800656c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d013      	beq.n	800652a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1a      	ldr	r2, [pc, #104]	; (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00e      	beq.n	800652a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a18      	ldr	r2, [pc, #96]	; (8006574 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d009      	beq.n	800652a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a17      	ldr	r2, [pc, #92]	; (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d004      	beq.n	800652a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a15      	ldr	r2, [pc, #84]	; (800657c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d10c      	bne.n	8006544 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006530:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	4313      	orrs	r3, r2
 800653a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	40010000 	.word	0x40010000
 8006568:	40000400 	.word	0x40000400
 800656c:	40000800 	.word	0x40000800
 8006570:	40000c00 	.word	0x40000c00
 8006574:	40010400 	.word	0x40010400
 8006578:	40014000 	.word	0x40014000
 800657c:	40001800 	.word	0x40001800

08006580 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006598:	2302      	movs	r3, #2
 800659a:	e03d      	b.n	8006618 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	4313      	orrs	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e03f      	b.n	80066de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d106      	bne.n	8006678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fb feaa 	bl	80023cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2224      	movs	r2, #36	; 0x24
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800668e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 ff35 	bl	8007500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695a      	ldr	r2, [r3, #20]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b08a      	sub	sp, #40	; 0x28
 80066ea:	af02      	add	r7, sp, #8
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b20      	cmp	r3, #32
 8006704:	d17c      	bne.n	8006800 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <HAL_UART_Transmit+0x2c>
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e075      	b.n	8006802 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800671c:	2b01      	cmp	r3, #1
 800671e:	d101      	bne.n	8006724 <HAL_UART_Transmit+0x3e>
 8006720:	2302      	movs	r3, #2
 8006722:	e06e      	b.n	8006802 <HAL_UART_Transmit+0x11c>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2221      	movs	r2, #33	; 0x21
 8006736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800673a:	f7fb ff67 	bl	800260c <HAL_GetTick>
 800673e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	88fa      	ldrh	r2, [r7, #6]
 8006744:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	88fa      	ldrh	r2, [r7, #6]
 800674a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006754:	d108      	bne.n	8006768 <HAL_UART_Transmit+0x82>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d104      	bne.n	8006768 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800675e:	2300      	movs	r3, #0
 8006760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	e003      	b.n	8006770 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800676c:	2300      	movs	r3, #0
 800676e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006778:	e02a      	b.n	80067d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2200      	movs	r2, #0
 8006782:	2180      	movs	r1, #128	; 0x80
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 fc4c 	bl	8007022 <UART_WaitOnFlagUntilTimeout>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e036      	b.n	8006802 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10b      	bne.n	80067b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	3302      	adds	r3, #2
 80067ae:	61bb      	str	r3, [r7, #24]
 80067b0:	e007      	b.n	80067c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	781a      	ldrb	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	3301      	adds	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1cf      	bne.n	800677a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2200      	movs	r2, #0
 80067e2:	2140      	movs	r1, #64	; 0x40
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 fc1c 	bl	8007022 <UART_WaitOnFlagUntilTimeout>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e006      	b.n	8006802 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	e000      	b.n	8006802 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006800:	2302      	movs	r3, #2
  }
}
 8006802:	4618      	mov	r0, r3
 8006804:	3720      	adds	r7, #32
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b084      	sub	sp, #16
 800680e:	af00      	add	r7, sp, #0
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	4613      	mov	r3, r2
 8006816:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b20      	cmp	r3, #32
 8006822:	d11d      	bne.n	8006860 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_UART_Receive_IT+0x26>
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e016      	b.n	8006862 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800683a:	2b01      	cmp	r3, #1
 800683c:	d101      	bne.n	8006842 <HAL_UART_Receive_IT+0x38>
 800683e:	2302      	movs	r3, #2
 8006840:	e00f      	b.n	8006862 <HAL_UART_Receive_IT+0x58>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006850:	88fb      	ldrh	r3, [r7, #6]
 8006852:	461a      	mov	r2, r3
 8006854:	68b9      	ldr	r1, [r7, #8]
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 fc51 	bl	80070fe <UART_Start_Receive_IT>
 800685c:	4603      	mov	r3, r0
 800685e:	e000      	b.n	8006862 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006860:	2302      	movs	r3, #2
  }
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08c      	sub	sp, #48	; 0x30
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	4613      	mov	r3, r2
 8006878:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b20      	cmp	r3, #32
 8006884:	d165      	bne.n	8006952 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <HAL_UART_Transmit_DMA+0x26>
 800688c:	88fb      	ldrh	r3, [r7, #6]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e05e      	b.n	8006954 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_UART_Transmit_DMA+0x38>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e057      	b.n	8006954 <HAL_UART_Transmit_DMA+0xe8>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	88fa      	ldrh	r2, [r7, #6]
 80068b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	88fa      	ldrh	r2, [r7, #6]
 80068bc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2221      	movs	r2, #33	; 0x21
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d0:	4a22      	ldr	r2, [pc, #136]	; (800695c <HAL_UART_Transmit_DMA+0xf0>)
 80068d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d8:	4a21      	ldr	r2, [pc, #132]	; (8006960 <HAL_UART_Transmit_DMA+0xf4>)
 80068da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e0:	4a20      	ldr	r2, [pc, #128]	; (8006964 <HAL_UART_Transmit_DMA+0xf8>)
 80068e2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e8:	2200      	movs	r2, #0
 80068ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80068ec:	f107 0308 	add.w	r3, r7, #8
 80068f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	6819      	ldr	r1, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3304      	adds	r3, #4
 8006900:	461a      	mov	r2, r3
 8006902:	88fb      	ldrh	r3, [r7, #6]
 8006904:	f7fc feb6 	bl	8003674 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006910:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3314      	adds	r3, #20
 8006920:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	617b      	str	r3, [r7, #20]
   return(result);
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006930:	62bb      	str	r3, [r7, #40]	; 0x28
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3314      	adds	r3, #20
 8006938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800693a:	627a      	str	r2, [r7, #36]	; 0x24
 800693c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	6a39      	ldr	r1, [r7, #32]
 8006940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	61fb      	str	r3, [r7, #28]
   return(result);
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e5      	bne.n	800691a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	e000      	b.n	8006954 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006952:	2302      	movs	r3, #2
  }
}
 8006954:	4618      	mov	r0, r3
 8006956:	3730      	adds	r7, #48	; 0x30
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	08006ed9 	.word	0x08006ed9
 8006960:	08006f73 	.word	0x08006f73
 8006964:	08006f8f 	.word	0x08006f8f

08006968 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b0ba      	sub	sp, #232	; 0xe8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800698e:	2300      	movs	r3, #0
 8006990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006994:	2300      	movs	r3, #0
 8006996:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800699a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80069a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10f      	bne.n	80069ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b2:	f003 0320 	and.w	r3, r3, #32
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d009      	beq.n	80069ce <HAL_UART_IRQHandler+0x66>
 80069ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069be:	f003 0320 	and.w	r3, r3, #32
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fcde 	bl	8007388 <UART_Receive_IT>
      return;
 80069cc:	e256      	b.n	8006e7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80069ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 80de 	beq.w	8006b94 <HAL_UART_IRQHandler+0x22c>
 80069d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d106      	bne.n	80069f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 80d1 	beq.w	8006b94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00b      	beq.n	8006a16 <HAL_UART_IRQHandler+0xae>
 80069fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d005      	beq.n	8006a16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	f043 0201 	orr.w	r2, r3, #1
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1a:	f003 0304 	and.w	r3, r3, #4
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00b      	beq.n	8006a3a <HAL_UART_IRQHandler+0xd2>
 8006a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d005      	beq.n	8006a3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	f043 0202 	orr.w	r2, r3, #2
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00b      	beq.n	8006a5e <HAL_UART_IRQHandler+0xf6>
 8006a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d005      	beq.n	8006a5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	f043 0204 	orr.w	r2, r3, #4
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a62:	f003 0308 	and.w	r3, r3, #8
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d011      	beq.n	8006a8e <HAL_UART_IRQHandler+0x126>
 8006a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6e:	f003 0320 	and.w	r3, r3, #32
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d105      	bne.n	8006a82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d005      	beq.n	8006a8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f043 0208 	orr.w	r2, r3, #8
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 81ed 	beq.w	8006e72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9c:	f003 0320 	and.w	r3, r3, #32
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d008      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x14e>
 8006aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aa8:	f003 0320 	and.w	r3, r3, #32
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fc69 	bl	8007388 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac0:	2b40      	cmp	r3, #64	; 0x40
 8006ac2:	bf0c      	ite	eq
 8006ac4:	2301      	moveq	r3, #1
 8006ac6:	2300      	movne	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	f003 0308 	and.w	r3, r3, #8
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d103      	bne.n	8006ae2 <HAL_UART_IRQHandler+0x17a>
 8006ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d04f      	beq.n	8006b82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fb71 	bl	80071ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af2:	2b40      	cmp	r3, #64	; 0x40
 8006af4:	d141      	bne.n	8006b7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3314      	adds	r3, #20
 8006afc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3314      	adds	r3, #20
 8006b1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1d9      	bne.n	8006af6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d013      	beq.n	8006b72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4e:	4a7d      	ldr	r2, [pc, #500]	; (8006d44 <HAL_UART_IRQHandler+0x3dc>)
 8006b50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fc fe54 	bl	8003804 <HAL_DMA_Abort_IT>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d016      	beq.n	8006b90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b70:	e00e      	b.n	8006b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f99a 	bl	8006eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b78:	e00a      	b.n	8006b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f996 	bl	8006eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b80:	e006      	b.n	8006b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f992 	bl	8006eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b8e:	e170      	b.n	8006e72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b90:	bf00      	nop
    return;
 8006b92:	e16e      	b.n	8006e72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	f040 814a 	bne.w	8006e32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba2:	f003 0310 	and.w	r3, r3, #16
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 8143 	beq.w	8006e32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bb0:	f003 0310 	and.w	r3, r3, #16
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 813c 	beq.w	8006e32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	60bb      	str	r3, [r7, #8]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	60bb      	str	r3, [r7, #8]
 8006bce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bda:	2b40      	cmp	r3, #64	; 0x40
 8006bdc:	f040 80b4 	bne.w	8006d48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 8140 	beq.w	8006e76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	f080 8139 	bcs.w	8006e76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c16:	f000 8088 	beq.w	8006d2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	330c      	adds	r3, #12
 8006c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	330c      	adds	r3, #12
 8006c42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1d9      	bne.n	8006c1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3314      	adds	r3, #20
 8006c6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c78:	f023 0301 	bic.w	r3, r3, #1
 8006c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3314      	adds	r3, #20
 8006c86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c96:	e841 2300 	strex	r3, r2, [r1]
 8006c9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e1      	bne.n	8006c66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3314      	adds	r3, #20
 8006ca8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3314      	adds	r3, #20
 8006cc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006cc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ccc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e3      	bne.n	8006ca2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	330c      	adds	r3, #12
 8006cee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cfa:	f023 0310 	bic.w	r3, r3, #16
 8006cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	330c      	adds	r3, #12
 8006d08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e3      	bne.n	8006ce8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fc fcfd 	bl	8003724 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f8c0 	bl	8006ec0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d40:	e099      	b.n	8006e76 <HAL_UART_IRQHandler+0x50e>
 8006d42:	bf00      	nop
 8006d44:	08007291 	.word	0x08007291
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 808b 	beq.w	8006e7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006d64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 8086 	beq.w	8006e7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	330c      	adds	r3, #12
 8006d74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	330c      	adds	r3, #12
 8006d8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d92:	647a      	str	r2, [r7, #68]	; 0x44
 8006d94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1e3      	bne.n	8006d6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3314      	adds	r3, #20
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	e853 3f00 	ldrex	r3, [r3]
 8006db4:	623b      	str	r3, [r7, #32]
   return(result);
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	f023 0301 	bic.w	r3, r3, #1
 8006dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3314      	adds	r3, #20
 8006dc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006dca:	633a      	str	r2, [r7, #48]	; 0x30
 8006dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e3      	bne.n	8006da6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	330c      	adds	r3, #12
 8006df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0310 	bic.w	r3, r3, #16
 8006e02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	330c      	adds	r3, #12
 8006e0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006e10:	61fa      	str	r2, [r7, #28]
 8006e12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	69b9      	ldr	r1, [r7, #24]
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e3      	bne.n	8006dec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f848 	bl	8006ec0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e30:	e023      	b.n	8006e7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d009      	beq.n	8006e52 <HAL_UART_IRQHandler+0x4ea>
 8006e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fa34 	bl	80072b8 <UART_Transmit_IT>
    return;
 8006e50:	e014      	b.n	8006e7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00e      	beq.n	8006e7c <HAL_UART_IRQHandler+0x514>
 8006e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d008      	beq.n	8006e7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa74 	bl	8007358 <UART_EndTransmit_IT>
    return;
 8006e70:	e004      	b.n	8006e7c <HAL_UART_IRQHandler+0x514>
    return;
 8006e72:	bf00      	nop
 8006e74:	e002      	b.n	8006e7c <HAL_UART_IRQHandler+0x514>
      return;
 8006e76:	bf00      	nop
 8006e78:	e000      	b.n	8006e7c <HAL_UART_IRQHandler+0x514>
      return;
 8006e7a:	bf00      	nop
  }
}
 8006e7c:	37e8      	adds	r7, #232	; 0xe8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop

08006e84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b090      	sub	sp, #64	; 0x40
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d137      	bne.n	8006f64 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3314      	adds	r3, #20
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	623b      	str	r3, [r7, #32]
   return(result);
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f10:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3314      	adds	r3, #20
 8006f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f1a:	633a      	str	r2, [r7, #48]	; 0x30
 8006f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e5      	bne.n	8006efa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	330c      	adds	r3, #12
 8006f34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f44:	637b      	str	r3, [r7, #52]	; 0x34
 8006f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	330c      	adds	r3, #12
 8006f4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f4e:	61fa      	str	r2, [r7, #28]
 8006f50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	69b9      	ldr	r1, [r7, #24]
 8006f54:	69fa      	ldr	r2, [r7, #28]
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	617b      	str	r3, [r7, #20]
   return(result);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e5      	bne.n	8006f2e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f62:	e002      	b.n	8006f6a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006f64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006f66:	f7ff ff8d 	bl	8006e84 <HAL_UART_TxCpltCallback>
}
 8006f6a:	bf00      	nop
 8006f6c:	3740      	adds	r7, #64	; 0x40
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f7ff ff89 	bl	8006e98 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f86:	bf00      	nop
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006faa:	2b80      	cmp	r3, #128	; 0x80
 8006fac:	bf0c      	ite	eq
 8006fae:	2301      	moveq	r3, #1
 8006fb0:	2300      	movne	r3, #0
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b21      	cmp	r3, #33	; 0x21
 8006fc0:	d108      	bne.n	8006fd4 <UART_DMAError+0x46>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006fce:	68b8      	ldr	r0, [r7, #8]
 8006fd0:	f000 f8d3 	bl	800717a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fde:	2b40      	cmp	r3, #64	; 0x40
 8006fe0:	bf0c      	ite	eq
 8006fe2:	2301      	moveq	r3, #1
 8006fe4:	2300      	movne	r3, #0
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b22      	cmp	r3, #34	; 0x22
 8006ff4:	d108      	bne.n	8007008 <UART_DMAError+0x7a>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d005      	beq.n	8007008 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2200      	movs	r2, #0
 8007000:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007002:	68b8      	ldr	r0, [r7, #8]
 8007004:	f000 f8e1 	bl	80071ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	f043 0210 	orr.w	r2, r3, #16
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007014:	68b8      	ldr	r0, [r7, #8]
 8007016:	f7ff ff49 	bl	8006eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800701a:	bf00      	nop
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b090      	sub	sp, #64	; 0x40
 8007026:	af00      	add	r7, sp, #0
 8007028:	60f8      	str	r0, [r7, #12]
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	603b      	str	r3, [r7, #0]
 800702e:	4613      	mov	r3, r2
 8007030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007032:	e050      	b.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703a:	d04c      	beq.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800703c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800703e:	2b00      	cmp	r3, #0
 8007040:	d007      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0x30>
 8007042:	f7fb fae3 	bl	800260c <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800704e:	429a      	cmp	r2, r3
 8007050:	d241      	bcs.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	330c      	adds	r3, #12
 8007058:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	330c      	adds	r3, #12
 8007070:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007072:	637a      	str	r2, [r7, #52]	; 0x34
 8007074:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e5      	bne.n	8007052 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3314      	adds	r3, #20
 800708c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	613b      	str	r3, [r7, #16]
   return(result);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f023 0301 	bic.w	r3, r3, #1
 800709c:	63bb      	str	r3, [r7, #56]	; 0x38
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3314      	adds	r3, #20
 80070a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070a6:	623a      	str	r2, [r7, #32]
 80070a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	69f9      	ldr	r1, [r7, #28]
 80070ac:	6a3a      	ldr	r2, [r7, #32]
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e5      	bne.n	8007086 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2220      	movs	r2, #32
 80070be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e00f      	b.n	80070f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4013      	ands	r3, r2
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	bf0c      	ite	eq
 80070e6:	2301      	moveq	r3, #1
 80070e8:	2300      	movne	r3, #0
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	461a      	mov	r2, r3
 80070ee:	79fb      	ldrb	r3, [r7, #7]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d09f      	beq.n	8007034 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3740      	adds	r7, #64	; 0x40
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070fe:	b480      	push	{r7}
 8007100:	b085      	sub	sp, #20
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	4613      	mov	r3, r2
 800710a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	88fa      	ldrh	r2, [r7, #6]
 8007116:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	88fa      	ldrh	r2, [r7, #6]
 800711c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2222      	movs	r2, #34	; 0x22
 8007128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d007      	beq.n	800714c <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800714a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695a      	ldr	r2, [r3, #20]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0201 	orr.w	r2, r2, #1
 800715a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0220 	orr.w	r2, r2, #32
 800716a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800717a:	b480      	push	{r7}
 800717c:	b089      	sub	sp, #36	; 0x24
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	330c      	adds	r3, #12
 8007188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	e853 3f00 	ldrex	r3, [r3]
 8007190:	60bb      	str	r3, [r7, #8]
   return(result);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007198:	61fb      	str	r3, [r7, #28]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	330c      	adds	r3, #12
 80071a0:	69fa      	ldr	r2, [r7, #28]
 80071a2:	61ba      	str	r2, [r7, #24]
 80071a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a6:	6979      	ldr	r1, [r7, #20]
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	613b      	str	r3, [r7, #16]
   return(result);
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e5      	bne.n	8007182 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2220      	movs	r2, #32
 80071ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80071be:	bf00      	nop
 80071c0:	3724      	adds	r7, #36	; 0x24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b095      	sub	sp, #84	; 0x54
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	330c      	adds	r3, #12
 80071d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	330c      	adds	r3, #12
 80071f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071f2:	643a      	str	r2, [r7, #64]	; 0x40
 80071f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071fa:	e841 2300 	strex	r3, r2, [r1]
 80071fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1e5      	bne.n	80071d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3314      	adds	r3, #20
 800720c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	61fb      	str	r3, [r7, #28]
   return(result);
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	f023 0301 	bic.w	r3, r3, #1
 800721c:	64bb      	str	r3, [r7, #72]	; 0x48
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3314      	adds	r3, #20
 8007224:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007228:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800722c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e5      	bne.n	8007206 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	2b01      	cmp	r3, #1
 8007240:	d119      	bne.n	8007276 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	330c      	adds	r3, #12
 8007248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	60bb      	str	r3, [r7, #8]
   return(result);
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f023 0310 	bic.w	r3, r3, #16
 8007258:	647b      	str	r3, [r7, #68]	; 0x44
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	330c      	adds	r3, #12
 8007260:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007262:	61ba      	str	r2, [r7, #24]
 8007264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	6979      	ldr	r1, [r7, #20]
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	613b      	str	r3, [r7, #16]
   return(result);
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e5      	bne.n	8007242 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2220      	movs	r2, #32
 800727a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007284:	bf00      	nop
 8007286:	3754      	adds	r7, #84	; 0x54
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f7ff fdfe 	bl	8006eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072b0:	bf00      	nop
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b21      	cmp	r3, #33	; 0x21
 80072ca:	d13e      	bne.n	800734a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d4:	d114      	bne.n	8007300 <UART_Transmit_IT+0x48>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d110      	bne.n	8007300 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	1c9a      	adds	r2, r3, #2
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	621a      	str	r2, [r3, #32]
 80072fe:	e008      	b.n	8007312 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	1c59      	adds	r1, r3, #1
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	6211      	str	r1, [r2, #32]
 800730a:	781a      	ldrb	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007316:	b29b      	uxth	r3, r3
 8007318:	3b01      	subs	r3, #1
 800731a:	b29b      	uxth	r3, r3
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	4619      	mov	r1, r3
 8007320:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10f      	bne.n	8007346 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007334:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68da      	ldr	r2, [r3, #12]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007344:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	e000      	b.n	800734c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800734a:	2302      	movs	r3, #2
  }
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800736e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2220      	movs	r2, #32
 8007374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7ff fd83 	bl	8006e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08c      	sub	sp, #48	; 0x30
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b22      	cmp	r3, #34	; 0x22
 800739a:	f040 80ab 	bne.w	80074f4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a6:	d117      	bne.n	80073d8 <UART_Receive_IT+0x50>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d113      	bne.n	80073d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d0:	1c9a      	adds	r2, r3, #2
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	629a      	str	r2, [r3, #40]	; 0x28
 80073d6:	e026      	b.n	8007426 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80073de:	2300      	movs	r3, #0
 80073e0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ea:	d007      	beq.n	80073fc <UART_Receive_IT+0x74>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10a      	bne.n	800740a <UART_Receive_IT+0x82>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d106      	bne.n	800740a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	b2da      	uxtb	r2, r3
 8007404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	e008      	b.n	800741c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007416:	b2da      	uxtb	r2, r3
 8007418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800742a:	b29b      	uxth	r3, r3
 800742c:	3b01      	subs	r3, #1
 800742e:	b29b      	uxth	r3, r3
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	4619      	mov	r1, r3
 8007434:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007436:	2b00      	cmp	r3, #0
 8007438:	d15a      	bne.n	80074f0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0220 	bic.w	r2, r2, #32
 8007448:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68da      	ldr	r2, [r3, #12]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007458:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	695a      	ldr	r2, [r3, #20]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0201 	bic.w	r2, r2, #1
 8007468:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2220      	movs	r2, #32
 800746e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007476:	2b01      	cmp	r3, #1
 8007478:	d135      	bne.n	80074e6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	330c      	adds	r3, #12
 8007486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	613b      	str	r3, [r7, #16]
   return(result);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f023 0310 	bic.w	r3, r3, #16
 8007496:	627b      	str	r3, [r7, #36]	; 0x24
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	330c      	adds	r3, #12
 800749e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a0:	623a      	str	r2, [r7, #32]
 80074a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	69f9      	ldr	r1, [r7, #28]
 80074a6:	6a3a      	ldr	r2, [r7, #32]
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e5      	bne.n	8007480 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0310 	and.w	r3, r3, #16
 80074be:	2b10      	cmp	r3, #16
 80074c0:	d10a      	bne.n	80074d8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	60fb      	str	r3, [r7, #12]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff fcee 	bl	8006ec0 <HAL_UARTEx_RxEventCallback>
 80074e4:	e002      	b.n	80074ec <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7fa f9ac 	bl	8001844 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	e002      	b.n	80074f6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	e000      	b.n	80074f6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80074f4:	2302      	movs	r3, #2
  }
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3730      	adds	r7, #48	; 0x30
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007504:	b0c0      	sub	sp, #256	; 0x100
 8007506:	af00      	add	r7, sp, #0
 8007508:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751c:	68d9      	ldr	r1, [r3, #12]
 800751e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	ea40 0301 	orr.w	r3, r0, r1
 8007528:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800752a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	431a      	orrs	r2, r3
 8007538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	431a      	orrs	r2, r3
 8007540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800754c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007558:	f021 010c 	bic.w	r1, r1, #12
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007566:	430b      	orrs	r3, r1
 8007568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800756a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800757a:	6999      	ldr	r1, [r3, #24]
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	ea40 0301 	orr.w	r3, r0, r1
 8007586:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	4b8f      	ldr	r3, [pc, #572]	; (80077cc <UART_SetConfig+0x2cc>)
 8007590:	429a      	cmp	r2, r3
 8007592:	d005      	beq.n	80075a0 <UART_SetConfig+0xa0>
 8007594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	4b8d      	ldr	r3, [pc, #564]	; (80077d0 <UART_SetConfig+0x2d0>)
 800759c:	429a      	cmp	r2, r3
 800759e:	d104      	bne.n	80075aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075a0:	f7fd f9e8 	bl	8004974 <HAL_RCC_GetPCLK2Freq>
 80075a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80075a8:	e003      	b.n	80075b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075aa:	f7fd f9cf 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 80075ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075bc:	f040 810c 	bne.w	80077d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075c4:	2200      	movs	r2, #0
 80075c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80075ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80075d2:	4622      	mov	r2, r4
 80075d4:	462b      	mov	r3, r5
 80075d6:	1891      	adds	r1, r2, r2
 80075d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80075da:	415b      	adcs	r3, r3
 80075dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80075e2:	4621      	mov	r1, r4
 80075e4:	eb12 0801 	adds.w	r8, r2, r1
 80075e8:	4629      	mov	r1, r5
 80075ea:	eb43 0901 	adc.w	r9, r3, r1
 80075ee:	f04f 0200 	mov.w	r2, #0
 80075f2:	f04f 0300 	mov.w	r3, #0
 80075f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007602:	4690      	mov	r8, r2
 8007604:	4699      	mov	r9, r3
 8007606:	4623      	mov	r3, r4
 8007608:	eb18 0303 	adds.w	r3, r8, r3
 800760c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007610:	462b      	mov	r3, r5
 8007612:	eb49 0303 	adc.w	r3, r9, r3
 8007616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800761a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007626:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800762a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800762e:	460b      	mov	r3, r1
 8007630:	18db      	adds	r3, r3, r3
 8007632:	653b      	str	r3, [r7, #80]	; 0x50
 8007634:	4613      	mov	r3, r2
 8007636:	eb42 0303 	adc.w	r3, r2, r3
 800763a:	657b      	str	r3, [r7, #84]	; 0x54
 800763c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007640:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007644:	f7f8 fe14 	bl	8000270 <__aeabi_uldivmod>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4b61      	ldr	r3, [pc, #388]	; (80077d4 <UART_SetConfig+0x2d4>)
 800764e:	fba3 2302 	umull	r2, r3, r3, r2
 8007652:	095b      	lsrs	r3, r3, #5
 8007654:	011c      	lsls	r4, r3, #4
 8007656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800765a:	2200      	movs	r2, #0
 800765c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007660:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007664:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007668:	4642      	mov	r2, r8
 800766a:	464b      	mov	r3, r9
 800766c:	1891      	adds	r1, r2, r2
 800766e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007670:	415b      	adcs	r3, r3
 8007672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007674:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007678:	4641      	mov	r1, r8
 800767a:	eb12 0a01 	adds.w	sl, r2, r1
 800767e:	4649      	mov	r1, r9
 8007680:	eb43 0b01 	adc.w	fp, r3, r1
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007690:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007698:	4692      	mov	sl, r2
 800769a:	469b      	mov	fp, r3
 800769c:	4643      	mov	r3, r8
 800769e:	eb1a 0303 	adds.w	r3, sl, r3
 80076a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076a6:	464b      	mov	r3, r9
 80076a8:	eb4b 0303 	adc.w	r3, fp, r3
 80076ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80076b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80076c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80076c4:	460b      	mov	r3, r1
 80076c6:	18db      	adds	r3, r3, r3
 80076c8:	643b      	str	r3, [r7, #64]	; 0x40
 80076ca:	4613      	mov	r3, r2
 80076cc:	eb42 0303 	adc.w	r3, r2, r3
 80076d0:	647b      	str	r3, [r7, #68]	; 0x44
 80076d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076da:	f7f8 fdc9 	bl	8000270 <__aeabi_uldivmod>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4611      	mov	r1, r2
 80076e4:	4b3b      	ldr	r3, [pc, #236]	; (80077d4 <UART_SetConfig+0x2d4>)
 80076e6:	fba3 2301 	umull	r2, r3, r3, r1
 80076ea:	095b      	lsrs	r3, r3, #5
 80076ec:	2264      	movs	r2, #100	; 0x64
 80076ee:	fb02 f303 	mul.w	r3, r2, r3
 80076f2:	1acb      	subs	r3, r1, r3
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80076fa:	4b36      	ldr	r3, [pc, #216]	; (80077d4 <UART_SetConfig+0x2d4>)
 80076fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007700:	095b      	lsrs	r3, r3, #5
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007708:	441c      	add	r4, r3
 800770a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800770e:	2200      	movs	r2, #0
 8007710:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007714:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007718:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800771c:	4642      	mov	r2, r8
 800771e:	464b      	mov	r3, r9
 8007720:	1891      	adds	r1, r2, r2
 8007722:	63b9      	str	r1, [r7, #56]	; 0x38
 8007724:	415b      	adcs	r3, r3
 8007726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007728:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800772c:	4641      	mov	r1, r8
 800772e:	1851      	adds	r1, r2, r1
 8007730:	6339      	str	r1, [r7, #48]	; 0x30
 8007732:	4649      	mov	r1, r9
 8007734:	414b      	adcs	r3, r1
 8007736:	637b      	str	r3, [r7, #52]	; 0x34
 8007738:	f04f 0200 	mov.w	r2, #0
 800773c:	f04f 0300 	mov.w	r3, #0
 8007740:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007744:	4659      	mov	r1, fp
 8007746:	00cb      	lsls	r3, r1, #3
 8007748:	4651      	mov	r1, sl
 800774a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800774e:	4651      	mov	r1, sl
 8007750:	00ca      	lsls	r2, r1, #3
 8007752:	4610      	mov	r0, r2
 8007754:	4619      	mov	r1, r3
 8007756:	4603      	mov	r3, r0
 8007758:	4642      	mov	r2, r8
 800775a:	189b      	adds	r3, r3, r2
 800775c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007760:	464b      	mov	r3, r9
 8007762:	460a      	mov	r2, r1
 8007764:	eb42 0303 	adc.w	r3, r2, r3
 8007768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800776c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007778:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800777c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007780:	460b      	mov	r3, r1
 8007782:	18db      	adds	r3, r3, r3
 8007784:	62bb      	str	r3, [r7, #40]	; 0x28
 8007786:	4613      	mov	r3, r2
 8007788:	eb42 0303 	adc.w	r3, r2, r3
 800778c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800778e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007792:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007796:	f7f8 fd6b 	bl	8000270 <__aeabi_uldivmod>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <UART_SetConfig+0x2d4>)
 80077a0:	fba3 1302 	umull	r1, r3, r3, r2
 80077a4:	095b      	lsrs	r3, r3, #5
 80077a6:	2164      	movs	r1, #100	; 0x64
 80077a8:	fb01 f303 	mul.w	r3, r1, r3
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	00db      	lsls	r3, r3, #3
 80077b0:	3332      	adds	r3, #50	; 0x32
 80077b2:	4a08      	ldr	r2, [pc, #32]	; (80077d4 <UART_SetConfig+0x2d4>)
 80077b4:	fba2 2303 	umull	r2, r3, r2, r3
 80077b8:	095b      	lsrs	r3, r3, #5
 80077ba:	f003 0207 	and.w	r2, r3, #7
 80077be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4422      	add	r2, r4
 80077c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077c8:	e105      	b.n	80079d6 <UART_SetConfig+0x4d6>
 80077ca:	bf00      	nop
 80077cc:	40011000 	.word	0x40011000
 80077d0:	40011400 	.word	0x40011400
 80077d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077dc:	2200      	movs	r2, #0
 80077de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80077e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80077ea:	4642      	mov	r2, r8
 80077ec:	464b      	mov	r3, r9
 80077ee:	1891      	adds	r1, r2, r2
 80077f0:	6239      	str	r1, [r7, #32]
 80077f2:	415b      	adcs	r3, r3
 80077f4:	627b      	str	r3, [r7, #36]	; 0x24
 80077f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077fa:	4641      	mov	r1, r8
 80077fc:	1854      	adds	r4, r2, r1
 80077fe:	4649      	mov	r1, r9
 8007800:	eb43 0501 	adc.w	r5, r3, r1
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	f04f 0300 	mov.w	r3, #0
 800780c:	00eb      	lsls	r3, r5, #3
 800780e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007812:	00e2      	lsls	r2, r4, #3
 8007814:	4614      	mov	r4, r2
 8007816:	461d      	mov	r5, r3
 8007818:	4643      	mov	r3, r8
 800781a:	18e3      	adds	r3, r4, r3
 800781c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007820:	464b      	mov	r3, r9
 8007822:	eb45 0303 	adc.w	r3, r5, r3
 8007826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800782a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007836:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800783a:	f04f 0200 	mov.w	r2, #0
 800783e:	f04f 0300 	mov.w	r3, #0
 8007842:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007846:	4629      	mov	r1, r5
 8007848:	008b      	lsls	r3, r1, #2
 800784a:	4621      	mov	r1, r4
 800784c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007850:	4621      	mov	r1, r4
 8007852:	008a      	lsls	r2, r1, #2
 8007854:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007858:	f7f8 fd0a 	bl	8000270 <__aeabi_uldivmod>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4b60      	ldr	r3, [pc, #384]	; (80079e4 <UART_SetConfig+0x4e4>)
 8007862:	fba3 2302 	umull	r2, r3, r3, r2
 8007866:	095b      	lsrs	r3, r3, #5
 8007868:	011c      	lsls	r4, r3, #4
 800786a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800786e:	2200      	movs	r2, #0
 8007870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007874:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007878:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800787c:	4642      	mov	r2, r8
 800787e:	464b      	mov	r3, r9
 8007880:	1891      	adds	r1, r2, r2
 8007882:	61b9      	str	r1, [r7, #24]
 8007884:	415b      	adcs	r3, r3
 8007886:	61fb      	str	r3, [r7, #28]
 8007888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800788c:	4641      	mov	r1, r8
 800788e:	1851      	adds	r1, r2, r1
 8007890:	6139      	str	r1, [r7, #16]
 8007892:	4649      	mov	r1, r9
 8007894:	414b      	adcs	r3, r1
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078a4:	4659      	mov	r1, fp
 80078a6:	00cb      	lsls	r3, r1, #3
 80078a8:	4651      	mov	r1, sl
 80078aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078ae:	4651      	mov	r1, sl
 80078b0:	00ca      	lsls	r2, r1, #3
 80078b2:	4610      	mov	r0, r2
 80078b4:	4619      	mov	r1, r3
 80078b6:	4603      	mov	r3, r0
 80078b8:	4642      	mov	r2, r8
 80078ba:	189b      	adds	r3, r3, r2
 80078bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078c0:	464b      	mov	r3, r9
 80078c2:	460a      	mov	r2, r1
 80078c4:	eb42 0303 	adc.w	r3, r2, r3
 80078c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80078d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078d8:	f04f 0200 	mov.w	r2, #0
 80078dc:	f04f 0300 	mov.w	r3, #0
 80078e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80078e4:	4649      	mov	r1, r9
 80078e6:	008b      	lsls	r3, r1, #2
 80078e8:	4641      	mov	r1, r8
 80078ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078ee:	4641      	mov	r1, r8
 80078f0:	008a      	lsls	r2, r1, #2
 80078f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80078f6:	f7f8 fcbb 	bl	8000270 <__aeabi_uldivmod>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4b39      	ldr	r3, [pc, #228]	; (80079e4 <UART_SetConfig+0x4e4>)
 8007900:	fba3 1302 	umull	r1, r3, r3, r2
 8007904:	095b      	lsrs	r3, r3, #5
 8007906:	2164      	movs	r1, #100	; 0x64
 8007908:	fb01 f303 	mul.w	r3, r1, r3
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	011b      	lsls	r3, r3, #4
 8007910:	3332      	adds	r3, #50	; 0x32
 8007912:	4a34      	ldr	r2, [pc, #208]	; (80079e4 <UART_SetConfig+0x4e4>)
 8007914:	fba2 2303 	umull	r2, r3, r2, r3
 8007918:	095b      	lsrs	r3, r3, #5
 800791a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800791e:	441c      	add	r4, r3
 8007920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007924:	2200      	movs	r2, #0
 8007926:	673b      	str	r3, [r7, #112]	; 0x70
 8007928:	677a      	str	r2, [r7, #116]	; 0x74
 800792a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800792e:	4642      	mov	r2, r8
 8007930:	464b      	mov	r3, r9
 8007932:	1891      	adds	r1, r2, r2
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	415b      	adcs	r3, r3
 8007938:	60fb      	str	r3, [r7, #12]
 800793a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800793e:	4641      	mov	r1, r8
 8007940:	1851      	adds	r1, r2, r1
 8007942:	6039      	str	r1, [r7, #0]
 8007944:	4649      	mov	r1, r9
 8007946:	414b      	adcs	r3, r1
 8007948:	607b      	str	r3, [r7, #4]
 800794a:	f04f 0200 	mov.w	r2, #0
 800794e:	f04f 0300 	mov.w	r3, #0
 8007952:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007956:	4659      	mov	r1, fp
 8007958:	00cb      	lsls	r3, r1, #3
 800795a:	4651      	mov	r1, sl
 800795c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007960:	4651      	mov	r1, sl
 8007962:	00ca      	lsls	r2, r1, #3
 8007964:	4610      	mov	r0, r2
 8007966:	4619      	mov	r1, r3
 8007968:	4603      	mov	r3, r0
 800796a:	4642      	mov	r2, r8
 800796c:	189b      	adds	r3, r3, r2
 800796e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007970:	464b      	mov	r3, r9
 8007972:	460a      	mov	r2, r1
 8007974:	eb42 0303 	adc.w	r3, r2, r3
 8007978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800797a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	663b      	str	r3, [r7, #96]	; 0x60
 8007984:	667a      	str	r2, [r7, #100]	; 0x64
 8007986:	f04f 0200 	mov.w	r2, #0
 800798a:	f04f 0300 	mov.w	r3, #0
 800798e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007992:	4649      	mov	r1, r9
 8007994:	008b      	lsls	r3, r1, #2
 8007996:	4641      	mov	r1, r8
 8007998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800799c:	4641      	mov	r1, r8
 800799e:	008a      	lsls	r2, r1, #2
 80079a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80079a4:	f7f8 fc64 	bl	8000270 <__aeabi_uldivmod>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4b0d      	ldr	r3, [pc, #52]	; (80079e4 <UART_SetConfig+0x4e4>)
 80079ae:	fba3 1302 	umull	r1, r3, r3, r2
 80079b2:	095b      	lsrs	r3, r3, #5
 80079b4:	2164      	movs	r1, #100	; 0x64
 80079b6:	fb01 f303 	mul.w	r3, r1, r3
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	3332      	adds	r3, #50	; 0x32
 80079c0:	4a08      	ldr	r2, [pc, #32]	; (80079e4 <UART_SetConfig+0x4e4>)
 80079c2:	fba2 2303 	umull	r2, r3, r2, r3
 80079c6:	095b      	lsrs	r3, r3, #5
 80079c8:	f003 020f 	and.w	r2, r3, #15
 80079cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4422      	add	r2, r4
 80079d4:	609a      	str	r2, [r3, #8]
}
 80079d6:	bf00      	nop
 80079d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80079dc:	46bd      	mov	sp, r7
 80079de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079e2:	bf00      	nop
 80079e4:	51eb851f 	.word	0x51eb851f

080079e8 <__NVIC_SetPriority>:
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	4603      	mov	r3, r0
 80079f0:	6039      	str	r1, [r7, #0]
 80079f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	db0a      	blt.n	8007a12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	b2da      	uxtb	r2, r3
 8007a00:	490c      	ldr	r1, [pc, #48]	; (8007a34 <__NVIC_SetPriority+0x4c>)
 8007a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a06:	0112      	lsls	r2, r2, #4
 8007a08:	b2d2      	uxtb	r2, r2
 8007a0a:	440b      	add	r3, r1
 8007a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007a10:	e00a      	b.n	8007a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	4908      	ldr	r1, [pc, #32]	; (8007a38 <__NVIC_SetPriority+0x50>)
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	f003 030f 	and.w	r3, r3, #15
 8007a1e:	3b04      	subs	r3, #4
 8007a20:	0112      	lsls	r2, r2, #4
 8007a22:	b2d2      	uxtb	r2, r2
 8007a24:	440b      	add	r3, r1
 8007a26:	761a      	strb	r2, [r3, #24]
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr
 8007a34:	e000e100 	.word	0xe000e100
 8007a38:	e000ed00 	.word	0xe000ed00

08007a3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007a40:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <SysTick_Handler+0x1c>)
 8007a42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007a44:	f002 f844 	bl	8009ad0 <xTaskGetSchedulerState>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d001      	beq.n	8007a52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007a4e:	f003 f82b 	bl	800aaa8 <xPortSysTickHandler>
  }
}
 8007a52:	bf00      	nop
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	e000e010 	.word	0xe000e010

08007a5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007a60:	2100      	movs	r1, #0
 8007a62:	f06f 0004 	mvn.w	r0, #4
 8007a66:	f7ff ffbf 	bl	80079e8 <__NVIC_SetPriority>
#endif
}
 8007a6a:	bf00      	nop
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a76:	f3ef 8305 	mrs	r3, IPSR
 8007a7a:	603b      	str	r3, [r7, #0]
  return(result);
 8007a7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007a82:	f06f 0305 	mvn.w	r3, #5
 8007a86:	607b      	str	r3, [r7, #4]
 8007a88:	e00c      	b.n	8007aa4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007a8a:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <osKernelInitialize+0x44>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d105      	bne.n	8007a9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007a92:	4b08      	ldr	r3, [pc, #32]	; (8007ab4 <osKernelInitialize+0x44>)
 8007a94:	2201      	movs	r2, #1
 8007a96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	607b      	str	r3, [r7, #4]
 8007a9c:	e002      	b.n	8007aa4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007aa4:	687b      	ldr	r3, [r7, #4]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	200008f4 	.word	0x200008f4

08007ab8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007abe:	f3ef 8305 	mrs	r3, IPSR
 8007ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8007ac4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007aca:	f06f 0305 	mvn.w	r3, #5
 8007ace:	607b      	str	r3, [r7, #4]
 8007ad0:	e010      	b.n	8007af4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007ad2:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <osKernelStart+0x48>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d109      	bne.n	8007aee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007ada:	f7ff ffbf 	bl	8007a5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007ade:	4b08      	ldr	r3, [pc, #32]	; (8007b00 <osKernelStart+0x48>)
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ae4:	f001 fb86 	bl	80091f4 <vTaskStartScheduler>
      stat = osOK;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	607b      	str	r3, [r7, #4]
 8007aec:	e002      	b.n	8007af4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007aee:	f04f 33ff 	mov.w	r3, #4294967295
 8007af2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007af4:	687b      	ldr	r3, [r7, #4]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	200008f4 	.word	0x200008f4

08007b04 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b0a:	f3ef 8305 	mrs	r3, IPSR
 8007b0e:	603b      	str	r3, [r7, #0]
  return(result);
 8007b10:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8007b16:	f001 fc99 	bl	800944c <xTaskGetTickCountFromISR>
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	e002      	b.n	8007b24 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8007b1e:	f001 fc85 	bl	800942c <xTaskGetTickCount>
 8007b22:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8007b24:	687b      	ldr	r3, [r7, #4]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b08e      	sub	sp, #56	; 0x38
 8007b32:	af04      	add	r7, sp, #16
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b3e:	f3ef 8305 	mrs	r3, IPSR
 8007b42:	617b      	str	r3, [r7, #20]
  return(result);
 8007b44:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d17e      	bne.n	8007c48 <osThreadNew+0x11a>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d07b      	beq.n	8007c48 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007b50:	2380      	movs	r3, #128	; 0x80
 8007b52:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007b54:	2318      	movs	r3, #24
 8007b56:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b60:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d045      	beq.n	8007bf4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <osThreadNew+0x48>
        name = attr->name;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d008      	beq.n	8007b9c <osThreadNew+0x6e>
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	2b38      	cmp	r3, #56	; 0x38
 8007b8e:	d805      	bhi.n	8007b9c <osThreadNew+0x6e>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <osThreadNew+0x72>
        return (NULL);
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	e054      	b.n	8007c4a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	089b      	lsrs	r3, r3, #2
 8007bae:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00e      	beq.n	8007bd6 <osThreadNew+0xa8>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	2bbb      	cmp	r3, #187	; 0xbb
 8007bbe:	d90a      	bls.n	8007bd6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d006      	beq.n	8007bd6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <osThreadNew+0xa8>
        mem = 1;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	61bb      	str	r3, [r7, #24]
 8007bd4:	e010      	b.n	8007bf8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10c      	bne.n	8007bf8 <osThreadNew+0xca>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d108      	bne.n	8007bf8 <osThreadNew+0xca>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d104      	bne.n	8007bf8 <osThreadNew+0xca>
          mem = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	61bb      	str	r3, [r7, #24]
 8007bf2:	e001      	b.n	8007bf8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d110      	bne.n	8007c20 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c06:	9202      	str	r2, [sp, #8]
 8007c08:	9301      	str	r3, [sp, #4]
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	6a3a      	ldr	r2, [r7, #32]
 8007c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f001 f883 	bl	8008d20 <xTaskCreateStatic>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	613b      	str	r3, [r7, #16]
 8007c1e:	e013      	b.n	8007c48 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d110      	bne.n	8007c48 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	f107 0310 	add.w	r3, r7, #16
 8007c2e:	9301      	str	r3, [sp, #4]
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f001 f8ce 	bl	8008dda <xTaskCreate>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d001      	beq.n	8007c48 <osThreadNew+0x11a>
            hTask = NULL;
 8007c44:	2300      	movs	r3, #0
 8007c46:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007c48:	693b      	ldr	r3, [r7, #16]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3728      	adds	r7, #40	; 0x28
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af02      	add	r7, sp, #8
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d002      	beq.n	8007c6e <osThreadFlagsSet+0x1a>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	da03      	bge.n	8007c76 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8007c6e:	f06f 0303 	mvn.w	r3, #3
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	e035      	b.n	8007ce2 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8007c76:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c7c:	f3ef 8305 	mrs	r3, IPSR
 8007c80:	613b      	str	r3, [r7, #16]
  return(result);
 8007c82:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d01f      	beq.n	8007cc8 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8007c8c:	f107 0308 	add.w	r3, r7, #8
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	2300      	movs	r3, #0
 8007c94:	2201      	movs	r2, #1
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6978      	ldr	r0, [r7, #20]
 8007c9a:	f002 f8c3 	bl	8009e24 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8007c9e:	f107 030c 	add.w	r3, r7, #12
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	9200      	str	r2, [sp, #0]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2100      	movs	r1, #0
 8007caa:	6978      	ldr	r0, [r7, #20]
 8007cac:	f002 f8ba 	bl	8009e24 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d015      	beq.n	8007ce2 <osThreadFlagsSet+0x8e>
 8007cb6:	4b0d      	ldr	r3, [pc, #52]	; (8007cec <osThreadFlagsSet+0x98>)
 8007cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	e00c      	b.n	8007ce2 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8007cc8:	2300      	movs	r3, #0
 8007cca:	2201      	movs	r2, #1
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6978      	ldr	r0, [r7, #20]
 8007cd0:	f001 ffea 	bl	8009ca8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8007cd4:	f107 030c 	add.w	r3, r7, #12
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2100      	movs	r1, #0
 8007cdc:	6978      	ldr	r0, [r7, #20]
 8007cde:	f001 ffe3 	bl	8009ca8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3718      	adds	r7, #24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	e000ed04 	.word	0xe000ed04

08007cf0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08c      	sub	sp, #48	; 0x30
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cfc:	f3ef 8305 	mrs	r3, IPSR
 8007d00:	617b      	str	r3, [r7, #20]
  return(result);
 8007d02:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d003      	beq.n	8007d10 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8007d08:	f06f 0305 	mvn.w	r3, #5
 8007d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d0e:	e06b      	b.n	8007de8 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	da03      	bge.n	8007d1e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8007d16:	f06f 0303 	mvn.w	r3, #3
 8007d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d1c:	e064      	b.n	8007de8 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f003 0302 	and.w	r3, r3, #2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <osThreadFlagsWait+0x3e>
      clear = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d2c:	e001      	b.n	8007d32 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8007d3a:	f001 fb77 	bl	800942c <xTaskGetTickCount>
 8007d3e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8007d40:	f107 0210 	add.w	r2, r7, #16
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d48:	2000      	movs	r0, #0
 8007d4a:	f001 ff4d 	bl	8009be8 <xTaskNotifyWait>
 8007d4e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d137      	bne.n	8007dc6 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8007d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d62:	4313      	orrs	r3, r2
 8007d64:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00c      	beq.n	8007d8a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d74:	4013      	ands	r3, r2
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d032      	beq.n	8007de2 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10f      	bne.n	8007da2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8007d82:	f06f 0302 	mvn.w	r3, #2
 8007d86:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8007d88:	e02e      	b.n	8007de8 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	4013      	ands	r3, r2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d128      	bne.n	8007de6 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d103      	bne.n	8007da2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8007d9a:	f06f 0302 	mvn.w	r3, #2
 8007d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8007da0:	e022      	b.n	8007de8 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8007da2:	f001 fb43 	bl	800942c <xTaskGetTickCount>
 8007da6:	4602      	mov	r2, r0
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d902      	bls.n	8007dbc <osThreadFlagsWait+0xcc>
          tout  = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
 8007dba:	e00e      	b.n	8007dda <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8007dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc4:	e009      	b.n	8007dda <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d103      	bne.n	8007dd4 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8007dcc:	f06f 0302 	mvn.w	r3, #2
 8007dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dd2:	e002      	b.n	8007dda <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8007dd4:	f06f 0301 	mvn.w	r3, #1
 8007dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1af      	bne.n	8007d40 <osThreadFlagsWait+0x50>
 8007de0:	e002      	b.n	8007de8 <osThreadFlagsWait+0xf8>
            break;
 8007de2:	bf00      	nop
 8007de4:	e000      	b.n	8007de8 <osThreadFlagsWait+0xf8>
            break;
 8007de6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8007de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3730      	adds	r7, #48	; 0x30
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dfa:	f3ef 8305 	mrs	r3, IPSR
 8007dfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <osDelay+0x1c>
    stat = osErrorISR;
 8007e06:	f06f 0305 	mvn.w	r3, #5
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	e007      	b.n	8007e1e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d002      	beq.n	8007e1e <osDelay+0x2c>
      vTaskDelay(ticks);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f001 f9b7 	bl	800918c <vTaskDelay>
    }
  }

  return (stat);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e30:	f3ef 8305 	mrs	r3, IPSR
 8007e34:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e36:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8007e3c:	f06f 0305 	mvn.w	r3, #5
 8007e40:	617b      	str	r3, [r7, #20]
 8007e42:	e019      	b.n	8007e78 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8007e48:	f001 faf0 	bl	800942c <xTaskGetTickCount>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d009      	beq.n	8007e72 <osDelayUntil+0x4a>
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	db06      	blt.n	8007e72 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8007e64:	f107 0308 	add.w	r3, r7, #8
 8007e68:	6939      	ldr	r1, [r7, #16]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f001 f910 	bl	8009090 <vTaskDelayUntil>
 8007e70:	e002      	b.n	8007e78 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8007e72:	f06f 0303 	mvn.w	r3, #3
 8007e76:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007e78:	697b      	ldr	r3, [r7, #20]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b08a      	sub	sp, #40	; 0x28
 8007e86:	af02      	add	r7, sp, #8
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e92:	f3ef 8305 	mrs	r3, IPSR
 8007e96:	613b      	str	r3, [r7, #16]
  return(result);
 8007e98:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d175      	bne.n	8007f8a <osSemaphoreNew+0x108>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d072      	beq.n	8007f8a <osSemaphoreNew+0x108>
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d86e      	bhi.n	8007f8a <osSemaphoreNew+0x108>
    mem = -1;
 8007eac:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d015      	beq.n	8007ee4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d006      	beq.n	8007ece <osSemaphoreNew+0x4c>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	2b4f      	cmp	r3, #79	; 0x4f
 8007ec6:	d902      	bls.n	8007ece <osSemaphoreNew+0x4c>
        mem = 1;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	61bb      	str	r3, [r7, #24]
 8007ecc:	e00c      	b.n	8007ee8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d108      	bne.n	8007ee8 <osSemaphoreNew+0x66>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d104      	bne.n	8007ee8 <osSemaphoreNew+0x66>
          mem = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	61bb      	str	r3, [r7, #24]
 8007ee2:	e001      	b.n	8007ee8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eee:	d04c      	beq.n	8007f8a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d128      	bne.n	8007f48 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d10a      	bne.n	8007f12 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	2203      	movs	r2, #3
 8007f02:	9200      	str	r2, [sp, #0]
 8007f04:	2200      	movs	r2, #0
 8007f06:	2100      	movs	r1, #0
 8007f08:	2001      	movs	r0, #1
 8007f0a:	f000 f993 	bl	8008234 <xQueueGenericCreateStatic>
 8007f0e:	61f8      	str	r0, [r7, #28]
 8007f10:	e005      	b.n	8007f1e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007f12:	2203      	movs	r2, #3
 8007f14:	2100      	movs	r1, #0
 8007f16:	2001      	movs	r0, #1
 8007f18:	f000 fa04 	bl	8008324 <xQueueGenericCreate>
 8007f1c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d022      	beq.n	8007f6a <osSemaphoreNew+0xe8>
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d01f      	beq.n	8007f6a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2100      	movs	r1, #0
 8007f30:	69f8      	ldr	r0, [r7, #28]
 8007f32:	f000 fabf 	bl	80084b4 <xQueueGenericSend>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d016      	beq.n	8007f6a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007f3c:	69f8      	ldr	r0, [r7, #28]
 8007f3e:	f000 fd33 	bl	80089a8 <vQueueDelete>
            hSemaphore = NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	61fb      	str	r3, [r7, #28]
 8007f46:	e010      	b.n	8007f6a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d108      	bne.n	8007f60 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	461a      	mov	r2, r3
 8007f54:	68b9      	ldr	r1, [r7, #8]
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 fa41 	bl	80083de <xQueueCreateCountingSemaphoreStatic>
 8007f5c:	61f8      	str	r0, [r7, #28]
 8007f5e:	e004      	b.n	8007f6a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007f60:	68b9      	ldr	r1, [r7, #8]
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 fa72 	bl	800844c <xQueueCreateCountingSemaphore>
 8007f68:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00c      	beq.n	8007f8a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <osSemaphoreNew+0xfc>
          name = attr->name;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	617b      	str	r3, [r7, #20]
 8007f7c:	e001      	b.n	8007f82 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007f82:	6979      	ldr	r1, [r7, #20]
 8007f84:	69f8      	ldr	r0, [r7, #28]
 8007f86:	f000 fe43 	bl	8008c10 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007f8a:	69fb      	ldr	r3, [r7, #28]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3720      	adds	r7, #32
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4a07      	ldr	r2, [pc, #28]	; (8007fc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007fa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	4a06      	ldr	r2, [pc, #24]	; (8007fc4 <vApplicationGetIdleTaskMemory+0x30>)
 8007faa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2280      	movs	r2, #128	; 0x80
 8007fb0:	601a      	str	r2, [r3, #0]
}
 8007fb2:	bf00      	nop
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	200008f8 	.word	0x200008f8
 8007fc4:	200009b4 	.word	0x200009b4

08007fc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4a07      	ldr	r2, [pc, #28]	; (8007ff4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007fd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	4a06      	ldr	r2, [pc, #24]	; (8007ff8 <vApplicationGetTimerTaskMemory+0x30>)
 8007fde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fe6:	601a      	str	r2, [r3, #0]
}
 8007fe8:	bf00      	nop
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	20000bb4 	.word	0x20000bb4
 8007ff8:	20000c70 	.word	0x20000c70

08007ffc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f103 0208 	add.w	r2, r3, #8
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f04f 32ff 	mov.w	r2, #4294967295
 8008014:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f103 0208 	add.w	r2, r3, #8
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f103 0208 	add.w	r2, r3, #8
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800804a:	bf00      	nop
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008056:	b480      	push	{r7}
 8008058:	b085      	sub	sp, #20
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689a      	ldr	r2, [r3, #8]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	1c5a      	adds	r2, r3, #1
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	601a      	str	r2, [r3, #0]
}
 8008092:	bf00      	nop
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800809e:	b480      	push	{r7}
 80080a0:	b085      	sub	sp, #20
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b4:	d103      	bne.n	80080be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	e00c      	b.n	80080d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	3308      	adds	r3, #8
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	e002      	b.n	80080cc <vListInsert+0x2e>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d2f6      	bcs.n	80080c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	601a      	str	r2, [r3, #0]
}
 8008104:	bf00      	nop
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	6892      	ldr	r2, [r2, #8]
 8008126:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	6852      	ldr	r2, [r2, #4]
 8008130:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	429a      	cmp	r2, r3
 800813a:	d103      	bne.n	8008144 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	689a      	ldr	r2, [r3, #8]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	1e5a      	subs	r2, r3, #1
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10a      	bne.n	800818e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800818a:	bf00      	nop
 800818c:	e7fe      	b.n	800818c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800818e:	f002 fbf9 	bl	800a984 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819a:	68f9      	ldr	r1, [r7, #12]
 800819c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800819e:	fb01 f303 	mul.w	r3, r1, r3
 80081a2:	441a      	add	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081be:	3b01      	subs	r3, #1
 80081c0:	68f9      	ldr	r1, [r7, #12]
 80081c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081c4:	fb01 f303 	mul.w	r3, r1, r3
 80081c8:	441a      	add	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	22ff      	movs	r2, #255	; 0xff
 80081d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	22ff      	movs	r2, #255	; 0xff
 80081da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d114      	bne.n	800820e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d01a      	beq.n	8008222 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3310      	adds	r3, #16
 80081f0:	4618      	mov	r0, r3
 80081f2:	f001 faab 	bl	800974c <xTaskRemoveFromEventList>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d012      	beq.n	8008222 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80081fc:	4b0c      	ldr	r3, [pc, #48]	; (8008230 <xQueueGenericReset+0xcc>)
 80081fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	e009      	b.n	8008222 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3310      	adds	r3, #16
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff fef2 	bl	8007ffc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	3324      	adds	r3, #36	; 0x24
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff feed 	bl	8007ffc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008222:	f002 fbdf 	bl	800a9e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008226:	2301      	movs	r3, #1
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	e000ed04 	.word	0xe000ed04

08008234 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008234:	b580      	push	{r7, lr}
 8008236:	b08e      	sub	sp, #56	; 0x38
 8008238:	af02      	add	r7, sp, #8
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
 8008240:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800825a:	bf00      	nop
 800825c:	e7fe      	b.n	800825c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10a      	bne.n	800827a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008276:	bf00      	nop
 8008278:	e7fe      	b.n	8008278 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <xQueueGenericCreateStatic+0x52>
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <xQueueGenericCreateStatic+0x56>
 8008286:	2301      	movs	r3, #1
 8008288:	e000      	b.n	800828c <xQueueGenericCreateStatic+0x58>
 800828a:	2300      	movs	r3, #0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10a      	bne.n	80082a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	623b      	str	r3, [r7, #32]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d102      	bne.n	80082b2 <xQueueGenericCreateStatic+0x7e>
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <xQueueGenericCreateStatic+0x82>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e000      	b.n	80082b8 <xQueueGenericCreateStatic+0x84>
 80082b6:	2300      	movs	r3, #0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10a      	bne.n	80082d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	61fb      	str	r3, [r7, #28]
}
 80082ce:	bf00      	nop
 80082d0:	e7fe      	b.n	80082d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082d2:	2350      	movs	r3, #80	; 0x50
 80082d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b50      	cmp	r3, #80	; 0x50
 80082da:	d00a      	beq.n	80082f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80082dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	61bb      	str	r3, [r7, #24]
}
 80082ee:	bf00      	nop
 80082f0:	e7fe      	b.n	80082f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80082f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80082f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00d      	beq.n	800831a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008300:	2201      	movs	r2, #1
 8008302:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008306:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800830a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	4613      	mov	r3, r2
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	68b9      	ldr	r1, [r7, #8]
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f000 f83f 	bl	8008398 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800831a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800831c:	4618      	mov	r0, r3
 800831e:	3730      	adds	r7, #48	; 0x30
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08a      	sub	sp, #40	; 0x28
 8008328:	af02      	add	r7, sp, #8
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	4613      	mov	r3, r2
 8008330:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10a      	bne.n	800834e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	613b      	str	r3, [r7, #16]
}
 800834a:	bf00      	nop
 800834c:	e7fe      	b.n	800834c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	fb02 f303 	mul.w	r3, r2, r3
 8008356:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	3350      	adds	r3, #80	; 0x50
 800835c:	4618      	mov	r0, r3
 800835e:	f002 fc33 	bl	800abc8 <pvPortMalloc>
 8008362:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d011      	beq.n	800838e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	3350      	adds	r3, #80	; 0x50
 8008372:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800837c:	79fa      	ldrb	r2, [r7, #7]
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	4613      	mov	r3, r2
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	68b9      	ldr	r1, [r7, #8]
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 f805 	bl	8008398 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800838e:	69bb      	ldr	r3, [r7, #24]
	}
 8008390:	4618      	mov	r0, r3
 8008392:	3720      	adds	r7, #32
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
 80083a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d103      	bne.n	80083b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	69ba      	ldr	r2, [r7, #24]
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	e002      	b.n	80083ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083c6:	2101      	movs	r1, #1
 80083c8:	69b8      	ldr	r0, [r7, #24]
 80083ca:	f7ff fecb 	bl	8008164 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	78fa      	ldrb	r2, [r7, #3]
 80083d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083d6:	bf00      	nop
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b08a      	sub	sp, #40	; 0x28
 80083e2:	af02      	add	r7, sp, #8
 80083e4:	60f8      	str	r0, [r7, #12]
 80083e6:	60b9      	str	r1, [r7, #8]
 80083e8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	61bb      	str	r3, [r7, #24]
}
 8008402:	bf00      	nop
 8008404:	e7fe      	b.n	8008404 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	429a      	cmp	r2, r3
 800840c:	d90a      	bls.n	8008424 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	617b      	str	r3, [r7, #20]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008424:	2302      	movs	r3, #2
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	2100      	movs	r1, #0
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f7ff ff00 	bl	8008234 <xQueueGenericCreateStatic>
 8008434:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008442:	69fb      	ldr	r3, [r7, #28]
	}
 8008444:	4618      	mov	r0, r3
 8008446:	3720      	adds	r7, #32
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10a      	bne.n	8008472 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	613b      	str	r3, [r7, #16]
}
 800846e:	bf00      	nop
 8008470:	e7fe      	b.n	8008470 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	429a      	cmp	r2, r3
 8008478:	d90a      	bls.n	8008490 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	60fb      	str	r3, [r7, #12]
}
 800848c:	bf00      	nop
 800848e:	e7fe      	b.n	800848e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008490:	2202      	movs	r2, #2
 8008492:	2100      	movs	r1, #0
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7ff ff45 	bl	8008324 <xQueueGenericCreate>
 800849a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80084a8:	697b      	ldr	r3, [r7, #20]
	}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
	...

080084b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08e      	sub	sp, #56	; 0x38
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
 80084c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084c2:	2300      	movs	r3, #0
 80084c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10a      	bne.n	80084e6 <xQueueGenericSend+0x32>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084e2:	bf00      	nop
 80084e4:	e7fe      	b.n	80084e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d103      	bne.n	80084f4 <xQueueGenericSend+0x40>
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <xQueueGenericSend+0x44>
 80084f4:	2301      	movs	r3, #1
 80084f6:	e000      	b.n	80084fa <xQueueGenericSend+0x46>
 80084f8:	2300      	movs	r3, #0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <xQueueGenericSend+0x60>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008510:	bf00      	nop
 8008512:	e7fe      	b.n	8008512 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b02      	cmp	r3, #2
 8008518:	d103      	bne.n	8008522 <xQueueGenericSend+0x6e>
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851e:	2b01      	cmp	r3, #1
 8008520:	d101      	bne.n	8008526 <xQueueGenericSend+0x72>
 8008522:	2301      	movs	r3, #1
 8008524:	e000      	b.n	8008528 <xQueueGenericSend+0x74>
 8008526:	2300      	movs	r3, #0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <xQueueGenericSend+0x8e>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	623b      	str	r3, [r7, #32]
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008542:	f001 fac5 	bl	8009ad0 <xTaskGetSchedulerState>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d102      	bne.n	8008552 <xQueueGenericSend+0x9e>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d101      	bne.n	8008556 <xQueueGenericSend+0xa2>
 8008552:	2301      	movs	r3, #1
 8008554:	e000      	b.n	8008558 <xQueueGenericSend+0xa4>
 8008556:	2300      	movs	r3, #0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10a      	bne.n	8008572 <xQueueGenericSend+0xbe>
	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	61fb      	str	r3, [r7, #28]
}
 800856e:	bf00      	nop
 8008570:	e7fe      	b.n	8008570 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008572:	f002 fa07 	bl	800a984 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857e:	429a      	cmp	r2, r3
 8008580:	d302      	bcc.n	8008588 <xQueueGenericSend+0xd4>
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b02      	cmp	r3, #2
 8008586:	d129      	bne.n	80085dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	68b9      	ldr	r1, [r7, #8]
 800858c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800858e:	f000 fa2e 	bl	80089ee <prvCopyDataToQueue>
 8008592:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	2b00      	cmp	r3, #0
 800859a:	d010      	beq.n	80085be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800859c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859e:	3324      	adds	r3, #36	; 0x24
 80085a0:	4618      	mov	r0, r3
 80085a2:	f001 f8d3 	bl	800974c <xTaskRemoveFromEventList>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d013      	beq.n	80085d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80085ac:	4b3f      	ldr	r3, [pc, #252]	; (80086ac <xQueueGenericSend+0x1f8>)
 80085ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	e00a      	b.n	80085d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80085be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d007      	beq.n	80085d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80085c4:	4b39      	ldr	r3, [pc, #228]	; (80086ac <xQueueGenericSend+0x1f8>)
 80085c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80085d4:	f002 fa06 	bl	800a9e4 <vPortExitCritical>
				return pdPASS;
 80085d8:	2301      	movs	r3, #1
 80085da:	e063      	b.n	80086a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d103      	bne.n	80085ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085e2:	f002 f9ff 	bl	800a9e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80085e6:	2300      	movs	r3, #0
 80085e8:	e05c      	b.n	80086a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d106      	bne.n	80085fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085f0:	f107 0314 	add.w	r3, r7, #20
 80085f4:	4618      	mov	r0, r3
 80085f6:	f001 f90d 	bl	8009814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085fa:	2301      	movs	r3, #1
 80085fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085fe:	f002 f9f1 	bl	800a9e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008602:	f000 fe67 	bl	80092d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008606:	f002 f9bd 	bl	800a984 <vPortEnterCritical>
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008610:	b25b      	sxtb	r3, r3
 8008612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008616:	d103      	bne.n	8008620 <xQueueGenericSend+0x16c>
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	2200      	movs	r2, #0
 800861c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008626:	b25b      	sxtb	r3, r3
 8008628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862c:	d103      	bne.n	8008636 <xQueueGenericSend+0x182>
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008636:	f002 f9d5 	bl	800a9e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800863a:	1d3a      	adds	r2, r7, #4
 800863c:	f107 0314 	add.w	r3, r7, #20
 8008640:	4611      	mov	r1, r2
 8008642:	4618      	mov	r0, r3
 8008644:	f001 f8fc 	bl	8009840 <xTaskCheckForTimeOut>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d124      	bne.n	8008698 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800864e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008650:	f000 fac5 	bl	8008bde <prvIsQueueFull>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d018      	beq.n	800868c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	3310      	adds	r3, #16
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	4611      	mov	r1, r2
 8008662:	4618      	mov	r0, r3
 8008664:	f001 f822 	bl	80096ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800866a:	f000 fa50 	bl	8008b0e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800866e:	f000 fe3f 	bl	80092f0 <xTaskResumeAll>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	f47f af7c 	bne.w	8008572 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800867a:	4b0c      	ldr	r3, [pc, #48]	; (80086ac <xQueueGenericSend+0x1f8>)
 800867c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	e772      	b.n	8008572 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800868c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800868e:	f000 fa3e 	bl	8008b0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008692:	f000 fe2d 	bl	80092f0 <xTaskResumeAll>
 8008696:	e76c      	b.n	8008572 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800869a:	f000 fa38 	bl	8008b0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800869e:	f000 fe27 	bl	80092f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80086a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3738      	adds	r7, #56	; 0x38
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	e000ed04 	.word	0xe000ed04

080086b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b090      	sub	sp, #64	; 0x40
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80086c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10a      	bne.n	80086de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086da:	bf00      	nop
 80086dc:	e7fe      	b.n	80086dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d103      	bne.n	80086ec <xQueueGenericSendFromISR+0x3c>
 80086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <xQueueGenericSendFromISR+0x40>
 80086ec:	2301      	movs	r3, #1
 80086ee:	e000      	b.n	80086f2 <xQueueGenericSendFromISR+0x42>
 80086f0:	2300      	movs	r3, #0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10a      	bne.n	800870c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008708:	bf00      	nop
 800870a:	e7fe      	b.n	800870a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	2b02      	cmp	r3, #2
 8008710:	d103      	bne.n	800871a <xQueueGenericSendFromISR+0x6a>
 8008712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008716:	2b01      	cmp	r3, #1
 8008718:	d101      	bne.n	800871e <xQueueGenericSendFromISR+0x6e>
 800871a:	2301      	movs	r3, #1
 800871c:	e000      	b.n	8008720 <xQueueGenericSendFromISR+0x70>
 800871e:	2300      	movs	r3, #0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10a      	bne.n	800873a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	623b      	str	r3, [r7, #32]
}
 8008736:	bf00      	nop
 8008738:	e7fe      	b.n	8008738 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800873a:	f002 fa05 	bl	800ab48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800873e:	f3ef 8211 	mrs	r2, BASEPRI
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	61fa      	str	r2, [r7, #28]
 8008754:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008756:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008758:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800875e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008762:	429a      	cmp	r2, r3
 8008764:	d302      	bcc.n	800876c <xQueueGenericSendFromISR+0xbc>
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b02      	cmp	r3, #2
 800876a:	d12f      	bne.n	80087cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800876c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	68b9      	ldr	r1, [r7, #8]
 8008780:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008782:	f000 f934 	bl	80089ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008786:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800878a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878e:	d112      	bne.n	80087b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	2b00      	cmp	r3, #0
 8008796:	d016      	beq.n	80087c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	3324      	adds	r3, #36	; 0x24
 800879c:	4618      	mov	r0, r3
 800879e:	f000 ffd5 	bl	800974c <xTaskRemoveFromEventList>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00e      	beq.n	80087c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00b      	beq.n	80087c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	e007      	b.n	80087c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80087b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80087ba:	3301      	adds	r3, #1
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	b25a      	sxtb	r2, r3
 80087c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80087c6:	2301      	movs	r3, #1
 80087c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80087ca:	e001      	b.n	80087d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087cc:	2300      	movs	r3, #0
 80087ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80087da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3740      	adds	r7, #64	; 0x40
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
	...

080087e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b08c      	sub	sp, #48	; 0x30
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80087f4:	2300      	movs	r3, #0
 80087f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80087fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10a      	bne.n	8008818 <xQueueReceive+0x30>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	623b      	str	r3, [r7, #32]
}
 8008814:	bf00      	nop
 8008816:	e7fe      	b.n	8008816 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d103      	bne.n	8008826 <xQueueReceive+0x3e>
 800881e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <xQueueReceive+0x42>
 8008826:	2301      	movs	r3, #1
 8008828:	e000      	b.n	800882c <xQueueReceive+0x44>
 800882a:	2300      	movs	r3, #0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10a      	bne.n	8008846 <xQueueReceive+0x5e>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	61fb      	str	r3, [r7, #28]
}
 8008842:	bf00      	nop
 8008844:	e7fe      	b.n	8008844 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008846:	f001 f943 	bl	8009ad0 <xTaskGetSchedulerState>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d102      	bne.n	8008856 <xQueueReceive+0x6e>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <xQueueReceive+0x72>
 8008856:	2301      	movs	r3, #1
 8008858:	e000      	b.n	800885c <xQueueReceive+0x74>
 800885a:	2300      	movs	r3, #0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10a      	bne.n	8008876 <xQueueReceive+0x8e>
	__asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	61bb      	str	r3, [r7, #24]
}
 8008872:	bf00      	nop
 8008874:	e7fe      	b.n	8008874 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008876:	f002 f885 	bl	800a984 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	2b00      	cmp	r3, #0
 8008884:	d01f      	beq.n	80088c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008886:	68b9      	ldr	r1, [r7, #8]
 8008888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800888a:	f000 f91a 	bl	8008ac2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	1e5a      	subs	r2, r3, #1
 8008892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008894:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00f      	beq.n	80088be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800889e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a0:	3310      	adds	r3, #16
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 ff52 	bl	800974c <xTaskRemoveFromEventList>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d007      	beq.n	80088be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088ae:	4b3d      	ldr	r3, [pc, #244]	; (80089a4 <xQueueReceive+0x1bc>)
 80088b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b4:	601a      	str	r2, [r3, #0]
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088be:	f002 f891 	bl	800a9e4 <vPortExitCritical>
				return pdPASS;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e069      	b.n	800899a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d103      	bne.n	80088d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088cc:	f002 f88a 	bl	800a9e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088d0:	2300      	movs	r3, #0
 80088d2:	e062      	b.n	800899a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d106      	bne.n	80088e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088da:	f107 0310 	add.w	r3, r7, #16
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 ff98 	bl	8009814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088e4:	2301      	movs	r3, #1
 80088e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088e8:	f002 f87c 	bl	800a9e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088ec:	f000 fcf2 	bl	80092d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088f0:	f002 f848 	bl	800a984 <vPortEnterCritical>
 80088f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088fa:	b25b      	sxtb	r3, r3
 80088fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008900:	d103      	bne.n	800890a <xQueueReceive+0x122>
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	2200      	movs	r2, #0
 8008906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008910:	b25b      	sxtb	r3, r3
 8008912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008916:	d103      	bne.n	8008920 <xQueueReceive+0x138>
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008920:	f002 f860 	bl	800a9e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008924:	1d3a      	adds	r2, r7, #4
 8008926:	f107 0310 	add.w	r3, r7, #16
 800892a:	4611      	mov	r1, r2
 800892c:	4618      	mov	r0, r3
 800892e:	f000 ff87 	bl	8009840 <xTaskCheckForTimeOut>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d123      	bne.n	8008980 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800893a:	f000 f93a 	bl	8008bb2 <prvIsQueueEmpty>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d017      	beq.n	8008974 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	3324      	adds	r3, #36	; 0x24
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	4611      	mov	r1, r2
 800894c:	4618      	mov	r0, r3
 800894e:	f000 fead 	bl	80096ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008954:	f000 f8db 	bl	8008b0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008958:	f000 fcca 	bl	80092f0 <xTaskResumeAll>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d189      	bne.n	8008876 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008962:	4b10      	ldr	r3, [pc, #64]	; (80089a4 <xQueueReceive+0x1bc>)
 8008964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	e780      	b.n	8008876 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008976:	f000 f8ca 	bl	8008b0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800897a:	f000 fcb9 	bl	80092f0 <xTaskResumeAll>
 800897e:	e77a      	b.n	8008876 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008982:	f000 f8c4 	bl	8008b0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008986:	f000 fcb3 	bl	80092f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800898a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800898c:	f000 f911 	bl	8008bb2 <prvIsQueueEmpty>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	f43f af6f 	beq.w	8008876 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008998:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800899a:	4618      	mov	r0, r3
 800899c:	3730      	adds	r7, #48	; 0x30
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	e000ed04 	.word	0xe000ed04

080089a8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10a      	bne.n	80089d0 <vQueueDelete+0x28>
	__asm volatile
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	60bb      	str	r3, [r7, #8]
}
 80089cc:	bf00      	nop
 80089ce:	e7fe      	b.n	80089ce <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f000 f947 	bl	8008c64 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d102      	bne.n	80089e6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f002 f9bd 	bl	800ad60 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80089e6:	bf00      	nop
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b086      	sub	sp, #24
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089fa:	2300      	movs	r3, #0
 80089fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a02:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10d      	bne.n	8008a28 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d14d      	bne.n	8008ab0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f001 f877 	bl	8009b0c <xTaskPriorityDisinherit>
 8008a1e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	609a      	str	r2, [r3, #8]
 8008a26:	e043      	b.n	8008ab0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d119      	bne.n	8008a62 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6858      	ldr	r0, [r3, #4]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a36:	461a      	mov	r2, r3
 8008a38:	68b9      	ldr	r1, [r7, #8]
 8008a3a:	f002 fbd2 	bl	800b1e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a46:	441a      	add	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	685a      	ldr	r2, [r3, #4]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d32b      	bcc.n	8008ab0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	605a      	str	r2, [r3, #4]
 8008a60:	e026      	b.n	8008ab0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	68d8      	ldr	r0, [r3, #12]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	68b9      	ldr	r1, [r7, #8]
 8008a6e:	f002 fbb8 	bl	800b1e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7a:	425b      	negs	r3, r3
 8008a7c:	441a      	add	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d207      	bcs.n	8008a9e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a96:	425b      	negs	r3, r3
 8008a98:	441a      	add	r2, r3
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d105      	bne.n	8008ab0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d002      	beq.n	8008ab0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ab8:	697b      	ldr	r3, [r7, #20]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d018      	beq.n	8008b06 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68da      	ldr	r2, [r3, #12]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008adc:	441a      	add	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68da      	ldr	r2, [r3, #12]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d303      	bcc.n	8008af6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68d9      	ldr	r1, [r3, #12]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afe:	461a      	mov	r2, r3
 8008b00:	6838      	ldr	r0, [r7, #0]
 8008b02:	f002 fb6e 	bl	800b1e2 <memcpy>
	}
}
 8008b06:	bf00      	nop
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b16:	f001 ff35 	bl	800a984 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b20:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b22:	e011      	b.n	8008b48 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d012      	beq.n	8008b52 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3324      	adds	r3, #36	; 0x24
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 fe0b 	bl	800974c <xTaskRemoveFromEventList>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b3c:	f000 fee2 	bl	8009904 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
 8008b42:	3b01      	subs	r3, #1
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	dce9      	bgt.n	8008b24 <prvUnlockQueue+0x16>
 8008b50:	e000      	b.n	8008b54 <prvUnlockQueue+0x46>
					break;
 8008b52:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	22ff      	movs	r2, #255	; 0xff
 8008b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b5c:	f001 ff42 	bl	800a9e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b60:	f001 ff10 	bl	800a984 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b6a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b6c:	e011      	b.n	8008b92 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d012      	beq.n	8008b9c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3310      	adds	r3, #16
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fde6 	bl	800974c <xTaskRemoveFromEventList>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d001      	beq.n	8008b8a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b86:	f000 febd 	bl	8009904 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	dce9      	bgt.n	8008b6e <prvUnlockQueue+0x60>
 8008b9a:	e000      	b.n	8008b9e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b9c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	22ff      	movs	r2, #255	; 0xff
 8008ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ba6:	f001 ff1d 	bl	800a9e4 <vPortExitCritical>
}
 8008baa:	bf00      	nop
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bba:	f001 fee3 	bl	800a984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d102      	bne.n	8008bcc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	e001      	b.n	8008bd0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bd0:	f001 ff08 	bl	800a9e4 <vPortExitCritical>

	return xReturn;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008be6:	f001 fecd 	bl	800a984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d102      	bne.n	8008bfc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	60fb      	str	r3, [r7, #12]
 8008bfa:	e001      	b.n	8008c00 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c00:	f001 fef0 	bl	800a9e4 <vPortExitCritical>

	return xReturn;
 8008c04:	68fb      	ldr	r3, [r7, #12]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
	...

08008c10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	e014      	b.n	8008c4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c20:	4a0f      	ldr	r2, [pc, #60]	; (8008c60 <vQueueAddToRegistry+0x50>)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10b      	bne.n	8008c44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c2c:	490c      	ldr	r1, [pc, #48]	; (8008c60 <vQueueAddToRegistry+0x50>)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	683a      	ldr	r2, [r7, #0]
 8008c32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c36:	4a0a      	ldr	r2, [pc, #40]	; (8008c60 <vQueueAddToRegistry+0x50>)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	00db      	lsls	r3, r3, #3
 8008c3c:	4413      	add	r3, r2
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c42:	e006      	b.n	8008c52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	3301      	adds	r3, #1
 8008c48:	60fb      	str	r3, [r7, #12]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2b07      	cmp	r3, #7
 8008c4e:	d9e7      	bls.n	8008c20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c50:	bf00      	nop
 8008c52:	bf00      	nop
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	20001070 	.word	0x20001070

08008c64 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	e016      	b.n	8008ca0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008c72:	4a10      	ldr	r2, [pc, #64]	; (8008cb4 <vQueueUnregisterQueue+0x50>)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	4413      	add	r3, r2
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d10b      	bne.n	8008c9a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008c82:	4a0c      	ldr	r2, [pc, #48]	; (8008cb4 <vQueueUnregisterQueue+0x50>)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2100      	movs	r1, #0
 8008c88:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008c8c:	4a09      	ldr	r2, [pc, #36]	; (8008cb4 <vQueueUnregisterQueue+0x50>)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	4413      	add	r3, r2
 8008c94:	2200      	movs	r2, #0
 8008c96:	605a      	str	r2, [r3, #4]
				break;
 8008c98:	e006      	b.n	8008ca8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2b07      	cmp	r3, #7
 8008ca4:	d9e5      	bls.n	8008c72 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008ca6:	bf00      	nop
 8008ca8:	bf00      	nop
 8008caa:	3714      	adds	r7, #20
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	20001070 	.word	0x20001070

08008cb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008cc8:	f001 fe5c 	bl	800a984 <vPortEnterCritical>
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cd2:	b25b      	sxtb	r3, r3
 8008cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd8:	d103      	bne.n	8008ce2 <vQueueWaitForMessageRestricted+0x2a>
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ce8:	b25b      	sxtb	r3, r3
 8008cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cee:	d103      	bne.n	8008cf8 <vQueueWaitForMessageRestricted+0x40>
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cf8:	f001 fe74 	bl	800a9e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d106      	bne.n	8008d12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	3324      	adds	r3, #36	; 0x24
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	68b9      	ldr	r1, [r7, #8]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 fcf1 	bl	80096f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d12:	6978      	ldr	r0, [r7, #20]
 8008d14:	f7ff fefb 	bl	8008b0e <prvUnlockQueue>
	}
 8008d18:	bf00      	nop
 8008d1a:	3718      	adds	r7, #24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b08e      	sub	sp, #56	; 0x38
 8008d24:	af04      	add	r7, sp, #16
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
 8008d2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10a      	bne.n	8008d4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	623b      	str	r3, [r7, #32]
}
 8008d46:	bf00      	nop
 8008d48:	e7fe      	b.n	8008d48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <xTaskCreateStatic+0x46>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	61fb      	str	r3, [r7, #28]
}
 8008d62:	bf00      	nop
 8008d64:	e7fe      	b.n	8008d64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d66:	23bc      	movs	r3, #188	; 0xbc
 8008d68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	2bbc      	cmp	r3, #188	; 0xbc
 8008d6e:	d00a      	beq.n	8008d86 <xTaskCreateStatic+0x66>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	61bb      	str	r3, [r7, #24]
}
 8008d82:	bf00      	nop
 8008d84:	e7fe      	b.n	8008d84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d01e      	beq.n	8008dcc <xTaskCreateStatic+0xac>
 8008d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01b      	beq.n	8008dcc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	2202      	movs	r2, #2
 8008da2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008da6:	2300      	movs	r3, #0
 8008da8:	9303      	str	r3, [sp, #12]
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	9302      	str	r3, [sp, #8]
 8008dae:	f107 0314 	add.w	r3, r7, #20
 8008db2:	9301      	str	r3, [sp, #4]
 8008db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	68b9      	ldr	r1, [r7, #8]
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 f850 	bl	8008e64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dc6:	f000 f8f3 	bl	8008fb0 <prvAddNewTaskToReadyList>
 8008dca:	e001      	b.n	8008dd0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008dd0:	697b      	ldr	r3, [r7, #20]
	}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3728      	adds	r7, #40	; 0x28
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b08c      	sub	sp, #48	; 0x30
 8008dde:	af04      	add	r7, sp, #16
 8008de0:	60f8      	str	r0, [r7, #12]
 8008de2:	60b9      	str	r1, [r7, #8]
 8008de4:	603b      	str	r3, [r7, #0]
 8008de6:	4613      	mov	r3, r2
 8008de8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008dea:	88fb      	ldrh	r3, [r7, #6]
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4618      	mov	r0, r3
 8008df0:	f001 feea 	bl	800abc8 <pvPortMalloc>
 8008df4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00e      	beq.n	8008e1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008dfc:	20bc      	movs	r0, #188	; 0xbc
 8008dfe:	f001 fee3 	bl	800abc8 <pvPortMalloc>
 8008e02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8008e10:	e005      	b.n	8008e1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e12:	6978      	ldr	r0, [r7, #20]
 8008e14:	f001 ffa4 	bl	800ad60 <vPortFree>
 8008e18:	e001      	b.n	8008e1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d017      	beq.n	8008e54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e2c:	88fa      	ldrh	r2, [r7, #6]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	9303      	str	r3, [sp, #12]
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	9302      	str	r3, [sp, #8]
 8008e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	68b9      	ldr	r1, [r7, #8]
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f000 f80e 	bl	8008e64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e48:	69f8      	ldr	r0, [r7, #28]
 8008e4a:	f000 f8b1 	bl	8008fb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	61bb      	str	r3, [r7, #24]
 8008e52:	e002      	b.n	8008e5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e54:	f04f 33ff 	mov.w	r3, #4294967295
 8008e58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e5a:	69bb      	ldr	r3, [r7, #24]
	}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3720      	adds	r7, #32
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	21a5      	movs	r1, #165	; 0xa5
 8008e7e:	f002 f9be 	bl	800b1fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	f023 0307 	bic.w	r3, r3, #7
 8008e9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	f003 0307 	and.w	r3, r3, #7
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00a      	beq.n	8008ebc <prvInitialiseNewTask+0x58>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	617b      	str	r3, [r7, #20]
}
 8008eb8:	bf00      	nop
 8008eba:	e7fe      	b.n	8008eba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d01f      	beq.n	8008f02 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	61fb      	str	r3, [r7, #28]
 8008ec6:	e012      	b.n	8008eee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	4413      	add	r3, r2
 8008ece:	7819      	ldrb	r1, [r3, #0]
 8008ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	3334      	adds	r3, #52	; 0x34
 8008ed8:	460a      	mov	r2, r1
 8008eda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d006      	beq.n	8008ef6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	3301      	adds	r3, #1
 8008eec:	61fb      	str	r3, [r7, #28]
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	2b0f      	cmp	r3, #15
 8008ef2:	d9e9      	bls.n	8008ec8 <prvInitialiseNewTask+0x64>
 8008ef4:	e000      	b.n	8008ef8 <prvInitialiseNewTask+0x94>
			{
				break;
 8008ef6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f00:	e003      	b.n	8008f0a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	2b37      	cmp	r3, #55	; 0x37
 8008f0e:	d901      	bls.n	8008f14 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f10:	2337      	movs	r3, #55	; 0x37
 8008f12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	2200      	movs	r2, #0
 8008f24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f28:	3304      	adds	r3, #4
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7ff f886 	bl	800803c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f32:	3318      	adds	r3, #24
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7ff f881 	bl	800803c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f52:	2200      	movs	r2, #0
 8008f54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f62:	3354      	adds	r3, #84	; 0x54
 8008f64:	2260      	movs	r2, #96	; 0x60
 8008f66:	2100      	movs	r1, #0
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f002 f948 	bl	800b1fe <memset>
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	4a0c      	ldr	r2, [pc, #48]	; (8008fa4 <prvInitialiseNewTask+0x140>)
 8008f72:	659a      	str	r2, [r3, #88]	; 0x58
 8008f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f76:	4a0c      	ldr	r2, [pc, #48]	; (8008fa8 <prvInitialiseNewTask+0x144>)
 8008f78:	65da      	str	r2, [r3, #92]	; 0x5c
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7c:	4a0b      	ldr	r2, [pc, #44]	; (8008fac <prvInitialiseNewTask+0x148>)
 8008f7e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f80:	683a      	ldr	r2, [r7, #0]
 8008f82:	68f9      	ldr	r1, [r7, #12]
 8008f84:	69b8      	ldr	r0, [r7, #24]
 8008f86:	f001 fbd3 	bl	800a730 <pxPortInitialiseStack>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d002      	beq.n	8008f9c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f9c:	bf00      	nop
 8008f9e:	3720      	adds	r7, #32
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	0800c490 	.word	0x0800c490
 8008fa8:	0800c4b0 	.word	0x0800c4b0
 8008fac:	0800c470 	.word	0x0800c470

08008fb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008fb8:	f001 fce4 	bl	800a984 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008fbc:	4b2d      	ldr	r3, [pc, #180]	; (8009074 <prvAddNewTaskToReadyList+0xc4>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	4a2c      	ldr	r2, [pc, #176]	; (8009074 <prvAddNewTaskToReadyList+0xc4>)
 8008fc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008fc6:	4b2c      	ldr	r3, [pc, #176]	; (8009078 <prvAddNewTaskToReadyList+0xc8>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d109      	bne.n	8008fe2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008fce:	4a2a      	ldr	r2, [pc, #168]	; (8009078 <prvAddNewTaskToReadyList+0xc8>)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008fd4:	4b27      	ldr	r3, [pc, #156]	; (8009074 <prvAddNewTaskToReadyList+0xc4>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d110      	bne.n	8008ffe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008fdc:	f000 fcb6 	bl	800994c <prvInitialiseTaskLists>
 8008fe0:	e00d      	b.n	8008ffe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008fe2:	4b26      	ldr	r3, [pc, #152]	; (800907c <prvAddNewTaskToReadyList+0xcc>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d109      	bne.n	8008ffe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008fea:	4b23      	ldr	r3, [pc, #140]	; (8009078 <prvAddNewTaskToReadyList+0xc8>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d802      	bhi.n	8008ffe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ff8:	4a1f      	ldr	r2, [pc, #124]	; (8009078 <prvAddNewTaskToReadyList+0xc8>)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ffe:	4b20      	ldr	r3, [pc, #128]	; (8009080 <prvAddNewTaskToReadyList+0xd0>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	4a1e      	ldr	r2, [pc, #120]	; (8009080 <prvAddNewTaskToReadyList+0xd0>)
 8009006:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009008:	4b1d      	ldr	r3, [pc, #116]	; (8009080 <prvAddNewTaskToReadyList+0xd0>)
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009014:	4b1b      	ldr	r3, [pc, #108]	; (8009084 <prvAddNewTaskToReadyList+0xd4>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	429a      	cmp	r2, r3
 800901a:	d903      	bls.n	8009024 <prvAddNewTaskToReadyList+0x74>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009020:	4a18      	ldr	r2, [pc, #96]	; (8009084 <prvAddNewTaskToReadyList+0xd4>)
 8009022:	6013      	str	r3, [r2, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009028:	4613      	mov	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4a15      	ldr	r2, [pc, #84]	; (8009088 <prvAddNewTaskToReadyList+0xd8>)
 8009032:	441a      	add	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3304      	adds	r3, #4
 8009038:	4619      	mov	r1, r3
 800903a:	4610      	mov	r0, r2
 800903c:	f7ff f80b 	bl	8008056 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009040:	f001 fcd0 	bl	800a9e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009044:	4b0d      	ldr	r3, [pc, #52]	; (800907c <prvAddNewTaskToReadyList+0xcc>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00e      	beq.n	800906a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800904c:	4b0a      	ldr	r3, [pc, #40]	; (8009078 <prvAddNewTaskToReadyList+0xc8>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009056:	429a      	cmp	r2, r3
 8009058:	d207      	bcs.n	800906a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800905a:	4b0c      	ldr	r3, [pc, #48]	; (800908c <prvAddNewTaskToReadyList+0xdc>)
 800905c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800906a:	bf00      	nop
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20001584 	.word	0x20001584
 8009078:	200010b0 	.word	0x200010b0
 800907c:	20001590 	.word	0x20001590
 8009080:	200015a0 	.word	0x200015a0
 8009084:	2000158c 	.word	0x2000158c
 8009088:	200010b4 	.word	0x200010b4
 800908c:	e000ed04 	.word	0xe000ed04

08009090 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009090:	b580      	push	{r7, lr}
 8009092:	b08a      	sub	sp, #40	; 0x28
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800909a:	2300      	movs	r3, #0
 800909c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10a      	bne.n	80090ba <vTaskDelayUntil+0x2a>
	__asm volatile
 80090a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	617b      	str	r3, [r7, #20]
}
 80090b6:	bf00      	nop
 80090b8:	e7fe      	b.n	80090b8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10a      	bne.n	80090d6 <vTaskDelayUntil+0x46>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	613b      	str	r3, [r7, #16]
}
 80090d2:	bf00      	nop
 80090d4:	e7fe      	b.n	80090d4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80090d6:	4b2a      	ldr	r3, [pc, #168]	; (8009180 <vTaskDelayUntil+0xf0>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00a      	beq.n	80090f4 <vTaskDelayUntil+0x64>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	60fb      	str	r3, [r7, #12]
}
 80090f0:	bf00      	nop
 80090f2:	e7fe      	b.n	80090f2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80090f4:	f000 f8ee 	bl	80092d4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80090f8:	4b22      	ldr	r3, [pc, #136]	; (8009184 <vTaskDelayUntil+0xf4>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	683a      	ldr	r2, [r7, #0]
 8009104:	4413      	add	r3, r2
 8009106:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6a3a      	ldr	r2, [r7, #32]
 800910e:	429a      	cmp	r2, r3
 8009110:	d20b      	bcs.n	800912a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	69fa      	ldr	r2, [r7, #28]
 8009118:	429a      	cmp	r2, r3
 800911a:	d211      	bcs.n	8009140 <vTaskDelayUntil+0xb0>
 800911c:	69fa      	ldr	r2, [r7, #28]
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	429a      	cmp	r2, r3
 8009122:	d90d      	bls.n	8009140 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009124:	2301      	movs	r3, #1
 8009126:	627b      	str	r3, [r7, #36]	; 0x24
 8009128:	e00a      	b.n	8009140 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	69fa      	ldr	r2, [r7, #28]
 8009130:	429a      	cmp	r2, r3
 8009132:	d303      	bcc.n	800913c <vTaskDelayUntil+0xac>
 8009134:	69fa      	ldr	r2, [r7, #28]
 8009136:	6a3b      	ldr	r3, [r7, #32]
 8009138:	429a      	cmp	r2, r3
 800913a:	d901      	bls.n	8009140 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800913c:	2301      	movs	r3, #1
 800913e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	69fa      	ldr	r2, [r7, #28]
 8009144:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009148:	2b00      	cmp	r3, #0
 800914a:	d006      	beq.n	800915a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800914c:	69fa      	ldr	r2, [r7, #28]
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	2100      	movs	r1, #0
 8009154:	4618      	mov	r0, r3
 8009156:	f000 ff49 	bl	8009fec <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800915a:	f000 f8c9 	bl	80092f0 <xTaskResumeAll>
 800915e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d107      	bne.n	8009176 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009166:	4b08      	ldr	r3, [pc, #32]	; (8009188 <vTaskDelayUntil+0xf8>)
 8009168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009176:	bf00      	nop
 8009178:	3728      	adds	r7, #40	; 0x28
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	200015ac 	.word	0x200015ac
 8009184:	20001588 	.word	0x20001588
 8009188:	e000ed04 	.word	0xe000ed04

0800918c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009194:	2300      	movs	r3, #0
 8009196:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d017      	beq.n	80091ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800919e:	4b13      	ldr	r3, [pc, #76]	; (80091ec <vTaskDelay+0x60>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00a      	beq.n	80091bc <vTaskDelay+0x30>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	60bb      	str	r3, [r7, #8]
}
 80091b8:	bf00      	nop
 80091ba:	e7fe      	b.n	80091ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80091bc:	f000 f88a 	bl	80092d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80091c0:	2100      	movs	r1, #0
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 ff12 	bl	8009fec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80091c8:	f000 f892 	bl	80092f0 <xTaskResumeAll>
 80091cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d107      	bne.n	80091e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80091d4:	4b06      	ldr	r3, [pc, #24]	; (80091f0 <vTaskDelay+0x64>)
 80091d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091e4:	bf00      	nop
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	200015ac 	.word	0x200015ac
 80091f0:	e000ed04 	.word	0xe000ed04

080091f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08a      	sub	sp, #40	; 0x28
 80091f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091fe:	2300      	movs	r3, #0
 8009200:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009202:	463a      	mov	r2, r7
 8009204:	1d39      	adds	r1, r7, #4
 8009206:	f107 0308 	add.w	r3, r7, #8
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe fec2 	bl	8007f94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	9202      	str	r2, [sp, #8]
 8009218:	9301      	str	r3, [sp, #4]
 800921a:	2300      	movs	r3, #0
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	2300      	movs	r3, #0
 8009220:	460a      	mov	r2, r1
 8009222:	4924      	ldr	r1, [pc, #144]	; (80092b4 <vTaskStartScheduler+0xc0>)
 8009224:	4824      	ldr	r0, [pc, #144]	; (80092b8 <vTaskStartScheduler+0xc4>)
 8009226:	f7ff fd7b 	bl	8008d20 <xTaskCreateStatic>
 800922a:	4603      	mov	r3, r0
 800922c:	4a23      	ldr	r2, [pc, #140]	; (80092bc <vTaskStartScheduler+0xc8>)
 800922e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009230:	4b22      	ldr	r3, [pc, #136]	; (80092bc <vTaskStartScheduler+0xc8>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009238:	2301      	movs	r3, #1
 800923a:	617b      	str	r3, [r7, #20]
 800923c:	e001      	b.n	8009242 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800923e:	2300      	movs	r3, #0
 8009240:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d102      	bne.n	800924e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009248:	f000 ff24 	bl	800a094 <xTimerCreateTimerTask>
 800924c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d11b      	bne.n	800928c <vTaskStartScheduler+0x98>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	613b      	str	r3, [r7, #16]
}
 8009266:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009268:	4b15      	ldr	r3, [pc, #84]	; (80092c0 <vTaskStartScheduler+0xcc>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3354      	adds	r3, #84	; 0x54
 800926e:	4a15      	ldr	r2, [pc, #84]	; (80092c4 <vTaskStartScheduler+0xd0>)
 8009270:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009272:	4b15      	ldr	r3, [pc, #84]	; (80092c8 <vTaskStartScheduler+0xd4>)
 8009274:	f04f 32ff 	mov.w	r2, #4294967295
 8009278:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800927a:	4b14      	ldr	r3, [pc, #80]	; (80092cc <vTaskStartScheduler+0xd8>)
 800927c:	2201      	movs	r2, #1
 800927e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009280:	4b13      	ldr	r3, [pc, #76]	; (80092d0 <vTaskStartScheduler+0xdc>)
 8009282:	2200      	movs	r2, #0
 8009284:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009286:	f001 fadb 	bl	800a840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800928a:	e00e      	b.n	80092aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009292:	d10a      	bne.n	80092aa <vTaskStartScheduler+0xb6>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	60fb      	str	r3, [r7, #12]
}
 80092a6:	bf00      	nop
 80092a8:	e7fe      	b.n	80092a8 <vTaskStartScheduler+0xb4>
}
 80092aa:	bf00      	nop
 80092ac:	3718      	adds	r7, #24
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	0800c350 	.word	0x0800c350
 80092b8:	0800991d 	.word	0x0800991d
 80092bc:	200015a8 	.word	0x200015a8
 80092c0:	200010b0 	.word	0x200010b0
 80092c4:	20000010 	.word	0x20000010
 80092c8:	200015a4 	.word	0x200015a4
 80092cc:	20001590 	.word	0x20001590
 80092d0:	20001588 	.word	0x20001588

080092d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80092d4:	b480      	push	{r7}
 80092d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80092d8:	4b04      	ldr	r3, [pc, #16]	; (80092ec <vTaskSuspendAll+0x18>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3301      	adds	r3, #1
 80092de:	4a03      	ldr	r2, [pc, #12]	; (80092ec <vTaskSuspendAll+0x18>)
 80092e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80092e2:	bf00      	nop
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	200015ac 	.word	0x200015ac

080092f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092fa:	2300      	movs	r3, #0
 80092fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092fe:	4b42      	ldr	r3, [pc, #264]	; (8009408 <xTaskResumeAll+0x118>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10a      	bne.n	800931c <xTaskResumeAll+0x2c>
	__asm volatile
 8009306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	603b      	str	r3, [r7, #0]
}
 8009318:	bf00      	nop
 800931a:	e7fe      	b.n	800931a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800931c:	f001 fb32 	bl	800a984 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009320:	4b39      	ldr	r3, [pc, #228]	; (8009408 <xTaskResumeAll+0x118>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3b01      	subs	r3, #1
 8009326:	4a38      	ldr	r2, [pc, #224]	; (8009408 <xTaskResumeAll+0x118>)
 8009328:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800932a:	4b37      	ldr	r3, [pc, #220]	; (8009408 <xTaskResumeAll+0x118>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d162      	bne.n	80093f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009332:	4b36      	ldr	r3, [pc, #216]	; (800940c <xTaskResumeAll+0x11c>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d05e      	beq.n	80093f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800933a:	e02f      	b.n	800939c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800933c:	4b34      	ldr	r3, [pc, #208]	; (8009410 <xTaskResumeAll+0x120>)
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3318      	adds	r3, #24
 8009348:	4618      	mov	r0, r3
 800934a:	f7fe fee1 	bl	8008110 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	3304      	adds	r3, #4
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe fedc 	bl	8008110 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935c:	4b2d      	ldr	r3, [pc, #180]	; (8009414 <xTaskResumeAll+0x124>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	429a      	cmp	r2, r3
 8009362:	d903      	bls.n	800936c <xTaskResumeAll+0x7c>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009368:	4a2a      	ldr	r2, [pc, #168]	; (8009414 <xTaskResumeAll+0x124>)
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009370:	4613      	mov	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4a27      	ldr	r2, [pc, #156]	; (8009418 <xTaskResumeAll+0x128>)
 800937a:	441a      	add	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3304      	adds	r3, #4
 8009380:	4619      	mov	r1, r3
 8009382:	4610      	mov	r0, r2
 8009384:	f7fe fe67 	bl	8008056 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800938c:	4b23      	ldr	r3, [pc, #140]	; (800941c <xTaskResumeAll+0x12c>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009392:	429a      	cmp	r2, r3
 8009394:	d302      	bcc.n	800939c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009396:	4b22      	ldr	r3, [pc, #136]	; (8009420 <xTaskResumeAll+0x130>)
 8009398:	2201      	movs	r2, #1
 800939a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800939c:	4b1c      	ldr	r3, [pc, #112]	; (8009410 <xTaskResumeAll+0x120>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1cb      	bne.n	800933c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093aa:	f000 fb71 	bl	8009a90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80093ae:	4b1d      	ldr	r3, [pc, #116]	; (8009424 <xTaskResumeAll+0x134>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d010      	beq.n	80093dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093ba:	f000 f859 	bl	8009470 <xTaskIncrementTick>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80093c4:	4b16      	ldr	r3, [pc, #88]	; (8009420 <xTaskResumeAll+0x130>)
 80093c6:	2201      	movs	r2, #1
 80093c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1f1      	bne.n	80093ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80093d6:	4b13      	ldr	r3, [pc, #76]	; (8009424 <xTaskResumeAll+0x134>)
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80093dc:	4b10      	ldr	r3, [pc, #64]	; (8009420 <xTaskResumeAll+0x130>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d009      	beq.n	80093f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80093e4:	2301      	movs	r3, #1
 80093e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80093e8:	4b0f      	ldr	r3, [pc, #60]	; (8009428 <xTaskResumeAll+0x138>)
 80093ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ee:	601a      	str	r2, [r3, #0]
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093f8:	f001 faf4 	bl	800a9e4 <vPortExitCritical>

	return xAlreadyYielded;
 80093fc:	68bb      	ldr	r3, [r7, #8]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	200015ac 	.word	0x200015ac
 800940c:	20001584 	.word	0x20001584
 8009410:	20001544 	.word	0x20001544
 8009414:	2000158c 	.word	0x2000158c
 8009418:	200010b4 	.word	0x200010b4
 800941c:	200010b0 	.word	0x200010b0
 8009420:	20001598 	.word	0x20001598
 8009424:	20001594 	.word	0x20001594
 8009428:	e000ed04 	.word	0xe000ed04

0800942c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009432:	4b05      	ldr	r3, [pc, #20]	; (8009448 <xTaskGetTickCount+0x1c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009438:	687b      	ldr	r3, [r7, #4]
}
 800943a:	4618      	mov	r0, r3
 800943c:	370c      	adds	r7, #12
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	20001588 	.word	0x20001588

0800944c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009452:	f001 fb79 	bl	800ab48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009456:	2300      	movs	r3, #0
 8009458:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800945a:	4b04      	ldr	r3, [pc, #16]	; (800946c <xTaskGetTickCountFromISR+0x20>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009460:	683b      	ldr	r3, [r7, #0]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	20001588 	.word	0x20001588

08009470 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009476:	2300      	movs	r3, #0
 8009478:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800947a:	4b4f      	ldr	r3, [pc, #316]	; (80095b8 <xTaskIncrementTick+0x148>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	f040 808f 	bne.w	80095a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009484:	4b4d      	ldr	r3, [pc, #308]	; (80095bc <xTaskIncrementTick+0x14c>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3301      	adds	r3, #1
 800948a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800948c:	4a4b      	ldr	r2, [pc, #300]	; (80095bc <xTaskIncrementTick+0x14c>)
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d120      	bne.n	80094da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009498:	4b49      	ldr	r3, [pc, #292]	; (80095c0 <xTaskIncrementTick+0x150>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00a      	beq.n	80094b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	603b      	str	r3, [r7, #0]
}
 80094b4:	bf00      	nop
 80094b6:	e7fe      	b.n	80094b6 <xTaskIncrementTick+0x46>
 80094b8:	4b41      	ldr	r3, [pc, #260]	; (80095c0 <xTaskIncrementTick+0x150>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	60fb      	str	r3, [r7, #12]
 80094be:	4b41      	ldr	r3, [pc, #260]	; (80095c4 <xTaskIncrementTick+0x154>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a3f      	ldr	r2, [pc, #252]	; (80095c0 <xTaskIncrementTick+0x150>)
 80094c4:	6013      	str	r3, [r2, #0]
 80094c6:	4a3f      	ldr	r2, [pc, #252]	; (80095c4 <xTaskIncrementTick+0x154>)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6013      	str	r3, [r2, #0]
 80094cc:	4b3e      	ldr	r3, [pc, #248]	; (80095c8 <xTaskIncrementTick+0x158>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3301      	adds	r3, #1
 80094d2:	4a3d      	ldr	r2, [pc, #244]	; (80095c8 <xTaskIncrementTick+0x158>)
 80094d4:	6013      	str	r3, [r2, #0]
 80094d6:	f000 fadb 	bl	8009a90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094da:	4b3c      	ldr	r3, [pc, #240]	; (80095cc <xTaskIncrementTick+0x15c>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d349      	bcc.n	8009578 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094e4:	4b36      	ldr	r3, [pc, #216]	; (80095c0 <xTaskIncrementTick+0x150>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d104      	bne.n	80094f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094ee:	4b37      	ldr	r3, [pc, #220]	; (80095cc <xTaskIncrementTick+0x15c>)
 80094f0:	f04f 32ff 	mov.w	r2, #4294967295
 80094f4:	601a      	str	r2, [r3, #0]
					break;
 80094f6:	e03f      	b.n	8009578 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094f8:	4b31      	ldr	r3, [pc, #196]	; (80095c0 <xTaskIncrementTick+0x150>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	429a      	cmp	r2, r3
 800950e:	d203      	bcs.n	8009518 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009510:	4a2e      	ldr	r2, [pc, #184]	; (80095cc <xTaskIncrementTick+0x15c>)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009516:	e02f      	b.n	8009578 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	3304      	adds	r3, #4
 800951c:	4618      	mov	r0, r3
 800951e:	f7fe fdf7 	bl	8008110 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009526:	2b00      	cmp	r3, #0
 8009528:	d004      	beq.n	8009534 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	3318      	adds	r3, #24
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fdee 	bl	8008110 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009538:	4b25      	ldr	r3, [pc, #148]	; (80095d0 <xTaskIncrementTick+0x160>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	429a      	cmp	r2, r3
 800953e:	d903      	bls.n	8009548 <xTaskIncrementTick+0xd8>
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009544:	4a22      	ldr	r2, [pc, #136]	; (80095d0 <xTaskIncrementTick+0x160>)
 8009546:	6013      	str	r3, [r2, #0]
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800954c:	4613      	mov	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4a1f      	ldr	r2, [pc, #124]	; (80095d4 <xTaskIncrementTick+0x164>)
 8009556:	441a      	add	r2, r3
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	3304      	adds	r3, #4
 800955c:	4619      	mov	r1, r3
 800955e:	4610      	mov	r0, r2
 8009560:	f7fe fd79 	bl	8008056 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009568:	4b1b      	ldr	r3, [pc, #108]	; (80095d8 <xTaskIncrementTick+0x168>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956e:	429a      	cmp	r2, r3
 8009570:	d3b8      	bcc.n	80094e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009572:	2301      	movs	r3, #1
 8009574:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009576:	e7b5      	b.n	80094e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009578:	4b17      	ldr	r3, [pc, #92]	; (80095d8 <xTaskIncrementTick+0x168>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800957e:	4915      	ldr	r1, [pc, #84]	; (80095d4 <xTaskIncrementTick+0x164>)
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	440b      	add	r3, r1
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d901      	bls.n	8009594 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009590:	2301      	movs	r3, #1
 8009592:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009594:	4b11      	ldr	r3, [pc, #68]	; (80095dc <xTaskIncrementTick+0x16c>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d007      	beq.n	80095ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800959c:	2301      	movs	r3, #1
 800959e:	617b      	str	r3, [r7, #20]
 80095a0:	e004      	b.n	80095ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80095a2:	4b0f      	ldr	r3, [pc, #60]	; (80095e0 <xTaskIncrementTick+0x170>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	3301      	adds	r3, #1
 80095a8:	4a0d      	ldr	r2, [pc, #52]	; (80095e0 <xTaskIncrementTick+0x170>)
 80095aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80095ac:	697b      	ldr	r3, [r7, #20]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	200015ac 	.word	0x200015ac
 80095bc:	20001588 	.word	0x20001588
 80095c0:	2000153c 	.word	0x2000153c
 80095c4:	20001540 	.word	0x20001540
 80095c8:	2000159c 	.word	0x2000159c
 80095cc:	200015a4 	.word	0x200015a4
 80095d0:	2000158c 	.word	0x2000158c
 80095d4:	200010b4 	.word	0x200010b4
 80095d8:	200010b0 	.word	0x200010b0
 80095dc:	20001598 	.word	0x20001598
 80095e0:	20001594 	.word	0x20001594

080095e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095ea:	4b2a      	ldr	r3, [pc, #168]	; (8009694 <vTaskSwitchContext+0xb0>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095f2:	4b29      	ldr	r3, [pc, #164]	; (8009698 <vTaskSwitchContext+0xb4>)
 80095f4:	2201      	movs	r2, #1
 80095f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095f8:	e046      	b.n	8009688 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80095fa:	4b27      	ldr	r3, [pc, #156]	; (8009698 <vTaskSwitchContext+0xb4>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009600:	4b26      	ldr	r3, [pc, #152]	; (800969c <vTaskSwitchContext+0xb8>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	60fb      	str	r3, [r7, #12]
 8009606:	e010      	b.n	800962a <vTaskSwitchContext+0x46>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d10a      	bne.n	8009624 <vTaskSwitchContext+0x40>
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	607b      	str	r3, [r7, #4]
}
 8009620:	bf00      	nop
 8009622:	e7fe      	b.n	8009622 <vTaskSwitchContext+0x3e>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	3b01      	subs	r3, #1
 8009628:	60fb      	str	r3, [r7, #12]
 800962a:	491d      	ldr	r1, [pc, #116]	; (80096a0 <vTaskSwitchContext+0xbc>)
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	4613      	mov	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	440b      	add	r3, r1
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d0e4      	beq.n	8009608 <vTaskSwitchContext+0x24>
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	4613      	mov	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	4a15      	ldr	r2, [pc, #84]	; (80096a0 <vTaskSwitchContext+0xbc>)
 800964a:	4413      	add	r3, r2
 800964c:	60bb      	str	r3, [r7, #8]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	605a      	str	r2, [r3, #4]
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	3308      	adds	r3, #8
 8009660:	429a      	cmp	r2, r3
 8009662:	d104      	bne.n	800966e <vTaskSwitchContext+0x8a>
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	685a      	ldr	r2, [r3, #4]
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	605a      	str	r2, [r3, #4]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	4a0b      	ldr	r2, [pc, #44]	; (80096a4 <vTaskSwitchContext+0xc0>)
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	4a08      	ldr	r2, [pc, #32]	; (800969c <vTaskSwitchContext+0xb8>)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800967e:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <vTaskSwitchContext+0xc0>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3354      	adds	r3, #84	; 0x54
 8009684:	4a08      	ldr	r2, [pc, #32]	; (80096a8 <vTaskSwitchContext+0xc4>)
 8009686:	6013      	str	r3, [r2, #0]
}
 8009688:	bf00      	nop
 800968a:	3714      	adds	r7, #20
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr
 8009694:	200015ac 	.word	0x200015ac
 8009698:	20001598 	.word	0x20001598
 800969c:	2000158c 	.word	0x2000158c
 80096a0:	200010b4 	.word	0x200010b4
 80096a4:	200010b0 	.word	0x200010b0
 80096a8:	20000010 	.word	0x20000010

080096ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10a      	bne.n	80096d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	60fb      	str	r3, [r7, #12]
}
 80096ce:	bf00      	nop
 80096d0:	e7fe      	b.n	80096d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096d2:	4b07      	ldr	r3, [pc, #28]	; (80096f0 <vTaskPlaceOnEventList+0x44>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3318      	adds	r3, #24
 80096d8:	4619      	mov	r1, r3
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7fe fcdf 	bl	800809e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096e0:	2101      	movs	r1, #1
 80096e2:	6838      	ldr	r0, [r7, #0]
 80096e4:	f000 fc82 	bl	8009fec <prvAddCurrentTaskToDelayedList>
}
 80096e8:	bf00      	nop
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	200010b0 	.word	0x200010b0

080096f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10a      	bne.n	800971c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	617b      	str	r3, [r7, #20]
}
 8009718:	bf00      	nop
 800971a:	e7fe      	b.n	800971a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800971c:	4b0a      	ldr	r3, [pc, #40]	; (8009748 <vTaskPlaceOnEventListRestricted+0x54>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3318      	adds	r3, #24
 8009722:	4619      	mov	r1, r3
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f7fe fc96 	bl	8008056 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009730:	f04f 33ff 	mov.w	r3, #4294967295
 8009734:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009736:	6879      	ldr	r1, [r7, #4]
 8009738:	68b8      	ldr	r0, [r7, #8]
 800973a:	f000 fc57 	bl	8009fec <prvAddCurrentTaskToDelayedList>
	}
 800973e:	bf00      	nop
 8009740:	3718      	adds	r7, #24
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	200010b0 	.word	0x200010b0

0800974c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b086      	sub	sp, #24
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10a      	bne.n	8009778 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	60fb      	str	r3, [r7, #12]
}
 8009774:	bf00      	nop
 8009776:	e7fe      	b.n	8009776 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	3318      	adds	r3, #24
 800977c:	4618      	mov	r0, r3
 800977e:	f7fe fcc7 	bl	8008110 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009782:	4b1e      	ldr	r3, [pc, #120]	; (80097fc <xTaskRemoveFromEventList+0xb0>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d11d      	bne.n	80097c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	3304      	adds	r3, #4
 800978e:	4618      	mov	r0, r3
 8009790:	f7fe fcbe 	bl	8008110 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009798:	4b19      	ldr	r3, [pc, #100]	; (8009800 <xTaskRemoveFromEventList+0xb4>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	429a      	cmp	r2, r3
 800979e:	d903      	bls.n	80097a8 <xTaskRemoveFromEventList+0x5c>
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a4:	4a16      	ldr	r2, [pc, #88]	; (8009800 <xTaskRemoveFromEventList+0xb4>)
 80097a6:	6013      	str	r3, [r2, #0]
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ac:	4613      	mov	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4413      	add	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4a13      	ldr	r2, [pc, #76]	; (8009804 <xTaskRemoveFromEventList+0xb8>)
 80097b6:	441a      	add	r2, r3
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	3304      	adds	r3, #4
 80097bc:	4619      	mov	r1, r3
 80097be:	4610      	mov	r0, r2
 80097c0:	f7fe fc49 	bl	8008056 <vListInsertEnd>
 80097c4:	e005      	b.n	80097d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	3318      	adds	r3, #24
 80097ca:	4619      	mov	r1, r3
 80097cc:	480e      	ldr	r0, [pc, #56]	; (8009808 <xTaskRemoveFromEventList+0xbc>)
 80097ce:	f7fe fc42 	bl	8008056 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d6:	4b0d      	ldr	r3, [pc, #52]	; (800980c <xTaskRemoveFromEventList+0xc0>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097dc:	429a      	cmp	r2, r3
 80097de:	d905      	bls.n	80097ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097e0:	2301      	movs	r3, #1
 80097e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80097e4:	4b0a      	ldr	r3, [pc, #40]	; (8009810 <xTaskRemoveFromEventList+0xc4>)
 80097e6:	2201      	movs	r2, #1
 80097e8:	601a      	str	r2, [r3, #0]
 80097ea:	e001      	b.n	80097f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80097ec:	2300      	movs	r3, #0
 80097ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097f0:	697b      	ldr	r3, [r7, #20]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3718      	adds	r7, #24
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	200015ac 	.word	0x200015ac
 8009800:	2000158c 	.word	0x2000158c
 8009804:	200010b4 	.word	0x200010b4
 8009808:	20001544 	.word	0x20001544
 800980c:	200010b0 	.word	0x200010b0
 8009810:	20001598 	.word	0x20001598

08009814 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800981c:	4b06      	ldr	r3, [pc, #24]	; (8009838 <vTaskInternalSetTimeOutState+0x24>)
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009824:	4b05      	ldr	r3, [pc, #20]	; (800983c <vTaskInternalSetTimeOutState+0x28>)
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	605a      	str	r2, [r3, #4]
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	2000159c 	.word	0x2000159c
 800983c:	20001588 	.word	0x20001588

08009840 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b088      	sub	sp, #32
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10a      	bne.n	8009866 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	f383 8811 	msr	BASEPRI, r3
 8009858:	f3bf 8f6f 	isb	sy
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	613b      	str	r3, [r7, #16]
}
 8009862:	bf00      	nop
 8009864:	e7fe      	b.n	8009864 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10a      	bne.n	8009882 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	60fb      	str	r3, [r7, #12]
}
 800987e:	bf00      	nop
 8009880:	e7fe      	b.n	8009880 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009882:	f001 f87f 	bl	800a984 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009886:	4b1d      	ldr	r3, [pc, #116]	; (80098fc <xTaskCheckForTimeOut+0xbc>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	69ba      	ldr	r2, [r7, #24]
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989e:	d102      	bne.n	80098a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80098a0:	2300      	movs	r3, #0
 80098a2:	61fb      	str	r3, [r7, #28]
 80098a4:	e023      	b.n	80098ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	4b15      	ldr	r3, [pc, #84]	; (8009900 <xTaskCheckForTimeOut+0xc0>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d007      	beq.n	80098c2 <xTaskCheckForTimeOut+0x82>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	69ba      	ldr	r2, [r7, #24]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d302      	bcc.n	80098c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80098bc:	2301      	movs	r3, #1
 80098be:	61fb      	str	r3, [r7, #28]
 80098c0:	e015      	b.n	80098ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d20b      	bcs.n	80098e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	1ad2      	subs	r2, r2, r3
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff ff9b 	bl	8009814 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098de:	2300      	movs	r3, #0
 80098e0:	61fb      	str	r3, [r7, #28]
 80098e2:	e004      	b.n	80098ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	2200      	movs	r2, #0
 80098e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80098ea:	2301      	movs	r3, #1
 80098ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098ee:	f001 f879 	bl	800a9e4 <vPortExitCritical>

	return xReturn;
 80098f2:	69fb      	ldr	r3, [r7, #28]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3720      	adds	r7, #32
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	20001588 	.word	0x20001588
 8009900:	2000159c 	.word	0x2000159c

08009904 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009904:	b480      	push	{r7}
 8009906:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009908:	4b03      	ldr	r3, [pc, #12]	; (8009918 <vTaskMissedYield+0x14>)
 800990a:	2201      	movs	r2, #1
 800990c:	601a      	str	r2, [r3, #0]
}
 800990e:	bf00      	nop
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	20001598 	.word	0x20001598

0800991c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009924:	f000 f852 	bl	80099cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009928:	4b06      	ldr	r3, [pc, #24]	; (8009944 <prvIdleTask+0x28>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d9f9      	bls.n	8009924 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009930:	4b05      	ldr	r3, [pc, #20]	; (8009948 <prvIdleTask+0x2c>)
 8009932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009940:	e7f0      	b.n	8009924 <prvIdleTask+0x8>
 8009942:	bf00      	nop
 8009944:	200010b4 	.word	0x200010b4
 8009948:	e000ed04 	.word	0xe000ed04

0800994c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009952:	2300      	movs	r3, #0
 8009954:	607b      	str	r3, [r7, #4]
 8009956:	e00c      	b.n	8009972 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	4613      	mov	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4a12      	ldr	r2, [pc, #72]	; (80099ac <prvInitialiseTaskLists+0x60>)
 8009964:	4413      	add	r3, r2
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fb48 	bl	8007ffc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3301      	adds	r3, #1
 8009970:	607b      	str	r3, [r7, #4]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b37      	cmp	r3, #55	; 0x37
 8009976:	d9ef      	bls.n	8009958 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009978:	480d      	ldr	r0, [pc, #52]	; (80099b0 <prvInitialiseTaskLists+0x64>)
 800997a:	f7fe fb3f 	bl	8007ffc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800997e:	480d      	ldr	r0, [pc, #52]	; (80099b4 <prvInitialiseTaskLists+0x68>)
 8009980:	f7fe fb3c 	bl	8007ffc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009984:	480c      	ldr	r0, [pc, #48]	; (80099b8 <prvInitialiseTaskLists+0x6c>)
 8009986:	f7fe fb39 	bl	8007ffc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800998a:	480c      	ldr	r0, [pc, #48]	; (80099bc <prvInitialiseTaskLists+0x70>)
 800998c:	f7fe fb36 	bl	8007ffc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009990:	480b      	ldr	r0, [pc, #44]	; (80099c0 <prvInitialiseTaskLists+0x74>)
 8009992:	f7fe fb33 	bl	8007ffc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009996:	4b0b      	ldr	r3, [pc, #44]	; (80099c4 <prvInitialiseTaskLists+0x78>)
 8009998:	4a05      	ldr	r2, [pc, #20]	; (80099b0 <prvInitialiseTaskLists+0x64>)
 800999a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800999c:	4b0a      	ldr	r3, [pc, #40]	; (80099c8 <prvInitialiseTaskLists+0x7c>)
 800999e:	4a05      	ldr	r2, [pc, #20]	; (80099b4 <prvInitialiseTaskLists+0x68>)
 80099a0:	601a      	str	r2, [r3, #0]
}
 80099a2:	bf00      	nop
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	200010b4 	.word	0x200010b4
 80099b0:	20001514 	.word	0x20001514
 80099b4:	20001528 	.word	0x20001528
 80099b8:	20001544 	.word	0x20001544
 80099bc:	20001558 	.word	0x20001558
 80099c0:	20001570 	.word	0x20001570
 80099c4:	2000153c 	.word	0x2000153c
 80099c8:	20001540 	.word	0x20001540

080099cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099d2:	e019      	b.n	8009a08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099d4:	f000 ffd6 	bl	800a984 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099d8:	4b10      	ldr	r3, [pc, #64]	; (8009a1c <prvCheckTasksWaitingTermination+0x50>)
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3304      	adds	r3, #4
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fe fb93 	bl	8008110 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80099ea:	4b0d      	ldr	r3, [pc, #52]	; (8009a20 <prvCheckTasksWaitingTermination+0x54>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3b01      	subs	r3, #1
 80099f0:	4a0b      	ldr	r2, [pc, #44]	; (8009a20 <prvCheckTasksWaitingTermination+0x54>)
 80099f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80099f4:	4b0b      	ldr	r3, [pc, #44]	; (8009a24 <prvCheckTasksWaitingTermination+0x58>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	4a0a      	ldr	r2, [pc, #40]	; (8009a24 <prvCheckTasksWaitingTermination+0x58>)
 80099fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80099fe:	f000 fff1 	bl	800a9e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f810 	bl	8009a28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a08:	4b06      	ldr	r3, [pc, #24]	; (8009a24 <prvCheckTasksWaitingTermination+0x58>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e1      	bne.n	80099d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a10:	bf00      	nop
 8009a12:	bf00      	nop
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20001558 	.word	0x20001558
 8009a20:	20001584 	.word	0x20001584
 8009a24:	2000156c 	.word	0x2000156c

08009a28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	3354      	adds	r3, #84	; 0x54
 8009a34:	4618      	mov	r0, r3
 8009a36:	f001 fd1b 	bl	800b470 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d108      	bne.n	8009a56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f001 f989 	bl	800ad60 <vPortFree>
				vPortFree( pxTCB );
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f001 f986 	bl	800ad60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a54:	e018      	b.n	8009a88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d103      	bne.n	8009a68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f001 f97d 	bl	800ad60 <vPortFree>
	}
 8009a66:	e00f      	b.n	8009a88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d00a      	beq.n	8009a88 <prvDeleteTCB+0x60>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	60fb      	str	r3, [r7, #12]
}
 8009a84:	bf00      	nop
 8009a86:	e7fe      	b.n	8009a86 <prvDeleteTCB+0x5e>
	}
 8009a88:	bf00      	nop
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a96:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <prvResetNextTaskUnblockTime+0x38>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d104      	bne.n	8009aaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009aa0:	4b0a      	ldr	r3, [pc, #40]	; (8009acc <prvResetNextTaskUnblockTime+0x3c>)
 8009aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009aa8:	e008      	b.n	8009abc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aaa:	4b07      	ldr	r3, [pc, #28]	; (8009ac8 <prvResetNextTaskUnblockTime+0x38>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	4a04      	ldr	r2, [pc, #16]	; (8009acc <prvResetNextTaskUnblockTime+0x3c>)
 8009aba:	6013      	str	r3, [r2, #0]
}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr
 8009ac8:	2000153c 	.word	0x2000153c
 8009acc:	200015a4 	.word	0x200015a4

08009ad0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ad6:	4b0b      	ldr	r3, [pc, #44]	; (8009b04 <xTaskGetSchedulerState+0x34>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d102      	bne.n	8009ae4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	607b      	str	r3, [r7, #4]
 8009ae2:	e008      	b.n	8009af6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ae4:	4b08      	ldr	r3, [pc, #32]	; (8009b08 <xTaskGetSchedulerState+0x38>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d102      	bne.n	8009af2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009aec:	2302      	movs	r3, #2
 8009aee:	607b      	str	r3, [r7, #4]
 8009af0:	e001      	b.n	8009af6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009af2:	2300      	movs	r3, #0
 8009af4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009af6:	687b      	ldr	r3, [r7, #4]
	}
 8009af8:	4618      	mov	r0, r3
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr
 8009b04:	20001590 	.word	0x20001590
 8009b08:	200015ac 	.word	0x200015ac

08009b0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d056      	beq.n	8009bd0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b22:	4b2e      	ldr	r3, [pc, #184]	; (8009bdc <xTaskPriorityDisinherit+0xd0>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d00a      	beq.n	8009b42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	60fb      	str	r3, [r7, #12]
}
 8009b3e:	bf00      	nop
 8009b40:	e7fe      	b.n	8009b40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d10a      	bne.n	8009b60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	60bb      	str	r3, [r7, #8]
}
 8009b5c:	bf00      	nop
 8009b5e:	e7fe      	b.n	8009b5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b64:	1e5a      	subs	r2, r3, #1
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d02c      	beq.n	8009bd0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d128      	bne.n	8009bd0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	3304      	adds	r3, #4
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fe fac4 	bl	8008110 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba0:	4b0f      	ldr	r3, [pc, #60]	; (8009be0 <xTaskPriorityDisinherit+0xd4>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d903      	bls.n	8009bb0 <xTaskPriorityDisinherit+0xa4>
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bac:	4a0c      	ldr	r2, [pc, #48]	; (8009be0 <xTaskPriorityDisinherit+0xd4>)
 8009bae:	6013      	str	r3, [r2, #0]
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4a09      	ldr	r2, [pc, #36]	; (8009be4 <xTaskPriorityDisinherit+0xd8>)
 8009bbe:	441a      	add	r2, r3
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	3304      	adds	r3, #4
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	f7fe fa45 	bl	8008056 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bd0:	697b      	ldr	r3, [r7, #20]
	}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3718      	adds	r7, #24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	200010b0 	.word	0x200010b0
 8009be0:	2000158c 	.word	0x2000158c
 8009be4:	200010b4 	.word	0x200010b4

08009be8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
 8009bf4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009bf6:	f000 fec5 	bl	800a984 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009bfa:	4b29      	ldr	r3, [pc, #164]	; (8009ca0 <xTaskNotifyWait+0xb8>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d01c      	beq.n	8009c42 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009c08:	4b25      	ldr	r3, [pc, #148]	; (8009ca0 <xTaskNotifyWait+0xb8>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	43d2      	mvns	r2, r2
 8009c14:	400a      	ands	r2, r1
 8009c16:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009c1a:	4b21      	ldr	r3, [pc, #132]	; (8009ca0 <xTaskNotifyWait+0xb8>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00b      	beq.n	8009c42 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c2a:	2101      	movs	r1, #1
 8009c2c:	6838      	ldr	r0, [r7, #0]
 8009c2e:	f000 f9dd 	bl	8009fec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009c32:	4b1c      	ldr	r3, [pc, #112]	; (8009ca4 <xTaskNotifyWait+0xbc>)
 8009c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c38:	601a      	str	r2, [r3, #0]
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009c42:	f000 fecf 	bl	800a9e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009c46:	f000 fe9d 	bl	800a984 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d005      	beq.n	8009c5c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009c50:	4b13      	ldr	r3, [pc, #76]	; (8009ca0 <xTaskNotifyWait+0xb8>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009c5c:	4b10      	ldr	r3, [pc, #64]	; (8009ca0 <xTaskNotifyWait+0xb8>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d002      	beq.n	8009c70 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	617b      	str	r3, [r7, #20]
 8009c6e:	e00a      	b.n	8009c86 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009c70:	4b0b      	ldr	r3, [pc, #44]	; (8009ca0 <xTaskNotifyWait+0xb8>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	43d2      	mvns	r2, r2
 8009c7c:	400a      	ands	r2, r1
 8009c7e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8009c82:	2301      	movs	r3, #1
 8009c84:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c86:	4b06      	ldr	r3, [pc, #24]	; (8009ca0 <xTaskNotifyWait+0xb8>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8009c90:	f000 fea8 	bl	800a9e4 <vPortExitCritical>

		return xReturn;
 8009c94:	697b      	ldr	r3, [r7, #20]
	}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3718      	adds	r7, #24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	200010b0 	.word	0x200010b0
 8009ca4:	e000ed04 	.word	0xe000ed04

08009ca8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08a      	sub	sp, #40	; 0x28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	603b      	str	r3, [r7, #0]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <xTaskGenericNotify+0x30>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	61bb      	str	r3, [r7, #24]
}
 8009cd4:	bf00      	nop
 8009cd6:	e7fe      	b.n	8009cd6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009cdc:	f000 fe52 	bl	800a984 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d004      	beq.n	8009cf0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009cf6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	2202      	movs	r2, #2
 8009cfc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009d00:	79fb      	ldrb	r3, [r7, #7]
 8009d02:	2b04      	cmp	r3, #4
 8009d04:	d82d      	bhi.n	8009d62 <xTaskGenericNotify+0xba>
 8009d06:	a201      	add	r2, pc, #4	; (adr r2, 8009d0c <xTaskGenericNotify+0x64>)
 8009d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0c:	08009d85 	.word	0x08009d85
 8009d10:	08009d21 	.word	0x08009d21
 8009d14:	08009d33 	.word	0x08009d33
 8009d18:	08009d43 	.word	0x08009d43
 8009d1c:	08009d4d 	.word	0x08009d4d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	431a      	orrs	r2, r3
 8009d2a:	6a3b      	ldr	r3, [r7, #32]
 8009d2c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009d30:	e02b      	b.n	8009d8a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009d38:	1c5a      	adds	r2, r3, #1
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009d40:	e023      	b.n	8009d8a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009d4a:	e01e      	b.n	8009d8a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009d4c:	7ffb      	ldrb	r3, [r7, #31]
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d004      	beq.n	8009d5c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009d52:	6a3b      	ldr	r3, [r7, #32]
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009d5a:	e016      	b.n	8009d8a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009d60:	e013      	b.n	8009d8a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6c:	d00c      	beq.n	8009d88 <xTaskGenericNotify+0xe0>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	617b      	str	r3, [r7, #20]
}
 8009d80:	bf00      	nop
 8009d82:	e7fe      	b.n	8009d82 <xTaskGenericNotify+0xda>
					break;
 8009d84:	bf00      	nop
 8009d86:	e000      	b.n	8009d8a <xTaskGenericNotify+0xe2>

					break;
 8009d88:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009d8a:	7ffb      	ldrb	r3, [r7, #31]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d13a      	bne.n	8009e06 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	3304      	adds	r3, #4
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fe f9bb 	bl	8008110 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d9e:	4b1d      	ldr	r3, [pc, #116]	; (8009e14 <xTaskGenericNotify+0x16c>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d903      	bls.n	8009dae <xTaskGenericNotify+0x106>
 8009da6:	6a3b      	ldr	r3, [r7, #32]
 8009da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009daa:	4a1a      	ldr	r2, [pc, #104]	; (8009e14 <xTaskGenericNotify+0x16c>)
 8009dac:	6013      	str	r3, [r2, #0]
 8009dae:	6a3b      	ldr	r3, [r7, #32]
 8009db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db2:	4613      	mov	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4a17      	ldr	r2, [pc, #92]	; (8009e18 <xTaskGenericNotify+0x170>)
 8009dbc:	441a      	add	r2, r3
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	f7fe f946 	bl	8008056 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00a      	beq.n	8009de8 <xTaskGenericNotify+0x140>
	__asm volatile
 8009dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd6:	f383 8811 	msr	BASEPRI, r3
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	613b      	str	r3, [r7, #16]
}
 8009de4:	bf00      	nop
 8009de6:	e7fe      	b.n	8009de6 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009de8:	6a3b      	ldr	r3, [r7, #32]
 8009dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dec:	4b0b      	ldr	r3, [pc, #44]	; (8009e1c <xTaskGenericNotify+0x174>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d907      	bls.n	8009e06 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009df6:	4b0a      	ldr	r3, [pc, #40]	; (8009e20 <xTaskGenericNotify+0x178>)
 8009df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dfc:	601a      	str	r2, [r3, #0]
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009e06:	f000 fded 	bl	800a9e4 <vPortExitCritical>

		return xReturn;
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3728      	adds	r7, #40	; 0x28
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	2000158c 	.word	0x2000158c
 8009e18:	200010b4 	.word	0x200010b4
 8009e1c:	200010b0 	.word	0x200010b0
 8009e20:	e000ed04 	.word	0xe000ed04

08009e24 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b08e      	sub	sp, #56	; 0x38
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	603b      	str	r3, [r7, #0]
 8009e30:	4613      	mov	r3, r2
 8009e32:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009e34:	2301      	movs	r3, #1
 8009e36:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d10a      	bne.n	8009e54 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e50:	bf00      	nop
 8009e52:	e7fe      	b.n	8009e52 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e54:	f000 fe78 	bl	800ab48 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009e5c:	f3ef 8211 	mrs	r2, BASEPRI
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	623a      	str	r2, [r7, #32]
 8009e72:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009e74:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e76:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d004      	beq.n	8009e88 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e80:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e94:	2202      	movs	r2, #2
 8009e96:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009e9a:	79fb      	ldrb	r3, [r7, #7]
 8009e9c:	2b04      	cmp	r3, #4
 8009e9e:	d82f      	bhi.n	8009f00 <xTaskGenericNotifyFromISR+0xdc>
 8009ea0:	a201      	add	r2, pc, #4	; (adr r2, 8009ea8 <xTaskGenericNotifyFromISR+0x84>)
 8009ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea6:	bf00      	nop
 8009ea8:	08009f23 	.word	0x08009f23
 8009eac:	08009ebd 	.word	0x08009ebd
 8009eb0:	08009ecf 	.word	0x08009ecf
 8009eb4:	08009edf 	.word	0x08009edf
 8009eb8:	08009ee9 	.word	0x08009ee9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	431a      	orrs	r2, r3
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009ecc:	e02c      	b.n	8009f28 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009edc:	e024      	b.n	8009f28 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009ee6:	e01f      	b.n	8009f28 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009ee8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d004      	beq.n	8009efa <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009ef8:	e016      	b.n	8009f28 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8009efa:	2300      	movs	r3, #0
 8009efc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009efe:	e013      	b.n	8009f28 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0a:	d00c      	beq.n	8009f26 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8009f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	61bb      	str	r3, [r7, #24]
}
 8009f1e:	bf00      	nop
 8009f20:	e7fe      	b.n	8009f20 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009f22:	bf00      	nop
 8009f24:	e000      	b.n	8009f28 <xTaskGenericNotifyFromISR+0x104>
					break;
 8009f26:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009f28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d146      	bne.n	8009fbe <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00a      	beq.n	8009f4e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8009f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3c:	f383 8811 	msr	BASEPRI, r3
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	617b      	str	r3, [r7, #20]
}
 8009f4a:	bf00      	nop
 8009f4c:	e7fe      	b.n	8009f4c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f4e:	4b21      	ldr	r3, [pc, #132]	; (8009fd4 <xTaskGenericNotifyFromISR+0x1b0>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d11d      	bne.n	8009f92 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f58:	3304      	adds	r3, #4
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fe f8d8 	bl	8008110 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f64:	4b1c      	ldr	r3, [pc, #112]	; (8009fd8 <xTaskGenericNotifyFromISR+0x1b4>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d903      	bls.n	8009f74 <xTaskGenericNotifyFromISR+0x150>
 8009f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f70:	4a19      	ldr	r2, [pc, #100]	; (8009fd8 <xTaskGenericNotifyFromISR+0x1b4>)
 8009f72:	6013      	str	r3, [r2, #0]
 8009f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f78:	4613      	mov	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4a16      	ldr	r2, [pc, #88]	; (8009fdc <xTaskGenericNotifyFromISR+0x1b8>)
 8009f82:	441a      	add	r2, r3
 8009f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f86:	3304      	adds	r3, #4
 8009f88:	4619      	mov	r1, r3
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	f7fe f863 	bl	8008056 <vListInsertEnd>
 8009f90:	e005      	b.n	8009f9e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	3318      	adds	r3, #24
 8009f96:	4619      	mov	r1, r3
 8009f98:	4811      	ldr	r0, [pc, #68]	; (8009fe0 <xTaskGenericNotifyFromISR+0x1bc>)
 8009f9a:	f7fe f85c 	bl	8008056 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa2:	4b10      	ldr	r3, [pc, #64]	; (8009fe4 <xTaskGenericNotifyFromISR+0x1c0>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d908      	bls.n	8009fbe <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d002      	beq.n	8009fb8 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009fb8:	4b0b      	ldr	r3, [pc, #44]	; (8009fe8 <xTaskGenericNotifyFromISR+0x1c4>)
 8009fba:	2201      	movs	r2, #1
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	f383 8811 	msr	BASEPRI, r3
}
 8009fc8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3738      	adds	r7, #56	; 0x38
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	200015ac 	.word	0x200015ac
 8009fd8:	2000158c 	.word	0x2000158c
 8009fdc:	200010b4 	.word	0x200010b4
 8009fe0:	20001544 	.word	0x20001544
 8009fe4:	200010b0 	.word	0x200010b0
 8009fe8:	20001598 	.word	0x20001598

08009fec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ff6:	4b21      	ldr	r3, [pc, #132]	; (800a07c <prvAddCurrentTaskToDelayedList+0x90>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ffc:	4b20      	ldr	r3, [pc, #128]	; (800a080 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	3304      	adds	r3, #4
 800a002:	4618      	mov	r0, r3
 800a004:	f7fe f884 	bl	8008110 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00e:	d10a      	bne.n	800a026 <prvAddCurrentTaskToDelayedList+0x3a>
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d007      	beq.n	800a026 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a016:	4b1a      	ldr	r3, [pc, #104]	; (800a080 <prvAddCurrentTaskToDelayedList+0x94>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3304      	adds	r3, #4
 800a01c:	4619      	mov	r1, r3
 800a01e:	4819      	ldr	r0, [pc, #100]	; (800a084 <prvAddCurrentTaskToDelayedList+0x98>)
 800a020:	f7fe f819 	bl	8008056 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a024:	e026      	b.n	800a074 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4413      	add	r3, r2
 800a02c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a02e:	4b14      	ldr	r3, [pc, #80]	; (800a080 <prvAddCurrentTaskToDelayedList+0x94>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d209      	bcs.n	800a052 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a03e:	4b12      	ldr	r3, [pc, #72]	; (800a088 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	4b0f      	ldr	r3, [pc, #60]	; (800a080 <prvAddCurrentTaskToDelayedList+0x94>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	3304      	adds	r3, #4
 800a048:	4619      	mov	r1, r3
 800a04a:	4610      	mov	r0, r2
 800a04c:	f7fe f827 	bl	800809e <vListInsert>
}
 800a050:	e010      	b.n	800a074 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a052:	4b0e      	ldr	r3, [pc, #56]	; (800a08c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	4b0a      	ldr	r3, [pc, #40]	; (800a080 <prvAddCurrentTaskToDelayedList+0x94>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3304      	adds	r3, #4
 800a05c:	4619      	mov	r1, r3
 800a05e:	4610      	mov	r0, r2
 800a060:	f7fe f81d 	bl	800809e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a064:	4b0a      	ldr	r3, [pc, #40]	; (800a090 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d202      	bcs.n	800a074 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a06e:	4a08      	ldr	r2, [pc, #32]	; (800a090 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	6013      	str	r3, [r2, #0]
}
 800a074:	bf00      	nop
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	20001588 	.word	0x20001588
 800a080:	200010b0 	.word	0x200010b0
 800a084:	20001570 	.word	0x20001570
 800a088:	20001540 	.word	0x20001540
 800a08c:	2000153c 	.word	0x2000153c
 800a090:	200015a4 	.word	0x200015a4

0800a094 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b08a      	sub	sp, #40	; 0x28
 800a098:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a09a:	2300      	movs	r3, #0
 800a09c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a09e:	f000 fb07 	bl	800a6b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a0a2:	4b1c      	ldr	r3, [pc, #112]	; (800a114 <xTimerCreateTimerTask+0x80>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d021      	beq.n	800a0ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a0b2:	1d3a      	adds	r2, r7, #4
 800a0b4:	f107 0108 	add.w	r1, r7, #8
 800a0b8:	f107 030c 	add.w	r3, r7, #12
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fd ff83 	bl	8007fc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a0c2:	6879      	ldr	r1, [r7, #4]
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	9202      	str	r2, [sp, #8]
 800a0ca:	9301      	str	r3, [sp, #4]
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	460a      	mov	r2, r1
 800a0d4:	4910      	ldr	r1, [pc, #64]	; (800a118 <xTimerCreateTimerTask+0x84>)
 800a0d6:	4811      	ldr	r0, [pc, #68]	; (800a11c <xTimerCreateTimerTask+0x88>)
 800a0d8:	f7fe fe22 	bl	8008d20 <xTaskCreateStatic>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	4a10      	ldr	r2, [pc, #64]	; (800a120 <xTimerCreateTimerTask+0x8c>)
 800a0e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a0e2:	4b0f      	ldr	r3, [pc, #60]	; (800a120 <xTimerCreateTimerTask+0x8c>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d001      	beq.n	800a0ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10a      	bne.n	800a10a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	613b      	str	r3, [r7, #16]
}
 800a106:	bf00      	nop
 800a108:	e7fe      	b.n	800a108 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a10a:	697b      	ldr	r3, [r7, #20]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	200015e0 	.word	0x200015e0
 800a118:	0800c358 	.word	0x0800c358
 800a11c:	0800a259 	.word	0x0800a259
 800a120:	200015e4 	.word	0x200015e4

0800a124 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b08a      	sub	sp, #40	; 0x28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
 800a130:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a132:	2300      	movs	r3, #0
 800a134:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10a      	bne.n	800a152 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	623b      	str	r3, [r7, #32]
}
 800a14e:	bf00      	nop
 800a150:	e7fe      	b.n	800a150 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a152:	4b1a      	ldr	r3, [pc, #104]	; (800a1bc <xTimerGenericCommand+0x98>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d02a      	beq.n	800a1b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	2b05      	cmp	r3, #5
 800a16a:	dc18      	bgt.n	800a19e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a16c:	f7ff fcb0 	bl	8009ad0 <xTaskGetSchedulerState>
 800a170:	4603      	mov	r3, r0
 800a172:	2b02      	cmp	r3, #2
 800a174:	d109      	bne.n	800a18a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a176:	4b11      	ldr	r3, [pc, #68]	; (800a1bc <xTimerGenericCommand+0x98>)
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	f107 0110 	add.w	r1, r7, #16
 800a17e:	2300      	movs	r3, #0
 800a180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a182:	f7fe f997 	bl	80084b4 <xQueueGenericSend>
 800a186:	6278      	str	r0, [r7, #36]	; 0x24
 800a188:	e012      	b.n	800a1b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a18a:	4b0c      	ldr	r3, [pc, #48]	; (800a1bc <xTimerGenericCommand+0x98>)
 800a18c:	6818      	ldr	r0, [r3, #0]
 800a18e:	f107 0110 	add.w	r1, r7, #16
 800a192:	2300      	movs	r3, #0
 800a194:	2200      	movs	r2, #0
 800a196:	f7fe f98d 	bl	80084b4 <xQueueGenericSend>
 800a19a:	6278      	str	r0, [r7, #36]	; 0x24
 800a19c:	e008      	b.n	800a1b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a19e:	4b07      	ldr	r3, [pc, #28]	; (800a1bc <xTimerGenericCommand+0x98>)
 800a1a0:	6818      	ldr	r0, [r3, #0]
 800a1a2:	f107 0110 	add.w	r1, r7, #16
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	683a      	ldr	r2, [r7, #0]
 800a1aa:	f7fe fa81 	bl	80086b0 <xQueueGenericSendFromISR>
 800a1ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3728      	adds	r7, #40	; 0x28
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	200015e0 	.word	0x200015e0

0800a1c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af02      	add	r7, sp, #8
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1ca:	4b22      	ldr	r3, [pc, #136]	; (800a254 <prvProcessExpiredTimer+0x94>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7fd ff99 	bl	8008110 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1e4:	f003 0304 	and.w	r3, r3, #4
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d022      	beq.n	800a232 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	699a      	ldr	r2, [r3, #24]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	18d1      	adds	r1, r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	6978      	ldr	r0, [r7, #20]
 800a1fa:	f000 f8d1 	bl	800a3a0 <prvInsertTimerInActiveList>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d01f      	beq.n	800a244 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a204:	2300      	movs	r3, #0
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	2300      	movs	r3, #0
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	2100      	movs	r1, #0
 800a20e:	6978      	ldr	r0, [r7, #20]
 800a210:	f7ff ff88 	bl	800a124 <xTimerGenericCommand>
 800a214:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d113      	bne.n	800a244 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a220:	f383 8811 	msr	BASEPRI, r3
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	60fb      	str	r3, [r7, #12]
}
 800a22e:	bf00      	nop
 800a230:	e7fe      	b.n	800a230 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a238:	f023 0301 	bic.w	r3, r3, #1
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	6a1b      	ldr	r3, [r3, #32]
 800a248:	6978      	ldr	r0, [r7, #20]
 800a24a:	4798      	blx	r3
}
 800a24c:	bf00      	nop
 800a24e:	3718      	adds	r7, #24
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	200015d8 	.word	0x200015d8

0800a258 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a260:	f107 0308 	add.w	r3, r7, #8
 800a264:	4618      	mov	r0, r3
 800a266:	f000 f857 	bl	800a318 <prvGetNextExpireTime>
 800a26a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	4619      	mov	r1, r3
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f000 f803 	bl	800a27c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a276:	f000 f8d5 	bl	800a424 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a27a:	e7f1      	b.n	800a260 <prvTimerTask+0x8>

0800a27c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a286:	f7ff f825 	bl	80092d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a28a:	f107 0308 	add.w	r3, r7, #8
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 f866 	bl	800a360 <prvSampleTimeNow>
 800a294:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d130      	bne.n	800a2fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10a      	bne.n	800a2b8 <prvProcessTimerOrBlockTask+0x3c>
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d806      	bhi.n	800a2b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a2aa:	f7ff f821 	bl	80092f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a2ae:	68f9      	ldr	r1, [r7, #12]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7ff ff85 	bl	800a1c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a2b6:	e024      	b.n	800a302 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d008      	beq.n	800a2d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a2be:	4b13      	ldr	r3, [pc, #76]	; (800a30c <prvProcessTimerOrBlockTask+0x90>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d101      	bne.n	800a2cc <prvProcessTimerOrBlockTask+0x50>
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e000      	b.n	800a2ce <prvProcessTimerOrBlockTask+0x52>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a2d0:	4b0f      	ldr	r3, [pc, #60]	; (800a310 <prvProcessTimerOrBlockTask+0x94>)
 800a2d2:	6818      	ldr	r0, [r3, #0]
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	4619      	mov	r1, r3
 800a2de:	f7fe fceb 	bl	8008cb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a2e2:	f7ff f805 	bl	80092f0 <xTaskResumeAll>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10a      	bne.n	800a302 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a2ec:	4b09      	ldr	r3, [pc, #36]	; (800a314 <prvProcessTimerOrBlockTask+0x98>)
 800a2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	f3bf 8f6f 	isb	sy
}
 800a2fc:	e001      	b.n	800a302 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a2fe:	f7fe fff7 	bl	80092f0 <xTaskResumeAll>
}
 800a302:	bf00      	nop
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	200015dc 	.word	0x200015dc
 800a310:	200015e0 	.word	0x200015e0
 800a314:	e000ed04 	.word	0xe000ed04

0800a318 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a320:	4b0e      	ldr	r3, [pc, #56]	; (800a35c <prvGetNextExpireTime+0x44>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <prvGetNextExpireTime+0x16>
 800a32a:	2201      	movs	r2, #1
 800a32c:	e000      	b.n	800a330 <prvGetNextExpireTime+0x18>
 800a32e:	2200      	movs	r2, #0
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d105      	bne.n	800a348 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a33c:	4b07      	ldr	r3, [pc, #28]	; (800a35c <prvGetNextExpireTime+0x44>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	60fb      	str	r3, [r7, #12]
 800a346:	e001      	b.n	800a34c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a348:	2300      	movs	r3, #0
 800a34a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a34c:	68fb      	ldr	r3, [r7, #12]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3714      	adds	r7, #20
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	200015d8 	.word	0x200015d8

0800a360 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a368:	f7ff f860 	bl	800942c <xTaskGetTickCount>
 800a36c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a36e:	4b0b      	ldr	r3, [pc, #44]	; (800a39c <prvSampleTimeNow+0x3c>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	429a      	cmp	r2, r3
 800a376:	d205      	bcs.n	800a384 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a378:	f000 f936 	bl	800a5e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	601a      	str	r2, [r3, #0]
 800a382:	e002      	b.n	800a38a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a38a:	4a04      	ldr	r2, [pc, #16]	; (800a39c <prvSampleTimeNow+0x3c>)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a390:	68fb      	ldr	r3, [r7, #12]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	200015e8 	.word	0x200015e8

0800a3a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	607a      	str	r2, [r7, #4]
 800a3ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d812      	bhi.n	800a3ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	1ad2      	subs	r2, r2, r3
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d302      	bcc.n	800a3da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	617b      	str	r3, [r7, #20]
 800a3d8:	e01b      	b.n	800a412 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a3da:	4b10      	ldr	r3, [pc, #64]	; (800a41c <prvInsertTimerInActiveList+0x7c>)
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3304      	adds	r3, #4
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	f7fd fe5a 	bl	800809e <vListInsert>
 800a3ea:	e012      	b.n	800a412 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d206      	bcs.n	800a402 <prvInsertTimerInActiveList+0x62>
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d302      	bcc.n	800a402 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	617b      	str	r3, [r7, #20]
 800a400:	e007      	b.n	800a412 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a402:	4b07      	ldr	r3, [pc, #28]	; (800a420 <prvInsertTimerInActiveList+0x80>)
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	3304      	adds	r3, #4
 800a40a:	4619      	mov	r1, r3
 800a40c:	4610      	mov	r0, r2
 800a40e:	f7fd fe46 	bl	800809e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a412:	697b      	ldr	r3, [r7, #20]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3718      	adds	r7, #24
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	200015dc 	.word	0x200015dc
 800a420:	200015d8 	.word	0x200015d8

0800a424 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b08e      	sub	sp, #56	; 0x38
 800a428:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a42a:	e0ca      	b.n	800a5c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	da18      	bge.n	800a464 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a432:	1d3b      	adds	r3, r7, #4
 800a434:	3304      	adds	r3, #4
 800a436:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d10a      	bne.n	800a454 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	61fb      	str	r3, [r7, #28]
}
 800a450:	bf00      	nop
 800a452:	e7fe      	b.n	800a452 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a45a:	6850      	ldr	r0, [r2, #4]
 800a45c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a45e:	6892      	ldr	r2, [r2, #8]
 800a460:	4611      	mov	r1, r2
 800a462:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	f2c0 80aa 	blt.w	800a5c0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a472:	695b      	ldr	r3, [r3, #20]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d004      	beq.n	800a482 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	3304      	adds	r3, #4
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fd fe47 	bl	8008110 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a482:	463b      	mov	r3, r7
 800a484:	4618      	mov	r0, r3
 800a486:	f7ff ff6b 	bl	800a360 <prvSampleTimeNow>
 800a48a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b09      	cmp	r3, #9
 800a490:	f200 8097 	bhi.w	800a5c2 <prvProcessReceivedCommands+0x19e>
 800a494:	a201      	add	r2, pc, #4	; (adr r2, 800a49c <prvProcessReceivedCommands+0x78>)
 800a496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49a:	bf00      	nop
 800a49c:	0800a4c5 	.word	0x0800a4c5
 800a4a0:	0800a4c5 	.word	0x0800a4c5
 800a4a4:	0800a4c5 	.word	0x0800a4c5
 800a4a8:	0800a539 	.word	0x0800a539
 800a4ac:	0800a54d 	.word	0x0800a54d
 800a4b0:	0800a597 	.word	0x0800a597
 800a4b4:	0800a4c5 	.word	0x0800a4c5
 800a4b8:	0800a4c5 	.word	0x0800a4c5
 800a4bc:	0800a539 	.word	0x0800a539
 800a4c0:	0800a54d 	.word	0x0800a54d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4ca:	f043 0301 	orr.w	r3, r3, #1
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4da:	699b      	ldr	r3, [r3, #24]
 800a4dc:	18d1      	adds	r1, r2, r3
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4e4:	f7ff ff5c 	bl	800a3a0 <prvInsertTimerInActiveList>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d069      	beq.n	800a5c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f0:	6a1b      	ldr	r3, [r3, #32]
 800a4f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4fc:	f003 0304 	and.w	r3, r3, #4
 800a500:	2b00      	cmp	r3, #0
 800a502:	d05e      	beq.n	800a5c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	441a      	add	r2, r3
 800a50c:	2300      	movs	r3, #0
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	2300      	movs	r3, #0
 800a512:	2100      	movs	r1, #0
 800a514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a516:	f7ff fe05 	bl	800a124 <xTimerGenericCommand>
 800a51a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a51c:	6a3b      	ldr	r3, [r7, #32]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d14f      	bne.n	800a5c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	61bb      	str	r3, [r7, #24]
}
 800a534:	bf00      	nop
 800a536:	e7fe      	b.n	800a536 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a53e:	f023 0301 	bic.w	r3, r3, #1
 800a542:	b2da      	uxtb	r2, r3
 800a544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a54a:	e03a      	b.n	800a5c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a552:	f043 0301 	orr.w	r3, r3, #1
 800a556:	b2da      	uxtb	r2, r3
 800a558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a562:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10a      	bne.n	800a582 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	617b      	str	r3, [r7, #20]
}
 800a57e:	bf00      	nop
 800a580:	e7fe      	b.n	800a580 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a584:	699a      	ldr	r2, [r3, #24]
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	18d1      	adds	r1, r2, r3
 800a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a58e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a590:	f7ff ff06 	bl	800a3a0 <prvInsertTimerInActiveList>
					break;
 800a594:	e015      	b.n	800a5c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a59c:	f003 0302 	and.w	r3, r3, #2
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d103      	bne.n	800a5ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a5a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a6:	f000 fbdb 	bl	800ad60 <vPortFree>
 800a5aa:	e00a      	b.n	800a5c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5b2:	f023 0301 	bic.w	r3, r3, #1
 800a5b6:	b2da      	uxtb	r2, r3
 800a5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a5be:	e000      	b.n	800a5c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a5c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5c2:	4b08      	ldr	r3, [pc, #32]	; (800a5e4 <prvProcessReceivedCommands+0x1c0>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	1d39      	adds	r1, r7, #4
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fe f90c 	bl	80087e8 <xQueueReceive>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f47f af2a 	bne.w	800a42c <prvProcessReceivedCommands+0x8>
	}
}
 800a5d8:	bf00      	nop
 800a5da:	bf00      	nop
 800a5dc:	3730      	adds	r7, #48	; 0x30
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	200015e0 	.word	0x200015e0

0800a5e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b088      	sub	sp, #32
 800a5ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5ee:	e048      	b.n	800a682 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5f0:	4b2d      	ldr	r3, [pc, #180]	; (800a6a8 <prvSwitchTimerLists+0xc0>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5fa:	4b2b      	ldr	r3, [pc, #172]	; (800a6a8 <prvSwitchTimerLists+0xc0>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	3304      	adds	r3, #4
 800a608:	4618      	mov	r0, r3
 800a60a:	f7fd fd81 	bl	8008110 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	6a1b      	ldr	r3, [r3, #32]
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a61c:	f003 0304 	and.w	r3, r3, #4
 800a620:	2b00      	cmp	r3, #0
 800a622:	d02e      	beq.n	800a682 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	693a      	ldr	r2, [r7, #16]
 800a62a:	4413      	add	r3, r2
 800a62c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	429a      	cmp	r2, r3
 800a634:	d90e      	bls.n	800a654 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a642:	4b19      	ldr	r3, [pc, #100]	; (800a6a8 <prvSwitchTimerLists+0xc0>)
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	3304      	adds	r3, #4
 800a64a:	4619      	mov	r1, r3
 800a64c:	4610      	mov	r0, r2
 800a64e:	f7fd fd26 	bl	800809e <vListInsert>
 800a652:	e016      	b.n	800a682 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a654:	2300      	movs	r3, #0
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	2300      	movs	r3, #0
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	2100      	movs	r1, #0
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f7ff fd60 	bl	800a124 <xTimerGenericCommand>
 800a664:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10a      	bne.n	800a682 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a670:	f383 8811 	msr	BASEPRI, r3
 800a674:	f3bf 8f6f 	isb	sy
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	603b      	str	r3, [r7, #0]
}
 800a67e:	bf00      	nop
 800a680:	e7fe      	b.n	800a680 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a682:	4b09      	ldr	r3, [pc, #36]	; (800a6a8 <prvSwitchTimerLists+0xc0>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1b1      	bne.n	800a5f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a68c:	4b06      	ldr	r3, [pc, #24]	; (800a6a8 <prvSwitchTimerLists+0xc0>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a692:	4b06      	ldr	r3, [pc, #24]	; (800a6ac <prvSwitchTimerLists+0xc4>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a04      	ldr	r2, [pc, #16]	; (800a6a8 <prvSwitchTimerLists+0xc0>)
 800a698:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a69a:	4a04      	ldr	r2, [pc, #16]	; (800a6ac <prvSwitchTimerLists+0xc4>)
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	6013      	str	r3, [r2, #0]
}
 800a6a0:	bf00      	nop
 800a6a2:	3718      	adds	r7, #24
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	200015d8 	.word	0x200015d8
 800a6ac:	200015dc 	.word	0x200015dc

0800a6b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a6b6:	f000 f965 	bl	800a984 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a6ba:	4b15      	ldr	r3, [pc, #84]	; (800a710 <prvCheckForValidListAndQueue+0x60>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d120      	bne.n	800a704 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a6c2:	4814      	ldr	r0, [pc, #80]	; (800a714 <prvCheckForValidListAndQueue+0x64>)
 800a6c4:	f7fd fc9a 	bl	8007ffc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a6c8:	4813      	ldr	r0, [pc, #76]	; (800a718 <prvCheckForValidListAndQueue+0x68>)
 800a6ca:	f7fd fc97 	bl	8007ffc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a6ce:	4b13      	ldr	r3, [pc, #76]	; (800a71c <prvCheckForValidListAndQueue+0x6c>)
 800a6d0:	4a10      	ldr	r2, [pc, #64]	; (800a714 <prvCheckForValidListAndQueue+0x64>)
 800a6d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a6d4:	4b12      	ldr	r3, [pc, #72]	; (800a720 <prvCheckForValidListAndQueue+0x70>)
 800a6d6:	4a10      	ldr	r2, [pc, #64]	; (800a718 <prvCheckForValidListAndQueue+0x68>)
 800a6d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a6da:	2300      	movs	r3, #0
 800a6dc:	9300      	str	r3, [sp, #0]
 800a6de:	4b11      	ldr	r3, [pc, #68]	; (800a724 <prvCheckForValidListAndQueue+0x74>)
 800a6e0:	4a11      	ldr	r2, [pc, #68]	; (800a728 <prvCheckForValidListAndQueue+0x78>)
 800a6e2:	2110      	movs	r1, #16
 800a6e4:	200a      	movs	r0, #10
 800a6e6:	f7fd fda5 	bl	8008234 <xQueueGenericCreateStatic>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	4a08      	ldr	r2, [pc, #32]	; (800a710 <prvCheckForValidListAndQueue+0x60>)
 800a6ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a6f0:	4b07      	ldr	r3, [pc, #28]	; (800a710 <prvCheckForValidListAndQueue+0x60>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d005      	beq.n	800a704 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a6f8:	4b05      	ldr	r3, [pc, #20]	; (800a710 <prvCheckForValidListAndQueue+0x60>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	490b      	ldr	r1, [pc, #44]	; (800a72c <prvCheckForValidListAndQueue+0x7c>)
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fe fa86 	bl	8008c10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a704:	f000 f96e 	bl	800a9e4 <vPortExitCritical>
}
 800a708:	bf00      	nop
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	200015e0 	.word	0x200015e0
 800a714:	200015b0 	.word	0x200015b0
 800a718:	200015c4 	.word	0x200015c4
 800a71c:	200015d8 	.word	0x200015d8
 800a720:	200015dc 	.word	0x200015dc
 800a724:	2000168c 	.word	0x2000168c
 800a728:	200015ec 	.word	0x200015ec
 800a72c:	0800c360 	.word	0x0800c360

0800a730 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	3b04      	subs	r3, #4
 800a740:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	3b04      	subs	r3, #4
 800a74e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	f023 0201 	bic.w	r2, r3, #1
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	3b04      	subs	r3, #4
 800a75e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a760:	4a0c      	ldr	r2, [pc, #48]	; (800a794 <pxPortInitialiseStack+0x64>)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	3b14      	subs	r3, #20
 800a76a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	3b04      	subs	r3, #4
 800a776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f06f 0202 	mvn.w	r2, #2
 800a77e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	3b20      	subs	r3, #32
 800a784:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a786:	68fb      	ldr	r3, [r7, #12]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	0800a799 	.word	0x0800a799

0800a798 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7a2:	4b12      	ldr	r3, [pc, #72]	; (800a7ec <prvTaskExitError+0x54>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7aa:	d00a      	beq.n	800a7c2 <prvTaskExitError+0x2a>
	__asm volatile
 800a7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b0:	f383 8811 	msr	BASEPRI, r3
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	60fb      	str	r3, [r7, #12]
}
 800a7be:	bf00      	nop
 800a7c0:	e7fe      	b.n	800a7c0 <prvTaskExitError+0x28>
	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	60bb      	str	r3, [r7, #8]
}
 800a7d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a7d6:	bf00      	nop
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0fc      	beq.n	800a7d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a7de:	bf00      	nop
 800a7e0:	bf00      	nop
 800a7e2:	3714      	adds	r7, #20
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	2000000c 	.word	0x2000000c

0800a7f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a7f0:	4b07      	ldr	r3, [pc, #28]	; (800a810 <pxCurrentTCBConst2>)
 800a7f2:	6819      	ldr	r1, [r3, #0]
 800a7f4:	6808      	ldr	r0, [r1, #0]
 800a7f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fa:	f380 8809 	msr	PSP, r0
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f04f 0000 	mov.w	r0, #0
 800a806:	f380 8811 	msr	BASEPRI, r0
 800a80a:	4770      	bx	lr
 800a80c:	f3af 8000 	nop.w

0800a810 <pxCurrentTCBConst2>:
 800a810:	200010b0 	.word	0x200010b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a814:	bf00      	nop
 800a816:	bf00      	nop

0800a818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a818:	4808      	ldr	r0, [pc, #32]	; (800a83c <prvPortStartFirstTask+0x24>)
 800a81a:	6800      	ldr	r0, [r0, #0]
 800a81c:	6800      	ldr	r0, [r0, #0]
 800a81e:	f380 8808 	msr	MSP, r0
 800a822:	f04f 0000 	mov.w	r0, #0
 800a826:	f380 8814 	msr	CONTROL, r0
 800a82a:	b662      	cpsie	i
 800a82c:	b661      	cpsie	f
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	df00      	svc	0
 800a838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a83a:	bf00      	nop
 800a83c:	e000ed08 	.word	0xe000ed08

0800a840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a846:	4b46      	ldr	r3, [pc, #280]	; (800a960 <xPortStartScheduler+0x120>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a46      	ldr	r2, [pc, #280]	; (800a964 <xPortStartScheduler+0x124>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d10a      	bne.n	800a866 <xPortStartScheduler+0x26>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	613b      	str	r3, [r7, #16]
}
 800a862:	bf00      	nop
 800a864:	e7fe      	b.n	800a864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a866:	4b3e      	ldr	r3, [pc, #248]	; (800a960 <xPortStartScheduler+0x120>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a3f      	ldr	r2, [pc, #252]	; (800a968 <xPortStartScheduler+0x128>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d10a      	bne.n	800a886 <xPortStartScheduler+0x46>
	__asm volatile
 800a870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a874:	f383 8811 	msr	BASEPRI, r3
 800a878:	f3bf 8f6f 	isb	sy
 800a87c:	f3bf 8f4f 	dsb	sy
 800a880:	60fb      	str	r3, [r7, #12]
}
 800a882:	bf00      	nop
 800a884:	e7fe      	b.n	800a884 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a886:	4b39      	ldr	r3, [pc, #228]	; (800a96c <xPortStartScheduler+0x12c>)
 800a888:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	22ff      	movs	r2, #255	; 0xff
 800a896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8a0:	78fb      	ldrb	r3, [r7, #3]
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a8a8:	b2da      	uxtb	r2, r3
 800a8aa:	4b31      	ldr	r3, [pc, #196]	; (800a970 <xPortStartScheduler+0x130>)
 800a8ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8ae:	4b31      	ldr	r3, [pc, #196]	; (800a974 <xPortStartScheduler+0x134>)
 800a8b0:	2207      	movs	r2, #7
 800a8b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8b4:	e009      	b.n	800a8ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a8b6:	4b2f      	ldr	r3, [pc, #188]	; (800a974 <xPortStartScheduler+0x134>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	4a2d      	ldr	r2, [pc, #180]	; (800a974 <xPortStartScheduler+0x134>)
 800a8be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8c0:	78fb      	ldrb	r3, [r7, #3]
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	005b      	lsls	r3, r3, #1
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8ca:	78fb      	ldrb	r3, [r7, #3]
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8d2:	2b80      	cmp	r3, #128	; 0x80
 800a8d4:	d0ef      	beq.n	800a8b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8d6:	4b27      	ldr	r3, [pc, #156]	; (800a974 <xPortStartScheduler+0x134>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f1c3 0307 	rsb	r3, r3, #7
 800a8de:	2b04      	cmp	r3, #4
 800a8e0:	d00a      	beq.n	800a8f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e6:	f383 8811 	msr	BASEPRI, r3
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	60bb      	str	r3, [r7, #8]
}
 800a8f4:	bf00      	nop
 800a8f6:	e7fe      	b.n	800a8f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8f8:	4b1e      	ldr	r3, [pc, #120]	; (800a974 <xPortStartScheduler+0x134>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	021b      	lsls	r3, r3, #8
 800a8fe:	4a1d      	ldr	r2, [pc, #116]	; (800a974 <xPortStartScheduler+0x134>)
 800a900:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a902:	4b1c      	ldr	r3, [pc, #112]	; (800a974 <xPortStartScheduler+0x134>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a90a:	4a1a      	ldr	r2, [pc, #104]	; (800a974 <xPortStartScheduler+0x134>)
 800a90c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	b2da      	uxtb	r2, r3
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a916:	4b18      	ldr	r3, [pc, #96]	; (800a978 <xPortStartScheduler+0x138>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a17      	ldr	r2, [pc, #92]	; (800a978 <xPortStartScheduler+0x138>)
 800a91c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a920:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a922:	4b15      	ldr	r3, [pc, #84]	; (800a978 <xPortStartScheduler+0x138>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a14      	ldr	r2, [pc, #80]	; (800a978 <xPortStartScheduler+0x138>)
 800a928:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a92c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a92e:	f000 f8dd 	bl	800aaec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a932:	4b12      	ldr	r3, [pc, #72]	; (800a97c <xPortStartScheduler+0x13c>)
 800a934:	2200      	movs	r2, #0
 800a936:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a938:	f000 f8fc 	bl	800ab34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a93c:	4b10      	ldr	r3, [pc, #64]	; (800a980 <xPortStartScheduler+0x140>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a0f      	ldr	r2, [pc, #60]	; (800a980 <xPortStartScheduler+0x140>)
 800a942:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a946:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a948:	f7ff ff66 	bl	800a818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a94c:	f7fe fe4a 	bl	80095e4 <vTaskSwitchContext>
	prvTaskExitError();
 800a950:	f7ff ff22 	bl	800a798 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3718      	adds	r7, #24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	e000ed00 	.word	0xe000ed00
 800a964:	410fc271 	.word	0x410fc271
 800a968:	410fc270 	.word	0x410fc270
 800a96c:	e000e400 	.word	0xe000e400
 800a970:	200016dc 	.word	0x200016dc
 800a974:	200016e0 	.word	0x200016e0
 800a978:	e000ed20 	.word	0xe000ed20
 800a97c:	2000000c 	.word	0x2000000c
 800a980:	e000ef34 	.word	0xe000ef34

0800a984 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
	__asm volatile
 800a98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98e:	f383 8811 	msr	BASEPRI, r3
 800a992:	f3bf 8f6f 	isb	sy
 800a996:	f3bf 8f4f 	dsb	sy
 800a99a:	607b      	str	r3, [r7, #4]
}
 800a99c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a99e:	4b0f      	ldr	r3, [pc, #60]	; (800a9dc <vPortEnterCritical+0x58>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	4a0d      	ldr	r2, [pc, #52]	; (800a9dc <vPortEnterCritical+0x58>)
 800a9a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9a8:	4b0c      	ldr	r3, [pc, #48]	; (800a9dc <vPortEnterCritical+0x58>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d10f      	bne.n	800a9d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9b0:	4b0b      	ldr	r3, [pc, #44]	; (800a9e0 <vPortEnterCritical+0x5c>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00a      	beq.n	800a9d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9be:	f383 8811 	msr	BASEPRI, r3
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	603b      	str	r3, [r7, #0]
}
 800a9cc:	bf00      	nop
 800a9ce:	e7fe      	b.n	800a9ce <vPortEnterCritical+0x4a>
	}
}
 800a9d0:	bf00      	nop
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr
 800a9dc:	2000000c 	.word	0x2000000c
 800a9e0:	e000ed04 	.word	0xe000ed04

0800a9e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a9ea:	4b12      	ldr	r3, [pc, #72]	; (800aa34 <vPortExitCritical+0x50>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d10a      	bne.n	800aa08 <vPortExitCritical+0x24>
	__asm volatile
 800a9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f6:	f383 8811 	msr	BASEPRI, r3
 800a9fa:	f3bf 8f6f 	isb	sy
 800a9fe:	f3bf 8f4f 	dsb	sy
 800aa02:	607b      	str	r3, [r7, #4]
}
 800aa04:	bf00      	nop
 800aa06:	e7fe      	b.n	800aa06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa08:	4b0a      	ldr	r3, [pc, #40]	; (800aa34 <vPortExitCritical+0x50>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	4a09      	ldr	r2, [pc, #36]	; (800aa34 <vPortExitCritical+0x50>)
 800aa10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa12:	4b08      	ldr	r3, [pc, #32]	; (800aa34 <vPortExitCritical+0x50>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d105      	bne.n	800aa26 <vPortExitCritical+0x42>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	f383 8811 	msr	BASEPRI, r3
}
 800aa24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa26:	bf00      	nop
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	2000000c 	.word	0x2000000c
	...

0800aa40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa40:	f3ef 8009 	mrs	r0, PSP
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	4b15      	ldr	r3, [pc, #84]	; (800aaa0 <pxCurrentTCBConst>)
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	f01e 0f10 	tst.w	lr, #16
 800aa50:	bf08      	it	eq
 800aa52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5a:	6010      	str	r0, [r2, #0]
 800aa5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa64:	f380 8811 	msr	BASEPRI, r0
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f7fe fdb8 	bl	80095e4 <vTaskSwitchContext>
 800aa74:	f04f 0000 	mov.w	r0, #0
 800aa78:	f380 8811 	msr	BASEPRI, r0
 800aa7c:	bc09      	pop	{r0, r3}
 800aa7e:	6819      	ldr	r1, [r3, #0]
 800aa80:	6808      	ldr	r0, [r1, #0]
 800aa82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa86:	f01e 0f10 	tst.w	lr, #16
 800aa8a:	bf08      	it	eq
 800aa8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa90:	f380 8809 	msr	PSP, r0
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	f3af 8000 	nop.w

0800aaa0 <pxCurrentTCBConst>:
 800aaa0:	200010b0 	.word	0x200010b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aaa4:	bf00      	nop
 800aaa6:	bf00      	nop

0800aaa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	607b      	str	r3, [r7, #4]
}
 800aac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aac2:	f7fe fcd5 	bl	8009470 <xTaskIncrementTick>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d003      	beq.n	800aad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aacc:	4b06      	ldr	r3, [pc, #24]	; (800aae8 <xPortSysTickHandler+0x40>)
 800aace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aad2:	601a      	str	r2, [r3, #0]
 800aad4:	2300      	movs	r3, #0
 800aad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	f383 8811 	msr	BASEPRI, r3
}
 800aade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aae0:	bf00      	nop
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	e000ed04 	.word	0xe000ed04

0800aaec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aaec:	b480      	push	{r7}
 800aaee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aaf0:	4b0b      	ldr	r3, [pc, #44]	; (800ab20 <vPortSetupTimerInterrupt+0x34>)
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aaf6:	4b0b      	ldr	r3, [pc, #44]	; (800ab24 <vPortSetupTimerInterrupt+0x38>)
 800aaf8:	2200      	movs	r2, #0
 800aafa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aafc:	4b0a      	ldr	r3, [pc, #40]	; (800ab28 <vPortSetupTimerInterrupt+0x3c>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a0a      	ldr	r2, [pc, #40]	; (800ab2c <vPortSetupTimerInterrupt+0x40>)
 800ab02:	fba2 2303 	umull	r2, r3, r2, r3
 800ab06:	099b      	lsrs	r3, r3, #6
 800ab08:	4a09      	ldr	r2, [pc, #36]	; (800ab30 <vPortSetupTimerInterrupt+0x44>)
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab0e:	4b04      	ldr	r3, [pc, #16]	; (800ab20 <vPortSetupTimerInterrupt+0x34>)
 800ab10:	2207      	movs	r2, #7
 800ab12:	601a      	str	r2, [r3, #0]
}
 800ab14:	bf00      	nop
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr
 800ab1e:	bf00      	nop
 800ab20:	e000e010 	.word	0xe000e010
 800ab24:	e000e018 	.word	0xe000e018
 800ab28:	20000000 	.word	0x20000000
 800ab2c:	10624dd3 	.word	0x10624dd3
 800ab30:	e000e014 	.word	0xe000e014

0800ab34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab44 <vPortEnableVFP+0x10>
 800ab38:	6801      	ldr	r1, [r0, #0]
 800ab3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab3e:	6001      	str	r1, [r0, #0]
 800ab40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab42:	bf00      	nop
 800ab44:	e000ed88 	.word	0xe000ed88

0800ab48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab4e:	f3ef 8305 	mrs	r3, IPSR
 800ab52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2b0f      	cmp	r3, #15
 800ab58:	d914      	bls.n	800ab84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab5a:	4a17      	ldr	r2, [pc, #92]	; (800abb8 <vPortValidateInterruptPriority+0x70>)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	4413      	add	r3, r2
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab64:	4b15      	ldr	r3, [pc, #84]	; (800abbc <vPortValidateInterruptPriority+0x74>)
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	7afa      	ldrb	r2, [r7, #11]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d20a      	bcs.n	800ab84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	607b      	str	r3, [r7, #4]
}
 800ab80:	bf00      	nop
 800ab82:	e7fe      	b.n	800ab82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab84:	4b0e      	ldr	r3, [pc, #56]	; (800abc0 <vPortValidateInterruptPriority+0x78>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab8c:	4b0d      	ldr	r3, [pc, #52]	; (800abc4 <vPortValidateInterruptPriority+0x7c>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d90a      	bls.n	800abaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab98:	f383 8811 	msr	BASEPRI, r3
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	603b      	str	r3, [r7, #0]
}
 800aba6:	bf00      	nop
 800aba8:	e7fe      	b.n	800aba8 <vPortValidateInterruptPriority+0x60>
	}
 800abaa:	bf00      	nop
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	e000e3f0 	.word	0xe000e3f0
 800abbc:	200016dc 	.word	0x200016dc
 800abc0:	e000ed0c 	.word	0xe000ed0c
 800abc4:	200016e0 	.word	0x200016e0

0800abc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b08a      	sub	sp, #40	; 0x28
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800abd0:	2300      	movs	r3, #0
 800abd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800abd4:	f7fe fb7e 	bl	80092d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800abd8:	4b5b      	ldr	r3, [pc, #364]	; (800ad48 <pvPortMalloc+0x180>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d101      	bne.n	800abe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abe0:	f000 f920 	bl	800ae24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abe4:	4b59      	ldr	r3, [pc, #356]	; (800ad4c <pvPortMalloc+0x184>)
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4013      	ands	r3, r2
 800abec:	2b00      	cmp	r3, #0
 800abee:	f040 8093 	bne.w	800ad18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d01d      	beq.n	800ac34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800abf8:	2208      	movs	r2, #8
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4413      	add	r3, r2
 800abfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f003 0307 	and.w	r3, r3, #7
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d014      	beq.n	800ac34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f023 0307 	bic.w	r3, r3, #7
 800ac10:	3308      	adds	r3, #8
 800ac12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f003 0307 	and.w	r3, r3, #7
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00a      	beq.n	800ac34 <pvPortMalloc+0x6c>
	__asm volatile
 800ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac22:	f383 8811 	msr	BASEPRI, r3
 800ac26:	f3bf 8f6f 	isb	sy
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	617b      	str	r3, [r7, #20]
}
 800ac30:	bf00      	nop
 800ac32:	e7fe      	b.n	800ac32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d06e      	beq.n	800ad18 <pvPortMalloc+0x150>
 800ac3a:	4b45      	ldr	r3, [pc, #276]	; (800ad50 <pvPortMalloc+0x188>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d869      	bhi.n	800ad18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac44:	4b43      	ldr	r3, [pc, #268]	; (800ad54 <pvPortMalloc+0x18c>)
 800ac46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac48:	4b42      	ldr	r3, [pc, #264]	; (800ad54 <pvPortMalloc+0x18c>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac4e:	e004      	b.n	800ac5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d903      	bls.n	800ac6c <pvPortMalloc+0xa4>
 800ac64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1f1      	bne.n	800ac50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac6c:	4b36      	ldr	r3, [pc, #216]	; (800ad48 <pvPortMalloc+0x180>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d050      	beq.n	800ad18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2208      	movs	r2, #8
 800ac7c:	4413      	add	r3, r2
 800ac7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	6a3b      	ldr	r3, [r7, #32]
 800ac86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	1ad2      	subs	r2, r2, r3
 800ac90:	2308      	movs	r3, #8
 800ac92:	005b      	lsls	r3, r3, #1
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d91f      	bls.n	800acd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	f003 0307 	and.w	r3, r3, #7
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00a      	beq.n	800acc0 <pvPortMalloc+0xf8>
	__asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	613b      	str	r3, [r7, #16]
}
 800acbc:	bf00      	nop
 800acbe:	e7fe      	b.n	800acbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800acc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc2:	685a      	ldr	r2, [r3, #4]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	1ad2      	subs	r2, r2, r3
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800accc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800acd2:	69b8      	ldr	r0, [r7, #24]
 800acd4:	f000 f908 	bl	800aee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800acd8:	4b1d      	ldr	r3, [pc, #116]	; (800ad50 <pvPortMalloc+0x188>)
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	4a1b      	ldr	r2, [pc, #108]	; (800ad50 <pvPortMalloc+0x188>)
 800ace4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ace6:	4b1a      	ldr	r3, [pc, #104]	; (800ad50 <pvPortMalloc+0x188>)
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	4b1b      	ldr	r3, [pc, #108]	; (800ad58 <pvPortMalloc+0x190>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d203      	bcs.n	800acfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800acf2:	4b17      	ldr	r3, [pc, #92]	; (800ad50 <pvPortMalloc+0x188>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a18      	ldr	r2, [pc, #96]	; (800ad58 <pvPortMalloc+0x190>)
 800acf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfc:	685a      	ldr	r2, [r3, #4]
 800acfe:	4b13      	ldr	r3, [pc, #76]	; (800ad4c <pvPortMalloc+0x184>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	431a      	orrs	r2, r3
 800ad04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ad0e:	4b13      	ldr	r3, [pc, #76]	; (800ad5c <pvPortMalloc+0x194>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	3301      	adds	r3, #1
 800ad14:	4a11      	ldr	r2, [pc, #68]	; (800ad5c <pvPortMalloc+0x194>)
 800ad16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad18:	f7fe faea 	bl	80092f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	f003 0307 	and.w	r3, r3, #7
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00a      	beq.n	800ad3c <pvPortMalloc+0x174>
	__asm volatile
 800ad26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	60fb      	str	r3, [r7, #12]
}
 800ad38:	bf00      	nop
 800ad3a:	e7fe      	b.n	800ad3a <pvPortMalloc+0x172>
	return pvReturn;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3728      	adds	r7, #40	; 0x28
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	200052ec 	.word	0x200052ec
 800ad4c:	20005300 	.word	0x20005300
 800ad50:	200052f0 	.word	0x200052f0
 800ad54:	200052e4 	.word	0x200052e4
 800ad58:	200052f4 	.word	0x200052f4
 800ad5c:	200052f8 	.word	0x200052f8

0800ad60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d04d      	beq.n	800ae0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad72:	2308      	movs	r3, #8
 800ad74:	425b      	negs	r3, r3
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	4413      	add	r3, r2
 800ad7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	685a      	ldr	r2, [r3, #4]
 800ad84:	4b24      	ldr	r3, [pc, #144]	; (800ae18 <vPortFree+0xb8>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4013      	ands	r3, r2
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d10a      	bne.n	800ada4 <vPortFree+0x44>
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	60fb      	str	r3, [r7, #12]
}
 800ada0:	bf00      	nop
 800ada2:	e7fe      	b.n	800ada2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00a      	beq.n	800adc2 <vPortFree+0x62>
	__asm volatile
 800adac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb0:	f383 8811 	msr	BASEPRI, r3
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	60bb      	str	r3, [r7, #8]
}
 800adbe:	bf00      	nop
 800adc0:	e7fe      	b.n	800adc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	685a      	ldr	r2, [r3, #4]
 800adc6:	4b14      	ldr	r3, [pc, #80]	; (800ae18 <vPortFree+0xb8>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4013      	ands	r3, r2
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d01e      	beq.n	800ae0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d11a      	bne.n	800ae0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	685a      	ldr	r2, [r3, #4]
 800addc:	4b0e      	ldr	r3, [pc, #56]	; (800ae18 <vPortFree+0xb8>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	43db      	mvns	r3, r3
 800ade2:	401a      	ands	r2, r3
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ade8:	f7fe fa74 	bl	80092d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	685a      	ldr	r2, [r3, #4]
 800adf0:	4b0a      	ldr	r3, [pc, #40]	; (800ae1c <vPortFree+0xbc>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4413      	add	r3, r2
 800adf6:	4a09      	ldr	r2, [pc, #36]	; (800ae1c <vPortFree+0xbc>)
 800adf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adfa:	6938      	ldr	r0, [r7, #16]
 800adfc:	f000 f874 	bl	800aee8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ae00:	4b07      	ldr	r3, [pc, #28]	; (800ae20 <vPortFree+0xc0>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	3301      	adds	r3, #1
 800ae06:	4a06      	ldr	r2, [pc, #24]	; (800ae20 <vPortFree+0xc0>)
 800ae08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ae0a:	f7fe fa71 	bl	80092f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae0e:	bf00      	nop
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20005300 	.word	0x20005300
 800ae1c:	200052f0 	.word	0x200052f0
 800ae20:	200052fc 	.word	0x200052fc

0800ae24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ae2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae30:	4b27      	ldr	r3, [pc, #156]	; (800aed0 <prvHeapInit+0xac>)
 800ae32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f003 0307 	and.w	r3, r3, #7
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00c      	beq.n	800ae58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	3307      	adds	r3, #7
 800ae42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f023 0307 	bic.w	r3, r3, #7
 800ae4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae4c:	68ba      	ldr	r2, [r7, #8]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	1ad3      	subs	r3, r2, r3
 800ae52:	4a1f      	ldr	r2, [pc, #124]	; (800aed0 <prvHeapInit+0xac>)
 800ae54:	4413      	add	r3, r2
 800ae56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae5c:	4a1d      	ldr	r2, [pc, #116]	; (800aed4 <prvHeapInit+0xb0>)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae62:	4b1c      	ldr	r3, [pc, #112]	; (800aed4 <prvHeapInit+0xb0>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae70:	2208      	movs	r2, #8
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	1a9b      	subs	r3, r3, r2
 800ae76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f023 0307 	bic.w	r3, r3, #7
 800ae7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	4a15      	ldr	r2, [pc, #84]	; (800aed8 <prvHeapInit+0xb4>)
 800ae84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae86:	4b14      	ldr	r3, [pc, #80]	; (800aed8 <prvHeapInit+0xb4>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae8e:	4b12      	ldr	r3, [pc, #72]	; (800aed8 <prvHeapInit+0xb4>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	1ad2      	subs	r2, r2, r3
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aea4:	4b0c      	ldr	r3, [pc, #48]	; (800aed8 <prvHeapInit+0xb4>)
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	4a0a      	ldr	r2, [pc, #40]	; (800aedc <prvHeapInit+0xb8>)
 800aeb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	4a09      	ldr	r2, [pc, #36]	; (800aee0 <prvHeapInit+0xbc>)
 800aeba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aebc:	4b09      	ldr	r3, [pc, #36]	; (800aee4 <prvHeapInit+0xc0>)
 800aebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aec2:	601a      	str	r2, [r3, #0]
}
 800aec4:	bf00      	nop
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	200016e4 	.word	0x200016e4
 800aed4:	200052e4 	.word	0x200052e4
 800aed8:	200052ec 	.word	0x200052ec
 800aedc:	200052f4 	.word	0x200052f4
 800aee0:	200052f0 	.word	0x200052f0
 800aee4:	20005300 	.word	0x20005300

0800aee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aef0:	4b28      	ldr	r3, [pc, #160]	; (800af94 <prvInsertBlockIntoFreeList+0xac>)
 800aef2:	60fb      	str	r3, [r7, #12]
 800aef4:	e002      	b.n	800aefc <prvInsertBlockIntoFreeList+0x14>
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	429a      	cmp	r2, r3
 800af04:	d8f7      	bhi.n	800aef6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	68ba      	ldr	r2, [r7, #8]
 800af10:	4413      	add	r3, r2
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	429a      	cmp	r2, r3
 800af16:	d108      	bne.n	800af2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	685a      	ldr	r2, [r3, #4]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	441a      	add	r2, r3
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	441a      	add	r2, r3
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d118      	bne.n	800af70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	4b15      	ldr	r3, [pc, #84]	; (800af98 <prvInsertBlockIntoFreeList+0xb0>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	429a      	cmp	r2, r3
 800af48:	d00d      	beq.n	800af66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685a      	ldr	r2, [r3, #4]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	441a      	add	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	601a      	str	r2, [r3, #0]
 800af64:	e008      	b.n	800af78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af66:	4b0c      	ldr	r3, [pc, #48]	; (800af98 <prvInsertBlockIntoFreeList+0xb0>)
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	e003      	b.n	800af78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d002      	beq.n	800af86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af86:	bf00      	nop
 800af88:	3714      	adds	r7, #20
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	200052e4 	.word	0x200052e4
 800af98:	200052ec 	.word	0x200052ec

0800af9c <__errno>:
 800af9c:	4b01      	ldr	r3, [pc, #4]	; (800afa4 <__errno+0x8>)
 800af9e:	6818      	ldr	r0, [r3, #0]
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	20000010 	.word	0x20000010

0800afa8 <std>:
 800afa8:	2300      	movs	r3, #0
 800afaa:	b510      	push	{r4, lr}
 800afac:	4604      	mov	r4, r0
 800afae:	e9c0 3300 	strd	r3, r3, [r0]
 800afb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afb6:	6083      	str	r3, [r0, #8]
 800afb8:	8181      	strh	r1, [r0, #12]
 800afba:	6643      	str	r3, [r0, #100]	; 0x64
 800afbc:	81c2      	strh	r2, [r0, #14]
 800afbe:	6183      	str	r3, [r0, #24]
 800afc0:	4619      	mov	r1, r3
 800afc2:	2208      	movs	r2, #8
 800afc4:	305c      	adds	r0, #92	; 0x5c
 800afc6:	f000 f91a 	bl	800b1fe <memset>
 800afca:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <std+0x38>)
 800afcc:	6263      	str	r3, [r4, #36]	; 0x24
 800afce:	4b05      	ldr	r3, [pc, #20]	; (800afe4 <std+0x3c>)
 800afd0:	62a3      	str	r3, [r4, #40]	; 0x28
 800afd2:	4b05      	ldr	r3, [pc, #20]	; (800afe8 <std+0x40>)
 800afd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afd6:	4b05      	ldr	r3, [pc, #20]	; (800afec <std+0x44>)
 800afd8:	6224      	str	r4, [r4, #32]
 800afda:	6323      	str	r3, [r4, #48]	; 0x30
 800afdc:	bd10      	pop	{r4, pc}
 800afde:	bf00      	nop
 800afe0:	0800b549 	.word	0x0800b549
 800afe4:	0800b56b 	.word	0x0800b56b
 800afe8:	0800b5a3 	.word	0x0800b5a3
 800afec:	0800b5c7 	.word	0x0800b5c7

0800aff0 <_cleanup_r>:
 800aff0:	4901      	ldr	r1, [pc, #4]	; (800aff8 <_cleanup_r+0x8>)
 800aff2:	f000 b8af 	b.w	800b154 <_fwalk_reent>
 800aff6:	bf00      	nop
 800aff8:	0800b8a1 	.word	0x0800b8a1

0800affc <__sfmoreglue>:
 800affc:	b570      	push	{r4, r5, r6, lr}
 800affe:	2268      	movs	r2, #104	; 0x68
 800b000:	1e4d      	subs	r5, r1, #1
 800b002:	4355      	muls	r5, r2
 800b004:	460e      	mov	r6, r1
 800b006:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b00a:	f000 f921 	bl	800b250 <_malloc_r>
 800b00e:	4604      	mov	r4, r0
 800b010:	b140      	cbz	r0, 800b024 <__sfmoreglue+0x28>
 800b012:	2100      	movs	r1, #0
 800b014:	e9c0 1600 	strd	r1, r6, [r0]
 800b018:	300c      	adds	r0, #12
 800b01a:	60a0      	str	r0, [r4, #8]
 800b01c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b020:	f000 f8ed 	bl	800b1fe <memset>
 800b024:	4620      	mov	r0, r4
 800b026:	bd70      	pop	{r4, r5, r6, pc}

0800b028 <__sfp_lock_acquire>:
 800b028:	4801      	ldr	r0, [pc, #4]	; (800b030 <__sfp_lock_acquire+0x8>)
 800b02a:	f000 b8d8 	b.w	800b1de <__retarget_lock_acquire_recursive>
 800b02e:	bf00      	nop
 800b030:	20005305 	.word	0x20005305

0800b034 <__sfp_lock_release>:
 800b034:	4801      	ldr	r0, [pc, #4]	; (800b03c <__sfp_lock_release+0x8>)
 800b036:	f000 b8d3 	b.w	800b1e0 <__retarget_lock_release_recursive>
 800b03a:	bf00      	nop
 800b03c:	20005305 	.word	0x20005305

0800b040 <__sinit_lock_acquire>:
 800b040:	4801      	ldr	r0, [pc, #4]	; (800b048 <__sinit_lock_acquire+0x8>)
 800b042:	f000 b8cc 	b.w	800b1de <__retarget_lock_acquire_recursive>
 800b046:	bf00      	nop
 800b048:	20005306 	.word	0x20005306

0800b04c <__sinit_lock_release>:
 800b04c:	4801      	ldr	r0, [pc, #4]	; (800b054 <__sinit_lock_release+0x8>)
 800b04e:	f000 b8c7 	b.w	800b1e0 <__retarget_lock_release_recursive>
 800b052:	bf00      	nop
 800b054:	20005306 	.word	0x20005306

0800b058 <__sinit>:
 800b058:	b510      	push	{r4, lr}
 800b05a:	4604      	mov	r4, r0
 800b05c:	f7ff fff0 	bl	800b040 <__sinit_lock_acquire>
 800b060:	69a3      	ldr	r3, [r4, #24]
 800b062:	b11b      	cbz	r3, 800b06c <__sinit+0x14>
 800b064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b068:	f7ff bff0 	b.w	800b04c <__sinit_lock_release>
 800b06c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b070:	6523      	str	r3, [r4, #80]	; 0x50
 800b072:	4b13      	ldr	r3, [pc, #76]	; (800b0c0 <__sinit+0x68>)
 800b074:	4a13      	ldr	r2, [pc, #76]	; (800b0c4 <__sinit+0x6c>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	62a2      	str	r2, [r4, #40]	; 0x28
 800b07a:	42a3      	cmp	r3, r4
 800b07c:	bf04      	itt	eq
 800b07e:	2301      	moveq	r3, #1
 800b080:	61a3      	streq	r3, [r4, #24]
 800b082:	4620      	mov	r0, r4
 800b084:	f000 f820 	bl	800b0c8 <__sfp>
 800b088:	6060      	str	r0, [r4, #4]
 800b08a:	4620      	mov	r0, r4
 800b08c:	f000 f81c 	bl	800b0c8 <__sfp>
 800b090:	60a0      	str	r0, [r4, #8]
 800b092:	4620      	mov	r0, r4
 800b094:	f000 f818 	bl	800b0c8 <__sfp>
 800b098:	2200      	movs	r2, #0
 800b09a:	60e0      	str	r0, [r4, #12]
 800b09c:	2104      	movs	r1, #4
 800b09e:	6860      	ldr	r0, [r4, #4]
 800b0a0:	f7ff ff82 	bl	800afa8 <std>
 800b0a4:	68a0      	ldr	r0, [r4, #8]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	2109      	movs	r1, #9
 800b0aa:	f7ff ff7d 	bl	800afa8 <std>
 800b0ae:	68e0      	ldr	r0, [r4, #12]
 800b0b0:	2202      	movs	r2, #2
 800b0b2:	2112      	movs	r1, #18
 800b0b4:	f7ff ff78 	bl	800afa8 <std>
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	61a3      	str	r3, [r4, #24]
 800b0bc:	e7d2      	b.n	800b064 <__sinit+0xc>
 800b0be:	bf00      	nop
 800b0c0:	0800c4d0 	.word	0x0800c4d0
 800b0c4:	0800aff1 	.word	0x0800aff1

0800b0c8 <__sfp>:
 800b0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ca:	4607      	mov	r7, r0
 800b0cc:	f7ff ffac 	bl	800b028 <__sfp_lock_acquire>
 800b0d0:	4b1e      	ldr	r3, [pc, #120]	; (800b14c <__sfp+0x84>)
 800b0d2:	681e      	ldr	r6, [r3, #0]
 800b0d4:	69b3      	ldr	r3, [r6, #24]
 800b0d6:	b913      	cbnz	r3, 800b0de <__sfp+0x16>
 800b0d8:	4630      	mov	r0, r6
 800b0da:	f7ff ffbd 	bl	800b058 <__sinit>
 800b0de:	3648      	adds	r6, #72	; 0x48
 800b0e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	d503      	bpl.n	800b0f0 <__sfp+0x28>
 800b0e8:	6833      	ldr	r3, [r6, #0]
 800b0ea:	b30b      	cbz	r3, 800b130 <__sfp+0x68>
 800b0ec:	6836      	ldr	r6, [r6, #0]
 800b0ee:	e7f7      	b.n	800b0e0 <__sfp+0x18>
 800b0f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b0f4:	b9d5      	cbnz	r5, 800b12c <__sfp+0x64>
 800b0f6:	4b16      	ldr	r3, [pc, #88]	; (800b150 <__sfp+0x88>)
 800b0f8:	60e3      	str	r3, [r4, #12]
 800b0fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0fe:	6665      	str	r5, [r4, #100]	; 0x64
 800b100:	f000 f86c 	bl	800b1dc <__retarget_lock_init_recursive>
 800b104:	f7ff ff96 	bl	800b034 <__sfp_lock_release>
 800b108:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b10c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b110:	6025      	str	r5, [r4, #0]
 800b112:	61a5      	str	r5, [r4, #24]
 800b114:	2208      	movs	r2, #8
 800b116:	4629      	mov	r1, r5
 800b118:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b11c:	f000 f86f 	bl	800b1fe <memset>
 800b120:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b124:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b128:	4620      	mov	r0, r4
 800b12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b12c:	3468      	adds	r4, #104	; 0x68
 800b12e:	e7d9      	b.n	800b0e4 <__sfp+0x1c>
 800b130:	2104      	movs	r1, #4
 800b132:	4638      	mov	r0, r7
 800b134:	f7ff ff62 	bl	800affc <__sfmoreglue>
 800b138:	4604      	mov	r4, r0
 800b13a:	6030      	str	r0, [r6, #0]
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d1d5      	bne.n	800b0ec <__sfp+0x24>
 800b140:	f7ff ff78 	bl	800b034 <__sfp_lock_release>
 800b144:	230c      	movs	r3, #12
 800b146:	603b      	str	r3, [r7, #0]
 800b148:	e7ee      	b.n	800b128 <__sfp+0x60>
 800b14a:	bf00      	nop
 800b14c:	0800c4d0 	.word	0x0800c4d0
 800b150:	ffff0001 	.word	0xffff0001

0800b154 <_fwalk_reent>:
 800b154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b158:	4606      	mov	r6, r0
 800b15a:	4688      	mov	r8, r1
 800b15c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b160:	2700      	movs	r7, #0
 800b162:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b166:	f1b9 0901 	subs.w	r9, r9, #1
 800b16a:	d505      	bpl.n	800b178 <_fwalk_reent+0x24>
 800b16c:	6824      	ldr	r4, [r4, #0]
 800b16e:	2c00      	cmp	r4, #0
 800b170:	d1f7      	bne.n	800b162 <_fwalk_reent+0xe>
 800b172:	4638      	mov	r0, r7
 800b174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b178:	89ab      	ldrh	r3, [r5, #12]
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d907      	bls.n	800b18e <_fwalk_reent+0x3a>
 800b17e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b182:	3301      	adds	r3, #1
 800b184:	d003      	beq.n	800b18e <_fwalk_reent+0x3a>
 800b186:	4629      	mov	r1, r5
 800b188:	4630      	mov	r0, r6
 800b18a:	47c0      	blx	r8
 800b18c:	4307      	orrs	r7, r0
 800b18e:	3568      	adds	r5, #104	; 0x68
 800b190:	e7e9      	b.n	800b166 <_fwalk_reent+0x12>
	...

0800b194 <__libc_init_array>:
 800b194:	b570      	push	{r4, r5, r6, lr}
 800b196:	4d0d      	ldr	r5, [pc, #52]	; (800b1cc <__libc_init_array+0x38>)
 800b198:	4c0d      	ldr	r4, [pc, #52]	; (800b1d0 <__libc_init_array+0x3c>)
 800b19a:	1b64      	subs	r4, r4, r5
 800b19c:	10a4      	asrs	r4, r4, #2
 800b19e:	2600      	movs	r6, #0
 800b1a0:	42a6      	cmp	r6, r4
 800b1a2:	d109      	bne.n	800b1b8 <__libc_init_array+0x24>
 800b1a4:	4d0b      	ldr	r5, [pc, #44]	; (800b1d4 <__libc_init_array+0x40>)
 800b1a6:	4c0c      	ldr	r4, [pc, #48]	; (800b1d8 <__libc_init_array+0x44>)
 800b1a8:	f000 ffa8 	bl	800c0fc <_init>
 800b1ac:	1b64      	subs	r4, r4, r5
 800b1ae:	10a4      	asrs	r4, r4, #2
 800b1b0:	2600      	movs	r6, #0
 800b1b2:	42a6      	cmp	r6, r4
 800b1b4:	d105      	bne.n	800b1c2 <__libc_init_array+0x2e>
 800b1b6:	bd70      	pop	{r4, r5, r6, pc}
 800b1b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1bc:	4798      	blx	r3
 800b1be:	3601      	adds	r6, #1
 800b1c0:	e7ee      	b.n	800b1a0 <__libc_init_array+0xc>
 800b1c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1c6:	4798      	blx	r3
 800b1c8:	3601      	adds	r6, #1
 800b1ca:	e7f2      	b.n	800b1b2 <__libc_init_array+0x1e>
 800b1cc:	0800c510 	.word	0x0800c510
 800b1d0:	0800c510 	.word	0x0800c510
 800b1d4:	0800c510 	.word	0x0800c510
 800b1d8:	0800c514 	.word	0x0800c514

0800b1dc <__retarget_lock_init_recursive>:
 800b1dc:	4770      	bx	lr

0800b1de <__retarget_lock_acquire_recursive>:
 800b1de:	4770      	bx	lr

0800b1e0 <__retarget_lock_release_recursive>:
 800b1e0:	4770      	bx	lr

0800b1e2 <memcpy>:
 800b1e2:	440a      	add	r2, r1
 800b1e4:	4291      	cmp	r1, r2
 800b1e6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1ea:	d100      	bne.n	800b1ee <memcpy+0xc>
 800b1ec:	4770      	bx	lr
 800b1ee:	b510      	push	{r4, lr}
 800b1f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1f8:	4291      	cmp	r1, r2
 800b1fa:	d1f9      	bne.n	800b1f0 <memcpy+0xe>
 800b1fc:	bd10      	pop	{r4, pc}

0800b1fe <memset>:
 800b1fe:	4402      	add	r2, r0
 800b200:	4603      	mov	r3, r0
 800b202:	4293      	cmp	r3, r2
 800b204:	d100      	bne.n	800b208 <memset+0xa>
 800b206:	4770      	bx	lr
 800b208:	f803 1b01 	strb.w	r1, [r3], #1
 800b20c:	e7f9      	b.n	800b202 <memset+0x4>
	...

0800b210 <sbrk_aligned>:
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	4e0e      	ldr	r6, [pc, #56]	; (800b24c <sbrk_aligned+0x3c>)
 800b214:	460c      	mov	r4, r1
 800b216:	6831      	ldr	r1, [r6, #0]
 800b218:	4605      	mov	r5, r0
 800b21a:	b911      	cbnz	r1, 800b222 <sbrk_aligned+0x12>
 800b21c:	f000 f984 	bl	800b528 <_sbrk_r>
 800b220:	6030      	str	r0, [r6, #0]
 800b222:	4621      	mov	r1, r4
 800b224:	4628      	mov	r0, r5
 800b226:	f000 f97f 	bl	800b528 <_sbrk_r>
 800b22a:	1c43      	adds	r3, r0, #1
 800b22c:	d00a      	beq.n	800b244 <sbrk_aligned+0x34>
 800b22e:	1cc4      	adds	r4, r0, #3
 800b230:	f024 0403 	bic.w	r4, r4, #3
 800b234:	42a0      	cmp	r0, r4
 800b236:	d007      	beq.n	800b248 <sbrk_aligned+0x38>
 800b238:	1a21      	subs	r1, r4, r0
 800b23a:	4628      	mov	r0, r5
 800b23c:	f000 f974 	bl	800b528 <_sbrk_r>
 800b240:	3001      	adds	r0, #1
 800b242:	d101      	bne.n	800b248 <sbrk_aligned+0x38>
 800b244:	f04f 34ff 	mov.w	r4, #4294967295
 800b248:	4620      	mov	r0, r4
 800b24a:	bd70      	pop	{r4, r5, r6, pc}
 800b24c:	2000530c 	.word	0x2000530c

0800b250 <_malloc_r>:
 800b250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b254:	1ccd      	adds	r5, r1, #3
 800b256:	f025 0503 	bic.w	r5, r5, #3
 800b25a:	3508      	adds	r5, #8
 800b25c:	2d0c      	cmp	r5, #12
 800b25e:	bf38      	it	cc
 800b260:	250c      	movcc	r5, #12
 800b262:	2d00      	cmp	r5, #0
 800b264:	4607      	mov	r7, r0
 800b266:	db01      	blt.n	800b26c <_malloc_r+0x1c>
 800b268:	42a9      	cmp	r1, r5
 800b26a:	d905      	bls.n	800b278 <_malloc_r+0x28>
 800b26c:	230c      	movs	r3, #12
 800b26e:	603b      	str	r3, [r7, #0]
 800b270:	2600      	movs	r6, #0
 800b272:	4630      	mov	r0, r6
 800b274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b278:	4e2e      	ldr	r6, [pc, #184]	; (800b334 <_malloc_r+0xe4>)
 800b27a:	f000 fbc5 	bl	800ba08 <__malloc_lock>
 800b27e:	6833      	ldr	r3, [r6, #0]
 800b280:	461c      	mov	r4, r3
 800b282:	bb34      	cbnz	r4, 800b2d2 <_malloc_r+0x82>
 800b284:	4629      	mov	r1, r5
 800b286:	4638      	mov	r0, r7
 800b288:	f7ff ffc2 	bl	800b210 <sbrk_aligned>
 800b28c:	1c43      	adds	r3, r0, #1
 800b28e:	4604      	mov	r4, r0
 800b290:	d14d      	bne.n	800b32e <_malloc_r+0xde>
 800b292:	6834      	ldr	r4, [r6, #0]
 800b294:	4626      	mov	r6, r4
 800b296:	2e00      	cmp	r6, #0
 800b298:	d140      	bne.n	800b31c <_malloc_r+0xcc>
 800b29a:	6823      	ldr	r3, [r4, #0]
 800b29c:	4631      	mov	r1, r6
 800b29e:	4638      	mov	r0, r7
 800b2a0:	eb04 0803 	add.w	r8, r4, r3
 800b2a4:	f000 f940 	bl	800b528 <_sbrk_r>
 800b2a8:	4580      	cmp	r8, r0
 800b2aa:	d13a      	bne.n	800b322 <_malloc_r+0xd2>
 800b2ac:	6821      	ldr	r1, [r4, #0]
 800b2ae:	3503      	adds	r5, #3
 800b2b0:	1a6d      	subs	r5, r5, r1
 800b2b2:	f025 0503 	bic.w	r5, r5, #3
 800b2b6:	3508      	adds	r5, #8
 800b2b8:	2d0c      	cmp	r5, #12
 800b2ba:	bf38      	it	cc
 800b2bc:	250c      	movcc	r5, #12
 800b2be:	4629      	mov	r1, r5
 800b2c0:	4638      	mov	r0, r7
 800b2c2:	f7ff ffa5 	bl	800b210 <sbrk_aligned>
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	d02b      	beq.n	800b322 <_malloc_r+0xd2>
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	442b      	add	r3, r5
 800b2ce:	6023      	str	r3, [r4, #0]
 800b2d0:	e00e      	b.n	800b2f0 <_malloc_r+0xa0>
 800b2d2:	6822      	ldr	r2, [r4, #0]
 800b2d4:	1b52      	subs	r2, r2, r5
 800b2d6:	d41e      	bmi.n	800b316 <_malloc_r+0xc6>
 800b2d8:	2a0b      	cmp	r2, #11
 800b2da:	d916      	bls.n	800b30a <_malloc_r+0xba>
 800b2dc:	1961      	adds	r1, r4, r5
 800b2de:	42a3      	cmp	r3, r4
 800b2e0:	6025      	str	r5, [r4, #0]
 800b2e2:	bf18      	it	ne
 800b2e4:	6059      	strne	r1, [r3, #4]
 800b2e6:	6863      	ldr	r3, [r4, #4]
 800b2e8:	bf08      	it	eq
 800b2ea:	6031      	streq	r1, [r6, #0]
 800b2ec:	5162      	str	r2, [r4, r5]
 800b2ee:	604b      	str	r3, [r1, #4]
 800b2f0:	4638      	mov	r0, r7
 800b2f2:	f104 060b 	add.w	r6, r4, #11
 800b2f6:	f000 fb8d 	bl	800ba14 <__malloc_unlock>
 800b2fa:	f026 0607 	bic.w	r6, r6, #7
 800b2fe:	1d23      	adds	r3, r4, #4
 800b300:	1af2      	subs	r2, r6, r3
 800b302:	d0b6      	beq.n	800b272 <_malloc_r+0x22>
 800b304:	1b9b      	subs	r3, r3, r6
 800b306:	50a3      	str	r3, [r4, r2]
 800b308:	e7b3      	b.n	800b272 <_malloc_r+0x22>
 800b30a:	6862      	ldr	r2, [r4, #4]
 800b30c:	42a3      	cmp	r3, r4
 800b30e:	bf0c      	ite	eq
 800b310:	6032      	streq	r2, [r6, #0]
 800b312:	605a      	strne	r2, [r3, #4]
 800b314:	e7ec      	b.n	800b2f0 <_malloc_r+0xa0>
 800b316:	4623      	mov	r3, r4
 800b318:	6864      	ldr	r4, [r4, #4]
 800b31a:	e7b2      	b.n	800b282 <_malloc_r+0x32>
 800b31c:	4634      	mov	r4, r6
 800b31e:	6876      	ldr	r6, [r6, #4]
 800b320:	e7b9      	b.n	800b296 <_malloc_r+0x46>
 800b322:	230c      	movs	r3, #12
 800b324:	603b      	str	r3, [r7, #0]
 800b326:	4638      	mov	r0, r7
 800b328:	f000 fb74 	bl	800ba14 <__malloc_unlock>
 800b32c:	e7a1      	b.n	800b272 <_malloc_r+0x22>
 800b32e:	6025      	str	r5, [r4, #0]
 800b330:	e7de      	b.n	800b2f0 <_malloc_r+0xa0>
 800b332:	bf00      	nop
 800b334:	20005308 	.word	0x20005308

0800b338 <iprintf>:
 800b338:	b40f      	push	{r0, r1, r2, r3}
 800b33a:	4b0a      	ldr	r3, [pc, #40]	; (800b364 <iprintf+0x2c>)
 800b33c:	b513      	push	{r0, r1, r4, lr}
 800b33e:	681c      	ldr	r4, [r3, #0]
 800b340:	b124      	cbz	r4, 800b34c <iprintf+0x14>
 800b342:	69a3      	ldr	r3, [r4, #24]
 800b344:	b913      	cbnz	r3, 800b34c <iprintf+0x14>
 800b346:	4620      	mov	r0, r4
 800b348:	f7ff fe86 	bl	800b058 <__sinit>
 800b34c:	ab05      	add	r3, sp, #20
 800b34e:	9a04      	ldr	r2, [sp, #16]
 800b350:	68a1      	ldr	r1, [r4, #8]
 800b352:	9301      	str	r3, [sp, #4]
 800b354:	4620      	mov	r0, r4
 800b356:	f000 fbd9 	bl	800bb0c <_vfiprintf_r>
 800b35a:	b002      	add	sp, #8
 800b35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b360:	b004      	add	sp, #16
 800b362:	4770      	bx	lr
 800b364:	20000010 	.word	0x20000010

0800b368 <_puts_r>:
 800b368:	b570      	push	{r4, r5, r6, lr}
 800b36a:	460e      	mov	r6, r1
 800b36c:	4605      	mov	r5, r0
 800b36e:	b118      	cbz	r0, 800b378 <_puts_r+0x10>
 800b370:	6983      	ldr	r3, [r0, #24]
 800b372:	b90b      	cbnz	r3, 800b378 <_puts_r+0x10>
 800b374:	f7ff fe70 	bl	800b058 <__sinit>
 800b378:	69ab      	ldr	r3, [r5, #24]
 800b37a:	68ac      	ldr	r4, [r5, #8]
 800b37c:	b913      	cbnz	r3, 800b384 <_puts_r+0x1c>
 800b37e:	4628      	mov	r0, r5
 800b380:	f7ff fe6a 	bl	800b058 <__sinit>
 800b384:	4b2c      	ldr	r3, [pc, #176]	; (800b438 <_puts_r+0xd0>)
 800b386:	429c      	cmp	r4, r3
 800b388:	d120      	bne.n	800b3cc <_puts_r+0x64>
 800b38a:	686c      	ldr	r4, [r5, #4]
 800b38c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b38e:	07db      	lsls	r3, r3, #31
 800b390:	d405      	bmi.n	800b39e <_puts_r+0x36>
 800b392:	89a3      	ldrh	r3, [r4, #12]
 800b394:	0598      	lsls	r0, r3, #22
 800b396:	d402      	bmi.n	800b39e <_puts_r+0x36>
 800b398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b39a:	f7ff ff20 	bl	800b1de <__retarget_lock_acquire_recursive>
 800b39e:	89a3      	ldrh	r3, [r4, #12]
 800b3a0:	0719      	lsls	r1, r3, #28
 800b3a2:	d51d      	bpl.n	800b3e0 <_puts_r+0x78>
 800b3a4:	6923      	ldr	r3, [r4, #16]
 800b3a6:	b1db      	cbz	r3, 800b3e0 <_puts_r+0x78>
 800b3a8:	3e01      	subs	r6, #1
 800b3aa:	68a3      	ldr	r3, [r4, #8]
 800b3ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	60a3      	str	r3, [r4, #8]
 800b3b4:	bb39      	cbnz	r1, 800b406 <_puts_r+0x9e>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	da38      	bge.n	800b42c <_puts_r+0xc4>
 800b3ba:	4622      	mov	r2, r4
 800b3bc:	210a      	movs	r1, #10
 800b3be:	4628      	mov	r0, r5
 800b3c0:	f000 f906 	bl	800b5d0 <__swbuf_r>
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d011      	beq.n	800b3ec <_puts_r+0x84>
 800b3c8:	250a      	movs	r5, #10
 800b3ca:	e011      	b.n	800b3f0 <_puts_r+0x88>
 800b3cc:	4b1b      	ldr	r3, [pc, #108]	; (800b43c <_puts_r+0xd4>)
 800b3ce:	429c      	cmp	r4, r3
 800b3d0:	d101      	bne.n	800b3d6 <_puts_r+0x6e>
 800b3d2:	68ac      	ldr	r4, [r5, #8]
 800b3d4:	e7da      	b.n	800b38c <_puts_r+0x24>
 800b3d6:	4b1a      	ldr	r3, [pc, #104]	; (800b440 <_puts_r+0xd8>)
 800b3d8:	429c      	cmp	r4, r3
 800b3da:	bf08      	it	eq
 800b3dc:	68ec      	ldreq	r4, [r5, #12]
 800b3de:	e7d5      	b.n	800b38c <_puts_r+0x24>
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f000 f958 	bl	800b698 <__swsetup_r>
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	d0dd      	beq.n	800b3a8 <_puts_r+0x40>
 800b3ec:	f04f 35ff 	mov.w	r5, #4294967295
 800b3f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3f2:	07da      	lsls	r2, r3, #31
 800b3f4:	d405      	bmi.n	800b402 <_puts_r+0x9a>
 800b3f6:	89a3      	ldrh	r3, [r4, #12]
 800b3f8:	059b      	lsls	r3, r3, #22
 800b3fa:	d402      	bmi.n	800b402 <_puts_r+0x9a>
 800b3fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3fe:	f7ff feef 	bl	800b1e0 <__retarget_lock_release_recursive>
 800b402:	4628      	mov	r0, r5
 800b404:	bd70      	pop	{r4, r5, r6, pc}
 800b406:	2b00      	cmp	r3, #0
 800b408:	da04      	bge.n	800b414 <_puts_r+0xac>
 800b40a:	69a2      	ldr	r2, [r4, #24]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	dc06      	bgt.n	800b41e <_puts_r+0xb6>
 800b410:	290a      	cmp	r1, #10
 800b412:	d004      	beq.n	800b41e <_puts_r+0xb6>
 800b414:	6823      	ldr	r3, [r4, #0]
 800b416:	1c5a      	adds	r2, r3, #1
 800b418:	6022      	str	r2, [r4, #0]
 800b41a:	7019      	strb	r1, [r3, #0]
 800b41c:	e7c5      	b.n	800b3aa <_puts_r+0x42>
 800b41e:	4622      	mov	r2, r4
 800b420:	4628      	mov	r0, r5
 800b422:	f000 f8d5 	bl	800b5d0 <__swbuf_r>
 800b426:	3001      	adds	r0, #1
 800b428:	d1bf      	bne.n	800b3aa <_puts_r+0x42>
 800b42a:	e7df      	b.n	800b3ec <_puts_r+0x84>
 800b42c:	6823      	ldr	r3, [r4, #0]
 800b42e:	250a      	movs	r5, #10
 800b430:	1c5a      	adds	r2, r3, #1
 800b432:	6022      	str	r2, [r4, #0]
 800b434:	701d      	strb	r5, [r3, #0]
 800b436:	e7db      	b.n	800b3f0 <_puts_r+0x88>
 800b438:	0800c490 	.word	0x0800c490
 800b43c:	0800c4b0 	.word	0x0800c4b0
 800b440:	0800c470 	.word	0x0800c470

0800b444 <puts>:
 800b444:	4b02      	ldr	r3, [pc, #8]	; (800b450 <puts+0xc>)
 800b446:	4601      	mov	r1, r0
 800b448:	6818      	ldr	r0, [r3, #0]
 800b44a:	f7ff bf8d 	b.w	800b368 <_puts_r>
 800b44e:	bf00      	nop
 800b450:	20000010 	.word	0x20000010

0800b454 <cleanup_glue>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	460c      	mov	r4, r1
 800b458:	6809      	ldr	r1, [r1, #0]
 800b45a:	4605      	mov	r5, r0
 800b45c:	b109      	cbz	r1, 800b462 <cleanup_glue+0xe>
 800b45e:	f7ff fff9 	bl	800b454 <cleanup_glue>
 800b462:	4621      	mov	r1, r4
 800b464:	4628      	mov	r0, r5
 800b466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b46a:	f000 bad9 	b.w	800ba20 <_free_r>
	...

0800b470 <_reclaim_reent>:
 800b470:	4b2c      	ldr	r3, [pc, #176]	; (800b524 <_reclaim_reent+0xb4>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4283      	cmp	r3, r0
 800b476:	b570      	push	{r4, r5, r6, lr}
 800b478:	4604      	mov	r4, r0
 800b47a:	d051      	beq.n	800b520 <_reclaim_reent+0xb0>
 800b47c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b47e:	b143      	cbz	r3, 800b492 <_reclaim_reent+0x22>
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d14a      	bne.n	800b51c <_reclaim_reent+0xac>
 800b486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b488:	6819      	ldr	r1, [r3, #0]
 800b48a:	b111      	cbz	r1, 800b492 <_reclaim_reent+0x22>
 800b48c:	4620      	mov	r0, r4
 800b48e:	f000 fac7 	bl	800ba20 <_free_r>
 800b492:	6961      	ldr	r1, [r4, #20]
 800b494:	b111      	cbz	r1, 800b49c <_reclaim_reent+0x2c>
 800b496:	4620      	mov	r0, r4
 800b498:	f000 fac2 	bl	800ba20 <_free_r>
 800b49c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b49e:	b111      	cbz	r1, 800b4a6 <_reclaim_reent+0x36>
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f000 fabd 	bl	800ba20 <_free_r>
 800b4a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b4a8:	b111      	cbz	r1, 800b4b0 <_reclaim_reent+0x40>
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f000 fab8 	bl	800ba20 <_free_r>
 800b4b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b4b2:	b111      	cbz	r1, 800b4ba <_reclaim_reent+0x4a>
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f000 fab3 	bl	800ba20 <_free_r>
 800b4ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b4bc:	b111      	cbz	r1, 800b4c4 <_reclaim_reent+0x54>
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f000 faae 	bl	800ba20 <_free_r>
 800b4c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b4c6:	b111      	cbz	r1, 800b4ce <_reclaim_reent+0x5e>
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f000 faa9 	bl	800ba20 <_free_r>
 800b4ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b4d0:	b111      	cbz	r1, 800b4d8 <_reclaim_reent+0x68>
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f000 faa4 	bl	800ba20 <_free_r>
 800b4d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4da:	b111      	cbz	r1, 800b4e2 <_reclaim_reent+0x72>
 800b4dc:	4620      	mov	r0, r4
 800b4de:	f000 fa9f 	bl	800ba20 <_free_r>
 800b4e2:	69a3      	ldr	r3, [r4, #24]
 800b4e4:	b1e3      	cbz	r3, 800b520 <_reclaim_reent+0xb0>
 800b4e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	4798      	blx	r3
 800b4ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b4ee:	b1b9      	cbz	r1, 800b520 <_reclaim_reent+0xb0>
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b4f6:	f7ff bfad 	b.w	800b454 <cleanup_glue>
 800b4fa:	5949      	ldr	r1, [r1, r5]
 800b4fc:	b941      	cbnz	r1, 800b510 <_reclaim_reent+0xa0>
 800b4fe:	3504      	adds	r5, #4
 800b500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b502:	2d80      	cmp	r5, #128	; 0x80
 800b504:	68d9      	ldr	r1, [r3, #12]
 800b506:	d1f8      	bne.n	800b4fa <_reclaim_reent+0x8a>
 800b508:	4620      	mov	r0, r4
 800b50a:	f000 fa89 	bl	800ba20 <_free_r>
 800b50e:	e7ba      	b.n	800b486 <_reclaim_reent+0x16>
 800b510:	680e      	ldr	r6, [r1, #0]
 800b512:	4620      	mov	r0, r4
 800b514:	f000 fa84 	bl	800ba20 <_free_r>
 800b518:	4631      	mov	r1, r6
 800b51a:	e7ef      	b.n	800b4fc <_reclaim_reent+0x8c>
 800b51c:	2500      	movs	r5, #0
 800b51e:	e7ef      	b.n	800b500 <_reclaim_reent+0x90>
 800b520:	bd70      	pop	{r4, r5, r6, pc}
 800b522:	bf00      	nop
 800b524:	20000010 	.word	0x20000010

0800b528 <_sbrk_r>:
 800b528:	b538      	push	{r3, r4, r5, lr}
 800b52a:	4d06      	ldr	r5, [pc, #24]	; (800b544 <_sbrk_r+0x1c>)
 800b52c:	2300      	movs	r3, #0
 800b52e:	4604      	mov	r4, r0
 800b530:	4608      	mov	r0, r1
 800b532:	602b      	str	r3, [r5, #0]
 800b534:	f7f6 fb7e 	bl	8001c34 <_sbrk>
 800b538:	1c43      	adds	r3, r0, #1
 800b53a:	d102      	bne.n	800b542 <_sbrk_r+0x1a>
 800b53c:	682b      	ldr	r3, [r5, #0]
 800b53e:	b103      	cbz	r3, 800b542 <_sbrk_r+0x1a>
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	bd38      	pop	{r3, r4, r5, pc}
 800b544:	20005310 	.word	0x20005310

0800b548 <__sread>:
 800b548:	b510      	push	{r4, lr}
 800b54a:	460c      	mov	r4, r1
 800b54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b550:	f000 fda0 	bl	800c094 <_read_r>
 800b554:	2800      	cmp	r0, #0
 800b556:	bfab      	itete	ge
 800b558:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b55a:	89a3      	ldrhlt	r3, [r4, #12]
 800b55c:	181b      	addge	r3, r3, r0
 800b55e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b562:	bfac      	ite	ge
 800b564:	6563      	strge	r3, [r4, #84]	; 0x54
 800b566:	81a3      	strhlt	r3, [r4, #12]
 800b568:	bd10      	pop	{r4, pc}

0800b56a <__swrite>:
 800b56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b56e:	461f      	mov	r7, r3
 800b570:	898b      	ldrh	r3, [r1, #12]
 800b572:	05db      	lsls	r3, r3, #23
 800b574:	4605      	mov	r5, r0
 800b576:	460c      	mov	r4, r1
 800b578:	4616      	mov	r6, r2
 800b57a:	d505      	bpl.n	800b588 <__swrite+0x1e>
 800b57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b580:	2302      	movs	r3, #2
 800b582:	2200      	movs	r2, #0
 800b584:	f000 f9c8 	bl	800b918 <_lseek_r>
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b58e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b592:	81a3      	strh	r3, [r4, #12]
 800b594:	4632      	mov	r2, r6
 800b596:	463b      	mov	r3, r7
 800b598:	4628      	mov	r0, r5
 800b59a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b59e:	f000 b869 	b.w	800b674 <_write_r>

0800b5a2 <__sseek>:
 800b5a2:	b510      	push	{r4, lr}
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5aa:	f000 f9b5 	bl	800b918 <_lseek_r>
 800b5ae:	1c43      	adds	r3, r0, #1
 800b5b0:	89a3      	ldrh	r3, [r4, #12]
 800b5b2:	bf15      	itete	ne
 800b5b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5be:	81a3      	strheq	r3, [r4, #12]
 800b5c0:	bf18      	it	ne
 800b5c2:	81a3      	strhne	r3, [r4, #12]
 800b5c4:	bd10      	pop	{r4, pc}

0800b5c6 <__sclose>:
 800b5c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ca:	f000 b8d3 	b.w	800b774 <_close_r>
	...

0800b5d0 <__swbuf_r>:
 800b5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d2:	460e      	mov	r6, r1
 800b5d4:	4614      	mov	r4, r2
 800b5d6:	4605      	mov	r5, r0
 800b5d8:	b118      	cbz	r0, 800b5e2 <__swbuf_r+0x12>
 800b5da:	6983      	ldr	r3, [r0, #24]
 800b5dc:	b90b      	cbnz	r3, 800b5e2 <__swbuf_r+0x12>
 800b5de:	f7ff fd3b 	bl	800b058 <__sinit>
 800b5e2:	4b21      	ldr	r3, [pc, #132]	; (800b668 <__swbuf_r+0x98>)
 800b5e4:	429c      	cmp	r4, r3
 800b5e6:	d12b      	bne.n	800b640 <__swbuf_r+0x70>
 800b5e8:	686c      	ldr	r4, [r5, #4]
 800b5ea:	69a3      	ldr	r3, [r4, #24]
 800b5ec:	60a3      	str	r3, [r4, #8]
 800b5ee:	89a3      	ldrh	r3, [r4, #12]
 800b5f0:	071a      	lsls	r2, r3, #28
 800b5f2:	d52f      	bpl.n	800b654 <__swbuf_r+0x84>
 800b5f4:	6923      	ldr	r3, [r4, #16]
 800b5f6:	b36b      	cbz	r3, 800b654 <__swbuf_r+0x84>
 800b5f8:	6923      	ldr	r3, [r4, #16]
 800b5fa:	6820      	ldr	r0, [r4, #0]
 800b5fc:	1ac0      	subs	r0, r0, r3
 800b5fe:	6963      	ldr	r3, [r4, #20]
 800b600:	b2f6      	uxtb	r6, r6
 800b602:	4283      	cmp	r3, r0
 800b604:	4637      	mov	r7, r6
 800b606:	dc04      	bgt.n	800b612 <__swbuf_r+0x42>
 800b608:	4621      	mov	r1, r4
 800b60a:	4628      	mov	r0, r5
 800b60c:	f000 f948 	bl	800b8a0 <_fflush_r>
 800b610:	bb30      	cbnz	r0, 800b660 <__swbuf_r+0x90>
 800b612:	68a3      	ldr	r3, [r4, #8]
 800b614:	3b01      	subs	r3, #1
 800b616:	60a3      	str	r3, [r4, #8]
 800b618:	6823      	ldr	r3, [r4, #0]
 800b61a:	1c5a      	adds	r2, r3, #1
 800b61c:	6022      	str	r2, [r4, #0]
 800b61e:	701e      	strb	r6, [r3, #0]
 800b620:	6963      	ldr	r3, [r4, #20]
 800b622:	3001      	adds	r0, #1
 800b624:	4283      	cmp	r3, r0
 800b626:	d004      	beq.n	800b632 <__swbuf_r+0x62>
 800b628:	89a3      	ldrh	r3, [r4, #12]
 800b62a:	07db      	lsls	r3, r3, #31
 800b62c:	d506      	bpl.n	800b63c <__swbuf_r+0x6c>
 800b62e:	2e0a      	cmp	r6, #10
 800b630:	d104      	bne.n	800b63c <__swbuf_r+0x6c>
 800b632:	4621      	mov	r1, r4
 800b634:	4628      	mov	r0, r5
 800b636:	f000 f933 	bl	800b8a0 <_fflush_r>
 800b63a:	b988      	cbnz	r0, 800b660 <__swbuf_r+0x90>
 800b63c:	4638      	mov	r0, r7
 800b63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b640:	4b0a      	ldr	r3, [pc, #40]	; (800b66c <__swbuf_r+0x9c>)
 800b642:	429c      	cmp	r4, r3
 800b644:	d101      	bne.n	800b64a <__swbuf_r+0x7a>
 800b646:	68ac      	ldr	r4, [r5, #8]
 800b648:	e7cf      	b.n	800b5ea <__swbuf_r+0x1a>
 800b64a:	4b09      	ldr	r3, [pc, #36]	; (800b670 <__swbuf_r+0xa0>)
 800b64c:	429c      	cmp	r4, r3
 800b64e:	bf08      	it	eq
 800b650:	68ec      	ldreq	r4, [r5, #12]
 800b652:	e7ca      	b.n	800b5ea <__swbuf_r+0x1a>
 800b654:	4621      	mov	r1, r4
 800b656:	4628      	mov	r0, r5
 800b658:	f000 f81e 	bl	800b698 <__swsetup_r>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d0cb      	beq.n	800b5f8 <__swbuf_r+0x28>
 800b660:	f04f 37ff 	mov.w	r7, #4294967295
 800b664:	e7ea      	b.n	800b63c <__swbuf_r+0x6c>
 800b666:	bf00      	nop
 800b668:	0800c490 	.word	0x0800c490
 800b66c:	0800c4b0 	.word	0x0800c4b0
 800b670:	0800c470 	.word	0x0800c470

0800b674 <_write_r>:
 800b674:	b538      	push	{r3, r4, r5, lr}
 800b676:	4d07      	ldr	r5, [pc, #28]	; (800b694 <_write_r+0x20>)
 800b678:	4604      	mov	r4, r0
 800b67a:	4608      	mov	r0, r1
 800b67c:	4611      	mov	r1, r2
 800b67e:	2200      	movs	r2, #0
 800b680:	602a      	str	r2, [r5, #0]
 800b682:	461a      	mov	r2, r3
 800b684:	f7f6 f828 	bl	80016d8 <_write>
 800b688:	1c43      	adds	r3, r0, #1
 800b68a:	d102      	bne.n	800b692 <_write_r+0x1e>
 800b68c:	682b      	ldr	r3, [r5, #0]
 800b68e:	b103      	cbz	r3, 800b692 <_write_r+0x1e>
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	bd38      	pop	{r3, r4, r5, pc}
 800b694:	20005310 	.word	0x20005310

0800b698 <__swsetup_r>:
 800b698:	4b32      	ldr	r3, [pc, #200]	; (800b764 <__swsetup_r+0xcc>)
 800b69a:	b570      	push	{r4, r5, r6, lr}
 800b69c:	681d      	ldr	r5, [r3, #0]
 800b69e:	4606      	mov	r6, r0
 800b6a0:	460c      	mov	r4, r1
 800b6a2:	b125      	cbz	r5, 800b6ae <__swsetup_r+0x16>
 800b6a4:	69ab      	ldr	r3, [r5, #24]
 800b6a6:	b913      	cbnz	r3, 800b6ae <__swsetup_r+0x16>
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	f7ff fcd5 	bl	800b058 <__sinit>
 800b6ae:	4b2e      	ldr	r3, [pc, #184]	; (800b768 <__swsetup_r+0xd0>)
 800b6b0:	429c      	cmp	r4, r3
 800b6b2:	d10f      	bne.n	800b6d4 <__swsetup_r+0x3c>
 800b6b4:	686c      	ldr	r4, [r5, #4]
 800b6b6:	89a3      	ldrh	r3, [r4, #12]
 800b6b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6bc:	0719      	lsls	r1, r3, #28
 800b6be:	d42c      	bmi.n	800b71a <__swsetup_r+0x82>
 800b6c0:	06dd      	lsls	r5, r3, #27
 800b6c2:	d411      	bmi.n	800b6e8 <__swsetup_r+0x50>
 800b6c4:	2309      	movs	r3, #9
 800b6c6:	6033      	str	r3, [r6, #0]
 800b6c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6cc:	81a3      	strh	r3, [r4, #12]
 800b6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d2:	e03e      	b.n	800b752 <__swsetup_r+0xba>
 800b6d4:	4b25      	ldr	r3, [pc, #148]	; (800b76c <__swsetup_r+0xd4>)
 800b6d6:	429c      	cmp	r4, r3
 800b6d8:	d101      	bne.n	800b6de <__swsetup_r+0x46>
 800b6da:	68ac      	ldr	r4, [r5, #8]
 800b6dc:	e7eb      	b.n	800b6b6 <__swsetup_r+0x1e>
 800b6de:	4b24      	ldr	r3, [pc, #144]	; (800b770 <__swsetup_r+0xd8>)
 800b6e0:	429c      	cmp	r4, r3
 800b6e2:	bf08      	it	eq
 800b6e4:	68ec      	ldreq	r4, [r5, #12]
 800b6e6:	e7e6      	b.n	800b6b6 <__swsetup_r+0x1e>
 800b6e8:	0758      	lsls	r0, r3, #29
 800b6ea:	d512      	bpl.n	800b712 <__swsetup_r+0x7a>
 800b6ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6ee:	b141      	cbz	r1, 800b702 <__swsetup_r+0x6a>
 800b6f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6f4:	4299      	cmp	r1, r3
 800b6f6:	d002      	beq.n	800b6fe <__swsetup_r+0x66>
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	f000 f991 	bl	800ba20 <_free_r>
 800b6fe:	2300      	movs	r3, #0
 800b700:	6363      	str	r3, [r4, #52]	; 0x34
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b708:	81a3      	strh	r3, [r4, #12]
 800b70a:	2300      	movs	r3, #0
 800b70c:	6063      	str	r3, [r4, #4]
 800b70e:	6923      	ldr	r3, [r4, #16]
 800b710:	6023      	str	r3, [r4, #0]
 800b712:	89a3      	ldrh	r3, [r4, #12]
 800b714:	f043 0308 	orr.w	r3, r3, #8
 800b718:	81a3      	strh	r3, [r4, #12]
 800b71a:	6923      	ldr	r3, [r4, #16]
 800b71c:	b94b      	cbnz	r3, 800b732 <__swsetup_r+0x9a>
 800b71e:	89a3      	ldrh	r3, [r4, #12]
 800b720:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b728:	d003      	beq.n	800b732 <__swsetup_r+0x9a>
 800b72a:	4621      	mov	r1, r4
 800b72c:	4630      	mov	r0, r6
 800b72e:	f000 f92b 	bl	800b988 <__smakebuf_r>
 800b732:	89a0      	ldrh	r0, [r4, #12]
 800b734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b738:	f010 0301 	ands.w	r3, r0, #1
 800b73c:	d00a      	beq.n	800b754 <__swsetup_r+0xbc>
 800b73e:	2300      	movs	r3, #0
 800b740:	60a3      	str	r3, [r4, #8]
 800b742:	6963      	ldr	r3, [r4, #20]
 800b744:	425b      	negs	r3, r3
 800b746:	61a3      	str	r3, [r4, #24]
 800b748:	6923      	ldr	r3, [r4, #16]
 800b74a:	b943      	cbnz	r3, 800b75e <__swsetup_r+0xc6>
 800b74c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b750:	d1ba      	bne.n	800b6c8 <__swsetup_r+0x30>
 800b752:	bd70      	pop	{r4, r5, r6, pc}
 800b754:	0781      	lsls	r1, r0, #30
 800b756:	bf58      	it	pl
 800b758:	6963      	ldrpl	r3, [r4, #20]
 800b75a:	60a3      	str	r3, [r4, #8]
 800b75c:	e7f4      	b.n	800b748 <__swsetup_r+0xb0>
 800b75e:	2000      	movs	r0, #0
 800b760:	e7f7      	b.n	800b752 <__swsetup_r+0xba>
 800b762:	bf00      	nop
 800b764:	20000010 	.word	0x20000010
 800b768:	0800c490 	.word	0x0800c490
 800b76c:	0800c4b0 	.word	0x0800c4b0
 800b770:	0800c470 	.word	0x0800c470

0800b774 <_close_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	4d06      	ldr	r5, [pc, #24]	; (800b790 <_close_r+0x1c>)
 800b778:	2300      	movs	r3, #0
 800b77a:	4604      	mov	r4, r0
 800b77c:	4608      	mov	r0, r1
 800b77e:	602b      	str	r3, [r5, #0]
 800b780:	f7f6 fa23 	bl	8001bca <_close>
 800b784:	1c43      	adds	r3, r0, #1
 800b786:	d102      	bne.n	800b78e <_close_r+0x1a>
 800b788:	682b      	ldr	r3, [r5, #0]
 800b78a:	b103      	cbz	r3, 800b78e <_close_r+0x1a>
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	bd38      	pop	{r3, r4, r5, pc}
 800b790:	20005310 	.word	0x20005310

0800b794 <__sflush_r>:
 800b794:	898a      	ldrh	r2, [r1, #12]
 800b796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b79a:	4605      	mov	r5, r0
 800b79c:	0710      	lsls	r0, r2, #28
 800b79e:	460c      	mov	r4, r1
 800b7a0:	d458      	bmi.n	800b854 <__sflush_r+0xc0>
 800b7a2:	684b      	ldr	r3, [r1, #4]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	dc05      	bgt.n	800b7b4 <__sflush_r+0x20>
 800b7a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	dc02      	bgt.n	800b7b4 <__sflush_r+0x20>
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7b6:	2e00      	cmp	r6, #0
 800b7b8:	d0f9      	beq.n	800b7ae <__sflush_r+0x1a>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7c0:	682f      	ldr	r7, [r5, #0]
 800b7c2:	602b      	str	r3, [r5, #0]
 800b7c4:	d032      	beq.n	800b82c <__sflush_r+0x98>
 800b7c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	075a      	lsls	r2, r3, #29
 800b7cc:	d505      	bpl.n	800b7da <__sflush_r+0x46>
 800b7ce:	6863      	ldr	r3, [r4, #4]
 800b7d0:	1ac0      	subs	r0, r0, r3
 800b7d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7d4:	b10b      	cbz	r3, 800b7da <__sflush_r+0x46>
 800b7d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7d8:	1ac0      	subs	r0, r0, r3
 800b7da:	2300      	movs	r3, #0
 800b7dc:	4602      	mov	r2, r0
 800b7de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7e0:	6a21      	ldr	r1, [r4, #32]
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	47b0      	blx	r6
 800b7e6:	1c43      	adds	r3, r0, #1
 800b7e8:	89a3      	ldrh	r3, [r4, #12]
 800b7ea:	d106      	bne.n	800b7fa <__sflush_r+0x66>
 800b7ec:	6829      	ldr	r1, [r5, #0]
 800b7ee:	291d      	cmp	r1, #29
 800b7f0:	d82c      	bhi.n	800b84c <__sflush_r+0xb8>
 800b7f2:	4a2a      	ldr	r2, [pc, #168]	; (800b89c <__sflush_r+0x108>)
 800b7f4:	40ca      	lsrs	r2, r1
 800b7f6:	07d6      	lsls	r6, r2, #31
 800b7f8:	d528      	bpl.n	800b84c <__sflush_r+0xb8>
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	6062      	str	r2, [r4, #4]
 800b7fe:	04d9      	lsls	r1, r3, #19
 800b800:	6922      	ldr	r2, [r4, #16]
 800b802:	6022      	str	r2, [r4, #0]
 800b804:	d504      	bpl.n	800b810 <__sflush_r+0x7c>
 800b806:	1c42      	adds	r2, r0, #1
 800b808:	d101      	bne.n	800b80e <__sflush_r+0x7a>
 800b80a:	682b      	ldr	r3, [r5, #0]
 800b80c:	b903      	cbnz	r3, 800b810 <__sflush_r+0x7c>
 800b80e:	6560      	str	r0, [r4, #84]	; 0x54
 800b810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b812:	602f      	str	r7, [r5, #0]
 800b814:	2900      	cmp	r1, #0
 800b816:	d0ca      	beq.n	800b7ae <__sflush_r+0x1a>
 800b818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b81c:	4299      	cmp	r1, r3
 800b81e:	d002      	beq.n	800b826 <__sflush_r+0x92>
 800b820:	4628      	mov	r0, r5
 800b822:	f000 f8fd 	bl	800ba20 <_free_r>
 800b826:	2000      	movs	r0, #0
 800b828:	6360      	str	r0, [r4, #52]	; 0x34
 800b82a:	e7c1      	b.n	800b7b0 <__sflush_r+0x1c>
 800b82c:	6a21      	ldr	r1, [r4, #32]
 800b82e:	2301      	movs	r3, #1
 800b830:	4628      	mov	r0, r5
 800b832:	47b0      	blx	r6
 800b834:	1c41      	adds	r1, r0, #1
 800b836:	d1c7      	bne.n	800b7c8 <__sflush_r+0x34>
 800b838:	682b      	ldr	r3, [r5, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d0c4      	beq.n	800b7c8 <__sflush_r+0x34>
 800b83e:	2b1d      	cmp	r3, #29
 800b840:	d001      	beq.n	800b846 <__sflush_r+0xb2>
 800b842:	2b16      	cmp	r3, #22
 800b844:	d101      	bne.n	800b84a <__sflush_r+0xb6>
 800b846:	602f      	str	r7, [r5, #0]
 800b848:	e7b1      	b.n	800b7ae <__sflush_r+0x1a>
 800b84a:	89a3      	ldrh	r3, [r4, #12]
 800b84c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b850:	81a3      	strh	r3, [r4, #12]
 800b852:	e7ad      	b.n	800b7b0 <__sflush_r+0x1c>
 800b854:	690f      	ldr	r7, [r1, #16]
 800b856:	2f00      	cmp	r7, #0
 800b858:	d0a9      	beq.n	800b7ae <__sflush_r+0x1a>
 800b85a:	0793      	lsls	r3, r2, #30
 800b85c:	680e      	ldr	r6, [r1, #0]
 800b85e:	bf08      	it	eq
 800b860:	694b      	ldreq	r3, [r1, #20]
 800b862:	600f      	str	r7, [r1, #0]
 800b864:	bf18      	it	ne
 800b866:	2300      	movne	r3, #0
 800b868:	eba6 0807 	sub.w	r8, r6, r7
 800b86c:	608b      	str	r3, [r1, #8]
 800b86e:	f1b8 0f00 	cmp.w	r8, #0
 800b872:	dd9c      	ble.n	800b7ae <__sflush_r+0x1a>
 800b874:	6a21      	ldr	r1, [r4, #32]
 800b876:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b878:	4643      	mov	r3, r8
 800b87a:	463a      	mov	r2, r7
 800b87c:	4628      	mov	r0, r5
 800b87e:	47b0      	blx	r6
 800b880:	2800      	cmp	r0, #0
 800b882:	dc06      	bgt.n	800b892 <__sflush_r+0xfe>
 800b884:	89a3      	ldrh	r3, [r4, #12]
 800b886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b88a:	81a3      	strh	r3, [r4, #12]
 800b88c:	f04f 30ff 	mov.w	r0, #4294967295
 800b890:	e78e      	b.n	800b7b0 <__sflush_r+0x1c>
 800b892:	4407      	add	r7, r0
 800b894:	eba8 0800 	sub.w	r8, r8, r0
 800b898:	e7e9      	b.n	800b86e <__sflush_r+0xda>
 800b89a:	bf00      	nop
 800b89c:	20400001 	.word	0x20400001

0800b8a0 <_fflush_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	690b      	ldr	r3, [r1, #16]
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	460c      	mov	r4, r1
 800b8a8:	b913      	cbnz	r3, 800b8b0 <_fflush_r+0x10>
 800b8aa:	2500      	movs	r5, #0
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	bd38      	pop	{r3, r4, r5, pc}
 800b8b0:	b118      	cbz	r0, 800b8ba <_fflush_r+0x1a>
 800b8b2:	6983      	ldr	r3, [r0, #24]
 800b8b4:	b90b      	cbnz	r3, 800b8ba <_fflush_r+0x1a>
 800b8b6:	f7ff fbcf 	bl	800b058 <__sinit>
 800b8ba:	4b14      	ldr	r3, [pc, #80]	; (800b90c <_fflush_r+0x6c>)
 800b8bc:	429c      	cmp	r4, r3
 800b8be:	d11b      	bne.n	800b8f8 <_fflush_r+0x58>
 800b8c0:	686c      	ldr	r4, [r5, #4]
 800b8c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d0ef      	beq.n	800b8aa <_fflush_r+0xa>
 800b8ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8cc:	07d0      	lsls	r0, r2, #31
 800b8ce:	d404      	bmi.n	800b8da <_fflush_r+0x3a>
 800b8d0:	0599      	lsls	r1, r3, #22
 800b8d2:	d402      	bmi.n	800b8da <_fflush_r+0x3a>
 800b8d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8d6:	f7ff fc82 	bl	800b1de <__retarget_lock_acquire_recursive>
 800b8da:	4628      	mov	r0, r5
 800b8dc:	4621      	mov	r1, r4
 800b8de:	f7ff ff59 	bl	800b794 <__sflush_r>
 800b8e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8e4:	07da      	lsls	r2, r3, #31
 800b8e6:	4605      	mov	r5, r0
 800b8e8:	d4e0      	bmi.n	800b8ac <_fflush_r+0xc>
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	059b      	lsls	r3, r3, #22
 800b8ee:	d4dd      	bmi.n	800b8ac <_fflush_r+0xc>
 800b8f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8f2:	f7ff fc75 	bl	800b1e0 <__retarget_lock_release_recursive>
 800b8f6:	e7d9      	b.n	800b8ac <_fflush_r+0xc>
 800b8f8:	4b05      	ldr	r3, [pc, #20]	; (800b910 <_fflush_r+0x70>)
 800b8fa:	429c      	cmp	r4, r3
 800b8fc:	d101      	bne.n	800b902 <_fflush_r+0x62>
 800b8fe:	68ac      	ldr	r4, [r5, #8]
 800b900:	e7df      	b.n	800b8c2 <_fflush_r+0x22>
 800b902:	4b04      	ldr	r3, [pc, #16]	; (800b914 <_fflush_r+0x74>)
 800b904:	429c      	cmp	r4, r3
 800b906:	bf08      	it	eq
 800b908:	68ec      	ldreq	r4, [r5, #12]
 800b90a:	e7da      	b.n	800b8c2 <_fflush_r+0x22>
 800b90c:	0800c490 	.word	0x0800c490
 800b910:	0800c4b0 	.word	0x0800c4b0
 800b914:	0800c470 	.word	0x0800c470

0800b918 <_lseek_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	4d07      	ldr	r5, [pc, #28]	; (800b938 <_lseek_r+0x20>)
 800b91c:	4604      	mov	r4, r0
 800b91e:	4608      	mov	r0, r1
 800b920:	4611      	mov	r1, r2
 800b922:	2200      	movs	r2, #0
 800b924:	602a      	str	r2, [r5, #0]
 800b926:	461a      	mov	r2, r3
 800b928:	f7f6 f976 	bl	8001c18 <_lseek>
 800b92c:	1c43      	adds	r3, r0, #1
 800b92e:	d102      	bne.n	800b936 <_lseek_r+0x1e>
 800b930:	682b      	ldr	r3, [r5, #0]
 800b932:	b103      	cbz	r3, 800b936 <_lseek_r+0x1e>
 800b934:	6023      	str	r3, [r4, #0]
 800b936:	bd38      	pop	{r3, r4, r5, pc}
 800b938:	20005310 	.word	0x20005310

0800b93c <__swhatbuf_r>:
 800b93c:	b570      	push	{r4, r5, r6, lr}
 800b93e:	460e      	mov	r6, r1
 800b940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b944:	2900      	cmp	r1, #0
 800b946:	b096      	sub	sp, #88	; 0x58
 800b948:	4614      	mov	r4, r2
 800b94a:	461d      	mov	r5, r3
 800b94c:	da08      	bge.n	800b960 <__swhatbuf_r+0x24>
 800b94e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	602a      	str	r2, [r5, #0]
 800b956:	061a      	lsls	r2, r3, #24
 800b958:	d410      	bmi.n	800b97c <__swhatbuf_r+0x40>
 800b95a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b95e:	e00e      	b.n	800b97e <__swhatbuf_r+0x42>
 800b960:	466a      	mov	r2, sp
 800b962:	f000 fba9 	bl	800c0b8 <_fstat_r>
 800b966:	2800      	cmp	r0, #0
 800b968:	dbf1      	blt.n	800b94e <__swhatbuf_r+0x12>
 800b96a:	9a01      	ldr	r2, [sp, #4]
 800b96c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b970:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b974:	425a      	negs	r2, r3
 800b976:	415a      	adcs	r2, r3
 800b978:	602a      	str	r2, [r5, #0]
 800b97a:	e7ee      	b.n	800b95a <__swhatbuf_r+0x1e>
 800b97c:	2340      	movs	r3, #64	; 0x40
 800b97e:	2000      	movs	r0, #0
 800b980:	6023      	str	r3, [r4, #0]
 800b982:	b016      	add	sp, #88	; 0x58
 800b984:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b988 <__smakebuf_r>:
 800b988:	898b      	ldrh	r3, [r1, #12]
 800b98a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b98c:	079d      	lsls	r5, r3, #30
 800b98e:	4606      	mov	r6, r0
 800b990:	460c      	mov	r4, r1
 800b992:	d507      	bpl.n	800b9a4 <__smakebuf_r+0x1c>
 800b994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	6123      	str	r3, [r4, #16]
 800b99c:	2301      	movs	r3, #1
 800b99e:	6163      	str	r3, [r4, #20]
 800b9a0:	b002      	add	sp, #8
 800b9a2:	bd70      	pop	{r4, r5, r6, pc}
 800b9a4:	ab01      	add	r3, sp, #4
 800b9a6:	466a      	mov	r2, sp
 800b9a8:	f7ff ffc8 	bl	800b93c <__swhatbuf_r>
 800b9ac:	9900      	ldr	r1, [sp, #0]
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	f7ff fc4d 	bl	800b250 <_malloc_r>
 800b9b6:	b948      	cbnz	r0, 800b9cc <__smakebuf_r+0x44>
 800b9b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9bc:	059a      	lsls	r2, r3, #22
 800b9be:	d4ef      	bmi.n	800b9a0 <__smakebuf_r+0x18>
 800b9c0:	f023 0303 	bic.w	r3, r3, #3
 800b9c4:	f043 0302 	orr.w	r3, r3, #2
 800b9c8:	81a3      	strh	r3, [r4, #12]
 800b9ca:	e7e3      	b.n	800b994 <__smakebuf_r+0xc>
 800b9cc:	4b0d      	ldr	r3, [pc, #52]	; (800ba04 <__smakebuf_r+0x7c>)
 800b9ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	6020      	str	r0, [r4, #0]
 800b9d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d8:	81a3      	strh	r3, [r4, #12]
 800b9da:	9b00      	ldr	r3, [sp, #0]
 800b9dc:	6163      	str	r3, [r4, #20]
 800b9de:	9b01      	ldr	r3, [sp, #4]
 800b9e0:	6120      	str	r0, [r4, #16]
 800b9e2:	b15b      	cbz	r3, 800b9fc <__smakebuf_r+0x74>
 800b9e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	f000 fb77 	bl	800c0dc <_isatty_r>
 800b9ee:	b128      	cbz	r0, 800b9fc <__smakebuf_r+0x74>
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	f023 0303 	bic.w	r3, r3, #3
 800b9f6:	f043 0301 	orr.w	r3, r3, #1
 800b9fa:	81a3      	strh	r3, [r4, #12]
 800b9fc:	89a0      	ldrh	r0, [r4, #12]
 800b9fe:	4305      	orrs	r5, r0
 800ba00:	81a5      	strh	r5, [r4, #12]
 800ba02:	e7cd      	b.n	800b9a0 <__smakebuf_r+0x18>
 800ba04:	0800aff1 	.word	0x0800aff1

0800ba08 <__malloc_lock>:
 800ba08:	4801      	ldr	r0, [pc, #4]	; (800ba10 <__malloc_lock+0x8>)
 800ba0a:	f7ff bbe8 	b.w	800b1de <__retarget_lock_acquire_recursive>
 800ba0e:	bf00      	nop
 800ba10:	20005304 	.word	0x20005304

0800ba14 <__malloc_unlock>:
 800ba14:	4801      	ldr	r0, [pc, #4]	; (800ba1c <__malloc_unlock+0x8>)
 800ba16:	f7ff bbe3 	b.w	800b1e0 <__retarget_lock_release_recursive>
 800ba1a:	bf00      	nop
 800ba1c:	20005304 	.word	0x20005304

0800ba20 <_free_r>:
 800ba20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba22:	2900      	cmp	r1, #0
 800ba24:	d044      	beq.n	800bab0 <_free_r+0x90>
 800ba26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba2a:	9001      	str	r0, [sp, #4]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f1a1 0404 	sub.w	r4, r1, #4
 800ba32:	bfb8      	it	lt
 800ba34:	18e4      	addlt	r4, r4, r3
 800ba36:	f7ff ffe7 	bl	800ba08 <__malloc_lock>
 800ba3a:	4a1e      	ldr	r2, [pc, #120]	; (800bab4 <_free_r+0x94>)
 800ba3c:	9801      	ldr	r0, [sp, #4]
 800ba3e:	6813      	ldr	r3, [r2, #0]
 800ba40:	b933      	cbnz	r3, 800ba50 <_free_r+0x30>
 800ba42:	6063      	str	r3, [r4, #4]
 800ba44:	6014      	str	r4, [r2, #0]
 800ba46:	b003      	add	sp, #12
 800ba48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba4c:	f7ff bfe2 	b.w	800ba14 <__malloc_unlock>
 800ba50:	42a3      	cmp	r3, r4
 800ba52:	d908      	bls.n	800ba66 <_free_r+0x46>
 800ba54:	6825      	ldr	r5, [r4, #0]
 800ba56:	1961      	adds	r1, r4, r5
 800ba58:	428b      	cmp	r3, r1
 800ba5a:	bf01      	itttt	eq
 800ba5c:	6819      	ldreq	r1, [r3, #0]
 800ba5e:	685b      	ldreq	r3, [r3, #4]
 800ba60:	1949      	addeq	r1, r1, r5
 800ba62:	6021      	streq	r1, [r4, #0]
 800ba64:	e7ed      	b.n	800ba42 <_free_r+0x22>
 800ba66:	461a      	mov	r2, r3
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	b10b      	cbz	r3, 800ba70 <_free_r+0x50>
 800ba6c:	42a3      	cmp	r3, r4
 800ba6e:	d9fa      	bls.n	800ba66 <_free_r+0x46>
 800ba70:	6811      	ldr	r1, [r2, #0]
 800ba72:	1855      	adds	r5, r2, r1
 800ba74:	42a5      	cmp	r5, r4
 800ba76:	d10b      	bne.n	800ba90 <_free_r+0x70>
 800ba78:	6824      	ldr	r4, [r4, #0]
 800ba7a:	4421      	add	r1, r4
 800ba7c:	1854      	adds	r4, r2, r1
 800ba7e:	42a3      	cmp	r3, r4
 800ba80:	6011      	str	r1, [r2, #0]
 800ba82:	d1e0      	bne.n	800ba46 <_free_r+0x26>
 800ba84:	681c      	ldr	r4, [r3, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	6053      	str	r3, [r2, #4]
 800ba8a:	4421      	add	r1, r4
 800ba8c:	6011      	str	r1, [r2, #0]
 800ba8e:	e7da      	b.n	800ba46 <_free_r+0x26>
 800ba90:	d902      	bls.n	800ba98 <_free_r+0x78>
 800ba92:	230c      	movs	r3, #12
 800ba94:	6003      	str	r3, [r0, #0]
 800ba96:	e7d6      	b.n	800ba46 <_free_r+0x26>
 800ba98:	6825      	ldr	r5, [r4, #0]
 800ba9a:	1961      	adds	r1, r4, r5
 800ba9c:	428b      	cmp	r3, r1
 800ba9e:	bf04      	itt	eq
 800baa0:	6819      	ldreq	r1, [r3, #0]
 800baa2:	685b      	ldreq	r3, [r3, #4]
 800baa4:	6063      	str	r3, [r4, #4]
 800baa6:	bf04      	itt	eq
 800baa8:	1949      	addeq	r1, r1, r5
 800baaa:	6021      	streq	r1, [r4, #0]
 800baac:	6054      	str	r4, [r2, #4]
 800baae:	e7ca      	b.n	800ba46 <_free_r+0x26>
 800bab0:	b003      	add	sp, #12
 800bab2:	bd30      	pop	{r4, r5, pc}
 800bab4:	20005308 	.word	0x20005308

0800bab8 <__sfputc_r>:
 800bab8:	6893      	ldr	r3, [r2, #8]
 800baba:	3b01      	subs	r3, #1
 800babc:	2b00      	cmp	r3, #0
 800babe:	b410      	push	{r4}
 800bac0:	6093      	str	r3, [r2, #8]
 800bac2:	da08      	bge.n	800bad6 <__sfputc_r+0x1e>
 800bac4:	6994      	ldr	r4, [r2, #24]
 800bac6:	42a3      	cmp	r3, r4
 800bac8:	db01      	blt.n	800bace <__sfputc_r+0x16>
 800baca:	290a      	cmp	r1, #10
 800bacc:	d103      	bne.n	800bad6 <__sfputc_r+0x1e>
 800bace:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bad2:	f7ff bd7d 	b.w	800b5d0 <__swbuf_r>
 800bad6:	6813      	ldr	r3, [r2, #0]
 800bad8:	1c58      	adds	r0, r3, #1
 800bada:	6010      	str	r0, [r2, #0]
 800badc:	7019      	strb	r1, [r3, #0]
 800bade:	4608      	mov	r0, r1
 800bae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bae4:	4770      	bx	lr

0800bae6 <__sfputs_r>:
 800bae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae8:	4606      	mov	r6, r0
 800baea:	460f      	mov	r7, r1
 800baec:	4614      	mov	r4, r2
 800baee:	18d5      	adds	r5, r2, r3
 800baf0:	42ac      	cmp	r4, r5
 800baf2:	d101      	bne.n	800baf8 <__sfputs_r+0x12>
 800baf4:	2000      	movs	r0, #0
 800baf6:	e007      	b.n	800bb08 <__sfputs_r+0x22>
 800baf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafc:	463a      	mov	r2, r7
 800bafe:	4630      	mov	r0, r6
 800bb00:	f7ff ffda 	bl	800bab8 <__sfputc_r>
 800bb04:	1c43      	adds	r3, r0, #1
 800bb06:	d1f3      	bne.n	800baf0 <__sfputs_r+0xa>
 800bb08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb0c <_vfiprintf_r>:
 800bb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb10:	460d      	mov	r5, r1
 800bb12:	b09d      	sub	sp, #116	; 0x74
 800bb14:	4614      	mov	r4, r2
 800bb16:	4698      	mov	r8, r3
 800bb18:	4606      	mov	r6, r0
 800bb1a:	b118      	cbz	r0, 800bb24 <_vfiprintf_r+0x18>
 800bb1c:	6983      	ldr	r3, [r0, #24]
 800bb1e:	b90b      	cbnz	r3, 800bb24 <_vfiprintf_r+0x18>
 800bb20:	f7ff fa9a 	bl	800b058 <__sinit>
 800bb24:	4b89      	ldr	r3, [pc, #548]	; (800bd4c <_vfiprintf_r+0x240>)
 800bb26:	429d      	cmp	r5, r3
 800bb28:	d11b      	bne.n	800bb62 <_vfiprintf_r+0x56>
 800bb2a:	6875      	ldr	r5, [r6, #4]
 800bb2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb2e:	07d9      	lsls	r1, r3, #31
 800bb30:	d405      	bmi.n	800bb3e <_vfiprintf_r+0x32>
 800bb32:	89ab      	ldrh	r3, [r5, #12]
 800bb34:	059a      	lsls	r2, r3, #22
 800bb36:	d402      	bmi.n	800bb3e <_vfiprintf_r+0x32>
 800bb38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb3a:	f7ff fb50 	bl	800b1de <__retarget_lock_acquire_recursive>
 800bb3e:	89ab      	ldrh	r3, [r5, #12]
 800bb40:	071b      	lsls	r3, r3, #28
 800bb42:	d501      	bpl.n	800bb48 <_vfiprintf_r+0x3c>
 800bb44:	692b      	ldr	r3, [r5, #16]
 800bb46:	b9eb      	cbnz	r3, 800bb84 <_vfiprintf_r+0x78>
 800bb48:	4629      	mov	r1, r5
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	f7ff fda4 	bl	800b698 <__swsetup_r>
 800bb50:	b1c0      	cbz	r0, 800bb84 <_vfiprintf_r+0x78>
 800bb52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb54:	07dc      	lsls	r4, r3, #31
 800bb56:	d50e      	bpl.n	800bb76 <_vfiprintf_r+0x6a>
 800bb58:	f04f 30ff 	mov.w	r0, #4294967295
 800bb5c:	b01d      	add	sp, #116	; 0x74
 800bb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb62:	4b7b      	ldr	r3, [pc, #492]	; (800bd50 <_vfiprintf_r+0x244>)
 800bb64:	429d      	cmp	r5, r3
 800bb66:	d101      	bne.n	800bb6c <_vfiprintf_r+0x60>
 800bb68:	68b5      	ldr	r5, [r6, #8]
 800bb6a:	e7df      	b.n	800bb2c <_vfiprintf_r+0x20>
 800bb6c:	4b79      	ldr	r3, [pc, #484]	; (800bd54 <_vfiprintf_r+0x248>)
 800bb6e:	429d      	cmp	r5, r3
 800bb70:	bf08      	it	eq
 800bb72:	68f5      	ldreq	r5, [r6, #12]
 800bb74:	e7da      	b.n	800bb2c <_vfiprintf_r+0x20>
 800bb76:	89ab      	ldrh	r3, [r5, #12]
 800bb78:	0598      	lsls	r0, r3, #22
 800bb7a:	d4ed      	bmi.n	800bb58 <_vfiprintf_r+0x4c>
 800bb7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb7e:	f7ff fb2f 	bl	800b1e0 <__retarget_lock_release_recursive>
 800bb82:	e7e9      	b.n	800bb58 <_vfiprintf_r+0x4c>
 800bb84:	2300      	movs	r3, #0
 800bb86:	9309      	str	r3, [sp, #36]	; 0x24
 800bb88:	2320      	movs	r3, #32
 800bb8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb92:	2330      	movs	r3, #48	; 0x30
 800bb94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bd58 <_vfiprintf_r+0x24c>
 800bb98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb9c:	f04f 0901 	mov.w	r9, #1
 800bba0:	4623      	mov	r3, r4
 800bba2:	469a      	mov	sl, r3
 800bba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bba8:	b10a      	cbz	r2, 800bbae <_vfiprintf_r+0xa2>
 800bbaa:	2a25      	cmp	r2, #37	; 0x25
 800bbac:	d1f9      	bne.n	800bba2 <_vfiprintf_r+0x96>
 800bbae:	ebba 0b04 	subs.w	fp, sl, r4
 800bbb2:	d00b      	beq.n	800bbcc <_vfiprintf_r+0xc0>
 800bbb4:	465b      	mov	r3, fp
 800bbb6:	4622      	mov	r2, r4
 800bbb8:	4629      	mov	r1, r5
 800bbba:	4630      	mov	r0, r6
 800bbbc:	f7ff ff93 	bl	800bae6 <__sfputs_r>
 800bbc0:	3001      	adds	r0, #1
 800bbc2:	f000 80aa 	beq.w	800bd1a <_vfiprintf_r+0x20e>
 800bbc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbc8:	445a      	add	r2, fp
 800bbca:	9209      	str	r2, [sp, #36]	; 0x24
 800bbcc:	f89a 3000 	ldrb.w	r3, [sl]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f000 80a2 	beq.w	800bd1a <_vfiprintf_r+0x20e>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800bbdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbe0:	f10a 0a01 	add.w	sl, sl, #1
 800bbe4:	9304      	str	r3, [sp, #16]
 800bbe6:	9307      	str	r3, [sp, #28]
 800bbe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbec:	931a      	str	r3, [sp, #104]	; 0x68
 800bbee:	4654      	mov	r4, sl
 800bbf0:	2205      	movs	r2, #5
 800bbf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf6:	4858      	ldr	r0, [pc, #352]	; (800bd58 <_vfiprintf_r+0x24c>)
 800bbf8:	f7f4 faea 	bl	80001d0 <memchr>
 800bbfc:	9a04      	ldr	r2, [sp, #16]
 800bbfe:	b9d8      	cbnz	r0, 800bc38 <_vfiprintf_r+0x12c>
 800bc00:	06d1      	lsls	r1, r2, #27
 800bc02:	bf44      	itt	mi
 800bc04:	2320      	movmi	r3, #32
 800bc06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc0a:	0713      	lsls	r3, r2, #28
 800bc0c:	bf44      	itt	mi
 800bc0e:	232b      	movmi	r3, #43	; 0x2b
 800bc10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc14:	f89a 3000 	ldrb.w	r3, [sl]
 800bc18:	2b2a      	cmp	r3, #42	; 0x2a
 800bc1a:	d015      	beq.n	800bc48 <_vfiprintf_r+0x13c>
 800bc1c:	9a07      	ldr	r2, [sp, #28]
 800bc1e:	4654      	mov	r4, sl
 800bc20:	2000      	movs	r0, #0
 800bc22:	f04f 0c0a 	mov.w	ip, #10
 800bc26:	4621      	mov	r1, r4
 800bc28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc2c:	3b30      	subs	r3, #48	; 0x30
 800bc2e:	2b09      	cmp	r3, #9
 800bc30:	d94e      	bls.n	800bcd0 <_vfiprintf_r+0x1c4>
 800bc32:	b1b0      	cbz	r0, 800bc62 <_vfiprintf_r+0x156>
 800bc34:	9207      	str	r2, [sp, #28]
 800bc36:	e014      	b.n	800bc62 <_vfiprintf_r+0x156>
 800bc38:	eba0 0308 	sub.w	r3, r0, r8
 800bc3c:	fa09 f303 	lsl.w	r3, r9, r3
 800bc40:	4313      	orrs	r3, r2
 800bc42:	9304      	str	r3, [sp, #16]
 800bc44:	46a2      	mov	sl, r4
 800bc46:	e7d2      	b.n	800bbee <_vfiprintf_r+0xe2>
 800bc48:	9b03      	ldr	r3, [sp, #12]
 800bc4a:	1d19      	adds	r1, r3, #4
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	9103      	str	r1, [sp, #12]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	bfbb      	ittet	lt
 800bc54:	425b      	neglt	r3, r3
 800bc56:	f042 0202 	orrlt.w	r2, r2, #2
 800bc5a:	9307      	strge	r3, [sp, #28]
 800bc5c:	9307      	strlt	r3, [sp, #28]
 800bc5e:	bfb8      	it	lt
 800bc60:	9204      	strlt	r2, [sp, #16]
 800bc62:	7823      	ldrb	r3, [r4, #0]
 800bc64:	2b2e      	cmp	r3, #46	; 0x2e
 800bc66:	d10c      	bne.n	800bc82 <_vfiprintf_r+0x176>
 800bc68:	7863      	ldrb	r3, [r4, #1]
 800bc6a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc6c:	d135      	bne.n	800bcda <_vfiprintf_r+0x1ce>
 800bc6e:	9b03      	ldr	r3, [sp, #12]
 800bc70:	1d1a      	adds	r2, r3, #4
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	9203      	str	r2, [sp, #12]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	bfb8      	it	lt
 800bc7a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc7e:	3402      	adds	r4, #2
 800bc80:	9305      	str	r3, [sp, #20]
 800bc82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bd68 <_vfiprintf_r+0x25c>
 800bc86:	7821      	ldrb	r1, [r4, #0]
 800bc88:	2203      	movs	r2, #3
 800bc8a:	4650      	mov	r0, sl
 800bc8c:	f7f4 faa0 	bl	80001d0 <memchr>
 800bc90:	b140      	cbz	r0, 800bca4 <_vfiprintf_r+0x198>
 800bc92:	2340      	movs	r3, #64	; 0x40
 800bc94:	eba0 000a 	sub.w	r0, r0, sl
 800bc98:	fa03 f000 	lsl.w	r0, r3, r0
 800bc9c:	9b04      	ldr	r3, [sp, #16]
 800bc9e:	4303      	orrs	r3, r0
 800bca0:	3401      	adds	r4, #1
 800bca2:	9304      	str	r3, [sp, #16]
 800bca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bca8:	482c      	ldr	r0, [pc, #176]	; (800bd5c <_vfiprintf_r+0x250>)
 800bcaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcae:	2206      	movs	r2, #6
 800bcb0:	f7f4 fa8e 	bl	80001d0 <memchr>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d03f      	beq.n	800bd38 <_vfiprintf_r+0x22c>
 800bcb8:	4b29      	ldr	r3, [pc, #164]	; (800bd60 <_vfiprintf_r+0x254>)
 800bcba:	bb1b      	cbnz	r3, 800bd04 <_vfiprintf_r+0x1f8>
 800bcbc:	9b03      	ldr	r3, [sp, #12]
 800bcbe:	3307      	adds	r3, #7
 800bcc0:	f023 0307 	bic.w	r3, r3, #7
 800bcc4:	3308      	adds	r3, #8
 800bcc6:	9303      	str	r3, [sp, #12]
 800bcc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcca:	443b      	add	r3, r7
 800bccc:	9309      	str	r3, [sp, #36]	; 0x24
 800bcce:	e767      	b.n	800bba0 <_vfiprintf_r+0x94>
 800bcd0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcd4:	460c      	mov	r4, r1
 800bcd6:	2001      	movs	r0, #1
 800bcd8:	e7a5      	b.n	800bc26 <_vfiprintf_r+0x11a>
 800bcda:	2300      	movs	r3, #0
 800bcdc:	3401      	adds	r4, #1
 800bcde:	9305      	str	r3, [sp, #20]
 800bce0:	4619      	mov	r1, r3
 800bce2:	f04f 0c0a 	mov.w	ip, #10
 800bce6:	4620      	mov	r0, r4
 800bce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcec:	3a30      	subs	r2, #48	; 0x30
 800bcee:	2a09      	cmp	r2, #9
 800bcf0:	d903      	bls.n	800bcfa <_vfiprintf_r+0x1ee>
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d0c5      	beq.n	800bc82 <_vfiprintf_r+0x176>
 800bcf6:	9105      	str	r1, [sp, #20]
 800bcf8:	e7c3      	b.n	800bc82 <_vfiprintf_r+0x176>
 800bcfa:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcfe:	4604      	mov	r4, r0
 800bd00:	2301      	movs	r3, #1
 800bd02:	e7f0      	b.n	800bce6 <_vfiprintf_r+0x1da>
 800bd04:	ab03      	add	r3, sp, #12
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	462a      	mov	r2, r5
 800bd0a:	4b16      	ldr	r3, [pc, #88]	; (800bd64 <_vfiprintf_r+0x258>)
 800bd0c:	a904      	add	r1, sp, #16
 800bd0e:	4630      	mov	r0, r6
 800bd10:	f3af 8000 	nop.w
 800bd14:	4607      	mov	r7, r0
 800bd16:	1c78      	adds	r0, r7, #1
 800bd18:	d1d6      	bne.n	800bcc8 <_vfiprintf_r+0x1bc>
 800bd1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd1c:	07d9      	lsls	r1, r3, #31
 800bd1e:	d405      	bmi.n	800bd2c <_vfiprintf_r+0x220>
 800bd20:	89ab      	ldrh	r3, [r5, #12]
 800bd22:	059a      	lsls	r2, r3, #22
 800bd24:	d402      	bmi.n	800bd2c <_vfiprintf_r+0x220>
 800bd26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd28:	f7ff fa5a 	bl	800b1e0 <__retarget_lock_release_recursive>
 800bd2c:	89ab      	ldrh	r3, [r5, #12]
 800bd2e:	065b      	lsls	r3, r3, #25
 800bd30:	f53f af12 	bmi.w	800bb58 <_vfiprintf_r+0x4c>
 800bd34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd36:	e711      	b.n	800bb5c <_vfiprintf_r+0x50>
 800bd38:	ab03      	add	r3, sp, #12
 800bd3a:	9300      	str	r3, [sp, #0]
 800bd3c:	462a      	mov	r2, r5
 800bd3e:	4b09      	ldr	r3, [pc, #36]	; (800bd64 <_vfiprintf_r+0x258>)
 800bd40:	a904      	add	r1, sp, #16
 800bd42:	4630      	mov	r0, r6
 800bd44:	f000 f880 	bl	800be48 <_printf_i>
 800bd48:	e7e4      	b.n	800bd14 <_vfiprintf_r+0x208>
 800bd4a:	bf00      	nop
 800bd4c:	0800c490 	.word	0x0800c490
 800bd50:	0800c4b0 	.word	0x0800c4b0
 800bd54:	0800c470 	.word	0x0800c470
 800bd58:	0800c4d4 	.word	0x0800c4d4
 800bd5c:	0800c4de 	.word	0x0800c4de
 800bd60:	00000000 	.word	0x00000000
 800bd64:	0800bae7 	.word	0x0800bae7
 800bd68:	0800c4da 	.word	0x0800c4da

0800bd6c <_printf_common>:
 800bd6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd70:	4616      	mov	r6, r2
 800bd72:	4699      	mov	r9, r3
 800bd74:	688a      	ldr	r2, [r1, #8]
 800bd76:	690b      	ldr	r3, [r1, #16]
 800bd78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	bfb8      	it	lt
 800bd80:	4613      	movlt	r3, r2
 800bd82:	6033      	str	r3, [r6, #0]
 800bd84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd88:	4607      	mov	r7, r0
 800bd8a:	460c      	mov	r4, r1
 800bd8c:	b10a      	cbz	r2, 800bd92 <_printf_common+0x26>
 800bd8e:	3301      	adds	r3, #1
 800bd90:	6033      	str	r3, [r6, #0]
 800bd92:	6823      	ldr	r3, [r4, #0]
 800bd94:	0699      	lsls	r1, r3, #26
 800bd96:	bf42      	ittt	mi
 800bd98:	6833      	ldrmi	r3, [r6, #0]
 800bd9a:	3302      	addmi	r3, #2
 800bd9c:	6033      	strmi	r3, [r6, #0]
 800bd9e:	6825      	ldr	r5, [r4, #0]
 800bda0:	f015 0506 	ands.w	r5, r5, #6
 800bda4:	d106      	bne.n	800bdb4 <_printf_common+0x48>
 800bda6:	f104 0a19 	add.w	sl, r4, #25
 800bdaa:	68e3      	ldr	r3, [r4, #12]
 800bdac:	6832      	ldr	r2, [r6, #0]
 800bdae:	1a9b      	subs	r3, r3, r2
 800bdb0:	42ab      	cmp	r3, r5
 800bdb2:	dc26      	bgt.n	800be02 <_printf_common+0x96>
 800bdb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bdb8:	1e13      	subs	r3, r2, #0
 800bdba:	6822      	ldr	r2, [r4, #0]
 800bdbc:	bf18      	it	ne
 800bdbe:	2301      	movne	r3, #1
 800bdc0:	0692      	lsls	r2, r2, #26
 800bdc2:	d42b      	bmi.n	800be1c <_printf_common+0xb0>
 800bdc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdc8:	4649      	mov	r1, r9
 800bdca:	4638      	mov	r0, r7
 800bdcc:	47c0      	blx	r8
 800bdce:	3001      	adds	r0, #1
 800bdd0:	d01e      	beq.n	800be10 <_printf_common+0xa4>
 800bdd2:	6823      	ldr	r3, [r4, #0]
 800bdd4:	68e5      	ldr	r5, [r4, #12]
 800bdd6:	6832      	ldr	r2, [r6, #0]
 800bdd8:	f003 0306 	and.w	r3, r3, #6
 800bddc:	2b04      	cmp	r3, #4
 800bdde:	bf08      	it	eq
 800bde0:	1aad      	subeq	r5, r5, r2
 800bde2:	68a3      	ldr	r3, [r4, #8]
 800bde4:	6922      	ldr	r2, [r4, #16]
 800bde6:	bf0c      	ite	eq
 800bde8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdec:	2500      	movne	r5, #0
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	bfc4      	itt	gt
 800bdf2:	1a9b      	subgt	r3, r3, r2
 800bdf4:	18ed      	addgt	r5, r5, r3
 800bdf6:	2600      	movs	r6, #0
 800bdf8:	341a      	adds	r4, #26
 800bdfa:	42b5      	cmp	r5, r6
 800bdfc:	d11a      	bne.n	800be34 <_printf_common+0xc8>
 800bdfe:	2000      	movs	r0, #0
 800be00:	e008      	b.n	800be14 <_printf_common+0xa8>
 800be02:	2301      	movs	r3, #1
 800be04:	4652      	mov	r2, sl
 800be06:	4649      	mov	r1, r9
 800be08:	4638      	mov	r0, r7
 800be0a:	47c0      	blx	r8
 800be0c:	3001      	adds	r0, #1
 800be0e:	d103      	bne.n	800be18 <_printf_common+0xac>
 800be10:	f04f 30ff 	mov.w	r0, #4294967295
 800be14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be18:	3501      	adds	r5, #1
 800be1a:	e7c6      	b.n	800bdaa <_printf_common+0x3e>
 800be1c:	18e1      	adds	r1, r4, r3
 800be1e:	1c5a      	adds	r2, r3, #1
 800be20:	2030      	movs	r0, #48	; 0x30
 800be22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be26:	4422      	add	r2, r4
 800be28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be30:	3302      	adds	r3, #2
 800be32:	e7c7      	b.n	800bdc4 <_printf_common+0x58>
 800be34:	2301      	movs	r3, #1
 800be36:	4622      	mov	r2, r4
 800be38:	4649      	mov	r1, r9
 800be3a:	4638      	mov	r0, r7
 800be3c:	47c0      	blx	r8
 800be3e:	3001      	adds	r0, #1
 800be40:	d0e6      	beq.n	800be10 <_printf_common+0xa4>
 800be42:	3601      	adds	r6, #1
 800be44:	e7d9      	b.n	800bdfa <_printf_common+0x8e>
	...

0800be48 <_printf_i>:
 800be48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be4c:	7e0f      	ldrb	r7, [r1, #24]
 800be4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be50:	2f78      	cmp	r7, #120	; 0x78
 800be52:	4691      	mov	r9, r2
 800be54:	4680      	mov	r8, r0
 800be56:	460c      	mov	r4, r1
 800be58:	469a      	mov	sl, r3
 800be5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be5e:	d807      	bhi.n	800be70 <_printf_i+0x28>
 800be60:	2f62      	cmp	r7, #98	; 0x62
 800be62:	d80a      	bhi.n	800be7a <_printf_i+0x32>
 800be64:	2f00      	cmp	r7, #0
 800be66:	f000 80d8 	beq.w	800c01a <_printf_i+0x1d2>
 800be6a:	2f58      	cmp	r7, #88	; 0x58
 800be6c:	f000 80a3 	beq.w	800bfb6 <_printf_i+0x16e>
 800be70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be78:	e03a      	b.n	800bef0 <_printf_i+0xa8>
 800be7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be7e:	2b15      	cmp	r3, #21
 800be80:	d8f6      	bhi.n	800be70 <_printf_i+0x28>
 800be82:	a101      	add	r1, pc, #4	; (adr r1, 800be88 <_printf_i+0x40>)
 800be84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be88:	0800bee1 	.word	0x0800bee1
 800be8c:	0800bef5 	.word	0x0800bef5
 800be90:	0800be71 	.word	0x0800be71
 800be94:	0800be71 	.word	0x0800be71
 800be98:	0800be71 	.word	0x0800be71
 800be9c:	0800be71 	.word	0x0800be71
 800bea0:	0800bef5 	.word	0x0800bef5
 800bea4:	0800be71 	.word	0x0800be71
 800bea8:	0800be71 	.word	0x0800be71
 800beac:	0800be71 	.word	0x0800be71
 800beb0:	0800be71 	.word	0x0800be71
 800beb4:	0800c001 	.word	0x0800c001
 800beb8:	0800bf25 	.word	0x0800bf25
 800bebc:	0800bfe3 	.word	0x0800bfe3
 800bec0:	0800be71 	.word	0x0800be71
 800bec4:	0800be71 	.word	0x0800be71
 800bec8:	0800c023 	.word	0x0800c023
 800becc:	0800be71 	.word	0x0800be71
 800bed0:	0800bf25 	.word	0x0800bf25
 800bed4:	0800be71 	.word	0x0800be71
 800bed8:	0800be71 	.word	0x0800be71
 800bedc:	0800bfeb 	.word	0x0800bfeb
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	1d1a      	adds	r2, r3, #4
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	602a      	str	r2, [r5, #0]
 800bee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800beec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bef0:	2301      	movs	r3, #1
 800bef2:	e0a3      	b.n	800c03c <_printf_i+0x1f4>
 800bef4:	6820      	ldr	r0, [r4, #0]
 800bef6:	6829      	ldr	r1, [r5, #0]
 800bef8:	0606      	lsls	r6, r0, #24
 800befa:	f101 0304 	add.w	r3, r1, #4
 800befe:	d50a      	bpl.n	800bf16 <_printf_i+0xce>
 800bf00:	680e      	ldr	r6, [r1, #0]
 800bf02:	602b      	str	r3, [r5, #0]
 800bf04:	2e00      	cmp	r6, #0
 800bf06:	da03      	bge.n	800bf10 <_printf_i+0xc8>
 800bf08:	232d      	movs	r3, #45	; 0x2d
 800bf0a:	4276      	negs	r6, r6
 800bf0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf10:	485e      	ldr	r0, [pc, #376]	; (800c08c <_printf_i+0x244>)
 800bf12:	230a      	movs	r3, #10
 800bf14:	e019      	b.n	800bf4a <_printf_i+0x102>
 800bf16:	680e      	ldr	r6, [r1, #0]
 800bf18:	602b      	str	r3, [r5, #0]
 800bf1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf1e:	bf18      	it	ne
 800bf20:	b236      	sxthne	r6, r6
 800bf22:	e7ef      	b.n	800bf04 <_printf_i+0xbc>
 800bf24:	682b      	ldr	r3, [r5, #0]
 800bf26:	6820      	ldr	r0, [r4, #0]
 800bf28:	1d19      	adds	r1, r3, #4
 800bf2a:	6029      	str	r1, [r5, #0]
 800bf2c:	0601      	lsls	r1, r0, #24
 800bf2e:	d501      	bpl.n	800bf34 <_printf_i+0xec>
 800bf30:	681e      	ldr	r6, [r3, #0]
 800bf32:	e002      	b.n	800bf3a <_printf_i+0xf2>
 800bf34:	0646      	lsls	r6, r0, #25
 800bf36:	d5fb      	bpl.n	800bf30 <_printf_i+0xe8>
 800bf38:	881e      	ldrh	r6, [r3, #0]
 800bf3a:	4854      	ldr	r0, [pc, #336]	; (800c08c <_printf_i+0x244>)
 800bf3c:	2f6f      	cmp	r7, #111	; 0x6f
 800bf3e:	bf0c      	ite	eq
 800bf40:	2308      	moveq	r3, #8
 800bf42:	230a      	movne	r3, #10
 800bf44:	2100      	movs	r1, #0
 800bf46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf4a:	6865      	ldr	r5, [r4, #4]
 800bf4c:	60a5      	str	r5, [r4, #8]
 800bf4e:	2d00      	cmp	r5, #0
 800bf50:	bfa2      	ittt	ge
 800bf52:	6821      	ldrge	r1, [r4, #0]
 800bf54:	f021 0104 	bicge.w	r1, r1, #4
 800bf58:	6021      	strge	r1, [r4, #0]
 800bf5a:	b90e      	cbnz	r6, 800bf60 <_printf_i+0x118>
 800bf5c:	2d00      	cmp	r5, #0
 800bf5e:	d04d      	beq.n	800bffc <_printf_i+0x1b4>
 800bf60:	4615      	mov	r5, r2
 800bf62:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf66:	fb03 6711 	mls	r7, r3, r1, r6
 800bf6a:	5dc7      	ldrb	r7, [r0, r7]
 800bf6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf70:	4637      	mov	r7, r6
 800bf72:	42bb      	cmp	r3, r7
 800bf74:	460e      	mov	r6, r1
 800bf76:	d9f4      	bls.n	800bf62 <_printf_i+0x11a>
 800bf78:	2b08      	cmp	r3, #8
 800bf7a:	d10b      	bne.n	800bf94 <_printf_i+0x14c>
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	07de      	lsls	r6, r3, #31
 800bf80:	d508      	bpl.n	800bf94 <_printf_i+0x14c>
 800bf82:	6923      	ldr	r3, [r4, #16]
 800bf84:	6861      	ldr	r1, [r4, #4]
 800bf86:	4299      	cmp	r1, r3
 800bf88:	bfde      	ittt	le
 800bf8a:	2330      	movle	r3, #48	; 0x30
 800bf8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf90:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf94:	1b52      	subs	r2, r2, r5
 800bf96:	6122      	str	r2, [r4, #16]
 800bf98:	f8cd a000 	str.w	sl, [sp]
 800bf9c:	464b      	mov	r3, r9
 800bf9e:	aa03      	add	r2, sp, #12
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	4640      	mov	r0, r8
 800bfa4:	f7ff fee2 	bl	800bd6c <_printf_common>
 800bfa8:	3001      	adds	r0, #1
 800bfaa:	d14c      	bne.n	800c046 <_printf_i+0x1fe>
 800bfac:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb0:	b004      	add	sp, #16
 800bfb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb6:	4835      	ldr	r0, [pc, #212]	; (800c08c <_printf_i+0x244>)
 800bfb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bfbc:	6829      	ldr	r1, [r5, #0]
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	f851 6b04 	ldr.w	r6, [r1], #4
 800bfc4:	6029      	str	r1, [r5, #0]
 800bfc6:	061d      	lsls	r5, r3, #24
 800bfc8:	d514      	bpl.n	800bff4 <_printf_i+0x1ac>
 800bfca:	07df      	lsls	r7, r3, #31
 800bfcc:	bf44      	itt	mi
 800bfce:	f043 0320 	orrmi.w	r3, r3, #32
 800bfd2:	6023      	strmi	r3, [r4, #0]
 800bfd4:	b91e      	cbnz	r6, 800bfde <_printf_i+0x196>
 800bfd6:	6823      	ldr	r3, [r4, #0]
 800bfd8:	f023 0320 	bic.w	r3, r3, #32
 800bfdc:	6023      	str	r3, [r4, #0]
 800bfde:	2310      	movs	r3, #16
 800bfe0:	e7b0      	b.n	800bf44 <_printf_i+0xfc>
 800bfe2:	6823      	ldr	r3, [r4, #0]
 800bfe4:	f043 0320 	orr.w	r3, r3, #32
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	2378      	movs	r3, #120	; 0x78
 800bfec:	4828      	ldr	r0, [pc, #160]	; (800c090 <_printf_i+0x248>)
 800bfee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bff2:	e7e3      	b.n	800bfbc <_printf_i+0x174>
 800bff4:	0659      	lsls	r1, r3, #25
 800bff6:	bf48      	it	mi
 800bff8:	b2b6      	uxthmi	r6, r6
 800bffa:	e7e6      	b.n	800bfca <_printf_i+0x182>
 800bffc:	4615      	mov	r5, r2
 800bffe:	e7bb      	b.n	800bf78 <_printf_i+0x130>
 800c000:	682b      	ldr	r3, [r5, #0]
 800c002:	6826      	ldr	r6, [r4, #0]
 800c004:	6961      	ldr	r1, [r4, #20]
 800c006:	1d18      	adds	r0, r3, #4
 800c008:	6028      	str	r0, [r5, #0]
 800c00a:	0635      	lsls	r5, r6, #24
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	d501      	bpl.n	800c014 <_printf_i+0x1cc>
 800c010:	6019      	str	r1, [r3, #0]
 800c012:	e002      	b.n	800c01a <_printf_i+0x1d2>
 800c014:	0670      	lsls	r0, r6, #25
 800c016:	d5fb      	bpl.n	800c010 <_printf_i+0x1c8>
 800c018:	8019      	strh	r1, [r3, #0]
 800c01a:	2300      	movs	r3, #0
 800c01c:	6123      	str	r3, [r4, #16]
 800c01e:	4615      	mov	r5, r2
 800c020:	e7ba      	b.n	800bf98 <_printf_i+0x150>
 800c022:	682b      	ldr	r3, [r5, #0]
 800c024:	1d1a      	adds	r2, r3, #4
 800c026:	602a      	str	r2, [r5, #0]
 800c028:	681d      	ldr	r5, [r3, #0]
 800c02a:	6862      	ldr	r2, [r4, #4]
 800c02c:	2100      	movs	r1, #0
 800c02e:	4628      	mov	r0, r5
 800c030:	f7f4 f8ce 	bl	80001d0 <memchr>
 800c034:	b108      	cbz	r0, 800c03a <_printf_i+0x1f2>
 800c036:	1b40      	subs	r0, r0, r5
 800c038:	6060      	str	r0, [r4, #4]
 800c03a:	6863      	ldr	r3, [r4, #4]
 800c03c:	6123      	str	r3, [r4, #16]
 800c03e:	2300      	movs	r3, #0
 800c040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c044:	e7a8      	b.n	800bf98 <_printf_i+0x150>
 800c046:	6923      	ldr	r3, [r4, #16]
 800c048:	462a      	mov	r2, r5
 800c04a:	4649      	mov	r1, r9
 800c04c:	4640      	mov	r0, r8
 800c04e:	47d0      	blx	sl
 800c050:	3001      	adds	r0, #1
 800c052:	d0ab      	beq.n	800bfac <_printf_i+0x164>
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	079b      	lsls	r3, r3, #30
 800c058:	d413      	bmi.n	800c082 <_printf_i+0x23a>
 800c05a:	68e0      	ldr	r0, [r4, #12]
 800c05c:	9b03      	ldr	r3, [sp, #12]
 800c05e:	4298      	cmp	r0, r3
 800c060:	bfb8      	it	lt
 800c062:	4618      	movlt	r0, r3
 800c064:	e7a4      	b.n	800bfb0 <_printf_i+0x168>
 800c066:	2301      	movs	r3, #1
 800c068:	4632      	mov	r2, r6
 800c06a:	4649      	mov	r1, r9
 800c06c:	4640      	mov	r0, r8
 800c06e:	47d0      	blx	sl
 800c070:	3001      	adds	r0, #1
 800c072:	d09b      	beq.n	800bfac <_printf_i+0x164>
 800c074:	3501      	adds	r5, #1
 800c076:	68e3      	ldr	r3, [r4, #12]
 800c078:	9903      	ldr	r1, [sp, #12]
 800c07a:	1a5b      	subs	r3, r3, r1
 800c07c:	42ab      	cmp	r3, r5
 800c07e:	dcf2      	bgt.n	800c066 <_printf_i+0x21e>
 800c080:	e7eb      	b.n	800c05a <_printf_i+0x212>
 800c082:	2500      	movs	r5, #0
 800c084:	f104 0619 	add.w	r6, r4, #25
 800c088:	e7f5      	b.n	800c076 <_printf_i+0x22e>
 800c08a:	bf00      	nop
 800c08c:	0800c4e5 	.word	0x0800c4e5
 800c090:	0800c4f6 	.word	0x0800c4f6

0800c094 <_read_r>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	4d07      	ldr	r5, [pc, #28]	; (800c0b4 <_read_r+0x20>)
 800c098:	4604      	mov	r4, r0
 800c09a:	4608      	mov	r0, r1
 800c09c:	4611      	mov	r1, r2
 800c09e:	2200      	movs	r2, #0
 800c0a0:	602a      	str	r2, [r5, #0]
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	f7f5 fd74 	bl	8001b90 <_read>
 800c0a8:	1c43      	adds	r3, r0, #1
 800c0aa:	d102      	bne.n	800c0b2 <_read_r+0x1e>
 800c0ac:	682b      	ldr	r3, [r5, #0]
 800c0ae:	b103      	cbz	r3, 800c0b2 <_read_r+0x1e>
 800c0b0:	6023      	str	r3, [r4, #0]
 800c0b2:	bd38      	pop	{r3, r4, r5, pc}
 800c0b4:	20005310 	.word	0x20005310

0800c0b8 <_fstat_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4d07      	ldr	r5, [pc, #28]	; (800c0d8 <_fstat_r+0x20>)
 800c0bc:	2300      	movs	r3, #0
 800c0be:	4604      	mov	r4, r0
 800c0c0:	4608      	mov	r0, r1
 800c0c2:	4611      	mov	r1, r2
 800c0c4:	602b      	str	r3, [r5, #0]
 800c0c6:	f7f5 fd8c 	bl	8001be2 <_fstat>
 800c0ca:	1c43      	adds	r3, r0, #1
 800c0cc:	d102      	bne.n	800c0d4 <_fstat_r+0x1c>
 800c0ce:	682b      	ldr	r3, [r5, #0]
 800c0d0:	b103      	cbz	r3, 800c0d4 <_fstat_r+0x1c>
 800c0d2:	6023      	str	r3, [r4, #0]
 800c0d4:	bd38      	pop	{r3, r4, r5, pc}
 800c0d6:	bf00      	nop
 800c0d8:	20005310 	.word	0x20005310

0800c0dc <_isatty_r>:
 800c0dc:	b538      	push	{r3, r4, r5, lr}
 800c0de:	4d06      	ldr	r5, [pc, #24]	; (800c0f8 <_isatty_r+0x1c>)
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	4608      	mov	r0, r1
 800c0e6:	602b      	str	r3, [r5, #0]
 800c0e8:	f7f5 fd8b 	bl	8001c02 <_isatty>
 800c0ec:	1c43      	adds	r3, r0, #1
 800c0ee:	d102      	bne.n	800c0f6 <_isatty_r+0x1a>
 800c0f0:	682b      	ldr	r3, [r5, #0]
 800c0f2:	b103      	cbz	r3, 800c0f6 <_isatty_r+0x1a>
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	bd38      	pop	{r3, r4, r5, pc}
 800c0f8:	20005310 	.word	0x20005310

0800c0fc <_init>:
 800c0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fe:	bf00      	nop
 800c100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c102:	bc08      	pop	{r3}
 800c104:	469e      	mov	lr, r3
 800c106:	4770      	bx	lr

0800c108 <_fini>:
 800c108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10a:	bf00      	nop
 800c10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c10e:	bc08      	pop	{r3}
 800c110:	469e      	mov	lr, r3
 800c112:	4770      	bx	lr
