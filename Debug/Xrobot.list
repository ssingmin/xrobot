
xrobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f80  080150b8  080150b8  000250b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016038  08016038  00030270  2**0
                  CONTENTS
  4 .ARM          00000008  08016038  08016038  00026038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016040  08016040  00030270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016040  08016040  00026040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016044  08016044  00026044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  08016048  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030270  2**0
                  CONTENTS
 10 .bss          000058fc  20000270  20000270  00030270  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005b6c  20005b6c  00030270  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY
 13 .debug_info   000236a5  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ec8  00000000  00000000  00053945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ad0  00000000  00000000  00058810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018d8  00000000  00000000  0005a2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000073ce  00000000  00000000  0005bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020545  00000000  00000000  00062f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d26ea  00000000  00000000  000834cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155bb5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000084d8  00000000  00000000  00155c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801509c 	.word	0x0801509c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	0801509c 	.word	0x0801509c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ws2812NumOn>:

uint16_t g_led_data[(TOTALNUM*32)+CYCLE_RESET]={0,};//CYCLE_RESET of data = 0, not BIT_HIGH or BIT_LOW


void ws2812NumOn(uint32_t led_cnt)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint16_t *)g_led_data, (TOTALNUM*32)+CYCLE_RESET);
 8000eb4:	f240 4304 	movw	r3, #1028	; 0x404
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <ws2812NumOn+0x48>)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	480e      	ldr	r0, [pc, #56]	; (8000ef8 <ws2812NumOn+0x4c>)
 8000ebe:	f008 fbf5 	bl	80096ac <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_2, (uint16_t *)g_led_data, (TOTALNUM*32)+CYCLE_RESET);
 8000ec2:	f240 4304 	movw	r3, #1028	; 0x404
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <ws2812NumOn+0x48>)
 8000ec8:	2104      	movs	r1, #4
 8000eca:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <ws2812NumOn+0x4c>)
 8000ecc:	f008 fbee 	bl	80096ac <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_3, (uint16_t *)g_led_data, (TOTALNUM*32)+CYCLE_RESET);
 8000ed0:	f240 4304 	movw	r3, #1028	; 0x404
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <ws2812NumOn+0x48>)
 8000ed6:	2108      	movs	r1, #8
 8000ed8:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <ws2812NumOn+0x4c>)
 8000eda:	f008 fbe7 	bl	80096ac <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_4, (uint16_t *)g_led_data, (TOTALNUM*32)+CYCLE_RESET);
 8000ede:	f240 4304 	movw	r3, #1028	; 0x404
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <ws2812NumOn+0x48>)
 8000ee4:	210c      	movs	r1, #12
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <ws2812NumOn+0x4c>)
 8000ee8:	f008 fbe0 	bl	80096ac <HAL_TIM_PWM_Start_DMA>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000028c 	.word	0x2000028c
 8000ef8:	20000e38 	.word	0x20000e38

08000efc <ws2812AllColor>:
	}
}


void ws2812AllColor(uint8_t red, uint8_t green, uint8_t blue)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	460b      	mov	r3, r1
 8000f08:	71bb      	strb	r3, [r7, #6]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	717b      	strb	r3, [r7, #5]
	uint32_t buf=0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]

	buf = green*0x1000000 + red*0x10000 + blue*0x100;	//8bit+8bit+8bit=24bit
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	021a      	lsls	r2, r3, #8
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4413      	add	r3, r2
 8000f1a:	021a      	lsls	r2, r3, #8
 8000f1c:	797b      	ldrb	r3, [r7, #5]
 8000f1e:	4413      	add	r3, r2
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	60fb      	str	r3, [r7, #12]

	for(int j=TOTALNUM;j>0;j--)
 8000f24:	231d      	movs	r3, #29
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	e025      	b.n	8000f76 <ws2812AllColor+0x7a>
	{
		for(int i=0;i<32;i++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	e01c      	b.n	8000f6a <ws2812AllColor+0x6e>
		{
			if(buf&(1<<i)) {g_led_data[(j*32)-i] = BIT_HIGH;}
 8000f30:	2201      	movs	r2, #1
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d008      	beq.n	8000f54 <ws2812AllColor+0x58>
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	015a      	lsls	r2, r3, #5
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <ws2812AllColor+0x90>)
 8000f4c:	2134      	movs	r1, #52	; 0x34
 8000f4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f52:	e007      	b.n	8000f64 <ws2812AllColor+0x68>
			else {g_led_data[(j*32)-i] = BIT_LOW;}
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	015a      	lsls	r2, r3, #5
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <ws2812AllColor+0x90>)
 8000f5e:	2123      	movs	r1, #35	; 0x23
 8000f60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<32;i++)
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	3301      	adds	r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	2b1f      	cmp	r3, #31
 8000f6e:	dddf      	ble.n	8000f30 <ws2812AllColor+0x34>
	for(int j=TOTALNUM;j>0;j--)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	dcd6      	bgt.n	8000f2a <ws2812AllColor+0x2e>
		}
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	371c      	adds	r7, #28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000028c 	.word	0x2000028c

08000f90 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000f96:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <MX_CAN1_Init+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000f9c:	2206      	movs	r2, #6
 8000f9e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fae:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000fb2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fb6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000fba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fe2:	f005 fe7d 	bl	8006ce0 <HAL_CAN_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000fec:	f004 fd78 	bl	8005ae0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000b98 	.word	0x20000b98
 8000ff8:	40006400 	.word	0x40006400

08000ffc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <HAL_CAN_MspInit+0x94>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d134      	bne.n	8001088 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_CAN_MspInit+0x98>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <HAL_CAN_MspInit+0x98>)
 8001028:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_CAN_MspInit+0x98>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_CAN_MspInit+0x98>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a14      	ldr	r2, [pc, #80]	; (8001094 <HAL_CAN_MspInit+0x98>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_CAN_MspInit+0x98>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001056:	f44f 7340 	mov.w	r3, #768	; 0x300
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001068:	2309      	movs	r3, #9
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4809      	ldr	r0, [pc, #36]	; (8001098 <HAL_CAN_MspInit+0x9c>)
 8001074:	f007 f9e2 	bl	800843c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2105      	movs	r1, #5
 800107c:	2014      	movs	r0, #20
 800107e:	f006 fda3 	bl	8007bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001082:	2014      	movs	r0, #20
 8001084:	f006 fdbc 	bl	8007c00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	; 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40006400 	.word	0x40006400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400

0800109c <CAN_disableirq>:
  }
}

/* USER CODE BEGIN 1 */

void CAN_disableirq(void){HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);}
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
 80010a0:	2014      	movs	r0, #20
 80010a2:	f006 fdbb 	bl	8007c1c <HAL_NVIC_DisableIRQ>
 80010a6:	2015      	movs	r0, #21
 80010a8:	f006 fdb8 	bl	8007c1c <HAL_NVIC_DisableIRQ>
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <CAN_enableirq>:
void CAN_enableirq(void){HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);/*HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);*/}
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	2014      	movs	r0, #20
 80010b6:	f006 fda3 	bl	8007c00 <HAL_NVIC_EnableIRQ>
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <CanInit>:

void CanInit(uint32_t id, uint32_t mask, uint8_t EXT_Select)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	4613      	mov	r3, r2
 80010cc:	71fb      	strb	r3, [r7, #7]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <CanInit+0x88>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <CanInit+0x88>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <CanInit+0x88>)
 80010dc:	2201      	movs	r2, #1
 80010de:	61da      	str	r2, [r3, #28]
//    sFilterConfig.FilterIdHigh = (id<<3)>>16;
//    sFilterConfig.FilterIdLow = ((id<<3)&0xffff)|(EXT_Select<<2);//(0x1<<2) is extended id check register
//    sFilterConfig.FilterMaskIdHigh = (mask<<3)>>16;
//    sFilterConfig.FilterMaskIdLow = ((mask<<3)&0xffff)|(EXT_Select<<2);
    sFilterConfig.FilterIdHigh = (id<<5);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	015b      	lsls	r3, r3, #5
 80010e4:	4a18      	ldr	r2, [pc, #96]	; (8001148 <CanInit+0x88>)
 80010e6:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = 0;//(0x1<<2) is extended id check register
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <CanInit+0x88>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh = (mask<<5);
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	015b      	lsls	r3, r3, #5
 80010f2:	4a15      	ldr	r2, [pc, #84]	; (8001148 <CanInit+0x88>)
 80010f4:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = 0;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <CanInit+0x88>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <CanInit+0x88>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <CanInit+0x88>)
 8001104:	2201      	movs	r2, #1
 8001106:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <CanInit+0x88>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 800110e:	480f      	ldr	r0, [pc, #60]	; (800114c <CanInit+0x8c>)
 8001110:	f005 ffc2 	bl	8007098 <HAL_CAN_Start>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <CanInit+0x5e>
 800111a:	f004 fce1 	bl	8005ae0 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 800111e:	2102      	movs	r1, #2
 8001120:	480a      	ldr	r0, [pc, #40]	; (800114c <CanInit+0x8c>)
 8001122:	f006 fa1f 	bl	8007564 <HAL_CAN_ActivateNotification>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d000      	beq.n	800112e <CanInit+0x6e>
 800112c:	e7fe      	b.n	800112c <CanInit+0x6c>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800112e:	4906      	ldr	r1, [pc, #24]	; (8001148 <CanInit+0x88>)
 8001130:	4806      	ldr	r0, [pc, #24]	; (800114c <CanInit+0x8c>)
 8001132:	f005 fed1 	bl	8006ed8 <HAL_CAN_ConfigFilter>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <CanInit+0x80>
    {
		/* Filter configuration Error */
		Error_Handler();
 800113c:	f004 fcd0 	bl	8005ae0 <Error_Handler>
    }
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000b70 	.word	0x20000b70
 800114c:	20000b98 	.word	0x20000b98

08001150 <sendCan>:
		Error_Handler();
    }
}

void sendCan(uint32_t ID, int8_t *buf, uint8_t len, uint8_t ext)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	4611      	mov	r1, r2
 800115c:	461a      	mov	r2, r3
 800115e:	460b      	mov	r3, r1
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	4613      	mov	r3, r2
 8001164:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <sendCan+0x2c>
 8001178:	2304      	movs	r3, #4
 800117a:	e000      	b.n	800117e <sendCan+0x2e>
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 800118a:	4812      	ldr	r0, [pc, #72]	; (80011d4 <sendCan+0x84>)
 800118c:	f006 f8a3 	bl	80072d6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001190:	4603      	mov	r3, r0
 8001192:	613b      	str	r3, [r7, #16]
    printf("%d: cantx \n", osKernelGetTickCount());
 8001194:	f00b f85e 	bl	800c254 <osKernelGetTickCount>
 8001198:	4603      	mov	r3, r0
 800119a:	4619      	mov	r1, r3
 800119c:	480e      	ldr	r0, [pc, #56]	; (80011d8 <sendCan+0x88>)
 800119e:	f00f fe75 	bl	8010e8c <iprintf>
    if(dwTxMailBox == 0){}
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00d      	beq.n	80011c4 <sendCan+0x74>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	f107 0114 	add.w	r1, r7, #20
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	4808      	ldr	r0, [pc, #32]	; (80011d4 <sendCan+0x84>)
 80011b4:	f005 ffb4 	bl	8007120 <HAL_CAN_AddTxMessage>
 80011b8:	4603      	mov	r3, r0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 80011bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d000      	beq.n	80011c4 <sendCan+0x74>
 80011c2:	e7fe      	b.n	80011c2 <sendCan+0x72>
    }
    osDelay(1);//must be
 80011c4:	2001      	movs	r0, #1
 80011c6:	f00b f9dd 	bl	800c584 <osDelay>
}
 80011ca:	bf00      	nop
 80011cc:	3730      	adds	r7, #48	; 0x30
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000b98 	.word	0x20000b98
 80011d8:	080150b8 	.word	0x080150b8

080011dc <SDOMsg>:

void SDOMsg(uint8_t Node_id,uint16_t index, uint8_t subindex, uint32_t msg, uint8_t len)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	4603      	mov	r3, r0
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	460b      	mov	r3, r1
 80011ea:	80bb      	strh	r3, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[8]={0,};
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]

	switch (len) {
 80011f8:	7e3b      	ldrb	r3, [r7, #24]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d817      	bhi.n	8001230 <SDOMsg+0x54>
 8001200:	a201      	add	r2, pc, #4	; (adr r2, 8001208 <SDOMsg+0x2c>)
 8001202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001206:	bf00      	nop
 8001208:	08001219 	.word	0x08001219
 800120c:	0800121f 	.word	0x0800121f
 8001210:	08001225 	.word	0x08001225
 8001214:	0800122b 	.word	0x0800122b
		case 1:
			buf[0]=0x2f;	break;	//1byte
 8001218:	232f      	movs	r3, #47	; 0x2f
 800121a:	723b      	strb	r3, [r7, #8]
 800121c:	e008      	b.n	8001230 <SDOMsg+0x54>
		case 2:
			buf[0]=0x2b;	break;	//2byte
 800121e:	232b      	movs	r3, #43	; 0x2b
 8001220:	723b      	strb	r3, [r7, #8]
 8001222:	e005      	b.n	8001230 <SDOMsg+0x54>
		case 3:
			buf[0]=0x27;	break;	//3byte
 8001224:	2327      	movs	r3, #39	; 0x27
 8001226:	723b      	strb	r3, [r7, #8]
 8001228:	e002      	b.n	8001230 <SDOMsg+0x54>
		case 4:
			buf[0]=0x23;	break;	//4byte
 800122a:	2323      	movs	r3, #35	; 0x23
 800122c:	723b      	strb	r3, [r7, #8]
 800122e:	bf00      	nop
	}

	memcpy(buf+1,&index,2);	//index
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	3301      	adds	r3, #1
 8001236:	88ba      	ldrh	r2, [r7, #4]
 8001238:	801a      	strh	r2, [r3, #0]
	buf[3]=subindex;		//subindex
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	72fb      	strb	r3, [r7, #11]
	memcpy(buf+4,&msg,len);	//data
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	3304      	adds	r3, #4
 8001244:	7e3a      	ldrb	r2, [r7, #24]
 8001246:	4639      	mov	r1, r7
 8001248:	4618      	mov	r0, r3
 800124a:	f00f f90a 	bl	8010462 <memcpy>

	sendCan(0x600+Node_id,buf,8,0);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001254:	4618      	mov	r0, r3
 8001256:	f107 0108 	add.w	r1, r7, #8
 800125a:	2300      	movs	r3, #0
 800125c:	2208      	movs	r2, #8
 800125e:	f7ff ff77 	bl	8001150 <sendCan>
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop

0800126c <NMT_Mode>:

void NMT_Mode(uint8_t command, uint8_t Node_id)// command 1= pre-operation, 2=operation
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	460a      	mov	r2, r1
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	4613      	mov	r3, r2
 800127a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[8]={0,};
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]


	if(command == 1){buf[0]=0x80;}//enter nmt pre-operational command
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d102      	bne.n	8001290 <NMT_Mode+0x24>
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	723b      	strb	r3, [r7, #8]
 800128e:	e001      	b.n	8001294 <NMT_Mode+0x28>
	else{buf[0]=0x01;}//enter nmt operational command for PDO operation
 8001290:	2301      	movs	r3, #1
 8001292:	723b      	strb	r3, [r7, #8]
	buf[1]=Node_id;//node id
 8001294:	79bb      	ldrb	r3, [r7, #6]
 8001296:	727b      	strb	r3, [r7, #9]

	sendCan(0, buf, 8, 0);
 8001298:	f107 0108 	add.w	r1, r7, #8
 800129c:	2300      	movs	r3, #0
 800129e:	2208      	movs	r2, #8
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff ff55 	bl	8001150 <sendCan>
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <PDOMapping>:


int PDOMapping(uint8_t Node_id, uint16_t PDO_index, MappingPar Param, uint8_t Num_entry)//entry rr
{
 80012b0:	b082      	sub	sp, #8
 80012b2:	b590      	push	{r4, r7, lr}
 80012b4:	b089      	sub	sp, #36	; 0x24
 80012b6:	af02      	add	r7, sp, #8
 80012b8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80012bc:	e884 000c 	stmia.w	r4, {r2, r3}
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	460b      	mov	r3, r1
 80012c6:	80bb      	strh	r3, [r7, #4]
	uint32_t tmp = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
	uint16_t tmp_TxRx = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	82fb      	strh	r3, [r7, #22]
	uint8_t type = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	757b      	strb	r3, [r7, #21]

	if(Num_entry>=5){printf("Num_entry error: %d\n", Num_entry); return 0;}
 80012d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d907      	bls.n	80012ec <PDOMapping+0x3c>
 80012dc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80012e0:	4619      	mov	r1, r3
 80012e2:	4858      	ldr	r0, [pc, #352]	; (8001444 <PDOMapping+0x194>)
 80012e4:	f00f fdd2 	bl	8010e8c <iprintf>
 80012e8:	2300      	movs	r3, #0
 80012ea:	e0a4      	b.n	8001436 <PDOMapping+0x186>

	if(PDO_index>=0x1600&&PDO_index<=0x17ff){tmp_TxRx=0x200+0x100*(PDO_index-0x1600); type=0xff;}
 80012ec:	88bb      	ldrh	r3, [r7, #4]
 80012ee:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 80012f2:	d30d      	bcc.n	8001310 <PDOMapping+0x60>
 80012f4:	88bb      	ldrh	r3, [r7, #4]
 80012f6:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80012fa:	d209      	bcs.n	8001310 <PDOMapping+0x60>
 80012fc:	88bb      	ldrh	r3, [r7, #4]
 80012fe:	f5a3 53af 	sub.w	r3, r3, #5600	; 0x15e0
 8001302:	3b1e      	subs	r3, #30
 8001304:	b29b      	uxth	r3, r3
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	82fb      	strh	r3, [r7, #22]
 800130a:	23ff      	movs	r3, #255	; 0xff
 800130c:	757b      	strb	r3, [r7, #21]
 800130e:	e021      	b.n	8001354 <PDOMapping+0xa4>
	else if(PDO_index>=0x1a00&&PDO_index<=0x1bff) {
 8001310:	88bb      	ldrh	r3, [r7, #4]
 8001312:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8001316:	d316      	bcc.n	8001346 <PDOMapping+0x96>
 8001318:	88bb      	ldrh	r3, [r7, #4]
 800131a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800131e:	d212      	bcs.n	8001346 <PDOMapping+0x96>
		tmp_TxRx=0x180+0x100*(PDO_index-0x1a00);
 8001320:	88bb      	ldrh	r3, [r7, #4]
 8001322:	f5a3 53d0 	sub.w	r3, r3, #6656	; 0x1a00
 8001326:	b29b      	uxth	r3, r3
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	b29b      	uxth	r3, r3
 800132c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001330:	82fb      	strh	r3, [r7, #22]
		if(Param.option==0){type=0xfe;}
 8001332:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <PDOMapping+0x90>
 800133a:	23fe      	movs	r3, #254	; 0xfe
 800133c:	757b      	strb	r3, [r7, #21]
 800133e:	e009      	b.n	8001354 <PDOMapping+0xa4>
		else {type=0xff;}
 8001340:	23ff      	movs	r3, #255	; 0xff
 8001342:	757b      	strb	r3, [r7, #21]
		if(Param.option==0){type=0xfe;}
 8001344:	e006      	b.n	8001354 <PDOMapping+0xa4>
		}
	else {printf("PDO_index error: %d\n", PDO_index); return 0;}
 8001346:	88bb      	ldrh	r3, [r7, #4]
 8001348:	4619      	mov	r1, r3
 800134a:	483f      	ldr	r0, [pc, #252]	; (8001448 <PDOMapping+0x198>)
 800134c:	f00f fd9e 	bl	8010e8c <iprintf>
 8001350:	2300      	movs	r3, #0
 8001352:	e070      	b.n	8001436 <PDOMapping+0x186>

	NMT_Mode(PRE_OPERATION, Node_id);//pre-operation mode
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4619      	mov	r1, r3
 8001358:	2001      	movs	r0, #1
 800135a:	f7ff ff87 	bl	800126c <NMT_Mode>

	for(int i=0;i<Num_entry;i++) {//clear rpdo0 mapping, 0x60ff(index) 03(subindex) 20(length)
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	e05d      	b.n	8001420 <PDOMapping+0x170>
		SDOMsg(Node_id, PDO_index, 0, 0, 1);//clear rpdo0 mapping
 8001364:	88b9      	ldrh	r1, [r7, #4]
 8001366:	79f8      	ldrb	r0, [r7, #7]
 8001368:	2301      	movs	r3, #1
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2300      	movs	r3, #0
 800136e:	2200      	movs	r2, #0
 8001370:	f7ff ff34 	bl	80011dc <SDOMsg>
		tmp=(0x10000*Param.index[i])+(0x100* Param.subindex[i])+(Param.length[i]);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800137a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	440a      	add	r2, r1
 8001388:	7812      	ldrb	r2, [r2, #0]
 800138a:	4413      	add	r3, r2
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	440a      	add	r2, r1
 8001396:	7812      	ldrb	r2, [r2, #0]
 8001398:	4413      	add	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]
		SDOMsg(Node_id, PDO_index, i+1, tmp, 4);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	3301      	adds	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	88b9      	ldrh	r1, [r7, #4]
 80013a6:	79f8      	ldrb	r0, [r7, #7]
 80013a8:	2304      	movs	r3, #4
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f7ff ff15 	bl	80011dc <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 1, tmp_TxRx+Node_id, 4);//cob-id??
 80013b2:	88bb      	ldrh	r3, [r7, #4]
 80013b4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80013b8:	b299      	uxth	r1, r3
 80013ba:	8afa      	ldrh	r2, [r7, #22]
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4413      	add	r3, r2
 80013c0:	461a      	mov	r2, r3
 80013c2:	79f8      	ldrb	r0, [r7, #7]
 80013c4:	2304      	movs	r3, #4
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	4613      	mov	r3, r2
 80013ca:	2201      	movs	r2, #1
 80013cc:	f7ff ff06 	bl	80011dc <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 2, type, 1);//transmission type, fix asynchronous with 0xff
 80013d0:	88bb      	ldrh	r3, [r7, #4]
 80013d2:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80013d6:	b299      	uxth	r1, r3
 80013d8:	7d7b      	ldrb	r3, [r7, #21]
 80013da:	79f8      	ldrb	r0, [r7, #7]
 80013dc:	2201      	movs	r2, #1
 80013de:	9200      	str	r2, [sp, #0]
 80013e0:	2202      	movs	r2, #2
 80013e2:	f7ff fefb 	bl	80011dc <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 3+(Param.option*2), Param.option_time, 2);//not necessary 3= inhibit mode, 5=event timer mode
 80013e6:	88bb      	ldrh	r3, [r7, #4]
 80013e8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80013ec:	b299      	uxth	r1, r3
 80013ee:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3303      	adds	r3, #3
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80013fc:	461c      	mov	r4, r3
 80013fe:	79f8      	ldrb	r0, [r7, #7]
 8001400:	2302      	movs	r3, #2
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	4623      	mov	r3, r4
 8001406:	f7ff fee9 	bl	80011dc <SDOMsg>
		SDOMsg(Node_id, PDO_index, 0, 0x01, 1);//set rpdo0 mapping
 800140a:	88b9      	ldrh	r1, [r7, #4]
 800140c:	79f8      	ldrb	r0, [r7, #7]
 800140e:	2301      	movs	r3, #1
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2301      	movs	r3, #1
 8001414:	2200      	movs	r2, #0
 8001416:	f7ff fee1 	bl	80011dc <SDOMsg>
	for(int i=0;i<Num_entry;i++) {//clear rpdo0 mapping, 0x60ff(index) 03(subindex) 20(length)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	3301      	adds	r3, #1
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	429a      	cmp	r2, r3
 8001428:	db9c      	blt.n	8001364 <PDOMapping+0xb4>
	}

	NMT_Mode(OPERATION, Node_id);//operation mode
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4619      	mov	r1, r3
 800142e:	2002      	movs	r0, #2
 8001430:	f7ff ff1c 	bl	800126c <NMT_Mode>

	return 1;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	371c      	adds	r7, #28
 800143a:	46bd      	mov	sp, r7
 800143c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001440:	b002      	add	sp, #8
 8001442:	4770      	bx	lr
 8001444:	080150c4 	.word	0x080150c4
 8001448:	080150dc 	.word	0x080150dc

0800144c <PDOMsg>:

void PDOMsg(uint8_t Node_id, uint16_t PDO_index, uint8_t *buf, uint8_t length)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	603a      	str	r2, [r7, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
 800145a:	460b      	mov	r3, r1
 800145c:	80bb      	strh	r3, [r7, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	71bb      	strb	r3, [r7, #6]
	sendCan((PDO_index-0x1800)+Node_id,buf,length,0);
 8001462:	88bb      	ldrh	r3, [r7, #4]
 8001464:	f5a3 52c0 	sub.w	r2, r3, #6144	; 0x1800
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	4413      	add	r3, r2
 800146c:	4618      	mov	r0, r3
 800146e:	79ba      	ldrb	r2, [r7, #6]
 8001470:	2300      	movs	r3, #0
 8001472:	6839      	ldr	r1, [r7, #0]
 8001474:	f7ff fe6c 	bl	8001150 <sendCan>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <Vel_PDOMsg>:

void Vel_PDOMsg(uint8_t Node_id, uint16_t PDO_index, uint16_t vel_left, uint16_t vel_right)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	4604      	mov	r4, r0
 8001488:	4608      	mov	r0, r1
 800148a:	4611      	mov	r1, r2
 800148c:	461a      	mov	r2, r3
 800148e:	4623      	mov	r3, r4
 8001490:	71fb      	strb	r3, [r7, #7]
 8001492:	4603      	mov	r3, r0
 8001494:	80bb      	strh	r3, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	807b      	strh	r3, [r7, #2]
 800149a:	4613      	mov	r3, r2
 800149c:	803b      	strh	r3, [r7, #0]
	uint8_t buf[8];

	buf[0]=(uint8_t)vel_left;
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	723b      	strb	r3, [r7, #8]
	buf[1]=(uint8_t)(vel_left>>8);
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	0a1b      	lsrs	r3, r3, #8
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	727b      	strb	r3, [r7, #9]
	buf[2]=(uint8_t)vel_right;
 80014ae:	883b      	ldrh	r3, [r7, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	72bb      	strb	r3, [r7, #10]
	buf[3]=(uint8_t)(vel_right>>8);
 80014b4:	883b      	ldrh	r3, [r7, #0]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	72fb      	strb	r3, [r7, #11]

	PDOMsg(Node_id, PDO_index, buf, 4);
 80014be:	f107 0208 	add.w	r2, r7, #8
 80014c2:	88b9      	ldrh	r1, [r7, #4]
 80014c4:	79f8      	ldrb	r0, [r7, #7]
 80014c6:	2304      	movs	r3, #4
 80014c8:	f7ff ffc0 	bl	800144c <PDOMsg>
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd90      	pop	{r4, r7, pc}

080014d4 <Tor_OnOff>:


void Tor_OnOff(uint8_t OnOff)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af02      	add	r7, sp, #8
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
	if(OnOff==1){
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d139      	bne.n	8001558 <Tor_OnOff+0x84>
		for(int i=0;i<2;i++){
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	e032      	b.n	8001550 <Tor_OnOff+0x7c>
			SDOMsg(i+1,0x6040, 0x0, 0x00, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	3301      	adds	r3, #1
 80014f0:	b2d8      	uxtb	r0, r3
 80014f2:	2302      	movs	r3, #2
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2300      	movs	r3, #0
 80014f8:	2200      	movs	r2, #0
 80014fa:	f246 0140 	movw	r1, #24640	; 0x6040
 80014fe:	f7ff fe6d 	bl	80011dc <SDOMsg>
			SDOMsg(i+1,0x6040, 0x0, 0x06, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 1: At this time, the low 4-bit status of 6041 is 0001, motor is released;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	3301      	adds	r3, #1
 8001508:	b2d8      	uxtb	r0, r3
 800150a:	2302      	movs	r3, #2
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2306      	movs	r3, #6
 8001510:	2200      	movs	r2, #0
 8001512:	f246 0140 	movw	r1, #24640	; 0x6040
 8001516:	f7ff fe61 	bl	80011dc <SDOMsg>
			SDOMsg(i+1,0x6040, 0x0, 0x07, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 2: At this time, the low 4-bit status of 6041 is 0011, motor is enabled;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	3301      	adds	r3, #1
 8001520:	b2d8      	uxtb	r0, r3
 8001522:	2302      	movs	r3, #2
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2307      	movs	r3, #7
 8001528:	2200      	movs	r2, #0
 800152a:	f246 0140 	movw	r1, #24640	; 0x6040
 800152e:	f7ff fe55 	bl	80011dc <SDOMsg>
			SDOMsg(i+1,0x6040, 0x0, 0x0f, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 3: At this time, the low 4-bit status of 6041 is 0111, motor is enabled;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	3301      	adds	r3, #1
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	2302      	movs	r3, #2
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	230f      	movs	r3, #15
 8001540:	2200      	movs	r2, #0
 8001542:	f246 0140 	movw	r1, #24640	; 0x6040
 8001546:	f7ff fe49 	bl	80011dc <SDOMsg>
		for(int i=0;i<2;i++){
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3301      	adds	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b01      	cmp	r3, #1
 8001554:	ddc9      	ble.n	80014ea <Tor_OnOff+0x16>
		}
	}
	else{for(int i=0;i<2;i++){SDOMsg(i+1,0x6040, 0x0, 0x00, 2);}}//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
}
 8001556:	e014      	b.n	8001582 <Tor_OnOff+0xae>
	else{for(int i=0;i<2;i++){SDOMsg(i+1,0x6040, 0x0, 0x00, 2);}}//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	e00e      	b.n	800157c <Tor_OnOff+0xa8>
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	3301      	adds	r3, #1
 8001564:	b2d8      	uxtb	r0, r3
 8001566:	2302      	movs	r3, #2
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2300      	movs	r3, #0
 800156c:	2200      	movs	r2, #0
 800156e:	f246 0140 	movw	r1, #24640	; 0x6040
 8001572:	f7ff fe33 	bl	80011dc <SDOMsg>
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	3301      	adds	r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b01      	cmp	r3, #1
 8001580:	dded      	ble.n	800155e <Tor_OnOff+0x8a>
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Get RX message */
	printf("%d: canrx \n", osKernelGetTickCount());
 8001594:	f00a fe5e 	bl	800c254 <osKernelGetTickCount>
 8001598:	4603      	mov	r3, r0
 800159a:	4619      	mov	r1, r3
 800159c:	4817      	ldr	r0, [pc, #92]	; (80015fc <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800159e:	f00f fc75 	bl	8010e8c <iprintf>
	if(FLAG_RxCplt<5)
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d81a      	bhi.n	80015e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
	{
		if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header[FLAG_RxCplt], g_uCAN_Rx_Data[FLAG_RxCplt]) != HAL_OK){while(1){;}}
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4a13      	ldr	r2, [pc, #76]	; (8001604 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80015b8:	441a      	add	r2, r3
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4911      	ldr	r1, [pc, #68]	; (8001608 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80015c2:	440b      	add	r3, r1
 80015c4:	2100      	movs	r1, #0
 80015c6:	4811      	ldr	r0, [pc, #68]	; (800160c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80015c8:	f005 feba 	bl	8007340 <HAL_CAN_GetRxMessage>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d000      	beq.n	80015d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 80015d2:	e7fe      	b.n	80015d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
//		printf("%d: RF %d %d %d\n", osKernelGetTickCount(),
//				g_tCan_Rx_Header[FLAG_RxCplt].StdId, g_tCan_Rx_Header[FLAG_RxCplt].ExtId, g_tCan_Rx_Header[FLAG_RxCplt].IDE);
		FLAG_RxCplt++;
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80015dc:	6013      	str	r3, [r2, #0]
//		printf("%d: RF_TC %d %d %d\n", osKernelGetTickCount(),
//						g_tCan_Rx_Header[FLAG_RxCplt].StdId, g_tCan_Rx_Header[FLAG_RxCplt].ExtId, g_tCan_Rx_Header[FLAG_RxCplt].IDE);
	}


}
 80015de:	e009      	b.n	80015f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
		if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header[6], g_uCAN_Rx_Data[6]) != HAL_OK){while(1){;}}
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80015e2:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80015e4:	2100      	movs	r1, #0
 80015e6:	4809      	ldr	r0, [pc, #36]	; (800160c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80015e8:	f005 feaa 	bl	8007340 <HAL_CAN_GetRxMessage>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d000      	beq.n	80015f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
 80015f2:	e7fe      	b.n	80015f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	080150f4 	.word	0x080150f4
 8001600:	20000a94 	.word	0x20000a94
 8001604:	20000ac8 	.word	0x20000ac8
 8001608:	20000a98 	.word	0x20000a98
 800160c:	20000b98 	.word	0x20000b98
 8001610:	20000ac8 	.word	0x20000ac8
 8001614:	20000b70 	.word	0x20000b70

08001618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <MX_DMA_Init+0xa8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a26      	ldr	r2, [pc, #152]	; (80016c0 <MX_DMA_Init+0xa8>)
 8001628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <MX_DMA_Init+0xa8>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <MX_DMA_Init+0xa8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a1f      	ldr	r2, [pc, #124]	; (80016c0 <MX_DMA_Init+0xa8>)
 8001644:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <MX_DMA_Init+0xa8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2105      	movs	r1, #5
 800165a:	200e      	movs	r0, #14
 800165c:	f006 fab4 	bl	8007bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001660:	200e      	movs	r0, #14
 8001662:	f006 facd 	bl	8007c00 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2105      	movs	r1, #5
 800166a:	2011      	movs	r0, #17
 800166c:	f006 faac 	bl	8007bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001670:	2011      	movs	r0, #17
 8001672:	f006 fac5 	bl	8007c00 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2105      	movs	r1, #5
 800167a:	203a      	movs	r0, #58	; 0x3a
 800167c:	f006 faa4 	bl	8007bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001680:	203a      	movs	r0, #58	; 0x3a
 8001682:	f006 fabd 	bl	8007c00 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2105      	movs	r1, #5
 800168a:	203b      	movs	r0, #59	; 0x3b
 800168c:	f006 fa9c 	bl	8007bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001690:	203b      	movs	r0, #59	; 0x3b
 8001692:	f006 fab5 	bl	8007c00 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2105      	movs	r1, #5
 800169a:	203c      	movs	r0, #60	; 0x3c
 800169c:	f006 fa94 	bl	8007bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80016a0:	203c      	movs	r0, #60	; 0x3c
 80016a2:	f006 faad 	bl	8007c00 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2105      	movs	r1, #5
 80016aa:	2046      	movs	r0, #70	; 0x46
 80016ac:	f006 fa8c 	bl	8007bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80016b0:	2046      	movs	r0, #70	; 0x46
 80016b2:	f006 faa5 	bl	8007c00 <HAL_NVIC_EnableIRQ>

}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <fanInit>:

#include <fan.h>


void fanInit(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
    //HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_1);//stm32f103
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016c8:	2100      	movs	r1, #0
 80016ca:	4802      	ldr	r0, [pc, #8]	; (80016d4 <fanInit+0x10>)
 80016cc:	f007 ff26 	bl	800951c <HAL_TIM_PWM_Start>
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000da8 	.word	0x20000da8

080016d8 <fanOn>:

void fanOn(uint8_t duty)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
	if(duty>=100){duty = 100;}
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2b63      	cmp	r3, #99	; 0x63
 80016e6:	d901      	bls.n	80016ec <fanOn+0x14>
 80016e8:	2364      	movs	r3, #100	; 0x64
 80016ea:	71fb      	strb	r3, [r7, #7]

	if(duty==0){htim1.Instance->CCR1 = 0;}
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d104      	bne.n	80016fc <fanOn+0x24>
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <fanOn+0x38>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34
	else {htim1.Instance->CCR1 = duty;}//write gogo
}
 80016fa:	e003      	b.n	8001704 <fanOn+0x2c>
	else {htim1.Instance->CCR1 = duty;}//write gogo
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <fanOn+0x38>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	79fa      	ldrb	r2, [r7, #7]
 8001702:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	20000da8 	.word	0x20000da8

08001714 <debugcansend>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

void debugcansend(int8_t * tmp)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	int8_t buf[8]={0,};
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
	memcpy(buf, tmp, sizeof(tmp));
 8001728:	60bb      	str	r3, [r7, #8]

	sendCan(0x3e8, buf, 8, 0);//(uint32_t ID, uint8_t data[8], uint8_t len, uint8_t ext)
 800172a:	f107 0108 	add.w	r1, r7, #8
 800172e:	2300      	movs	r3, #0
 8001730:	2208      	movs	r2, #8
 8001732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001736:	f7ff fd0b 	bl	8001150 <sendCan>
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	0000      	movs	r0, r0
 8001744:	0000      	movs	r0, r0
	...

08001748 <Cal_Real_cmd>:
void Cal_Real_cmd(void)
{
 8001748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800174c:	b090      	sub	sp, #64	; 0x40
 800174e:	af00      	add	r7, sp, #0

	double tempL;
	double tempR;

	tempL=(double)(Tmp_cmd_FL+Tmp_cmd_RL)/(2*10);
 8001750:	4bbf      	ldr	r3, [pc, #764]	; (8001a50 <Cal_Real_cmd+0x308>)
 8001752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001756:	461a      	mov	r2, r3
 8001758:	4bbe      	ldr	r3, [pc, #760]	; (8001a54 <Cal_Real_cmd+0x30c>)
 800175a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175e:	4413      	add	r3, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fedf 	bl	8000524 <__aeabi_i2d>
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	4bbb      	ldr	r3, [pc, #748]	; (8001a58 <Cal_Real_cmd+0x310>)
 800176c:	f7ff f86e 	bl	800084c <__aeabi_ddiv>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tempR=-(double)(Tmp_cmd_FR+Tmp_cmd_RR)/(2*10);
 8001778:	4bb8      	ldr	r3, [pc, #736]	; (8001a5c <Cal_Real_cmd+0x314>)
 800177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177e:	461a      	mov	r2, r3
 8001780:	4bb7      	ldr	r3, [pc, #732]	; (8001a60 <Cal_Real_cmd+0x318>)
 8001782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001786:	4413      	add	r3, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fecb 	bl	8000524 <__aeabi_i2d>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4614      	mov	r4, r2
 8001794:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	4bae      	ldr	r3, [pc, #696]	; (8001a58 <Cal_Real_cmd+0x310>)
 800179e:	4620      	mov	r0, r4
 80017a0:	4629      	mov	r1, r5
 80017a2:	f7ff f853 	bl	800084c <__aeabi_ddiv>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	if(angle_rad_c == 0){
 80017ae:	4bad      	ldr	r3, [pc, #692]	; (8001a64 <Cal_Real_cmd+0x31c>)
 80017b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	f7ff f984 	bl	8000ac8 <__aeabi_dcmpeq>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d047      	beq.n	8001856 <Cal_Real_cmd+0x10e>

	//Real_cmd_v_x = C_2PIRxINv60*((tempL+tempR)/2)*fabs(cos(ANGLE_RAD_A));
	Real_cmd_v_x = C_2PIRxINv60*((tempL+tempR)/2)*fabs(cos(ANGLE_RAD_A));
 80017c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80017ce:	f7fe fd5d 	bl	800028c <__adddf3>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017e2:	f7ff f833 	bl	800084c <__aeabi_ddiv>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	a390      	add	r3, pc, #576	; (adr r3, 8001a30 <Cal_Real_cmd+0x2e8>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7fe ff00 	bl	80005f8 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4614      	mov	r4, r2
 80017fe:	461d      	mov	r5, r3
 8001800:	4b99      	ldr	r3, [pc, #612]	; (8001a68 <Cal_Real_cmd+0x320>)
 8001802:	ed93 7b00 	vldr	d7, [r3]
 8001806:	4b99      	ldr	r3, [pc, #612]	; (8001a6c <Cal_Real_cmd+0x324>)
 8001808:	ed93 6b00 	vldr	d6, [r3]
 800180c:	eeb0 1a46 	vmov.f32	s2, s12
 8001810:	eef0 1a66 	vmov.f32	s3, s13
 8001814:	eeb0 0a47 	vmov.f32	s0, s14
 8001818:	eef0 0a67 	vmov.f32	s1, s15
 800181c:	f011 fcfc 	bl	8013218 <atan2>
 8001820:	eeb0 7a40 	vmov.f32	s14, s0
 8001824:	eef0 7a60 	vmov.f32	s15, s1
 8001828:	eeb0 0a47 	vmov.f32	s0, s14
 800182c:	eef0 0a67 	vmov.f32	s1, s15
 8001830:	f011 fb96 	bl	8012f60 <cos>
 8001834:	ec53 2b10 	vmov	r2, r3, d0
 8001838:	4690      	mov	r8, r2
 800183a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800183e:	4642      	mov	r2, r8
 8001840:	464b      	mov	r3, r9
 8001842:	4620      	mov	r0, r4
 8001844:	4629      	mov	r1, r5
 8001846:	f7fe fed7 	bl	80005f8 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4988      	ldr	r1, [pc, #544]	; (8001a70 <Cal_Real_cmd+0x328>)
 8001850:	e9c1 2300 	strd	r2, r3, [r1]
 8001854:	e3fa      	b.n	800204c <Cal_Real_cmd+0x904>
//	double real_angle_c;
//	double real_angle_i;
//	double real_angle_o;
	}
	else{
		if((tempL<tempR)  &&  ((tempL>0) && (tempR>0))){
 8001856:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800185a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800185e:	f7ff f93d 	bl	8000adc <__aeabi_dcmplt>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 810b 	beq.w	8001a80 <Cal_Real_cmd+0x338>
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001876:	f7ff f94f 	bl	8000b18 <__aeabi_dcmpgt>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80ff 	beq.w	8001a80 <Cal_Real_cmd+0x338>
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800188e:	f7ff f943 	bl	8000b18 <__aeabi_dcmpgt>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80f3 	beq.w	8001a80 <Cal_Real_cmd+0x338>
			if((sin(real_angle_c)<0.1) && (sin(real_angle_c)>-0.1))
 800189a:	4b76      	ldr	r3, [pc, #472]	; (8001a74 <Cal_Real_cmd+0x32c>)
 800189c:	ed93 7b00 	vldr	d7, [r3]
 80018a0:	eeb0 0a47 	vmov.f32	s0, s14
 80018a4:	eef0 0a67 	vmov.f32	s1, s15
 80018a8:	f011 fbf6 	bl	8013098 <sin>
 80018ac:	ec51 0b10 	vmov	r0, r1, d0
 80018b0:	a361      	add	r3, pc, #388	; (adr r3, 8001a38 <Cal_Real_cmd+0x2f0>)
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	f7ff f911 	bl	8000adc <__aeabi_dcmplt>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d05a      	beq.n	8001976 <Cal_Real_cmd+0x22e>
 80018c0:	4b6c      	ldr	r3, [pc, #432]	; (8001a74 <Cal_Real_cmd+0x32c>)
 80018c2:	ed93 7b00 	vldr	d7, [r3]
 80018c6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ca:	eef0 0a67 	vmov.f32	s1, s15
 80018ce:	f011 fbe3 	bl	8013098 <sin>
 80018d2:	ec51 0b10 	vmov	r0, r1, d0
 80018d6:	a35a      	add	r3, pc, #360	; (adr r3, 8001a40 <Cal_Real_cmd+0x2f8>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7ff f91c 	bl	8000b18 <__aeabi_dcmpgt>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d047      	beq.n	8001976 <Cal_Real_cmd+0x22e>
			{
				Real_cmd_v_x = C_2PIRxINv60*((tempL+tempR)/2)*fabs(cos(ANGLE_RAD_A));
 80018e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80018ea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80018ee:	f7fe fccd 	bl	800028c <__adddf3>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001902:	f7fe ffa3 	bl	800084c <__aeabi_ddiv>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	a348      	add	r3, pc, #288	; (adr r3, 8001a30 <Cal_Real_cmd+0x2e8>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe fe70 	bl	80005f8 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4614      	mov	r4, r2
 800191e:	461d      	mov	r5, r3
 8001920:	4b51      	ldr	r3, [pc, #324]	; (8001a68 <Cal_Real_cmd+0x320>)
 8001922:	ed93 7b00 	vldr	d7, [r3]
 8001926:	4b51      	ldr	r3, [pc, #324]	; (8001a6c <Cal_Real_cmd+0x324>)
 8001928:	ed93 6b00 	vldr	d6, [r3]
 800192c:	eeb0 1a46 	vmov.f32	s2, s12
 8001930:	eef0 1a66 	vmov.f32	s3, s13
 8001934:	eeb0 0a47 	vmov.f32	s0, s14
 8001938:	eef0 0a67 	vmov.f32	s1, s15
 800193c:	f011 fc6c 	bl	8013218 <atan2>
 8001940:	eeb0 7a40 	vmov.f32	s14, s0
 8001944:	eef0 7a60 	vmov.f32	s15, s1
 8001948:	eeb0 0a47 	vmov.f32	s0, s14
 800194c:	eef0 0a67 	vmov.f32	s1, s15
 8001950:	f011 fb06 	bl	8012f60 <cos>
 8001954:	ec53 2b10 	vmov	r2, r3, d0
 8001958:	4692      	mov	sl, r2
 800195a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800195e:	4652      	mov	r2, sl
 8001960:	465b      	mov	r3, fp
 8001962:	4620      	mov	r0, r4
 8001964:	4629      	mov	r1, r5
 8001966:	f7fe fe47 	bl	80005f8 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4940      	ldr	r1, [pc, #256]	; (8001a70 <Cal_Real_cmd+0x328>)
 8001970:	e9c1 2300 	strd	r2, r3, [r1]
			if((sin(real_angle_c)<0.1) && (sin(real_angle_c)>-0.1))
 8001974:	e36a      	b.n	800204c <Cal_Real_cmd+0x904>
				//printf("%d:Real_cmd_v_x 221 %f %f %f %f %f\n", osKernelGetTickCount(), Real_cmd_v_x, tempL, tempL, sin(real_angle_i), sin(real_angle_c));
			}
			else{
				Real_cmd_v_x = (C_2PIRxINv60/2)*(((sin(real_angle_i)/sin(real_angle_c))*tempL)
 8001976:	4b40      	ldr	r3, [pc, #256]	; (8001a78 <Cal_Real_cmd+0x330>)
 8001978:	ed93 7b00 	vldr	d7, [r3]
 800197c:	eeb0 0a47 	vmov.f32	s0, s14
 8001980:	eef0 0a67 	vmov.f32	s1, s15
 8001984:	f011 fb88 	bl	8013098 <sin>
 8001988:	ec55 4b10 	vmov	r4, r5, d0
 800198c:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <Cal_Real_cmd+0x32c>)
 800198e:	ed93 7b00 	vldr	d7, [r3]
 8001992:	eeb0 0a47 	vmov.f32	s0, s14
 8001996:	eef0 0a67 	vmov.f32	s1, s15
 800199a:	f011 fb7d 	bl	8013098 <sin>
 800199e:	ec53 2b10 	vmov	r2, r3, d0
 80019a2:	4620      	mov	r0, r4
 80019a4:	4629      	mov	r1, r5
 80019a6:	f7fe ff51 	bl	800084c <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019b6:	f7fe fe1f 	bl	80005f8 <__aeabi_dmul>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4614      	mov	r4, r2
 80019c0:	461d      	mov	r5, r3
								+((sin(real_angle_o)/sin(real_angle_c))*tempR));
 80019c2:	4b2e      	ldr	r3, [pc, #184]	; (8001a7c <Cal_Real_cmd+0x334>)
 80019c4:	ed93 7b00 	vldr	d7, [r3]
 80019c8:	eeb0 0a47 	vmov.f32	s0, s14
 80019cc:	eef0 0a67 	vmov.f32	s1, s15
 80019d0:	f011 fb62 	bl	8013098 <sin>
 80019d4:	ec59 8b10 	vmov	r8, r9, d0
 80019d8:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <Cal_Real_cmd+0x32c>)
 80019da:	ed93 7b00 	vldr	d7, [r3]
 80019de:	eeb0 0a47 	vmov.f32	s0, s14
 80019e2:	eef0 0a67 	vmov.f32	s1, s15
 80019e6:	f011 fb57 	bl	8013098 <sin>
 80019ea:	ec53 2b10 	vmov	r2, r3, d0
 80019ee:	4640      	mov	r0, r8
 80019f0:	4649      	mov	r1, r9
 80019f2:	f7fe ff2b 	bl	800084c <__aeabi_ddiv>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a02:	f7fe fdf9 	bl	80005f8 <__aeabi_dmul>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7fe fc3d 	bl	800028c <__adddf3>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
				Real_cmd_v_x = (C_2PIRxINv60/2)*(((sin(real_angle_i)/sin(real_angle_c))*tempL)
 8001a1a:	a30b      	add	r3, pc, #44	; (adr r3, 8001a48 <Cal_Real_cmd+0x300>)
 8001a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a20:	f7fe fdea 	bl	80005f8 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4911      	ldr	r1, [pc, #68]	; (8001a70 <Cal_Real_cmd+0x328>)
 8001a2a:	e9c1 2300 	strd	r2, r3, [r1]
			if((sin(real_angle_c)<0.1) && (sin(real_angle_c)>-0.1))
 8001a2e:	e30d      	b.n	800204c <Cal_Real_cmd+0x904>
 8001a30:	198abd1e 	.word	0x198abd1e
 8001a34:	40221dd4 	.word	0x40221dd4
 8001a38:	9999999a 	.word	0x9999999a
 8001a3c:	3fb99999 	.word	0x3fb99999
 8001a40:	9999999a 	.word	0x9999999a
 8001a44:	bfb99999 	.word	0xbfb99999
 8001a48:	198abd1e 	.word	0x198abd1e
 8001a4c:	40121dd4 	.word	0x40121dd4
 8001a50:	20000c68 	.word	0x20000c68
 8001a54:	20000c6c 	.word	0x20000c6c
 8001a58:	40340000 	.word	0x40340000
 8001a5c:	20000c6a 	.word	0x20000c6a
 8001a60:	20000c6e 	.word	0x20000c6e
 8001a64:	20000c08 	.word	0x20000c08
 8001a68:	20000c38 	.word	0x20000c38
 8001a6c:	20000c20 	.word	0x20000c20
 8001a70:	20000c50 	.word	0x20000c50
 8001a74:	20000bf0 	.word	0x20000bf0
 8001a78:	20000bf8 	.word	0x20000bf8
 8001a7c:	20000c00 	.word	0x20000c00
				//printf("%d:Real_cmd_v_x 222 %f %f %f %f %f\n", osKernelGetTickCount(), Real_cmd_v_x, tempL, tempL, sin(real_angle_i), sin(real_angle_c));
			}

		}

		else if((tempL>tempR)  &&  ((tempL>0) && (tempR>0))){
 8001a80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a84:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a88:	f7ff f846 	bl	8000b18 <__aeabi_dcmpgt>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80e4 	beq.w	8001c5c <Cal_Real_cmd+0x514>
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001aa0:	f7ff f83a 	bl	8000b18 <__aeabi_dcmpgt>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80d8 	beq.w	8001c5c <Cal_Real_cmd+0x514>
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ab8:	f7ff f82e 	bl	8000b18 <__aeabi_dcmpgt>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80cc 	beq.w	8001c5c <Cal_Real_cmd+0x514>
			if((sin(real_angle_c)<0.1) && (sin(real_angle_c)>-0.1)){
 8001ac4:	4bb6      	ldr	r3, [pc, #728]	; (8001da0 <Cal_Real_cmd+0x658>)
 8001ac6:	ed93 7b00 	vldr	d7, [r3]
 8001aca:	eeb0 0a47 	vmov.f32	s0, s14
 8001ace:	eef0 0a67 	vmov.f32	s1, s15
 8001ad2:	f011 fae1 	bl	8013098 <sin>
 8001ad6:	ec51 0b10 	vmov	r0, r1, d0
 8001ada:	a3a9      	add	r3, pc, #676	; (adr r3, 8001d80 <Cal_Real_cmd+0x638>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe fffc 	bl	8000adc <__aeabi_dcmplt>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d05b      	beq.n	8001ba2 <Cal_Real_cmd+0x45a>
 8001aea:	4bad      	ldr	r3, [pc, #692]	; (8001da0 <Cal_Real_cmd+0x658>)
 8001aec:	ed93 7b00 	vldr	d7, [r3]
 8001af0:	eeb0 0a47 	vmov.f32	s0, s14
 8001af4:	eef0 0a67 	vmov.f32	s1, s15
 8001af8:	f011 face 	bl	8013098 <sin>
 8001afc:	ec51 0b10 	vmov	r0, r1, d0
 8001b00:	a3a1      	add	r3, pc, #644	; (adr r3, 8001d88 <Cal_Real_cmd+0x640>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	f7ff f807 	bl	8000b18 <__aeabi_dcmpgt>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d048      	beq.n	8001ba2 <Cal_Real_cmd+0x45a>
				Real_cmd_v_x = C_2PIRxINv60*((tempL+tempR)/2)*fabs(cos(ANGLE_RAD_A));
 8001b10:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b14:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b18:	f7fe fbb8 	bl	800028c <__adddf3>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b2c:	f7fe fe8e 	bl	800084c <__aeabi_ddiv>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	a395      	add	r3, pc, #596	; (adr r3, 8001d90 <Cal_Real_cmd+0x648>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fd5b 	bl	80005f8 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4614      	mov	r4, r2
 8001b48:	461d      	mov	r5, r3
 8001b4a:	4b96      	ldr	r3, [pc, #600]	; (8001da4 <Cal_Real_cmd+0x65c>)
 8001b4c:	ed93 7b00 	vldr	d7, [r3]
 8001b50:	4b95      	ldr	r3, [pc, #596]	; (8001da8 <Cal_Real_cmd+0x660>)
 8001b52:	ed93 6b00 	vldr	d6, [r3]
 8001b56:	eeb0 1a46 	vmov.f32	s2, s12
 8001b5a:	eef0 1a66 	vmov.f32	s3, s13
 8001b5e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b62:	eef0 0a67 	vmov.f32	s1, s15
 8001b66:	f011 fb57 	bl	8013218 <atan2>
 8001b6a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b6e:	eef0 7a60 	vmov.f32	s15, s1
 8001b72:	eeb0 0a47 	vmov.f32	s0, s14
 8001b76:	eef0 0a67 	vmov.f32	s1, s15
 8001b7a:	f011 f9f1 	bl	8012f60 <cos>
 8001b7e:	ec53 2b10 	vmov	r2, r3, d0
 8001b82:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b8e:	4620      	mov	r0, r4
 8001b90:	4629      	mov	r1, r5
 8001b92:	f7fe fd31 	bl	80005f8 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4984      	ldr	r1, [pc, #528]	; (8001dac <Cal_Real_cmd+0x664>)
 8001b9c:	e9c1 2300 	strd	r2, r3, [r1]
			if((sin(real_angle_c)<0.1) && (sin(real_angle_c)>-0.1)){
 8001ba0:	e254      	b.n	800204c <Cal_Real_cmd+0x904>
							//	printf("%d:Real_cmd_v_x 331 %f %f %f %f %f\n", osKernelGetTickCount(), Real_cmd_v_x, tempL, tempL, sin(real_angle_i), sin(real_angle_c));
			}
			else{
			Real_cmd_v_x = (C_2PIRxINv60/2)*(((sin(real_angle_i)/sin(real_angle_c))*tempR)
 8001ba2:	4b83      	ldr	r3, [pc, #524]	; (8001db0 <Cal_Real_cmd+0x668>)
 8001ba4:	ed93 7b00 	vldr	d7, [r3]
 8001ba8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bac:	eef0 0a67 	vmov.f32	s1, s15
 8001bb0:	f011 fa72 	bl	8013098 <sin>
 8001bb4:	ec55 4b10 	vmov	r4, r5, d0
 8001bb8:	4b79      	ldr	r3, [pc, #484]	; (8001da0 <Cal_Real_cmd+0x658>)
 8001bba:	ed93 7b00 	vldr	d7, [r3]
 8001bbe:	eeb0 0a47 	vmov.f32	s0, s14
 8001bc2:	eef0 0a67 	vmov.f32	s1, s15
 8001bc6:	f011 fa67 	bl	8013098 <sin>
 8001bca:	ec53 2b10 	vmov	r2, r3, d0
 8001bce:	4620      	mov	r0, r4
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	f7fe fe3b 	bl	800084c <__aeabi_ddiv>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001be2:	f7fe fd09 	bl	80005f8 <__aeabi_dmul>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4614      	mov	r4, r2
 8001bec:	461d      	mov	r5, r3
							+((sin(real_angle_o)/sin(real_angle_c))*tempL));
 8001bee:	4b71      	ldr	r3, [pc, #452]	; (8001db4 <Cal_Real_cmd+0x66c>)
 8001bf0:	ed93 7b00 	vldr	d7, [r3]
 8001bf4:	eeb0 0a47 	vmov.f32	s0, s14
 8001bf8:	eef0 0a67 	vmov.f32	s1, s15
 8001bfc:	f011 fa4c 	bl	8013098 <sin>
 8001c00:	ec59 8b10 	vmov	r8, r9, d0
 8001c04:	4b66      	ldr	r3, [pc, #408]	; (8001da0 <Cal_Real_cmd+0x658>)
 8001c06:	ed93 7b00 	vldr	d7, [r3]
 8001c0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c0e:	eef0 0a67 	vmov.f32	s1, s15
 8001c12:	f011 fa41 	bl	8013098 <sin>
 8001c16:	ec53 2b10 	vmov	r2, r3, d0
 8001c1a:	4640      	mov	r0, r8
 8001c1c:	4649      	mov	r1, r9
 8001c1e:	f7fe fe15 	bl	800084c <__aeabi_ddiv>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c2e:	f7fe fce3 	bl	80005f8 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4620      	mov	r0, r4
 8001c38:	4629      	mov	r1, r5
 8001c3a:	f7fe fb27 	bl	800028c <__adddf3>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
			Real_cmd_v_x = (C_2PIRxINv60/2)*(((sin(real_angle_i)/sin(real_angle_c))*tempR)
 8001c46:	a354      	add	r3, pc, #336	; (adr r3, 8001d98 <Cal_Real_cmd+0x650>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fcd4 	bl	80005f8 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4955      	ldr	r1, [pc, #340]	; (8001dac <Cal_Real_cmd+0x664>)
 8001c56:	e9c1 2300 	strd	r2, r3, [r1]
			if((sin(real_angle_c)<0.1) && (sin(real_angle_c)>-0.1)){
 8001c5a:	e1f7      	b.n	800204c <Cal_Real_cmd+0x904>
			//printf("%d:Real_cmd_v_x 332 %f %f %f %f %f\n", osKernelGetTickCount(), Real_cmd_v_x, tempL, tempL, sin(real_angle_i), sin(real_angle_c));
			}
		}

		else if((tempL<tempR)  &&  ((tempL<0) && (tempR<0))){
 8001c5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c60:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c64:	f7fe ff3a 	bl	8000adc <__aeabi_dcmplt>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8101 	beq.w	8001e72 <Cal_Real_cmd+0x72a>
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c7c:	f7fe ff2e 	bl	8000adc <__aeabi_dcmplt>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80f5 	beq.w	8001e72 <Cal_Real_cmd+0x72a>
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c94:	f7fe ff22 	bl	8000adc <__aeabi_dcmplt>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 80e9 	beq.w	8001e72 <Cal_Real_cmd+0x72a>
			if((sin(real_angle_c)<0.1) && (sin(real_angle_c)>-0.1)){
 8001ca0:	4b3f      	ldr	r3, [pc, #252]	; (8001da0 <Cal_Real_cmd+0x658>)
 8001ca2:	ed93 7b00 	vldr	d7, [r3]
 8001ca6:	eeb0 0a47 	vmov.f32	s0, s14
 8001caa:	eef0 0a67 	vmov.f32	s1, s15
 8001cae:	f011 f9f3 	bl	8013098 <sin>
 8001cb2:	ec51 0b10 	vmov	r0, r1, d0
 8001cb6:	a332      	add	r3, pc, #200	; (adr r3, 8001d80 <Cal_Real_cmd+0x638>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	f7fe ff0e 	bl	8000adc <__aeabi_dcmplt>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d078      	beq.n	8001db8 <Cal_Real_cmd+0x670>
 8001cc6:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <Cal_Real_cmd+0x658>)
 8001cc8:	ed93 7b00 	vldr	d7, [r3]
 8001ccc:	eeb0 0a47 	vmov.f32	s0, s14
 8001cd0:	eef0 0a67 	vmov.f32	s1, s15
 8001cd4:	f011 f9e0 	bl	8013098 <sin>
 8001cd8:	ec51 0b10 	vmov	r0, r1, d0
 8001cdc:	a32a      	add	r3, pc, #168	; (adr r3, 8001d88 <Cal_Real_cmd+0x640>)
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce2:	f7fe ff19 	bl	8000b18 <__aeabi_dcmpgt>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d065      	beq.n	8001db8 <Cal_Real_cmd+0x670>
				Real_cmd_v_x = C_2PIRxINv60*((tempL+tempR)/2)*fabs(cos(ANGLE_RAD_A));
 8001cec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cf0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001cf4:	f7fe faca 	bl	800028c <__adddf3>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d08:	f7fe fda0 	bl	800084c <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	a31e      	add	r3, pc, #120	; (adr r3, 8001d90 <Cal_Real_cmd+0x648>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	f7fe fc6d 	bl	80005f8 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4614      	mov	r4, r2
 8001d24:	461d      	mov	r5, r3
 8001d26:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <Cal_Real_cmd+0x65c>)
 8001d28:	ed93 7b00 	vldr	d7, [r3]
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <Cal_Real_cmd+0x660>)
 8001d2e:	ed93 6b00 	vldr	d6, [r3]
 8001d32:	eeb0 1a46 	vmov.f32	s2, s12
 8001d36:	eef0 1a66 	vmov.f32	s3, s13
 8001d3a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d3e:	eef0 0a67 	vmov.f32	s1, s15
 8001d42:	f011 fa69 	bl	8013218 <atan2>
 8001d46:	eeb0 7a40 	vmov.f32	s14, s0
 8001d4a:	eef0 7a60 	vmov.f32	s15, s1
 8001d4e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d52:	eef0 0a67 	vmov.f32	s1, s15
 8001d56:	f011 f903 	bl	8012f60 <cos>
 8001d5a:	ec53 2b10 	vmov	r2, r3, d0
 8001d5e:	623a      	str	r2, [r7, #32]
 8001d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
 8001d66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	f7fe fc43 	bl	80005f8 <__aeabi_dmul>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	490d      	ldr	r1, [pc, #52]	; (8001dac <Cal_Real_cmd+0x664>)
 8001d78:	e9c1 2300 	strd	r2, r3, [r1]
			if((sin(real_angle_c)<0.1) && (sin(real_angle_c)>-0.1)){
 8001d7c:	e166      	b.n	800204c <Cal_Real_cmd+0x904>
 8001d7e:	bf00      	nop
 8001d80:	9999999a 	.word	0x9999999a
 8001d84:	3fb99999 	.word	0x3fb99999
 8001d88:	9999999a 	.word	0x9999999a
 8001d8c:	bfb99999 	.word	0xbfb99999
 8001d90:	198abd1e 	.word	0x198abd1e
 8001d94:	40221dd4 	.word	0x40221dd4
 8001d98:	198abd1e 	.word	0x198abd1e
 8001d9c:	40121dd4 	.word	0x40121dd4
 8001da0:	20000bf0 	.word	0x20000bf0
 8001da4:	20000c38 	.word	0x20000c38
 8001da8:	20000c20 	.word	0x20000c20
 8001dac:	20000c50 	.word	0x20000c50
 8001db0:	20000bf8 	.word	0x20000bf8
 8001db4:	20000c00 	.word	0x20000c00
				//				printf("%d:Real_cmd_v_x 441 %f %f %f %f %f\n", osKernelGetTickCount(), Real_cmd_v_x, tempL, tempL, sin(real_angle_i), sin(real_angle_c));
			}
			else{
			Real_cmd_v_x = (C_2PIRxINv60/2)*(((sin(real_angle_i)/sin(real_angle_c))*tempR)
 8001db8:	4bcb      	ldr	r3, [pc, #812]	; (80020e8 <Cal_Real_cmd+0x9a0>)
 8001dba:	ed93 7b00 	vldr	d7, [r3]
 8001dbe:	eeb0 0a47 	vmov.f32	s0, s14
 8001dc2:	eef0 0a67 	vmov.f32	s1, s15
 8001dc6:	f011 f967 	bl	8013098 <sin>
 8001dca:	ec55 4b10 	vmov	r4, r5, d0
 8001dce:	4bc7      	ldr	r3, [pc, #796]	; (80020ec <Cal_Real_cmd+0x9a4>)
 8001dd0:	ed93 7b00 	vldr	d7, [r3]
 8001dd4:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd8:	eef0 0a67 	vmov.f32	s1, s15
 8001ddc:	f011 f95c 	bl	8013098 <sin>
 8001de0:	ec53 2b10 	vmov	r2, r3, d0
 8001de4:	4620      	mov	r0, r4
 8001de6:	4629      	mov	r1, r5
 8001de8:	f7fe fd30 	bl	800084c <__aeabi_ddiv>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001df8:	f7fe fbfe 	bl	80005f8 <__aeabi_dmul>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4614      	mov	r4, r2
 8001e02:	461d      	mov	r5, r3
				+((sin(real_angle_o)/sin(real_angle_c))*tempL));
 8001e04:	4bba      	ldr	r3, [pc, #744]	; (80020f0 <Cal_Real_cmd+0x9a8>)
 8001e06:	ed93 7b00 	vldr	d7, [r3]
 8001e0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e0e:	eef0 0a67 	vmov.f32	s1, s15
 8001e12:	f011 f941 	bl	8013098 <sin>
 8001e16:	ec59 8b10 	vmov	r8, r9, d0
 8001e1a:	4bb4      	ldr	r3, [pc, #720]	; (80020ec <Cal_Real_cmd+0x9a4>)
 8001e1c:	ed93 7b00 	vldr	d7, [r3]
 8001e20:	eeb0 0a47 	vmov.f32	s0, s14
 8001e24:	eef0 0a67 	vmov.f32	s1, s15
 8001e28:	f011 f936 	bl	8013098 <sin>
 8001e2c:	ec53 2b10 	vmov	r2, r3, d0
 8001e30:	4640      	mov	r0, r8
 8001e32:	4649      	mov	r1, r9
 8001e34:	f7fe fd0a 	bl	800084c <__aeabi_ddiv>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e44:	f7fe fbd8 	bl	80005f8 <__aeabi_dmul>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	4629      	mov	r1, r5
 8001e50:	f7fe fa1c 	bl	800028c <__adddf3>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
			Real_cmd_v_x = (C_2PIRxINv60/2)*(((sin(real_angle_i)/sin(real_angle_c))*tempR)
 8001e5c:	a398      	add	r3, pc, #608	; (adr r3, 80020c0 <Cal_Real_cmd+0x978>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	f7fe fbc9 	bl	80005f8 <__aeabi_dmul>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	49a2      	ldr	r1, [pc, #648]	; (80020f4 <Cal_Real_cmd+0x9ac>)
 8001e6c:	e9c1 2300 	strd	r2, r3, [r1]
			if((sin(real_angle_c)<0.1) && (sin(real_angle_c)>-0.1)){
 8001e70:	e0ec      	b.n	800204c <Cal_Real_cmd+0x904>
			//printf("%d:Real_cmd_v_x 442 %f\n", osKernelGetTickCount(), Real_cmd_v_x);
			}
		}

		else if((tempL>tempR)  &&  ((tempL<0) && (tempR<0))){
 8001e72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e76:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e7a:	f7fe fe4d 	bl	8000b18 <__aeabi_dcmpgt>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80e3 	beq.w	800204c <Cal_Real_cmd+0x904>
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e92:	f7fe fe23 	bl	8000adc <__aeabi_dcmplt>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80d7 	beq.w	800204c <Cal_Real_cmd+0x904>
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001eaa:	f7fe fe17 	bl	8000adc <__aeabi_dcmplt>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80cb 	beq.w	800204c <Cal_Real_cmd+0x904>
			if((sin(real_angle_c)<0.1) && (sin(real_angle_c)>-0.1)){
 8001eb6:	4b8d      	ldr	r3, [pc, #564]	; (80020ec <Cal_Real_cmd+0x9a4>)
 8001eb8:	ed93 7b00 	vldr	d7, [r3]
 8001ebc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ec0:	eef0 0a67 	vmov.f32	s1, s15
 8001ec4:	f011 f8e8 	bl	8013098 <sin>
 8001ec8:	ec51 0b10 	vmov	r0, r1, d0
 8001ecc:	a37e      	add	r3, pc, #504	; (adr r3, 80020c8 <Cal_Real_cmd+0x980>)
 8001ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed2:	f7fe fe03 	bl	8000adc <__aeabi_dcmplt>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d05b      	beq.n	8001f94 <Cal_Real_cmd+0x84c>
 8001edc:	4b83      	ldr	r3, [pc, #524]	; (80020ec <Cal_Real_cmd+0x9a4>)
 8001ede:	ed93 7b00 	vldr	d7, [r3]
 8001ee2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ee6:	eef0 0a67 	vmov.f32	s1, s15
 8001eea:	f011 f8d5 	bl	8013098 <sin>
 8001eee:	ec51 0b10 	vmov	r0, r1, d0
 8001ef2:	a377      	add	r3, pc, #476	; (adr r3, 80020d0 <Cal_Real_cmd+0x988>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fe0e 	bl	8000b18 <__aeabi_dcmpgt>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d048      	beq.n	8001f94 <Cal_Real_cmd+0x84c>
				Real_cmd_v_x = C_2PIRxINv60*((tempL+tempR)/2)*fabs(cos(ANGLE_RAD_A));
 8001f02:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f06:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f0a:	f7fe f9bf 	bl	800028c <__adddf3>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f1e:	f7fe fc95 	bl	800084c <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	a36b      	add	r3, pc, #428	; (adr r3, 80020d8 <Cal_Real_cmd+0x990>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	f7fe fb62 	bl	80005f8 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4614      	mov	r4, r2
 8001f3a:	461d      	mov	r5, r3
 8001f3c:	4b6e      	ldr	r3, [pc, #440]	; (80020f8 <Cal_Real_cmd+0x9b0>)
 8001f3e:	ed93 7b00 	vldr	d7, [r3]
 8001f42:	4b6e      	ldr	r3, [pc, #440]	; (80020fc <Cal_Real_cmd+0x9b4>)
 8001f44:	ed93 6b00 	vldr	d6, [r3]
 8001f48:	eeb0 1a46 	vmov.f32	s2, s12
 8001f4c:	eef0 1a66 	vmov.f32	s3, s13
 8001f50:	eeb0 0a47 	vmov.f32	s0, s14
 8001f54:	eef0 0a67 	vmov.f32	s1, s15
 8001f58:	f011 f95e 	bl	8013218 <atan2>
 8001f5c:	eeb0 7a40 	vmov.f32	s14, s0
 8001f60:	eef0 7a60 	vmov.f32	s15, s1
 8001f64:	eeb0 0a47 	vmov.f32	s0, s14
 8001f68:	eef0 0a67 	vmov.f32	s1, s15
 8001f6c:	f010 fff8 	bl	8012f60 <cos>
 8001f70:	ec53 2b10 	vmov	r2, r3, d0
 8001f74:	61ba      	str	r2, [r7, #24]
 8001f76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f7a:	61fb      	str	r3, [r7, #28]
 8001f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f80:	4620      	mov	r0, r4
 8001f82:	4629      	mov	r1, r5
 8001f84:	f7fe fb38 	bl	80005f8 <__aeabi_dmul>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4959      	ldr	r1, [pc, #356]	; (80020f4 <Cal_Real_cmd+0x9ac>)
 8001f8e:	e9c1 2300 	strd	r2, r3, [r1]
 8001f92:	e05b      	b.n	800204c <Cal_Real_cmd+0x904>
			//	printf("%d:Real_cmd_v_x 551 %f %f %f %f %f\n", osKernelGetTickCount(), Real_cmd_v_x, tempL, tempL, sin(real_angle_i), sin(real_angle_c));
			}
			else{
			Real_cmd_v_x = (C_2PIRxINv60/2)*(((sin(real_angle_i)/sin(real_angle_c))*tempL)
 8001f94:	4b54      	ldr	r3, [pc, #336]	; (80020e8 <Cal_Real_cmd+0x9a0>)
 8001f96:	ed93 7b00 	vldr	d7, [r3]
 8001f9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f9e:	eef0 0a67 	vmov.f32	s1, s15
 8001fa2:	f011 f879 	bl	8013098 <sin>
 8001fa6:	ec55 4b10 	vmov	r4, r5, d0
 8001faa:	4b50      	ldr	r3, [pc, #320]	; (80020ec <Cal_Real_cmd+0x9a4>)
 8001fac:	ed93 7b00 	vldr	d7, [r3]
 8001fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8001fb4:	eef0 0a67 	vmov.f32	s1, s15
 8001fb8:	f011 f86e 	bl	8013098 <sin>
 8001fbc:	ec53 2b10 	vmov	r2, r3, d0
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	f7fe fc42 	bl	800084c <__aeabi_ddiv>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fd4:	f7fe fb10 	bl	80005f8 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4614      	mov	r4, r2
 8001fde:	461d      	mov	r5, r3
				+((sin(real_angle_o)/sin(real_angle_c))*tempR));
 8001fe0:	4b43      	ldr	r3, [pc, #268]	; (80020f0 <Cal_Real_cmd+0x9a8>)
 8001fe2:	ed93 7b00 	vldr	d7, [r3]
 8001fe6:	eeb0 0a47 	vmov.f32	s0, s14
 8001fea:	eef0 0a67 	vmov.f32	s1, s15
 8001fee:	f011 f853 	bl	8013098 <sin>
 8001ff2:	ec59 8b10 	vmov	r8, r9, d0
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <Cal_Real_cmd+0x9a4>)
 8001ff8:	ed93 7b00 	vldr	d7, [r3]
 8001ffc:	eeb0 0a47 	vmov.f32	s0, s14
 8002000:	eef0 0a67 	vmov.f32	s1, s15
 8002004:	f011 f848 	bl	8013098 <sin>
 8002008:	ec53 2b10 	vmov	r2, r3, d0
 800200c:	4640      	mov	r0, r8
 800200e:	4649      	mov	r1, r9
 8002010:	f7fe fc1c 	bl	800084c <__aeabi_ddiv>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002020:	f7fe faea 	bl	80005f8 <__aeabi_dmul>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4620      	mov	r0, r4
 800202a:	4629      	mov	r1, r5
 800202c:	f7fe f92e 	bl	800028c <__adddf3>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
			Real_cmd_v_x = (C_2PIRxINv60/2)*(((sin(real_angle_i)/sin(real_angle_c))*tempL)
 8002038:	a321      	add	r3, pc, #132	; (adr r3, 80020c0 <Cal_Real_cmd+0x978>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe fadb 	bl	80005f8 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	492b      	ldr	r1, [pc, #172]	; (80020f4 <Cal_Real_cmd+0x9ac>)
 8002048:	e9c1 2300 	strd	r2, r3, [r1]
		//	printf("%d:Real_cmd_v_x 552 %f\n", osKernelGetTickCount(), Real_cmd_v_x);
			}
		}
	}

	if((Tmp_cmd_FL>=0) && (Tmp_cmd_FR>=0)  ||  (Tmp_cmd_FL<=0) && (Tmp_cmd_FR<=0))//mode C
 800204c:	4b2c      	ldr	r3, [pc, #176]	; (8002100 <Cal_Real_cmd+0x9b8>)
 800204e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002052:	2b00      	cmp	r3, #0
 8002054:	db04      	blt.n	8002060 <Cal_Real_cmd+0x918>
 8002056:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <Cal_Real_cmd+0x9bc>)
 8002058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205c:	2b00      	cmp	r3, #0
 800205e:	da09      	bge.n	8002074 <Cal_Real_cmd+0x92c>
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <Cal_Real_cmd+0x9b8>)
 8002062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002066:	2b00      	cmp	r3, #0
 8002068:	dc50      	bgt.n	800210c <Cal_Real_cmd+0x9c4>
 800206a:	4b26      	ldr	r3, [pc, #152]	; (8002104 <Cal_Real_cmd+0x9bc>)
 800206c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002070:	2b00      	cmp	r3, #0
 8002072:	dc4b      	bgt.n	800210c <Cal_Real_cmd+0x9c4>
	{
		Real_cmd_w = -(CONSTANT_C_AxC_V*((tempL-tempR)/2));
 8002074:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002078:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800207c:	f7fe f904 	bl	8000288 <__aeabi_dsub>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002090:	f7fe fbdc 	bl	800084c <__aeabi_ddiv>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	a310      	add	r3, pc, #64	; (adr r3, 80020e0 <Cal_Real_cmd+0x998>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe faa9 	bl	80005f8 <__aeabi_dmul>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	613a      	str	r2, [r7, #16]
 80020ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <Cal_Real_cmd+0x9c0>)
 80020b4:	ed97 7b04 	vldr	d7, [r7, #16]
 80020b8:	ed83 7b00 	vstr	d7, [r3]
 80020bc:	e149      	b.n	8002352 <Cal_Real_cmd+0xc0a>
 80020be:	bf00      	nop
 80020c0:	198abd1e 	.word	0x198abd1e
 80020c4:	40121dd4 	.word	0x40121dd4
 80020c8:	9999999a 	.word	0x9999999a
 80020cc:	3fb99999 	.word	0x3fb99999
 80020d0:	9999999a 	.word	0x9999999a
 80020d4:	bfb99999 	.word	0xbfb99999
 80020d8:	198abd1e 	.word	0x198abd1e
 80020dc:	40221dd4 	.word	0x40221dd4
 80020e0:	8ccd1fe0 	.word	0x8ccd1fe0
 80020e4:	40412c3c 	.word	0x40412c3c
 80020e8:	20000bf8 	.word	0x20000bf8
 80020ec:	20000bf0 	.word	0x20000bf0
 80020f0:	20000c00 	.word	0x20000c00
 80020f4:	20000c50 	.word	0x20000c50
 80020f8:	20000c38 	.word	0x20000c38
 80020fc:	20000c20 	.word	0x20000c20
 8002100:	20000c68 	.word	0x20000c68
 8002104:	20000c6a 	.word	0x20000c6a
 8002108:	20000c60 	.word	0x20000c60
	}
	else//mode B
	{
//		Real_cmd_w = (C_4PIRxINv60WB*((tempL+tempR)/2)*fabs(sin(angle_rad_c)))*1000;
		if		((tempL<tempR)  &&  ((tempL>0) && (tempR>0))){Real_cmd_w = ((Real_cmd_v_x*sin(real_angle_c))/230)*1000;}
 800210c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002110:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002114:	f7fe fce2 	bl	8000adc <__aeabi_dcmplt>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d03d      	beq.n	800219a <Cal_Real_cmd+0xa52>
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800212a:	f7fe fcf5 	bl	8000b18 <__aeabi_dcmpgt>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d032      	beq.n	800219a <Cal_Real_cmd+0xa52>
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002140:	f7fe fcea 	bl	8000b18 <__aeabi_dcmpgt>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d027      	beq.n	800219a <Cal_Real_cmd+0xa52>
 800214a:	4bad      	ldr	r3, [pc, #692]	; (8002400 <Cal_Real_cmd+0xcb8>)
 800214c:	ed93 7b00 	vldr	d7, [r3]
 8002150:	eeb0 0a47 	vmov.f32	s0, s14
 8002154:	eef0 0a67 	vmov.f32	s1, s15
 8002158:	f010 ff9e 	bl	8013098 <sin>
 800215c:	ec51 0b10 	vmov	r0, r1, d0
 8002160:	4ba8      	ldr	r3, [pc, #672]	; (8002404 <Cal_Real_cmd+0xcbc>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	f7fe fa47 	bl	80005f8 <__aeabi_dmul>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	a3a1      	add	r3, pc, #644	; (adr r3, 80023f8 <Cal_Real_cmd+0xcb0>)
 8002174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002178:	f7fe fb68 	bl	800084c <__aeabi_ddiv>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4610      	mov	r0, r2
 8002182:	4619      	mov	r1, r3
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	4b9f      	ldr	r3, [pc, #636]	; (8002408 <Cal_Real_cmd+0xcc0>)
 800218a:	f7fe fa35 	bl	80005f8 <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	499e      	ldr	r1, [pc, #632]	; (800240c <Cal_Real_cmd+0xcc4>)
 8002194:	e9c1 2300 	strd	r2, r3, [r1]
 8002198:	e0db      	b.n	8002352 <Cal_Real_cmd+0xc0a>
		else if	((tempL>tempR)  &&  ((tempL>0) && (tempR>0))){Real_cmd_w = -((Real_cmd_v_x*sin(real_angle_c))/230)*1000;}
 800219a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800219e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80021a2:	f7fe fcb9 	bl	8000b18 <__aeabi_dcmpgt>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d041      	beq.n	8002230 <Cal_Real_cmd+0xae8>
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80021b8:	f7fe fcae 	bl	8000b18 <__aeabi_dcmpgt>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d036      	beq.n	8002230 <Cal_Real_cmd+0xae8>
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80021ce:	f7fe fca3 	bl	8000b18 <__aeabi_dcmpgt>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d02b      	beq.n	8002230 <Cal_Real_cmd+0xae8>
 80021d8:	4b89      	ldr	r3, [pc, #548]	; (8002400 <Cal_Real_cmd+0xcb8>)
 80021da:	ed93 7b00 	vldr	d7, [r3]
 80021de:	eeb0 0a47 	vmov.f32	s0, s14
 80021e2:	eef0 0a67 	vmov.f32	s1, s15
 80021e6:	f010 ff57 	bl	8013098 <sin>
 80021ea:	ec51 0b10 	vmov	r0, r1, d0
 80021ee:	4b85      	ldr	r3, [pc, #532]	; (8002404 <Cal_Real_cmd+0xcbc>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	f7fe fa00 	bl	80005f8 <__aeabi_dmul>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	a37d      	add	r3, pc, #500	; (adr r3, 80023f8 <Cal_Real_cmd+0xcb0>)
 8002202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002206:	f7fe fb21 	bl	800084c <__aeabi_ddiv>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	60ba      	str	r2, [r7, #8]
 8002210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	4b7b      	ldr	r3, [pc, #492]	; (8002408 <Cal_Real_cmd+0xcc0>)
 800221c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002220:	f7fe f9ea 	bl	80005f8 <__aeabi_dmul>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4978      	ldr	r1, [pc, #480]	; (800240c <Cal_Real_cmd+0xcc4>)
 800222a:	e9c1 2300 	strd	r2, r3, [r1]
 800222e:	e090      	b.n	8002352 <Cal_Real_cmd+0xc0a>
		else if	((tempL<tempR)  &&  ((tempL<0) && (tempR<0))){Real_cmd_w = -((Real_cmd_v_x*sin(real_angle_c))/230)*1000;}
 8002230:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002234:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002238:	f7fe fc50 	bl	8000adc <__aeabi_dcmplt>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d041      	beq.n	80022c6 <Cal_Real_cmd+0xb7e>
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800224e:	f7fe fc45 	bl	8000adc <__aeabi_dcmplt>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d036      	beq.n	80022c6 <Cal_Real_cmd+0xb7e>
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002264:	f7fe fc3a 	bl	8000adc <__aeabi_dcmplt>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d02b      	beq.n	80022c6 <Cal_Real_cmd+0xb7e>
 800226e:	4b64      	ldr	r3, [pc, #400]	; (8002400 <Cal_Real_cmd+0xcb8>)
 8002270:	ed93 7b00 	vldr	d7, [r3]
 8002274:	eeb0 0a47 	vmov.f32	s0, s14
 8002278:	eef0 0a67 	vmov.f32	s1, s15
 800227c:	f010 ff0c 	bl	8013098 <sin>
 8002280:	ec51 0b10 	vmov	r0, r1, d0
 8002284:	4b5f      	ldr	r3, [pc, #380]	; (8002404 <Cal_Real_cmd+0xcbc>)
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	f7fe f9b5 	bl	80005f8 <__aeabi_dmul>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	a358      	add	r3, pc, #352	; (adr r3, 80023f8 <Cal_Real_cmd+0xcb0>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	f7fe fad6 	bl	800084c <__aeabi_ddiv>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	603a      	str	r2, [r7, #0]
 80022a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	4b55      	ldr	r3, [pc, #340]	; (8002408 <Cal_Real_cmd+0xcc0>)
 80022b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022b6:	f7fe f99f 	bl	80005f8 <__aeabi_dmul>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4953      	ldr	r1, [pc, #332]	; (800240c <Cal_Real_cmd+0xcc4>)
 80022c0:	e9c1 2300 	strd	r2, r3, [r1]
 80022c4:	e045      	b.n	8002352 <Cal_Real_cmd+0xc0a>
		else if	((tempL>tempR)  &&  ((tempL<0) && (tempR<0))){Real_cmd_w = ((Real_cmd_v_x*sin(real_angle_c))/230)*1000;}
 80022c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80022ce:	f7fe fc23 	bl	8000b18 <__aeabi_dcmpgt>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d03c      	beq.n	8002352 <Cal_Real_cmd+0xc0a>
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80022e4:	f7fe fbfa 	bl	8000adc <__aeabi_dcmplt>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d031      	beq.n	8002352 <Cal_Real_cmd+0xc0a>
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80022fa:	f7fe fbef 	bl	8000adc <__aeabi_dcmplt>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d026      	beq.n	8002352 <Cal_Real_cmd+0xc0a>
 8002304:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <Cal_Real_cmd+0xcb8>)
 8002306:	ed93 7b00 	vldr	d7, [r3]
 800230a:	eeb0 0a47 	vmov.f32	s0, s14
 800230e:	eef0 0a67 	vmov.f32	s1, s15
 8002312:	f010 fec1 	bl	8013098 <sin>
 8002316:	ec51 0b10 	vmov	r0, r1, d0
 800231a:	4b3a      	ldr	r3, [pc, #232]	; (8002404 <Cal_Real_cmd+0xcbc>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fe f96a 	bl	80005f8 <__aeabi_dmul>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4610      	mov	r0, r2
 800232a:	4619      	mov	r1, r3
 800232c:	a332      	add	r3, pc, #200	; (adr r3, 80023f8 <Cal_Real_cmd+0xcb0>)
 800232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002332:	f7fe fa8b 	bl	800084c <__aeabi_ddiv>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	4b31      	ldr	r3, [pc, #196]	; (8002408 <Cal_Real_cmd+0xcc0>)
 8002344:	f7fe f958 	bl	80005f8 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	492f      	ldr	r1, [pc, #188]	; (800240c <Cal_Real_cmd+0xcc4>)
 800234e:	e9c1 2300 	strd	r2, r3, [r1]

	}

	sendcanbuf[5] = (((int16_t)(Real_cmd_w)))>>8 & 0xff;
 8002352:	4b2e      	ldr	r3, [pc, #184]	; (800240c <Cal_Real_cmd+0xcc4>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f7fe fbfc 	bl	8000b58 <__aeabi_d2iz>
 8002360:	4603      	mov	r3, r0
 8002362:	b21b      	sxth	r3, r3
 8002364:	121b      	asrs	r3, r3, #8
 8002366:	b21b      	sxth	r3, r3
 8002368:	b25a      	sxtb	r2, r3
 800236a:	4b29      	ldr	r3, [pc, #164]	; (8002410 <Cal_Real_cmd+0xcc8>)
 800236c:	715a      	strb	r2, [r3, #5]
	sendcanbuf[4] = (int16_t)(Real_cmd_w)&0xff;
 800236e:	4b27      	ldr	r3, [pc, #156]	; (800240c <Cal_Real_cmd+0xcc4>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	4610      	mov	r0, r2
 8002376:	4619      	mov	r1, r3
 8002378:	f7fe fbee 	bl	8000b58 <__aeabi_d2iz>
 800237c:	4603      	mov	r3, r0
 800237e:	b21b      	sxth	r3, r3
 8002380:	b25a      	sxtb	r2, r3
 8002382:	4b23      	ldr	r3, [pc, #140]	; (8002410 <Cal_Real_cmd+0xcc8>)
 8002384:	711a      	strb	r2, [r3, #4]
	sendcanbuf[3] = (((int16_t)(Real_cmd_v_y)))>>8 & 0xff;
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <Cal_Real_cmd+0xccc>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	f7fe fbe2 	bl	8000b58 <__aeabi_d2iz>
 8002394:	4603      	mov	r3, r0
 8002396:	b21b      	sxth	r3, r3
 8002398:	121b      	asrs	r3, r3, #8
 800239a:	b21b      	sxth	r3, r3
 800239c:	b25a      	sxtb	r2, r3
 800239e:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <Cal_Real_cmd+0xcc8>)
 80023a0:	70da      	strb	r2, [r3, #3]
	sendcanbuf[2] = (int16_t)(Real_cmd_v_y)&0xff;
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <Cal_Real_cmd+0xccc>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	f7fe fbd4 	bl	8000b58 <__aeabi_d2iz>
 80023b0:	4603      	mov	r3, r0
 80023b2:	b21b      	sxth	r3, r3
 80023b4:	b25a      	sxtb	r2, r3
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <Cal_Real_cmd+0xcc8>)
 80023b8:	709a      	strb	r2, [r3, #2]
	sendcanbuf[1] = (((int16_t)(Real_cmd_v_x)))>>8 & 0xff;
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <Cal_Real_cmd+0xcbc>)
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7fe fbc8 	bl	8000b58 <__aeabi_d2iz>
 80023c8:	4603      	mov	r3, r0
 80023ca:	b21b      	sxth	r3, r3
 80023cc:	121b      	asrs	r3, r3, #8
 80023ce:	b21b      	sxth	r3, r3
 80023d0:	b25a      	sxtb	r2, r3
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <Cal_Real_cmd+0xcc8>)
 80023d4:	705a      	strb	r2, [r3, #1]
	sendcanbuf[0] = (int16_t)(Real_cmd_v_x)&0xff;
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <Cal_Real_cmd+0xcbc>)
 80023d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	f7fe fbba 	bl	8000b58 <__aeabi_d2iz>
 80023e4:	4603      	mov	r3, r0
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	b25a      	sxtb	r2, r3
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <Cal_Real_cmd+0xcc8>)
 80023ec:	701a      	strb	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	3740      	adds	r7, #64	; 0x40
 80023f2:	46bd      	mov	sp, r7
 80023f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f8:	00000000 	.word	0x00000000
 80023fc:	406cc000 	.word	0x406cc000
 8002400:	20000bf0 	.word	0x20000bf0
 8002404:	20000c50 	.word	0x20000c50
 8002408:	408f4000 	.word	0x408f4000
 800240c:	20000c60 	.word	0x20000c60
 8002410:	20000c80 	.word	0x20000c80
 8002414:	20000c58 	.word	0x20000c58

08002418 <Stopflagcheck>:


int32_t Stopflagcheck(uint8_t RW, uint8_t value)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	460a      	mov	r2, r1
 8002422:	71fb      	strb	r3, [r7, #7]
 8002424:	4613      	mov	r3, r2
 8002426:	71bb      	strb	r3, [r7, #6]
	printf("%d:Stopflagcheck\n", osKernelGetTickCount());
 8002428:	f009 ff14 	bl	800c254 <osKernelGetTickCount>
 800242c:	4603      	mov	r3, r0
 800242e:	4619      	mov	r1, r3
 8002430:	481a      	ldr	r0, [pc, #104]	; (800249c <Stopflagcheck+0x84>)
 8002432:	f00e fd2b 	bl	8010e8c <iprintf>
	if(osMutexWait(Stop_flagHandle, osWaitForever)==osOK)
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <Stopflagcheck+0x88>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f04f 31ff 	mov.w	r1, #4294967295
 800243e:	4618      	mov	r0, r3
 8002440:	f00a fa2e 	bl	800c8a0 <osMutexAcquire>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d124      	bne.n	8002494 <Stopflagcheck+0x7c>
	{
		if(RW){
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d019      	beq.n	8002484 <Stopflagcheck+0x6c>
			if(value == 0){Stop_flag = 0;}
 8002450:	79bb      	ldrb	r3, [r7, #6]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d103      	bne.n	800245e <Stopflagcheck+0x46>
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <Stopflagcheck+0x8c>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	e004      	b.n	8002468 <Stopflagcheck+0x50>
			else {Stop_flag++;}
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <Stopflagcheck+0x8c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	3301      	adds	r3, #1
 8002464:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <Stopflagcheck+0x8c>)
 8002466:	6013      	str	r3, [r2, #0]
			if(Stop_flag>0xfffffff0){Stop_flag = 1;}
 8002468:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <Stopflagcheck+0x8c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f113 0f10 	cmn.w	r3, #16
 8002470:	d902      	bls.n	8002478 <Stopflagcheck+0x60>
 8002472:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <Stopflagcheck+0x8c>)
 8002474:	2201      	movs	r2, #1
 8002476:	601a      	str	r2, [r3, #0]
			osMutexRelease(Stop_flagHandle);
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <Stopflagcheck+0x88>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f00a fa5a 	bl	800c936 <osMutexRelease>
 8002482:	e007      	b.n	8002494 <Stopflagcheck+0x7c>
		}
		else {
			osMutexRelease(Stop_flagHandle);
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <Stopflagcheck+0x88>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f00a fa54 	bl	800c936 <osMutexRelease>
			return Stop_flag;
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <Stopflagcheck+0x8c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	e7ff      	b.n	8002494 <Stopflagcheck+0x7c>
		}
	}
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	080151a4 	.word	0x080151a4
 80024a0:	20000cc0 	.word	0x20000cc0
 80024a4:	20000bd8 	.word	0x20000bd8

080024a8 <Deg2Ste>:

int16_t Deg2Ste(uint8_t RW, int16_t deg, uint8_t num)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
 80024b2:	460b      	mov	r3, r1
 80024b4:	80bb      	strh	r3, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	71bb      	strb	r3, [r7, #6]
	printf("%d:Deg2Ste\n", osKernelGetTickCount());
 80024ba:	f009 fecb 	bl	800c254 <osKernelGetTickCount>
 80024be:	4603      	mov	r3, r0
 80024c0:	4619      	mov	r1, r3
 80024c2:	4818      	ldr	r0, [pc, #96]	; (8002524 <Deg2Ste+0x7c>)
 80024c4:	f00e fce2 	bl	8010e8c <iprintf>
	if(num>4){
 80024c8:	79bb      	ldrb	r3, [r7, #6]
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d901      	bls.n	80024d2 <Deg2Ste+0x2a>
		//printf("%d:osError\n", osKernelGetTickCount());
		return 0;}
 80024ce:	2300      	movs	r3, #0
 80024d0:	e023      	b.n	800251a <Deg2Ste+0x72>
	if(osMutexWait(DegmsgHandle, osWaitForever)==osOK)
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <Deg2Ste+0x80>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f04f 31ff 	mov.w	r1, #4294967295
 80024da:	4618      	mov	r0, r3
 80024dc:	f00a f9e0 	bl	800c8a0 <osMutexAcquire>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d118      	bne.n	8002518 <Deg2Ste+0x70>
	{
		if(RW){//write
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00b      	beq.n	8002504 <Deg2Ste+0x5c>
			SteDeg[num] = deg; //printf("%d:deg in mut:%d \n", osKernelGetTickCount(), SteDeg);
 80024ec:	79bb      	ldrb	r3, [r7, #6]
 80024ee:	490f      	ldr	r1, [pc, #60]	; (800252c <Deg2Ste+0x84>)
 80024f0:	88ba      	ldrh	r2, [r7, #4]
 80024f2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			osMutexRelease(DegmsgHandle);
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <Deg2Ste+0x80>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f00a fa1b 	bl	800c936 <osMutexRelease>
			return 1;
 8002500:	2301      	movs	r3, #1
 8002502:	e00a      	b.n	800251a <Deg2Ste+0x72>
		}
		else{//read
			osMutexRelease(DegmsgHandle);
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <Deg2Ste+0x80>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f00a fa14 	bl	800c936 <osMutexRelease>
			return SteDeg[num];
 800250e:	79bb      	ldrb	r3, [r7, #6]
 8002510:	4a06      	ldr	r2, [pc, #24]	; (800252c <Deg2Ste+0x84>)
 8002512:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002516:	e000      	b.n	800251a <Deg2Ste+0x72>
		}
	}
	else{
		//printf("%d:osError\n", osKernelGetTickCount());
		return 0;
 8002518:	2300      	movs	r3, #0
	}
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	080151b8 	.word	0x080151b8
 8002528:	20000cbc 	.word	0x20000cbc
 800252c:	20000bcc 	.word	0x20000bcc

08002530 <rad2deg>:

int16_t rad2deg(double radian)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)(radian*180/MATH_PI);
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <rad2deg+0x50>)
 8002540:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002544:	f7fe f858 	bl	80005f8 <__aeabi_dmul>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	a309      	add	r3, pc, #36	; (adr r3, 8002578 <rad2deg+0x48>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	f7fe f979 	bl	800084c <__aeabi_ddiv>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	f7fe faf9 	bl	8000b58 <__aeabi_d2iz>
 8002566:	4603      	mov	r3, r0
 8002568:	b21b      	sxth	r3, r3
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	f3af 8000 	nop.w
 8002578:	54442d18 	.word	0x54442d18
 800257c:	400921fb 	.word	0x400921fb
 8002580:	40668000 	.word	0x40668000
 8002584:	00000000 	.word	0x00000000

08002588 <deg2rad>:

double deg2rad(int16_t degree)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	80fb      	strh	r3, [r7, #6]
    return (double)(degree*MATH_PI/180);
 8002592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fd ffc4 	bl	8000524 <__aeabi_i2d>
 800259c:	a30d      	add	r3, pc, #52	; (adr r3, 80025d4 <deg2rad+0x4c>)
 800259e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a2:	f7fe f829 	bl	80005f8 <__aeabi_dmul>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <deg2rad+0x48>)
 80025b4:	f7fe f94a 	bl	800084c <__aeabi_ddiv>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	ec43 2b17 	vmov	d7, r2, r3
}
 80025c0:	eeb0 0a47 	vmov.f32	s0, s14
 80025c4:	eef0 0a67 	vmov.f32	s1, s15
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40668000 	.word	0x40668000
 80025d4:	54442d18 	.word	0x54442d18
 80025d8:	400921fb 	.word	0x400921fb

080025dc <HAL_GPIO_EXTI_Callback>:
	//ModeD//for stop
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	80fb      	strh	r3, [r7, #6]


    if(GPIO_Pin == PS_SIG1_Pin) {
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	2b10      	cmp	r3, #16
 80025ea:	d109      	bne.n	8002600 <HAL_GPIO_EXTI_Callback+0x24>
    	PS_SIGx_Pin |= 0b00000001;
 80025ec:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <HAL_GPIO_EXTI_Callback+0x7c>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <HAL_GPIO_EXTI_Callback+0x7c>)
 80025f8:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG1_Pin.\n");
 80025fa:	4818      	ldr	r0, [pc, #96]	; (800265c <HAL_GPIO_EXTI_Callback+0x80>)
 80025fc:	f00e fce2 	bl	8010fc4 <puts>
	}

    if(GPIO_Pin == PS_SIG2_Pin) {
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	2b20      	cmp	r3, #32
 8002604:	d109      	bne.n	800261a <HAL_GPIO_EXTI_Callback+0x3e>
    	PS_SIGx_Pin |= 0b00000010;
 8002606:	4b14      	ldr	r3, [pc, #80]	; (8002658 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	f043 0302 	orr.w	r3, r3, #2
 800260e:	b2da      	uxtb	r2, r3
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002612:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG2_Pin.\n");
 8002614:	4812      	ldr	r0, [pc, #72]	; (8002660 <HAL_GPIO_EXTI_Callback+0x84>)
 8002616:	f00e fcd5 	bl	8010fc4 <puts>
    }

    if(GPIO_Pin == PS_SIG3_Pin) {
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	2b40      	cmp	r3, #64	; 0x40
 800261e:	d109      	bne.n	8002634 <HAL_GPIO_EXTI_Callback+0x58>
    	PS_SIGx_Pin |= 0b00000100;
 8002620:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	f043 0304 	orr.w	r3, r3, #4
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_GPIO_EXTI_Callback+0x7c>)
 800262c:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG3_Pin.\n");
 800262e:	480d      	ldr	r0, [pc, #52]	; (8002664 <HAL_GPIO_EXTI_Callback+0x88>)
 8002630:	f00e fcc8 	bl	8010fc4 <puts>
    }

    if(GPIO_Pin == PS_SIG4_Pin) {
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	2b80      	cmp	r3, #128	; 0x80
 8002638:	d109      	bne.n	800264e <HAL_GPIO_EXTI_Callback+0x72>
    	PS_SIGx_Pin |= 0b00001000;
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <HAL_GPIO_EXTI_Callback+0x7c>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	f043 0308 	orr.w	r3, r3, #8
 8002642:	b2da      	uxtb	r2, r3
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002646:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG4_Pin.\n");
 8002648:	4807      	ldr	r0, [pc, #28]	; (8002668 <HAL_GPIO_EXTI_Callback+0x8c>)
 800264a:	f00e fcbb 	bl	8010fc4 <puts>
    }
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000bc8 	.word	0x20000bc8
 800265c:	080151c4 	.word	0x080151c4
 8002660:	080151e4 	.word	0x080151e4
 8002664:	08015204 	.word	0x08015204
 8002668:	08015224 	.word	0x08015224

0800266c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of canmsg */
  canmsgHandle = osMutexNew(&canmsg_attributes);
 8002670:	483d      	ldr	r0, [pc, #244]	; (8002768 <MX_FREERTOS_Init+0xfc>)
 8002672:	f00a f88f 	bl	800c794 <osMutexNew>
 8002676:	4603      	mov	r3, r0
 8002678:	4a3c      	ldr	r2, [pc, #240]	; (800276c <MX_FREERTOS_Init+0x100>)
 800267a:	6013      	str	r3, [r2, #0]

  /* creation of Degmsg */
  DegmsgHandle = osMutexNew(&Degmsg_attributes);
 800267c:	483c      	ldr	r0, [pc, #240]	; (8002770 <MX_FREERTOS_Init+0x104>)
 800267e:	f00a f889 	bl	800c794 <osMutexNew>
 8002682:	4603      	mov	r3, r0
 8002684:	4a3b      	ldr	r2, [pc, #236]	; (8002774 <MX_FREERTOS_Init+0x108>)
 8002686:	6013      	str	r3, [r2, #0]

  /* creation of Stop_flag */
  Stop_flagHandle = osMutexNew(&Stop_flag_attributes);
 8002688:	483b      	ldr	r0, [pc, #236]	; (8002778 <MX_FREERTOS_Init+0x10c>)
 800268a:	f00a f883 	bl	800c794 <osMutexNew>
 800268e:	4603      	mov	r3, r0
 8002690:	4a3a      	ldr	r2, [pc, #232]	; (800277c <MX_FREERTOS_Init+0x110>)
 8002692:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PSx_SIG_BinSem */
  PSx_SIG_BinSemHandle = osSemaphoreNew(1, 1, &PSx_SIG_BinSem_attributes);
 8002694:	4a3a      	ldr	r2, [pc, #232]	; (8002780 <MX_FREERTOS_Init+0x114>)
 8002696:	2101      	movs	r1, #1
 8002698:	2001      	movs	r0, #1
 800269a:	f00a f989 	bl	800c9b0 <osSemaphoreNew>
 800269e:	4603      	mov	r3, r0
 80026a0:	4a38      	ldr	r2, [pc, #224]	; (8002784 <MX_FREERTOS_Init+0x118>)
 80026a2:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of VelStopTimer */
  VelStopTimerHandle = osTimerNew(VelStopTimerCallback, osTimerPeriodic, NULL, &VelStopTimer_attributes);
 80026a4:	4b38      	ldr	r3, [pc, #224]	; (8002788 <MX_FREERTOS_Init+0x11c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	2101      	movs	r1, #1
 80026aa:	4838      	ldr	r0, [pc, #224]	; (800278c <MX_FREERTOS_Init+0x120>)
 80026ac:	f009 ffc8 	bl	800c640 <osTimerNew>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4a37      	ldr	r2, [pc, #220]	; (8002790 <MX_FREERTOS_Init+0x124>)
 80026b4:	6013      	str	r3, [r2, #0]

  /* creation of EndModeDTimer */
  EndModeDTimerHandle = osTimerNew(EndModeDTimerCallback, osTimerOnce, NULL, &EndModeDTimer_attributes);
 80026b6:	4b37      	ldr	r3, [pc, #220]	; (8002794 <MX_FREERTOS_Init+0x128>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	2100      	movs	r1, #0
 80026bc:	4836      	ldr	r0, [pc, #216]	; (8002798 <MX_FREERTOS_Init+0x12c>)
 80026be:	f009 ffbf 	bl	800c640 <osTimerNew>
 80026c2:	4603      	mov	r3, r0
 80026c4:	4a35      	ldr	r2, [pc, #212]	; (800279c <MX_FREERTOS_Init+0x130>)
 80026c6:	6013      	str	r3, [r2, #0]

  /* creation of SendCanTimer */
  SendCanTimerHandle = osTimerNew(SendCanTimerCallback, osTimerPeriodic, NULL, &SendCanTimer_attributes);
 80026c8:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <MX_FREERTOS_Init+0x134>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	2101      	movs	r1, #1
 80026ce:	4835      	ldr	r0, [pc, #212]	; (80027a4 <MX_FREERTOS_Init+0x138>)
 80026d0:	f009 ffb6 	bl	800c640 <osTimerNew>
 80026d4:	4603      	mov	r3, r0
 80026d6:	4a34      	ldr	r2, [pc, #208]	; (80027a8 <MX_FREERTOS_Init+0x13c>)
 80026d8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(VelStopTimerHandle, 1000);
 80026da:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <MX_FREERTOS_Init+0x124>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026e2:	4618      	mov	r0, r3
 80026e4:	f00a f828 	bl	800c738 <osTimerStart>
  osTimerStart(SendCanTimerHandle, 100);
 80026e8:	4b2f      	ldr	r3, [pc, #188]	; (80027a8 <MX_FREERTOS_Init+0x13c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2164      	movs	r1, #100	; 0x64
 80026ee:	4618      	mov	r0, r3
 80026f0:	f00a f822 	bl	800c738 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80026f4:	4a2d      	ldr	r2, [pc, #180]	; (80027ac <MX_FREERTOS_Init+0x140>)
 80026f6:	2100      	movs	r1, #0
 80026f8:	482d      	ldr	r0, [pc, #180]	; (80027b0 <MX_FREERTOS_Init+0x144>)
 80026fa:	f009 fdc0 	bl	800c27e <osThreadNew>
 80026fe:	4603      	mov	r3, r0
 8002700:	4a2c      	ldr	r2, [pc, #176]	; (80027b4 <MX_FREERTOS_Init+0x148>)
 8002702:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(StartTask02, NULL, &canTask_attributes);
 8002704:	4a2c      	ldr	r2, [pc, #176]	; (80027b8 <MX_FREERTOS_Init+0x14c>)
 8002706:	2100      	movs	r1, #0
 8002708:	482c      	ldr	r0, [pc, #176]	; (80027bc <MX_FREERTOS_Init+0x150>)
 800270a:	f009 fdb8 	bl	800c27e <osThreadNew>
 800270e:	4603      	mov	r3, r0
 8002710:	4a2b      	ldr	r2, [pc, #172]	; (80027c0 <MX_FREERTOS_Init+0x154>)
 8002712:	6013      	str	r3, [r2, #0]

  /* creation of UartComm */
  UartCommHandle = osThreadNew(StartTask03, NULL, &UartComm_attributes);
 8002714:	4a2b      	ldr	r2, [pc, #172]	; (80027c4 <MX_FREERTOS_Init+0x158>)
 8002716:	2100      	movs	r1, #0
 8002718:	482b      	ldr	r0, [pc, #172]	; (80027c8 <MX_FREERTOS_Init+0x15c>)
 800271a:	f009 fdb0 	bl	800c27e <osThreadNew>
 800271e:	4603      	mov	r3, r0
 8002720:	4a2a      	ldr	r2, [pc, #168]	; (80027cc <MX_FREERTOS_Init+0x160>)
 8002722:	6013      	str	r3, [r2, #0]

  /* creation of NP_LED */
  NP_LEDHandle = osThreadNew(StartTask04, NULL, &NP_LED_attributes);
 8002724:	4a2a      	ldr	r2, [pc, #168]	; (80027d0 <MX_FREERTOS_Init+0x164>)
 8002726:	2100      	movs	r1, #0
 8002728:	482a      	ldr	r0, [pc, #168]	; (80027d4 <MX_FREERTOS_Init+0x168>)
 800272a:	f009 fda8 	bl	800c27e <osThreadNew>
 800272e:	4603      	mov	r3, r0
 8002730:	4a29      	ldr	r2, [pc, #164]	; (80027d8 <MX_FREERTOS_Init+0x16c>)
 8002732:	6013      	str	r3, [r2, #0]

  /* creation of fancntl */
  fancntlHandle = osThreadNew(StartTask05, NULL, &fancntl_attributes);
 8002734:	4a29      	ldr	r2, [pc, #164]	; (80027dc <MX_FREERTOS_Init+0x170>)
 8002736:	2100      	movs	r1, #0
 8002738:	4829      	ldr	r0, [pc, #164]	; (80027e0 <MX_FREERTOS_Init+0x174>)
 800273a:	f009 fda0 	bl	800c27e <osThreadNew>
 800273e:	4603      	mov	r3, r0
 8002740:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <MX_FREERTOS_Init+0x178>)
 8002742:	6013      	str	r3, [r2, #0]

  /* creation of IRQ_PSx */
  IRQ_PSxHandle = osThreadNew(StartTask06, NULL, &IRQ_PSx_attributes);
 8002744:	4a28      	ldr	r2, [pc, #160]	; (80027e8 <MX_FREERTOS_Init+0x17c>)
 8002746:	2100      	movs	r1, #0
 8002748:	4828      	ldr	r0, [pc, #160]	; (80027ec <MX_FREERTOS_Init+0x180>)
 800274a:	f009 fd98 	bl	800c27e <osThreadNew>
 800274e:	4603      	mov	r3, r0
 8002750:	4a27      	ldr	r2, [pc, #156]	; (80027f0 <MX_FREERTOS_Init+0x184>)
 8002752:	6013      	str	r3, [r2, #0]

  /* creation of steeringtask */
  steeringtaskHandle = osThreadNew(StartTask07, NULL, &steeringtask_attributes);
 8002754:	4a27      	ldr	r2, [pc, #156]	; (80027f4 <MX_FREERTOS_Init+0x188>)
 8002756:	2100      	movs	r1, #0
 8002758:	4827      	ldr	r0, [pc, #156]	; (80027f8 <MX_FREERTOS_Init+0x18c>)
 800275a:	f009 fd90 	bl	800c27e <osThreadNew>
 800275e:	4603      	mov	r3, r0
 8002760:	4a26      	ldr	r2, [pc, #152]	; (80027fc <MX_FREERTOS_Init+0x190>)
 8002762:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	080159b4 	.word	0x080159b4
 800276c:	20000cb8 	.word	0x20000cb8
 8002770:	080159c4 	.word	0x080159c4
 8002774:	20000cbc 	.word	0x20000cbc
 8002778:	080159d4 	.word	0x080159d4
 800277c:	20000cc0 	.word	0x20000cc0
 8002780:	080159e4 	.word	0x080159e4
 8002784:	20000cc4 	.word	0x20000cc4
 8002788:	08015984 	.word	0x08015984
 800278c:	0800543d 	.word	0x0800543d
 8002790:	20000cac 	.word	0x20000cac
 8002794:	08015994 	.word	0x08015994
 8002798:	080054a5 	.word	0x080054a5
 800279c:	20000cb0 	.word	0x20000cb0
 80027a0:	080159a4 	.word	0x080159a4
 80027a4:	080054cd 	.word	0x080054cd
 80027a8:	20000cb4 	.word	0x20000cb4
 80027ac:	08015888 	.word	0x08015888
 80027b0:	08002801 	.word	0x08002801
 80027b4:	20000c90 	.word	0x20000c90
 80027b8:	080158ac 	.word	0x080158ac
 80027bc:	08002831 	.word	0x08002831
 80027c0:	20000c94 	.word	0x20000c94
 80027c4:	080158d0 	.word	0x080158d0
 80027c8:	08003f8d 	.word	0x08003f8d
 80027cc:	20000c98 	.word	0x20000c98
 80027d0:	080158f4 	.word	0x080158f4
 80027d4:	08004a2d 	.word	0x08004a2d
 80027d8:	20000c9c 	.word	0x20000c9c
 80027dc:	08015918 	.word	0x08015918
 80027e0:	08004a85 	.word	0x08004a85
 80027e4:	20000ca0 	.word	0x20000ca0
 80027e8:	0801593c 	.word	0x0801593c
 80027ec:	08004aad 	.word	0x08004aad
 80027f0:	20000ca4 	.word	0x20000ca4
 80027f4:	08015960 	.word	0x08015960
 80027f8:	08004c49 	.word	0x08004c49
 80027fc:	20000ca8 	.word	0x20000ca8

08002800 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	//StartTask01 is related gpio toggle for state check //
	uint32_t lastTime = osKernelGetTickCount();
 8002808:	f009 fd24 	bl	800c254 <osKernelGetTickCount>
 800280c:	60f8      	str	r0, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STATUS_LED;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002814:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f009 fecf 	bl	800c5ba <osDelayUntil>


	//printf("uxHighWaterMark: %d\n", uxTaskGetStackHighWaterMark( NULL ));

	HAL_GPIO_TogglePin(testled_GPIO_Port, testled_Pin);
 800281c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002820:	4801      	ldr	r0, [pc, #4]	; (8002828 <StartDefaultTask+0x28>)
 8002822:	f005 ffd8 	bl	80087d6 <HAL_GPIO_TogglePin>
	lastTime += PERIOD_STATUS_LED;
 8002826:	e7f2      	b.n	800280e <StartDefaultTask+0xe>
 8002828:	40020800 	.word	0x40020800
 800282c:	00000000 	.word	0x00000000

08002830 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8002830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002834:	b0a2      	sub	sp, #136	; 0x88
 8002836:	af0c      	add	r7, sp, #48	; 0x30
 8002838:	63f8      	str	r0, [r7, #60]	; 0x3c
//	int16_t Tar_cmd_v_y = 0;
//	int16_t Tar_cmd_w = 0;



	uint8_t torqueSW = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t Oncetimer = 1;
 8002840:	2301      	movs	r3, #1
 8002842:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	uint8_t tempflag = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	//////////////////////////////
	uint32_t lastTime;



	osDelay(3000);//must delay for nmt from motor driver
 800284c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002850:	f009 fe98 	bl	800c584 <osDelay>
	while(!(STinitdone)){osDelay(100);;}
 8002854:	e002      	b.n	800285c <StartTask02+0x2c>
 8002856:	2064      	movs	r0, #100	; 0x64
 8002858:	f009 fe94 	bl	800c584 <osDelay>
 800285c:	4ba8      	ldr	r3, [pc, #672]	; (8002b00 <StartTask02+0x2d0>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f8      	beq.n	8002856 <StartTask02+0x26>

	CanInit(FILTERID,MASKID,STDID);//must be to use it
 8002864:	2200      	movs	r2, #0
 8002866:	f640 4194 	movw	r1, #3220	; 0xc94
 800286a:	2080      	movs	r0, #128	; 0x80
 800286c:	f7fe fc28 	bl	80010c0 <CanInit>
	CAN_enableirq();
 8002870:	f7fe fc1e 	bl	80010b0 <CAN_enableirq>


	PDOMapping(1, RxPDO0, vel_RxPDO0, 1);
 8002874:	4ca3      	ldr	r4, [pc, #652]	; (8002b04 <StartTask02+0x2d4>)
 8002876:	2301      	movs	r3, #1
 8002878:	9303      	str	r3, [sp, #12]
 800287a:	466d      	mov	r5, sp
 800287c:	f104 0308 	add.w	r3, r4, #8
 8002880:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002884:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002888:	e894 000c 	ldmia.w	r4, {r2, r3}
 800288c:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8002890:	2001      	movs	r0, #1
 8002892:	f7fe fd0d 	bl	80012b0 <PDOMapping>
	PDOMapping(2, RxPDO0, vel_RxPDO0, 1);
 8002896:	4c9b      	ldr	r4, [pc, #620]	; (8002b04 <StartTask02+0x2d4>)
 8002898:	2301      	movs	r3, #1
 800289a:	9303      	str	r3, [sp, #12]
 800289c:	466d      	mov	r5, sp
 800289e:	f104 0308 	add.w	r3, r4, #8
 80028a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80028aa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80028ae:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 80028b2:	2002      	movs	r0, #2
 80028b4:	f7fe fcfc 	bl	80012b0 <PDOMapping>

	PDOMapping(1, TxPDO0, vel_TxPDO0, 1);//event time mode 100ms
 80028b8:	4c93      	ldr	r4, [pc, #588]	; (8002b08 <StartTask02+0x2d8>)
 80028ba:	2301      	movs	r3, #1
 80028bc:	9303      	str	r3, [sp, #12]
 80028be:	466d      	mov	r5, sp
 80028c0:	f104 0308 	add.w	r3, r4, #8
 80028c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80028cc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80028d0:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80028d4:	2001      	movs	r0, #1
 80028d6:	f7fe fceb 	bl	80012b0 <PDOMapping>
	PDOMapping(2, TxPDO0, vel_TxPDO0, 1);//event time mode
 80028da:	4c8b      	ldr	r4, [pc, #556]	; (8002b08 <StartTask02+0x2d8>)
 80028dc:	2301      	movs	r3, #1
 80028de:	9303      	str	r3, [sp, #12]
 80028e0:	466d      	mov	r5, sp
 80028e2:	f104 0308 	add.w	r3, r4, #8
 80028e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80028ee:	e894 000c 	ldmia.w	r4, {r2, r3}
 80028f2:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80028f6:	2002      	movs	r0, #2
 80028f8:	f7fe fcda 	bl	80012b0 <PDOMapping>
	PDOMapping(1, TxPDO1, vel_TxPDO1, 1);//inhibit mode 100ms
 80028fc:	4c83      	ldr	r4, [pc, #524]	; (8002b0c <StartTask02+0x2dc>)
 80028fe:	2301      	movs	r3, #1
 8002900:	9303      	str	r3, [sp, #12]
 8002902:	466d      	mov	r5, sp
 8002904:	f104 0308 	add.w	r3, r4, #8
 8002908:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800290c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002910:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002914:	f641 2101 	movw	r1, #6657	; 0x1a01
 8002918:	2001      	movs	r0, #1
 800291a:	f7fe fcc9 	bl	80012b0 <PDOMapping>
	PDOMapping(2, TxPDO1, vel_TxPDO1, 1);//inhibit mode
 800291e:	4c7b      	ldr	r4, [pc, #492]	; (8002b0c <StartTask02+0x2dc>)
 8002920:	2301      	movs	r3, #1
 8002922:	9303      	str	r3, [sp, #12]
 8002924:	466d      	mov	r5, sp
 8002926:	f104 0308 	add.w	r3, r4, #8
 800292a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800292e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002932:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002936:	f641 2101 	movw	r1, #6657	; 0x1a01
 800293a:	2002      	movs	r0, #2
 800293c:	f7fe fcb8 	bl	80012b0 <PDOMapping>

	for(int i=0;i<2;i++){
 8002940:	2300      	movs	r3, #0
 8002942:	653b      	str	r3, [r7, #80]	; 0x50
 8002944:	e029      	b.n	800299a <StartTask02+0x16a>
		SDOMsg(i+1,0x2010, 0x0, 0x01, 1);//Node_id, index,  subindex,  msg,  len//save eeprom
 8002946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002948:	b2db      	uxtb	r3, r3
 800294a:	3301      	adds	r3, #1
 800294c:	b2d8      	uxtb	r0, r3
 800294e:	2301      	movs	r3, #1
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2301      	movs	r3, #1
 8002954:	2200      	movs	r2, #0
 8002956:	f242 0110 	movw	r1, #8208	; 0x2010
 800295a:	f7fe fc3f 	bl	80011dc <SDOMsg>
		SDOMsg(i+1,0x6060, 0x0, 0x03, 1);//Node_id, index,  subindex,  msg,  len//3: Profile velocity mode;
 800295e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002960:	b2db      	uxtb	r3, r3
 8002962:	3301      	adds	r3, #1
 8002964:	b2d8      	uxtb	r0, r3
 8002966:	2301      	movs	r3, #1
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2303      	movs	r3, #3
 800296c:	2200      	movs	r2, #0
 800296e:	f246 0160 	movw	r1, #24672	; 0x6060
 8002972:	f7fe fc33 	bl	80011dc <SDOMsg>
		Tor_OnOff(TORQUEON);
 8002976:	2001      	movs	r0, #1
 8002978:	f7fe fdac 	bl	80014d4 <Tor_OnOff>
		SDOMsg(i+1,0x200f, 0x0, 0x01, 2);//Node_id, index,  subindex,  msg,  len//1e: Synchronization control
 800297c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800297e:	b2db      	uxtb	r3, r3
 8002980:	3301      	adds	r3, #1
 8002982:	b2d8      	uxtb	r0, r3
 8002984:	2302      	movs	r3, #2
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2301      	movs	r3, #1
 800298a:	2200      	movs	r2, #0
 800298c:	f242 010f 	movw	r1, #8207	; 0x200f
 8002990:	f7fe fc24 	bl	80011dc <SDOMsg>
	for(int i=0;i<2;i++){
 8002994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002996:	3301      	adds	r3, #1
 8002998:	653b      	str	r3, [r7, #80]	; 0x50
 800299a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800299c:	2b01      	cmp	r3, #1
 800299e:	ddd2      	ble.n	8002946 <StartTask02+0x116>
	}

  /* Infinite loop */
	//printf("%d: format\n", osKernelGetTickCount());
	lastTime = osKernelGetTickCount ();
 80029a0:	f009 fc58 	bl	800c254 <osKernelGetTickCount>
 80029a4:	6578      	str	r0, [r7, #84]	; 0x54
  for(;;)
  {
	printf("%d: t02 001\n", osKernelGetTickCount());
 80029a6:	f009 fc55 	bl	800c254 <osKernelGetTickCount>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4619      	mov	r1, r3
 80029ae:	4858      	ldr	r0, [pc, #352]	; (8002b10 <StartTask02+0x2e0>)
 80029b0:	f00e fa6c 	bl	8010e8c <iprintf>
	lastTime += PERIOD_CANCOMM;;
 80029b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b6:	330a      	adds	r3, #10
 80029b8:	657b      	str	r3, [r7, #84]	; 0x54
	printf("%d: t02 002\n", osKernelGetTickCount());
 80029ba:	f009 fc4b 	bl	800c254 <osKernelGetTickCount>
 80029be:	4603      	mov	r3, r0
 80029c0:	4619      	mov	r1, r3
 80029c2:	4854      	ldr	r0, [pc, #336]	; (8002b14 <StartTask02+0x2e4>)
 80029c4:	f00e fa62 	bl	8010e8c <iprintf>
	osDelayUntil(lastTime);
 80029c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80029ca:	f009 fdf6 	bl	800c5ba <osDelayUntil>
	printf("%d: t02 003\n", osKernelGetTickCount());
 80029ce:	f009 fc41 	bl	800c254 <osKernelGetTickCount>
 80029d2:	4603      	mov	r3, r0
 80029d4:	4619      	mov	r1, r3
 80029d6:	4850      	ldr	r0, [pc, #320]	; (8002b18 <StartTask02+0x2e8>)
 80029d8:	f00e fa58 	bl	8010e8c <iprintf>
	//osDelay(10);
	//printf("%d: t02\n", osKernelGetTickCount());

	if(FLAG_RxCplt>0)	//real time, check stdid, extid
 80029dc:	4b4f      	ldr	r3, [pc, #316]	; (8002b1c <StartTask02+0x2ec>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 81bb 	beq.w	8002d5c <StartTask02+0x52c>
	{
		printf("%d: t02 004\n", osKernelGetTickCount());
 80029e6:	f009 fc35 	bl	800c254 <osKernelGetTickCount>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4619      	mov	r1, r3
 80029ee:	484c      	ldr	r0, [pc, #304]	; (8002b20 <StartTask02+0x2f0>)
 80029f0:	f00e fa4c 	bl	8010e8c <iprintf>
		while(FLAG_RxCplt>0){
 80029f4:	e1ad      	b.n	8002d52 <StartTask02+0x522>
			printf("%d: t02 005\n", osKernelGetTickCount());
 80029f6:	f009 fc2d 	bl	800c254 <osKernelGetTickCount>
 80029fa:	4603      	mov	r3, r0
 80029fc:	4619      	mov	r1, r3
 80029fe:	4849      	ldr	r0, [pc, #292]	; (8002b24 <StartTask02+0x2f4>)
 8002a00:	f00e fa44 	bl	8010e8c <iprintf>
			FLAG_RxCplt--;
 8002a04:	4b45      	ldr	r3, [pc, #276]	; (8002b1c <StartTask02+0x2ec>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	4a44      	ldr	r2, [pc, #272]	; (8002b1c <StartTask02+0x2ec>)
 8002a0c:	6013      	str	r3, [r2, #0]
			printf("%d: t02 006\n", osKernelGetTickCount());
 8002a0e:	f009 fc21 	bl	800c254 <osKernelGetTickCount>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4619      	mov	r1, r3
 8002a16:	4844      	ldr	r0, [pc, #272]	; (8002b28 <StartTask02+0x2f8>)
 8002a18:	f00e fa38 	bl	8010e8c <iprintf>
			for(int i=0;i<8;i++){canbuf[i] = g_uCAN_Rx_Data[FLAG_RxCplt][i];}
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a20:	e010      	b.n	8002a44 <StartTask02+0x214>
 8002a22:	4b3e      	ldr	r3, [pc, #248]	; (8002b1c <StartTask02+0x2ec>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a41      	ldr	r2, [pc, #260]	; (8002b2c <StartTask02+0x2fc>)
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	441a      	add	r2, r3
 8002a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a2e:	4413      	add	r3, r2
 8002a30:	f993 1000 	ldrsb.w	r1, [r3]
 8002a34:	4a3e      	ldr	r2, [pc, #248]	; (8002b30 <StartTask02+0x300>)
 8002a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a38:	4413      	add	r3, r2
 8002a3a:	460a      	mov	r2, r1
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a40:	3301      	adds	r3, #1
 8002a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a46:	2b07      	cmp	r3, #7
 8002a48:	ddeb      	ble.n	8002a22 <StartTask02+0x1f2>
			printf("%d: t02 007\n", osKernelGetTickCount());
 8002a4a:	f009 fc03 	bl	800c254 <osKernelGetTickCount>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4619      	mov	r1, r3
 8002a52:	4838      	ldr	r0, [pc, #224]	; (8002b34 <StartTask02+0x304>)
 8002a54:	f00e fa1a 	bl	8010e8c <iprintf>
		//	printf("canbuf: %d %d %d %d %d %d %d %d\n", canbuf[0], canbuf[1], canbuf[2], canbuf[3], canbuf[4], canbuf[5], canbuf[6], canbuf[7]);
			//printf("%dcanid: %d %d %d\n", osKernelGetTickCount(), g_tCan_Rx_Header[FLAG_RxCplt].StdId, g_tCan_Rx_Header[FLAG_RxCplt].ExtId, g_tCan_Rx_Header[FLAG_RxCplt].Timestamp);
			if(g_tCan_Rx_Header[FLAG_RxCplt].StdId>g_tCan_Rx_Header[FLAG_RxCplt].ExtId){CanId = g_tCan_Rx_Header[FLAG_RxCplt].StdId;}//�???????????????체크
 8002a58:	4b30      	ldr	r3, [pc, #192]	; (8002b1c <StartTask02+0x2ec>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4936      	ldr	r1, [pc, #216]	; (8002b38 <StartTask02+0x308>)
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	6819      	ldr	r1, [r3, #0]
 8002a6a:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <StartTask02+0x2ec>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4832      	ldr	r0, [pc, #200]	; (8002b38 <StartTask02+0x308>)
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4403      	add	r3, r0
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4299      	cmp	r1, r3
 8002a80:	d90b      	bls.n	8002a9a <StartTask02+0x26a>
 8002a82:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <StartTask02+0x2ec>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	492c      	ldr	r1, [pc, #176]	; (8002b38 <StartTask02+0x308>)
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a29      	ldr	r2, [pc, #164]	; (8002b3c <StartTask02+0x30c>)
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	e00b      	b.n	8002ab2 <StartTask02+0x282>
			else {CanId = g_tCan_Rx_Header[FLAG_RxCplt].ExtId;}
 8002a9a:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <StartTask02+0x2ec>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4926      	ldr	r1, [pc, #152]	; (8002b38 <StartTask02+0x308>)
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3304      	adds	r3, #4
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a23      	ldr	r2, [pc, #140]	; (8002b3c <StartTask02+0x30c>)
 8002ab0:	6013      	str	r3, [r2, #0]
			printf("%d: t02 008\n", osKernelGetTickCount());
 8002ab2:	f009 fbcf 	bl	800c254 <osKernelGetTickCount>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4821      	ldr	r0, [pc, #132]	; (8002b40 <StartTask02+0x310>)
 8002abc:	f00e f9e6 	bl	8010e8c <iprintf>
			switch(CanId)//parse
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <StartTask02+0x30c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f240 72d2 	movw	r2, #2002	; 0x7d2
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	f000 80f0 	beq.w	8002cae <StartTask02+0x47e>
 8002ace:	f240 72d2 	movw	r2, #2002	; 0x7d2
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	f200 80ec 	bhi.w	8002cb0 <StartTask02+0x480>
 8002ad8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d031      	beq.n	8002b44 <StartTask02+0x314>
 8002ae0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	f200 80e3 	bhi.w	8002cb0 <StartTask02+0x480>
 8002aea:	f240 1281 	movw	r2, #385	; 0x181
 8002aee:	4293      	cmp	r3, r2
 8002af0:	f000 809f 	beq.w	8002c32 <StartTask02+0x402>
 8002af4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8002af8:	f000 80ba 	beq.w	8002c70 <StartTask02+0x440>
 8002afc:	e0d8      	b.n	8002cb0 <StartTask02+0x480>
 8002afe:	bf00      	nop
 8002b00:	20000bd5 	.word	0x20000bd5
 8002b04:	20000000 	.word	0x20000000
 8002b08:	20000014 	.word	0x20000014
 8002b0c:	20000028 	.word	0x20000028
 8002b10:	08015244 	.word	0x08015244
 8002b14:	08015254 	.word	0x08015254
 8002b18:	08015264 	.word	0x08015264
 8002b1c:	20000a94 	.word	0x20000a94
 8002b20:	08015274 	.word	0x08015274
 8002b24:	08015284 	.word	0x08015284
 8002b28:	08015294 	.word	0x08015294
 8002b2c:	20000a98 	.word	0x20000a98
 8002b30:	20000c78 	.word	0x20000c78
 8002b34:	080152a4 	.word	0x080152a4
 8002b38:	20000ac8 	.word	0x20000ac8
 8002b3c:	20000c88 	.word	0x20000c88
 8002b40:	080152b4 	.word	0x080152b4
			{
				case 0x3E9:
					temp_x = (((int16_t)canbuf[1])<<8) | ((int16_t)canbuf[0])&0xff;
 8002b44:	4b6b      	ldr	r3, [pc, #428]	; (8002cf4 <StartTask02+0x4c4>)
 8002b46:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	b21a      	sxth	r2, r3
 8002b4e:	4b69      	ldr	r3, [pc, #420]	; (8002cf4 <StartTask02+0x4c4>)
 8002b50:	f993 3000 	ldrsb.w	r3, [r3]
 8002b54:	b21b      	sxth	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	b21b      	sxth	r3, r3
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	b21a      	sxth	r2, r3
 8002b5e:	4b66      	ldr	r3, [pc, #408]	; (8002cf8 <StartTask02+0x4c8>)
 8002b60:	801a      	strh	r2, [r3, #0]
					temp_y = (((int16_t)canbuf[3])<<8) | ((int16_t)canbuf[2])&0xff;
 8002b62:	4b64      	ldr	r3, [pc, #400]	; (8002cf4 <StartTask02+0x4c4>)
 8002b64:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	b21a      	sxth	r2, r3
 8002b6c:	4b61      	ldr	r3, [pc, #388]	; (8002cf4 <StartTask02+0x4c4>)
 8002b6e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002b72:	b21b      	sxth	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	b21b      	sxth	r3, r3
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	b21a      	sxth	r2, r3
 8002b7c:	4b5f      	ldr	r3, [pc, #380]	; (8002cfc <StartTask02+0x4cc>)
 8002b7e:	801a      	strh	r2, [r3, #0]
					temp_w = (((int16_t)canbuf[5])<<8) | ((int16_t)canbuf[4])&0xff;
 8002b80:	4b5c      	ldr	r3, [pc, #368]	; (8002cf4 <StartTask02+0x4c4>)
 8002b82:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	b21a      	sxth	r2, r3
 8002b8a:	4b5a      	ldr	r3, [pc, #360]	; (8002cf4 <StartTask02+0x4c4>)
 8002b8c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002b90:	b21b      	sxth	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	b21b      	sxth	r3, r3
 8002b96:	4313      	orrs	r3, r2
 8002b98:	b21a      	sxth	r2, r3
 8002b9a:	4b59      	ldr	r3, [pc, #356]	; (8002d00 <StartTask02+0x4d0>)
 8002b9c:	801a      	strh	r2, [r3, #0]
					state_stop = canbuf[7];
 8002b9e:	4b55      	ldr	r3, [pc, #340]	; (8002cf4 <StartTask02+0x4c4>)
 8002ba0:	f993 2007 	ldrsb.w	r2, [r3, #7]
 8002ba4:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <StartTask02+0x4d4>)
 8002ba6:	701a      	strb	r2, [r3, #0]
					Tar_cmd_v_x = (double)temp_x;
 8002ba8:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <StartTask02+0x4c8>)
 8002baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd fcb8 	bl	8000524 <__aeabi_i2d>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4953      	ldr	r1, [pc, #332]	; (8002d08 <StartTask02+0x4d8>)
 8002bba:	e9c1 2300 	strd	r2, r3, [r1]
					Tar_cmd_v_y = (double)temp_y;
 8002bbe:	4b4f      	ldr	r3, [pc, #316]	; (8002cfc <StartTask02+0x4cc>)
 8002bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fd fcad 	bl	8000524 <__aeabi_i2d>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	494f      	ldr	r1, [pc, #316]	; (8002d0c <StartTask02+0x4dc>)
 8002bd0:	e9c1 2300 	strd	r2, r3, [r1]
					Tar_cmd_w = (double)temp_w;
 8002bd4:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <StartTask02+0x4d0>)
 8002bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fca2 	bl	8000524 <__aeabi_i2d>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	494a      	ldr	r1, [pc, #296]	; (8002d10 <StartTask02+0x4e0>)
 8002be6:	e9c1 2300 	strd	r2, r3, [r1]
					torqueSW = canbuf[6];
 8002bea:	4b42      	ldr	r3, [pc, #264]	; (8002cf4 <StartTask02+0x4c4>)
 8002bec:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002bf0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
					printf("%d: t02 009 %d %d %d\n", osKernelGetTickCount(),temp_x,temp_y,temp_w);
 8002bf4:	f009 fb2e 	bl	800c254 <osKernelGetTickCount>
 8002bf8:	4601      	mov	r1, r0
 8002bfa:	4b3f      	ldr	r3, [pc, #252]	; (8002cf8 <StartTask02+0x4c8>)
 8002bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b3e      	ldr	r3, [pc, #248]	; (8002cfc <StartTask02+0x4cc>)
 8002c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	4b3d      	ldr	r3, [pc, #244]	; (8002d00 <StartTask02+0x4d0>)
 8002c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	4603      	mov	r3, r0
 8002c14:	483f      	ldr	r0, [pc, #252]	; (8002d14 <StartTask02+0x4e4>)
 8002c16:	f00e f939 	bl	8010e8c <iprintf>
					//if(Stop_flag++>255){Stop_flag = 1;}
					Stopflagcheck(Xbot_W, 1);
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	f7ff fbfb 	bl	8002418 <Stopflagcheck>
					printf("%d: t02 010\n", osKernelGetTickCount());
 8002c22:	f009 fb17 	bl	800c254 <osKernelGetTickCount>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4619      	mov	r1, r3
 8002c2a:	483b      	ldr	r0, [pc, #236]	; (8002d18 <StartTask02+0x4e8>)
 8002c2c:	f00e f92e 	bl	8010e8c <iprintf>
					//printf("%d: 0x3E9:%d %d\n", osKernelGetTickCount(),Stop_flag,Pre_Stop_flag);
					//printf("%d: Stop_flag: %d\n", osKernelGetTickCount(), Stop_flag);
					break;
 8002c30:	e03e      	b.n	8002cb0 <StartTask02+0x480>

				case 0x181:
					Tmp_cmd_FL = (((int16_t)canbuf[1])<<8) | ((int16_t)canbuf[0])&0xff;
 8002c32:	4b30      	ldr	r3, [pc, #192]	; (8002cf4 <StartTask02+0x4c4>)
 8002c34:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	b21a      	sxth	r2, r3
 8002c3c:	4b2d      	ldr	r3, [pc, #180]	; (8002cf4 <StartTask02+0x4c4>)
 8002c3e:	f993 3000 	ldrsb.w	r3, [r3]
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	b21b      	sxth	r3, r3
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	b21a      	sxth	r2, r3
 8002c4c:	4b33      	ldr	r3, [pc, #204]	; (8002d1c <StartTask02+0x4ec>)
 8002c4e:	801a      	strh	r2, [r3, #0]
					Tmp_cmd_FR = (((int16_t)canbuf[3])<<8) | ((int16_t)canbuf[2])&0xff;
 8002c50:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <StartTask02+0x4c4>)
 8002c52:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	b21a      	sxth	r2, r3
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <StartTask02+0x4c4>)
 8002c5c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002c60:	b21b      	sxth	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	b21b      	sxth	r3, r3
 8002c66:	4313      	orrs	r3, r2
 8002c68:	b21a      	sxth	r2, r3
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <StartTask02+0x4f0>)
 8002c6c:	801a      	strh	r2, [r3, #0]
					//printf("0x181 %d\n", Tmp_cmd_FL);
					break;
 8002c6e:	e01f      	b.n	8002cb0 <StartTask02+0x480>

				case 0x182:
					Tmp_cmd_RL = (((int16_t)canbuf[1])<<8) | ((int16_t)canbuf[0])&0xff;
 8002c70:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <StartTask02+0x4c4>)
 8002c72:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	b21a      	sxth	r2, r3
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	; (8002cf4 <StartTask02+0x4c4>)
 8002c7c:	f993 3000 	ldrsb.w	r3, [r3]
 8002c80:	b21b      	sxth	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	b21b      	sxth	r3, r3
 8002c86:	4313      	orrs	r3, r2
 8002c88:	b21a      	sxth	r2, r3
 8002c8a:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <StartTask02+0x4f4>)
 8002c8c:	801a      	strh	r2, [r3, #0]
					Tmp_cmd_RR = (((int16_t)canbuf[3])<<8) | ((int16_t)canbuf[2])&0xff;
 8002c8e:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <StartTask02+0x4c4>)
 8002c90:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	b21a      	sxth	r2, r3
 8002c98:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <StartTask02+0x4c4>)
 8002c9a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002c9e:	b21b      	sxth	r3, r3
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	b21a      	sxth	r2, r3
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <StartTask02+0x4f8>)
 8002caa:	801a      	strh	r2, [r3, #0]
					break;
 8002cac:	e000      	b.n	8002cb0 <StartTask02+0x480>

				case 2002:

					break;
 8002cae:	bf00      	nop
			}
			printf("%d: t02 011\n", osKernelGetTickCount());
 8002cb0:	f009 fad0 	bl	800c254 <osKernelGetTickCount>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	481c      	ldr	r0, [pc, #112]	; (8002d2c <StartTask02+0x4fc>)
 8002cba:	f00e f8e7 	bl	8010e8c <iprintf>
			g_tCan_Rx_Header[FLAG_RxCplt].StdId=0;
 8002cbe:	4b1c      	ldr	r3, [pc, #112]	; (8002d30 <StartTask02+0x500>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	491c      	ldr	r1, [pc, #112]	; (8002d34 <StartTask02+0x504>)
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
			g_tCan_Rx_Header[FLAG_RxCplt].ExtId=0;
 8002cd2:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <StartTask02+0x500>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4917      	ldr	r1, [pc, #92]	; (8002d34 <StartTask02+0x504>)
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
			CanId = 0;
 8002ce8:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <StartTask02+0x508>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]

			for(int i=0;i<8;i++){canbuf[i]=0;}
 8002cee:	2300      	movs	r3, #0
 8002cf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cf2:	e02b      	b.n	8002d4c <StartTask02+0x51c>
 8002cf4:	20000c78 	.word	0x20000c78
 8002cf8:	20000c48 	.word	0x20000c48
 8002cfc:	20000c4a 	.word	0x20000c4a
 8002d00:	20000c4c 	.word	0x20000c4c
 8002d04:	20000c4e 	.word	0x20000c4e
 8002d08:	20000c20 	.word	0x20000c20
 8002d0c:	20000c38 	.word	0x20000c38
 8002d10:	20000c40 	.word	0x20000c40
 8002d14:	080152c4 	.word	0x080152c4
 8002d18:	080152dc 	.word	0x080152dc
 8002d1c:	20000c68 	.word	0x20000c68
 8002d20:	20000c6a 	.word	0x20000c6a
 8002d24:	20000c6c 	.word	0x20000c6c
 8002d28:	20000c6e 	.word	0x20000c6e
 8002d2c:	080152ec 	.word	0x080152ec
 8002d30:	20000a94 	.word	0x20000a94
 8002d34:	20000ac8 	.word	0x20000ac8
 8002d38:	20000c88 	.word	0x20000c88
 8002d3c:	4aaa      	ldr	r2, [pc, #680]	; (8002fe8 <StartTask02+0x7b8>)
 8002d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d40:	4413      	add	r3, r2
 8002d42:	2200      	movs	r2, #0
 8002d44:	701a      	strb	r2, [r3, #0]
 8002d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d48:	3301      	adds	r3, #1
 8002d4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d4e:	2b07      	cmp	r3, #7
 8002d50:	ddf4      	ble.n	8002d3c <StartTask02+0x50c>
		while(FLAG_RxCplt>0){
 8002d52:	4ba6      	ldr	r3, [pc, #664]	; (8002fec <StartTask02+0x7bc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f47f ae4d 	bne.w	80029f6 <StartTask02+0x1c6>
		}

	}

	if((temp_w && (temp_x==0) && (temp_y==0)) || ( fabs((Tar_cmd_v_x*1000)/Tar_cmd_w)<LIMIT_MODE_C) ){//MODE C
 8002d5c:	4ba4      	ldr	r3, [pc, #656]	; (8002ff0 <StartTask02+0x7c0>)
 8002d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d009      	beq.n	8002d7a <StartTask02+0x54a>
 8002d66:	4ba3      	ldr	r3, [pc, #652]	; (8002ff4 <StartTask02+0x7c4>)
 8002d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d104      	bne.n	8002d7a <StartTask02+0x54a>
 8002d70:	4ba1      	ldr	r3, [pc, #644]	; (8002ff8 <StartTask02+0x7c8>)
 8002d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d021      	beq.n	8002dbe <StartTask02+0x58e>
 8002d7a:	4ba0      	ldr	r3, [pc, #640]	; (8002ffc <StartTask02+0x7cc>)
 8002d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	4b9e      	ldr	r3, [pc, #632]	; (8003000 <StartTask02+0x7d0>)
 8002d86:	f7fd fc37 	bl	80005f8 <__aeabi_dmul>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	4b9c      	ldr	r3, [pc, #624]	; (8003004 <StartTask02+0x7d4>)
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f7fd fd58 	bl	800084c <__aeabi_ddiv>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	633a      	str	r2, [r7, #48]	; 0x30
 8002da2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002da6:	637b      	str	r3, [r7, #52]	; 0x34
 8002da8:	a389      	add	r3, pc, #548	; (adr r3, 8002fd0 <StartTask02+0x7a0>)
 8002daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002db2:	f7fd fe93 	bl	8000adc <__aeabi_dcmplt>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8147 	beq.w	800304c <StartTask02+0x81c>
	//if(Tar_cmd_w){

		printf("%d: t02 012 %d %d %d\n", osKernelGetTickCount(),(int)(Tar_cmd_v_x*1000),(int)(Tar_cmd_w*1000),(int)((Tar_cmd_v_x*1000)/Tar_cmd_w));
 8002dbe:	f009 fa49 	bl	800c254 <osKernelGetTickCount>
 8002dc2:	4606      	mov	r6, r0
 8002dc4:	4b8d      	ldr	r3, [pc, #564]	; (8002ffc <StartTask02+0x7cc>)
 8002dc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	4b8c      	ldr	r3, [pc, #560]	; (8003000 <StartTask02+0x7d0>)
 8002dd0:	f7fd fc12 	bl	80005f8 <__aeabi_dmul>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f7fd febc 	bl	8000b58 <__aeabi_d2iz>
 8002de0:	4605      	mov	r5, r0
 8002de2:	4b88      	ldr	r3, [pc, #544]	; (8003004 <StartTask02+0x7d4>)
 8002de4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	4b84      	ldr	r3, [pc, #528]	; (8003000 <StartTask02+0x7d0>)
 8002dee:	f7fd fc03 	bl	80005f8 <__aeabi_dmul>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f7fd fead 	bl	8000b58 <__aeabi_d2iz>
 8002dfe:	4604      	mov	r4, r0
 8002e00:	4b7e      	ldr	r3, [pc, #504]	; (8002ffc <StartTask02+0x7cc>)
 8002e02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	4b7d      	ldr	r3, [pc, #500]	; (8003000 <StartTask02+0x7d0>)
 8002e0c:	f7fd fbf4 	bl	80005f8 <__aeabi_dmul>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	4b7a      	ldr	r3, [pc, #488]	; (8003004 <StartTask02+0x7d4>)
 8002e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1e:	f7fd fd15 	bl	800084c <__aeabi_ddiv>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f7fd fe95 	bl	8000b58 <__aeabi_d2iz>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	4623      	mov	r3, r4
 8002e34:	462a      	mov	r2, r5
 8002e36:	4631      	mov	r1, r6
 8002e38:	4873      	ldr	r0, [pc, #460]	; (8003008 <StartTask02+0x7d8>)
 8002e3a:	f00e f827 	bl	8010e8c <iprintf>
		if((Pre_ModeABCD!=ModeABCD) || (EndMode==0)){
 8002e3e:	4b73      	ldr	r3, [pc, #460]	; (800300c <StartTask02+0x7dc>)
 8002e40:	781a      	ldrb	r2, [r3, #0]
 8002e42:	4b73      	ldr	r3, [pc, #460]	; (8003010 <StartTask02+0x7e0>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d103      	bne.n	8002e52 <StartTask02+0x622>
 8002e4a:	4b72      	ldr	r3, [pc, #456]	; (8003014 <StartTask02+0x7e4>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d136      	bne.n	8002ec0 <StartTask02+0x690>
			//printf("111osTimerStart: %d, %d\n", ModeABCD, Pre_ModeABCD);
			Pre_ModeABCD = ModeABCD;
 8002e52:	4b6f      	ldr	r3, [pc, #444]	; (8003010 <StartTask02+0x7e0>)
 8002e54:	781a      	ldrb	r2, [r3, #0]
 8002e56:	4b6d      	ldr	r3, [pc, #436]	; (800300c <StartTask02+0x7dc>)
 8002e58:	701a      	strb	r2, [r3, #0]
			Tar_cmd_RR = Tar_cmd_RL = Tar_cmd_FR = Tar_cmd_FL=0;
 8002e5a:	4b6f      	ldr	r3, [pc, #444]	; (8003018 <StartTask02+0x7e8>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	801a      	strh	r2, [r3, #0]
 8002e60:	4b6d      	ldr	r3, [pc, #436]	; (8003018 <StartTask02+0x7e8>)
 8002e62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002e66:	4b6d      	ldr	r3, [pc, #436]	; (800301c <StartTask02+0x7ec>)
 8002e68:	801a      	strh	r2, [r3, #0]
 8002e6a:	4b6c      	ldr	r3, [pc, #432]	; (800301c <StartTask02+0x7ec>)
 8002e6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002e70:	4b6b      	ldr	r3, [pc, #428]	; (8003020 <StartTask02+0x7f0>)
 8002e72:	801a      	strh	r2, [r3, #0]
 8002e74:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <StartTask02+0x7f0>)
 8002e76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002e7a:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <StartTask02+0x7f4>)
 8002e7c:	801a      	strh	r2, [r3, #0]
			if(timerflag){
 8002e7e:	4b6a      	ldr	r3, [pc, #424]	; (8003028 <StartTask02+0x7f8>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 80a2 	beq.w	8002fcc <StartTask02+0x79c>
				//printf("timerflag: %d\n", timerflag);
				printf("%d: t02 013\n", osKernelGetTickCount());
 8002e88:	f009 f9e4 	bl	800c254 <osKernelGetTickCount>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4866      	ldr	r0, [pc, #408]	; (800302c <StartTask02+0x7fc>)
 8002e92:	f00d fffb 	bl	8010e8c <iprintf>
				osTimerStart(EndModeDTimerHandle, ENDMODETIME);
 8002e96:	4b66      	ldr	r3, [pc, #408]	; (8003030 <StartTask02+0x800>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f009 fc4a 	bl	800c738 <osTimerStart>
				printf("%d: t02 014\n", osKernelGetTickCount());
 8002ea4:	f009 f9d6 	bl	800c254 <osKernelGetTickCount>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4861      	ldr	r0, [pc, #388]	; (8003034 <StartTask02+0x804>)
 8002eae:	f00d ffed 	bl	8010e8c <iprintf>
				timerflag = 0;
 8002eb2:	4b5d      	ldr	r3, [pc, #372]	; (8003028 <StartTask02+0x7f8>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
				EndMode = 0;
 8002eb8:	4b56      	ldr	r3, [pc, #344]	; (8003014 <StartTask02+0x7e4>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
			if(timerflag){
 8002ebe:	e085      	b.n	8002fcc <StartTask02+0x79c>
			}
		}
		else {
			ModeABCD = 3;
 8002ec0:	4b53      	ldr	r3, [pc, #332]	; (8003010 <StartTask02+0x7e0>)
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	701a      	strb	r2, [r3, #0]
			Tar_cmd_v_x=0;
 8002ec6:	494d      	ldr	r1, [pc, #308]	; (8002ffc <StartTask02+0x7cc>)
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9c1 2300 	strd	r2, r3, [r1]
			Tar_cmd_v_y=0;
 8002ed4:	4958      	ldr	r1, [pc, #352]	; (8003038 <StartTask02+0x808>)
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9c1 2300 	strd	r2, r3, [r1]
			printf("%d: t02 015\n", osKernelGetTickCount());
 8002ee2:	f009 f9b7 	bl	800c254 <osKernelGetTickCount>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4854      	ldr	r0, [pc, #336]	; (800303c <StartTask02+0x80c>)
 8002eec:	f00d ffce 	bl	8010e8c <iprintf>
			Tar_cmd_FL = -1*((Tar_cmd_w*CONSTANT_C_AxC_V)/SIGNIFICANT_FIGURES);
 8002ef0:	4b44      	ldr	r3, [pc, #272]	; (8003004 <StartTask02+0x7d4>)
 8002ef2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ef6:	a338      	add	r3, pc, #224	; (adr r3, 8002fd8 <StartTask02+0x7a8>)
 8002ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efc:	f7fd fb7c 	bl	80005f8 <__aeabi_dmul>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4610      	mov	r0, r2
 8002f06:	4619      	mov	r1, r3
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	4b3c      	ldr	r3, [pc, #240]	; (8003000 <StartTask02+0x7d0>)
 8002f0e:	f7fd fc9d 	bl	800084c <__aeabi_ddiv>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f22:	f7fd fe19 	bl	8000b58 <__aeabi_d2iz>
 8002f26:	4603      	mov	r3, r0
 8002f28:	b21a      	sxth	r2, r3
 8002f2a:	4b3b      	ldr	r3, [pc, #236]	; (8003018 <StartTask02+0x7e8>)
 8002f2c:	801a      	strh	r2, [r3, #0]

			if(Tar_cmd_FL>LIMIT_W){Tar_cmd_FL=LIMIT_W;}
 8002f2e:	4b3a      	ldr	r3, [pc, #232]	; (8003018 <StartTask02+0x7e8>)
 8002f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f34:	2b46      	cmp	r3, #70	; 0x46
 8002f36:	dd02      	ble.n	8002f3e <StartTask02+0x70e>
 8002f38:	4b37      	ldr	r3, [pc, #220]	; (8003018 <StartTask02+0x7e8>)
 8002f3a:	2246      	movs	r2, #70	; 0x46
 8002f3c:	801a      	strh	r2, [r3, #0]
			if(Tar_cmd_FL<-LIMIT_W){Tar_cmd_FL=-LIMIT_W;}
 8002f3e:	4b36      	ldr	r3, [pc, #216]	; (8003018 <StartTask02+0x7e8>)
 8002f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f44:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8002f48:	da03      	bge.n	8002f52 <StartTask02+0x722>
 8002f4a:	4b33      	ldr	r3, [pc, #204]	; (8003018 <StartTask02+0x7e8>)
 8002f4c:	f64f 72ba 	movw	r2, #65466	; 0xffba
 8002f50:	801a      	strh	r2, [r3, #0]
			Tar_cmd_RR = Tar_cmd_RL = Tar_cmd_FR = Tar_cmd_FL;
 8002f52:	4b31      	ldr	r3, [pc, #196]	; (8003018 <StartTask02+0x7e8>)
 8002f54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f58:	4b30      	ldr	r3, [pc, #192]	; (800301c <StartTask02+0x7ec>)
 8002f5a:	801a      	strh	r2, [r3, #0]
 8002f5c:	4b2f      	ldr	r3, [pc, #188]	; (800301c <StartTask02+0x7ec>)
 8002f5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f62:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <StartTask02+0x7f0>)
 8002f64:	801a      	strh	r2, [r3, #0]
 8002f66:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <StartTask02+0x7f0>)
 8002f68:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f6c:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <StartTask02+0x7f4>)
 8002f6e:	801a      	strh	r2, [r3, #0]
			printf("%d: t02 016\n", osKernelGetTickCount());
 8002f70:	f009 f970 	bl	800c254 <osKernelGetTickCount>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4619      	mov	r1, r3
 8002f78:	4831      	ldr	r0, [pc, #196]	; (8003040 <StartTask02+0x810>)
 8002f7a:	f00d ff87 	bl	8010e8c <iprintf>
			for(int i=0;i<4;i++){Deg2Ste(Xbot_W,rad2deg(ANGLE_VEL), i);}
 8002f7e:	2300      	movs	r3, #0
 8002f80:	647b      	str	r3, [r7, #68]	; 0x44
 8002f82:	e00e      	b.n	8002fa2 <StartTask02+0x772>
 8002f84:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002fe0 <StartTask02+0x7b0>
 8002f88:	f7ff fad2 	bl	8002530 <rad2deg>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	2001      	movs	r0, #1
 8002f98:	f7ff fa86 	bl	80024a8 <Deg2Ste>
 8002f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	dded      	ble.n	8002f84 <StartTask02+0x754>
			printf("%d: t02 017\n", osKernelGetTickCount());
 8002fa8:	f009 f954 	bl	800c254 <osKernelGetTickCount>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4824      	ldr	r0, [pc, #144]	; (8003044 <StartTask02+0x814>)
 8002fb2:	f00d ff6b 	bl	8010e8c <iprintf>
			Cal_Real_cmd();
 8002fb6:	f7fe fbc7 	bl	8001748 <Cal_Real_cmd>
			printf("%d: t02 018\n", osKernelGetTickCount());
 8002fba:	f009 f94b 	bl	800c254 <osKernelGetTickCount>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4821      	ldr	r0, [pc, #132]	; (8003048 <StartTask02+0x818>)
 8002fc4:	f00d ff62 	bl	8010e8c <iprintf>
		if((Pre_ModeABCD!=ModeABCD) || (EndMode==0)){
 8002fc8:	f000 beec 	b.w	8003da4 <StartTask02+0x1574>
 8002fcc:	f000 beea 	b.w	8003da4 <StartTask02+0x1574>
 8002fd0:	00000000 	.word	0x00000000
 8002fd4:	4072c000 	.word	0x4072c000
 8002fd8:	8ccd1fe0 	.word	0x8ccd1fe0
 8002fdc:	40412c3c 	.word	0x40412c3c
 8002fe0:	ccefcd31 	.word	0xccefcd31
 8002fe4:	3fe7a426 	.word	0x3fe7a426
 8002fe8:	20000c78 	.word	0x20000c78
 8002fec:	20000a94 	.word	0x20000a94
 8002ff0:	20000c4c 	.word	0x20000c4c
 8002ff4:	20000c48 	.word	0x20000c48
 8002ff8:	20000c4a 	.word	0x20000c4a
 8002ffc:	20000c20 	.word	0x20000c20
 8003000:	408f4000 	.word	0x408f4000
 8003004:	20000c40 	.word	0x20000c40
 8003008:	080152fc 	.word	0x080152fc
 800300c:	20000bd4 	.word	0x20000bd4
 8003010:	2000005c 	.word	0x2000005c
 8003014:	2000005e 	.word	0x2000005e
 8003018:	20000c70 	.word	0x20000c70
 800301c:	20000c72 	.word	0x20000c72
 8003020:	20000c74 	.word	0x20000c74
 8003024:	20000c76 	.word	0x20000c76
 8003028:	2000005d 	.word	0x2000005d
 800302c:	08015314 	.word	0x08015314
 8003030:	20000cb0 	.word	0x20000cb0
 8003034:	08015324 	.word	0x08015324
 8003038:	20000c38 	.word	0x20000c38
 800303c:	08015334 	.word	0x08015334
 8003040:	08015344 	.word	0x08015344
 8003044:	08015354 	.word	0x08015354
 8003048:	08015364 	.word	0x08015364
//	}


	//else if(Tar_cmd_v_x && (Tar_cmd_w!=0)){
		else {	//mode2
			printf("%d: t02 019\n", osKernelGetTickCount());
 800304c:	f009 f902 	bl	800c254 <osKernelGetTickCount>
 8003050:	4603      	mov	r3, r0
 8003052:	4619      	mov	r1, r3
 8003054:	4894      	ldr	r0, [pc, #592]	; (80032a8 <StartTask02+0xa78>)
 8003056:	f00d ff19 	bl	8010e8c <iprintf>
			if((Pre_ModeABCD!=ModeABCD) || (EndMode==0)){
 800305a:	4b94      	ldr	r3, [pc, #592]	; (80032ac <StartTask02+0xa7c>)
 800305c:	781a      	ldrb	r2, [r3, #0]
 800305e:	4b94      	ldr	r3, [pc, #592]	; (80032b0 <StartTask02+0xa80>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d104      	bne.n	8003070 <StartTask02+0x840>
 8003066:	4b93      	ldr	r3, [pc, #588]	; (80032b4 <StartTask02+0xa84>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	f040 814a 	bne.w	8003304 <StartTask02+0xad4>
				printf("%d: t02 020\n", osKernelGetTickCount());
 8003070:	f009 f8f0 	bl	800c254 <osKernelGetTickCount>
 8003074:	4603      	mov	r3, r0
 8003076:	4619      	mov	r1, r3
 8003078:	488f      	ldr	r0, [pc, #572]	; (80032b8 <StartTask02+0xa88>)
 800307a:	f00d ff07 	bl	8010e8c <iprintf>
				//printf("%d:111osTimerStart: %d, %d, %d\n", osKernelGetTickCount(), ModeABCD, Pre_ModeABCD, EndMode);
				Pre_ModeABCD = ModeABCD;
 800307e:	4b8c      	ldr	r3, [pc, #560]	; (80032b0 <StartTask02+0xa80>)
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	4b8a      	ldr	r3, [pc, #552]	; (80032ac <StartTask02+0xa7c>)
 8003084:	701a      	strb	r2, [r3, #0]
				Tar_cmd_RR = Tar_cmd_RL = Tar_cmd_FR = Tar_cmd_FL=0;
 8003086:	4b8d      	ldr	r3, [pc, #564]	; (80032bc <StartTask02+0xa8c>)
 8003088:	2200      	movs	r2, #0
 800308a:	801a      	strh	r2, [r3, #0]
 800308c:	4b8b      	ldr	r3, [pc, #556]	; (80032bc <StartTask02+0xa8c>)
 800308e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003092:	4b8b      	ldr	r3, [pc, #556]	; (80032c0 <StartTask02+0xa90>)
 8003094:	801a      	strh	r2, [r3, #0]
 8003096:	4b8a      	ldr	r3, [pc, #552]	; (80032c0 <StartTask02+0xa90>)
 8003098:	f9b3 2000 	ldrsh.w	r2, [r3]
 800309c:	4b89      	ldr	r3, [pc, #548]	; (80032c4 <StartTask02+0xa94>)
 800309e:	801a      	strh	r2, [r3, #0]
 80030a0:	4b88      	ldr	r3, [pc, #544]	; (80032c4 <StartTask02+0xa94>)
 80030a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80030a6:	4b88      	ldr	r3, [pc, #544]	; (80032c8 <StartTask02+0xa98>)
 80030a8:	801a      	strh	r2, [r3, #0]
				angle_rad_i = 0;
 80030aa:	4988      	ldr	r1, [pc, #544]	; (80032cc <StartTask02+0xa9c>)
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	e9c1 2300 	strd	r2, r3, [r1]
				angle_rad_o = 0;
 80030b8:	4985      	ldr	r1, [pc, #532]	; (80032d0 <StartTask02+0xaa0>)
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	e9c1 2300 	strd	r2, r3, [r1]
				printf("%d:send angle2 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 80030c6:	f009 f8c5 	bl	800c254 <osKernelGetTickCount>
 80030ca:	4682      	mov	sl, r0
									SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 80030cc:	4b81      	ldr	r3, [pc, #516]	; (80032d4 <StartTask02+0xaa4>)
 80030ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d2:	461a      	mov	r2, r3
				printf("%d:send angle2 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 80030d4:	2364      	movs	r3, #100	; 0x64
 80030d6:	fb03 f902 	mul.w	r9, r3, r2
									SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 80030da:	4b7e      	ldr	r3, [pc, #504]	; (80032d4 <StartTask02+0xaa4>)
 80030dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030e0:	461a      	mov	r2, r3
				printf("%d:send angle2 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 80030e2:	2364      	movs	r3, #100	; 0x64
 80030e4:	fb03 f802 	mul.w	r8, r3, r2
									SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 80030e8:	4b7a      	ldr	r3, [pc, #488]	; (80032d4 <StartTask02+0xaa4>)
 80030ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030ee:	461a      	mov	r2, r3
				printf("%d:send angle2 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 80030f0:	2364      	movs	r3, #100	; 0x64
 80030f2:	fb03 f302 	mul.w	r3, r3, r2
 80030f6:	63bb      	str	r3, [r7, #56]	; 0x38
									SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 80030f8:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <StartTask02+0xaa4>)
 80030fa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80030fe:	461a      	mov	r2, r3
				printf("%d:send angle2 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 8003100:	2364      	movs	r3, #100	; 0x64
 8003102:	fb03 f202 	mul.w	r2, r3, r2
 8003106:	60fa      	str	r2, [r7, #12]
									SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003108:	4b70      	ldr	r3, [pc, #448]	; (80032cc <StartTask02+0xa9c>)
 800310a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	4b71      	ldr	r3, [pc, #452]	; (80032d8 <StartTask02+0xaa8>)
 8003114:	f7fd fa70 	bl	80005f8 <__aeabi_dmul>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
				printf("%d:send angle2 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	f7fd fd1a 	bl	8000b58 <__aeabi_d2iz>
 8003124:	60b8      	str	r0, [r7, #8]
									SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003126:	4b6a      	ldr	r3, [pc, #424]	; (80032d0 <StartTask02+0xaa0>)
 8003128:	e9d3 0100 	ldrd	r0, r1, [r3]
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	4b69      	ldr	r3, [pc, #420]	; (80032d8 <StartTask02+0xaa8>)
 8003132:	f7fd fa61 	bl	80005f8 <__aeabi_dmul>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
				printf("%d:send angle2 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 800313a:	4610      	mov	r0, r2
 800313c:	4619      	mov	r1, r3
 800313e:	f7fd fd0b 	bl	8000b58 <__aeabi_d2iz>
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	4b65      	ldr	r3, [pc, #404]	; (80032dc <StartTask02+0xaac>)
 8003146:	681e      	ldr	r6, [r3, #0]
 8003148:	4b64      	ldr	r3, [pc, #400]	; (80032dc <StartTask02+0xaac>)
 800314a:	685d      	ldr	r5, [r3, #4]
 800314c:	4b63      	ldr	r3, [pc, #396]	; (80032dc <StartTask02+0xaac>)
 800314e:	6898      	ldr	r0, [r3, #8]
 8003150:	4b62      	ldr	r3, [pc, #392]	; (80032dc <StartTask02+0xaac>)
 8003152:	68d9      	ldr	r1, [r3, #12]
 8003154:	4b62      	ldr	r3, [pc, #392]	; (80032e0 <StartTask02+0xab0>)
 8003156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800315a:	461c      	mov	r4, r3
 800315c:	4b61      	ldr	r3, [pc, #388]	; (80032e4 <StartTask02+0xab4>)
 800315e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003162:	461a      	mov	r2, r3
 8003164:	4b60      	ldr	r3, [pc, #384]	; (80032e8 <StartTask02+0xab8>)
 8003166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800316a:	930a      	str	r3, [sp, #40]	; 0x28
 800316c:	9209      	str	r2, [sp, #36]	; 0x24
 800316e:	9408      	str	r4, [sp, #32]
 8003170:	9107      	str	r1, [sp, #28]
 8003172:	9006      	str	r0, [sp, #24]
 8003174:	9505      	str	r5, [sp, #20]
 8003176:	9604      	str	r6, [sp, #16]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	9103      	str	r1, [sp, #12]
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	9102      	str	r1, [sp, #8]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	9201      	str	r2, [sp, #4]
 8003184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	4643      	mov	r3, r8
 800318a:	464a      	mov	r2, r9
 800318c:	4651      	mov	r1, sl
 800318e:	4857      	ldr	r0, [pc, #348]	; (80032ec <StartTask02+0xabc>)
 8003190:	f00d fe7c 	bl	8010e8c <iprintf>
									SAngle[0],SAngle[1],SAngle[2],SAngle[3], temp_x, temp_y, temp_w);
				if(timerflag){
 8003194:	4b56      	ldr	r3, [pc, #344]	; (80032f0 <StartTask02+0xac0>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 85fa 	beq.w	8003d92 <StartTask02+0x1562>
					printf("%d: t02 021\n", osKernelGetTickCount());
 800319e:	f009 f859 	bl	800c254 <osKernelGetTickCount>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4619      	mov	r1, r3
 80031a6:	4853      	ldr	r0, [pc, #332]	; (80032f4 <StartTask02+0xac4>)
 80031a8:	f00d fe70 	bl	8010e8c <iprintf>
					//printf("timerflag: %d\n", timerflag);
					osTimerStart(EndModeDTimerHandle, ENDMODETIME);
 80031ac:	4b52      	ldr	r3, [pc, #328]	; (80032f8 <StartTask02+0xac8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80031b4:	4618      	mov	r0, r3
 80031b6:	f009 fabf 	bl	800c738 <osTimerStart>
					printf("%d: t02 022\n", osKernelGetTickCount());
 80031ba:	f009 f84b 	bl	800c254 <osKernelGetTickCount>
 80031be:	4603      	mov	r3, r0
 80031c0:	4619      	mov	r1, r3
 80031c2:	484e      	ldr	r0, [pc, #312]	; (80032fc <StartTask02+0xacc>)
 80031c4:	f00d fe62 	bl	8010e8c <iprintf>
					timerflag = 0;
 80031c8:	4b49      	ldr	r3, [pc, #292]	; (80032f0 <StartTask02+0xac0>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
					EndMode = 0;
 80031ce:	4b39      	ldr	r3, [pc, #228]	; (80032b4 <StartTask02+0xa84>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	701a      	strb	r2, [r3, #0]
					printf("%d:send angle3 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 80031d4:	f009 f83e 	bl	800c254 <osKernelGetTickCount>
 80031d8:	4682      	mov	sl, r0
										SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 80031da:	4b3e      	ldr	r3, [pc, #248]	; (80032d4 <StartTask02+0xaa4>)
 80031dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031e0:	461a      	mov	r2, r3
					printf("%d:send angle3 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 80031e2:	2364      	movs	r3, #100	; 0x64
 80031e4:	fb03 f902 	mul.w	r9, r3, r2
										SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 80031e8:	4b3a      	ldr	r3, [pc, #232]	; (80032d4 <StartTask02+0xaa4>)
 80031ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031ee:	461a      	mov	r2, r3
					printf("%d:send angle3 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 80031f0:	2364      	movs	r3, #100	; 0x64
 80031f2:	fb03 f802 	mul.w	r8, r3, r2
										SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 80031f6:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <StartTask02+0xaa4>)
 80031f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80031fc:	461a      	mov	r2, r3
					printf("%d:send angle3 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 80031fe:	2364      	movs	r3, #100	; 0x64
 8003200:	fb03 f302 	mul.w	r3, r3, r2
 8003204:	63bb      	str	r3, [r7, #56]	; 0x38
										SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003206:	4b33      	ldr	r3, [pc, #204]	; (80032d4 <StartTask02+0xaa4>)
 8003208:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800320c:	461a      	mov	r2, r3
					printf("%d:send angle3 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 800320e:	2364      	movs	r3, #100	; 0x64
 8003210:	fb03 f202 	mul.w	r2, r3, r2
 8003214:	60fa      	str	r2, [r7, #12]
										SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003216:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <StartTask02+0xa9c>)
 8003218:	e9d3 0100 	ldrd	r0, r1, [r3]
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	4b2d      	ldr	r3, [pc, #180]	; (80032d8 <StartTask02+0xaa8>)
 8003222:	f7fd f9e9 	bl	80005f8 <__aeabi_dmul>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
					printf("%d:send angle3 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	f7fd fc93 	bl	8000b58 <__aeabi_d2iz>
 8003232:	60b8      	str	r0, [r7, #8]
										SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003234:	4b26      	ldr	r3, [pc, #152]	; (80032d0 <StartTask02+0xaa0>)
 8003236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	4b26      	ldr	r3, [pc, #152]	; (80032d8 <StartTask02+0xaa8>)
 8003240:	f7fd f9da 	bl	80005f8 <__aeabi_dmul>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
					printf("%d:send angle3 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 8003248:	4610      	mov	r0, r2
 800324a:	4619      	mov	r1, r3
 800324c:	f7fd fc84 	bl	8000b58 <__aeabi_d2iz>
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	4b22      	ldr	r3, [pc, #136]	; (80032dc <StartTask02+0xaac>)
 8003254:	681e      	ldr	r6, [r3, #0]
 8003256:	4b21      	ldr	r3, [pc, #132]	; (80032dc <StartTask02+0xaac>)
 8003258:	685d      	ldr	r5, [r3, #4]
 800325a:	4b20      	ldr	r3, [pc, #128]	; (80032dc <StartTask02+0xaac>)
 800325c:	6898      	ldr	r0, [r3, #8]
 800325e:	4b1f      	ldr	r3, [pc, #124]	; (80032dc <StartTask02+0xaac>)
 8003260:	68d9      	ldr	r1, [r3, #12]
 8003262:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <StartTask02+0xab0>)
 8003264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003268:	461c      	mov	r4, r3
 800326a:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <StartTask02+0xab4>)
 800326c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003270:	461a      	mov	r2, r3
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <StartTask02+0xab8>)
 8003274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003278:	930a      	str	r3, [sp, #40]	; 0x28
 800327a:	9209      	str	r2, [sp, #36]	; 0x24
 800327c:	9408      	str	r4, [sp, #32]
 800327e:	9107      	str	r1, [sp, #28]
 8003280:	9006      	str	r0, [sp, #24]
 8003282:	9505      	str	r5, [sp, #20]
 8003284:	9604      	str	r6, [sp, #16]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	9103      	str	r1, [sp, #12]
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	9102      	str	r1, [sp, #8]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	9201      	str	r2, [sp, #4]
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	4643      	mov	r3, r8
 8003298:	464a      	mov	r2, r9
 800329a:	4651      	mov	r1, sl
 800329c:	4818      	ldr	r0, [pc, #96]	; (8003300 <StartTask02+0xad0>)
 800329e:	f00d fdf5 	bl	8010e8c <iprintf>
				if(timerflag){
 80032a2:	f000 bd76 	b.w	8003d92 <StartTask02+0x1562>
 80032a6:	bf00      	nop
 80032a8:	08015374 	.word	0x08015374
 80032ac:	20000bd4 	.word	0x20000bd4
 80032b0:	2000005c 	.word	0x2000005c
 80032b4:	2000005e 	.word	0x2000005e
 80032b8:	08015384 	.word	0x08015384
 80032bc:	20000c70 	.word	0x20000c70
 80032c0:	20000c72 	.word	0x20000c72
 80032c4:	20000c74 	.word	0x20000c74
 80032c8:	20000c76 	.word	0x20000c76
 80032cc:	20000c10 	.word	0x20000c10
 80032d0:	20000c18 	.word	0x20000c18
 80032d4:	20000bcc 	.word	0x20000bcc
 80032d8:	408f4000 	.word	0x408f4000
 80032dc:	20000be0 	.word	0x20000be0
 80032e0:	20000c48 	.word	0x20000c48
 80032e4:	20000c4a 	.word	0x20000c4a
 80032e8:	20000c4c 	.word	0x20000c4c
 80032ec:	08015394 	.word	0x08015394
 80032f0:	2000005d 	.word	0x2000005d
 80032f4:	080153cc 	.word	0x080153cc
 80032f8:	20000cb0 	.word	0x20000cb0
 80032fc:	080153dc 	.word	0x080153dc
 8003300:	080153ec 	.word	0x080153ec
				}
			}
			else{	//mode2
			//Tar_cmd_FL = CONSTANT_VEL  *  (Tar_cmd_v_x*cos(ANGLE_RAD_B) + Tar_cmd_v_y*sin(ANGLE_RAD_B));
			//printf("%d:222osTimerStart: %d, %d, %d\n", osKernelGetTickCount(), ModeABCD, Pre_ModeABCD, EndMode);
			if(Tar_cmd_v_x>LIMIT_V){Tar_cmd_v_x=LIMIT_V;}
 8003304:	4bc8      	ldr	r3, [pc, #800]	; (8003628 <StartTask02+0xdf8>)
 8003306:	e9d3 0100 	ldrd	r0, r1, [r3]
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	4bc7      	ldr	r3, [pc, #796]	; (800362c <StartTask02+0xdfc>)
 8003310:	f7fd fc02 	bl	8000b18 <__aeabi_dcmpgt>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <StartTask02+0xaf6>
 800331a:	49c3      	ldr	r1, [pc, #780]	; (8003628 <StartTask02+0xdf8>)
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	4bc2      	ldr	r3, [pc, #776]	; (800362c <StartTask02+0xdfc>)
 8003322:	e9c1 2300 	strd	r2, r3, [r1]
			if(Tar_cmd_v_x<-LIMIT_V){Tar_cmd_v_x=-LIMIT_V;}
 8003326:	4bc0      	ldr	r3, [pc, #768]	; (8003628 <StartTask02+0xdf8>)
 8003328:	e9d3 0100 	ldrd	r0, r1, [r3]
 800332c:	a3b8      	add	r3, pc, #736	; (adr r3, 8003610 <StartTask02+0xde0>)
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	f7fd fbd3 	bl	8000adc <__aeabi_dcmplt>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <StartTask02+0xb18>
 800333c:	49ba      	ldr	r1, [pc, #744]	; (8003628 <StartTask02+0xdf8>)
 800333e:	a3b4      	add	r3, pc, #720	; (adr r3, 8003610 <StartTask02+0xde0>)
 8003340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003344:	e9c1 2300 	strd	r2, r3, [r1]
			printf("%d: t02 023\n", osKernelGetTickCount());
 8003348:	f008 ff84 	bl	800c254 <osKernelGetTickCount>
 800334c:	4603      	mov	r3, r0
 800334e:	4619      	mov	r1, r3
 8003350:	48b7      	ldr	r0, [pc, #732]	; (8003630 <StartTask02+0xe00>)
 8003352:	f00d fd9b 	bl	8010e8c <iprintf>
//			if((Tar_cmd_v_x<0.1) && (Tar_cmd_v_x>-0.1)){
//				angle_rad_c = 1;
//
//			}
//			else { angle_rad_c = fabs(asin(((230*Tar_cmd_w) / (Tar_cmd_v_x*1000)))); }
			printf("%d: t02 024\n", osKernelGetTickCount());
 8003356:	f008 ff7d 	bl	800c254 <osKernelGetTickCount>
 800335a:	4603      	mov	r3, r0
 800335c:	4619      	mov	r1, r3
 800335e:	48b5      	ldr	r0, [pc, #724]	; (8003634 <StartTask02+0xe04>)
 8003360:	f00d fd94 	bl	8010e8c <iprintf>
			angle_rad_c = fabs(asin(((230*Tar_cmd_w) / (Tar_cmd_v_x*1000))));
 8003364:	4bb4      	ldr	r3, [pc, #720]	; (8003638 <StartTask02+0xe08>)
 8003366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800336a:	a3ab      	add	r3, pc, #684	; (adr r3, 8003618 <StartTask02+0xde8>)
 800336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003370:	f7fd f942 	bl	80005f8 <__aeabi_dmul>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4614      	mov	r4, r2
 800337a:	461d      	mov	r5, r3
 800337c:	4baa      	ldr	r3, [pc, #680]	; (8003628 <StartTask02+0xdf8>)
 800337e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	4bad      	ldr	r3, [pc, #692]	; (800363c <StartTask02+0xe0c>)
 8003388:	f7fd f936 	bl	80005f8 <__aeabi_dmul>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4620      	mov	r0, r4
 8003392:	4629      	mov	r1, r5
 8003394:	f7fd fa5a 	bl	800084c <__aeabi_ddiv>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	ec43 2b17 	vmov	d7, r2, r3
 80033a0:	eeb0 0a47 	vmov.f32	s0, s14
 80033a4:	eef0 0a67 	vmov.f32	s1, s15
 80033a8:	f00f ff02 	bl	80131b0 <asin>
 80033ac:	ec53 2b10 	vmov	r2, r3, d0
 80033b0:	623a      	str	r2, [r7, #32]
 80033b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
 80033b8:	4ba1      	ldr	r3, [pc, #644]	; (8003640 <StartTask02+0xe10>)
 80033ba:	ed97 7b08 	vldr	d7, [r7, #32]
 80033be:	ed83 7b00 	vstr	d7, [r3]

			angle_rad_i = fabs(atan2(230,(230 / tan(angle_rad_c))-209.5));
 80033c2:	4b9f      	ldr	r3, [pc, #636]	; (8003640 <StartTask02+0xe10>)
 80033c4:	ed93 7b00 	vldr	d7, [r3]
 80033c8:	eeb0 0a47 	vmov.f32	s0, s14
 80033cc:	eef0 0a67 	vmov.f32	s1, s15
 80033d0:	f00f feba 	bl	8013148 <tan>
 80033d4:	ec53 2b10 	vmov	r2, r3, d0
 80033d8:	a18f      	add	r1, pc, #572	; (adr r1, 8003618 <StartTask02+0xde8>)
 80033da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033de:	f7fd fa35 	bl	800084c <__aeabi_ddiv>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4610      	mov	r0, r2
 80033e8:	4619      	mov	r1, r3
 80033ea:	a38d      	add	r3, pc, #564	; (adr r3, 8003620 <StartTask02+0xdf0>)
 80033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f0:	f7fc ff4a 	bl	8000288 <__aeabi_dsub>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	ec43 2b17 	vmov	d7, r2, r3
 80033fc:	eeb0 1a47 	vmov.f32	s2, s14
 8003400:	eef0 1a67 	vmov.f32	s3, s15
 8003404:	ed9f 0b84 	vldr	d0, [pc, #528]	; 8003618 <StartTask02+0xde8>
 8003408:	f00f ff06 	bl	8013218 <atan2>
 800340c:	ec53 2b10 	vmov	r2, r3, d0
 8003410:	61ba      	str	r2, [r7, #24]
 8003412:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	4b8a      	ldr	r3, [pc, #552]	; (8003644 <StartTask02+0xe14>)
 800341a:	ed97 7b06 	vldr	d7, [r7, #24]
 800341e:	ed83 7b00 	vstr	d7, [r3]
			angle_rad_o = fabs(atan2(230,(230 / tan(angle_rad_c))+209.5));
 8003422:	4b87      	ldr	r3, [pc, #540]	; (8003640 <StartTask02+0xe10>)
 8003424:	ed93 7b00 	vldr	d7, [r3]
 8003428:	eeb0 0a47 	vmov.f32	s0, s14
 800342c:	eef0 0a67 	vmov.f32	s1, s15
 8003430:	f00f fe8a 	bl	8013148 <tan>
 8003434:	ec53 2b10 	vmov	r2, r3, d0
 8003438:	a177      	add	r1, pc, #476	; (adr r1, 8003618 <StartTask02+0xde8>)
 800343a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800343e:	f7fd fa05 	bl	800084c <__aeabi_ddiv>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4610      	mov	r0, r2
 8003448:	4619      	mov	r1, r3
 800344a:	a375      	add	r3, pc, #468	; (adr r3, 8003620 <StartTask02+0xdf0>)
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	f7fc ff1c 	bl	800028c <__adddf3>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	ec43 2b17 	vmov	d7, r2, r3
 800345c:	eeb0 1a47 	vmov.f32	s2, s14
 8003460:	eef0 1a67 	vmov.f32	s3, s15
 8003464:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 8003618 <StartTask02+0xde8>
 8003468:	f00f fed6 	bl	8013218 <atan2>
 800346c:	ec53 2b10 	vmov	r2, r3, d0
 8003470:	613a      	str	r2, [r7, #16]
 8003472:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	4b73      	ldr	r3, [pc, #460]	; (8003648 <StartTask02+0xe18>)
 800347a:	ed97 7b04 	vldr	d7, [r7, #16]
 800347e:	ed83 7b00 	vstr	d7, [r3]

			Tar_cmd_v_i = (Tar_cmd_v_x*sin(angle_rad_c)) / sin(angle_rad_i);
 8003482:	4b6f      	ldr	r3, [pc, #444]	; (8003640 <StartTask02+0xe10>)
 8003484:	ed93 7b00 	vldr	d7, [r3]
 8003488:	eeb0 0a47 	vmov.f32	s0, s14
 800348c:	eef0 0a67 	vmov.f32	s1, s15
 8003490:	f00f fe02 	bl	8013098 <sin>
 8003494:	ec51 0b10 	vmov	r0, r1, d0
 8003498:	4b63      	ldr	r3, [pc, #396]	; (8003628 <StartTask02+0xdf8>)
 800349a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349e:	f7fd f8ab 	bl	80005f8 <__aeabi_dmul>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4614      	mov	r4, r2
 80034a8:	461d      	mov	r5, r3
 80034aa:	4b66      	ldr	r3, [pc, #408]	; (8003644 <StartTask02+0xe14>)
 80034ac:	ed93 7b00 	vldr	d7, [r3]
 80034b0:	eeb0 0a47 	vmov.f32	s0, s14
 80034b4:	eef0 0a67 	vmov.f32	s1, s15
 80034b8:	f00f fdee 	bl	8013098 <sin>
 80034bc:	ec53 2b10 	vmov	r2, r3, d0
 80034c0:	4620      	mov	r0, r4
 80034c2:	4629      	mov	r1, r5
 80034c4:	f7fd f9c2 	bl	800084c <__aeabi_ddiv>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	495f      	ldr	r1, [pc, #380]	; (800364c <StartTask02+0xe1c>)
 80034ce:	e9c1 2300 	strd	r2, r3, [r1]
			Tar_cmd_v_o = (Tar_cmd_v_x*sin(angle_rad_c)) / sin(angle_rad_o);
 80034d2:	4b5b      	ldr	r3, [pc, #364]	; (8003640 <StartTask02+0xe10>)
 80034d4:	ed93 7b00 	vldr	d7, [r3]
 80034d8:	eeb0 0a47 	vmov.f32	s0, s14
 80034dc:	eef0 0a67 	vmov.f32	s1, s15
 80034e0:	f00f fdda 	bl	8013098 <sin>
 80034e4:	ec51 0b10 	vmov	r0, r1, d0
 80034e8:	4b4f      	ldr	r3, [pc, #316]	; (8003628 <StartTask02+0xdf8>)
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	f7fd f883 	bl	80005f8 <__aeabi_dmul>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4614      	mov	r4, r2
 80034f8:	461d      	mov	r5, r3
 80034fa:	4b53      	ldr	r3, [pc, #332]	; (8003648 <StartTask02+0xe18>)
 80034fc:	ed93 7b00 	vldr	d7, [r3]
 8003500:	eeb0 0a47 	vmov.f32	s0, s14
 8003504:	eef0 0a67 	vmov.f32	s1, s15
 8003508:	f00f fdc6 	bl	8013098 <sin>
 800350c:	ec53 2b10 	vmov	r2, r3, d0
 8003510:	4620      	mov	r0, r4
 8003512:	4629      	mov	r1, r5
 8003514:	f7fd f99a 	bl	800084c <__aeabi_ddiv>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	494c      	ldr	r1, [pc, #304]	; (8003650 <StartTask02+0xe20>)
 800351e:	e9c1 2300 	strd	r2, r3, [r1]

			printf("%d: t02 025\n", osKernelGetTickCount());
 8003522:	f008 fe97 	bl	800c254 <osKernelGetTickCount>
 8003526:	4603      	mov	r3, r0
 8003528:	4619      	mov	r1, r3
 800352a:	484a      	ldr	r0, [pc, #296]	; (8003654 <StartTask02+0xe24>)
 800352c:	f00d fcae 	bl	8010e8c <iprintf>
			printf("%d:send angle1 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 8003530:	f008 fe90 	bl	800c254 <osKernelGetTickCount>
 8003534:	4682      	mov	sl, r0
								SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003536:	4b48      	ldr	r3, [pc, #288]	; (8003658 <StartTask02+0xe28>)
 8003538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800353c:	461a      	mov	r2, r3
			printf("%d:send angle1 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 800353e:	2364      	movs	r3, #100	; 0x64
 8003540:	fb03 f902 	mul.w	r9, r3, r2
								SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003544:	4b44      	ldr	r3, [pc, #272]	; (8003658 <StartTask02+0xe28>)
 8003546:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800354a:	461a      	mov	r2, r3
			printf("%d:send angle1 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 800354c:	2364      	movs	r3, #100	; 0x64
 800354e:	fb03 f802 	mul.w	r8, r3, r2
								SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003552:	4b41      	ldr	r3, [pc, #260]	; (8003658 <StartTask02+0xe28>)
 8003554:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003558:	461a      	mov	r2, r3
			printf("%d:send angle1 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 800355a:	2364      	movs	r3, #100	; 0x64
 800355c:	fb03 f302 	mul.w	r3, r3, r2
 8003560:	63bb      	str	r3, [r7, #56]	; 0x38
								SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003562:	4b3d      	ldr	r3, [pc, #244]	; (8003658 <StartTask02+0xe28>)
 8003564:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003568:	461a      	mov	r2, r3
			printf("%d:send angle1 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 800356a:	2364      	movs	r3, #100	; 0x64
 800356c:	fb03 f202 	mul.w	r2, r3, r2
 8003570:	60fa      	str	r2, [r7, #12]
								SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003572:	4b34      	ldr	r3, [pc, #208]	; (8003644 <StartTask02+0xe14>)
 8003574:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	4b2f      	ldr	r3, [pc, #188]	; (800363c <StartTask02+0xe0c>)
 800357e:	f7fd f83b 	bl	80005f8 <__aeabi_dmul>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
			printf("%d:send angle1 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 8003586:	4610      	mov	r0, r2
 8003588:	4619      	mov	r1, r3
 800358a:	f7fd fae5 	bl	8000b58 <__aeabi_d2iz>
 800358e:	60b8      	str	r0, [r7, #8]
								SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003590:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <StartTask02+0xe18>)
 8003592:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	4b28      	ldr	r3, [pc, #160]	; (800363c <StartTask02+0xe0c>)
 800359c:	f7fd f82c 	bl	80005f8 <__aeabi_dmul>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
			printf("%d:send angle1 %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 80035a4:	4610      	mov	r0, r2
 80035a6:	4619      	mov	r1, r3
 80035a8:	f7fd fad6 	bl	8000b58 <__aeabi_d2iz>
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	4b2b      	ldr	r3, [pc, #172]	; (800365c <StartTask02+0xe2c>)
 80035b0:	681e      	ldr	r6, [r3, #0]
 80035b2:	4b2a      	ldr	r3, [pc, #168]	; (800365c <StartTask02+0xe2c>)
 80035b4:	685d      	ldr	r5, [r3, #4]
 80035b6:	4b29      	ldr	r3, [pc, #164]	; (800365c <StartTask02+0xe2c>)
 80035b8:	6898      	ldr	r0, [r3, #8]
 80035ba:	4b28      	ldr	r3, [pc, #160]	; (800365c <StartTask02+0xe2c>)
 80035bc:	68d9      	ldr	r1, [r3, #12]
 80035be:	4b28      	ldr	r3, [pc, #160]	; (8003660 <StartTask02+0xe30>)
 80035c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035c4:	461c      	mov	r4, r3
 80035c6:	4b27      	ldr	r3, [pc, #156]	; (8003664 <StartTask02+0xe34>)
 80035c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035cc:	461a      	mov	r2, r3
 80035ce:	4b26      	ldr	r3, [pc, #152]	; (8003668 <StartTask02+0xe38>)
 80035d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035d4:	930a      	str	r3, [sp, #40]	; 0x28
 80035d6:	9209      	str	r2, [sp, #36]	; 0x24
 80035d8:	9408      	str	r4, [sp, #32]
 80035da:	9107      	str	r1, [sp, #28]
 80035dc:	9006      	str	r0, [sp, #24]
 80035de:	9505      	str	r5, [sp, #20]
 80035e0:	9604      	str	r6, [sp, #16]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	9103      	str	r1, [sp, #12]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	9102      	str	r1, [sp, #8]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	9201      	str	r2, [sp, #4]
 80035ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	4643      	mov	r3, r8
 80035f4:	464a      	mov	r2, r9
 80035f6:	4651      	mov	r1, sl
 80035f8:	481c      	ldr	r0, [pc, #112]	; (800366c <StartTask02+0xe3c>)
 80035fa:	f00d fc47 	bl	8010e8c <iprintf>
								SAngle[0],SAngle[1],SAngle[2],SAngle[3], temp_x, temp_y, temp_w);
			if(temp_w==0){
 80035fe:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <StartTask02+0xe38>)
 8003600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f040 80cb 	bne.w	80037a0 <StartTask02+0xf70>
 800360a:	e031      	b.n	8003670 <StartTask02+0xe40>
 800360c:	f3af 8000 	nop.w
 8003610:	00000000 	.word	0x00000000
 8003614:	c07f4000 	.word	0xc07f4000
 8003618:	00000000 	.word	0x00000000
 800361c:	406cc000 	.word	0x406cc000
 8003620:	00000000 	.word	0x00000000
 8003624:	406a3000 	.word	0x406a3000
 8003628:	20000c20 	.word	0x20000c20
 800362c:	407f4000 	.word	0x407f4000
 8003630:	08015424 	.word	0x08015424
 8003634:	08015434 	.word	0x08015434
 8003638:	20000c40 	.word	0x20000c40
 800363c:	408f4000 	.word	0x408f4000
 8003640:	20000c08 	.word	0x20000c08
 8003644:	20000c10 	.word	0x20000c10
 8003648:	20000c18 	.word	0x20000c18
 800364c:	20000c28 	.word	0x20000c28
 8003650:	20000c30 	.word	0x20000c30
 8003654:	08015444 	.word	0x08015444
 8003658:	20000bcc 	.word	0x20000bcc
 800365c:	20000be0 	.word	0x20000be0
 8003660:	20000c48 	.word	0x20000c48
 8003664:	20000c4a 	.word	0x20000c4a
 8003668:	20000c4c 	.word	0x20000c4c
 800366c:	08015454 	.word	0x08015454
				printf("%d: t02 026\n", osKernelGetTickCount());
 8003670:	f008 fdf0 	bl	800c254 <osKernelGetTickCount>
 8003674:	4603      	mov	r3, r0
 8003676:	4619      	mov	r1, r3
 8003678:	489f      	ldr	r0, [pc, #636]	; (80038f8 <StartTask02+0x10c8>)
 800367a:	f00d fc07 	bl	8010e8c <iprintf>
				Tar_cmd_v_i=Tar_cmd_v_o=Tar_cmd_v_x;
 800367e:	4b9f      	ldr	r3, [pc, #636]	; (80038fc <StartTask02+0x10cc>)
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	499e      	ldr	r1, [pc, #632]	; (8003900 <StartTask02+0x10d0>)
 8003686:	e9c1 2300 	strd	r2, r3, [r1]
 800368a:	4b9d      	ldr	r3, [pc, #628]	; (8003900 <StartTask02+0x10d0>)
 800368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003690:	499c      	ldr	r1, [pc, #624]	; (8003904 <StartTask02+0x10d4>)
 8003692:	e9c1 2300 	strd	r2, r3, [r1]
				angle_rad_i=angle_rad_o=angle_rad_c=0;
 8003696:	499c      	ldr	r1, [pc, #624]	; (8003908 <StartTask02+0x10d8>)
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	e9c1 2300 	strd	r2, r3, [r1]
 80036a4:	4b98      	ldr	r3, [pc, #608]	; (8003908 <StartTask02+0x10d8>)
 80036a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036aa:	4998      	ldr	r1, [pc, #608]	; (800390c <StartTask02+0x10dc>)
 80036ac:	e9c1 2300 	strd	r2, r3, [r1]
 80036b0:	4b96      	ldr	r3, [pc, #600]	; (800390c <StartTask02+0x10dc>)
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	4996      	ldr	r1, [pc, #600]	; (8003910 <StartTask02+0x10e0>)
 80036b8:	e9c1 2300 	strd	r2, r3, [r1]

				Tar_cmd_FL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 80036bc:	4b91      	ldr	r3, [pc, #580]	; (8003904 <StartTask02+0x10d4>)
 80036be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036c2:	a38b      	add	r3, pc, #556	; (adr r3, 80038f0 <StartTask02+0x10c0>)
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	f7fc ff96 	bl	80005f8 <__aeabi_dmul>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4610      	mov	r0, r2
 80036d2:	4619      	mov	r1, r3
 80036d4:	f7fd fa40 	bl	8000b58 <__aeabi_d2iz>
 80036d8:	4603      	mov	r3, r0
 80036da:	b21a      	sxth	r2, r3
 80036dc:	4b8d      	ldr	r3, [pc, #564]	; (8003914 <StartTask02+0x10e4>)
 80036de:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 80036e0:	4b88      	ldr	r3, [pc, #544]	; (8003904 <StartTask02+0x10d4>)
 80036e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036e6:	a382      	add	r3, pc, #520	; (adr r3, 80038f0 <StartTask02+0x10c0>)
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f7fc ff84 	bl	80005f8 <__aeabi_dmul>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4610      	mov	r0, r2
 80036f6:	4619      	mov	r1, r3
 80036f8:	f7fd fa2e 	bl	8000b58 <__aeabi_d2iz>
 80036fc:	4603      	mov	r3, r0
 80036fe:	b21a      	sxth	r2, r3
 8003700:	4b85      	ldr	r3, [pc, #532]	; (8003918 <StartTask02+0x10e8>)
 8003702:	801a      	strh	r2, [r3, #0]
				Tar_cmd_FR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8003704:	4b7e      	ldr	r3, [pc, #504]	; (8003900 <StartTask02+0x10d0>)
 8003706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800370a:	a379      	add	r3, pc, #484	; (adr r3, 80038f0 <StartTask02+0x10c0>)
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f7fc ff72 	bl	80005f8 <__aeabi_dmul>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4610      	mov	r0, r2
 800371a:	4619      	mov	r1, r3
 800371c:	f7fd fa1c 	bl	8000b58 <__aeabi_d2iz>
 8003720:	4603      	mov	r3, r0
 8003722:	b21b      	sxth	r3, r3
 8003724:	b29b      	uxth	r3, r3
 8003726:	425b      	negs	r3, r3
 8003728:	b29b      	uxth	r3, r3
 800372a:	b21a      	sxth	r2, r3
 800372c:	4b7b      	ldr	r3, [pc, #492]	; (800391c <StartTask02+0x10ec>)
 800372e:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8003730:	4b73      	ldr	r3, [pc, #460]	; (8003900 <StartTask02+0x10d0>)
 8003732:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003736:	a36e      	add	r3, pc, #440	; (adr r3, 80038f0 <StartTask02+0x10c0>)
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f7fc ff5c 	bl	80005f8 <__aeabi_dmul>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4610      	mov	r0, r2
 8003746:	4619      	mov	r1, r3
 8003748:	f7fd fa06 	bl	8000b58 <__aeabi_d2iz>
 800374c:	4603      	mov	r3, r0
 800374e:	b21b      	sxth	r3, r3
 8003750:	b29b      	uxth	r3, r3
 8003752:	425b      	negs	r3, r3
 8003754:	b29b      	uxth	r3, r3
 8003756:	b21a      	sxth	r2, r3
 8003758:	4b71      	ldr	r3, [pc, #452]	; (8003920 <StartTask02+0x10f0>)
 800375a:	801a      	strh	r2, [r3, #0]
				printf("%d: t02 027\n", osKernelGetTickCount());
 800375c:	f008 fd7a 	bl	800c254 <osKernelGetTickCount>
 8003760:	4603      	mov	r3, r0
 8003762:	4619      	mov	r1, r3
 8003764:	486f      	ldr	r0, [pc, #444]	; (8003924 <StartTask02+0x10f4>)
 8003766:	f00d fb91 	bl	8010e8c <iprintf>
				Deg2Ste(Xbot_W,0, STMotorID1);
 800376a:	2200      	movs	r2, #0
 800376c:	2100      	movs	r1, #0
 800376e:	2001      	movs	r0, #1
 8003770:	f7fe fe9a 	bl	80024a8 <Deg2Ste>
				Deg2Ste(Xbot_W,0, STMotorID2);
 8003774:	2201      	movs	r2, #1
 8003776:	2100      	movs	r1, #0
 8003778:	2001      	movs	r0, #1
 800377a:	f7fe fe95 	bl	80024a8 <Deg2Ste>
				Deg2Ste(Xbot_W,0, STMotorID3);
 800377e:	2202      	movs	r2, #2
 8003780:	2100      	movs	r1, #0
 8003782:	2001      	movs	r0, #1
 8003784:	f7fe fe90 	bl	80024a8 <Deg2Ste>
				Deg2Ste(Xbot_W,0, STMotorID4);
 8003788:	2203      	movs	r2, #3
 800378a:	2100      	movs	r1, #0
 800378c:	2001      	movs	r0, #1
 800378e:	f7fe fe8b 	bl	80024a8 <Deg2Ste>
				printf("%d: t02 028\n", osKernelGetTickCount());
 8003792:	f008 fd5f 	bl	800c254 <osKernelGetTickCount>
 8003796:	4603      	mov	r3, r0
 8003798:	4619      	mov	r1, r3
 800379a:	4863      	ldr	r0, [pc, #396]	; (8003928 <StartTask02+0x10f8>)
 800379c:	f00d fb76 	bl	8010e8c <iprintf>
			}

			if((temp_w>0) && (temp_x>0)){
 80037a0:	4b62      	ldr	r3, [pc, #392]	; (800392c <StartTask02+0x10fc>)
 80037a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f340 80c8 	ble.w	800393c <StartTask02+0x110c>
 80037ac:	4b60      	ldr	r3, [pc, #384]	; (8003930 <StartTask02+0x1100>)
 80037ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f340 80c2 	ble.w	800393c <StartTask02+0x110c>
				printf("%d: t02 029\n", osKernelGetTickCount());
 80037b8:	f008 fd4c 	bl	800c254 <osKernelGetTickCount>
 80037bc:	4603      	mov	r3, r0
 80037be:	4619      	mov	r1, r3
 80037c0:	485c      	ldr	r0, [pc, #368]	; (8003934 <StartTask02+0x1104>)
 80037c2:	f00d fb63 	bl	8010e8c <iprintf>
				Tar_cmd_FL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 80037c6:	4b4f      	ldr	r3, [pc, #316]	; (8003904 <StartTask02+0x10d4>)
 80037c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037cc:	a348      	add	r3, pc, #288	; (adr r3, 80038f0 <StartTask02+0x10c0>)
 80037ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d2:	f7fc ff11 	bl	80005f8 <__aeabi_dmul>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	f7fd f9bb 	bl	8000b58 <__aeabi_d2iz>
 80037e2:	4603      	mov	r3, r0
 80037e4:	b21a      	sxth	r2, r3
 80037e6:	4b4b      	ldr	r3, [pc, #300]	; (8003914 <StartTask02+0x10e4>)
 80037e8:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 80037ea:	4b46      	ldr	r3, [pc, #280]	; (8003904 <StartTask02+0x10d4>)
 80037ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037f0:	a33f      	add	r3, pc, #252	; (adr r3, 80038f0 <StartTask02+0x10c0>)
 80037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f6:	f7fc feff 	bl	80005f8 <__aeabi_dmul>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	f7fd f9a9 	bl	8000b58 <__aeabi_d2iz>
 8003806:	4603      	mov	r3, r0
 8003808:	b21a      	sxth	r2, r3
 800380a:	4b43      	ldr	r3, [pc, #268]	; (8003918 <StartTask02+0x10e8>)
 800380c:	801a      	strh	r2, [r3, #0]
				Tar_cmd_FR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 800380e:	4b3c      	ldr	r3, [pc, #240]	; (8003900 <StartTask02+0x10d0>)
 8003810:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003814:	a336      	add	r3, pc, #216	; (adr r3, 80038f0 <StartTask02+0x10c0>)
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381a:	f7fc feed 	bl	80005f8 <__aeabi_dmul>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4610      	mov	r0, r2
 8003824:	4619      	mov	r1, r3
 8003826:	f7fd f997 	bl	8000b58 <__aeabi_d2iz>
 800382a:	4603      	mov	r3, r0
 800382c:	b21b      	sxth	r3, r3
 800382e:	b29b      	uxth	r3, r3
 8003830:	425b      	negs	r3, r3
 8003832:	b29b      	uxth	r3, r3
 8003834:	b21a      	sxth	r2, r3
 8003836:	4b39      	ldr	r3, [pc, #228]	; (800391c <StartTask02+0x10ec>)
 8003838:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 800383a:	4b31      	ldr	r3, [pc, #196]	; (8003900 <StartTask02+0x10d0>)
 800383c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003840:	a32b      	add	r3, pc, #172	; (adr r3, 80038f0 <StartTask02+0x10c0>)
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	f7fc fed7 	bl	80005f8 <__aeabi_dmul>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4610      	mov	r0, r2
 8003850:	4619      	mov	r1, r3
 8003852:	f7fd f981 	bl	8000b58 <__aeabi_d2iz>
 8003856:	4603      	mov	r3, r0
 8003858:	b21b      	sxth	r3, r3
 800385a:	b29b      	uxth	r3, r3
 800385c:	425b      	negs	r3, r3
 800385e:	b29b      	uxth	r3, r3
 8003860:	b21a      	sxth	r2, r3
 8003862:	4b2f      	ldr	r3, [pc, #188]	; (8003920 <StartTask02+0x10f0>)
 8003864:	801a      	strh	r2, [r3, #0]

				Deg2Ste(Xbot_W,rad2deg(angle_rad_o), STMotorID1);
 8003866:	4b29      	ldr	r3, [pc, #164]	; (800390c <StartTask02+0x10dc>)
 8003868:	ed93 7b00 	vldr	d7, [r3]
 800386c:	eeb0 0a47 	vmov.f32	s0, s14
 8003870:	eef0 0a67 	vmov.f32	s1, s15
 8003874:	f7fe fe5c 	bl	8002530 <rad2deg>
 8003878:	4603      	mov	r3, r0
 800387a:	2200      	movs	r2, #0
 800387c:	4619      	mov	r1, r3
 800387e:	2001      	movs	r0, #1
 8003880:	f7fe fe12 	bl	80024a8 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_i), STMotorID2);
 8003884:	4b22      	ldr	r3, [pc, #136]	; (8003910 <StartTask02+0x10e0>)
 8003886:	ed93 7b00 	vldr	d7, [r3]
 800388a:	eeb0 0a47 	vmov.f32	s0, s14
 800388e:	eef0 0a67 	vmov.f32	s1, s15
 8003892:	f7fe fe4d 	bl	8002530 <rad2deg>
 8003896:	4603      	mov	r3, r0
 8003898:	2201      	movs	r2, #1
 800389a:	4619      	mov	r1, r3
 800389c:	2001      	movs	r0, #1
 800389e:	f7fe fe03 	bl	80024a8 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_o), STMotorID3);
 80038a2:	4b1a      	ldr	r3, [pc, #104]	; (800390c <StartTask02+0x10dc>)
 80038a4:	ed93 7b00 	vldr	d7, [r3]
 80038a8:	eeb0 0a47 	vmov.f32	s0, s14
 80038ac:	eef0 0a67 	vmov.f32	s1, s15
 80038b0:	f7fe fe3e 	bl	8002530 <rad2deg>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2202      	movs	r2, #2
 80038b8:	4619      	mov	r1, r3
 80038ba:	2001      	movs	r0, #1
 80038bc:	f7fe fdf4 	bl	80024a8 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_i), STMotorID4);
 80038c0:	4b13      	ldr	r3, [pc, #76]	; (8003910 <StartTask02+0x10e0>)
 80038c2:	ed93 7b00 	vldr	d7, [r3]
 80038c6:	eeb0 0a47 	vmov.f32	s0, s14
 80038ca:	eef0 0a67 	vmov.f32	s1, s15
 80038ce:	f7fe fe2f 	bl	8002530 <rad2deg>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2203      	movs	r2, #3
 80038d6:	4619      	mov	r1, r3
 80038d8:	2001      	movs	r0, #1
 80038da:	f7fe fde5 	bl	80024a8 <Deg2Ste>
				printf("%d: t02 030\n", osKernelGetTickCount());
 80038de:	f008 fcb9 	bl	800c254 <osKernelGetTickCount>
 80038e2:	4603      	mov	r3, r0
 80038e4:	4619      	mov	r1, r3
 80038e6:	4814      	ldr	r0, [pc, #80]	; (8003938 <StartTask02+0x1108>)
 80038e8:	f00d fad0 	bl	8010e8c <iprintf>
 80038ec:	e24e      	b.n	8003d8c <StartTask02+0x155c>
 80038ee:	bf00      	nop
 80038f0:	cc196908 	.word	0xcc196908
 80038f4:	3fbc42f1 	.word	0x3fbc42f1
 80038f8:	0801548c 	.word	0x0801548c
 80038fc:	20000c20 	.word	0x20000c20
 8003900:	20000c30 	.word	0x20000c30
 8003904:	20000c28 	.word	0x20000c28
 8003908:	20000c08 	.word	0x20000c08
 800390c:	20000c18 	.word	0x20000c18
 8003910:	20000c10 	.word	0x20000c10
 8003914:	20000c70 	.word	0x20000c70
 8003918:	20000c74 	.word	0x20000c74
 800391c:	20000c72 	.word	0x20000c72
 8003920:	20000c76 	.word	0x20000c76
 8003924:	0801549c 	.word	0x0801549c
 8003928:	080154ac 	.word	0x080154ac
 800392c:	20000c4c 	.word	0x20000c4c
 8003930:	20000c48 	.word	0x20000c48
 8003934:	080154bc 	.word	0x080154bc
 8003938:	080154cc 	.word	0x080154cc

			}

			else if((temp_w<0) && (temp_x>0)){
 800393c:	4bb0      	ldr	r3, [pc, #704]	; (8003c00 <StartTask02+0x13d0>)
 800393e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f280 80a8 	bge.w	8003a98 <StartTask02+0x1268>
 8003948:	4bae      	ldr	r3, [pc, #696]	; (8003c04 <StartTask02+0x13d4>)
 800394a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f340 80a2 	ble.w	8003a98 <StartTask02+0x1268>
				printf("%d: t02 031\n", osKernelGetTickCount());
 8003954:	f008 fc7e 	bl	800c254 <osKernelGetTickCount>
 8003958:	4603      	mov	r3, r0
 800395a:	4619      	mov	r1, r3
 800395c:	48aa      	ldr	r0, [pc, #680]	; (8003c08 <StartTask02+0x13d8>)
 800395e:	f00d fa95 	bl	8010e8c <iprintf>
				Tar_cmd_FL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8003962:	4baa      	ldr	r3, [pc, #680]	; (8003c0c <StartTask02+0x13dc>)
 8003964:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003968:	a3a3      	add	r3, pc, #652	; (adr r3, 8003bf8 <StartTask02+0x13c8>)
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	f7fc fe43 	bl	80005f8 <__aeabi_dmul>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	f7fd f8ed 	bl	8000b58 <__aeabi_d2iz>
 800397e:	4603      	mov	r3, r0
 8003980:	b21a      	sxth	r2, r3
 8003982:	4ba3      	ldr	r3, [pc, #652]	; (8003c10 <StartTask02+0x13e0>)
 8003984:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8003986:	4ba1      	ldr	r3, [pc, #644]	; (8003c0c <StartTask02+0x13dc>)
 8003988:	e9d3 0100 	ldrd	r0, r1, [r3]
 800398c:	a39a      	add	r3, pc, #616	; (adr r3, 8003bf8 <StartTask02+0x13c8>)
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	f7fc fe31 	bl	80005f8 <__aeabi_dmul>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4610      	mov	r0, r2
 800399c:	4619      	mov	r1, r3
 800399e:	f7fd f8db 	bl	8000b58 <__aeabi_d2iz>
 80039a2:	4603      	mov	r3, r0
 80039a4:	b21a      	sxth	r2, r3
 80039a6:	4b9b      	ldr	r3, [pc, #620]	; (8003c14 <StartTask02+0x13e4>)
 80039a8:	801a      	strh	r2, [r3, #0]
				Tar_cmd_FR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 80039aa:	4b9b      	ldr	r3, [pc, #620]	; (8003c18 <StartTask02+0x13e8>)
 80039ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039b0:	a391      	add	r3, pc, #580	; (adr r3, 8003bf8 <StartTask02+0x13c8>)
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	f7fc fe1f 	bl	80005f8 <__aeabi_dmul>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4610      	mov	r0, r2
 80039c0:	4619      	mov	r1, r3
 80039c2:	f7fd f8c9 	bl	8000b58 <__aeabi_d2iz>
 80039c6:	4603      	mov	r3, r0
 80039c8:	b21b      	sxth	r3, r3
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	425b      	negs	r3, r3
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	b21a      	sxth	r2, r3
 80039d2:	4b92      	ldr	r3, [pc, #584]	; (8003c1c <StartTask02+0x13ec>)
 80039d4:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 80039d6:	4b90      	ldr	r3, [pc, #576]	; (8003c18 <StartTask02+0x13e8>)
 80039d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039dc:	a386      	add	r3, pc, #536	; (adr r3, 8003bf8 <StartTask02+0x13c8>)
 80039de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e2:	f7fc fe09 	bl	80005f8 <__aeabi_dmul>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	f7fd f8b3 	bl	8000b58 <__aeabi_d2iz>
 80039f2:	4603      	mov	r3, r0
 80039f4:	b21b      	sxth	r3, r3
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	425b      	negs	r3, r3
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	b21a      	sxth	r2, r3
 80039fe:	4b88      	ldr	r3, [pc, #544]	; (8003c20 <StartTask02+0x13f0>)
 8003a00:	801a      	strh	r2, [r3, #0]
				printf("%d: t02 032\n", osKernelGetTickCount());
 8003a02:	f008 fc27 	bl	800c254 <osKernelGetTickCount>
 8003a06:	4603      	mov	r3, r0
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4886      	ldr	r0, [pc, #536]	; (8003c24 <StartTask02+0x13f4>)
 8003a0c:	f00d fa3e 	bl	8010e8c <iprintf>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_i), STMotorID1);
 8003a10:	4b85      	ldr	r3, [pc, #532]	; (8003c28 <StartTask02+0x13f8>)
 8003a12:	ed93 7b00 	vldr	d7, [r3]
 8003a16:	eeb0 0a47 	vmov.f32	s0, s14
 8003a1a:	eef0 0a67 	vmov.f32	s1, s15
 8003a1e:	f7fe fd87 	bl	8002530 <rad2deg>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2200      	movs	r2, #0
 8003a26:	4619      	mov	r1, r3
 8003a28:	2001      	movs	r0, #1
 8003a2a:	f7fe fd3d 	bl	80024a8 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_o), STMotorID2);
 8003a2e:	4b7f      	ldr	r3, [pc, #508]	; (8003c2c <StartTask02+0x13fc>)
 8003a30:	ed93 7b00 	vldr	d7, [r3]
 8003a34:	eeb0 0a47 	vmov.f32	s0, s14
 8003a38:	eef0 0a67 	vmov.f32	s1, s15
 8003a3c:	f7fe fd78 	bl	8002530 <rad2deg>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2201      	movs	r2, #1
 8003a44:	4619      	mov	r1, r3
 8003a46:	2001      	movs	r0, #1
 8003a48:	f7fe fd2e 	bl	80024a8 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_i), STMotorID3);
 8003a4c:	4b76      	ldr	r3, [pc, #472]	; (8003c28 <StartTask02+0x13f8>)
 8003a4e:	ed93 7b00 	vldr	d7, [r3]
 8003a52:	eeb0 0a47 	vmov.f32	s0, s14
 8003a56:	eef0 0a67 	vmov.f32	s1, s15
 8003a5a:	f7fe fd69 	bl	8002530 <rad2deg>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2202      	movs	r2, #2
 8003a62:	4619      	mov	r1, r3
 8003a64:	2001      	movs	r0, #1
 8003a66:	f7fe fd1f 	bl	80024a8 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_o), STMotorID4);
 8003a6a:	4b70      	ldr	r3, [pc, #448]	; (8003c2c <StartTask02+0x13fc>)
 8003a6c:	ed93 7b00 	vldr	d7, [r3]
 8003a70:	eeb0 0a47 	vmov.f32	s0, s14
 8003a74:	eef0 0a67 	vmov.f32	s1, s15
 8003a78:	f7fe fd5a 	bl	8002530 <rad2deg>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2203      	movs	r2, #3
 8003a80:	4619      	mov	r1, r3
 8003a82:	2001      	movs	r0, #1
 8003a84:	f7fe fd10 	bl	80024a8 <Deg2Ste>
				printf("%d: t02 033\n", osKernelGetTickCount());
 8003a88:	f008 fbe4 	bl	800c254 <osKernelGetTickCount>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4867      	ldr	r0, [pc, #412]	; (8003c30 <StartTask02+0x1400>)
 8003a92:	f00d f9fb 	bl	8010e8c <iprintf>
 8003a96:	e179      	b.n	8003d8c <StartTask02+0x155c>
			}

			else if((temp_w>0) && (temp_x<0)){
 8003a98:	4b59      	ldr	r3, [pc, #356]	; (8003c00 <StartTask02+0x13d0>)
 8003a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f340 80ce 	ble.w	8003c40 <StartTask02+0x1410>
 8003aa4:	4b57      	ldr	r3, [pc, #348]	; (8003c04 <StartTask02+0x13d4>)
 8003aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f280 80c8 	bge.w	8003c40 <StartTask02+0x1410>
				printf("%d: t02 034\n", osKernelGetTickCount());
 8003ab0:	f008 fbd0 	bl	800c254 <osKernelGetTickCount>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	485e      	ldr	r0, [pc, #376]	; (8003c34 <StartTask02+0x1404>)
 8003aba:	f00d f9e7 	bl	8010e8c <iprintf>
				Tar_cmd_FL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8003abe:	4b53      	ldr	r3, [pc, #332]	; (8003c0c <StartTask02+0x13dc>)
 8003ac0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ac4:	a34c      	add	r3, pc, #304	; (adr r3, 8003bf8 <StartTask02+0x13c8>)
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	f7fc fd95 	bl	80005f8 <__aeabi_dmul>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f7fd f83f 	bl	8000b58 <__aeabi_d2iz>
 8003ada:	4603      	mov	r3, r0
 8003adc:	b21a      	sxth	r2, r3
 8003ade:	4b4c      	ldr	r3, [pc, #304]	; (8003c10 <StartTask02+0x13e0>)
 8003ae0:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	; (8003c0c <StartTask02+0x13dc>)
 8003ae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ae8:	a343      	add	r3, pc, #268	; (adr r3, 8003bf8 <StartTask02+0x13c8>)
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	f7fc fd83 	bl	80005f8 <__aeabi_dmul>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	f7fd f82d 	bl	8000b58 <__aeabi_d2iz>
 8003afe:	4603      	mov	r3, r0
 8003b00:	b21a      	sxth	r2, r3
 8003b02:	4b44      	ldr	r3, [pc, #272]	; (8003c14 <StartTask02+0x13e4>)
 8003b04:	801a      	strh	r2, [r3, #0]
				Tar_cmd_FR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 8003b06:	4b44      	ldr	r3, [pc, #272]	; (8003c18 <StartTask02+0x13e8>)
 8003b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b0c:	a33a      	add	r3, pc, #232	; (adr r3, 8003bf8 <StartTask02+0x13c8>)
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	f7fc fd71 	bl	80005f8 <__aeabi_dmul>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f7fd f81b 	bl	8000b58 <__aeabi_d2iz>
 8003b22:	4603      	mov	r3, r0
 8003b24:	b21b      	sxth	r3, r3
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	425b      	negs	r3, r3
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	b21a      	sxth	r2, r3
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <StartTask02+0x13ec>)
 8003b30:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 8003b32:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <StartTask02+0x13e8>)
 8003b34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b38:	a32f      	add	r3, pc, #188	; (adr r3, 8003bf8 <StartTask02+0x13c8>)
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f7fc fd5b 	bl	80005f8 <__aeabi_dmul>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4610      	mov	r0, r2
 8003b48:	4619      	mov	r1, r3
 8003b4a:	f7fd f805 	bl	8000b58 <__aeabi_d2iz>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	b21b      	sxth	r3, r3
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	425b      	negs	r3, r3
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	b21a      	sxth	r2, r3
 8003b5a:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <StartTask02+0x13f0>)
 8003b5c:	801a      	strh	r2, [r3, #0]
				printf("%d: t02 035\n", osKernelGetTickCount());
 8003b5e:	f008 fb79 	bl	800c254 <osKernelGetTickCount>
 8003b62:	4603      	mov	r3, r0
 8003b64:	4619      	mov	r1, r3
 8003b66:	4834      	ldr	r0, [pc, #208]	; (8003c38 <StartTask02+0x1408>)
 8003b68:	f00d f990 	bl	8010e8c <iprintf>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_i), STMotorID1);
 8003b6c:	4b2e      	ldr	r3, [pc, #184]	; (8003c28 <StartTask02+0x13f8>)
 8003b6e:	ed93 7b00 	vldr	d7, [r3]
 8003b72:	eeb0 0a47 	vmov.f32	s0, s14
 8003b76:	eef0 0a67 	vmov.f32	s1, s15
 8003b7a:	f7fe fcd9 	bl	8002530 <rad2deg>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2200      	movs	r2, #0
 8003b82:	4619      	mov	r1, r3
 8003b84:	2001      	movs	r0, #1
 8003b86:	f7fe fc8f 	bl	80024a8 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_o), STMotorID2);
 8003b8a:	4b28      	ldr	r3, [pc, #160]	; (8003c2c <StartTask02+0x13fc>)
 8003b8c:	ed93 7b00 	vldr	d7, [r3]
 8003b90:	eeb0 0a47 	vmov.f32	s0, s14
 8003b94:	eef0 0a67 	vmov.f32	s1, s15
 8003b98:	f7fe fcca 	bl	8002530 <rad2deg>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	f7fe fc80 	bl	80024a8 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_i), STMotorID3);
 8003ba8:	4b1f      	ldr	r3, [pc, #124]	; (8003c28 <StartTask02+0x13f8>)
 8003baa:	ed93 7b00 	vldr	d7, [r3]
 8003bae:	eeb0 0a47 	vmov.f32	s0, s14
 8003bb2:	eef0 0a67 	vmov.f32	s1, s15
 8003bb6:	f7fe fcbb 	bl	8002530 <rad2deg>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f7fe fc71 	bl	80024a8 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_o), STMotorID4);
 8003bc6:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <StartTask02+0x13fc>)
 8003bc8:	ed93 7b00 	vldr	d7, [r3]
 8003bcc:	eeb0 0a47 	vmov.f32	s0, s14
 8003bd0:	eef0 0a67 	vmov.f32	s1, s15
 8003bd4:	f7fe fcac 	bl	8002530 <rad2deg>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2203      	movs	r2, #3
 8003bdc:	4619      	mov	r1, r3
 8003bde:	2001      	movs	r0, #1
 8003be0:	f7fe fc62 	bl	80024a8 <Deg2Ste>
				printf("%d: t02 036\n", osKernelGetTickCount());
 8003be4:	f008 fb36 	bl	800c254 <osKernelGetTickCount>
 8003be8:	4603      	mov	r3, r0
 8003bea:	4619      	mov	r1, r3
 8003bec:	4813      	ldr	r0, [pc, #76]	; (8003c3c <StartTask02+0x140c>)
 8003bee:	f00d f94d 	bl	8010e8c <iprintf>
 8003bf2:	e0cb      	b.n	8003d8c <StartTask02+0x155c>
 8003bf4:	f3af 8000 	nop.w
 8003bf8:	cc196908 	.word	0xcc196908
 8003bfc:	3fbc42f1 	.word	0x3fbc42f1
 8003c00:	20000c4c 	.word	0x20000c4c
 8003c04:	20000c48 	.word	0x20000c48
 8003c08:	080154dc 	.word	0x080154dc
 8003c0c:	20000c30 	.word	0x20000c30
 8003c10:	20000c70 	.word	0x20000c70
 8003c14:	20000c74 	.word	0x20000c74
 8003c18:	20000c28 	.word	0x20000c28
 8003c1c:	20000c72 	.word	0x20000c72
 8003c20:	20000c76 	.word	0x20000c76
 8003c24:	080154ec 	.word	0x080154ec
 8003c28:	20000c10 	.word	0x20000c10
 8003c2c:	20000c18 	.word	0x20000c18
 8003c30:	080154fc 	.word	0x080154fc
 8003c34:	0801550c 	.word	0x0801550c
 8003c38:	0801551c 	.word	0x0801551c
 8003c3c:	0801552c 	.word	0x0801552c
			}

			else if((temp_w<0) && (temp_x<0)){
 8003c40:	4bb9      	ldr	r3, [pc, #740]	; (8003f28 <StartTask02+0x16f8>)
 8003c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f280 80a0 	bge.w	8003d8c <StartTask02+0x155c>
 8003c4c:	4bb7      	ldr	r3, [pc, #732]	; (8003f2c <StartTask02+0x16fc>)
 8003c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f280 809a 	bge.w	8003d8c <StartTask02+0x155c>
				printf("%d: t02 037\n", osKernelGetTickCount());
 8003c58:	f008 fafc 	bl	800c254 <osKernelGetTickCount>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	4619      	mov	r1, r3
 8003c60:	48b3      	ldr	r0, [pc, #716]	; (8003f30 <StartTask02+0x1700>)
 8003c62:	f00d f913 	bl	8010e8c <iprintf>
				Tar_cmd_FL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 8003c66:	4bb3      	ldr	r3, [pc, #716]	; (8003f34 <StartTask02+0x1704>)
 8003c68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c6c:	a3ac      	add	r3, pc, #688	; (adr r3, 8003f20 <StartTask02+0x16f0>)
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	f7fc fcc1 	bl	80005f8 <__aeabi_dmul>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f7fc ff6b 	bl	8000b58 <__aeabi_d2iz>
 8003c82:	4603      	mov	r3, r0
 8003c84:	b21a      	sxth	r2, r3
 8003c86:	4bac      	ldr	r3, [pc, #688]	; (8003f38 <StartTask02+0x1708>)
 8003c88:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RL = (int16_t)(C_60xINv2PIR * Tar_cmd_v_i);
 8003c8a:	4baa      	ldr	r3, [pc, #680]	; (8003f34 <StartTask02+0x1704>)
 8003c8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c90:	a3a3      	add	r3, pc, #652	; (adr r3, 8003f20 <StartTask02+0x16f0>)
 8003c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c96:	f7fc fcaf 	bl	80005f8 <__aeabi_dmul>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f7fc ff59 	bl	8000b58 <__aeabi_d2iz>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	b21a      	sxth	r2, r3
 8003caa:	4ba4      	ldr	r3, [pc, #656]	; (8003f3c <StartTask02+0x170c>)
 8003cac:	801a      	strh	r2, [r3, #0]
				Tar_cmd_FR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8003cae:	4ba4      	ldr	r3, [pc, #656]	; (8003f40 <StartTask02+0x1710>)
 8003cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cb4:	a39a      	add	r3, pc, #616	; (adr r3, 8003f20 <StartTask02+0x16f0>)
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f7fc fc9d 	bl	80005f8 <__aeabi_dmul>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f7fc ff47 	bl	8000b58 <__aeabi_d2iz>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	b21b      	sxth	r3, r3
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	425b      	negs	r3, r3
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	b21a      	sxth	r2, r3
 8003cd6:	4b9b      	ldr	r3, [pc, #620]	; (8003f44 <StartTask02+0x1714>)
 8003cd8:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RR = -(int16_t)(C_60xINv2PIR * Tar_cmd_v_o);
 8003cda:	4b99      	ldr	r3, [pc, #612]	; (8003f40 <StartTask02+0x1710>)
 8003cdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ce0:	a38f      	add	r3, pc, #572	; (adr r3, 8003f20 <StartTask02+0x16f0>)
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	f7fc fc87 	bl	80005f8 <__aeabi_dmul>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	f7fc ff31 	bl	8000b58 <__aeabi_d2iz>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	b21b      	sxth	r3, r3
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	425b      	negs	r3, r3
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	b21a      	sxth	r2, r3
 8003d02:	4b91      	ldr	r3, [pc, #580]	; (8003f48 <StartTask02+0x1718>)
 8003d04:	801a      	strh	r2, [r3, #0]

				Deg2Ste(Xbot_W,rad2deg(angle_rad_o), STMotorID1);
 8003d06:	4b91      	ldr	r3, [pc, #580]	; (8003f4c <StartTask02+0x171c>)
 8003d08:	ed93 7b00 	vldr	d7, [r3]
 8003d0c:	eeb0 0a47 	vmov.f32	s0, s14
 8003d10:	eef0 0a67 	vmov.f32	s1, s15
 8003d14:	f7fe fc0c 	bl	8002530 <rad2deg>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	2001      	movs	r0, #1
 8003d20:	f7fe fbc2 	bl	80024a8 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_i), STMotorID2);
 8003d24:	4b8a      	ldr	r3, [pc, #552]	; (8003f50 <StartTask02+0x1720>)
 8003d26:	ed93 7b00 	vldr	d7, [r3]
 8003d2a:	eeb0 0a47 	vmov.f32	s0, s14
 8003d2e:	eef0 0a67 	vmov.f32	s1, s15
 8003d32:	f7fe fbfd 	bl	8002530 <rad2deg>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2201      	movs	r2, #1
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	f7fe fbb3 	bl	80024a8 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_o), STMotorID3);
 8003d42:	4b82      	ldr	r3, [pc, #520]	; (8003f4c <StartTask02+0x171c>)
 8003d44:	ed93 7b00 	vldr	d7, [r3]
 8003d48:	eeb0 0a47 	vmov.f32	s0, s14
 8003d4c:	eef0 0a67 	vmov.f32	s1, s15
 8003d50:	f7fe fbee 	bl	8002530 <rad2deg>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2202      	movs	r2, #2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	f7fe fba4 	bl	80024a8 <Deg2Ste>
				Deg2Ste(Xbot_W,rad2deg(angle_rad_i), STMotorID4);
 8003d60:	4b7b      	ldr	r3, [pc, #492]	; (8003f50 <StartTask02+0x1720>)
 8003d62:	ed93 7b00 	vldr	d7, [r3]
 8003d66:	eeb0 0a47 	vmov.f32	s0, s14
 8003d6a:	eef0 0a67 	vmov.f32	s1, s15
 8003d6e:	f7fe fbdf 	bl	8002530 <rad2deg>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2203      	movs	r2, #3
 8003d76:	4619      	mov	r1, r3
 8003d78:	2001      	movs	r0, #1
 8003d7a:	f7fe fb95 	bl	80024a8 <Deg2Ste>
				printf("%d: t02 038\n", osKernelGetTickCount());
 8003d7e:	f008 fa69 	bl	800c254 <osKernelGetTickCount>
 8003d82:	4603      	mov	r3, r0
 8003d84:	4619      	mov	r1, r3
 8003d86:	4873      	ldr	r0, [pc, #460]	; (8003f54 <StartTask02+0x1724>)
 8003d88:	f00d f880 	bl	8010e8c <iprintf>
			}

			ModeABCD = 2;//B mode
 8003d8c:	4b72      	ldr	r3, [pc, #456]	; (8003f58 <StartTask02+0x1728>)
 8003d8e:	2202      	movs	r2, #2
 8003d90:	701a      	strb	r2, [r3, #0]
		}


		Cal_Real_cmd();
 8003d92:	f7fd fcd9 	bl	8001748 <Cal_Real_cmd>
		printf("%d: t02 039\n", osKernelGetTickCount());
 8003d96:	f008 fa5d 	bl	800c254 <osKernelGetTickCount>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	486f      	ldr	r0, [pc, #444]	; (8003f5c <StartTask02+0x172c>)
 8003da0:	f00d f874 	bl	8010e8c <iprintf>
	}

	if(((temp_x==0) && (temp_y==0) && (temp_w==0))  ||  (Stopflagcheck(Xbot_R, 1)==0))
 8003da4:	4b61      	ldr	r3, [pc, #388]	; (8003f2c <StartTask02+0x16fc>)
 8003da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <StartTask02+0x1592>
 8003dae:	4b6c      	ldr	r3, [pc, #432]	; (8003f60 <StartTask02+0x1730>)
 8003db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d104      	bne.n	8003dc2 <StartTask02+0x1592>
 8003db8:	4b5b      	ldr	r3, [pc, #364]	; (8003f28 <StartTask02+0x16f8>)
 8003dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d006      	beq.n	8003dd0 <StartTask02+0x15a0>
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	f7fe fb27 	bl	8002418 <Stopflagcheck>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d12e      	bne.n	8003e2e <StartTask02+0x15fe>
	{
		printf("%d: t02 040\n", osKernelGetTickCount());
 8003dd0:	f008 fa40 	bl	800c254 <osKernelGetTickCount>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4862      	ldr	r0, [pc, #392]	; (8003f64 <StartTask02+0x1734>)
 8003dda:	f00d f857 	bl	8010e8c <iprintf>
		ModeABCD = 4;//temp
 8003dde:	4b5e      	ldr	r3, [pc, #376]	; (8003f58 <StartTask02+0x1728>)
 8003de0:	2204      	movs	r2, #4
 8003de2:	701a      	strb	r2, [r3, #0]
		Pre_ModeABCD = 4;//temp
 8003de4:	4b60      	ldr	r3, [pc, #384]	; (8003f68 <StartTask02+0x1738>)
 8003de6:	2204      	movs	r2, #4
 8003de8:	701a      	strb	r2, [r3, #0]
		Tar_cmd_RR = Tar_cmd_RL = Tar_cmd_FR = Tar_cmd_FL=0;
 8003dea:	4b53      	ldr	r3, [pc, #332]	; (8003f38 <StartTask02+0x1708>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	801a      	strh	r2, [r3, #0]
 8003df0:	4b51      	ldr	r3, [pc, #324]	; (8003f38 <StartTask02+0x1708>)
 8003df2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003df6:	4b53      	ldr	r3, [pc, #332]	; (8003f44 <StartTask02+0x1714>)
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	4b52      	ldr	r3, [pc, #328]	; (8003f44 <StartTask02+0x1714>)
 8003dfc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003e00:	4b4e      	ldr	r3, [pc, #312]	; (8003f3c <StartTask02+0x170c>)
 8003e02:	801a      	strh	r2, [r3, #0]
 8003e04:	4b4d      	ldr	r3, [pc, #308]	; (8003f3c <StartTask02+0x170c>)
 8003e06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003e0a:	4b4f      	ldr	r3, [pc, #316]	; (8003f48 <StartTask02+0x1718>)
 8003e0c:	801a      	strh	r2, [r3, #0]

		//for(int i=0;i<4;i++){Deg2Ste(Xbot_W,rad2deg(ANGLE_VEL), i);}
		printf("%d: t02 041\n", osKernelGetTickCount());
 8003e0e:	f008 fa21 	bl	800c254 <osKernelGetTickCount>
 8003e12:	4603      	mov	r3, r0
 8003e14:	4619      	mov	r1, r3
 8003e16:	4855      	ldr	r0, [pc, #340]	; (8003f6c <StartTask02+0x173c>)
 8003e18:	f00d f838 	bl	8010e8c <iprintf>
		Cal_Real_cmd();
 8003e1c:	f7fd fc94 	bl	8001748 <Cal_Real_cmd>
		printf("%d: t02 042\n", osKernelGetTickCount());
 8003e20:	f008 fa18 	bl	800c254 <osKernelGetTickCount>
 8003e24:	4603      	mov	r3, r0
 8003e26:	4619      	mov	r1, r3
 8003e28:	4851      	ldr	r0, [pc, #324]	; (8003f70 <StartTask02+0x1740>)
 8003e2a:	f00d f82f 	bl	8010e8c <iprintf>
	}


	sendcanbuf[7] = VERSION_MINOR;
 8003e2e:	4b51      	ldr	r3, [pc, #324]	; (8003f74 <StartTask02+0x1744>)
 8003e30:	2203      	movs	r2, #3
 8003e32:	71da      	strb	r2, [r3, #7]
	sendcanbuf[6] = VERSION_MAJOR;
 8003e34:	4b4f      	ldr	r3, [pc, #316]	; (8003f74 <StartTask02+0x1744>)
 8003e36:	2202      	movs	r2, #2
 8003e38:	719a      	strb	r2, [r3, #6]
	printf("%d:send angle  %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 8003e3a:	f008 fa0b 	bl	800c254 <osKernelGetTickCount>
 8003e3e:	4682      	mov	sl, r0
						SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003e40:	4b4d      	ldr	r3, [pc, #308]	; (8003f78 <StartTask02+0x1748>)
 8003e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e46:	461a      	mov	r2, r3
	printf("%d:send angle  %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 8003e48:	2364      	movs	r3, #100	; 0x64
 8003e4a:	fb03 f902 	mul.w	r9, r3, r2
						SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003e4e:	4b4a      	ldr	r3, [pc, #296]	; (8003f78 <StartTask02+0x1748>)
 8003e50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e54:	461a      	mov	r2, r3
	printf("%d:send angle  %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 8003e56:	2364      	movs	r3, #100	; 0x64
 8003e58:	fb03 f802 	mul.w	r8, r3, r2
						SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003e5c:	4b46      	ldr	r3, [pc, #280]	; (8003f78 <StartTask02+0x1748>)
 8003e5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e62:	461a      	mov	r2, r3
	printf("%d:send angle  %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 8003e64:	2364      	movs	r3, #100	; 0x64
 8003e66:	fb03 f302 	mul.w	r3, r3, r2
 8003e6a:	63bb      	str	r3, [r7, #56]	; 0x38
						SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003e6c:	4b42      	ldr	r3, [pc, #264]	; (8003f78 <StartTask02+0x1748>)
 8003e6e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e72:	461a      	mov	r2, r3
	printf("%d:send angle  %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 8003e74:	2364      	movs	r3, #100	; 0x64
 8003e76:	fb03 f202 	mul.w	r2, r3, r2
 8003e7a:	60fa      	str	r2, [r7, #12]
						SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003e7c:	4b34      	ldr	r3, [pc, #208]	; (8003f50 <StartTask02+0x1720>)
 8003e7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	4b3d      	ldr	r3, [pc, #244]	; (8003f7c <StartTask02+0x174c>)
 8003e88:	f7fc fbb6 	bl	80005f8 <__aeabi_dmul>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
	printf("%d:send angle  %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 8003e90:	4610      	mov	r0, r2
 8003e92:	4619      	mov	r1, r3
 8003e94:	f7fc fe60 	bl	8000b58 <__aeabi_d2iz>
 8003e98:	60b8      	str	r0, [r7, #8]
						SteDeg[0]*100, SteDeg[1]*100, SteDeg[2]*100, SteDeg[3]*100, (int)(angle_rad_i*1000), (int)(angle_rad_o*1000),
 8003e9a:	4b2c      	ldr	r3, [pc, #176]	; (8003f4c <StartTask02+0x171c>)
 8003e9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	4b35      	ldr	r3, [pc, #212]	; (8003f7c <StartTask02+0x174c>)
 8003ea6:	f7fc fba7 	bl	80005f8 <__aeabi_dmul>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
	printf("%d:send angle  %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),
 8003eae:	4610      	mov	r0, r2
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f7fc fe51 	bl	8000b58 <__aeabi_d2iz>
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <StartTask02+0x1750>)
 8003eba:	6819      	ldr	r1, [r3, #0]
 8003ebc:	6039      	str	r1, [r7, #0]
 8003ebe:	4b30      	ldr	r3, [pc, #192]	; (8003f80 <StartTask02+0x1750>)
 8003ec0:	685d      	ldr	r5, [r3, #4]
 8003ec2:	4b2f      	ldr	r3, [pc, #188]	; (8003f80 <StartTask02+0x1750>)
 8003ec4:	689c      	ldr	r4, [r3, #8]
 8003ec6:	4b2e      	ldr	r3, [pc, #184]	; (8003f80 <StartTask02+0x1750>)
 8003ec8:	68d8      	ldr	r0, [r3, #12]
 8003eca:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <StartTask02+0x16fc>)
 8003ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ed0:	461e      	mov	r6, r3
 8003ed2:	4b23      	ldr	r3, [pc, #140]	; (8003f60 <StartTask02+0x1730>)
 8003ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <StartTask02+0x16f8>)
 8003edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4b28      	ldr	r3, [pc, #160]	; (8003f84 <StartTask02+0x1754>)
 8003ee4:	f993 3000 	ldrsb.w	r3, [r3]
 8003ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003eea:	920a      	str	r2, [sp, #40]	; 0x28
 8003eec:	9109      	str	r1, [sp, #36]	; 0x24
 8003eee:	9608      	str	r6, [sp, #32]
 8003ef0:	9007      	str	r0, [sp, #28]
 8003ef2:	9406      	str	r4, [sp, #24]
 8003ef4:	9505      	str	r5, [sp, #20]
 8003ef6:	6839      	ldr	r1, [r7, #0]
 8003ef8:	9104      	str	r1, [sp, #16]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	9103      	str	r1, [sp, #12]
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	9102      	str	r1, [sp, #8]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	9201      	str	r2, [sp, #4]
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	4643      	mov	r3, r8
 8003f0c:	464a      	mov	r2, r9
 8003f0e:	4651      	mov	r1, sl
 8003f10:	481d      	ldr	r0, [pc, #116]	; (8003f88 <StartTask02+0x1758>)
 8003f12:	f00c ffbb 	bl	8010e8c <iprintf>
  {
 8003f16:	f7fe bd46 	b.w	80029a6 <StartTask02+0x176>
 8003f1a:	bf00      	nop
 8003f1c:	f3af 8000 	nop.w
 8003f20:	cc196908 	.word	0xcc196908
 8003f24:	3fbc42f1 	.word	0x3fbc42f1
 8003f28:	20000c4c 	.word	0x20000c4c
 8003f2c:	20000c48 	.word	0x20000c48
 8003f30:	0801553c 	.word	0x0801553c
 8003f34:	20000c28 	.word	0x20000c28
 8003f38:	20000c70 	.word	0x20000c70
 8003f3c:	20000c74 	.word	0x20000c74
 8003f40:	20000c30 	.word	0x20000c30
 8003f44:	20000c72 	.word	0x20000c72
 8003f48:	20000c76 	.word	0x20000c76
 8003f4c:	20000c18 	.word	0x20000c18
 8003f50:	20000c10 	.word	0x20000c10
 8003f54:	0801554c 	.word	0x0801554c
 8003f58:	2000005c 	.word	0x2000005c
 8003f5c:	0801555c 	.word	0x0801555c
 8003f60:	20000c4a 	.word	0x20000c4a
 8003f64:	0801556c 	.word	0x0801556c
 8003f68:	20000bd4 	.word	0x20000bd4
 8003f6c:	0801557c 	.word	0x0801557c
 8003f70:	0801558c 	.word	0x0801558c
 8003f74:	20000c80 	.word	0x20000c80
 8003f78:	20000bcc 	.word	0x20000bcc
 8003f7c:	408f4000 	.word	0x408f4000
 8003f80:	20000be0 	.word	0x20000be0
 8003f84:	20000c4e 	.word	0x20000c4e
 8003f88:	0801559c 	.word	0x0801559c

08003f8c <StartTask03>:
* @retval None
*/

/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8003f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f8e:	b0a1      	sub	sp, #132	; 0x84
 8003f90:	af06      	add	r7, sp, #24
 8003f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	uint32_t lastTime;
	uint8_t Dir_Rot = 0; //direction of rotation
 8003f94:	2300      	movs	r3, #0
 8003f96:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	uint8_t FT_flag = 0; //FineTuning_flag
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t send_flag = 0; //FineTuning_flag
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	uint8_t set_flag = 0; //FineTuning_flag
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60

	int32_t angle = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t pre_angle = 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t speed_angle = 0;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	623b      	str	r3, [r7, #32]

	int16_t pre_SteDeg[4] = {0,};	//steering degree unit=0.01 degree
 8003fb8:	f107 0318 	add.w	r3, r7, #24
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	605a      	str	r2, [r3, #4]
	int16_t start_SteDeg[4] = {0,};
 8003fc2:	f107 0310 	add.w	r3, r7, #16
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	605a      	str	r2, [r3, #4]
	int16_t end_SteDeg[4] = {0,};
 8003fcc:	f107 0308 	add.w	r3, r7, #8
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	605a      	str	r2, [r3, #4]
//	char buf[48]={	 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,		//1 front right
//					13, 14, 15, 16, 17, 18, 19, 20, 21, 22,	23, 24,		//2 front left
//					25, 26, 27, 28, 29, 30, 31, 32,	33, 34, 35, 36,		//3 rear right
//					37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48	};	//4 rear left

	osDelay(1000);
 8003fd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fda:	f008 fad3 	bl	800c584 <osDelay>
	GPIO_enableirq();
 8003fde:	f001 fc03 	bl	80057e8 <GPIO_enableirq>
	osDelay(100);
 8003fe2:	2064      	movs	r0, #100	; 0x64
 8003fe4:	f008 face 	bl	800c584 <osDelay>
	osThreadFlagsSet(IRQ_PSxHandle, 1);
 8003fe8:	4b98      	ldr	r3, [pc, #608]	; (800424c <StartTask03+0x2c0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2101      	movs	r1, #1
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f008 f9d8 	bl	800c3a4 <osThreadFlagsSet>

	for(int i=0;i<4;i++){
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ff8:	e058      	b.n	80040ac <StartTask03+0x120>
		if(HAL_GPIO_ReadPin(GPIOA, ((1<<i)<<4))){//GPIO_PIN_4                 ((uint16_t)0x0010)  /* Pin 4 selected    */
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	b29b      	uxth	r3, r3
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	b29b      	uxth	r3, r3
 8004008:	4619      	mov	r1, r3
 800400a:	4891      	ldr	r0, [pc, #580]	; (8004250 <StartTask03+0x2c4>)
 800400c:	f004 fbb2 	bl	8008774 <HAL_GPIO_ReadPin>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d018      	beq.n	8004048 <StartTask03+0xbc>
			if((i==STMotorID2) || (i==STMotorID3)) 	{Dir_Rot = SERVO_CW;}
 8004016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004018:	2b01      	cmp	r3, #1
 800401a:	d002      	beq.n	8004022 <StartTask03+0x96>
 800401c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800401e:	2b02      	cmp	r3, #2
 8004020:	d103      	bne.n	800402a <StartTask03+0x9e>
 8004022:	2300      	movs	r3, #0
 8004024:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8004028:	e026      	b.n	8004078 <StartTask03+0xec>
			else					{Dir_Rot = SERVO_CCW;FT_flag |= (1<<i);}
 800402a:	2301      	movs	r3, #1
 800402c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8004030:	2201      	movs	r2, #1
 8004032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	b25a      	sxtb	r2, r3
 800403a:	f997 3062 	ldrsb.w	r3, [r7, #98]	; 0x62
 800403e:	4313      	orrs	r3, r2
 8004040:	b25b      	sxtb	r3, r3
 8004042:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8004046:	e017      	b.n	8004078 <StartTask03+0xec>
		}
		else {
			if((i==STMotorID2) || (i==STMotorID3))	{Dir_Rot = SERVO_CCW;FT_flag |= (1<<i);}
 8004048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800404a:	2b01      	cmp	r3, #1
 800404c:	d002      	beq.n	8004054 <StartTask03+0xc8>
 800404e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004050:	2b02      	cmp	r3, #2
 8004052:	d10e      	bne.n	8004072 <StartTask03+0xe6>
 8004054:	2301      	movs	r3, #1
 8004056:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800405a:	2201      	movs	r2, #1
 800405c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	b25a      	sxtb	r2, r3
 8004064:	f997 3062 	ldrsb.w	r3, [r7, #98]	; 0x62
 8004068:	4313      	orrs	r3, r2
 800406a:	b25b      	sxtb	r3, r3
 800406c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8004070:	e002      	b.n	8004078 <StartTask03+0xec>
			else					{Dir_Rot = SERVO_CW;}
 8004072:	2300      	movs	r3, #0
 8004074:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
		}
		DataSetSteering(buf, i, Dir_Rot, RPM_1, SERVO_INIT, INIT_SPEED);// i= STMotorIDx, x=1~4
 8004078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800407a:	b2d9      	uxtb	r1, r3
 800407c:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8004080:	231e      	movs	r3, #30
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	2301      	movs	r3, #1
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	2314      	movs	r3, #20
 800408a:	4872      	ldr	r0, [pc, #456]	; (8004254 <StartTask03+0x2c8>)
 800408c:	f001 fdc0 	bl	8005c10 <DataSetSteering>
		printf("PS_SIG1_Pin ccw init. %d %x\n", FT_flag, ((1<<i)<<4));
 8004090:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 8004094:	2201      	movs	r2, #1
 8004096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	461a      	mov	r2, r3
 80040a0:	486d      	ldr	r0, [pc, #436]	; (8004258 <StartTask03+0x2cc>)
 80040a2:	f00c fef3 	bl	8010e8c <iprintf>
	for(int i=0;i<4;i++){
 80040a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a8:	3301      	adds	r3, #1
 80040aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	dda3      	ble.n	8003ffa <StartTask03+0x6e>
	}

	osDelay(1000);
 80040b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040b6:	f008 fa65 	bl	800c584 <osDelay>

	for(int i=0;i<40;i++){
 80040ba:	2300      	movs	r3, #0
 80040bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80040be:	e020      	b.n	8004102 <StartTask03+0x176>
		osDelay(200);
 80040c0:	20c8      	movs	r0, #200	; 0xc8
 80040c2:	f008 fa5f 	bl	800c584 <osDelay>
		ServoMotor_writeDMA(buf);//servo init. must done init within 500*20ms
 80040c6:	4863      	ldr	r0, [pc, #396]	; (8004254 <StartTask03+0x2c8>)
 80040c8:	f001 fd7c 	bl	8005bc4 <ServoMotor_writeDMA>
		printf("%d ", i);
 80040cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040ce:	4863      	ldr	r0, [pc, #396]	; (800425c <StartTask03+0x2d0>)
 80040d0:	f00c fedc 	bl	8010e8c <iprintf>
		if(STinitdone){printf("steering origin init done!!!.\n"); break;}
 80040d4:	4b62      	ldr	r3, [pc, #392]	; (8004260 <StartTask03+0x2d4>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <StartTask03+0x158>
 80040dc:	4861      	ldr	r0, [pc, #388]	; (8004264 <StartTask03+0x2d8>)
 80040de:	f00c ff71 	bl	8010fc4 <puts>
 80040e2:	e011      	b.n	8004108 <StartTask03+0x17c>
		if(i==39){
 80040e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e6:	2b27      	cmp	r3, #39	; 0x27
 80040e8:	d108      	bne.n	80040fc <StartTask03+0x170>
			HAL_Delay(100);
 80040ea:	2064      	movs	r0, #100	; 0x64
 80040ec:	f002 fdd4 	bl	8006c98 <HAL_Delay>
			printf("steering origin init failed reset!!!!.\n");
 80040f0:	485d      	ldr	r0, [pc, #372]	; (8004268 <StartTask03+0x2dc>)
 80040f2:	f00c ff67 	bl	8010fc4 <puts>
			HAL_Delay(100);
 80040f6:	2064      	movs	r0, #100	; 0x64
 80040f8:	f002 fdce 	bl	8006c98 <HAL_Delay>
	for(int i=0;i<40;i++){
 80040fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040fe:	3301      	adds	r3, #1
 8004100:	65bb      	str	r3, [r7, #88]	; 0x58
 8004102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004104:	2b27      	cmp	r3, #39	; 0x27
 8004106:	dddb      	ble.n	80040c0 <StartTask03+0x134>
			//NVIC_SystemReset();
		}
	}
	osDelay(500);
 8004108:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800410c:	f008 fa3a 	bl	800c584 <osDelay>
	STinitdone = 0;
 8004110:	4b53      	ldr	r3, [pc, #332]	; (8004260 <StartTask03+0x2d4>)
 8004112:	2200      	movs	r2, #0
 8004114:	701a      	strb	r2, [r3, #0]
	//EndInit = 0;
	//GPIO_enableirq();
//	osThreadFlagsSet(IRQ_PSxHandle, 1);
	printf("%d: osTFSet\n", osKernelGetTickCount());
 8004116:	f008 f89d 	bl	800c254 <osKernelGetTickCount>
 800411a:	4603      	mov	r3, r0
 800411c:	4619      	mov	r1, r3
 800411e:	4853      	ldr	r0, [pc, #332]	; (800426c <StartTask03+0x2e0>)
 8004120:	f00c feb4 	bl	8010e8c <iprintf>

	for(int i=0;i<4;i++){
 8004124:	2300      	movs	r3, #0
 8004126:	657b      	str	r3, [r7, #84]	; 0x54
 8004128:	e03e      	b.n	80041a8 <StartTask03+0x21c>
		if(FT_flag&(1<<i)){
 800412a:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 800412e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004130:	fa42 f303 	asr.w	r3, r2, r3
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d012      	beq.n	8004162 <StartTask03+0x1d6>
			DataSetSteering(buf, i, SERVO_CW, STM_FT_ID[i][SERVO_CW], SERVO_POS, INIT_SPEED);
 800413c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800413e:	b2d9      	uxtb	r1, r3
 8004140:	4a4b      	ldr	r2, [pc, #300]	; (8004270 <StartTask03+0x2e4>)
 8004142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004144:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004148:	b29b      	uxth	r3, r3
 800414a:	221e      	movs	r2, #30
 800414c:	9201      	str	r2, [sp, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	9200      	str	r2, [sp, #0]
 8004152:	2200      	movs	r2, #0
 8004154:	483f      	ldr	r0, [pc, #252]	; (8004254 <StartTask03+0x2c8>)
 8004156:	f001 fd5b 	bl	8005c10 <DataSetSteering>
			printf("SERVO_cW\n");
 800415a:	4846      	ldr	r0, [pc, #280]	; (8004274 <StartTask03+0x2e8>)
 800415c:	f00c ff32 	bl	8010fc4 <puts>
 8004160:	e012      	b.n	8004188 <StartTask03+0x1fc>
		}
		else {
			DataSetSteering(buf, i, SERVO_CCW, STM_FT_ID[i][SERVO_CCW], SERVO_POS, INIT_SPEED);
 8004162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004164:	b2d9      	uxtb	r1, r3
 8004166:	4a42      	ldr	r2, [pc, #264]	; (8004270 <StartTask03+0x2e4>)
 8004168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4413      	add	r3, r2
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	b29b      	uxth	r3, r3
 8004172:	221e      	movs	r2, #30
 8004174:	9201      	str	r2, [sp, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	9200      	str	r2, [sp, #0]
 800417a:	2201      	movs	r2, #1
 800417c:	4835      	ldr	r0, [pc, #212]	; (8004254 <StartTask03+0x2c8>)
 800417e:	f001 fd47 	bl	8005c10 <DataSetSteering>
			printf("SERVO_ccW\n");
 8004182:	483d      	ldr	r0, [pc, #244]	; (8004278 <StartTask03+0x2ec>)
 8004184:	f00c ff1e 	bl	8010fc4 <puts>
		}
		PS_SIGx_Pin |= (1<<i);
 8004188:	2201      	movs	r2, #1
 800418a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	b25a      	sxtb	r2, r3
 8004192:	4b3a      	ldr	r3, [pc, #232]	; (800427c <StartTask03+0x2f0>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	b25b      	sxtb	r3, r3
 8004198:	4313      	orrs	r3, r2
 800419a:	b25b      	sxtb	r3, r3
 800419c:	b2da      	uxtb	r2, r3
 800419e:	4b37      	ldr	r3, [pc, #220]	; (800427c <StartTask03+0x2f0>)
 80041a0:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<4;i++){
 80041a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a4:	3301      	adds	r3, #1
 80041a6:	657b      	str	r3, [r7, #84]	; 0x54
 80041a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	ddbd      	ble.n	800412a <StartTask03+0x19e>
	}

	for(int i=0;i<10;i++){
 80041ae:	2300      	movs	r3, #0
 80041b0:	653b      	str	r3, [r7, #80]	; 0x50
 80041b2:	e009      	b.n	80041c8 <StartTask03+0x23c>
		ServoMotor_writeDMA(buf);//servo init. must done init within 500*20ms
 80041b4:	4827      	ldr	r0, [pc, #156]	; (8004254 <StartTask03+0x2c8>)
 80041b6:	f001 fd05 	bl	8005bc4 <ServoMotor_writeDMA>
		osDelay(500);
 80041ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041be:	f008 f9e1 	bl	800c584 <osDelay>
	for(int i=0;i<10;i++){
 80041c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041c4:	3301      	adds	r3, #1
 80041c6:	653b      	str	r3, [r7, #80]	; 0x50
 80041c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ca:	2b09      	cmp	r3, #9
 80041cc:	ddf2      	ble.n	80041b4 <StartTask03+0x228>
		}

	for(int i=0;i<4;i++){
 80041ce:	2300      	movs	r3, #0
 80041d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041d2:	e035      	b.n	8004240 <StartTask03+0x2b4>
		if(FT_flag&(1<<i)){
 80041d4:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 80041d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041da:	fa42 f303 	asr.w	r3, r2, r3
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00e      	beq.n	8004204 <StartTask03+0x278>
			DataSetSteering(buf, i, SERVO_CW, 0, SERVO_INIT, INIT_SPEED);
 80041e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e8:	b2d9      	uxtb	r1, r3
 80041ea:	231e      	movs	r3, #30
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	2301      	movs	r3, #1
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	2200      	movs	r2, #0
 80041f6:	4817      	ldr	r0, [pc, #92]	; (8004254 <StartTask03+0x2c8>)
 80041f8:	f001 fd0a 	bl	8005c10 <DataSetSteering>
			printf("SERVO_cW\n");
 80041fc:	481d      	ldr	r0, [pc, #116]	; (8004274 <StartTask03+0x2e8>)
 80041fe:	f00c fee1 	bl	8010fc4 <puts>
 8004202:	e00d      	b.n	8004220 <StartTask03+0x294>
		}
		else {
			DataSetSteering(buf, i, SERVO_CCW, 0, SERVO_INIT, INIT_SPEED);
 8004204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004206:	b2d9      	uxtb	r1, r3
 8004208:	231e      	movs	r3, #30
 800420a:	9301      	str	r3, [sp, #4]
 800420c:	2301      	movs	r3, #1
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	2300      	movs	r3, #0
 8004212:	2201      	movs	r2, #1
 8004214:	480f      	ldr	r0, [pc, #60]	; (8004254 <StartTask03+0x2c8>)
 8004216:	f001 fcfb 	bl	8005c10 <DataSetSteering>
			printf("SERVO_ccW\n");
 800421a:	4817      	ldr	r0, [pc, #92]	; (8004278 <StartTask03+0x2ec>)
 800421c:	f00c fed2 	bl	8010fc4 <puts>
		}
		PS_SIGx_Pin |= (1<<i);
 8004220:	2201      	movs	r2, #1
 8004222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	b25a      	sxtb	r2, r3
 800422a:	4b14      	ldr	r3, [pc, #80]	; (800427c <StartTask03+0x2f0>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	b25b      	sxtb	r3, r3
 8004230:	4313      	orrs	r3, r2
 8004232:	b25b      	sxtb	r3, r3
 8004234:	b2da      	uxtb	r2, r3
 8004236:	4b11      	ldr	r3, [pc, #68]	; (800427c <StartTask03+0x2f0>)
 8004238:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<4;i++){
 800423a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800423c:	3301      	adds	r3, #1
 800423e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004242:	2b03      	cmp	r3, #3
 8004244:	ddc6      	ble.n	80041d4 <StartTask03+0x248>
	}

	for(int i=0;i<10;i++){
 8004246:	2300      	movs	r3, #0
 8004248:	64bb      	str	r3, [r7, #72]	; 0x48
 800424a:	e023      	b.n	8004294 <StartTask03+0x308>
 800424c:	20000ca4 	.word	0x20000ca4
 8004250:	40020000 	.word	0x40020000
 8004254:	20000060 	.word	0x20000060
 8004258:	080155d8 	.word	0x080155d8
 800425c:	080155f8 	.word	0x080155f8
 8004260:	20000bd5 	.word	0x20000bd5
 8004264:	080155fc 	.word	0x080155fc
 8004268:	0801561c 	.word	0x0801561c
 800426c:	08015644 	.word	0x08015644
 8004270:	2000003c 	.word	0x2000003c
 8004274:	08015654 	.word	0x08015654
 8004278:	08015660 	.word	0x08015660
 800427c:	20000bc8 	.word	0x20000bc8
		ServoMotor_writeDMA(buf);//servo init. must done init within 500*20ms
 8004280:	48b7      	ldr	r0, [pc, #732]	; (8004560 <StartTask03+0x5d4>)
 8004282:	f001 fc9f 	bl	8005bc4 <ServoMotor_writeDMA>
		osDelay(500);
 8004286:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800428a:	f008 f97b 	bl	800c584 <osDelay>
	for(int i=0;i<10;i++){
 800428e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004290:	3301      	adds	r3, #1
 8004292:	64bb      	str	r3, [r7, #72]	; 0x48
 8004294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004296:	2b09      	cmp	r3, #9
 8004298:	ddf2      	ble.n	8004280 <StartTask03+0x2f4>
		}


	Dir_Rot = 0;//init
 800429a:	2300      	movs	r3, #0
 800429c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	HAL_UART_Receive_IT(&huart3, tmp_rx[0] , 12);
 80042a0:	220c      	movs	r2, #12
 80042a2:	49b0      	ldr	r1, [pc, #704]	; (8004564 <StartTask03+0x5d8>)
 80042a4:	48b0      	ldr	r0, [pc, #704]	; (8004568 <StartTask03+0x5dc>)
 80042a6:	f006 fe58 	bl	800af5a <HAL_UART_Receive_IT>
	lastTime = osKernelGetTickCount();
 80042aa:	f007 ffd3 	bl	800c254 <osKernelGetTickCount>
 80042ae:	6678      	str	r0, [r7, #100]	; 0x64
  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STEERING;
 80042b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042b2:	3364      	adds	r3, #100	; 0x64
 80042b4:	667b      	str	r3, [r7, #100]	; 0x64
	osDelayUntil(lastTime);
 80042b6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80042b8:	f008 f97f 	bl	800c5ba <osDelayUntil>

	printf("%d: t03\n", osKernelGetTickCount());
 80042bc:	f007 ffca 	bl	800c254 <osKernelGetTickCount>
 80042c0:	4603      	mov	r3, r0
 80042c2:	4619      	mov	r1, r3
 80042c4:	48a9      	ldr	r0, [pc, #676]	; (800456c <StartTask03+0x5e0>)
 80042c6:	f00c fde1 	bl	8010e8c <iprintf>

	if(ModeABCD == 1){
 80042ca:	4ba9      	ldr	r3, [pc, #676]	; (8004570 <StartTask03+0x5e4>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d102      	bne.n	80042d8 <StartTask03+0x34c>
			DataSetSteering(buf, STMotorID2, Dir_Rot, SteDeg[1]*100, SERVO_POS,20);
			DataSetSteering(buf, STMotorID3, Dir_Rot, SteDeg[2]*100, SERVO_POS,20);
			DataSetSteering(buf, STMotorID4, Dir_Rot, SteDeg[3]*100, SERVO_POS,20);
		}
#endif
		printf("Mode A\n");
 80042d2:	48a8      	ldr	r0, [pc, #672]	; (8004574 <StartTask03+0x5e8>)
 80042d4:	f00c fe76 	bl	8010fc4 <puts>
	}

	if(ModeABCD == 2){
 80042d8:	4ba5      	ldr	r3, [pc, #660]	; (8004570 <StartTask03+0x5e4>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	f040 8208 	bne.w	80046f2 <StartTask03+0x766>
		if(Deg2Ste(Xbot_R,0, STMotorID1) == 0){//forward, rear
 80042e2:	2200      	movs	r2, #0
 80042e4:	2100      	movs	r1, #0
 80042e6:	2000      	movs	r0, #0
 80042e8:	f7fe f8de 	bl	80024a8 <Deg2Ste>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d119      	bne.n	8004326 <StartTask03+0x39a>
			for(int i=0;i<4;i++){Deg2Ste(Xbot_W, 0, i);}
 80042f2:	2300      	movs	r3, #0
 80042f4:	647b      	str	r3, [r7, #68]	; 0x44
 80042f6:	e009      	b.n	800430c <StartTask03+0x380>
 80042f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	2100      	movs	r1, #0
 8004300:	2001      	movs	r0, #1
 8004302:	f7fe f8d1 	bl	80024a8 <Deg2Ste>
 8004306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004308:	3301      	adds	r3, #1
 800430a:	647b      	str	r3, [r7, #68]	; 0x44
 800430c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800430e:	2b03      	cmp	r3, #3
 8004310:	ddf2      	ble.n	80042f8 <StartTask03+0x36c>
			printf("%d: abs %d\n", osKernelGetTickCount(), SteDeg[0]);
 8004312:	f007 ff9f 	bl	800c254 <osKernelGetTickCount>
 8004316:	4603      	mov	r3, r0
 8004318:	4a97      	ldr	r2, [pc, #604]	; (8004578 <StartTask03+0x5ec>)
 800431a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800431e:	4619      	mov	r1, r3
 8004320:	4896      	ldr	r0, [pc, #600]	; (800457c <StartTask03+0x5f0>)
 8004322:	f00c fdb3 	bl	8010e8c <iprintf>
		}
//		if(Tar_cmd_v_x==0&&Tar_cmd_v_y>0){Deg2Ste(Xbot_W,90); Dir_Rot=SERVO_CCW;}//left
//		else if(Tar_cmd_v_x==0&&Tar_cmd_v_y<0){Deg2Ste(Xbot_W,90); Dir_Rot=SERVO_CW;}//right

		if		((Tar_cmd_v_x>0) && (Tar_cmd_w>0)){/*SteDeg*=1;*/							Dir_Rot=SERVO_CCW; }//the first quadrant
 8004326:	4b96      	ldr	r3, [pc, #600]	; (8004580 <StartTask03+0x5f4>)
 8004328:	e9d3 0100 	ldrd	r0, r1, [r3]
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	f7fc fbf0 	bl	8000b18 <__aeabi_dcmpgt>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00f      	beq.n	800435e <StartTask03+0x3d2>
 800433e:	4b91      	ldr	r3, [pc, #580]	; (8004584 <StartTask03+0x5f8>)
 8004340:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	f7fc fbe4 	bl	8000b18 <__aeabi_dcmpgt>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <StartTask03+0x3d2>
 8004356:	2301      	movs	r3, #1
 8004358:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800435c:	e052      	b.n	8004404 <StartTask03+0x478>
		else if	((Tar_cmd_v_x<0) && (Tar_cmd_w<0)){/*Deg2Ste(Xbot_W,abs(Deg2Ste(Xbot_R,0)));*/	Dir_Rot=SERVO_CCW; }//the second quadrant
 800435e:	4b88      	ldr	r3, [pc, #544]	; (8004580 <StartTask03+0x5f4>)
 8004360:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	f7fc fbb6 	bl	8000adc <__aeabi_dcmplt>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00f      	beq.n	8004396 <StartTask03+0x40a>
 8004376:	4b83      	ldr	r3, [pc, #524]	; (8004584 <StartTask03+0x5f8>)
 8004378:	e9d3 0100 	ldrd	r0, r1, [r3]
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	f7fc fbaa 	bl	8000adc <__aeabi_dcmplt>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <StartTask03+0x40a>
 800438e:	2301      	movs	r3, #1
 8004390:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8004394:	e036      	b.n	8004404 <StartTask03+0x478>
		else if	((Tar_cmd_v_x<0) && (Tar_cmd_w>0)){/*Deg2Ste(Xbot_W,abs(Deg2Ste(Xbot_R,0)));*/	Dir_Rot=SERVO_CW; }//the third quadrant
 8004396:	4b7a      	ldr	r3, [pc, #488]	; (8004580 <StartTask03+0x5f4>)
 8004398:	e9d3 0100 	ldrd	r0, r1, [r3]
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	f7fc fb9a 	bl	8000adc <__aeabi_dcmplt>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00f      	beq.n	80043ce <StartTask03+0x442>
 80043ae:	4b75      	ldr	r3, [pc, #468]	; (8004584 <StartTask03+0x5f8>)
 80043b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	f7fc fbac 	bl	8000b18 <__aeabi_dcmpgt>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <StartTask03+0x442>
 80043c6:	2300      	movs	r3, #0
 80043c8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 80043cc:	e01a      	b.n	8004404 <StartTask03+0x478>
		else if	((Tar_cmd_v_x>0) && (Tar_cmd_w<0)){/*Deg2Ste(Xbot_W,abs(Deg2Ste(Xbot_R,0)));*/	Dir_Rot=SERVO_CW; }//the fourth quadrant
 80043ce:	4b6c      	ldr	r3, [pc, #432]	; (8004580 <StartTask03+0x5f4>)
 80043d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	f7fc fb9c 	bl	8000b18 <__aeabi_dcmpgt>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00e      	beq.n	8004404 <StartTask03+0x478>
 80043e6:	4b67      	ldr	r3, [pc, #412]	; (8004584 <StartTask03+0x5f8>)
 80043e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	f7fc fb72 	bl	8000adc <__aeabi_dcmplt>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <StartTask03+0x478>
 80043fe:	2300      	movs	r3, #0
 8004400:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

		for(int i=0;i<4;i++){
 8004404:	2300      	movs	r3, #0
 8004406:	643b      	str	r3, [r7, #64]	; 0x40
 8004408:	e00f      	b.n	800442a <StartTask03+0x49e>
			if(SteDeg[i]>90){Deg2Ste(Xbot_W, 90, i);}//prevent over angle
 800440a:	4a5b      	ldr	r2, [pc, #364]	; (8004578 <StartTask03+0x5ec>)
 800440c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800440e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004412:	2b5a      	cmp	r3, #90	; 0x5a
 8004414:	dd06      	ble.n	8004424 <StartTask03+0x498>
 8004416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004418:	b2db      	uxtb	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	215a      	movs	r1, #90	; 0x5a
 800441e:	2001      	movs	r0, #1
 8004420:	f7fe f842 	bl	80024a8 <Deg2Ste>
		for(int i=0;i<4;i++){
 8004424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004426:	3301      	adds	r3, #1
 8004428:	643b      	str	r3, [r7, #64]	; 0x40
 800442a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800442c:	2b03      	cmp	r3, #3
 800442e:	ddec      	ble.n	800440a <StartTask03+0x47e>
//		SteDeg=rad2deg(ANGLE_VEL);
//		Deg2Ste(Xbot_W,rad2deg(ANGLE_VEL));
//		printf("%d: abs %d\n", osKernelGetTickCount(), SteDeg);


		if(pre_SteDeg[0] == SteDeg[0]){
 8004430:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004434:	4b50      	ldr	r3, [pc, #320]	; (8004578 <StartTask03+0x5ec>)
 8004436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800443a:	429a      	cmp	r2, r3
 800443c:	f040 808d 	bne.w	800455a <StartTask03+0x5ce>
			set_flag = 1;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
			for(int i=0;i<4;i++){
 8004446:	2300      	movs	r3, #0
 8004448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800444a:	e081      	b.n	8004550 <StartTask03+0x5c4>
				end_SteDeg[i] = ((SteDeg[i]*MS_PER_DEG)+5) / RES_SM;//+5 is round
 800444c:	4a4a      	ldr	r2, [pc, #296]	; (8004578 <StartTask03+0x5ec>)
 800444e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004450:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	3305      	adds	r3, #5
 8004458:	4a4b      	ldr	r2, [pc, #300]	; (8004588 <StartTask03+0x5fc>)
 800445a:	fb82 1203 	smull	r1, r2, r2, r3
 800445e:	1152      	asrs	r2, r2, #5
 8004460:	17db      	asrs	r3, r3, #31
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	b21a      	sxth	r2, r3
 8004466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	3368      	adds	r3, #104	; 0x68
 800446c:	443b      	add	r3, r7
 800446e:	f823 2c60 	strh.w	r2, [r3, #-96]
				if(start_SteDeg[i]>end_SteDeg[i]) {SAngle[i] = start_SteDeg[i] - end_SteDeg[i];}
 8004472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	3368      	adds	r3, #104	; 0x68
 8004478:	443b      	add	r3, r7
 800447a:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 800447e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	3368      	adds	r3, #104	; 0x68
 8004484:	443b      	add	r3, r7
 8004486:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 800448a:	429a      	cmp	r2, r3
 800448c:	dd12      	ble.n	80044b4 <StartTask03+0x528>
 800448e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	3368      	adds	r3, #104	; 0x68
 8004494:	443b      	add	r3, r7
 8004496:	f933 3c58 	ldrsh.w	r3, [r3, #-88]
 800449a:	461a      	mov	r2, r3
 800449c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	3368      	adds	r3, #104	; 0x68
 80044a2:	443b      	add	r3, r7
 80044a4:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 80044a8:	1ad2      	subs	r2, r2, r3
 80044aa:	4938      	ldr	r1, [pc, #224]	; (800458c <StartTask03+0x600>)
 80044ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80044b2:	e01f      	b.n	80044f4 <StartTask03+0x568>
				else if (start_SteDeg[i]<end_SteDeg[i]) {SAngle[i] = end_SteDeg[i] - start_SteDeg[i];}
 80044b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	3368      	adds	r3, #104	; 0x68
 80044ba:	443b      	add	r3, r7
 80044bc:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 80044c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	3368      	adds	r3, #104	; 0x68
 80044c6:	443b      	add	r3, r7
 80044c8:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	da11      	bge.n	80044f4 <StartTask03+0x568>
 80044d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	3368      	adds	r3, #104	; 0x68
 80044d6:	443b      	add	r3, r7
 80044d8:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 80044dc:	461a      	mov	r2, r3
 80044de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	3368      	adds	r3, #104	; 0x68
 80044e4:	443b      	add	r3, r7
 80044e6:	f933 3c58 	ldrsh.w	r3, [r3, #-88]
 80044ea:	1ad2      	subs	r2, r2, r3
 80044ec:	4927      	ldr	r1, [pc, #156]	; (800458c <StartTask03+0x600>)
 80044ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				start_SteDeg[i] = SAngle[i];
 80044f4:	4a25      	ldr	r2, [pc, #148]	; (800458c <StartTask03+0x600>)
 80044f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fc:	b21a      	sxth	r2, r3
 80044fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	3368      	adds	r3, #104	; 0x68
 8004504:	443b      	add	r3, r7
 8004506:	f823 2c58 	strh.w	r2, [r3, #-88]
				printf("%d: input data %d, %d, %d, %d\n", osKernelGetTickCount(),
 800450a:	f007 fea3 	bl	800c254 <osKernelGetTickCount>
 800450e:	4601      	mov	r1, r0
						SteDeg[i], SAngle[i], end_SteDeg[i] , start_SteDeg[i] );
 8004510:	4a19      	ldr	r2, [pc, #100]	; (8004578 <StartTask03+0x5ec>)
 8004512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004514:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
				printf("%d: input data %d, %d, %d, %d\n", osKernelGetTickCount(),
 8004518:	461c      	mov	r4, r3
 800451a:	4a1c      	ldr	r2, [pc, #112]	; (800458c <StartTask03+0x600>)
 800451c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800451e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						SteDeg[i], SAngle[i], end_SteDeg[i] , start_SteDeg[i] );
 8004522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	3368      	adds	r3, #104	; 0x68
 8004528:	443b      	add	r3, r7
 800452a:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
				printf("%d: input data %d, %d, %d, %d\n", osKernelGetTickCount(),
 800452e:	4618      	mov	r0, r3
						SteDeg[i], SAngle[i], end_SteDeg[i] , start_SteDeg[i] );
 8004530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	3368      	adds	r3, #104	; 0x68
 8004536:	443b      	add	r3, r7
 8004538:	f933 3c58 	ldrsh.w	r3, [r3, #-88]
				printf("%d: input data %d, %d, %d, %d\n", osKernelGetTickCount(),
 800453c:	9301      	str	r3, [sp, #4]
 800453e:	9000      	str	r0, [sp, #0]
 8004540:	4613      	mov	r3, r2
 8004542:	4622      	mov	r2, r4
 8004544:	4812      	ldr	r0, [pc, #72]	; (8004590 <StartTask03+0x604>)
 8004546:	f00c fca1 	bl	8010e8c <iprintf>
			for(int i=0;i<4;i++){
 800454a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800454c:	3301      	adds	r3, #1
 800454e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004552:	2b03      	cmp	r3, #3
 8004554:	f77f af7a 	ble.w	800444c <StartTask03+0x4c0>
 8004558:	e04f      	b.n	80045fa <StartTask03+0x66e>
			}
		}

		else{
			for(int i=0;i<4;i++){
 800455a:	2300      	movs	r3, #0
 800455c:	63bb      	str	r3, [r7, #56]	; 0x38
 800455e:	e049      	b.n	80045f4 <StartTask03+0x668>
 8004560:	20000060 	.word	0x20000060
 8004564:	20000d28 	.word	0x20000d28
 8004568:	20001044 	.word	0x20001044
 800456c:	0801566c 	.word	0x0801566c
 8004570:	2000005c 	.word	0x2000005c
 8004574:	08015678 	.word	0x08015678
 8004578:	20000bcc 	.word	0x20000bcc
 800457c:	08015680 	.word	0x08015680
 8004580:	20000c20 	.word	0x20000c20
 8004584:	20000c40 	.word	0x20000c40
 8004588:	51eb851f 	.word	0x51eb851f
 800458c:	20000be0 	.word	0x20000be0
 8004590:	0801568c 	.word	0x0801568c
				pre_SteDeg[i] = SteDeg[i];
 8004594:	4a8d      	ldr	r2, [pc, #564]	; (80047cc <StartTask03+0x840>)
 8004596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004598:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800459c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	3368      	adds	r3, #104	; 0x68
 80045a2:	443b      	add	r3, r7
 80045a4:	f823 2c50 	strh.w	r2, [r3, #-80]
				send_flag = 1;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
				printf("%d: change data %d, %d, %d, %d\n", osKernelGetTickCount(),
 80045ae:	f007 fe51 	bl	800c254 <osKernelGetTickCount>
 80045b2:	4601      	mov	r1, r0
						SteDeg[i], SAngle[i], end_SteDeg[i] , start_SteDeg[i] );
 80045b4:	4a85      	ldr	r2, [pc, #532]	; (80047cc <StartTask03+0x840>)
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
				printf("%d: change data %d, %d, %d, %d\n", osKernelGetTickCount(),
 80045bc:	461c      	mov	r4, r3
 80045be:	4a84      	ldr	r2, [pc, #528]	; (80047d0 <StartTask03+0x844>)
 80045c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						SteDeg[i], SAngle[i], end_SteDeg[i] , start_SteDeg[i] );
 80045c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	3368      	adds	r3, #104	; 0x68
 80045cc:	443b      	add	r3, r7
 80045ce:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
				printf("%d: change data %d, %d, %d, %d\n", osKernelGetTickCount(),
 80045d2:	4618      	mov	r0, r3
						SteDeg[i], SAngle[i], end_SteDeg[i] , start_SteDeg[i] );
 80045d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	3368      	adds	r3, #104	; 0x68
 80045da:	443b      	add	r3, r7
 80045dc:	f933 3c58 	ldrsh.w	r3, [r3, #-88]
				printf("%d: change data %d, %d, %d, %d\n", osKernelGetTickCount(),
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	9000      	str	r0, [sp, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	4622      	mov	r2, r4
 80045e8:	487a      	ldr	r0, [pc, #488]	; (80047d4 <StartTask03+0x848>)
 80045ea:	f00c fc4f 	bl	8010e8c <iprintf>
			for(int i=0;i<4;i++){
 80045ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f0:	3301      	adds	r3, #1
 80045f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	ddcc      	ble.n	8004594 <StartTask03+0x608>

//		DataSetSteering(buf, STMotorID1, Dir_Rot, SteDeg[0]*100, SERVO_POS, 20);
//		DataSetSteering(buf, STMotorID2, Dir_Rot, SteDeg[1]*100, SERVO_POS, 20);
//		DataSetSteering(buf, STMotorID3, Dir_Rot^1, SteDeg[2]*100, SERVO_POS, 20);
//		DataSetSteering(buf, STMotorID4, Dir_Rot^1, SteDeg[3]*100, SERVO_POS, 20);
		DataSetSteering(buf, STMotorID1, Dir_Rot, SteDeg[0]*100, SERVO_POS, SAngle[0]);
 80045fa:	4b74      	ldr	r3, [pc, #464]	; (80047cc <StartTask03+0x840>)
 80045fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004600:	b29b      	uxth	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	0092      	lsls	r2, r2, #2
 8004606:	4413      	add	r3, r2
 8004608:	461a      	mov	r2, r3
 800460a:	0091      	lsls	r1, r2, #2
 800460c:	461a      	mov	r2, r3
 800460e:	460b      	mov	r3, r1
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	b299      	uxth	r1, r3
 8004616:	4b6e      	ldr	r3, [pc, #440]	; (80047d0 <StartTask03+0x844>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	2300      	movs	r3, #0
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	460b      	mov	r3, r1
 8004628:	2100      	movs	r1, #0
 800462a:	486b      	ldr	r0, [pc, #428]	; (80047d8 <StartTask03+0x84c>)
 800462c:	f001 faf0 	bl	8005c10 <DataSetSteering>
		DataSetSteering(buf, STMotorID2, Dir_Rot, SteDeg[1]*100, SERVO_POS, SAngle[1]);
 8004630:	4b66      	ldr	r3, [pc, #408]	; (80047cc <StartTask03+0x840>)
 8004632:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004636:	b29b      	uxth	r3, r3
 8004638:	461a      	mov	r2, r3
 800463a:	0092      	lsls	r2, r2, #2
 800463c:	4413      	add	r3, r2
 800463e:	461a      	mov	r2, r3
 8004640:	0091      	lsls	r1, r2, #2
 8004642:	461a      	mov	r2, r3
 8004644:	460b      	mov	r3, r1
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	b299      	uxth	r1, r3
 800464c:	4b60      	ldr	r3, [pc, #384]	; (80047d0 <StartTask03+0x844>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	2300      	movs	r3, #0
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	460b      	mov	r3, r1
 800465e:	2101      	movs	r1, #1
 8004660:	485d      	ldr	r0, [pc, #372]	; (80047d8 <StartTask03+0x84c>)
 8004662:	f001 fad5 	bl	8005c10 <DataSetSteering>
		DataSetSteering(buf, STMotorID3, Dir_Rot^1, SteDeg[2]*100, SERVO_POS, SAngle[2]);
 8004666:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800466a:	f083 0301 	eor.w	r3, r3, #1
 800466e:	b2da      	uxtb	r2, r3
 8004670:	4b56      	ldr	r3, [pc, #344]	; (80047cc <StartTask03+0x840>)
 8004672:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004676:	b29b      	uxth	r3, r3
 8004678:	4619      	mov	r1, r3
 800467a:	0089      	lsls	r1, r1, #2
 800467c:	440b      	add	r3, r1
 800467e:	4619      	mov	r1, r3
 8004680:	0088      	lsls	r0, r1, #2
 8004682:	4619      	mov	r1, r3
 8004684:	4603      	mov	r3, r0
 8004686:	440b      	add	r3, r1
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	b299      	uxth	r1, r3
 800468c:	4b50      	ldr	r3, [pc, #320]	; (80047d0 <StartTask03+0x844>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	2300      	movs	r3, #0
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	460b      	mov	r3, r1
 800469a:	2102      	movs	r1, #2
 800469c:	484e      	ldr	r0, [pc, #312]	; (80047d8 <StartTask03+0x84c>)
 800469e:	f001 fab7 	bl	8005c10 <DataSetSteering>
		DataSetSteering(buf, STMotorID4, Dir_Rot^1, SteDeg[3]*100, SERVO_POS, SAngle[3]);
 80046a2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80046a6:	f083 0301 	eor.w	r3, r3, #1
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	4b47      	ldr	r3, [pc, #284]	; (80047cc <StartTask03+0x840>)
 80046ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	4619      	mov	r1, r3
 80046b6:	0089      	lsls	r1, r1, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	4619      	mov	r1, r3
 80046bc:	0088      	lsls	r0, r1, #2
 80046be:	4619      	mov	r1, r3
 80046c0:	4603      	mov	r3, r0
 80046c2:	440b      	add	r3, r1
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	b299      	uxth	r1, r3
 80046c8:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <StartTask03+0x844>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	2300      	movs	r3, #0
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	460b      	mov	r3, r1
 80046d6:	2103      	movs	r1, #3
 80046d8:	483f      	ldr	r0, [pc, #252]	; (80047d8 <StartTask03+0x84c>)
 80046da:	f001 fa99 	bl	8005c10 <DataSetSteering>
		printf("%d: MM %d\n", osKernelGetTickCount(), SteDeg[0]);
 80046de:	f007 fdb9 	bl	800c254 <osKernelGetTickCount>
 80046e2:	4603      	mov	r3, r0
 80046e4:	4a39      	ldr	r2, [pc, #228]	; (80047cc <StartTask03+0x840>)
 80046e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80046ea:	4619      	mov	r1, r3
 80046ec:	483b      	ldr	r0, [pc, #236]	; (80047dc <StartTask03+0x850>)
 80046ee:	f00c fbcd 	bl	8010e8c <iprintf>
	}

	if(ModeABCD == 3){
 80046f2:	4b3b      	ldr	r3, [pc, #236]	; (80047e0 <StartTask03+0x854>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	f040 808d 	bne.w	8004816 <StartTask03+0x88a>
//		SteDeg=rad2deg(ANGLE_VEL);
//		for(int i=0;i<4;i++){Deg2Ste(Xbot_W,rad2deg(ANGLE_VEL), i);}
		send_flag = 1;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
		set_flag = 1;
 8004702:	2301      	movs	r3, #1
 8004704:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		pre_SteDeg[0] = 1; //for set send_flag of mode B
 8004708:	2301      	movs	r3, #1
 800470a:	833b      	strh	r3, [r7, #24]
		//printf("%d: abs %d\n", osKernelGetTickCount(), SteDeg);
		DataSetSteering(buf, STMotorID1, SERVO_CCW, SteDeg[0]*100, SERVO_POS, 20);
 800470c:	4b2f      	ldr	r3, [pc, #188]	; (80047cc <StartTask03+0x840>)
 800470e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004712:	b29b      	uxth	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	0092      	lsls	r2, r2, #2
 8004718:	4413      	add	r3, r2
 800471a:	461a      	mov	r2, r3
 800471c:	0091      	lsls	r1, r2, #2
 800471e:	461a      	mov	r2, r3
 8004720:	460b      	mov	r3, r1
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	b29b      	uxth	r3, r3
 8004728:	2214      	movs	r2, #20
 800472a:	9201      	str	r2, [sp, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	9200      	str	r2, [sp, #0]
 8004730:	2201      	movs	r2, #1
 8004732:	2100      	movs	r1, #0
 8004734:	4828      	ldr	r0, [pc, #160]	; (80047d8 <StartTask03+0x84c>)
 8004736:	f001 fa6b 	bl	8005c10 <DataSetSteering>
		DataSetSteering(buf, STMotorID2, SERVO_CW, SteDeg[1]*100, SERVO_POS, 20);
 800473a:	4b24      	ldr	r3, [pc, #144]	; (80047cc <StartTask03+0x840>)
 800473c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004740:	b29b      	uxth	r3, r3
 8004742:	461a      	mov	r2, r3
 8004744:	0092      	lsls	r2, r2, #2
 8004746:	4413      	add	r3, r2
 8004748:	461a      	mov	r2, r3
 800474a:	0091      	lsls	r1, r2, #2
 800474c:	461a      	mov	r2, r3
 800474e:	460b      	mov	r3, r1
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	b29b      	uxth	r3, r3
 8004756:	2214      	movs	r2, #20
 8004758:	9201      	str	r2, [sp, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	9200      	str	r2, [sp, #0]
 800475e:	2200      	movs	r2, #0
 8004760:	2101      	movs	r1, #1
 8004762:	481d      	ldr	r0, [pc, #116]	; (80047d8 <StartTask03+0x84c>)
 8004764:	f001 fa54 	bl	8005c10 <DataSetSteering>
		DataSetSteering(buf, STMotorID3, SERVO_CW, SteDeg[2]*100, SERVO_POS, 20);
 8004768:	4b18      	ldr	r3, [pc, #96]	; (80047cc <StartTask03+0x840>)
 800476a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800476e:	b29b      	uxth	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	0092      	lsls	r2, r2, #2
 8004774:	4413      	add	r3, r2
 8004776:	461a      	mov	r2, r3
 8004778:	0091      	lsls	r1, r2, #2
 800477a:	461a      	mov	r2, r3
 800477c:	460b      	mov	r3, r1
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	b29b      	uxth	r3, r3
 8004784:	2214      	movs	r2, #20
 8004786:	9201      	str	r2, [sp, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	9200      	str	r2, [sp, #0]
 800478c:	2200      	movs	r2, #0
 800478e:	2102      	movs	r1, #2
 8004790:	4811      	ldr	r0, [pc, #68]	; (80047d8 <StartTask03+0x84c>)
 8004792:	f001 fa3d 	bl	8005c10 <DataSetSteering>
		DataSetSteering(buf, STMotorID4, SERVO_CCW, SteDeg[3]*100, SERVO_POS, 20);
 8004796:	4b0d      	ldr	r3, [pc, #52]	; (80047cc <StartTask03+0x840>)
 8004798:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800479c:	b29b      	uxth	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	0092      	lsls	r2, r2, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	461a      	mov	r2, r3
 80047a6:	0091      	lsls	r1, r2, #2
 80047a8:	461a      	mov	r2, r3
 80047aa:	460b      	mov	r3, r1
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2214      	movs	r2, #20
 80047b4:	9201      	str	r2, [sp, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	9200      	str	r2, [sp, #0]
 80047ba:	2201      	movs	r2, #1
 80047bc:	2103      	movs	r1, #3
 80047be:	4806      	ldr	r0, [pc, #24]	; (80047d8 <StartTask03+0x84c>)
 80047c0:	f001 fa26 	bl	8005c10 <DataSetSteering>
		for(int i=0;i<4;i++){
 80047c4:	2300      	movs	r3, #0
 80047c6:	637b      	str	r3, [r7, #52]	; 0x34
 80047c8:	e01f      	b.n	800480a <StartTask03+0x87e>
 80047ca:	bf00      	nop
 80047cc:	20000bcc 	.word	0x20000bcc
 80047d0:	20000be0 	.word	0x20000be0
 80047d4:	080156ac 	.word	0x080156ac
 80047d8:	20000060 	.word	0x20000060
 80047dc:	080156cc 	.word	0x080156cc
 80047e0:	2000005c 	.word	0x2000005c
			SAngle[i] = ((SteDeg[i]*MS_PER_DEG)+5) / RES_SM;
 80047e4:	4a88      	ldr	r2, [pc, #544]	; (8004a08 <StartTask03+0xa7c>)
 80047e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	3305      	adds	r3, #5
 80047f0:	4a86      	ldr	r2, [pc, #536]	; (8004a0c <StartTask03+0xa80>)
 80047f2:	fb82 1203 	smull	r1, r2, r2, r3
 80047f6:	1152      	asrs	r2, r2, #5
 80047f8:	17db      	asrs	r3, r3, #31
 80047fa:	1ad2      	subs	r2, r2, r3
 80047fc:	4984      	ldr	r1, [pc, #528]	; (8004a10 <StartTask03+0xa84>)
 80047fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0;i<4;i++){
 8004804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004806:	3301      	adds	r3, #1
 8004808:	637b      	str	r3, [r7, #52]	; 0x34
 800480a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480c:	2b03      	cmp	r3, #3
 800480e:	dde9      	ble.n	80047e4 <StartTask03+0x858>
		}
		printf("Mode c\n");
 8004810:	4880      	ldr	r0, [pc, #512]	; (8004a14 <StartTask03+0xa88>)
 8004812:	f00c fbd7 	bl	8010fc4 <puts>
	}

	if(ModeABCD == 4){
 8004816:	4b80      	ldr	r3, [pc, #512]	; (8004a18 <StartTask03+0xa8c>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b04      	cmp	r3, #4
 800481c:	d17f      	bne.n	800491e <StartTask03+0x992>
		send_flag = 1;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
		set_flag = 1;
 8004824:	2301      	movs	r3, #1
 8004826:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		pre_SteDeg[0] = 1; //for set send_flag of mode B
 800482a:	2301      	movs	r3, #1
 800482c:	833b      	strh	r3, [r7, #24]
//		SteDeg=rad2deg(ANGLE_VEL);
//		for(int i=0;i<4;i++){Deg2Ste(Xbot_W,rad2deg(ANGLE_VEL), i);}
		//DataSetSteering(buf, STMotorID1, SERVO_CW, SteDeg*100, SERVO_POS, 20);
		//DataSetSteering(buf, STMotorID1, SERVO_CW, SteDeg*100, 2, 250); pre_angle = -1*SteDeg;
		DataSetSteering(buf, STMotorID1, SERVO_CW, SteDeg[0]*100, SERVO_POS,20);
 800482e:	4b76      	ldr	r3, [pc, #472]	; (8004a08 <StartTask03+0xa7c>)
 8004830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004834:	b29b      	uxth	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	0092      	lsls	r2, r2, #2
 800483a:	4413      	add	r3, r2
 800483c:	461a      	mov	r2, r3
 800483e:	0091      	lsls	r1, r2, #2
 8004840:	461a      	mov	r2, r3
 8004842:	460b      	mov	r3, r1
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	b29b      	uxth	r3, r3
 800484a:	2214      	movs	r2, #20
 800484c:	9201      	str	r2, [sp, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	9200      	str	r2, [sp, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	2100      	movs	r1, #0
 8004856:	4871      	ldr	r0, [pc, #452]	; (8004a1c <StartTask03+0xa90>)
 8004858:	f001 f9da 	bl	8005c10 <DataSetSteering>
		DataSetSteering(buf, STMotorID2, SERVO_CCW, SteDeg[1]*100, SERVO_POS, 20);
 800485c:	4b6a      	ldr	r3, [pc, #424]	; (8004a08 <StartTask03+0xa7c>)
 800485e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004862:	b29b      	uxth	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	0092      	lsls	r2, r2, #2
 8004868:	4413      	add	r3, r2
 800486a:	461a      	mov	r2, r3
 800486c:	0091      	lsls	r1, r2, #2
 800486e:	461a      	mov	r2, r3
 8004870:	460b      	mov	r3, r1
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	b29b      	uxth	r3, r3
 8004878:	2214      	movs	r2, #20
 800487a:	9201      	str	r2, [sp, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	9200      	str	r2, [sp, #0]
 8004880:	2201      	movs	r2, #1
 8004882:	2101      	movs	r1, #1
 8004884:	4865      	ldr	r0, [pc, #404]	; (8004a1c <StartTask03+0xa90>)
 8004886:	f001 f9c3 	bl	8005c10 <DataSetSteering>
		DataSetSteering(buf, STMotorID3, SERVO_CCW, SteDeg[2]*100, SERVO_POS, 20);
 800488a:	4b5f      	ldr	r3, [pc, #380]	; (8004a08 <StartTask03+0xa7c>)
 800488c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004890:	b29b      	uxth	r3, r3
 8004892:	461a      	mov	r2, r3
 8004894:	0092      	lsls	r2, r2, #2
 8004896:	4413      	add	r3, r2
 8004898:	461a      	mov	r2, r3
 800489a:	0091      	lsls	r1, r2, #2
 800489c:	461a      	mov	r2, r3
 800489e:	460b      	mov	r3, r1
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2214      	movs	r2, #20
 80048a8:	9201      	str	r2, [sp, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	9200      	str	r2, [sp, #0]
 80048ae:	2201      	movs	r2, #1
 80048b0:	2102      	movs	r1, #2
 80048b2:	485a      	ldr	r0, [pc, #360]	; (8004a1c <StartTask03+0xa90>)
 80048b4:	f001 f9ac 	bl	8005c10 <DataSetSteering>
		DataSetSteering(buf, STMotorID4, SERVO_CW, SteDeg[3]*100, SERVO_POS, 20);
 80048b8:	4b53      	ldr	r3, [pc, #332]	; (8004a08 <StartTask03+0xa7c>)
 80048ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	0092      	lsls	r2, r2, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	461a      	mov	r2, r3
 80048c8:	0091      	lsls	r1, r2, #2
 80048ca:	461a      	mov	r2, r3
 80048cc:	460b      	mov	r3, r1
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2214      	movs	r2, #20
 80048d6:	9201      	str	r2, [sp, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	9200      	str	r2, [sp, #0]
 80048dc:	2200      	movs	r2, #0
 80048de:	2103      	movs	r1, #3
 80048e0:	484e      	ldr	r0, [pc, #312]	; (8004a1c <StartTask03+0xa90>)
 80048e2:	f001 f995 	bl	8005c10 <DataSetSteering>
//		EndModeD = 0;
		//osDelay(10);
		for(int i=0;i<4;i++){
 80048e6:	2300      	movs	r3, #0
 80048e8:	633b      	str	r3, [r7, #48]	; 0x30
 80048ea:	e012      	b.n	8004912 <StartTask03+0x986>
			SAngle[i] = ((SteDeg[i]*MS_PER_DEG)+5) / RES_SM;
 80048ec:	4a46      	ldr	r2, [pc, #280]	; (8004a08 <StartTask03+0xa7c>)
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	3305      	adds	r3, #5
 80048f8:	4a44      	ldr	r2, [pc, #272]	; (8004a0c <StartTask03+0xa80>)
 80048fa:	fb82 1203 	smull	r1, r2, r2, r3
 80048fe:	1152      	asrs	r2, r2, #5
 8004900:	17db      	asrs	r3, r3, #31
 8004902:	1ad2      	subs	r2, r2, r3
 8004904:	4942      	ldr	r1, [pc, #264]	; (8004a10 <StartTask03+0xa84>)
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0;i<4;i++){
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	3301      	adds	r3, #1
 8004910:	633b      	str	r3, [r7, #48]	; 0x30
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	2b03      	cmp	r3, #3
 8004916:	dde9      	ble.n	80048ec <StartTask03+0x960>
		}
		printf("Mode D\n");
 8004918:	4841      	ldr	r0, [pc, #260]	; (8004a20 <StartTask03+0xa94>)
 800491a:	f00c fb53 	bl	8010fc4 <puts>
	}
	//osDelay(10);
#if 1//testing
	if((send_flag==1) && (set_flag==1)){
 800491e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8004922:	2b01      	cmp	r3, #1
 8004924:	d153      	bne.n	80049ce <StartTask03+0xa42>
 8004926:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800492a:	2b01      	cmp	r3, #1
 800492c:	d14f      	bne.n	80049ce <StartTask03+0xa42>
		ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
 800492e:	483b      	ldr	r0, [pc, #236]	; (8004a1c <StartTask03+0xa90>)
 8004930:	f001 f948 	bl	8005bc4 <ServoMotor_writeDMA>
		send_flag = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
		set_flag = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		for(int i=0;i<4;i++){
 8004940:	2300      	movs	r3, #0
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004944:	e019      	b.n	800497a <StartTask03+0x9ee>
			printf("[%d] %d ", i, SAngle[i]);
 8004946:	4a32      	ldr	r2, [pc, #200]	; (8004a10 <StartTask03+0xa84>)
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800494e:	461a      	mov	r2, r3
 8004950:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004952:	4834      	ldr	r0, [pc, #208]	; (8004a24 <StartTask03+0xa98>)
 8004954:	f00c fa9a 	bl	8010e8c <iprintf>
			start_SteDeg[i] = 0;
 8004958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	3368      	adds	r3, #104	; 0x68
 800495e:	443b      	add	r3, r7
 8004960:	2200      	movs	r2, #0
 8004962:	f823 2c58 	strh.w	r2, [r3, #-88]
			end_SteDeg[i] = 0;
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	3368      	adds	r3, #104	; 0x68
 800496c:	443b      	add	r3, r7
 800496e:	2200      	movs	r2, #0
 8004970:	f823 2c60 	strh.w	r2, [r3, #-96]
		for(int i=0;i<4;i++){
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	3301      	adds	r3, #1
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	2b03      	cmp	r3, #3
 800497e:	dde2      	ble.n	8004946 <StartTask03+0x9ba>
//			SAngle[i] = 0;
		}

		printf("%d: writeDMA %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(),SteDeg[0],SteDeg[1],SteDeg[2],SteDeg[3],SAngle[0],SAngle[1],SAngle[2],SAngle[3]);
 8004980:	f007 fc68 	bl	800c254 <osKernelGetTickCount>
 8004984:	4604      	mov	r4, r0
 8004986:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <StartTask03+0xa7c>)
 8004988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800498c:	469c      	mov	ip, r3
 800498e:	4b1e      	ldr	r3, [pc, #120]	; (8004a08 <StartTask03+0xa7c>)
 8004990:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004994:	469e      	mov	lr, r3
 8004996:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <StartTask03+0xa7c>)
 8004998:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800499c:	461d      	mov	r5, r3
 800499e:	4b1a      	ldr	r3, [pc, #104]	; (8004a08 <StartTask03+0xa7c>)
 80049a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80049a4:	461e      	mov	r6, r3
 80049a6:	4b1a      	ldr	r3, [pc, #104]	; (8004a10 <StartTask03+0xa84>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a19      	ldr	r2, [pc, #100]	; (8004a10 <StartTask03+0xa84>)
 80049ac:	6852      	ldr	r2, [r2, #4]
 80049ae:	4918      	ldr	r1, [pc, #96]	; (8004a10 <StartTask03+0xa84>)
 80049b0:	6889      	ldr	r1, [r1, #8]
 80049b2:	4817      	ldr	r0, [pc, #92]	; (8004a10 <StartTask03+0xa84>)
 80049b4:	68c0      	ldr	r0, [r0, #12]
 80049b6:	9005      	str	r0, [sp, #20]
 80049b8:	9104      	str	r1, [sp, #16]
 80049ba:	9203      	str	r2, [sp, #12]
 80049bc:	9302      	str	r3, [sp, #8]
 80049be:	9601      	str	r6, [sp, #4]
 80049c0:	9500      	str	r5, [sp, #0]
 80049c2:	4673      	mov	r3, lr
 80049c4:	4662      	mov	r2, ip
 80049c6:	4621      	mov	r1, r4
 80049c8:	4817      	ldr	r0, [pc, #92]	; (8004a28 <StartTask03+0xa9c>)
 80049ca:	f00c fa5f 	bl	8010e8c <iprintf>

#else
	//origin
	ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
#endif
	osDelay(5); DataReadSteering(STMotorID1, 0xA1);
 80049ce:	2005      	movs	r0, #5
 80049d0:	f007 fdd8 	bl	800c584 <osDelay>
 80049d4:	21a1      	movs	r1, #161	; 0xa1
 80049d6:	2000      	movs	r0, #0
 80049d8:	f001 f99c 	bl	8005d14 <DataReadSteering>
	osDelay(5); DataReadSteering(STMotorID2, 0xA1);
 80049dc:	2005      	movs	r0, #5
 80049de:	f007 fdd1 	bl	800c584 <osDelay>
 80049e2:	21a1      	movs	r1, #161	; 0xa1
 80049e4:	2001      	movs	r0, #1
 80049e6:	f001 f995 	bl	8005d14 <DataReadSteering>
	osDelay(5); DataReadSteering(STMotorID3, 0xA1);
 80049ea:	2005      	movs	r0, #5
 80049ec:	f007 fdca 	bl	800c584 <osDelay>
 80049f0:	21a1      	movs	r1, #161	; 0xa1
 80049f2:	2002      	movs	r0, #2
 80049f4:	f001 f98e 	bl	8005d14 <DataReadSteering>
	osDelay(5); DataReadSteering(STMotorID4, 0xA1);
 80049f8:	2005      	movs	r0, #5
 80049fa:	f007 fdc3 	bl	800c584 <osDelay>
 80049fe:	21a1      	movs	r1, #161	; 0xa1
 8004a00:	2003      	movs	r0, #3
 8004a02:	f001 f987 	bl	8005d14 <DataReadSteering>
  {
 8004a06:	e453      	b.n	80042b0 <StartTask03+0x324>
 8004a08:	20000bcc 	.word	0x20000bcc
 8004a0c:	51eb851f 	.word	0x51eb851f
 8004a10:	20000be0 	.word	0x20000be0
 8004a14:	080156d8 	.word	0x080156d8
 8004a18:	2000005c 	.word	0x2000005c
 8004a1c:	20000060 	.word	0x20000060
 8004a20:	080156e0 	.word	0x080156e0
 8004a24:	080156e8 	.word	0x080156e8
 8004a28:	080156f4 	.word	0x080156f4

08004a2c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	//StartTask04 is related ws2812b//
	uint32_t lastTime = osKernelGetTickCount();
 8004a34:	f007 fc0e 	bl	800c254 <osKernelGetTickCount>
 8004a38:	60f8      	str	r0, [r7, #12]

	static int temp = 0;
	////////////////////////////////

	ws2812AllColor(70,70,70);//r, g, b
 8004a3a:	2246      	movs	r2, #70	; 0x46
 8004a3c:	2146      	movs	r1, #70	; 0x46
 8004a3e:	2046      	movs	r0, #70	; 0x46
 8004a40:	f7fc fa5c 	bl	8000efc <ws2812AllColor>
	ws2812NumOn(NUM_NPLED);
 8004a44:	201d      	movs	r0, #29
 8004a46:	f7fc fa31 	bl	8000eac <ws2812NumOn>

  /* Infinite loop */
  for(;;)
  {
		lastTime += PERIOD_NP_LED;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004a50:	60fb      	str	r3, [r7, #12]
		osDelayUntil(lastTime);
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f007 fdb1 	bl	800c5ba <osDelayUntil>

		temp++;
 8004a58:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <StartTask04+0x54>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	4a08      	ldr	r2, [pc, #32]	; (8004a80 <StartTask04+0x54>)
 8004a60:	6013      	str	r3, [r2, #0]
		switch (temp) {
 8004a62:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <StartTask04+0x54>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d005      	beq.n	8004a76 <StartTask04+0x4a>
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	dced      	bgt.n	8004a4a <StartTask04+0x1e>
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d003      	beq.n	8004a7a <StartTask04+0x4e>
 8004a72:	2b02      	cmp	r3, #2
				break;

			case 2:
				//printf("case2\n");
				//ws2812SetColor(7,0,0,1);//index, r, g, b
				break;
 8004a74:	e002      	b.n	8004a7c <StartTask04+0x50>

			case 3:
				//printf("case3\n");
				//ws2812SetColor(6,0,0,1);//index, r, g, b
				break;
 8004a76:	bf00      	nop
 8004a78:	e7e7      	b.n	8004a4a <StartTask04+0x1e>
				break;
 8004a7a:	bf00      	nop
		lastTime += PERIOD_NP_LED;
 8004a7c:	e7e5      	b.n	8004a4a <StartTask04+0x1e>
 8004a7e:	bf00      	nop
 8004a80:	20000cc8 	.word	0x20000cc8

08004a84 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	uint32_t lastTime = osKernelGetTickCount();
 8004a8c:	f007 fbe2 	bl	800c254 <osKernelGetTickCount>
 8004a90:	60f8      	str	r0, [r7, #12]

	fanInit();
 8004a92:	f7fc fe17 	bl	80016c4 <fanInit>


  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_FAN;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004a9c:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f007 fd8b 	bl	800c5ba <osDelayUntil>
	fanOn(100);
 8004aa4:	2064      	movs	r0, #100	; 0x64
 8004aa6:	f7fc fe17 	bl	80016d8 <fanOn>
	lastTime += PERIOD_FAN;
 8004aaa:	e7f4      	b.n	8004a96 <StartTask05+0x12>

08004aac <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8004aac:	b5b0      	push	{r4, r5, r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
//	uint8_t EndInit = 0;
	//uint32_t lastTime = osKernelGetTickCount();
	//osDelay(10);//for printf();
	printf("StartTask06 %d: \n", PS_SIGx_Pin);
 8004ab4:	4b59      	ldr	r3, [pc, #356]	; (8004c1c <StartTask06+0x170>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4859      	ldr	r0, [pc, #356]	; (8004c20 <StartTask06+0x174>)
 8004abc:	f00c f9e6 	bl	8010e8c <iprintf>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8004ac0:	200a      	movs	r0, #10
 8004ac2:	f007 fd5f 	bl	800c584 <osDelay>
	//  printf("%d: t06\n", osKernelGetTickCount());
	if(PS_SIGx_Pin&1){//1ch init
 8004ac6:	4b55      	ldr	r3, [pc, #340]	; (8004c1c <StartTask06+0x170>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d01a      	beq.n	8004b08 <StartTask06+0x5c>
		PS_SIGx_Pin &= ~(1); printf(" PS_SIG1_stop.\n");
 8004ad2:	4b52      	ldr	r3, [pc, #328]	; (8004c1c <StartTask06+0x170>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	4b4f      	ldr	r3, [pc, #316]	; (8004c1c <StartTask06+0x170>)
 8004ade:	701a      	strb	r2, [r3, #0]
 8004ae0:	4850      	ldr	r0, [pc, #320]	; (8004c24 <StartTask06+0x178>)
 8004ae2:	f00c fa6f 	bl	8010fc4 <puts>
		EndInit |= 1;
 8004ae6:	4b50      	ldr	r3, [pc, #320]	; (8004c28 <StartTask06+0x17c>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	4b4d      	ldr	r3, [pc, #308]	; (8004c28 <StartTask06+0x17c>)
 8004af2:	701a      	strb	r2, [r3, #0]
		DataSetSteering(buf, 0, SERVO_CCW, 0, 0, 30);
 8004af4:	231e      	movs	r3, #30
 8004af6:	9301      	str	r3, [sp, #4]
 8004af8:	2300      	movs	r3, #0
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	2300      	movs	r3, #0
 8004afe:	2201      	movs	r2, #1
 8004b00:	2100      	movs	r1, #0
 8004b02:	484a      	ldr	r0, [pc, #296]	; (8004c2c <StartTask06+0x180>)
 8004b04:	f001 f884 	bl	8005c10 <DataSetSteering>
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
	}

	if(PS_SIGx_Pin&2){//2ch init
 8004b08:	4b44      	ldr	r3, [pc, #272]	; (8004c1c <StartTask06+0x170>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01a      	beq.n	8004b4a <StartTask06+0x9e>
		PS_SIGx_Pin &= ~(2); printf(" PS_SIG2_stop.\n");
 8004b14:	4b41      	ldr	r3, [pc, #260]	; (8004c1c <StartTask06+0x170>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	f023 0302 	bic.w	r3, r3, #2
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	4b3f      	ldr	r3, [pc, #252]	; (8004c1c <StartTask06+0x170>)
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	4843      	ldr	r0, [pc, #268]	; (8004c30 <StartTask06+0x184>)
 8004b24:	f00c fa4e 	bl	8010fc4 <puts>
		DataSetSteering(buf, 1, SERVO_CCW, 0, 0, 30);
 8004b28:	231e      	movs	r3, #30
 8004b2a:	9301      	str	r3, [sp, #4]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	2300      	movs	r3, #0
 8004b32:	2201      	movs	r2, #1
 8004b34:	2101      	movs	r1, #1
 8004b36:	483d      	ldr	r0, [pc, #244]	; (8004c2c <StartTask06+0x180>)
 8004b38:	f001 f86a 	bl	8005c10 <DataSetSteering>
		EndInit |= 2;
 8004b3c:	4b3a      	ldr	r3, [pc, #232]	; (8004c28 <StartTask06+0x17c>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	f043 0302 	orr.w	r3, r3, #2
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	4b38      	ldr	r3, [pc, #224]	; (8004c28 <StartTask06+0x17c>)
 8004b48:	701a      	strb	r2, [r3, #0]
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
	}
	if(PS_SIGx_Pin&4){//3ch init
 8004b4a:	4b34      	ldr	r3, [pc, #208]	; (8004c1c <StartTask06+0x170>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01a      	beq.n	8004b8c <StartTask06+0xe0>
		PS_SIGx_Pin &= ~(4); printf(" PS_SIG3_stop.\n");
 8004b56:	4b31      	ldr	r3, [pc, #196]	; (8004c1c <StartTask06+0x170>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	f023 0304 	bic.w	r3, r3, #4
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	4b2e      	ldr	r3, [pc, #184]	; (8004c1c <StartTask06+0x170>)
 8004b62:	701a      	strb	r2, [r3, #0]
 8004b64:	4833      	ldr	r0, [pc, #204]	; (8004c34 <StartTask06+0x188>)
 8004b66:	f00c fa2d 	bl	8010fc4 <puts>
		DataSetSteering(buf, 2, SERVO_CCW, 0, 0, 30);
 8004b6a:	231e      	movs	r3, #30
 8004b6c:	9301      	str	r3, [sp, #4]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	2300      	movs	r3, #0
 8004b74:	2201      	movs	r2, #1
 8004b76:	2102      	movs	r1, #2
 8004b78:	482c      	ldr	r0, [pc, #176]	; (8004c2c <StartTask06+0x180>)
 8004b7a:	f001 f849 	bl	8005c10 <DataSetSteering>
		EndInit |= 4;
 8004b7e:	4b2a      	ldr	r3, [pc, #168]	; (8004c28 <StartTask06+0x17c>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	f043 0304 	orr.w	r3, r3, #4
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	4b27      	ldr	r3, [pc, #156]	; (8004c28 <StartTask06+0x17c>)
 8004b8a:	701a      	strb	r2, [r3, #0]
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
	}	if(PS_SIGx_Pin&8){//4ch init
 8004b8c:	4b23      	ldr	r3, [pc, #140]	; (8004c1c <StartTask06+0x170>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d020      	beq.n	8004bda <StartTask06+0x12e>
		PS_SIGx_Pin &= ~(8); printf(" PS_SIG4_stop.\n");
 8004b98:	4b20      	ldr	r3, [pc, #128]	; (8004c1c <StartTask06+0x170>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	f023 0308 	bic.w	r3, r3, #8
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	4b1e      	ldr	r3, [pc, #120]	; (8004c1c <StartTask06+0x170>)
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	4824      	ldr	r0, [pc, #144]	; (8004c38 <StartTask06+0x18c>)
 8004ba8:	f00c fa0c 	bl	8010fc4 <puts>
		DataSetSteering(buf, 3, SERVO_CCW, 0, 0, 30);
 8004bac:	231e      	movs	r3, #30
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	2103      	movs	r1, #3
 8004bba:	481c      	ldr	r0, [pc, #112]	; (8004c2c <StartTask06+0x180>)
 8004bbc:	f001 f828 	bl	8005c10 <DataSetSteering>
		EndInit |= 8;
 8004bc0:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <StartTask06+0x17c>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	f043 0308 	orr.w	r3, r3, #8
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	4b17      	ldr	r3, [pc, #92]	; (8004c28 <StartTask06+0x17c>)
 8004bcc:	701a      	strb	r2, [r3, #0]
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
		printf("EndInit %d\n", EndInit);
 8004bce:	4b16      	ldr	r3, [pc, #88]	; (8004c28 <StartTask06+0x17c>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4819      	ldr	r0, [pc, #100]	; (8004c3c <StartTask06+0x190>)
 8004bd6:	f00c f959 	bl	8010e8c <iprintf>
	}
	if(EndInit == 15) {
 8004bda:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <StartTask06+0x17c>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b0f      	cmp	r3, #15
 8004be0:	f47f af6e 	bne.w	8004ac0 <StartTask06+0x14>

		GPIO_disableirq();
 8004be4:	f000 fdf6 	bl	80057d4 <GPIO_disableirq>
		STinitdone++;
 8004be8:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <StartTask06+0x194>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	3301      	adds	r3, #1
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	4b13      	ldr	r3, [pc, #76]	; (8004c40 <StartTask06+0x194>)
 8004bf2:	701a      	strb	r2, [r3, #0]
		printf("%d: EndInit == 15. %d, %d\n", osKernelGetTickCount(), osThreadFlagsWait(1, 0, osWaitForever), osThreadFlagsGet());
 8004bf4:	f007 fb2e 	bl	800c254 <osKernelGetTickCount>
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfe:	2100      	movs	r1, #0
 8004c00:	2001      	movs	r0, #1
 8004c02:	f007 fc3e 	bl	800c482 <osThreadFlagsWait>
 8004c06:	4605      	mov	r5, r0
 8004c08:	f007 fc1a 	bl	800c440 <osThreadFlagsGet>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	462a      	mov	r2, r5
 8004c10:	4621      	mov	r1, r4
 8004c12:	480c      	ldr	r0, [pc, #48]	; (8004c44 <StartTask06+0x198>)
 8004c14:	f00c f93a 	bl	8010e8c <iprintf>
	  osDelay(10);
 8004c18:	e752      	b.n	8004ac0 <StartTask06+0x14>
 8004c1a:	bf00      	nop
 8004c1c:	20000bc8 	.word	0x20000bc8
 8004c20:	0801571c 	.word	0x0801571c
 8004c24:	08015730 	.word	0x08015730
 8004c28:	20000c8c 	.word	0x20000c8c
 8004c2c:	20000060 	.word	0x20000060
 8004c30:	08015740 	.word	0x08015740
 8004c34:	08015750 	.word	0x08015750
 8004c38:	08015760 	.word	0x08015760
 8004c3c:	08015770 	.word	0x08015770
 8004c40:	20000bd5 	.word	0x20000bd5
 8004c44:	0801577c 	.word	0x0801577c

08004c48 <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void *argument)
{
 8004c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c4c:	ed2d 8b02 	vpush	{d8}
 8004c50:	b0a5      	sub	sp, #148	; 0x94
 8004c52:	af08      	add	r7, sp, #32
 8004c54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask07 */
	uint8_t tmparr[4][12] = {0};
 8004c56:	f107 0314 	add.w	r3, r7, #20
 8004c5a:	2230      	movs	r2, #48	; 0x30
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f00b fc0d 	bl	801047e <memset>
	uint8_t tempID = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t rx_checksum[4] = {0,};
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	613b      	str	r3, [r7, #16]
	uint16_t real_angle[4] = {0,};
 8004c6e:	f107 0308 	add.w	r3, r7, #8
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	605a      	str	r2, [r3, #4]

	osDelay(25000);//for initializing steering motor
 8004c78:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8004c7c:	f007 fc82 	bl	800c584 <osDelay>
//	HAL_UART_Receive_IT(&huart3, tmp_rx , SERVO_RXBUFLEN);

	uint32_t lastTime = osKernelGetTickCount();
 8004c80:	f007 fae8 	bl	800c254 <osKernelGetTickCount>
 8004c84:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STEERING;
 8004c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c88:	3364      	adds	r3, #100	; 0x64
 8004c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
	osDelayUntil(lastTime);
 8004c8c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004c8e:	f007 fc94 	bl	800c5ba <osDelayUntil>

	for(int k=0;k<4;k++){//copy data to buffer
 8004c92:	2300      	movs	r3, #0
 8004c94:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c96:	e074      	b.n	8004d82 <StartTask07+0x13a>
		for(int i=0;i<12;i++){
 8004c98:	2300      	movs	r3, #0
 8004c9a:	667b      	str	r3, [r7, #100]	; 0x64
 8004c9c:	e06b      	b.n	8004d76 <StartTask07+0x12e>
			if(tmp_rx[k][i]==0xFF && tmp_rx[k][i+1]==0xFE)//parsing
 8004c9e:	497b      	ldr	r1, [pc, #492]	; (8004e8c <StartTask07+0x244>)
 8004ca0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	18ca      	adds	r2, r1, r3
 8004cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cae:	4413      	add	r3, r2
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2bff      	cmp	r3, #255	; 0xff
 8004cb4:	d15c      	bne.n	8004d70 <StartTask07+0x128>
 8004cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cb8:	1c59      	adds	r1, r3, #1
 8004cba:	4874      	ldr	r0, [pc, #464]	; (8004e8c <StartTask07+0x244>)
 8004cbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4403      	add	r3, r0
 8004cc8:	440b      	add	r3, r1
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2bfe      	cmp	r3, #254	; 0xfe
 8004cce:	d14f      	bne.n	8004d70 <StartTask07+0x128>
			{
				tempID = tmp_rx[k][i+2];
 8004cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cd2:	1c99      	adds	r1, r3, #2
 8004cd4:	486d      	ldr	r0, [pc, #436]	; (8004e8c <StartTask07+0x244>)
 8004cd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cd8:	4613      	mov	r3, r2
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	4413      	add	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4403      	add	r3, r0
 8004ce2:	440b      	add	r3, r1
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				for(int j=0;j<12;j++)
 8004cea:	2300      	movs	r3, #0
 8004cec:	663b      	str	r3, [r7, #96]	; 0x60
 8004cee:	e03c      	b.n	8004d6a <StartTask07+0x122>
				{
					if(i+j<12){tmparr[tempID][j]=tmp_rx[k][i+j];}
 8004cf0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cf4:	4413      	add	r3, r2
 8004cf6:	2b0b      	cmp	r3, #11
 8004cf8:	dc19      	bgt.n	8004d2e <StartTask07+0xe6>
 8004cfa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004cfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cfe:	18d0      	adds	r0, r2, r3
 8004d00:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004d04:	4c61      	ldr	r4, [pc, #388]	; (8004e8c <StartTask07+0x244>)
 8004d06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d08:	460b      	mov	r3, r1
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	440b      	add	r3, r1
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4423      	add	r3, r4
 8004d12:	4403      	add	r3, r0
 8004d14:	7819      	ldrb	r1, [r3, #0]
 8004d16:	4613      	mov	r3, r2
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	3370      	adds	r3, #112	; 0x70
 8004d20:	19da      	adds	r2, r3, r7
 8004d22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d24:	4413      	add	r3, r2
 8004d26:	3b5c      	subs	r3, #92	; 0x5c
 8004d28:	460a      	mov	r2, r1
 8004d2a:	701a      	strb	r2, [r3, #0]
 8004d2c:	e01a      	b.n	8004d64 <StartTask07+0x11c>
					else {tmparr[tempID][j]=tmp_rx[k][i+j-12];}
 8004d2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d32:	4413      	add	r3, r2
 8004d34:	f1a3 000c 	sub.w	r0, r3, #12
 8004d38:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004d3c:	4c53      	ldr	r4, [pc, #332]	; (8004e8c <StartTask07+0x244>)
 8004d3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d40:	460b      	mov	r3, r1
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	440b      	add	r3, r1
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4423      	add	r3, r4
 8004d4a:	4403      	add	r3, r0
 8004d4c:	7819      	ldrb	r1, [r3, #0]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	3370      	adds	r3, #112	; 0x70
 8004d58:	19da      	adds	r2, r3, r7
 8004d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3b5c      	subs	r3, #92	; 0x5c
 8004d60:	460a      	mov	r2, r1
 8004d62:	701a      	strb	r2, [r3, #0]
				for(int j=0;j<12;j++)
 8004d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d66:	3301      	adds	r3, #1
 8004d68:	663b      	str	r3, [r7, #96]	; 0x60
 8004d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d6c:	2b0b      	cmp	r3, #11
 8004d6e:	ddbf      	ble.n	8004cf0 <StartTask07+0xa8>
		for(int i=0;i<12;i++){
 8004d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d72:	3301      	adds	r3, #1
 8004d74:	667b      	str	r3, [r7, #100]	; 0x64
 8004d76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d78:	2b0b      	cmp	r3, #11
 8004d7a:	dd90      	ble.n	8004c9e <StartTask07+0x56>
	for(int k=0;k<4;k++){//copy data to buffer
 8004d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d7e:	3301      	adds	r3, #1
 8004d80:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	dd87      	ble.n	8004c98 <StartTask07+0x50>
				}
			}
		}
	}

	printf("%d: t07\n", osKernelGetTickCount());
 8004d88:	f007 fa64 	bl	800c254 <osKernelGetTickCount>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4619      	mov	r1, r3
 8004d90:	483f      	ldr	r0, [pc, #252]	; (8004e90 <StartTask07+0x248>)
 8004d92:	f00c f87b 	bl	8010e8c <iprintf>
	if(flag_rx == 1){
 8004d96:	4b3f      	ldr	r3, [pc, #252]	; (8004e94 <StartTask07+0x24c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d156      	bne.n	8004e4c <StartTask07+0x204>

		for(int i=0;i<SERVO_RXBUFLEN;i++){printf("%02x ", tmparr[0][i]);} printf("\n");
 8004d9e:	2300      	movs	r3, #0
 8004da0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004da2:	e00b      	b.n	8004dbc <StartTask07+0x174>
 8004da4:	f107 0214 	add.w	r2, r7, #20
 8004da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004daa:	4413      	add	r3, r2
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	4619      	mov	r1, r3
 8004db0:	4839      	ldr	r0, [pc, #228]	; (8004e98 <StartTask07+0x250>)
 8004db2:	f00c f86b 	bl	8010e8c <iprintf>
 8004db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db8:	3301      	adds	r3, #1
 8004dba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dbe:	2b0b      	cmp	r3, #11
 8004dc0:	ddf0      	ble.n	8004da4 <StartTask07+0x15c>
 8004dc2:	200a      	movs	r0, #10
 8004dc4:	f00c f87a 	bl	8010ebc <putchar>
		for(int i=0;i<SERVO_RXBUFLEN;i++){printf("%02x ", tmparr[1][i]);} printf("\n");
 8004dc8:	2300      	movs	r3, #0
 8004dca:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dcc:	e00b      	b.n	8004de6 <StartTask07+0x19e>
 8004dce:	f107 0220 	add.w	r2, r7, #32
 8004dd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dd4:	4413      	add	r3, r2
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	482f      	ldr	r0, [pc, #188]	; (8004e98 <StartTask07+0x250>)
 8004ddc:	f00c f856 	bl	8010e8c <iprintf>
 8004de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004de2:	3301      	adds	r3, #1
 8004de4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004de8:	2b0b      	cmp	r3, #11
 8004dea:	ddf0      	ble.n	8004dce <StartTask07+0x186>
 8004dec:	200a      	movs	r0, #10
 8004dee:	f00c f865 	bl	8010ebc <putchar>
		for(int i=0;i<SERVO_RXBUFLEN;i++){printf("%02x ", tmparr[2][i]);} printf("\n");
 8004df2:	2300      	movs	r3, #0
 8004df4:	657b      	str	r3, [r7, #84]	; 0x54
 8004df6:	e00b      	b.n	8004e10 <StartTask07+0x1c8>
 8004df8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dfe:	4413      	add	r3, r2
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	4619      	mov	r1, r3
 8004e04:	4824      	ldr	r0, [pc, #144]	; (8004e98 <StartTask07+0x250>)
 8004e06:	f00c f841 	bl	8010e8c <iprintf>
 8004e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e12:	2b0b      	cmp	r3, #11
 8004e14:	ddf0      	ble.n	8004df8 <StartTask07+0x1b0>
 8004e16:	200a      	movs	r0, #10
 8004e18:	f00c f850 	bl	8010ebc <putchar>
		for(int i=0;i<SERVO_RXBUFLEN;i++){printf("%02x ", tmparr[3][i]);} printf("\n");
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e20:	e00b      	b.n	8004e3a <StartTask07+0x1f2>
 8004e22:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e28:	4413      	add	r3, r2
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	481a      	ldr	r0, [pc, #104]	; (8004e98 <StartTask07+0x250>)
 8004e30:	f00c f82c 	bl	8010e8c <iprintf>
 8004e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e36:	3301      	adds	r3, #1
 8004e38:	653b      	str	r3, [r7, #80]	; 0x50
 8004e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e3c:	2b0b      	cmp	r3, #11
 8004e3e:	ddf0      	ble.n	8004e22 <StartTask07+0x1da>
 8004e40:	200a      	movs	r0, #10
 8004e42:	f00c f83b 	bl	8010ebc <putchar>

		flag_rx = 0;
 8004e46:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <StartTask07+0x24c>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
	}

	for(int j=0;j<4;j++){
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e50:	e08a      	b.n	8004f68 <StartTask07+0x320>
		rx_checksum[j] = tmparr[j][2]+tmparr[j][3];//id+length
 8004e52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e54:	4613      	mov	r3, r2
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	4413      	add	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	3370      	adds	r3, #112	; 0x70
 8004e5e:	443b      	add	r3, r7
 8004e60:	3b5a      	subs	r3, #90	; 0x5a
 8004e62:	7819      	ldrb	r1, [r3, #0]
 8004e64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e66:	4613      	mov	r3, r2
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	3370      	adds	r3, #112	; 0x70
 8004e70:	443b      	add	r3, r7
 8004e72:	3b59      	subs	r3, #89	; 0x59
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	440b      	add	r3, r1
 8004e78:	b2d9      	uxtb	r1, r3
 8004e7a:	f107 0210 	add.w	r2, r7, #16
 8004e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e80:	4413      	add	r3, r2
 8004e82:	460a      	mov	r2, r1
 8004e84:	701a      	strb	r2, [r3, #0]

		for(int i=5;i<tmparr[j][3]+4;i++) {
 8004e86:	2305      	movs	r3, #5
 8004e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e8a:	e022      	b.n	8004ed2 <StartTask07+0x28a>
 8004e8c:	20000d28 	.word	0x20000d28
 8004e90:	08015798 	.word	0x08015798
 8004e94:	20000d24 	.word	0x20000d24
 8004e98:	080157a4 	.word	0x080157a4
			rx_checksum[j] += tmparr[j][i];
 8004e9c:	f107 0210 	add.w	r2, r7, #16
 8004ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea2:	4413      	add	r3, r2
 8004ea4:	7819      	ldrb	r1, [r3, #0]
 8004ea6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	3370      	adds	r3, #112	; 0x70
 8004eb2:	19da      	adds	r2, r3, r7
 8004eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb6:	4413      	add	r3, r2
 8004eb8:	3b5c      	subs	r3, #92	; 0x5c
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	440b      	add	r3, r1
 8004ebe:	b2d9      	uxtb	r1, r3
 8004ec0:	f107 0210 	add.w	r2, r7, #16
 8004ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec6:	4413      	add	r3, r2
 8004ec8:	460a      	mov	r2, r1
 8004eca:	701a      	strb	r2, [r3, #0]
		for(int i=5;i<tmparr[j][3]+4;i++) {
 8004ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ece:	3301      	adds	r3, #1
 8004ed0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ed2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	3370      	adds	r3, #112	; 0x70
 8004ede:	443b      	add	r3, r7
 8004ee0:	3b59      	subs	r3, #89	; 0x59
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	3303      	adds	r3, #3
 8004ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	ddd7      	ble.n	8004e9c <StartTask07+0x254>
		}//checksum ~(Packet 2 + Packet 3 + Packet '5' + ?? + Packet N) [1byte]
		rx_checksum[j] ^= 0xff;//invert value. checksum done.
 8004eec:	f107 0210 	add.w	r2, r7, #16
 8004ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef2:	4413      	add	r3, r2
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	b2d9      	uxtb	r1, r3
 8004efa:	f107 0210 	add.w	r2, r7, #16
 8004efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f00:	4413      	add	r3, r2
 8004f02:	460a      	mov	r2, r1
 8004f04:	701a      	strb	r2, [r3, #0]


		if(tmparr[j][4]==rx_checksum[j]){
 8004f06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f08:	4613      	mov	r3, r2
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	3370      	adds	r3, #112	; 0x70
 8004f12:	443b      	add	r3, r7
 8004f14:	3b58      	subs	r3, #88	; 0x58
 8004f16:	781a      	ldrb	r2, [r3, #0]
 8004f18:	f107 0110 	add.w	r1, r7, #16
 8004f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f1e:	440b      	add	r3, r1
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d11d      	bne.n	8004f62 <StartTask07+0x31a>
			real_angle[j] = tmparr[j][7]*0x100+tmparr[j][8];
 8004f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f28:	4613      	mov	r3, r2
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	3370      	adds	r3, #112	; 0x70
 8004f32:	443b      	add	r3, r7
 8004f34:	3b55      	subs	r3, #85	; 0x55
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	b299      	uxth	r1, r3
 8004f3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f40:	4613      	mov	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	3370      	adds	r3, #112	; 0x70
 8004f4a:	443b      	add	r3, r7
 8004f4c:	3b54      	subs	r3, #84	; 0x54
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	440b      	add	r3, r1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	3370      	adds	r3, #112	; 0x70
 8004f5c:	443b      	add	r3, r7
 8004f5e:	f823 2c68 	strh.w	r2, [r3, #-104]
	for(int j=0;j<4;j++){
 8004f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f64:	3301      	adds	r3, #1
 8004f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	f77f af71 	ble.w	8004e52 <StartTask07+0x20a>
			//printf("%d: angle[%d]: %03d \n", osKernelGetTickCount(), j, real_angle[j]);
		}
	}


	if(real_angle[0]>real_angle[1]){
 8004f70:	893a      	ldrh	r2, [r7, #8]
 8004f72:	897b      	ldrh	r3, [r7, #10]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	f240 809b 	bls.w	80050b0 <StartTask07+0x468>
		real_angle_i = deg2rad((double)((round((double)(real_angle[0])/100) + round((double)(real_angle[2])/100)) /2));//unit 0.01
 8004f7a:	893b      	ldrh	r3, [r7, #8]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fb fac1 	bl	8000504 <__aeabi_ui2d>
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	4b47      	ldr	r3, [pc, #284]	; (80050a4 <StartTask07+0x45c>)
 8004f88:	f7fb fc60 	bl	800084c <__aeabi_ddiv>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	ec43 2b17 	vmov	d7, r2, r3
 8004f94:	eeb0 0a47 	vmov.f32	s0, s14
 8004f98:	eef0 0a67 	vmov.f32	s1, s15
 8004f9c:	f00e f834 	bl	8013008 <round>
 8004fa0:	ec55 4b10 	vmov	r4, r5, d0
 8004fa4:	89bb      	ldrh	r3, [r7, #12]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fb faac 	bl	8000504 <__aeabi_ui2d>
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	4b3c      	ldr	r3, [pc, #240]	; (80050a4 <StartTask07+0x45c>)
 8004fb2:	f7fb fc4b 	bl	800084c <__aeabi_ddiv>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	ec43 2b17 	vmov	d7, r2, r3
 8004fbe:	eeb0 0a47 	vmov.f32	s0, s14
 8004fc2:	eef0 0a67 	vmov.f32	s1, s15
 8004fc6:	f00e f81f 	bl	8013008 <round>
 8004fca:	ec53 2b10 	vmov	r2, r3, d0
 8004fce:	4620      	mov	r0, r4
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	f7fb f95b 	bl	800028c <__adddf3>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4610      	mov	r0, r2
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fe6:	f7fb fc31 	bl	800084c <__aeabi_ddiv>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4610      	mov	r0, r2
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	f7fb fdb1 	bl	8000b58 <__aeabi_d2iz>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	b21b      	sxth	r3, r3
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fd fac4 	bl	8002588 <deg2rad>
 8005000:	eeb0 7a40 	vmov.f32	s14, s0
 8005004:	eef0 7a60 	vmov.f32	s15, s1
 8005008:	4b27      	ldr	r3, [pc, #156]	; (80050a8 <StartTask07+0x460>)
 800500a:	ed83 7b00 	vstr	d7, [r3]
		real_angle_o = deg2rad((double)((round((double)(real_angle[1])/100) + round((double)(real_angle[3])/100)) /2));//unit 0.01
 800500e:	897b      	ldrh	r3, [r7, #10]
 8005010:	4618      	mov	r0, r3
 8005012:	f7fb fa77 	bl	8000504 <__aeabi_ui2d>
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	4b22      	ldr	r3, [pc, #136]	; (80050a4 <StartTask07+0x45c>)
 800501c:	f7fb fc16 	bl	800084c <__aeabi_ddiv>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	ec43 2b17 	vmov	d7, r2, r3
 8005028:	eeb0 0a47 	vmov.f32	s0, s14
 800502c:	eef0 0a67 	vmov.f32	s1, s15
 8005030:	f00d ffea 	bl	8013008 <round>
 8005034:	ec55 4b10 	vmov	r4, r5, d0
 8005038:	89fb      	ldrh	r3, [r7, #14]
 800503a:	4618      	mov	r0, r3
 800503c:	f7fb fa62 	bl	8000504 <__aeabi_ui2d>
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	4b17      	ldr	r3, [pc, #92]	; (80050a4 <StartTask07+0x45c>)
 8005046:	f7fb fc01 	bl	800084c <__aeabi_ddiv>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	ec43 2b17 	vmov	d7, r2, r3
 8005052:	eeb0 0a47 	vmov.f32	s0, s14
 8005056:	eef0 0a67 	vmov.f32	s1, s15
 800505a:	f00d ffd5 	bl	8013008 <round>
 800505e:	ec53 2b10 	vmov	r2, r3, d0
 8005062:	4620      	mov	r0, r4
 8005064:	4629      	mov	r1, r5
 8005066:	f7fb f911 	bl	800028c <__adddf3>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	4610      	mov	r0, r2
 8005070:	4619      	mov	r1, r3
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800507a:	f7fb fbe7 	bl	800084c <__aeabi_ddiv>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4610      	mov	r0, r2
 8005084:	4619      	mov	r1, r3
 8005086:	f7fb fd67 	bl	8000b58 <__aeabi_d2iz>
 800508a:	4603      	mov	r3, r0
 800508c:	b21b      	sxth	r3, r3
 800508e:	4618      	mov	r0, r3
 8005090:	f7fd fa7a 	bl	8002588 <deg2rad>
 8005094:	eeb0 7a40 	vmov.f32	s14, s0
 8005098:	eef0 7a60 	vmov.f32	s15, s1
 800509c:	4b03      	ldr	r3, [pc, #12]	; (80050ac <StartTask07+0x464>)
 800509e:	ed83 7b00 	vstr	d7, [r3]
 80050a2:	e099      	b.n	80051d8 <StartTask07+0x590>
 80050a4:	40590000 	.word	0x40590000
 80050a8:	20000bf8 	.word	0x20000bf8
 80050ac:	20000c00 	.word	0x20000c00
	}

	else{
		real_angle_i = deg2rad((double)((round((double)(real_angle[1])/100) + round((double)(real_angle[3])/100)) /2));//unit 0.01
 80050b0:	897b      	ldrh	r3, [r7, #10]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fb fa26 	bl	8000504 <__aeabi_ui2d>
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	4bda      	ldr	r3, [pc, #872]	; (8005428 <StartTask07+0x7e0>)
 80050be:	f7fb fbc5 	bl	800084c <__aeabi_ddiv>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	ec43 2b17 	vmov	d7, r2, r3
 80050ca:	eeb0 0a47 	vmov.f32	s0, s14
 80050ce:	eef0 0a67 	vmov.f32	s1, s15
 80050d2:	f00d ff99 	bl	8013008 <round>
 80050d6:	ec55 4b10 	vmov	r4, r5, d0
 80050da:	89fb      	ldrh	r3, [r7, #14]
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fb fa11 	bl	8000504 <__aeabi_ui2d>
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	4bd0      	ldr	r3, [pc, #832]	; (8005428 <StartTask07+0x7e0>)
 80050e8:	f7fb fbb0 	bl	800084c <__aeabi_ddiv>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	ec43 2b17 	vmov	d7, r2, r3
 80050f4:	eeb0 0a47 	vmov.f32	s0, s14
 80050f8:	eef0 0a67 	vmov.f32	s1, s15
 80050fc:	f00d ff84 	bl	8013008 <round>
 8005100:	ec53 2b10 	vmov	r2, r3, d0
 8005104:	4620      	mov	r0, r4
 8005106:	4629      	mov	r1, r5
 8005108:	f7fb f8c0 	bl	800028c <__adddf3>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4610      	mov	r0, r2
 8005112:	4619      	mov	r1, r3
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800511c:	f7fb fb96 	bl	800084c <__aeabi_ddiv>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4610      	mov	r0, r2
 8005126:	4619      	mov	r1, r3
 8005128:	f7fb fd16 	bl	8000b58 <__aeabi_d2iz>
 800512c:	4603      	mov	r3, r0
 800512e:	b21b      	sxth	r3, r3
 8005130:	4618      	mov	r0, r3
 8005132:	f7fd fa29 	bl	8002588 <deg2rad>
 8005136:	eeb0 7a40 	vmov.f32	s14, s0
 800513a:	eef0 7a60 	vmov.f32	s15, s1
 800513e:	4bbb      	ldr	r3, [pc, #748]	; (800542c <StartTask07+0x7e4>)
 8005140:	ed83 7b00 	vstr	d7, [r3]
		real_angle_o = deg2rad((double)((round((double)(real_angle[0])/100) + round((double)(real_angle[2])/100)) /2));//unit 0.01
 8005144:	893b      	ldrh	r3, [r7, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f7fb f9dc 	bl	8000504 <__aeabi_ui2d>
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	4bb5      	ldr	r3, [pc, #724]	; (8005428 <StartTask07+0x7e0>)
 8005152:	f7fb fb7b 	bl	800084c <__aeabi_ddiv>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	ec43 2b17 	vmov	d7, r2, r3
 800515e:	eeb0 0a47 	vmov.f32	s0, s14
 8005162:	eef0 0a67 	vmov.f32	s1, s15
 8005166:	f00d ff4f 	bl	8013008 <round>
 800516a:	ec55 4b10 	vmov	r4, r5, d0
 800516e:	89bb      	ldrh	r3, [r7, #12]
 8005170:	4618      	mov	r0, r3
 8005172:	f7fb f9c7 	bl	8000504 <__aeabi_ui2d>
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	4bab      	ldr	r3, [pc, #684]	; (8005428 <StartTask07+0x7e0>)
 800517c:	f7fb fb66 	bl	800084c <__aeabi_ddiv>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	ec43 2b17 	vmov	d7, r2, r3
 8005188:	eeb0 0a47 	vmov.f32	s0, s14
 800518c:	eef0 0a67 	vmov.f32	s1, s15
 8005190:	f00d ff3a 	bl	8013008 <round>
 8005194:	ec53 2b10 	vmov	r2, r3, d0
 8005198:	4620      	mov	r0, r4
 800519a:	4629      	mov	r1, r5
 800519c:	f7fb f876 	bl	800028c <__adddf3>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4610      	mov	r0, r2
 80051a6:	4619      	mov	r1, r3
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051b0:	f7fb fb4c 	bl	800084c <__aeabi_ddiv>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4610      	mov	r0, r2
 80051ba:	4619      	mov	r1, r3
 80051bc:	f7fb fccc 	bl	8000b58 <__aeabi_d2iz>
 80051c0:	4603      	mov	r3, r0
 80051c2:	b21b      	sxth	r3, r3
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fd f9df 	bl	8002588 <deg2rad>
 80051ca:	eeb0 7a40 	vmov.f32	s14, s0
 80051ce:	eef0 7a60 	vmov.f32	s15, s1
 80051d2:	4b97      	ldr	r3, [pc, #604]	; (8005430 <StartTask07+0x7e8>)
 80051d4:	ed83 7b00 	vstr	d7, [r3]
	}

	real_angle_c = (atan2(230*tan(real_angle_i),230+(209.5*tan(real_angle_i)))
 80051d8:	4b94      	ldr	r3, [pc, #592]	; (800542c <StartTask07+0x7e4>)
 80051da:	ed93 7b00 	vldr	d7, [r3]
 80051de:	eeb0 0a47 	vmov.f32	s0, s14
 80051e2:	eef0 0a67 	vmov.f32	s1, s15
 80051e6:	f00d ffaf 	bl	8013148 <tan>
 80051ea:	ec51 0b10 	vmov	r0, r1, d0
 80051ee:	a38a      	add	r3, pc, #552	; (adr r3, 8005418 <StartTask07+0x7d0>)
 80051f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f4:	f7fb fa00 	bl	80005f8 <__aeabi_dmul>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	ec43 2b18 	vmov	d8, r2, r3
 8005200:	4b8a      	ldr	r3, [pc, #552]	; (800542c <StartTask07+0x7e4>)
 8005202:	ed93 7b00 	vldr	d7, [r3]
 8005206:	eeb0 0a47 	vmov.f32	s0, s14
 800520a:	eef0 0a67 	vmov.f32	s1, s15
 800520e:	f00d ff9b 	bl	8013148 <tan>
 8005212:	ec51 0b10 	vmov	r0, r1, d0
 8005216:	a382      	add	r3, pc, #520	; (adr r3, 8005420 <StartTask07+0x7d8>)
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	f7fb f9ec 	bl	80005f8 <__aeabi_dmul>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4610      	mov	r0, r2
 8005226:	4619      	mov	r1, r3
 8005228:	a37b      	add	r3, pc, #492	; (adr r3, 8005418 <StartTask07+0x7d0>)
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	f7fb f82d 	bl	800028c <__adddf3>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	ec43 2b17 	vmov	d7, r2, r3
 800523a:	eeb0 1a47 	vmov.f32	s2, s14
 800523e:	eef0 1a67 	vmov.f32	s3, s15
 8005242:	eeb0 0a48 	vmov.f32	s0, s16
 8005246:	eef0 0a68 	vmov.f32	s1, s17
 800524a:	f00d ffe5 	bl	8013218 <atan2>
 800524e:	ec55 4b10 	vmov	r4, r5, d0
				+ atan2(230*tan(real_angle_o),230-(209.5*tan(real_angle_o))))/2;
 8005252:	4b77      	ldr	r3, [pc, #476]	; (8005430 <StartTask07+0x7e8>)
 8005254:	ed93 7b00 	vldr	d7, [r3]
 8005258:	eeb0 0a47 	vmov.f32	s0, s14
 800525c:	eef0 0a67 	vmov.f32	s1, s15
 8005260:	f00d ff72 	bl	8013148 <tan>
 8005264:	ec51 0b10 	vmov	r0, r1, d0
 8005268:	a36b      	add	r3, pc, #428	; (adr r3, 8005418 <StartTask07+0x7d0>)
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	f7fb f9c3 	bl	80005f8 <__aeabi_dmul>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	ec43 2b18 	vmov	d8, r2, r3
 800527a:	4b6d      	ldr	r3, [pc, #436]	; (8005430 <StartTask07+0x7e8>)
 800527c:	ed93 7b00 	vldr	d7, [r3]
 8005280:	eeb0 0a47 	vmov.f32	s0, s14
 8005284:	eef0 0a67 	vmov.f32	s1, s15
 8005288:	f00d ff5e 	bl	8013148 <tan>
 800528c:	ec51 0b10 	vmov	r0, r1, d0
 8005290:	a363      	add	r3, pc, #396	; (adr r3, 8005420 <StartTask07+0x7d8>)
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f7fb f9af 	bl	80005f8 <__aeabi_dmul>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	a15e      	add	r1, pc, #376	; (adr r1, 8005418 <StartTask07+0x7d0>)
 80052a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052a4:	f7fa fff0 	bl	8000288 <__aeabi_dsub>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	ec43 2b17 	vmov	d7, r2, r3
 80052b0:	eeb0 1a47 	vmov.f32	s2, s14
 80052b4:	eef0 1a67 	vmov.f32	s3, s15
 80052b8:	eeb0 0a48 	vmov.f32	s0, s16
 80052bc:	eef0 0a68 	vmov.f32	s1, s17
 80052c0:	f00d ffaa 	bl	8013218 <atan2>
 80052c4:	ec53 2b10 	vmov	r2, r3, d0
 80052c8:	4620      	mov	r0, r4
 80052ca:	4629      	mov	r1, r5
 80052cc:	f7fa ffde 	bl	800028c <__adddf3>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4610      	mov	r0, r2
 80052d6:	4619      	mov	r1, r3
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052e0:	f7fb fab4 	bl	800084c <__aeabi_ddiv>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
	real_angle_c = (atan2(230*tan(real_angle_i),230+(209.5*tan(real_angle_i)))
 80052e8:	4952      	ldr	r1, [pc, #328]	; (8005434 <StartTask07+0x7ec>)
 80052ea:	e9c1 2300 	strd	r2, r3, [r1]

	printf("%d: angle %f %f %f %f %f\n", osKernelGetTickCount(), atan2(230*tan(real_angle_i),230+(209.5*tan(real_angle_i))),
 80052ee:	f006 ffb1 	bl	800c254 <osKernelGetTickCount>
 80052f2:	4606      	mov	r6, r0
 80052f4:	4b4d      	ldr	r3, [pc, #308]	; (800542c <StartTask07+0x7e4>)
 80052f6:	ed93 7b00 	vldr	d7, [r3]
 80052fa:	eeb0 0a47 	vmov.f32	s0, s14
 80052fe:	eef0 0a67 	vmov.f32	s1, s15
 8005302:	f00d ff21 	bl	8013148 <tan>
 8005306:	ec51 0b10 	vmov	r0, r1, d0
 800530a:	a343      	add	r3, pc, #268	; (adr r3, 8005418 <StartTask07+0x7d0>)
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f7fb f972 	bl	80005f8 <__aeabi_dmul>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	ec43 2b18 	vmov	d8, r2, r3
 800531c:	4b43      	ldr	r3, [pc, #268]	; (800542c <StartTask07+0x7e4>)
 800531e:	ed93 7b00 	vldr	d7, [r3]
 8005322:	eeb0 0a47 	vmov.f32	s0, s14
 8005326:	eef0 0a67 	vmov.f32	s1, s15
 800532a:	f00d ff0d 	bl	8013148 <tan>
 800532e:	ec51 0b10 	vmov	r0, r1, d0
 8005332:	a33b      	add	r3, pc, #236	; (adr r3, 8005420 <StartTask07+0x7d8>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	f7fb f95e 	bl	80005f8 <__aeabi_dmul>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4610      	mov	r0, r2
 8005342:	4619      	mov	r1, r3
 8005344:	a334      	add	r3, pc, #208	; (adr r3, 8005418 <StartTask07+0x7d0>)
 8005346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534a:	f7fa ff9f 	bl	800028c <__adddf3>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	ec43 2b17 	vmov	d7, r2, r3
 8005356:	eeb0 1a47 	vmov.f32	s2, s14
 800535a:	eef0 1a67 	vmov.f32	s3, s15
 800535e:	eeb0 0a48 	vmov.f32	s0, s16
 8005362:	eef0 0a68 	vmov.f32	s1, s17
 8005366:	f00d ff57 	bl	8013218 <atan2>
 800536a:	ec59 8b10 	vmov	r8, r9, d0
			atan2(230*tan(real_angle_o),230-(209.5*tan(real_angle_o))), real_angle_c, real_angle_i, real_angle_o);
 800536e:	4b30      	ldr	r3, [pc, #192]	; (8005430 <StartTask07+0x7e8>)
 8005370:	ed93 7b00 	vldr	d7, [r3]
 8005374:	eeb0 0a47 	vmov.f32	s0, s14
 8005378:	eef0 0a67 	vmov.f32	s1, s15
 800537c:	f00d fee4 	bl	8013148 <tan>
 8005380:	ec51 0b10 	vmov	r0, r1, d0
	printf("%d: angle %f %f %f %f %f\n", osKernelGetTickCount(), atan2(230*tan(real_angle_i),230+(209.5*tan(real_angle_i))),
 8005384:	a324      	add	r3, pc, #144	; (adr r3, 8005418 <StartTask07+0x7d0>)
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	f7fb f935 	bl	80005f8 <__aeabi_dmul>
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	ec43 2b18 	vmov	d8, r2, r3
			atan2(230*tan(real_angle_o),230-(209.5*tan(real_angle_o))), real_angle_c, real_angle_i, real_angle_o);
 8005396:	4b26      	ldr	r3, [pc, #152]	; (8005430 <StartTask07+0x7e8>)
 8005398:	ed93 7b00 	vldr	d7, [r3]
 800539c:	eeb0 0a47 	vmov.f32	s0, s14
 80053a0:	eef0 0a67 	vmov.f32	s1, s15
 80053a4:	f00d fed0 	bl	8013148 <tan>
 80053a8:	ec51 0b10 	vmov	r0, r1, d0
 80053ac:	a31c      	add	r3, pc, #112	; (adr r3, 8005420 <StartTask07+0x7d8>)
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	f7fb f921 	bl	80005f8 <__aeabi_dmul>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
	printf("%d: angle %f %f %f %f %f\n", osKernelGetTickCount(), atan2(230*tan(real_angle_i),230+(209.5*tan(real_angle_i))),
 80053ba:	a117      	add	r1, pc, #92	; (adr r1, 8005418 <StartTask07+0x7d0>)
 80053bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053c0:	f7fa ff62 	bl	8000288 <__aeabi_dsub>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	ec43 2b17 	vmov	d7, r2, r3
 80053cc:	eeb0 1a47 	vmov.f32	s2, s14
 80053d0:	eef0 1a67 	vmov.f32	s3, s15
 80053d4:	eeb0 0a48 	vmov.f32	s0, s16
 80053d8:	eef0 0a68 	vmov.f32	s1, s17
 80053dc:	f00d ff1c 	bl	8013218 <atan2>
 80053e0:	eeb0 7a40 	vmov.f32	s14, s0
 80053e4:	eef0 7a60 	vmov.f32	s15, s1
 80053e8:	4b12      	ldr	r3, [pc, #72]	; (8005434 <StartTask07+0x7ec>)
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	490f      	ldr	r1, [pc, #60]	; (800542c <StartTask07+0x7e4>)
 80053f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053f4:	4c0e      	ldr	r4, [pc, #56]	; (8005430 <StartTask07+0x7e8>)
 80053f6:	e9d4 4500 	ldrd	r4, r5, [r4]
 80053fa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80053fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005402:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005406:	ed8d 7b00 	vstr	d7, [sp]
 800540a:	4642      	mov	r2, r8
 800540c:	464b      	mov	r3, r9
 800540e:	4631      	mov	r1, r6
 8005410:	4809      	ldr	r0, [pc, #36]	; (8005438 <StartTask07+0x7f0>)
 8005412:	f00b fd3b 	bl	8010e8c <iprintf>
  {
 8005416:	e436      	b.n	8004c86 <StartTask07+0x3e>
 8005418:	00000000 	.word	0x00000000
 800541c:	406cc000 	.word	0x406cc000
 8005420:	00000000 	.word	0x00000000
 8005424:	406a3000 	.word	0x406a3000
 8005428:	40590000 	.word	0x40590000
 800542c:	20000bf8 	.word	0x20000bf8
 8005430:	20000c00 	.word	0x20000c00
 8005434:	20000bf0 	.word	0x20000bf0
 8005438:	080157ac 	.word	0x080157ac

0800543c <VelStopTimerCallback>:
  /* USER CODE END StartTask07 */
}

/* VelStopTimerCallback function */
void VelStopTimerCallback(void *argument)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN VelStopTimerCallback */

	//must be check this function
	int32_t TmpFlag = Stopflagcheck(Xbot_R, 1);
 8005444:	2101      	movs	r1, #1
 8005446:	2000      	movs	r0, #0
 8005448:	f7fc ffe6 	bl	8002418 <Stopflagcheck>
 800544c:	60f8      	str	r0, [r7, #12]

	printf("%d: VelStopTimer:%d %d\n", osKernelGetTickCount(),TmpFlag,Pre_Stop_flag);
 800544e:	f006 ff01 	bl	800c254 <osKernelGetTickCount>
 8005452:	4601      	mov	r1, r0
 8005454:	4b0f      	ldr	r3, [pc, #60]	; (8005494 <VelStopTimerCallback+0x58>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	480f      	ldr	r0, [pc, #60]	; (8005498 <VelStopTimerCallback+0x5c>)
 800545c:	f00b fd16 	bl	8010e8c <iprintf>
	if(Pre_Stop_flag != TmpFlag){
 8005460:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <VelStopTimerCallback+0x58>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	429a      	cmp	r2, r3
 8005468:	d003      	beq.n	8005472 <VelStopTimerCallback+0x36>
		Pre_Stop_flag = TmpFlag;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4a09      	ldr	r2, [pc, #36]	; (8005494 <VelStopTimerCallback+0x58>)
 800546e:	6013      	str	r3, [r2, #0]
	}
	else {Stopflagcheck(Xbot_W, 0);
	printf("%d: VelStop2Stop_flag: %d\n", osKernelGetTickCount(), Stop_flag);
	}
  /* USER CODE END VelStopTimerCallback */
}
 8005470:	e00c      	b.n	800548c <VelStopTimerCallback+0x50>
	else {Stopflagcheck(Xbot_W, 0);
 8005472:	2100      	movs	r1, #0
 8005474:	2001      	movs	r0, #1
 8005476:	f7fc ffcf 	bl	8002418 <Stopflagcheck>
	printf("%d: VelStop2Stop_flag: %d\n", osKernelGetTickCount(), Stop_flag);
 800547a:	f006 feeb 	bl	800c254 <osKernelGetTickCount>
 800547e:	4601      	mov	r1, r0
 8005480:	4b06      	ldr	r3, [pc, #24]	; (800549c <VelStopTimerCallback+0x60>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	4806      	ldr	r0, [pc, #24]	; (80054a0 <VelStopTimerCallback+0x64>)
 8005488:	f00b fd00 	bl	8010e8c <iprintf>
}
 800548c:	bf00      	nop
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	20000bdc 	.word	0x20000bdc
 8005498:	080157c8 	.word	0x080157c8
 800549c:	20000bd8 	.word	0x20000bd8
 80054a0:	080157e0 	.word	0x080157e0

080054a4 <EndModeDTimerCallback>:

/* EndModeDTimerCallback function */
void EndModeDTimerCallback(void *argument)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EndModeDTimerCallback */
	//EndModeD = 1;
	timerflag = 1;
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <EndModeDTimerCallback+0x20>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	701a      	strb	r2, [r3, #0]
	EndMode = 1;
 80054b2:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <EndModeDTimerCallback+0x24>)
 80054b4:	2201      	movs	r2, #1
 80054b6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EndModeDTimerCallback */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	2000005d 	.word	0x2000005d
 80054c8:	2000005e 	.word	0x2000005e

080054cc <SendCanTimerCallback>:

/* SendCanTimerCallback function */
void SendCanTimerCallback(void *argument)
{
 80054cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ce:	b08b      	sub	sp, #44	; 0x2c
 80054d0:	af06      	add	r7, sp, #24
 80054d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SendCanTimerCallback */
	//send can message by 10hz
	printf("%d: SendCanTimerCallback1\n", osKernelGetTickCount());
 80054d4:	f006 febe 	bl	800c254 <osKernelGetTickCount>
 80054d8:	4603      	mov	r3, r0
 80054da:	4619      	mov	r1, r3
 80054dc:	4848      	ldr	r0, [pc, #288]	; (8005600 <SendCanTimerCallback+0x134>)
 80054de:	f00b fcd5 	bl	8010e8c <iprintf>

	Vel_PDOMsg(1, TxPDO0, Tar_cmd_FL, Tar_cmd_FR);
 80054e2:	4b48      	ldr	r3, [pc, #288]	; (8005604 <SendCanTimerCallback+0x138>)
 80054e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054e8:	461a      	mov	r2, r3
 80054ea:	4b47      	ldr	r3, [pc, #284]	; (8005608 <SendCanTimerCallback+0x13c>)
 80054ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054f0:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80054f4:	2001      	movs	r0, #1
 80054f6:	f7fb ffc3 	bl	8001480 <Vel_PDOMsg>
	Vel_PDOMsg(2, TxPDO0, Tar_cmd_RL, Tar_cmd_RR);
 80054fa:	4b44      	ldr	r3, [pc, #272]	; (800560c <SendCanTimerCallback+0x140>)
 80054fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005500:	461a      	mov	r2, r3
 8005502:	4b43      	ldr	r3, [pc, #268]	; (8005610 <SendCanTimerCallback+0x144>)
 8005504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005508:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800550c:	2002      	movs	r0, #2
 800550e:	f7fb ffb7 	bl	8001480 <Vel_PDOMsg>


	debugcansend(candbg);
 8005512:	4840      	ldr	r0, [pc, #256]	; (8005614 <SendCanTimerCallback+0x148>)
 8005514:	f7fc f8fe 	bl	8001714 <debugcansend>
	for(int i=0;i<8;i++){candbg[i]=0;}
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	e007      	b.n	800552e <SendCanTimerCallback+0x62>
 800551e:	4a3d      	ldr	r2, [pc, #244]	; (8005614 <SendCanTimerCallback+0x148>)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	2200      	movs	r2, #0
 8005526:	701a      	strb	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3301      	adds	r3, #1
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b07      	cmp	r3, #7
 8005532:	ddf4      	ble.n	800551e <SendCanTimerCallback+0x52>
	//printf("%d: angle_rad_c %d %d %d %f %f %d\n", osKernelGetTickCount(), rad2deg(angle_rad_c), rad2deg(angle_rad_i), rad2deg(angle_rad_o), angle_rad_i, angle_rad_o, Tar_cmd_FL);
	printf("%d: SteDeg %d %d %d %d\n", osKernelGetTickCount(), SteDeg[0], SteDeg[1], SteDeg[2], SteDeg[3]);
 8005534:	f006 fe8e 	bl	800c254 <osKernelGetTickCount>
 8005538:	4601      	mov	r1, r0
 800553a:	4b37      	ldr	r3, [pc, #220]	; (8005618 <SendCanTimerCallback+0x14c>)
 800553c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005540:	4618      	mov	r0, r3
 8005542:	4b35      	ldr	r3, [pc, #212]	; (8005618 <SendCanTimerCallback+0x14c>)
 8005544:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005548:	461c      	mov	r4, r3
 800554a:	4b33      	ldr	r3, [pc, #204]	; (8005618 <SendCanTimerCallback+0x14c>)
 800554c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005550:	461a      	mov	r2, r3
 8005552:	4b31      	ldr	r3, [pc, #196]	; (8005618 <SendCanTimerCallback+0x14c>)
 8005554:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005558:	9301      	str	r3, [sp, #4]
 800555a:	9200      	str	r2, [sp, #0]
 800555c:	4623      	mov	r3, r4
 800555e:	4602      	mov	r2, r0
 8005560:	482e      	ldr	r0, [pc, #184]	; (800561c <SendCanTimerCallback+0x150>)
 8005562:	f00b fc93 	bl	8010e8c <iprintf>
	sendCan(0x7D1, sendcanbuf, 8, 0);//(uint32_t ID, uint8_t data[8], uint8_t len, uint8_t ext)
 8005566:	2300      	movs	r3, #0
 8005568:	2208      	movs	r2, #8
 800556a:	492d      	ldr	r1, [pc, #180]	; (8005620 <SendCanTimerCallback+0x154>)
 800556c:	f240 70d1 	movw	r0, #2001	; 0x7d1
 8005570:	f7fb fdee 	bl	8001150 <sendCan>
	printf("%d: SteDeg %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(), sendcanbuf[0], sendcanbuf[1], sendcanbuf[2],
 8005574:	f006 fe6e 	bl	800c254 <osKernelGetTickCount>
 8005578:	4601      	mov	r1, r0
 800557a:	4b29      	ldr	r3, [pc, #164]	; (8005620 <SendCanTimerCallback+0x154>)
 800557c:	f993 3000 	ldrsb.w	r3, [r3]
 8005580:	469c      	mov	ip, r3
 8005582:	4b27      	ldr	r3, [pc, #156]	; (8005620 <SendCanTimerCallback+0x154>)
 8005584:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005588:	469e      	mov	lr, r3
 800558a:	4b25      	ldr	r3, [pc, #148]	; (8005620 <SendCanTimerCallback+0x154>)
 800558c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005590:	461a      	mov	r2, r3
			sendcanbuf[3], sendcanbuf[4], sendcanbuf[5], sendcanbuf[6], sendcanbuf[7]);
 8005592:	4b23      	ldr	r3, [pc, #140]	; (8005620 <SendCanTimerCallback+0x154>)
 8005594:	f993 3003 	ldrsb.w	r3, [r3, #3]
	printf("%d: SteDeg %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(), sendcanbuf[0], sendcanbuf[1], sendcanbuf[2],
 8005598:	4618      	mov	r0, r3
			sendcanbuf[3], sendcanbuf[4], sendcanbuf[5], sendcanbuf[6], sendcanbuf[7]);
 800559a:	4b21      	ldr	r3, [pc, #132]	; (8005620 <SendCanTimerCallback+0x154>)
 800559c:	f993 3004 	ldrsb.w	r3, [r3, #4]
	printf("%d: SteDeg %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(), sendcanbuf[0], sendcanbuf[1], sendcanbuf[2],
 80055a0:	461c      	mov	r4, r3
			sendcanbuf[3], sendcanbuf[4], sendcanbuf[5], sendcanbuf[6], sendcanbuf[7]);
 80055a2:	4b1f      	ldr	r3, [pc, #124]	; (8005620 <SendCanTimerCallback+0x154>)
 80055a4:	f993 3005 	ldrsb.w	r3, [r3, #5]
	printf("%d: SteDeg %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(), sendcanbuf[0], sendcanbuf[1], sendcanbuf[2],
 80055a8:	461d      	mov	r5, r3
			sendcanbuf[3], sendcanbuf[4], sendcanbuf[5], sendcanbuf[6], sendcanbuf[7]);
 80055aa:	4b1d      	ldr	r3, [pc, #116]	; (8005620 <SendCanTimerCallback+0x154>)
 80055ac:	f993 3006 	ldrsb.w	r3, [r3, #6]
	printf("%d: SteDeg %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(), sendcanbuf[0], sendcanbuf[1], sendcanbuf[2],
 80055b0:	461e      	mov	r6, r3
			sendcanbuf[3], sendcanbuf[4], sendcanbuf[5], sendcanbuf[6], sendcanbuf[7]);
 80055b2:	4b1b      	ldr	r3, [pc, #108]	; (8005620 <SendCanTimerCallback+0x154>)
 80055b4:	f993 3007 	ldrsb.w	r3, [r3, #7]
	printf("%d: SteDeg %d %d %d %d %d %d %d %d\n", osKernelGetTickCount(), sendcanbuf[0], sendcanbuf[1], sendcanbuf[2],
 80055b8:	9305      	str	r3, [sp, #20]
 80055ba:	9604      	str	r6, [sp, #16]
 80055bc:	9503      	str	r5, [sp, #12]
 80055be:	9402      	str	r4, [sp, #8]
 80055c0:	9001      	str	r0, [sp, #4]
 80055c2:	9200      	str	r2, [sp, #0]
 80055c4:	4673      	mov	r3, lr
 80055c6:	4662      	mov	r2, ip
 80055c8:	4816      	ldr	r0, [pc, #88]	; (8005624 <SendCanTimerCallback+0x158>)
 80055ca:	f00b fc5f 	bl	8010e8c <iprintf>
	for(int i=0;i<8;i++){canbuf[i]=0;}
 80055ce:	2300      	movs	r3, #0
 80055d0:	60bb      	str	r3, [r7, #8]
 80055d2:	e007      	b.n	80055e4 <SendCanTimerCallback+0x118>
 80055d4:	4a14      	ldr	r2, [pc, #80]	; (8005628 <SendCanTimerCallback+0x15c>)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	4413      	add	r3, r2
 80055da:	2200      	movs	r2, #0
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	3301      	adds	r3, #1
 80055e2:	60bb      	str	r3, [r7, #8]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b07      	cmp	r3, #7
 80055e8:	ddf4      	ble.n	80055d4 <SendCanTimerCallback+0x108>
	printf("%d: SendCanTimerCallback2\n", osKernelGetTickCount());
 80055ea:	f006 fe33 	bl	800c254 <osKernelGetTickCount>
 80055ee:	4603      	mov	r3, r0
 80055f0:	4619      	mov	r1, r3
 80055f2:	480e      	ldr	r0, [pc, #56]	; (800562c <SendCanTimerCallback+0x160>)
 80055f4:	f00b fc4a 	bl	8010e8c <iprintf>
  /* USER CODE END SendCanTimerCallback */
}
 80055f8:	bf00      	nop
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005600:	080157fc 	.word	0x080157fc
 8005604:	20000c70 	.word	0x20000c70
 8005608:	20000c72 	.word	0x20000c72
 800560c:	20000c74 	.word	0x20000c74
 8005610:	20000c76 	.word	0x20000c76
 8005614:	20000bc0 	.word	0x20000bc0
 8005618:	20000bcc 	.word	0x20000bcc
 800561c:	08015818 	.word	0x08015818
 8005620:	20000c80 	.word	0x20000c80
 8005624:	08015830 	.word	0x08015830
 8005628:	20000c78 	.word	0x20000c78
 800562c:	08015854 	.word	0x08015854

08005630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	; 0x28
 8005634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005636:	f107 0314 	add.w	r3, r7, #20
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	605a      	str	r2, [r3, #4]
 8005640:	609a      	str	r2, [r3, #8]
 8005642:	60da      	str	r2, [r3, #12]
 8005644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005646:	2300      	movs	r3, #0
 8005648:	613b      	str	r3, [r7, #16]
 800564a:	4b5d      	ldr	r3, [pc, #372]	; (80057c0 <MX_GPIO_Init+0x190>)
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	4a5c      	ldr	r2, [pc, #368]	; (80057c0 <MX_GPIO_Init+0x190>)
 8005650:	f043 0304 	orr.w	r3, r3, #4
 8005654:	6313      	str	r3, [r2, #48]	; 0x30
 8005656:	4b5a      	ldr	r3, [pc, #360]	; (80057c0 <MX_GPIO_Init+0x190>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	613b      	str	r3, [r7, #16]
 8005660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
 8005666:	4b56      	ldr	r3, [pc, #344]	; (80057c0 <MX_GPIO_Init+0x190>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	4a55      	ldr	r2, [pc, #340]	; (80057c0 <MX_GPIO_Init+0x190>)
 800566c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005670:	6313      	str	r3, [r2, #48]	; 0x30
 8005672:	4b53      	ldr	r3, [pc, #332]	; (80057c0 <MX_GPIO_Init+0x190>)
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800567e:	2300      	movs	r3, #0
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	4b4f      	ldr	r3, [pc, #316]	; (80057c0 <MX_GPIO_Init+0x190>)
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	4a4e      	ldr	r2, [pc, #312]	; (80057c0 <MX_GPIO_Init+0x190>)
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	6313      	str	r3, [r2, #48]	; 0x30
 800568e:	4b4c      	ldr	r3, [pc, #304]	; (80057c0 <MX_GPIO_Init+0x190>)
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	60bb      	str	r3, [r7, #8]
 8005698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800569a:	2300      	movs	r3, #0
 800569c:	607b      	str	r3, [r7, #4]
 800569e:	4b48      	ldr	r3, [pc, #288]	; (80057c0 <MX_GPIO_Init+0x190>)
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	4a47      	ldr	r2, [pc, #284]	; (80057c0 <MX_GPIO_Init+0x190>)
 80056a4:	f043 0302 	orr.w	r3, r3, #2
 80056a8:	6313      	str	r3, [r2, #48]	; 0x30
 80056aa:	4b45      	ldr	r3, [pc, #276]	; (80057c0 <MX_GPIO_Init+0x190>)
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	607b      	str	r3, [r7, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80056b6:	2300      	movs	r3, #0
 80056b8:	603b      	str	r3, [r7, #0]
 80056ba:	4b41      	ldr	r3, [pc, #260]	; (80057c0 <MX_GPIO_Init+0x190>)
 80056bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056be:	4a40      	ldr	r2, [pc, #256]	; (80057c0 <MX_GPIO_Init+0x190>)
 80056c0:	f043 0308 	orr.w	r3, r3, #8
 80056c4:	6313      	str	r3, [r2, #48]	; 0x30
 80056c6:	4b3e      	ldr	r3, [pc, #248]	; (80057c0 <MX_GPIO_Init+0x190>)
 80056c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 80056d2:	2200      	movs	r2, #0
 80056d4:	f64f 413e 	movw	r1, #64574	; 0xfc3e
 80056d8:	483a      	ldr	r0, [pc, #232]	; (80057c4 <MX_GPIO_Init+0x194>)
 80056da:	f003 f863 	bl	80087a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_DE_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 80056de:	2200      	movs	r2, #0
 80056e0:	f244 0110 	movw	r1, #16400	; 0x4010
 80056e4:	4838      	ldr	r0, [pc, #224]	; (80057c8 <MX_GPIO_Init+0x198>)
 80056e6:	f003 f85d 	bl	80087a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80056ea:	2200      	movs	r2, #0
 80056ec:	2104      	movs	r1, #4
 80056ee:	4837      	ldr	r0, [pc, #220]	; (80057cc <MX_GPIO_Init+0x19c>)
 80056f0:	f003 f858 	bl	80087a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC1
                           PC2 PC3 PC4 PC5
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 80056f4:	f64f 433e 	movw	r3, #64574	; 0xfc3e
 80056f8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056fa:	2301      	movs	r3, #1
 80056fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005702:	2300      	movs	r3, #0
 8005704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005706:	f107 0314 	add.w	r3, r7, #20
 800570a:	4619      	mov	r1, r3
 800570c:	482d      	ldr	r0, [pc, #180]	; (80057c4 <MX_GPIO_Init+0x194>)
 800570e:	f002 fe95 	bl	800843c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005712:	2301      	movs	r3, #1
 8005714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005716:	2303      	movs	r3, #3
 8005718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800571a:	2300      	movs	r3, #0
 800571c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800571e:	f107 0314 	add.w	r3, r7, #20
 8005722:	4619      	mov	r1, r3
 8005724:	4827      	ldr	r0, [pc, #156]	; (80057c4 <MX_GPIO_Init+0x194>)
 8005726:	f002 fe89 	bl	800843c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PS_SIG1_Pin|PS_SIG2_Pin|PS_SIG3_Pin;
 800572a:	2370      	movs	r3, #112	; 0x70
 800572c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800572e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8005732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005734:	2300      	movs	r3, #0
 8005736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005738:	f107 0314 	add.w	r3, r7, #20
 800573c:	4619      	mov	r1, r3
 800573e:	4824      	ldr	r0, [pc, #144]	; (80057d0 <MX_GPIO_Init+0x1a0>)
 8005740:	f002 fe7c 	bl	800843c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS_SIG4_Pin;
 8005744:	2380      	movs	r3, #128	; 0x80
 8005746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005748:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800574c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800574e:	2301      	movs	r3, #1
 8005750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS_SIG4_GPIO_Port, &GPIO_InitStruct);
 8005752:	f107 0314 	add.w	r3, r7, #20
 8005756:	4619      	mov	r1, r3
 8005758:	481d      	ldr	r0, [pc, #116]	; (80057d0 <MX_GPIO_Init+0x1a0>)
 800575a:	f002 fe6f 	bl	800843c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 */
  GPIO_InitStruct.Pin = RS485_DE_Pin|GPIO_PIN_4;
 800575e:	f244 0310 	movw	r3, #16400	; 0x4010
 8005762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005764:	2301      	movs	r3, #1
 8005766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005768:	2300      	movs	r3, #0
 800576a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800576c:	2300      	movs	r3, #0
 800576e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005770:	f107 0314 	add.w	r3, r7, #20
 8005774:	4619      	mov	r1, r3
 8005776:	4814      	ldr	r0, [pc, #80]	; (80057c8 <MX_GPIO_Init+0x198>)
 8005778:	f002 fe60 	bl	800843c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800577c:	2304      	movs	r3, #4
 800577e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005780:	2301      	movs	r3, #1
 8005782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005784:	2300      	movs	r3, #0
 8005786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005788:	2300      	movs	r3, #0
 800578a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800578c:	f107 0314 	add.w	r3, r7, #20
 8005790:	4619      	mov	r1, r3
 8005792:	480e      	ldr	r0, [pc, #56]	; (80057cc <MX_GPIO_Init+0x19c>)
 8005794:	f002 fe52 	bl	800843c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8005798:	2200      	movs	r2, #0
 800579a:	2105      	movs	r1, #5
 800579c:	200a      	movs	r0, #10
 800579e:	f002 fa13 	bl	8007bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80057a2:	200a      	movs	r0, #10
 80057a4:	f002 fa2c 	bl	8007c00 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80057a8:	2200      	movs	r2, #0
 80057aa:	2105      	movs	r1, #5
 80057ac:	2017      	movs	r0, #23
 80057ae:	f002 fa0b 	bl	8007bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80057b2:	2017      	movs	r0, #23
 80057b4:	f002 fa24 	bl	8007c00 <HAL_NVIC_EnableIRQ>

}
 80057b8:	bf00      	nop
 80057ba:	3728      	adds	r7, #40	; 0x28
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40023800 	.word	0x40023800
 80057c4:	40020800 	.word	0x40020800
 80057c8:	40020400 	.word	0x40020400
 80057cc:	40020c00 	.word	0x40020c00
 80057d0:	40020000 	.word	0x40020000

080057d4 <GPIO_disableirq>:

/* USER CODE BEGIN 2 */
void GPIO_disableirq(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80057d8:	200a      	movs	r0, #10
 80057da:	f002 fa1f 	bl	8007c1c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80057de:	2017      	movs	r0, #23
 80057e0:	f002 fa1c 	bl	8007c1c <HAL_NVIC_DisableIRQ>
}
 80057e4:	bf00      	nop
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <GPIO_enableirq>:

void GPIO_enableirq(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
	  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80057ec:	2200      	movs	r2, #0
 80057ee:	2105      	movs	r1, #5
 80057f0:	200a      	movs	r0, #10
 80057f2:	f002 f9e9 	bl	8007bc8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80057f6:	200a      	movs	r0, #10
 80057f8:	f002 fa02 	bl	8007c00 <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80057fc:	2200      	movs	r2, #0
 80057fe:	2105      	movs	r1, #5
 8005800:	2017      	movs	r0, #23
 8005802:	f002 f9e1 	bl	8007bc8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005806:	2017      	movs	r0, #23
 8005808:	f002 f9fa 	bl	8007c00 <HAL_NVIC_EnableIRQ>
}
 800580c:	bf00      	nop
 800580e:	bd80      	pop	{r7, pc}

08005810 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8005814:	4b18      	ldr	r3, [pc, #96]	; (8005878 <MX_I2C1_SMBUS_Init+0x68>)
 8005816:	4a19      	ldr	r2, [pc, #100]	; (800587c <MX_I2C1_SMBUS_Init+0x6c>)
 8005818:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.ClockSpeed = 100000;
 800581a:	4b17      	ldr	r3, [pc, #92]	; (8005878 <MX_I2C1_SMBUS_Init+0x68>)
 800581c:	4a18      	ldr	r2, [pc, #96]	; (8005880 <MX_I2C1_SMBUS_Init+0x70>)
 800581e:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.OwnAddress1 = 0;
 8005820:	4b15      	ldr	r3, [pc, #84]	; (8005878 <MX_I2C1_SMBUS_Init+0x68>)
 8005822:	2200      	movs	r2, #0
 8005824:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8005826:	4b14      	ldr	r3, [pc, #80]	; (8005878 <MX_I2C1_SMBUS_Init+0x68>)
 8005828:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800582c:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 800582e:	4b12      	ldr	r3, [pc, #72]	; (8005878 <MX_I2C1_SMBUS_Init+0x68>)
 8005830:	2200      	movs	r2, #0
 8005832:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8005834:	4b10      	ldr	r3, [pc, #64]	; (8005878 <MX_I2C1_SMBUS_Init+0x68>)
 8005836:	2200      	movs	r2, #0
 8005838:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 800583a:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <MX_I2C1_SMBUS_Init+0x68>)
 800583c:	2200      	movs	r2, #0
 800583e:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8005840:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <MX_I2C1_SMBUS_Init+0x68>)
 8005842:	2200      	movs	r2, #0
 8005844:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8005846:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <MX_I2C1_SMBUS_Init+0x68>)
 8005848:	2200      	movs	r2, #0
 800584a:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 800584c:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <MX_I2C1_SMBUS_Init+0x68>)
 800584e:	2202      	movs	r2, #2
 8005850:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8005852:	4809      	ldr	r0, [pc, #36]	; (8005878 <MX_I2C1_SMBUS_Init+0x68>)
 8005854:	f003 fc7c 	bl	8009150 <HAL_SMBUS_Init>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <MX_I2C1_SMBUS_Init+0x52>
  {
    Error_Handler();
 800585e:	f000 f93f 	bl	8005ae0 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 8005862:	4805      	ldr	r0, [pc, #20]	; (8005878 <MX_I2C1_SMBUS_Init+0x68>)
 8005864:	f003 fd2a 	bl	80092bc <HAL_SMBUS_EnableAlert_IT>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 800586e:	f000 f937 	bl	8005ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005872:	bf00      	nop
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000ccc 	.word	0x20000ccc
 800587c:	40005400 	.word	0x40005400
 8005880:	000186a0 	.word	0x000186a0

08005884 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	; 0x28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800588c:	f107 0314 	add.w	r3, r7, #20
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	605a      	str	r2, [r3, #4]
 8005896:	609a      	str	r2, [r3, #8]
 8005898:	60da      	str	r2, [r3, #12]
 800589a:	611a      	str	r2, [r3, #16]
  if(smbusHandle->Instance==I2C1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a19      	ldr	r2, [pc, #100]	; (8005908 <HAL_SMBUS_MspInit+0x84>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d12b      	bne.n	80058fe <HAL_SMBUS_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058a6:	2300      	movs	r3, #0
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	4b18      	ldr	r3, [pc, #96]	; (800590c <HAL_SMBUS_MspInit+0x88>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	4a17      	ldr	r2, [pc, #92]	; (800590c <HAL_SMBUS_MspInit+0x88>)
 80058b0:	f043 0302 	orr.w	r3, r3, #2
 80058b4:	6313      	str	r3, [r2, #48]	; 0x30
 80058b6:	4b15      	ldr	r3, [pc, #84]	; (800590c <HAL_SMBUS_MspInit+0x88>)
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB5     ------> I2C1_SMBA
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80058c2:	23e0      	movs	r3, #224	; 0xe0
 80058c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058c6:	2312      	movs	r3, #18
 80058c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058ce:	2303      	movs	r3, #3
 80058d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80058d2:	2304      	movs	r3, #4
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058d6:	f107 0314 	add.w	r3, r7, #20
 80058da:	4619      	mov	r1, r3
 80058dc:	480c      	ldr	r0, [pc, #48]	; (8005910 <HAL_SMBUS_MspInit+0x8c>)
 80058de:	f002 fdad 	bl	800843c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	4b09      	ldr	r3, [pc, #36]	; (800590c <HAL_SMBUS_MspInit+0x88>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	4a08      	ldr	r2, [pc, #32]	; (800590c <HAL_SMBUS_MspInit+0x88>)
 80058ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058f0:	6413      	str	r3, [r2, #64]	; 0x40
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <HAL_SMBUS_MspInit+0x88>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80058fe:	bf00      	nop
 8005900:	3728      	adds	r7, #40	; 0x28
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	40005400 	.word	0x40005400
 800590c:	40023800 	.word	0x40023800
 8005910:	40020400 	.word	0x40020400

08005914 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800591c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005920:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d013      	beq.n	8005954 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800592c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005930:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8005934:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00b      	beq.n	8005954 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800593c:	e000      	b.n	8005940 <ITM_SendChar+0x2c>
    {
      __NOP();
 800593e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8005940:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f9      	beq.n	800593e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800594a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8005954:	687b      	ldr	r3, [r7, #4]
}
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)//485 task for nuri motor must change uart port
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b086      	sub	sp, #24
 8005966:	af00      	add	r7, sp, #0
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	60b9      	str	r1, [r7, #8]
 800596c:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit_DMA(&huart2, (uint8_t *)ptr, (uint16_t)len);
//	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, (uint16_t)len, 100);
//	return (len);
//
	for(int i = 0; i < len; i++)
 800596e:	2300      	movs	r3, #0
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	e009      	b.n	8005988 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	60ba      	str	r2, [r7, #8]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff ffc9 	bl	8005914 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	3301      	adds	r3, #1
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	429a      	cmp	r2, r3
 800598e:	dbf1      	blt.n	8005974 <_write+0x12>
	}
	return len;
 8005990:	687b      	ldr	r3, [r7, #4]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800599e:	f001 f939 	bl	8006c14 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);//must be for stabilization of EXTI
 80059a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059a6:	f001 f977 	bl	8006c98 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80059aa:	f000 f81d 	bl	80059e8 <SystemClock_Config>
  MX_TIM3_Init();
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80059ae:	f7ff fe3f 	bl	8005630 <MX_GPIO_Init>
  GPIO_disableirq();
 80059b2:	f7ff ff0f 	bl	80057d4 <GPIO_disableirq>
  MX_CAN1_Init();
 80059b6:	f7fb faeb 	bl	8000f90 <MX_CAN1_Init>
  CAN_disableirq();
 80059ba:	f7fb fb6f 	bl	800109c <CAN_disableirq>
  MX_TIM1_Init();
 80059be:	f000 fbe1 	bl	8006184 <MX_TIM1_Init>
  MX_I2C1_SMBUS_Init();
 80059c2:	f7ff ff25 	bl	8005810 <MX_I2C1_SMBUS_Init>
  MX_DMA_Init();
 80059c6:	f7fb fe27 	bl	8001618 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80059ca:	f000 ffdd 	bl	8006988 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80059ce:	f000 ffb1 	bl	8006934 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 80059d2:	f000 fd05 	bl	80063e0 <MX_TIM8_Init>
  MX_TIM3_Init();
 80059d6:	f000 fc87 	bl	80062e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80059da:	f006 fbf1 	bl	800c1c0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80059de:	f7fc fe45 	bl	800266c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80059e2:	f006 fc11 	bl	800c208 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80059e6:	e7fe      	b.n	80059e6 <main+0x4c>

080059e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b094      	sub	sp, #80	; 0x50
 80059ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80059ee:	f107 0320 	add.w	r3, r7, #32
 80059f2:	2230      	movs	r2, #48	; 0x30
 80059f4:	2100      	movs	r1, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f00a fd41 	bl	801047e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80059fc:	f107 030c 	add.w	r3, r7, #12
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	605a      	str	r2, [r3, #4]
 8005a06:	609a      	str	r2, [r3, #8]
 8005a08:	60da      	str	r2, [r3, #12]
 8005a0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60bb      	str	r3, [r7, #8]
 8005a10:	4b28      	ldr	r3, [pc, #160]	; (8005ab4 <SystemClock_Config+0xcc>)
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	4a27      	ldr	r2, [pc, #156]	; (8005ab4 <SystemClock_Config+0xcc>)
 8005a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8005a1c:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <SystemClock_Config+0xcc>)
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a24:	60bb      	str	r3, [r7, #8]
 8005a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a28:	2300      	movs	r3, #0
 8005a2a:	607b      	str	r3, [r7, #4]
 8005a2c:	4b22      	ldr	r3, [pc, #136]	; (8005ab8 <SystemClock_Config+0xd0>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a21      	ldr	r2, [pc, #132]	; (8005ab8 <SystemClock_Config+0xd0>)
 8005a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	4b1f      	ldr	r3, [pc, #124]	; (8005ab8 <SystemClock_Config+0xd0>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a40:	607b      	str	r3, [r7, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005a44:	2301      	movs	r3, #1
 8005a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005a48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a4e:	2302      	movs	r3, #2
 8005a50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005a52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8005a58:	2306      	movs	r3, #6
 8005a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005a5c:	23a8      	movs	r3, #168	; 0xa8
 8005a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005a60:	2302      	movs	r3, #2
 8005a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005a64:	2304      	movs	r3, #4
 8005a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a68:	f107 0320 	add.w	r3, r7, #32
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f002 fee5 	bl	800883c <HAL_RCC_OscConfig>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005a78:	f000 f832 	bl	8005ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a7c:	230f      	movs	r3, #15
 8005a7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a80:	2302      	movs	r3, #2
 8005a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a84:	2300      	movs	r3, #0
 8005a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005a88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005a8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005a94:	f107 030c 	add.w	r3, r7, #12
 8005a98:	2105      	movs	r1, #5
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f003 f946 	bl	8008d2c <HAL_RCC_ClockConfig>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005aa6:	f000 f81b 	bl	8005ae0 <Error_Handler>
  }
}
 8005aaa:	bf00      	nop
 8005aac:	3750      	adds	r7, #80	; 0x50
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	40007000 	.word	0x40007000

08005abc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a04      	ldr	r2, [pc, #16]	; (8005adc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d101      	bne.n	8005ad2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005ace:	f001 f8c3 	bl	8006c58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005ad2:	bf00      	nop
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40001000 	.word	0x40001000

08005ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005ae4:	b672      	cpsid	i
}
 8005ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005ae8:	e7fe      	b.n	8005ae8 <Error_Handler+0x8>
	...

08005aec <HAL_UART_RxCpltCallback>:
void ServoMotor_init()
{
	HAL_UART_Receive_IT(&huart3, tmp_rx, 12);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a11      	ldr	r2, [pc, #68]	; (8005b40 <HAL_UART_RxCpltCallback+0x54>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d11c      	bne.n	8005b38 <HAL_UART_RxCpltCallback+0x4c>
		if(rx_i == 3){
 8005afe:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <HAL_UART_RxCpltCallback+0x58>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d106      	bne.n	8005b14 <HAL_UART_RxCpltCallback+0x28>
			rx_i=-1;
 8005b06:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <HAL_UART_RxCpltCallback+0x58>)
 8005b08:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0c:	601a      	str	r2, [r3, #0]
			flag_rx = 1;
 8005b0e:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <HAL_UART_RxCpltCallback+0x5c>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart3, tmp_rx[++rx_i], 12);
 8005b14:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <HAL_UART_RxCpltCallback+0x58>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	4a0a      	ldr	r2, [pc, #40]	; (8005b44 <HAL_UART_RxCpltCallback+0x58>)
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <HAL_UART_RxCpltCallback+0x58>)
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4613      	mov	r3, r2
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4a08      	ldr	r2, [pc, #32]	; (8005b4c <HAL_UART_RxCpltCallback+0x60>)
 8005b2c:	4413      	add	r3, r2
 8005b2e:	220c      	movs	r2, #12
 8005b30:	4619      	mov	r1, r3
 8005b32:	4807      	ldr	r0, [pc, #28]	; (8005b50 <HAL_UART_RxCpltCallback+0x64>)
 8005b34:	f005 fa11 	bl	800af5a <HAL_UART_Receive_IT>

	}//SET INTERRUPT
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40004800 	.word	0x40004800
 8005b44:	20000d1c 	.word	0x20000d1c
 8005b48:	20000d24 	.word	0x20000d24
 8005b4c:	20000d28 	.word	0x20000d28
 8005b50:	20001044 	.word	0x20001044

08005b54 <ServoMotor_write>:

void ServoMotor_write(const uint8_t* str)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b62:	4815      	ldr	r0, [pc, #84]	; (8005bb8 <ServoMotor_write+0x64>)
 8005b64:	f002 fe1e 	bl	80087a4 <HAL_GPIO_WritePin>
    if(Read_flag == 1){
 8005b68:	4b14      	ldr	r3, [pc, #80]	; (8005bbc <ServoMotor_write+0x68>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d10c      	bne.n	8005b8a <ServoMotor_write+0x36>
    	HAL_NVIC_DisableIRQ(USART3_IRQn); //Rx Callback 함수 Disable
 8005b70:	2027      	movs	r0, #39	; 0x27
 8005b72:	f002 f853 	bl	8007c1c <HAL_NVIC_DisableIRQ>
    	HAL_UART_Transmit(&huart3, str, 6, 100);
 8005b76:	2364      	movs	r3, #100	; 0x64
 8005b78:	2206      	movs	r2, #6
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	4810      	ldr	r0, [pc, #64]	; (8005bc0 <ServoMotor_write+0x6c>)
 8005b7e:	f005 f95a 	bl	800ae36 <HAL_UART_Transmit>
    	HAL_NVIC_EnableIRQ(USART3_IRQn);  //Rx callback 함수 enable
 8005b82:	2027      	movs	r0, #39	; 0x27
 8005b84:	f002 f83c 	bl	8007c00 <HAL_NVIC_EnableIRQ>
 8005b88:	e00b      	b.n	8005ba2 <ServoMotor_write+0x4e>
    }
    else {
    	HAL_NVIC_DisableIRQ(USART3_IRQn); //Rx Callback 함수 Disable
 8005b8a:	2027      	movs	r0, #39	; 0x27
 8005b8c:	f002 f846 	bl	8007c1c <HAL_NVIC_DisableIRQ>
    	HAL_UART_Transmit(&huart3, str, SERVO_BUFLEN, 100);
 8005b90:	2364      	movs	r3, #100	; 0x64
 8005b92:	220b      	movs	r2, #11
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	480a      	ldr	r0, [pc, #40]	; (8005bc0 <ServoMotor_write+0x6c>)
 8005b98:	f005 f94d 	bl	800ae36 <HAL_UART_Transmit>
    	HAL_NVIC_EnableIRQ(USART3_IRQn);  //Rx callback 함수 enable
 8005b9c:	2027      	movs	r0, #39	; 0x27
 8005b9e:	f002 f82f 	bl	8007c00 <HAL_NVIC_EnableIRQ>
    }

    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ba8:	4803      	ldr	r0, [pc, #12]	; (8005bb8 <ServoMotor_write+0x64>)
 8005baa:	f002 fdfb 	bl	80087a4 <HAL_GPIO_WritePin>
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40020400 	.word	0x40020400
 8005bbc:	20000d58 	.word	0x20000d58
 8005bc0:	20001044 	.word	0x20001044

08005bc4 <ServoMotor_writeDMA>:

void ServoMotor_writeDMA(const uint8_t* str)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bd2:	480d      	ldr	r0, [pc, #52]	; (8005c08 <ServoMotor_writeDMA+0x44>)
 8005bd4:	f002 fde6 	bl	80087a4 <HAL_GPIO_WritePin>
    //osDelay(6);//because transmit_DMA
    if(HAL_UART_Transmit_DMA(&huart3,str, 48)!= HAL_OK){Error_Handler();}
 8005bd8:	2230      	movs	r2, #48	; 0x30
 8005bda:	6879      	ldr	r1, [r7, #4]
 8005bdc:	480b      	ldr	r0, [pc, #44]	; (8005c0c <ServoMotor_writeDMA+0x48>)
 8005bde:	f005 f9ed 	bl	800afbc <HAL_UART_Transmit_DMA>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <ServoMotor_writeDMA+0x28>
 8005be8:	f7ff ff7a 	bl	8005ae0 <Error_Handler>
    osDelay(6);//because transmit_DMA
 8005bec:	2006      	movs	r0, #6
 8005bee:	f006 fcc9 	bl	800c584 <osDelay>
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bf8:	4803      	ldr	r0, [pc, #12]	; (8005c08 <ServoMotor_writeDMA+0x44>)
 8005bfa:	f002 fdd3 	bl	80087a4 <HAL_GPIO_WritePin>
}
 8005bfe:	bf00      	nop
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	40020400 	.word	0x40020400
 8005c0c:	20001044 	.word	0x20001044

08005c10 <DataSetSteering>:
    ServoMotor_write(buf);
    
}

void DataSetSteering(const uint8_t* str, uint8_t id, uint8_t direction, unsigned short position, uint8_t init, uint8_t speed)
{
 8005c10:	b490      	push	{r4, r7}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	4608      	mov	r0, r1
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	4603      	mov	r3, r0
 8005c20:	70fb      	strb	r3, [r7, #3]
 8005c22:	460b      	mov	r3, r1
 8005c24:	70bb      	strb	r3, [r7, #2]
 8005c26:	4613      	mov	r3, r2
 8005c28:	803b      	strh	r3, [r7, #0]
	uint8_t buf[12];

    buf[0]=0xFF;//header
 8005c2a:	23ff      	movs	r3, #255	; 0xff
 8005c2c:	723b      	strb	r3, [r7, #8]
    buf[1]=0xFE;//header
 8005c2e:	23fe      	movs	r3, #254	; 0xfe
 8005c30:	727b      	strb	r3, [r7, #9]
    buf[2]=id;//id fixed
 8005c32:	78fb      	ldrb	r3, [r7, #3]
 8005c34:	72bb      	strb	r3, [r7, #10]
    buf[3]=0x06;//length
 8005c36:	2306      	movs	r3, #6
 8005c38:	72fb      	strb	r3, [r7, #11]
    if(init == 2){buf[3]=0x07;}
 8005c3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d101      	bne.n	8005c46 <DataSetSteering+0x36>
 8005c42:	2307      	movs	r3, #7
 8005c44:	72fb      	strb	r3, [r7, #11]
    buf[4]=0x00;//checksum
 8005c46:	2300      	movs	r3, #0
 8005c48:	733b      	strb	r3, [r7, #12]
    buf[5]=0x02 + init;//mode,  2=position control mode , 3=speed control mode
 8005c4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c4e:	3302      	adds	r3, #2
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	737b      	strb	r3, [r7, #13]
    if(init == 2){buf[5]=0x01;}
 8005c54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d101      	bne.n	8005c60 <DataSetSteering+0x50>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	737b      	strb	r3, [r7, #13]
    buf[6]=direction;//direction ccw=0x00, cw=0x01
 8005c60:	78bb      	ldrb	r3, [r7, #2]
 8005c62:	73bb      	strb	r3, [r7, #14]
    buf[7]=(char)(position>>8);//position
 8005c64:	883b      	ldrh	r3, [r7, #0]
 8005c66:	0a1b      	lsrs	r3, r3, #8
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	73fb      	strb	r3, [r7, #15]
    buf[8]=(char)position;//position
 8005c6e:	883b      	ldrh	r3, [r7, #0]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	743b      	strb	r3, [r7, #16]
    //printf("%d: speed0 %d\n", osKernelGetTickCount(), init);
    if(init == 1){buf[9]=STOP_SPEED;buf[10]=0x00; }//stop speed 0.3s>>0.6s 220520>>0.8s 220621
 8005c74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d104      	bne.n	8005c86 <DataSetSteering+0x76>
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	747b      	strb	r3, [r7, #17]
 8005c80:	2300      	movs	r3, #0
 8005c82:	74bb      	strb	r3, [r7, #18]
 8005c84:	e012      	b.n	8005cac <DataSetSteering+0x9c>
    else if(init == 0) {buf[9]=speed;buf[10]=0x00; }//speed, position second = 3s
 8005c86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d105      	bne.n	8005c9a <DataSetSteering+0x8a>
 8005c8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005c92:	747b      	strb	r3, [r7, #17]
 8005c94:	2300      	movs	r3, #0
 8005c96:	74bb      	strb	r3, [r7, #18]
 8005c98:	e008      	b.n	8005cac <DataSetSteering+0x9c>
    else if(init == 2) {buf[9]=0;buf[10]=speed; }//speed, position second = 3s
 8005c9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d104      	bne.n	8005cac <DataSetSteering+0x9c>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	747b      	strb	r3, [r7, #17]
 8005ca6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005caa:	74bb      	strb	r3, [r7, #18]
    //buf[10]=0x00;//reservation
    buf[11]=0x00;//reservation
 8005cac:	2300      	movs	r3, #0
 8005cae:	74fb      	strb	r3, [r7, #19]
    //printf("%d: DSS %d %d %d\n", osKernelGetTickCount(), speed, buf[9], buf[10]);
    //FF FE 00 06 EC 03 00 00 00 0A
    //0  1  2  3  4  5  6  7  8  9
    for(int i=2;i<SERVO_BUFLEN;i++) {checksum_val += buf[i];}//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	e00d      	b.n	8005cd2 <DataSetSteering+0xc2>
 8005cb6:	f107 0208 	add.w	r2, r7, #8
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	781a      	ldrb	r2, [r3, #0]
 8005cc0:	4b13      	ldr	r3, [pc, #76]	; (8005d10 <DataSetSteering+0x100>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	4b11      	ldr	r3, [pc, #68]	; (8005d10 <DataSetSteering+0x100>)
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b0a      	cmp	r3, #10
 8005cd6:	ddee      	ble.n	8005cb6 <DataSetSteering+0xa6>
    buf[4]=~(checksum_val);//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 8005cd8:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <DataSetSteering+0x100>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	733b      	strb	r3, [r7, #12]
    checksum_val=0x00;//checksum
 8005ce2:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <DataSetSteering+0x100>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	701a      	strb	r2, [r3, #0]

    memcpy(str+(12*id), buf, sizeof(buf));
 8005ce8:	78fa      	ldrb	r2, [r7, #3]
 8005cea:	4613      	mov	r3, r2
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	461c      	mov	r4, r3
 8005cfa:	f107 0308 	add.w	r3, r7, #8
 8005cfe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005d00:	6020      	str	r0, [r4, #0]
 8005d02:	6061      	str	r1, [r4, #4]
 8005d04:	60a2      	str	r2, [r4, #8]

}
 8005d06:	bf00      	nop
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc90      	pop	{r4, r7}
 8005d0e:	4770      	bx	lr
 8005d10:	20000d20 	.word	0x20000d20

08005d14 <DataReadSteering>:

void DataReadSteering(uint8_t id, uint8_t mode)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	460a      	mov	r2, r1
 8005d1e:	71fb      	strb	r3, [r7, #7]
 8005d20:	4613      	mov	r3, r2
 8005d22:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[6];

	buf[0]=0xFF;//header
 8005d24:	23ff      	movs	r3, #255	; 0xff
 8005d26:	733b      	strb	r3, [r7, #12]
	buf[1]=0xFE;//header
 8005d28:	23fe      	movs	r3, #254	; 0xfe
 8005d2a:	737b      	strb	r3, [r7, #13]
	buf[2]=id;//id fixed
 8005d2c:	79fb      	ldrb	r3, [r7, #7]
 8005d2e:	73bb      	strb	r3, [r7, #14]
	buf[3]=0x02;//length
 8005d30:	2302      	movs	r3, #2
 8005d32:	73fb      	strb	r3, [r7, #15]
	buf[4]=0x00;//checksum
 8005d34:	2300      	movs	r3, #0
 8005d36:	743b      	strb	r3, [r7, #16]
	buf[5]=mode;
 8005d38:	79bb      	ldrb	r3, [r7, #6]
 8005d3a:	747b      	strb	r3, [r7, #17]
	for(int i=2;i<6;i++) {checksum_val += buf[i];}//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	617b      	str	r3, [r7, #20]
 8005d40:	e00d      	b.n	8005d5e <DataReadSteering+0x4a>
 8005d42:	f107 020c 	add.w	r2, r7, #12
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	4413      	add	r3, r2
 8005d4a:	781a      	ldrb	r2, [r3, #0]
 8005d4c:	4b11      	ldr	r3, [pc, #68]	; (8005d94 <DataReadSteering+0x80>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	4413      	add	r3, r2
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	4b0f      	ldr	r3, [pc, #60]	; (8005d94 <DataReadSteering+0x80>)
 8005d56:	701a      	strb	r2, [r3, #0]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b05      	cmp	r3, #5
 8005d62:	ddee      	ble.n	8005d42 <DataReadSteering+0x2e>
	buf[4]=~(checksum_val);//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 8005d64:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <DataReadSteering+0x80>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	743b      	strb	r3, [r7, #16]
	checksum_val=0x00;//checksum
 8005d6e:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <DataReadSteering+0x80>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	701a      	strb	r2, [r3, #0]
	Read_flag = 1;//it must be fixed
 8005d74:	4b08      	ldr	r3, [pc, #32]	; (8005d98 <DataReadSteering+0x84>)
 8005d76:	2201      	movs	r2, #1
 8005d78:	601a      	str	r2, [r3, #0]
	ServoMotor_write(buf);
 8005d7a:	f107 030c 	add.w	r3, r7, #12
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff fee8 	bl	8005b54 <ServoMotor_write>
	Read_flag = 0;//it must be fixed
 8005d84:	4b04      	ldr	r3, [pc, #16]	; (8005d98 <DataReadSteering+0x84>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]
}
 8005d8a:	bf00      	nop
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000d20 	.word	0x20000d20
 8005d98:	20000d58 	.word	0x20000d58

08005d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005da2:	2300      	movs	r3, #0
 8005da4:	607b      	str	r3, [r7, #4]
 8005da6:	4b12      	ldr	r3, [pc, #72]	; (8005df0 <HAL_MspInit+0x54>)
 8005da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005daa:	4a11      	ldr	r2, [pc, #68]	; (8005df0 <HAL_MspInit+0x54>)
 8005dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005db0:	6453      	str	r3, [r2, #68]	; 0x44
 8005db2:	4b0f      	ldr	r3, [pc, #60]	; (8005df0 <HAL_MspInit+0x54>)
 8005db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dba:	607b      	str	r3, [r7, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	603b      	str	r3, [r7, #0]
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <HAL_MspInit+0x54>)
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	4a0a      	ldr	r2, [pc, #40]	; (8005df0 <HAL_MspInit+0x54>)
 8005dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8005dce:	4b08      	ldr	r3, [pc, #32]	; (8005df0 <HAL_MspInit+0x54>)
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005dda:	2200      	movs	r2, #0
 8005ddc:	210f      	movs	r1, #15
 8005dde:	f06f 0001 	mvn.w	r0, #1
 8005de2:	f001 fef1 	bl	8007bc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005de6:	bf00      	nop
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	40023800 	.word	0x40023800

08005df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08e      	sub	sp, #56	; 0x38
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005e04:	2300      	movs	r3, #0
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	4b33      	ldr	r3, [pc, #204]	; (8005ed8 <HAL_InitTick+0xe4>)
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	4a32      	ldr	r2, [pc, #200]	; (8005ed8 <HAL_InitTick+0xe4>)
 8005e0e:	f043 0310 	orr.w	r3, r3, #16
 8005e12:	6413      	str	r3, [r2, #64]	; 0x40
 8005e14:	4b30      	ldr	r3, [pc, #192]	; (8005ed8 <HAL_InitTick+0xe4>)
 8005e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e18:	f003 0310 	and.w	r3, r3, #16
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005e20:	f107 0210 	add.w	r2, r7, #16
 8005e24:	f107 0314 	add.w	r3, r7, #20
 8005e28:	4611      	mov	r1, r2
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f003 f95e 	bl	80090ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d103      	bne.n	8005e42 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005e3a:	f003 f92f 	bl	800909c <HAL_RCC_GetPCLK1Freq>
 8005e3e:	6378      	str	r0, [r7, #52]	; 0x34
 8005e40:	e004      	b.n	8005e4c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005e42:	f003 f92b 	bl	800909c <HAL_RCC_GetPCLK1Freq>
 8005e46:	4603      	mov	r3, r0
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4e:	4a23      	ldr	r2, [pc, #140]	; (8005edc <HAL_InitTick+0xe8>)
 8005e50:	fba2 2303 	umull	r2, r3, r2, r3
 8005e54:	0c9b      	lsrs	r3, r3, #18
 8005e56:	3b01      	subs	r3, #1
 8005e58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005e5a:	4b21      	ldr	r3, [pc, #132]	; (8005ee0 <HAL_InitTick+0xec>)
 8005e5c:	4a21      	ldr	r2, [pc, #132]	; (8005ee4 <HAL_InitTick+0xf0>)
 8005e5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005e60:	4b1f      	ldr	r3, [pc, #124]	; (8005ee0 <HAL_InitTick+0xec>)
 8005e62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005e66:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005e68:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <HAL_InitTick+0xec>)
 8005e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005e6e:	4b1c      	ldr	r3, [pc, #112]	; (8005ee0 <HAL_InitTick+0xec>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e74:	4b1a      	ldr	r3, [pc, #104]	; (8005ee0 <HAL_InitTick+0xec>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e7a:	4b19      	ldr	r3, [pc, #100]	; (8005ee0 <HAL_InitTick+0xec>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005e80:	4817      	ldr	r0, [pc, #92]	; (8005ee0 <HAL_InitTick+0xec>)
 8005e82:	f003 fa3b 	bl	80092fc <HAL_TIM_Base_Init>
 8005e86:	4603      	mov	r3, r0
 8005e88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8005e8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d11b      	bne.n	8005ecc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005e94:	4812      	ldr	r0, [pc, #72]	; (8005ee0 <HAL_InitTick+0xec>)
 8005e96:	f003 fa81 	bl	800939c <HAL_TIM_Base_Start_IT>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8005ea0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d111      	bne.n	8005ecc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005ea8:	2036      	movs	r0, #54	; 0x36
 8005eaa:	f001 fea9 	bl	8007c00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b0f      	cmp	r3, #15
 8005eb2:	d808      	bhi.n	8005ec6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	2036      	movs	r0, #54	; 0x36
 8005eba:	f001 fe85 	bl	8007bc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005ebe:	4a0a      	ldr	r2, [pc, #40]	; (8005ee8 <HAL_InitTick+0xf4>)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	e002      	b.n	8005ecc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005ecc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3738      	adds	r7, #56	; 0x38
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	431bde83 	.word	0x431bde83
 8005ee0:	20000d5c 	.word	0x20000d5c
 8005ee4:	40001000 	.word	0x40001000
 8005ee8:	20000094 	.word	0x20000094

08005eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005ef0:	e7fe      	b.n	8005ef0 <NMI_Handler+0x4>

08005ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ef6:	e7fe      	b.n	8005ef6 <HardFault_Handler+0x4>

08005ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005efc:	e7fe      	b.n	8005efc <MemManage_Handler+0x4>

08005efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005efe:	b480      	push	{r7}
 8005f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f02:	e7fe      	b.n	8005f02 <BusFault_Handler+0x4>

08005f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f08:	e7fe      	b.n	8005f08 <UsageFault_Handler+0x4>

08005f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f0e:	bf00      	nop
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG1_Pin);
 8005f1c:	2010      	movs	r0, #16
 8005f1e:	f002 fc75 	bl	800880c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005f22:	bf00      	nop
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005f2c:	4802      	ldr	r0, [pc, #8]	; (8005f38 <DMA1_Stream3_IRQHandler+0x10>)
 8005f2e:	f002 f81b 	bl	8007f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005f32:	bf00      	nop
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	200010e8 	.word	0x200010e8

08005f3c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005f40:	4802      	ldr	r0, [pc, #8]	; (8005f4c <DMA1_Stream6_IRQHandler+0x10>)
 8005f42:	f002 f811 	bl	8007f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005f46:	bf00      	nop
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20001088 	.word	0x20001088

08005f50 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005f54:	4802      	ldr	r0, [pc, #8]	; (8005f60 <CAN1_RX0_IRQHandler+0x10>)
 8005f56:	f001 fb2b 	bl	80075b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005f5a:	bf00      	nop
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000b98 	.word	0x20000b98

08005f64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG2_Pin);
 8005f68:	2020      	movs	r0, #32
 8005f6a:	f002 fc4f 	bl	800880c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG3_Pin);
 8005f6e:	2040      	movs	r0, #64	; 0x40
 8005f70:	f002 fc4c 	bl	800880c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG4_Pin);
 8005f74:	2080      	movs	r0, #128	; 0x80
 8005f76:	f002 fc49 	bl	800880c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005f7a:	bf00      	nop
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005f84:	4802      	ldr	r0, [pc, #8]	; (8005f90 <USART2_IRQHandler+0x10>)
 8005f86:	f005 f897 	bl	800b0b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005f8a:	bf00      	nop
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20001000 	.word	0x20001000

08005f94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005f98:	4802      	ldr	r0, [pc, #8]	; (8005fa4 <USART3_IRQHandler+0x10>)
 8005f9a:	f005 f88d 	bl	800b0b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005f9e:	bf00      	nop
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20001044 	.word	0x20001044

08005fa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005fac:	4802      	ldr	r0, [pc, #8]	; (8005fb8 <TIM6_DAC_IRQHandler+0x10>)
 8005fae:	f003 fd9e 	bl	8009aee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005fb2:	bf00      	nop
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000d5c 	.word	0x20000d5c

08005fbc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8005fc0:	4802      	ldr	r0, [pc, #8]	; (8005fcc <DMA2_Stream2_IRQHandler+0x10>)
 8005fc2:	f001 ffd1 	bl	8007f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005fc6:	bf00      	nop
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20000e80 	.word	0x20000e80

08005fd0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8005fd4:	4802      	ldr	r0, [pc, #8]	; (8005fe0 <DMA2_Stream3_IRQHandler+0x10>)
 8005fd6:	f001 ffc7 	bl	8007f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005fda:	bf00      	nop
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000ee0 	.word	0x20000ee0

08005fe4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 8005fe8:	4802      	ldr	r0, [pc, #8]	; (8005ff4 <DMA2_Stream4_IRQHandler+0x10>)
 8005fea:	f001 ffbd 	bl	8007f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8005fee:	bf00      	nop
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20000f40 	.word	0x20000f40

08005ff8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4_trig_com);
 8005ffc:	4802      	ldr	r0, [pc, #8]	; (8006008 <DMA2_Stream7_IRQHandler+0x10>)
 8005ffe:	f001 ffb3 	bl	8007f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8006002:	bf00      	nop
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20000fa0 	.word	0x20000fa0

0800600c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
	return 1;
 8006010:	2301      	movs	r3, #1
}
 8006012:	4618      	mov	r0, r3
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <_kill>:

int _kill(int pid, int sig)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006026:	f00a f8f9 	bl	801021c <__errno>
 800602a:	4603      	mov	r3, r0
 800602c:	2216      	movs	r2, #22
 800602e:	601a      	str	r2, [r3, #0]
	return -1;
 8006030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <_exit>:

void _exit (int status)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006044:	f04f 31ff 	mov.w	r1, #4294967295
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7ff ffe7 	bl	800601c <_kill>
	while (1) {}		/* Make sure we hang here */
 800604e:	e7fe      	b.n	800604e <_exit+0x12>

08006050 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800605c:	2300      	movs	r3, #0
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	e00a      	b.n	8006078 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006062:	f3af 8000 	nop.w
 8006066:	4601      	mov	r1, r0
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	60ba      	str	r2, [r7, #8]
 800606e:	b2ca      	uxtb	r2, r1
 8006070:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	3301      	adds	r3, #1
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	429a      	cmp	r2, r3
 800607e:	dbf0      	blt.n	8006062 <_read+0x12>
	}

return len;
 8006080:	687b      	ldr	r3, [r7, #4]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <_close>:
	}
	return len;
}

int _close(int file)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
	return -1;
 8006092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006096:	4618      	mov	r0, r3
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060b2:	605a      	str	r2, [r3, #4]
	return 0;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <_isatty>:

int _isatty(int file)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
	return 1;
 80060ca:	2301      	movs	r3, #1
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
	return 0;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80060fc:	4a14      	ldr	r2, [pc, #80]	; (8006150 <_sbrk+0x5c>)
 80060fe:	4b15      	ldr	r3, [pc, #84]	; (8006154 <_sbrk+0x60>)
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006108:	4b13      	ldr	r3, [pc, #76]	; (8006158 <_sbrk+0x64>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d102      	bne.n	8006116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006110:	4b11      	ldr	r3, [pc, #68]	; (8006158 <_sbrk+0x64>)
 8006112:	4a12      	ldr	r2, [pc, #72]	; (800615c <_sbrk+0x68>)
 8006114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006116:	4b10      	ldr	r3, [pc, #64]	; (8006158 <_sbrk+0x64>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4413      	add	r3, r2
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	429a      	cmp	r2, r3
 8006122:	d207      	bcs.n	8006134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006124:	f00a f87a 	bl	801021c <__errno>
 8006128:	4603      	mov	r3, r0
 800612a:	220c      	movs	r2, #12
 800612c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800612e:	f04f 33ff 	mov.w	r3, #4294967295
 8006132:	e009      	b.n	8006148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006134:	4b08      	ldr	r3, [pc, #32]	; (8006158 <_sbrk+0x64>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800613a:	4b07      	ldr	r3, [pc, #28]	; (8006158 <_sbrk+0x64>)
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4413      	add	r3, r2
 8006142:	4a05      	ldr	r2, [pc, #20]	; (8006158 <_sbrk+0x64>)
 8006144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006146:	68fb      	ldr	r3, [r7, #12]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20020000 	.word	0x20020000
 8006154:	00000400 	.word	0x00000400
 8006158:	20000da4 	.word	0x20000da4
 800615c:	20005b70 	.word	0x20005b70

08006160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006164:	4b06      	ldr	r3, [pc, #24]	; (8006180 <SystemInit+0x20>)
 8006166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616a:	4a05      	ldr	r2, [pc, #20]	; (8006180 <SystemInit+0x20>)
 800616c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006174:	bf00      	nop
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	e000ed00 	.word	0xe000ed00

08006184 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim8_ch3;
DMA_HandleTypeDef hdma_tim8_ch4_trig_com;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b096      	sub	sp, #88	; 0x58
 8006188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800618a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006194:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	605a      	str	r2, [r3, #4]
 800619e:	609a      	str	r2, [r3, #8]
 80061a0:	60da      	str	r2, [r3, #12]
 80061a2:	611a      	str	r2, [r3, #16]
 80061a4:	615a      	str	r2, [r3, #20]
 80061a6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80061a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	605a      	str	r2, [r3, #4]
 80061b2:	609a      	str	r2, [r3, #8]
 80061b4:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80061b6:	1d3b      	adds	r3, r7, #4
 80061b8:	2220      	movs	r2, #32
 80061ba:	2100      	movs	r1, #0
 80061bc:	4618      	mov	r0, r3
 80061be:	f00a f95e 	bl	801047e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80061c2:	4b47      	ldr	r3, [pc, #284]	; (80062e0 <MX_TIM1_Init+0x15c>)
 80061c4:	4a47      	ldr	r2, [pc, #284]	; (80062e4 <MX_TIM1_Init+0x160>)
 80061c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680-1;
 80061c8:	4b45      	ldr	r3, [pc, #276]	; (80062e0 <MX_TIM1_Init+0x15c>)
 80061ca:	f240 628f 	movw	r2, #1679	; 0x68f
 80061ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061d0:	4b43      	ldr	r3, [pc, #268]	; (80062e0 <MX_TIM1_Init+0x15c>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80061d6:	4b42      	ldr	r3, [pc, #264]	; (80062e0 <MX_TIM1_Init+0x15c>)
 80061d8:	2263      	movs	r2, #99	; 0x63
 80061da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061dc:	4b40      	ldr	r3, [pc, #256]	; (80062e0 <MX_TIM1_Init+0x15c>)
 80061de:	2200      	movs	r2, #0
 80061e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80061e2:	4b3f      	ldr	r3, [pc, #252]	; (80062e0 <MX_TIM1_Init+0x15c>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061e8:	4b3d      	ldr	r3, [pc, #244]	; (80062e0 <MX_TIM1_Init+0x15c>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80061ee:	483c      	ldr	r0, [pc, #240]	; (80062e0 <MX_TIM1_Init+0x15c>)
 80061f0:	f003 f944 	bl	800947c <HAL_TIM_PWM_Init>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80061fa:	f7ff fc71 	bl	8005ae0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80061fe:	4838      	ldr	r0, [pc, #224]	; (80062e0 <MX_TIM1_Init+0x15c>)
 8006200:	f003 fc1c 	bl	8009a3c <HAL_TIM_IC_Init>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800620a:	f7ff fc69 	bl	8005ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800620e:	2300      	movs	r3, #0
 8006210:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006212:	2300      	movs	r3, #0
 8006214:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006216:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800621a:	4619      	mov	r1, r3
 800621c:	4830      	ldr	r0, [pc, #192]	; (80062e0 <MX_TIM1_Init+0x15c>)
 800621e:	f004 fcdb 	bl	800abd8 <HAL_TIMEx_MasterConfigSynchronization>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8006228:	f7ff fc5a 	bl	8005ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800622c:	2360      	movs	r3, #96	; 0x60
 800622e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006234:	2300      	movs	r3, #0
 8006236:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006238:	2300      	movs	r3, #0
 800623a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800623c:	2300      	movs	r3, #0
 800623e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006240:	2300      	movs	r3, #0
 8006242:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006244:	2300      	movs	r3, #0
 8006246:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006248:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800624c:	2200      	movs	r2, #0
 800624e:	4619      	mov	r1, r3
 8006250:	4823      	ldr	r0, [pc, #140]	; (80062e0 <MX_TIM1_Init+0x15c>)
 8006252:	f003 fdf1 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800625c:	f7ff fc40 	bl	8005ae0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006260:	2300      	movs	r3, #0
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8006264:	2301      	movs	r3, #1
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8006268:	2300      	movs	r3, #0
 800626a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8006270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006274:	2204      	movs	r2, #4
 8006276:	4619      	mov	r1, r3
 8006278:	4819      	ldr	r0, [pc, #100]	; (80062e0 <MX_TIM1_Init+0x15c>)
 800627a:	f003 fd40 	bl	8009cfe <HAL_TIM_IC_ConfigChannel>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8006284:	f7ff fc2c 	bl	8005ae0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8006288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800628c:	2208      	movs	r2, #8
 800628e:	4619      	mov	r1, r3
 8006290:	4813      	ldr	r0, [pc, #76]	; (80062e0 <MX_TIM1_Init+0x15c>)
 8006292:	f003 fd34 	bl	8009cfe <HAL_TIM_IC_ConfigChannel>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 800629c:	f7ff fc20 	bl	8005ae0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80062a0:	2300      	movs	r3, #0
 80062a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80062a4:	2300      	movs	r3, #0
 80062a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80062b0:	2300      	movs	r3, #0
 80062b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80062b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80062ba:	2300      	movs	r3, #0
 80062bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80062be:	1d3b      	adds	r3, r7, #4
 80062c0:	4619      	mov	r1, r3
 80062c2:	4807      	ldr	r0, [pc, #28]	; (80062e0 <MX_TIM1_Init+0x15c>)
 80062c4:	f004 fd04 	bl	800acd0 <HAL_TIMEx_ConfigBreakDeadTime>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80062ce:	f7ff fc07 	bl	8005ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80062d2:	4803      	ldr	r0, [pc, #12]	; (80062e0 <MX_TIM1_Init+0x15c>)
 80062d4:	f000 faca 	bl	800686c <HAL_TIM_MspPostInit>

}
 80062d8:	bf00      	nop
 80062da:	3758      	adds	r7, #88	; 0x58
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20000da8 	.word	0x20000da8
 80062e4:	40010000 	.word	0x40010000

080062e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08a      	sub	sp, #40	; 0x28
 80062ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062ee:	f107 0318 	add.w	r3, r7, #24
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	605a      	str	r2, [r3, #4]
 80062f8:	609a      	str	r2, [r3, #8]
 80062fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062fc:	f107 0310 	add.w	r3, r7, #16
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8006306:	463b      	mov	r3, r7
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	605a      	str	r2, [r3, #4]
 800630e:	609a      	str	r2, [r3, #8]
 8006310:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006312:	4b31      	ldr	r3, [pc, #196]	; (80063d8 <MX_TIM3_Init+0xf0>)
 8006314:	4a31      	ldr	r2, [pc, #196]	; (80063dc <MX_TIM3_Init+0xf4>)
 8006316:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006318:	4b2f      	ldr	r3, [pc, #188]	; (80063d8 <MX_TIM3_Init+0xf0>)
 800631a:	2200      	movs	r2, #0
 800631c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800631e:	4b2e      	ldr	r3, [pc, #184]	; (80063d8 <MX_TIM3_Init+0xf0>)
 8006320:	2200      	movs	r2, #0
 8006322:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006324:	4b2c      	ldr	r3, [pc, #176]	; (80063d8 <MX_TIM3_Init+0xf0>)
 8006326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800632a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800632c:	4b2a      	ldr	r3, [pc, #168]	; (80063d8 <MX_TIM3_Init+0xf0>)
 800632e:	2200      	movs	r2, #0
 8006330:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006332:	4b29      	ldr	r3, [pc, #164]	; (80063d8 <MX_TIM3_Init+0xf0>)
 8006334:	2200      	movs	r2, #0
 8006336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006338:	4827      	ldr	r0, [pc, #156]	; (80063d8 <MX_TIM3_Init+0xf0>)
 800633a:	f002 ffdf 	bl	80092fc <HAL_TIM_Base_Init>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8006344:	f7ff fbcc 	bl	8005ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800634c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800634e:	f107 0318 	add.w	r3, r7, #24
 8006352:	4619      	mov	r1, r3
 8006354:	4820      	ldr	r0, [pc, #128]	; (80063d8 <MX_TIM3_Init+0xf0>)
 8006356:	f003 fe31 	bl	8009fbc <HAL_TIM_ConfigClockSource>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8006360:	f7ff fbbe 	bl	8005ae0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8006364:	481c      	ldr	r0, [pc, #112]	; (80063d8 <MX_TIM3_Init+0xf0>)
 8006366:	f003 fb69 	bl	8009a3c <HAL_TIM_IC_Init>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8006370:	f7ff fbb6 	bl	8005ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006374:	2300      	movs	r3, #0
 8006376:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006378:	2300      	movs	r3, #0
 800637a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800637c:	f107 0310 	add.w	r3, r7, #16
 8006380:	4619      	mov	r1, r3
 8006382:	4815      	ldr	r0, [pc, #84]	; (80063d8 <MX_TIM3_Init+0xf0>)
 8006384:	f004 fc28 	bl	800abd8 <HAL_TIMEx_MasterConfigSynchronization>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800638e:	f7ff fba7 	bl	8005ae0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006392:	2300      	movs	r3, #0
 8006394:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8006396:	2301      	movs	r3, #1
 8006398:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800639a:	2300      	movs	r3, #0
 800639c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80063a2:	463b      	mov	r3, r7
 80063a4:	2208      	movs	r2, #8
 80063a6:	4619      	mov	r1, r3
 80063a8:	480b      	ldr	r0, [pc, #44]	; (80063d8 <MX_TIM3_Init+0xf0>)
 80063aa:	f003 fca8 	bl	8009cfe <HAL_TIM_IC_ConfigChannel>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80063b4:	f7ff fb94 	bl	8005ae0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80063b8:	463b      	mov	r3, r7
 80063ba:	220c      	movs	r2, #12
 80063bc:	4619      	mov	r1, r3
 80063be:	4806      	ldr	r0, [pc, #24]	; (80063d8 <MX_TIM3_Init+0xf0>)
 80063c0:	f003 fc9d 	bl	8009cfe <HAL_TIM_IC_ConfigChannel>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80063ca:	f7ff fb89 	bl	8005ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80063ce:	bf00      	nop
 80063d0:	3728      	adds	r7, #40	; 0x28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000df0 	.word	0x20000df0
 80063dc:	40000400 	.word	0x40000400

080063e0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b096      	sub	sp, #88	; 0x58
 80063e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80063e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	605a      	str	r2, [r3, #4]
 80063f0:	609a      	str	r2, [r3, #8]
 80063f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	605a      	str	r2, [r3, #4]
 8006408:	609a      	str	r2, [r3, #8]
 800640a:	60da      	str	r2, [r3, #12]
 800640c:	611a      	str	r2, [r3, #16]
 800640e:	615a      	str	r2, [r3, #20]
 8006410:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006412:	1d3b      	adds	r3, r7, #4
 8006414:	2220      	movs	r2, #32
 8006416:	2100      	movs	r1, #0
 8006418:	4618      	mov	r0, r3
 800641a:	f00a f830 	bl	801047e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800641e:	4b50      	ldr	r3, [pc, #320]	; (8006560 <MX_TIM8_Init+0x180>)
 8006420:	4a50      	ldr	r2, [pc, #320]	; (8006564 <MX_TIM8_Init+0x184>)
 8006422:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8006424:	4b4e      	ldr	r3, [pc, #312]	; (8006560 <MX_TIM8_Init+0x180>)
 8006426:	2201      	movs	r2, #1
 8006428:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800642a:	4b4d      	ldr	r3, [pc, #308]	; (8006560 <MX_TIM8_Init+0x180>)
 800642c:	2200      	movs	r2, #0
 800642e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 104;
 8006430:	4b4b      	ldr	r3, [pc, #300]	; (8006560 <MX_TIM8_Init+0x180>)
 8006432:	2268      	movs	r2, #104	; 0x68
 8006434:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006436:	4b4a      	ldr	r3, [pc, #296]	; (8006560 <MX_TIM8_Init+0x180>)
 8006438:	2200      	movs	r2, #0
 800643a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800643c:	4b48      	ldr	r3, [pc, #288]	; (8006560 <MX_TIM8_Init+0x180>)
 800643e:	2200      	movs	r2, #0
 8006440:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006442:	4b47      	ldr	r3, [pc, #284]	; (8006560 <MX_TIM8_Init+0x180>)
 8006444:	2200      	movs	r2, #0
 8006446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8006448:	4845      	ldr	r0, [pc, #276]	; (8006560 <MX_TIM8_Init+0x180>)
 800644a:	f002 ff57 	bl	80092fc <HAL_TIM_Base_Init>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8006454:	f7ff fb44 	bl	8005ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800645c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800645e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006462:	4619      	mov	r1, r3
 8006464:	483e      	ldr	r0, [pc, #248]	; (8006560 <MX_TIM8_Init+0x180>)
 8006466:	f003 fda9 	bl	8009fbc <HAL_TIM_ConfigClockSource>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8006470:	f7ff fb36 	bl	8005ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8006474:	483a      	ldr	r0, [pc, #232]	; (8006560 <MX_TIM8_Init+0x180>)
 8006476:	f003 f801 	bl	800947c <HAL_TIM_PWM_Init>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8006480:	f7ff fb2e 	bl	8005ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006484:	2300      	movs	r3, #0
 8006486:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006488:	2300      	movs	r3, #0
 800648a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800648c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006490:	4619      	mov	r1, r3
 8006492:	4833      	ldr	r0, [pc, #204]	; (8006560 <MX_TIM8_Init+0x180>)
 8006494:	f004 fba0 	bl	800abd8 <HAL_TIMEx_MasterConfigSynchronization>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800649e:	f7ff fb1f 	bl	8005ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80064a2:	2360      	movs	r3, #96	; 0x60
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80064aa:	2300      	movs	r3, #0
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80064ae:	2300      	movs	r3, #0
 80064b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80064b6:	2300      	movs	r3, #0
 80064b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80064ba:	2300      	movs	r3, #0
 80064bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80064be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064c2:	2200      	movs	r2, #0
 80064c4:	4619      	mov	r1, r3
 80064c6:	4826      	ldr	r0, [pc, #152]	; (8006560 <MX_TIM8_Init+0x180>)
 80064c8:	f003 fcb6 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80064d2:	f7ff fb05 	bl	8005ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80064d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064da:	2204      	movs	r2, #4
 80064dc:	4619      	mov	r1, r3
 80064de:	4820      	ldr	r0, [pc, #128]	; (8006560 <MX_TIM8_Init+0x180>)
 80064e0:	f003 fcaa 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80064ea:	f7ff faf9 	bl	8005ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80064ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064f2:	2208      	movs	r2, #8
 80064f4:	4619      	mov	r1, r3
 80064f6:	481a      	ldr	r0, [pc, #104]	; (8006560 <MX_TIM8_Init+0x180>)
 80064f8:	f003 fc9e 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8006502:	f7ff faed 	bl	8005ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800650a:	220c      	movs	r2, #12
 800650c:	4619      	mov	r1, r3
 800650e:	4814      	ldr	r0, [pc, #80]	; (8006560 <MX_TIM8_Init+0x180>)
 8006510:	f003 fc92 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 800651a:	f7ff fae1 	bl	8005ae0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800651e:	2300      	movs	r3, #0
 8006520:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006522:	2300      	movs	r3, #0
 8006524:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800652e:	2300      	movs	r3, #0
 8006530:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006536:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006538:	2300      	movs	r3, #0
 800653a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800653c:	1d3b      	adds	r3, r7, #4
 800653e:	4619      	mov	r1, r3
 8006540:	4807      	ldr	r0, [pc, #28]	; (8006560 <MX_TIM8_Init+0x180>)
 8006542:	f004 fbc5 	bl	800acd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 800654c:	f7ff fac8 	bl	8005ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8006550:	4803      	ldr	r0, [pc, #12]	; (8006560 <MX_TIM8_Init+0x180>)
 8006552:	f000 f98b 	bl	800686c <HAL_TIM_MspPostInit>

}
 8006556:	bf00      	nop
 8006558:	3758      	adds	r7, #88	; 0x58
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20000e38 	.word	0x20000e38
 8006564:	40010400 	.word	0x40010400

08006568 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08a      	sub	sp, #40	; 0x28
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006570:	f107 0314 	add.w	r3, r7, #20
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	605a      	str	r2, [r3, #4]
 800657a:	609a      	str	r2, [r3, #8]
 800657c:	60da      	str	r2, [r3, #12]
 800657e:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a19      	ldr	r2, [pc, #100]	; (80065ec <HAL_TIM_PWM_MspInit+0x84>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d12c      	bne.n	80065e4 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800658a:	2300      	movs	r3, #0
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	4b18      	ldr	r3, [pc, #96]	; (80065f0 <HAL_TIM_PWM_MspInit+0x88>)
 8006590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006592:	4a17      	ldr	r2, [pc, #92]	; (80065f0 <HAL_TIM_PWM_MspInit+0x88>)
 8006594:	f043 0301 	orr.w	r3, r3, #1
 8006598:	6453      	str	r3, [r2, #68]	; 0x44
 800659a:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <HAL_TIM_PWM_MspInit+0x88>)
 800659c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	4b11      	ldr	r3, [pc, #68]	; (80065f0 <HAL_TIM_PWM_MspInit+0x88>)
 80065ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ae:	4a10      	ldr	r2, [pc, #64]	; (80065f0 <HAL_TIM_PWM_MspInit+0x88>)
 80065b0:	f043 0301 	orr.w	r3, r3, #1
 80065b4:	6313      	str	r3, [r2, #48]	; 0x30
 80065b6:	4b0e      	ldr	r3, [pc, #56]	; (80065f0 <HAL_TIM_PWM_MspInit+0x88>)
 80065b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80065c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80065c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065c8:	2302      	movs	r3, #2
 80065ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065cc:	2300      	movs	r3, #0
 80065ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065d0:	2300      	movs	r3, #0
 80065d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80065d4:	2301      	movs	r3, #1
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065d8:	f107 0314 	add.w	r3, r7, #20
 80065dc:	4619      	mov	r1, r3
 80065de:	4805      	ldr	r0, [pc, #20]	; (80065f4 <HAL_TIM_PWM_MspInit+0x8c>)
 80065e0:	f001 ff2c 	bl	800843c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80065e4:	bf00      	nop
 80065e6:	3728      	adds	r7, #40	; 0x28
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40023800 	.word	0x40023800
 80065f4:	40020000 	.word	0x40020000

080065f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08a      	sub	sp, #40	; 0x28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006600:	f107 0314 	add.w	r3, r7, #20
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	605a      	str	r2, [r3, #4]
 800660a:	609a      	str	r2, [r3, #8]
 800660c:	60da      	str	r2, [r3, #12]
 800660e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a89      	ldr	r2, [pc, #548]	; (800683c <HAL_TIM_Base_MspInit+0x244>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d12c      	bne.n	8006674 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800661a:	2300      	movs	r3, #0
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	4b88      	ldr	r3, [pc, #544]	; (8006840 <HAL_TIM_Base_MspInit+0x248>)
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	4a87      	ldr	r2, [pc, #540]	; (8006840 <HAL_TIM_Base_MspInit+0x248>)
 8006624:	f043 0302 	orr.w	r3, r3, #2
 8006628:	6413      	str	r3, [r2, #64]	; 0x40
 800662a:	4b85      	ldr	r3, [pc, #532]	; (8006840 <HAL_TIM_Base_MspInit+0x248>)
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	4b81      	ldr	r3, [pc, #516]	; (8006840 <HAL_TIM_Base_MspInit+0x248>)
 800663c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663e:	4a80      	ldr	r2, [pc, #512]	; (8006840 <HAL_TIM_Base_MspInit+0x248>)
 8006640:	f043 0302 	orr.w	r3, r3, #2
 8006644:	6313      	str	r3, [r2, #48]	; 0x30
 8006646:	4b7e      	ldr	r3, [pc, #504]	; (8006840 <HAL_TIM_Base_MspInit+0x248>)
 8006648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006652:	2303      	movs	r3, #3
 8006654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006656:	2302      	movs	r3, #2
 8006658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665a:	2300      	movs	r3, #0
 800665c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800665e:	2300      	movs	r3, #0
 8006660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006662:	2302      	movs	r3, #2
 8006664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006666:	f107 0314 	add.w	r3, r7, #20
 800666a:	4619      	mov	r1, r3
 800666c:	4875      	ldr	r0, [pc, #468]	; (8006844 <HAL_TIM_Base_MspInit+0x24c>)
 800666e:	f001 fee5 	bl	800843c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8006672:	e0df      	b.n	8006834 <HAL_TIM_Base_MspInit+0x23c>
  else if(tim_baseHandle->Instance==TIM8)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a73      	ldr	r2, [pc, #460]	; (8006848 <HAL_TIM_Base_MspInit+0x250>)
 800667a:	4293      	cmp	r3, r2
 800667c:	f040 80da 	bne.w	8006834 <HAL_TIM_Base_MspInit+0x23c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006680:	2300      	movs	r3, #0
 8006682:	60bb      	str	r3, [r7, #8]
 8006684:	4b6e      	ldr	r3, [pc, #440]	; (8006840 <HAL_TIM_Base_MspInit+0x248>)
 8006686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006688:	4a6d      	ldr	r2, [pc, #436]	; (8006840 <HAL_TIM_Base_MspInit+0x248>)
 800668a:	f043 0302 	orr.w	r3, r3, #2
 800668e:	6453      	str	r3, [r2, #68]	; 0x44
 8006690:	4b6b      	ldr	r3, [pc, #428]	; (8006840 <HAL_TIM_Base_MspInit+0x248>)
 8006692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	60bb      	str	r3, [r7, #8]
 800669a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 800669c:	4b6b      	ldr	r3, [pc, #428]	; (800684c <HAL_TIM_Base_MspInit+0x254>)
 800669e:	4a6c      	ldr	r2, [pc, #432]	; (8006850 <HAL_TIM_Base_MspInit+0x258>)
 80066a0:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 80066a2:	4b6a      	ldr	r3, [pc, #424]	; (800684c <HAL_TIM_Base_MspInit+0x254>)
 80066a4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80066a8:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80066aa:	4b68      	ldr	r3, [pc, #416]	; (800684c <HAL_TIM_Base_MspInit+0x254>)
 80066ac:	2240      	movs	r2, #64	; 0x40
 80066ae:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80066b0:	4b66      	ldr	r3, [pc, #408]	; (800684c <HAL_TIM_Base_MspInit+0x254>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80066b6:	4b65      	ldr	r3, [pc, #404]	; (800684c <HAL_TIM_Base_MspInit+0x254>)
 80066b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066bc:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80066be:	4b63      	ldr	r3, [pc, #396]	; (800684c <HAL_TIM_Base_MspInit+0x254>)
 80066c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066c4:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80066c6:	4b61      	ldr	r3, [pc, #388]	; (800684c <HAL_TIM_Base_MspInit+0x254>)
 80066c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066cc:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 80066ce:	4b5f      	ldr	r3, [pc, #380]	; (800684c <HAL_TIM_Base_MspInit+0x254>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80066d4:	4b5d      	ldr	r3, [pc, #372]	; (800684c <HAL_TIM_Base_MspInit+0x254>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066da:	4b5c      	ldr	r3, [pc, #368]	; (800684c <HAL_TIM_Base_MspInit+0x254>)
 80066dc:	2200      	movs	r2, #0
 80066de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 80066e0:	485a      	ldr	r0, [pc, #360]	; (800684c <HAL_TIM_Base_MspInit+0x254>)
 80066e2:	f001 faa9 	bl	8007c38 <HAL_DMA_Init>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <HAL_TIM_Base_MspInit+0xf8>
      Error_Handler();
 80066ec:	f7ff f9f8 	bl	8005ae0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a56      	ldr	r2, [pc, #344]	; (800684c <HAL_TIM_Base_MspInit+0x254>)
 80066f4:	625a      	str	r2, [r3, #36]	; 0x24
 80066f6:	4a55      	ldr	r2, [pc, #340]	; (800684c <HAL_TIM_Base_MspInit+0x254>)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim8_ch2.Instance = DMA2_Stream3;
 80066fc:	4b55      	ldr	r3, [pc, #340]	; (8006854 <HAL_TIM_Base_MspInit+0x25c>)
 80066fe:	4a56      	ldr	r2, [pc, #344]	; (8006858 <HAL_TIM_Base_MspInit+0x260>)
 8006700:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Channel = DMA_CHANNEL_7;
 8006702:	4b54      	ldr	r3, [pc, #336]	; (8006854 <HAL_TIM_Base_MspInit+0x25c>)
 8006704:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8006708:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800670a:	4b52      	ldr	r3, [pc, #328]	; (8006854 <HAL_TIM_Base_MspInit+0x25c>)
 800670c:	2240      	movs	r2, #64	; 0x40
 800670e:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006710:	4b50      	ldr	r3, [pc, #320]	; (8006854 <HAL_TIM_Base_MspInit+0x25c>)
 8006712:	2200      	movs	r2, #0
 8006714:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8006716:	4b4f      	ldr	r3, [pc, #316]	; (8006854 <HAL_TIM_Base_MspInit+0x25c>)
 8006718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800671c:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800671e:	4b4d      	ldr	r3, [pc, #308]	; (8006854 <HAL_TIM_Base_MspInit+0x25c>)
 8006720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006724:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006726:	4b4b      	ldr	r3, [pc, #300]	; (8006854 <HAL_TIM_Base_MspInit+0x25c>)
 8006728:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800672c:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 800672e:	4b49      	ldr	r3, [pc, #292]	; (8006854 <HAL_TIM_Base_MspInit+0x25c>)
 8006730:	2200      	movs	r2, #0
 8006732:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8006734:	4b47      	ldr	r3, [pc, #284]	; (8006854 <HAL_TIM_Base_MspInit+0x25c>)
 8006736:	2200      	movs	r2, #0
 8006738:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800673a:	4b46      	ldr	r3, [pc, #280]	; (8006854 <HAL_TIM_Base_MspInit+0x25c>)
 800673c:	2200      	movs	r2, #0
 800673e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8006740:	4844      	ldr	r0, [pc, #272]	; (8006854 <HAL_TIM_Base_MspInit+0x25c>)
 8006742:	f001 fa79 	bl	8007c38 <HAL_DMA_Init>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <HAL_TIM_Base_MspInit+0x158>
      Error_Handler();
 800674c:	f7ff f9c8 	bl	8005ae0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a40      	ldr	r2, [pc, #256]	; (8006854 <HAL_TIM_Base_MspInit+0x25c>)
 8006754:	629a      	str	r2, [r3, #40]	; 0x28
 8006756:	4a3f      	ldr	r2, [pc, #252]	; (8006854 <HAL_TIM_Base_MspInit+0x25c>)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim8_ch3.Instance = DMA2_Stream4;
 800675c:	4b3f      	ldr	r3, [pc, #252]	; (800685c <HAL_TIM_Base_MspInit+0x264>)
 800675e:	4a40      	ldr	r2, [pc, #256]	; (8006860 <HAL_TIM_Base_MspInit+0x268>)
 8006760:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Channel = DMA_CHANNEL_7;
 8006762:	4b3e      	ldr	r3, [pc, #248]	; (800685c <HAL_TIM_Base_MspInit+0x264>)
 8006764:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8006768:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800676a:	4b3c      	ldr	r3, [pc, #240]	; (800685c <HAL_TIM_Base_MspInit+0x264>)
 800676c:	2240      	movs	r2, #64	; 0x40
 800676e:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8006770:	4b3a      	ldr	r3, [pc, #232]	; (800685c <HAL_TIM_Base_MspInit+0x264>)
 8006772:	2200      	movs	r2, #0
 8006774:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8006776:	4b39      	ldr	r3, [pc, #228]	; (800685c <HAL_TIM_Base_MspInit+0x264>)
 8006778:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800677c:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800677e:	4b37      	ldr	r3, [pc, #220]	; (800685c <HAL_TIM_Base_MspInit+0x264>)
 8006780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006784:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006786:	4b35      	ldr	r3, [pc, #212]	; (800685c <HAL_TIM_Base_MspInit+0x264>)
 8006788:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800678c:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_NORMAL;
 800678e:	4b33      	ldr	r3, [pc, #204]	; (800685c <HAL_TIM_Base_MspInit+0x264>)
 8006790:	2200      	movs	r2, #0
 8006792:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8006794:	4b31      	ldr	r3, [pc, #196]	; (800685c <HAL_TIM_Base_MspInit+0x264>)
 8006796:	2200      	movs	r2, #0
 8006798:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800679a:	4b30      	ldr	r3, [pc, #192]	; (800685c <HAL_TIM_Base_MspInit+0x264>)
 800679c:	2200      	movs	r2, #0
 800679e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 80067a0:	482e      	ldr	r0, [pc, #184]	; (800685c <HAL_TIM_Base_MspInit+0x264>)
 80067a2:	f001 fa49 	bl	8007c38 <HAL_DMA_Init>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_TIM_Base_MspInit+0x1b8>
      Error_Handler();
 80067ac:	f7ff f998 	bl	8005ae0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a2a      	ldr	r2, [pc, #168]	; (800685c <HAL_TIM_Base_MspInit+0x264>)
 80067b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80067b6:	4a29      	ldr	r2, [pc, #164]	; (800685c <HAL_TIM_Base_MspInit+0x264>)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim8_ch4_trig_com.Instance = DMA2_Stream7;
 80067bc:	4b29      	ldr	r3, [pc, #164]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 80067be:	4a2a      	ldr	r2, [pc, #168]	; (8006868 <HAL_TIM_Base_MspInit+0x270>)
 80067c0:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4_trig_com.Init.Channel = DMA_CHANNEL_7;
 80067c2:	4b28      	ldr	r3, [pc, #160]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 80067c4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80067c8:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80067ca:	4b26      	ldr	r3, [pc, #152]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 80067cc:	2240      	movs	r2, #64	; 0x40
 80067ce:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80067d0:	4b24      	ldr	r3, [pc, #144]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80067d6:	4b23      	ldr	r3, [pc, #140]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 80067d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067dc:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80067de:	4b21      	ldr	r3, [pc, #132]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 80067e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067e4:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80067e6:	4b1f      	ldr	r3, [pc, #124]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 80067e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80067ec:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4_trig_com.Init.Mode = DMA_NORMAL;
 80067ee:	4b1d      	ldr	r3, [pc, #116]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 80067f4:	4b1b      	ldr	r3, [pc, #108]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067fa:	4b1a      	ldr	r3, [pc, #104]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch4_trig_com) != HAL_OK)
 8006800:	4818      	ldr	r0, [pc, #96]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 8006802:	f001 fa19 	bl	8007c38 <HAL_DMA_Init>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <HAL_TIM_Base_MspInit+0x218>
      Error_Handler();
 800680c:	f7ff f968 	bl	8005ae0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a14      	ldr	r2, [pc, #80]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 8006814:	631a      	str	r2, [r3, #48]	; 0x30
 8006816:	4a13      	ldr	r2, [pc, #76]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim8_ch4_trig_com);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a11      	ldr	r2, [pc, #68]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 8006820:	639a      	str	r2, [r3, #56]	; 0x38
 8006822:	4a10      	ldr	r2, [pc, #64]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim8_ch4_trig_com);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a0e      	ldr	r2, [pc, #56]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 800682c:	635a      	str	r2, [r3, #52]	; 0x34
 800682e:	4a0d      	ldr	r2, [pc, #52]	; (8006864 <HAL_TIM_Base_MspInit+0x26c>)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006834:	bf00      	nop
 8006836:	3728      	adds	r7, #40	; 0x28
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40000400 	.word	0x40000400
 8006840:	40023800 	.word	0x40023800
 8006844:	40020400 	.word	0x40020400
 8006848:	40010400 	.word	0x40010400
 800684c:	20000e80 	.word	0x20000e80
 8006850:	40026440 	.word	0x40026440
 8006854:	20000ee0 	.word	0x20000ee0
 8006858:	40026458 	.word	0x40026458
 800685c:	20000f40 	.word	0x20000f40
 8006860:	40026470 	.word	0x40026470
 8006864:	20000fa0 	.word	0x20000fa0
 8006868:	400264b8 	.word	0x400264b8

0800686c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08a      	sub	sp, #40	; 0x28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006874:	f107 0314 	add.w	r3, r7, #20
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	609a      	str	r2, [r3, #8]
 8006880:	60da      	str	r2, [r3, #12]
 8006882:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a25      	ldr	r2, [pc, #148]	; (8006920 <HAL_TIM_MspPostInit+0xb4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d11f      	bne.n	80068ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800688e:	2300      	movs	r3, #0
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	4b24      	ldr	r3, [pc, #144]	; (8006924 <HAL_TIM_MspPostInit+0xb8>)
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	4a23      	ldr	r2, [pc, #140]	; (8006924 <HAL_TIM_MspPostInit+0xb8>)
 8006898:	f043 0301 	orr.w	r3, r3, #1
 800689c:	6313      	str	r3, [r2, #48]	; 0x30
 800689e:	4b21      	ldr	r3, [pc, #132]	; (8006924 <HAL_TIM_MspPostInit+0xb8>)
 80068a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	613b      	str	r3, [r7, #16]
 80068a8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80068aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068b0:	2302      	movs	r3, #2
 80068b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068b8:	2300      	movs	r3, #0
 80068ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80068bc:	2301      	movs	r3, #1
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068c0:	f107 0314 	add.w	r3, r7, #20
 80068c4:	4619      	mov	r1, r3
 80068c6:	4818      	ldr	r0, [pc, #96]	; (8006928 <HAL_TIM_MspPostInit+0xbc>)
 80068c8:	f001 fdb8 	bl	800843c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80068cc:	e023      	b.n	8006916 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a16      	ldr	r2, [pc, #88]	; (800692c <HAL_TIM_MspPostInit+0xc0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d11e      	bne.n	8006916 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	4b11      	ldr	r3, [pc, #68]	; (8006924 <HAL_TIM_MspPostInit+0xb8>)
 80068de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e0:	4a10      	ldr	r2, [pc, #64]	; (8006924 <HAL_TIM_MspPostInit+0xb8>)
 80068e2:	f043 0304 	orr.w	r3, r3, #4
 80068e6:	6313      	str	r3, [r2, #48]	; 0x30
 80068e8:	4b0e      	ldr	r3, [pc, #56]	; (8006924 <HAL_TIM_MspPostInit+0xb8>)
 80068ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80068f4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80068f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068fa:	2302      	movs	r3, #2
 80068fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068fe:	2300      	movs	r3, #0
 8006900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006902:	2300      	movs	r3, #0
 8006904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006906:	2303      	movs	r3, #3
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800690a:	f107 0314 	add.w	r3, r7, #20
 800690e:	4619      	mov	r1, r3
 8006910:	4807      	ldr	r0, [pc, #28]	; (8006930 <HAL_TIM_MspPostInit+0xc4>)
 8006912:	f001 fd93 	bl	800843c <HAL_GPIO_Init>
}
 8006916:	bf00      	nop
 8006918:	3728      	adds	r7, #40	; 0x28
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	40010000 	.word	0x40010000
 8006924:	40023800 	.word	0x40023800
 8006928:	40020000 	.word	0x40020000
 800692c:	40010400 	.word	0x40010400
 8006930:	40020800 	.word	0x40020800

08006934 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006938:	4b11      	ldr	r3, [pc, #68]	; (8006980 <MX_USART2_UART_Init+0x4c>)
 800693a:	4a12      	ldr	r2, [pc, #72]	; (8006984 <MX_USART2_UART_Init+0x50>)
 800693c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800693e:	4b10      	ldr	r3, [pc, #64]	; (8006980 <MX_USART2_UART_Init+0x4c>)
 8006940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006946:	4b0e      	ldr	r3, [pc, #56]	; (8006980 <MX_USART2_UART_Init+0x4c>)
 8006948:	2200      	movs	r2, #0
 800694a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800694c:	4b0c      	ldr	r3, [pc, #48]	; (8006980 <MX_USART2_UART_Init+0x4c>)
 800694e:	2200      	movs	r2, #0
 8006950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006952:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <MX_USART2_UART_Init+0x4c>)
 8006954:	2200      	movs	r2, #0
 8006956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006958:	4b09      	ldr	r3, [pc, #36]	; (8006980 <MX_USART2_UART_Init+0x4c>)
 800695a:	220c      	movs	r2, #12
 800695c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800695e:	4b08      	ldr	r3, [pc, #32]	; (8006980 <MX_USART2_UART_Init+0x4c>)
 8006960:	2200      	movs	r2, #0
 8006962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006964:	4b06      	ldr	r3, [pc, #24]	; (8006980 <MX_USART2_UART_Init+0x4c>)
 8006966:	2200      	movs	r2, #0
 8006968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800696a:	4805      	ldr	r0, [pc, #20]	; (8006980 <MX_USART2_UART_Init+0x4c>)
 800696c:	f004 fa16 	bl	800ad9c <HAL_UART_Init>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006976:	f7ff f8b3 	bl	8005ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800697a:	bf00      	nop
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20001000 	.word	0x20001000
 8006984:	40004400 	.word	0x40004400

08006988 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800698c:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <MX_USART3_UART_Init+0x4c>)
 800698e:	4a12      	ldr	r2, [pc, #72]	; (80069d8 <MX_USART3_UART_Init+0x50>)
 8006990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006992:	4b10      	ldr	r3, [pc, #64]	; (80069d4 <MX_USART3_UART_Init+0x4c>)
 8006994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800699a:	4b0e      	ldr	r3, [pc, #56]	; (80069d4 <MX_USART3_UART_Init+0x4c>)
 800699c:	2200      	movs	r2, #0
 800699e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80069a0:	4b0c      	ldr	r3, [pc, #48]	; (80069d4 <MX_USART3_UART_Init+0x4c>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80069a6:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <MX_USART3_UART_Init+0x4c>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80069ac:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <MX_USART3_UART_Init+0x4c>)
 80069ae:	220c      	movs	r2, #12
 80069b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80069b2:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <MX_USART3_UART_Init+0x4c>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80069b8:	4b06      	ldr	r3, [pc, #24]	; (80069d4 <MX_USART3_UART_Init+0x4c>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80069be:	4805      	ldr	r0, [pc, #20]	; (80069d4 <MX_USART3_UART_Init+0x4c>)
 80069c0:	f004 f9ec 	bl	800ad9c <HAL_UART_Init>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80069ca:	f7ff f889 	bl	8005ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80069ce:	bf00      	nop
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	20001044 	.word	0x20001044
 80069d8:	40004800 	.word	0x40004800

080069dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08c      	sub	sp, #48	; 0x30
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069e4:	f107 031c 	add.w	r3, r7, #28
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	605a      	str	r2, [r3, #4]
 80069ee:	609a      	str	r2, [r3, #8]
 80069f0:	60da      	str	r2, [r3, #12]
 80069f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a68      	ldr	r2, [pc, #416]	; (8006b9c <HAL_UART_MspInit+0x1c0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d162      	bne.n	8006ac4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80069fe:	2300      	movs	r3, #0
 8006a00:	61bb      	str	r3, [r7, #24]
 8006a02:	4b67      	ldr	r3, [pc, #412]	; (8006ba0 <HAL_UART_MspInit+0x1c4>)
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	4a66      	ldr	r2, [pc, #408]	; (8006ba0 <HAL_UART_MspInit+0x1c4>)
 8006a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a0e:	4b64      	ldr	r3, [pc, #400]	; (8006ba0 <HAL_UART_MspInit+0x1c4>)
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a16:	61bb      	str	r3, [r7, #24]
 8006a18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	4b60      	ldr	r3, [pc, #384]	; (8006ba0 <HAL_UART_MspInit+0x1c4>)
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	4a5f      	ldr	r2, [pc, #380]	; (8006ba0 <HAL_UART_MspInit+0x1c4>)
 8006a24:	f043 0301 	orr.w	r3, r3, #1
 8006a28:	6313      	str	r3, [r2, #48]	; 0x30
 8006a2a:	4b5d      	ldr	r3, [pc, #372]	; (8006ba0 <HAL_UART_MspInit+0x1c4>)
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006a36:	230c      	movs	r3, #12
 8006a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a42:	2303      	movs	r3, #3
 8006a44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006a46:	2307      	movs	r3, #7
 8006a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a4a:	f107 031c 	add.w	r3, r7, #28
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4854      	ldr	r0, [pc, #336]	; (8006ba4 <HAL_UART_MspInit+0x1c8>)
 8006a52:	f001 fcf3 	bl	800843c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006a56:	4b54      	ldr	r3, [pc, #336]	; (8006ba8 <HAL_UART_MspInit+0x1cc>)
 8006a58:	4a54      	ldr	r2, [pc, #336]	; (8006bac <HAL_UART_MspInit+0x1d0>)
 8006a5a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006a5c:	4b52      	ldr	r3, [pc, #328]	; (8006ba8 <HAL_UART_MspInit+0x1cc>)
 8006a5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a62:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a64:	4b50      	ldr	r3, [pc, #320]	; (8006ba8 <HAL_UART_MspInit+0x1cc>)
 8006a66:	2240      	movs	r2, #64	; 0x40
 8006a68:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a6a:	4b4f      	ldr	r3, [pc, #316]	; (8006ba8 <HAL_UART_MspInit+0x1cc>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a70:	4b4d      	ldr	r3, [pc, #308]	; (8006ba8 <HAL_UART_MspInit+0x1cc>)
 8006a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a76:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a78:	4b4b      	ldr	r3, [pc, #300]	; (8006ba8 <HAL_UART_MspInit+0x1cc>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a7e:	4b4a      	ldr	r3, [pc, #296]	; (8006ba8 <HAL_UART_MspInit+0x1cc>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006a84:	4b48      	ldr	r3, [pc, #288]	; (8006ba8 <HAL_UART_MspInit+0x1cc>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006a8a:	4b47      	ldr	r3, [pc, #284]	; (8006ba8 <HAL_UART_MspInit+0x1cc>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a90:	4b45      	ldr	r3, [pc, #276]	; (8006ba8 <HAL_UART_MspInit+0x1cc>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006a96:	4844      	ldr	r0, [pc, #272]	; (8006ba8 <HAL_UART_MspInit+0x1cc>)
 8006a98:	f001 f8ce 	bl	8007c38 <HAL_DMA_Init>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8006aa2:	f7ff f81d 	bl	8005ae0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a3f      	ldr	r2, [pc, #252]	; (8006ba8 <HAL_UART_MspInit+0x1cc>)
 8006aaa:	635a      	str	r2, [r3, #52]	; 0x34
 8006aac:	4a3e      	ldr	r2, [pc, #248]	; (8006ba8 <HAL_UART_MspInit+0x1cc>)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	2105      	movs	r1, #5
 8006ab6:	2026      	movs	r0, #38	; 0x26
 8006ab8:	f001 f886 	bl	8007bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006abc:	2026      	movs	r0, #38	; 0x26
 8006abe:	f001 f89f 	bl	8007c00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006ac2:	e067      	b.n	8006b94 <HAL_UART_MspInit+0x1b8>
  else if(uartHandle->Instance==USART3)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a39      	ldr	r2, [pc, #228]	; (8006bb0 <HAL_UART_MspInit+0x1d4>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d162      	bne.n	8006b94 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006ace:	2300      	movs	r3, #0
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	4b33      	ldr	r3, [pc, #204]	; (8006ba0 <HAL_UART_MspInit+0x1c4>)
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	4a32      	ldr	r2, [pc, #200]	; (8006ba0 <HAL_UART_MspInit+0x1c4>)
 8006ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006adc:	6413      	str	r3, [r2, #64]	; 0x40
 8006ade:	4b30      	ldr	r3, [pc, #192]	; (8006ba0 <HAL_UART_MspInit+0x1c4>)
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ae6:	613b      	str	r3, [r7, #16]
 8006ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	4b2c      	ldr	r3, [pc, #176]	; (8006ba0 <HAL_UART_MspInit+0x1c4>)
 8006af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af2:	4a2b      	ldr	r2, [pc, #172]	; (8006ba0 <HAL_UART_MspInit+0x1c4>)
 8006af4:	f043 0302 	orr.w	r3, r3, #2
 8006af8:	6313      	str	r3, [r2, #48]	; 0x30
 8006afa:	4b29      	ldr	r3, [pc, #164]	; (8006ba0 <HAL_UART_MspInit+0x1c4>)
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006b06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b10:	2300      	movs	r3, #0
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b14:	2303      	movs	r3, #3
 8006b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006b18:	2307      	movs	r3, #7
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b1c:	f107 031c 	add.w	r3, r7, #28
 8006b20:	4619      	mov	r1, r3
 8006b22:	4824      	ldr	r0, [pc, #144]	; (8006bb4 <HAL_UART_MspInit+0x1d8>)
 8006b24:	f001 fc8a 	bl	800843c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8006b28:	4b23      	ldr	r3, [pc, #140]	; (8006bb8 <HAL_UART_MspInit+0x1dc>)
 8006b2a:	4a24      	ldr	r2, [pc, #144]	; (8006bbc <HAL_UART_MspInit+0x1e0>)
 8006b2c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8006b2e:	4b22      	ldr	r3, [pc, #136]	; (8006bb8 <HAL_UART_MspInit+0x1dc>)
 8006b30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b34:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b36:	4b20      	ldr	r3, [pc, #128]	; (8006bb8 <HAL_UART_MspInit+0x1dc>)
 8006b38:	2240      	movs	r2, #64	; 0x40
 8006b3a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b3c:	4b1e      	ldr	r3, [pc, #120]	; (8006bb8 <HAL_UART_MspInit+0x1dc>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b42:	4b1d      	ldr	r3, [pc, #116]	; (8006bb8 <HAL_UART_MspInit+0x1dc>)
 8006b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b48:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b4a:	4b1b      	ldr	r3, [pc, #108]	; (8006bb8 <HAL_UART_MspInit+0x1dc>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b50:	4b19      	ldr	r3, [pc, #100]	; (8006bb8 <HAL_UART_MspInit+0x1dc>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006b56:	4b18      	ldr	r3, [pc, #96]	; (8006bb8 <HAL_UART_MspInit+0x1dc>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006b5c:	4b16      	ldr	r3, [pc, #88]	; (8006bb8 <HAL_UART_MspInit+0x1dc>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006b62:	4b15      	ldr	r3, [pc, #84]	; (8006bb8 <HAL_UART_MspInit+0x1dc>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006b68:	4813      	ldr	r0, [pc, #76]	; (8006bb8 <HAL_UART_MspInit+0x1dc>)
 8006b6a:	f001 f865 	bl	8007c38 <HAL_DMA_Init>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8006b74:	f7fe ffb4 	bl	8005ae0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a0f      	ldr	r2, [pc, #60]	; (8006bb8 <HAL_UART_MspInit+0x1dc>)
 8006b7c:	635a      	str	r2, [r3, #52]	; 0x34
 8006b7e:	4a0e      	ldr	r2, [pc, #56]	; (8006bb8 <HAL_UART_MspInit+0x1dc>)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006b84:	2200      	movs	r2, #0
 8006b86:	2105      	movs	r1, #5
 8006b88:	2027      	movs	r0, #39	; 0x27
 8006b8a:	f001 f81d 	bl	8007bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006b8e:	2027      	movs	r0, #39	; 0x27
 8006b90:	f001 f836 	bl	8007c00 <HAL_NVIC_EnableIRQ>
}
 8006b94:	bf00      	nop
 8006b96:	3730      	adds	r7, #48	; 0x30
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	40004400 	.word	0x40004400
 8006ba0:	40023800 	.word	0x40023800
 8006ba4:	40020000 	.word	0x40020000
 8006ba8:	20001088 	.word	0x20001088
 8006bac:	400260a0 	.word	0x400260a0
 8006bb0:	40004800 	.word	0x40004800
 8006bb4:	40020400 	.word	0x40020400
 8006bb8:	200010e8 	.word	0x200010e8
 8006bbc:	40026058 	.word	0x40026058

08006bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006bf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006bc4:	480d      	ldr	r0, [pc, #52]	; (8006bfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006bc6:	490e      	ldr	r1, [pc, #56]	; (8006c00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006bc8:	4a0e      	ldr	r2, [pc, #56]	; (8006c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006bcc:	e002      	b.n	8006bd4 <LoopCopyDataInit>

08006bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006bd2:	3304      	adds	r3, #4

08006bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006bd8:	d3f9      	bcc.n	8006bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006bda:	4a0b      	ldr	r2, [pc, #44]	; (8006c08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006bdc:	4c0b      	ldr	r4, [pc, #44]	; (8006c0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8006bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006be0:	e001      	b.n	8006be6 <LoopFillZerobss>

08006be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006be4:	3204      	adds	r2, #4

08006be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006be8:	d3fb      	bcc.n	8006be2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006bea:	f7ff fab9 	bl	8006160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006bee:	f009 fc11 	bl	8010414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006bf2:	f7fe fed2 	bl	800599a <main>
  bx  lr    
 8006bf6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c00:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8006c04:	08016048 	.word	0x08016048
  ldr r2, =_sbss
 8006c08:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8006c0c:	20005b6c 	.word	0x20005b6c

08006c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c10:	e7fe      	b.n	8006c10 <ADC_IRQHandler>
	...

08006c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006c18:	4b0e      	ldr	r3, [pc, #56]	; (8006c54 <HAL_Init+0x40>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a0d      	ldr	r2, [pc, #52]	; (8006c54 <HAL_Init+0x40>)
 8006c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006c24:	4b0b      	ldr	r3, [pc, #44]	; (8006c54 <HAL_Init+0x40>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a0a      	ldr	r2, [pc, #40]	; (8006c54 <HAL_Init+0x40>)
 8006c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c30:	4b08      	ldr	r3, [pc, #32]	; (8006c54 <HAL_Init+0x40>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a07      	ldr	r2, [pc, #28]	; (8006c54 <HAL_Init+0x40>)
 8006c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c3c:	2003      	movs	r0, #3
 8006c3e:	f000 ffb8 	bl	8007bb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006c42:	200f      	movs	r0, #15
 8006c44:	f7ff f8d6 	bl	8005df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c48:	f7ff f8a8 	bl	8005d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40023c00 	.word	0x40023c00

08006c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c5c:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <HAL_IncTick+0x20>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <HAL_IncTick+0x24>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4413      	add	r3, r2
 8006c68:	4a04      	ldr	r2, [pc, #16]	; (8006c7c <HAL_IncTick+0x24>)
 8006c6a:	6013      	str	r3, [r2, #0]
}
 8006c6c:	bf00      	nop
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	20000098 	.word	0x20000098
 8006c7c:	20001148 	.word	0x20001148

08006c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0
  return uwTick;
 8006c84:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <HAL_GetTick+0x14>)
 8006c86:	681b      	ldr	r3, [r3, #0]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20001148 	.word	0x20001148

08006c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ca0:	f7ff ffee 	bl	8006c80 <HAL_GetTick>
 8006ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb0:	d005      	beq.n	8006cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006cb2:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <HAL_Delay+0x44>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4413      	add	r3, r2
 8006cbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006cbe:	bf00      	nop
 8006cc0:	f7ff ffde 	bl	8006c80 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d8f7      	bhi.n	8006cc0 <HAL_Delay+0x28>
  {
  }
}
 8006cd0:	bf00      	nop
 8006cd2:	bf00      	nop
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000098 	.word	0x20000098

08006ce0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e0ed      	b.n	8006ece <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d102      	bne.n	8006d04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7fa f97c 	bl	8000ffc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0201 	orr.w	r2, r2, #1
 8006d12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d14:	f7ff ffb4 	bl	8006c80 <HAL_GetTick>
 8006d18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006d1a:	e012      	b.n	8006d42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006d1c:	f7ff ffb0 	bl	8006c80 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b0a      	cmp	r3, #10
 8006d28:	d90b      	bls.n	8006d42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2205      	movs	r2, #5
 8006d3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e0c5      	b.n	8006ece <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d0e5      	beq.n	8006d1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0202 	bic.w	r2, r2, #2
 8006d5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d60:	f7ff ff8e 	bl	8006c80 <HAL_GetTick>
 8006d64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006d66:	e012      	b.n	8006d8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006d68:	f7ff ff8a 	bl	8006c80 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b0a      	cmp	r3, #10
 8006d74:	d90b      	bls.n	8006d8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2205      	movs	r2, #5
 8006d86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e09f      	b.n	8006ece <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e5      	bne.n	8006d68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	7e1b      	ldrb	r3, [r3, #24]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d108      	bne.n	8006db6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	e007      	b.n	8006dc6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	7e5b      	ldrb	r3, [r3, #25]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d108      	bne.n	8006de0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	e007      	b.n	8006df0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	7e9b      	ldrb	r3, [r3, #26]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d108      	bne.n	8006e0a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f042 0220 	orr.w	r2, r2, #32
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	e007      	b.n	8006e1a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0220 	bic.w	r2, r2, #32
 8006e18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	7edb      	ldrb	r3, [r3, #27]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d108      	bne.n	8006e34 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 0210 	bic.w	r2, r2, #16
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	e007      	b.n	8006e44 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0210 	orr.w	r2, r2, #16
 8006e42:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	7f1b      	ldrb	r3, [r3, #28]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d108      	bne.n	8006e5e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f042 0208 	orr.w	r2, r2, #8
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	e007      	b.n	8006e6e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 0208 	bic.w	r2, r2, #8
 8006e6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	7f5b      	ldrb	r3, [r3, #29]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d108      	bne.n	8006e88 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 0204 	orr.w	r2, r2, #4
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	e007      	b.n	8006e98 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0204 	bic.w	r2, r2, #4
 8006e96:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	ea42 0103 	orr.w	r1, r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	1e5a      	subs	r2, r3, #1
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
	...

08006ed8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006eee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006ef0:	7cfb      	ldrb	r3, [r7, #19]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d003      	beq.n	8006efe <HAL_CAN_ConfigFilter+0x26>
 8006ef6:	7cfb      	ldrb	r3, [r7, #19]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	f040 80be 	bne.w	800707a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8006efe:	4b65      	ldr	r3, [pc, #404]	; (8007094 <HAL_CAN_ConfigFilter+0x1bc>)
 8006f00:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f08:	f043 0201 	orr.w	r2, r3, #1
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f18:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	2201      	movs	r2, #1
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	43db      	mvns	r3, r3
 8006f50:	401a      	ands	r2, r3
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d123      	bne.n	8006fa8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	43db      	mvns	r3, r3
 8006f6a:	401a      	ands	r2, r3
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006f82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	3248      	adds	r2, #72	; 0x48
 8006f88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f9e:	6979      	ldr	r1, [r7, #20]
 8006fa0:	3348      	adds	r3, #72	; 0x48
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	440b      	add	r3, r1
 8006fa6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d122      	bne.n	8006ff6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006fd0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	3248      	adds	r2, #72	; 0x48
 8006fd6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006fea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006fec:	6979      	ldr	r1, [r7, #20]
 8006fee:	3348      	adds	r3, #72	; 0x48
 8006ff0:	00db      	lsls	r3, r3, #3
 8006ff2:	440b      	add	r3, r1
 8006ff4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d109      	bne.n	8007012 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	43db      	mvns	r3, r3
 8007008:	401a      	ands	r2, r3
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007010:	e007      	b.n	8007022 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	431a      	orrs	r2, r3
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d109      	bne.n	800703e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	43db      	mvns	r3, r3
 8007034:	401a      	ands	r2, r3
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800703c:	e007      	b.n	800704e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	431a      	orrs	r2, r3
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d107      	bne.n	8007066 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	431a      	orrs	r2, r3
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800706c:	f023 0201 	bic.w	r2, r3, #1
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	e006      	b.n	8007088 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
  }
}
 8007088:	4618      	mov	r0, r3
 800708a:	371c      	adds	r7, #28
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	40006400 	.word	0x40006400

08007098 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d12e      	bne.n	800710a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0201 	bic.w	r2, r2, #1
 80070c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070c4:	f7ff fddc 	bl	8006c80 <HAL_GetTick>
 80070c8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80070ca:	e012      	b.n	80070f2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80070cc:	f7ff fdd8 	bl	8006c80 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	2b0a      	cmp	r3, #10
 80070d8:	d90b      	bls.n	80070f2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2205      	movs	r2, #5
 80070ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e012      	b.n	8007118 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e5      	bne.n	80070cc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	e006      	b.n	8007118 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
  }
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007120:	b480      	push	{r7}
 8007122:	b089      	sub	sp, #36	; 0x24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007134:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800713e:	7ffb      	ldrb	r3, [r7, #31]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d003      	beq.n	800714c <HAL_CAN_AddTxMessage+0x2c>
 8007144:	7ffb      	ldrb	r3, [r7, #31]
 8007146:	2b02      	cmp	r3, #2
 8007148:	f040 80b8 	bne.w	80072bc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10a      	bne.n	800716c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800715c:	2b00      	cmp	r3, #0
 800715e:	d105      	bne.n	800716c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 80a0 	beq.w	80072ac <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	0e1b      	lsrs	r3, r3, #24
 8007170:	f003 0303 	and.w	r3, r3, #3
 8007174:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b02      	cmp	r3, #2
 800717a:	d907      	bls.n	800718c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e09e      	b.n	80072ca <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800718c:	2201      	movs	r2, #1
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	409a      	lsls	r2, r3
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10d      	bne.n	80071ba <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80071a8:	68f9      	ldr	r1, [r7, #12]
 80071aa:	6809      	ldr	r1, [r1, #0]
 80071ac:	431a      	orrs	r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	3318      	adds	r3, #24
 80071b2:	011b      	lsls	r3, r3, #4
 80071b4:	440b      	add	r3, r1
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	e00f      	b.n	80071da <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80071c4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80071ca:	68f9      	ldr	r1, [r7, #12]
 80071cc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80071ce:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	3318      	adds	r3, #24
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	440b      	add	r3, r1
 80071d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6819      	ldr	r1, [r3, #0]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	3318      	adds	r3, #24
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	440b      	add	r3, r1
 80071ea:	3304      	adds	r3, #4
 80071ec:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	7d1b      	ldrb	r3, [r3, #20]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d111      	bne.n	800721a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	3318      	adds	r3, #24
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	4413      	add	r3, r2
 8007202:	3304      	adds	r3, #4
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	6811      	ldr	r1, [r2, #0]
 800720a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	3318      	adds	r3, #24
 8007212:	011b      	lsls	r3, r3, #4
 8007214:	440b      	add	r3, r1
 8007216:	3304      	adds	r3, #4
 8007218:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	3307      	adds	r3, #7
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	061a      	lsls	r2, r3, #24
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3306      	adds	r3, #6
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	041b      	lsls	r3, r3, #16
 800722a:	431a      	orrs	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3305      	adds	r3, #5
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	021b      	lsls	r3, r3, #8
 8007234:	4313      	orrs	r3, r2
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	3204      	adds	r2, #4
 800723a:	7812      	ldrb	r2, [r2, #0]
 800723c:	4610      	mov	r0, r2
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	6811      	ldr	r1, [r2, #0]
 8007242:	ea43 0200 	orr.w	r2, r3, r0
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	011b      	lsls	r3, r3, #4
 800724a:	440b      	add	r3, r1
 800724c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007250:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3303      	adds	r3, #3
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	061a      	lsls	r2, r3, #24
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	3302      	adds	r3, #2
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	041b      	lsls	r3, r3, #16
 8007262:	431a      	orrs	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	3301      	adds	r3, #1
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	4313      	orrs	r3, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	7812      	ldrb	r2, [r2, #0]
 8007272:	4610      	mov	r0, r2
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	6811      	ldr	r1, [r2, #0]
 8007278:	ea43 0200 	orr.w	r2, r3, r0
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	011b      	lsls	r3, r3, #4
 8007280:	440b      	add	r3, r1
 8007282:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007286:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	3318      	adds	r3, #24
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	4413      	add	r3, r2
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	6811      	ldr	r1, [r2, #0]
 800729a:	f043 0201 	orr.w	r2, r3, #1
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	3318      	adds	r3, #24
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	440b      	add	r3, r1
 80072a6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	e00e      	b.n	80072ca <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e006      	b.n	80072ca <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
  }
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3724      	adds	r7, #36	; 0x24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b085      	sub	sp, #20
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072e8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80072ea:	7afb      	ldrb	r3, [r7, #11]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d002      	beq.n	80072f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80072f0:	7afb      	ldrb	r3, [r7, #11]
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d11d      	bne.n	8007332 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	3301      	adds	r3, #1
 8007308:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3301      	adds	r3, #1
 800731c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3301      	adds	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007332:	68fb      	ldr	r3, [r7, #12]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007354:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007356:	7dfb      	ldrb	r3, [r7, #23]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d003      	beq.n	8007364 <HAL_CAN_GetRxMessage+0x24>
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	2b02      	cmp	r3, #2
 8007360:	f040 80f3 	bne.w	800754a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10e      	bne.n	8007388 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	f003 0303 	and.w	r3, r3, #3
 8007374:	2b00      	cmp	r3, #0
 8007376:	d116      	bne.n	80073a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e0e7      	b.n	8007558 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d107      	bne.n	80073a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e0d8      	b.n	8007558 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	331b      	adds	r3, #27
 80073ae:	011b      	lsls	r3, r3, #4
 80073b0:	4413      	add	r3, r2
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0204 	and.w	r2, r3, #4
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10c      	bne.n	80073de <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	331b      	adds	r3, #27
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	4413      	add	r3, r2
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	0d5b      	lsrs	r3, r3, #21
 80073d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e00b      	b.n	80073f6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	331b      	adds	r3, #27
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	4413      	add	r3, r2
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	08db      	lsrs	r3, r3, #3
 80073ee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	331b      	adds	r3, #27
 80073fe:	011b      	lsls	r3, r3, #4
 8007400:	4413      	add	r3, r2
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0202 	and.w	r2, r3, #2
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	331b      	adds	r3, #27
 8007414:	011b      	lsls	r3, r3, #4
 8007416:	4413      	add	r3, r2
 8007418:	3304      	adds	r3, #4
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 020f 	and.w	r2, r3, #15
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	331b      	adds	r3, #27
 800742c:	011b      	lsls	r3, r3, #4
 800742e:	4413      	add	r3, r2
 8007430:	3304      	adds	r3, #4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	0a1b      	lsrs	r3, r3, #8
 8007436:	b2da      	uxtb	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	331b      	adds	r3, #27
 8007444:	011b      	lsls	r3, r3, #4
 8007446:	4413      	add	r3, r2
 8007448:	3304      	adds	r3, #4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	0c1b      	lsrs	r3, r3, #16
 800744e:	b29a      	uxth	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	4413      	add	r3, r2
 800745e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	b2da      	uxtb	r2, r3
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	011b      	lsls	r3, r3, #4
 8007472:	4413      	add	r3, r2
 8007474:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	0a1a      	lsrs	r2, r3, #8
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	3301      	adds	r3, #1
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	011b      	lsls	r3, r3, #4
 800748c:	4413      	add	r3, r2
 800748e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	0c1a      	lsrs	r2, r3, #16
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	3302      	adds	r3, #2
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	011b      	lsls	r3, r3, #4
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	0e1a      	lsrs	r2, r3, #24
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	3303      	adds	r3, #3
 80074b4:	b2d2      	uxtb	r2, r2
 80074b6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	3304      	adds	r3, #4
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	011b      	lsls	r3, r3, #4
 80074d8:	4413      	add	r3, r2
 80074da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	0a1a      	lsrs	r2, r3, #8
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	3305      	adds	r3, #5
 80074e6:	b2d2      	uxtb	r2, r2
 80074e8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	011b      	lsls	r3, r3, #4
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	0c1a      	lsrs	r2, r3, #16
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	3306      	adds	r3, #6
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	4413      	add	r3, r2
 800750e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	0e1a      	lsrs	r2, r3, #24
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	3307      	adds	r3, #7
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d108      	bne.n	8007536 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0220 	orr.w	r2, r2, #32
 8007532:	60da      	str	r2, [r3, #12]
 8007534:	e007      	b.n	8007546 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	691a      	ldr	r2, [r3, #16]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f042 0220 	orr.w	r2, r2, #32
 8007544:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	e006      	b.n	8007558 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
  }
}
 8007558:	4618      	mov	r0, r3
 800755a:	371c      	adds	r7, #28
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007574:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d002      	beq.n	8007582 <HAL_CAN_ActivateNotification+0x1e>
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	2b02      	cmp	r3, #2
 8007580:	d109      	bne.n	8007596 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6959      	ldr	r1, [r3, #20]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	e006      	b.n	80075a4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
  }
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08a      	sub	sp, #40	; 0x28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80075b8:	2300      	movs	r3, #0
 80075ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d07c      	beq.n	80076f0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d023      	beq.n	8007648 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2201      	movs	r2, #1
 8007606:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f983 	bl	800791e <HAL_CAN_TxMailbox0CompleteCallback>
 8007618:	e016      	b.n	8007648 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d004      	beq.n	800762e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
 800762c:	e00c      	b.n	8007648 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	f003 0308 	and.w	r3, r3, #8
 8007634:	2b00      	cmp	r3, #0
 8007636:	d004      	beq.n	8007642 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800763e:	627b      	str	r3, [r7, #36]	; 0x24
 8007640:	e002      	b.n	8007648 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f989 	bl	800795a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800764e:	2b00      	cmp	r3, #0
 8007650:	d024      	beq.n	800769c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800765a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f963 	bl	8007932 <HAL_CAN_TxMailbox1CompleteCallback>
 800766c:	e016      	b.n	800769c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
 8007680:	e00c      	b.n	800769c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007688:	2b00      	cmp	r3, #0
 800768a:	d004      	beq.n	8007696 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007692:	627b      	str	r3, [r7, #36]	; 0x24
 8007694:	e002      	b.n	800769c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f969 	bl	800796e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d024      	beq.n	80076f0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80076ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f943 	bl	8007946 <HAL_CAN_TxMailbox2CompleteCallback>
 80076c0:	e016      	b.n	80076f0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d004      	beq.n	80076d6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076d2:	627b      	str	r3, [r7, #36]	; 0x24
 80076d4:	e00c      	b.n	80076f0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d004      	beq.n	80076ea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076e6:	627b      	str	r3, [r7, #36]	; 0x24
 80076e8:	e002      	b.n	80076f0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f949 	bl	8007982 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	f003 0308 	and.w	r3, r3, #8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00c      	beq.n	8007714 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f003 0310 	and.w	r3, r3, #16
 8007700:	2b00      	cmp	r3, #0
 8007702:	d007      	beq.n	8007714 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800770a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2210      	movs	r2, #16
 8007712:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	f003 0304 	and.w	r3, r3, #4
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00b      	beq.n	8007736 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f003 0308 	and.w	r3, r3, #8
 8007724:	2b00      	cmp	r3, #0
 8007726:	d006      	beq.n	8007736 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2208      	movs	r2, #8
 800772e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f930 	bl	8007996 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d009      	beq.n	8007754 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f003 0303 	and.w	r3, r3, #3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7f9 ff1c 	bl	800158c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00c      	beq.n	8007778 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f003 0310 	and.w	r3, r3, #16
 8007764:	2b00      	cmp	r3, #0
 8007766:	d007      	beq.n	8007778 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800776e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2210      	movs	r2, #16
 8007776:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	f003 0320 	and.w	r3, r3, #32
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00b      	beq.n	800779a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	f003 0308 	and.w	r3, r3, #8
 8007788:	2b00      	cmp	r3, #0
 800778a:	d006      	beq.n	800779a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2208      	movs	r2, #8
 8007792:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f912 	bl	80079be <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	f003 0310 	and.w	r3, r3, #16
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d009      	beq.n	80077b8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f8f9 	bl	80079aa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00b      	beq.n	80077da <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d006      	beq.n	80077da <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2210      	movs	r2, #16
 80077d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f8fc 	bl	80079d2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	f003 0308 	and.w	r3, r3, #8
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d006      	beq.n	80077fc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2208      	movs	r2, #8
 80077f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f8f5 	bl	80079e6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d07b      	beq.n	80078fe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	f003 0304 	and.w	r3, r3, #4
 800780c:	2b00      	cmp	r3, #0
 800780e:	d072      	beq.n	80078f6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007816:	2b00      	cmp	r3, #0
 8007818:	d008      	beq.n	800782c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007820:	2b00      	cmp	r3, #0
 8007822:	d003      	beq.n	800782c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	f043 0301 	orr.w	r3, r3, #1
 800782a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007832:	2b00      	cmp	r3, #0
 8007834:	d008      	beq.n	8007848 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	f043 0302 	orr.w	r3, r3, #2
 8007846:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800784e:	2b00      	cmp	r3, #0
 8007850:	d008      	beq.n	8007864 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	f043 0304 	orr.w	r3, r3, #4
 8007862:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800786a:	2b00      	cmp	r3, #0
 800786c:	d043      	beq.n	80078f6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007874:	2b00      	cmp	r3, #0
 8007876:	d03e      	beq.n	80078f6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800787e:	2b60      	cmp	r3, #96	; 0x60
 8007880:	d02b      	beq.n	80078da <HAL_CAN_IRQHandler+0x32a>
 8007882:	2b60      	cmp	r3, #96	; 0x60
 8007884:	d82e      	bhi.n	80078e4 <HAL_CAN_IRQHandler+0x334>
 8007886:	2b50      	cmp	r3, #80	; 0x50
 8007888:	d022      	beq.n	80078d0 <HAL_CAN_IRQHandler+0x320>
 800788a:	2b50      	cmp	r3, #80	; 0x50
 800788c:	d82a      	bhi.n	80078e4 <HAL_CAN_IRQHandler+0x334>
 800788e:	2b40      	cmp	r3, #64	; 0x40
 8007890:	d019      	beq.n	80078c6 <HAL_CAN_IRQHandler+0x316>
 8007892:	2b40      	cmp	r3, #64	; 0x40
 8007894:	d826      	bhi.n	80078e4 <HAL_CAN_IRQHandler+0x334>
 8007896:	2b30      	cmp	r3, #48	; 0x30
 8007898:	d010      	beq.n	80078bc <HAL_CAN_IRQHandler+0x30c>
 800789a:	2b30      	cmp	r3, #48	; 0x30
 800789c:	d822      	bhi.n	80078e4 <HAL_CAN_IRQHandler+0x334>
 800789e:	2b10      	cmp	r3, #16
 80078a0:	d002      	beq.n	80078a8 <HAL_CAN_IRQHandler+0x2f8>
 80078a2:	2b20      	cmp	r3, #32
 80078a4:	d005      	beq.n	80078b2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80078a6:	e01d      	b.n	80078e4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	f043 0308 	orr.w	r3, r3, #8
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80078b0:	e019      	b.n	80078e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	f043 0310 	orr.w	r3, r3, #16
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80078ba:	e014      	b.n	80078e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	f043 0320 	orr.w	r3, r3, #32
 80078c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80078c4:	e00f      	b.n	80078e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80078ce:	e00a      	b.n	80078e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80078d8:	e005      	b.n	80078e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80078e2:	e000      	b.n	80078e6 <HAL_CAN_IRQHandler+0x336>
            break;
 80078e4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	699a      	ldr	r2, [r3, #24]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80078f4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2204      	movs	r2, #4
 80078fc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	2b00      	cmp	r3, #0
 8007902:	d008      	beq.n	8007916 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	431a      	orrs	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f872 	bl	80079fa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007916:	bf00      	nop
 8007918:	3728      	adds	r7, #40	; 0x28
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007926:	bf00      	nop
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800793a:	bf00      	nop
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800794e:	bf00      	nop
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007962:	bf00      	nop
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800796e:	b480      	push	{r7}
 8007970:	b083      	sub	sp, #12
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800798a:	bf00      	nop
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
	...

08007a10 <__NVIC_SetPriorityGrouping>:
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a20:	4b0c      	ldr	r3, [pc, #48]	; (8007a54 <__NVIC_SetPriorityGrouping+0x44>)
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a42:	4a04      	ldr	r2, [pc, #16]	; (8007a54 <__NVIC_SetPriorityGrouping+0x44>)
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	60d3      	str	r3, [r2, #12]
}
 8007a48:	bf00      	nop
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	e000ed00 	.word	0xe000ed00

08007a58 <__NVIC_GetPriorityGrouping>:
{
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a5c:	4b04      	ldr	r3, [pc, #16]	; (8007a70 <__NVIC_GetPriorityGrouping+0x18>)
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	0a1b      	lsrs	r3, r3, #8
 8007a62:	f003 0307 	and.w	r3, r3, #7
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	e000ed00 	.word	0xe000ed00

08007a74 <__NVIC_EnableIRQ>:
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	db0b      	blt.n	8007a9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a86:	79fb      	ldrb	r3, [r7, #7]
 8007a88:	f003 021f 	and.w	r2, r3, #31
 8007a8c:	4907      	ldr	r1, [pc, #28]	; (8007aac <__NVIC_EnableIRQ+0x38>)
 8007a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a92:	095b      	lsrs	r3, r3, #5
 8007a94:	2001      	movs	r0, #1
 8007a96:	fa00 f202 	lsl.w	r2, r0, r2
 8007a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	e000e100 	.word	0xe000e100

08007ab0 <__NVIC_DisableIRQ>:
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	db12      	blt.n	8007ae8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ac2:	79fb      	ldrb	r3, [r7, #7]
 8007ac4:	f003 021f 	and.w	r2, r3, #31
 8007ac8:	490a      	ldr	r1, [pc, #40]	; (8007af4 <__NVIC_DisableIRQ+0x44>)
 8007aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	2001      	movs	r0, #1
 8007ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ad6:	3320      	adds	r3, #32
 8007ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007adc:	f3bf 8f4f 	dsb	sy
}
 8007ae0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007ae2:	f3bf 8f6f 	isb	sy
}
 8007ae6:	bf00      	nop
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	e000e100 	.word	0xe000e100

08007af8 <__NVIC_SetPriority>:
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	6039      	str	r1, [r7, #0]
 8007b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	db0a      	blt.n	8007b22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	490c      	ldr	r1, [pc, #48]	; (8007b44 <__NVIC_SetPriority+0x4c>)
 8007b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b16:	0112      	lsls	r2, r2, #4
 8007b18:	b2d2      	uxtb	r2, r2
 8007b1a:	440b      	add	r3, r1
 8007b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b20:	e00a      	b.n	8007b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	4908      	ldr	r1, [pc, #32]	; (8007b48 <__NVIC_SetPriority+0x50>)
 8007b28:	79fb      	ldrb	r3, [r7, #7]
 8007b2a:	f003 030f 	and.w	r3, r3, #15
 8007b2e:	3b04      	subs	r3, #4
 8007b30:	0112      	lsls	r2, r2, #4
 8007b32:	b2d2      	uxtb	r2, r2
 8007b34:	440b      	add	r3, r1
 8007b36:	761a      	strb	r2, [r3, #24]
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	e000e100 	.word	0xe000e100
 8007b48:	e000ed00 	.word	0xe000ed00

08007b4c <NVIC_EncodePriority>:
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b089      	sub	sp, #36	; 0x24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f003 0307 	and.w	r3, r3, #7
 8007b5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	f1c3 0307 	rsb	r3, r3, #7
 8007b66:	2b04      	cmp	r3, #4
 8007b68:	bf28      	it	cs
 8007b6a:	2304      	movcs	r3, #4
 8007b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	3304      	adds	r3, #4
 8007b72:	2b06      	cmp	r3, #6
 8007b74:	d902      	bls.n	8007b7c <NVIC_EncodePriority+0x30>
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	3b03      	subs	r3, #3
 8007b7a:	e000      	b.n	8007b7e <NVIC_EncodePriority+0x32>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b80:	f04f 32ff 	mov.w	r2, #4294967295
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8a:	43da      	mvns	r2, r3
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	401a      	ands	r2, r3
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b94:	f04f 31ff 	mov.w	r1, #4294967295
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9e:	43d9      	mvns	r1, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ba4:	4313      	orrs	r3, r2
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3724      	adds	r7, #36	; 0x24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7ff ff28 	bl	8007a10 <__NVIC_SetPriorityGrouping>
}
 8007bc0:	bf00      	nop
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007bda:	f7ff ff3d 	bl	8007a58 <__NVIC_GetPriorityGrouping>
 8007bde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	6978      	ldr	r0, [r7, #20]
 8007be6:	f7ff ffb1 	bl	8007b4c <NVIC_EncodePriority>
 8007bea:	4602      	mov	r2, r0
 8007bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff ff80 	bl	8007af8 <__NVIC_SetPriority>
}
 8007bf8:	bf00      	nop
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7ff ff30 	bl	8007a74 <__NVIC_EnableIRQ>
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	4603      	mov	r3, r0
 8007c24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7ff ff40 	bl	8007ab0 <__NVIC_DisableIRQ>
}
 8007c30:	bf00      	nop
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007c44:	f7ff f81c 	bl	8006c80 <HAL_GetTick>
 8007c48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e099      	b.n	8007d88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2202      	movs	r2, #2
 8007c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 0201 	bic.w	r2, r2, #1
 8007c72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c74:	e00f      	b.n	8007c96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007c76:	f7ff f803 	bl	8006c80 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	2b05      	cmp	r3, #5
 8007c82:	d908      	bls.n	8007c96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2220      	movs	r2, #32
 8007c88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2203      	movs	r2, #3
 8007c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e078      	b.n	8007d88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e8      	bne.n	8007c76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	4b38      	ldr	r3, [pc, #224]	; (8007d90 <HAL_DMA_Init+0x158>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d107      	bne.n	8007d00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	f023 0307 	bic.w	r3, r3, #7
 8007d16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d26:	2b04      	cmp	r3, #4
 8007d28:	d117      	bne.n	8007d5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00e      	beq.n	8007d5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fb01 	bl	8008344 <DMA_CheckFifoParam>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d008      	beq.n	8007d5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2240      	movs	r2, #64	; 0x40
 8007d4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007d56:	2301      	movs	r3, #1
 8007d58:	e016      	b.n	8007d88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fab8 	bl	80082d8 <DMA_CalcBaseAndBitshift>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d70:	223f      	movs	r2, #63	; 0x3f
 8007d72:	409a      	lsls	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	f010803f 	.word	0xf010803f

08007d94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
 8007da0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007daa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d101      	bne.n	8007dba <HAL_DMA_Start_IT+0x26>
 8007db6:	2302      	movs	r3, #2
 8007db8:	e040      	b.n	8007e3c <HAL_DMA_Start_IT+0xa8>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d12f      	bne.n	8007e2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	68b9      	ldr	r1, [r7, #8]
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 fa4a 	bl	800827c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dec:	223f      	movs	r2, #63	; 0x3f
 8007dee:	409a      	lsls	r2, r3
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f042 0216 	orr.w	r2, r2, #22
 8007e02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d007      	beq.n	8007e1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0208 	orr.w	r2, r2, #8
 8007e1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f042 0201 	orr.w	r2, r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	e005      	b.n	8007e3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007e36:	2302      	movs	r3, #2
 8007e38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007e52:	f7fe ff15 	bl	8006c80 <HAL_GetTick>
 8007e56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d008      	beq.n	8007e76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2280      	movs	r2, #128	; 0x80
 8007e68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e052      	b.n	8007f1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0216 	bic.w	r2, r2, #22
 8007e84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	695a      	ldr	r2, [r3, #20]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d103      	bne.n	8007ea6 <HAL_DMA_Abort+0x62>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d007      	beq.n	8007eb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 0208 	bic.w	r2, r2, #8
 8007eb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f022 0201 	bic.w	r2, r2, #1
 8007ec4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ec6:	e013      	b.n	8007ef0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ec8:	f7fe feda 	bl	8006c80 <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b05      	cmp	r3, #5
 8007ed4:	d90c      	bls.n	8007ef0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2203      	movs	r2, #3
 8007ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e015      	b.n	8007f1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e4      	bne.n	8007ec8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f02:	223f      	movs	r2, #63	; 0x3f
 8007f04:	409a      	lsls	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d004      	beq.n	8007f42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2280      	movs	r2, #128	; 0x80
 8007f3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e00c      	b.n	8007f5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2205      	movs	r2, #5
 8007f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 0201 	bic.w	r2, r2, #1
 8007f58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007f74:	4b8e      	ldr	r3, [pc, #568]	; (80081b0 <HAL_DMA_IRQHandler+0x248>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a8e      	ldr	r2, [pc, #568]	; (80081b4 <HAL_DMA_IRQHandler+0x24c>)
 8007f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f7e:	0a9b      	lsrs	r3, r3, #10
 8007f80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f92:	2208      	movs	r2, #8
 8007f94:	409a      	lsls	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4013      	ands	r3, r2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d01a      	beq.n	8007fd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0304 	and.w	r3, r3, #4
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d013      	beq.n	8007fd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0204 	bic.w	r2, r2, #4
 8007fba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc0:	2208      	movs	r2, #8
 8007fc2:	409a      	lsls	r2, r3
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fcc:	f043 0201 	orr.w	r2, r3, #1
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd8:	2201      	movs	r2, #1
 8007fda:	409a      	lsls	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4013      	ands	r3, r2
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d012      	beq.n	800800a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00b      	beq.n	800800a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	409a      	lsls	r2, r3
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008002:	f043 0202 	orr.w	r2, r3, #2
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800e:	2204      	movs	r2, #4
 8008010:	409a      	lsls	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4013      	ands	r3, r2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d012      	beq.n	8008040 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0302 	and.w	r3, r3, #2
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00b      	beq.n	8008040 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800802c:	2204      	movs	r2, #4
 800802e:	409a      	lsls	r2, r3
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008038:	f043 0204 	orr.w	r2, r3, #4
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008044:	2210      	movs	r2, #16
 8008046:	409a      	lsls	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4013      	ands	r3, r2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d043      	beq.n	80080d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0308 	and.w	r3, r3, #8
 800805a:	2b00      	cmp	r3, #0
 800805c:	d03c      	beq.n	80080d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008062:	2210      	movs	r2, #16
 8008064:	409a      	lsls	r2, r3
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d018      	beq.n	80080aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d108      	bne.n	8008098 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808a:	2b00      	cmp	r3, #0
 800808c:	d024      	beq.n	80080d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	4798      	blx	r3
 8008096:	e01f      	b.n	80080d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800809c:	2b00      	cmp	r3, #0
 800809e:	d01b      	beq.n	80080d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	4798      	blx	r3
 80080a8:	e016      	b.n	80080d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d107      	bne.n	80080c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f022 0208 	bic.w	r2, r2, #8
 80080c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080dc:	2220      	movs	r2, #32
 80080de:	409a      	lsls	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4013      	ands	r3, r2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 808f 	beq.w	8008208 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0310 	and.w	r3, r3, #16
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 8087 	beq.w	8008208 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080fe:	2220      	movs	r2, #32
 8008100:	409a      	lsls	r2, r3
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b05      	cmp	r3, #5
 8008110:	d136      	bne.n	8008180 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0216 	bic.w	r2, r2, #22
 8008120:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	695a      	ldr	r2, [r3, #20]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008130:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008136:	2b00      	cmp	r3, #0
 8008138:	d103      	bne.n	8008142 <HAL_DMA_IRQHandler+0x1da>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0208 	bic.w	r2, r2, #8
 8008150:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008156:	223f      	movs	r2, #63	; 0x3f
 8008158:	409a      	lsls	r2, r3
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008172:	2b00      	cmp	r3, #0
 8008174:	d07e      	beq.n	8008274 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	4798      	blx	r3
        }
        return;
 800817e:	e079      	b.n	8008274 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d01d      	beq.n	80081ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10d      	bne.n	80081b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d031      	beq.n	8008208 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	4798      	blx	r3
 80081ac:	e02c      	b.n	8008208 <HAL_DMA_IRQHandler+0x2a0>
 80081ae:	bf00      	nop
 80081b0:	20000090 	.word	0x20000090
 80081b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d023      	beq.n	8008208 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	4798      	blx	r3
 80081c8:	e01e      	b.n	8008208 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10f      	bne.n	80081f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 0210 	bic.w	r2, r2, #16
 80081e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800820c:	2b00      	cmp	r3, #0
 800820e:	d032      	beq.n	8008276 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	d022      	beq.n	8008262 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2205      	movs	r2, #5
 8008220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f022 0201 	bic.w	r2, r2, #1
 8008232:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	3301      	adds	r3, #1
 8008238:	60bb      	str	r3, [r7, #8]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	429a      	cmp	r2, r3
 800823e:	d307      	bcc.n	8008250 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1f2      	bne.n	8008234 <HAL_DMA_IRQHandler+0x2cc>
 800824e:	e000      	b.n	8008252 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008250:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008266:	2b00      	cmp	r3, #0
 8008268:	d005      	beq.n	8008276 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
 8008272:	e000      	b.n	8008276 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008274:	bf00      	nop
    }
  }
}
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008298:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	2b40      	cmp	r3, #64	; 0x40
 80082a8:	d108      	bne.n	80082bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80082ba:	e007      	b.n	80082cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	60da      	str	r2, [r3, #12]
}
 80082cc:	bf00      	nop
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	3b10      	subs	r3, #16
 80082e8:	4a14      	ldr	r2, [pc, #80]	; (800833c <DMA_CalcBaseAndBitshift+0x64>)
 80082ea:	fba2 2303 	umull	r2, r3, r2, r3
 80082ee:	091b      	lsrs	r3, r3, #4
 80082f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80082f2:	4a13      	ldr	r2, [pc, #76]	; (8008340 <DMA_CalcBaseAndBitshift+0x68>)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4413      	add	r3, r2
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2b03      	cmp	r3, #3
 8008304:	d909      	bls.n	800831a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800830e:	f023 0303 	bic.w	r3, r3, #3
 8008312:	1d1a      	adds	r2, r3, #4
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	659a      	str	r2, [r3, #88]	; 0x58
 8008318:	e007      	b.n	800832a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008322:	f023 0303 	bic.w	r3, r3, #3
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800832e:	4618      	mov	r0, r3
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	aaaaaaab 	.word	0xaaaaaaab
 8008340:	08015a0c 	.word	0x08015a0c

08008344 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008354:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d11f      	bne.n	800839e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2b03      	cmp	r3, #3
 8008362:	d856      	bhi.n	8008412 <DMA_CheckFifoParam+0xce>
 8008364:	a201      	add	r2, pc, #4	; (adr r2, 800836c <DMA_CheckFifoParam+0x28>)
 8008366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836a:	bf00      	nop
 800836c:	0800837d 	.word	0x0800837d
 8008370:	0800838f 	.word	0x0800838f
 8008374:	0800837d 	.word	0x0800837d
 8008378:	08008413 	.word	0x08008413
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d046      	beq.n	8008416 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800838c:	e043      	b.n	8008416 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008392:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008396:	d140      	bne.n	800841a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800839c:	e03d      	b.n	800841a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083a6:	d121      	bne.n	80083ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d837      	bhi.n	800841e <DMA_CheckFifoParam+0xda>
 80083ae:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <DMA_CheckFifoParam+0x70>)
 80083b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b4:	080083c5 	.word	0x080083c5
 80083b8:	080083cb 	.word	0x080083cb
 80083bc:	080083c5 	.word	0x080083c5
 80083c0:	080083dd 	.word	0x080083dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	73fb      	strb	r3, [r7, #15]
      break;
 80083c8:	e030      	b.n	800842c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d025      	beq.n	8008422 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083da:	e022      	b.n	8008422 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083e4:	d11f      	bne.n	8008426 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80083ea:	e01c      	b.n	8008426 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d903      	bls.n	80083fa <DMA_CheckFifoParam+0xb6>
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d003      	beq.n	8008400 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80083f8:	e018      	b.n	800842c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	73fb      	strb	r3, [r7, #15]
      break;
 80083fe:	e015      	b.n	800842c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00e      	beq.n	800842a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	73fb      	strb	r3, [r7, #15]
      break;
 8008410:	e00b      	b.n	800842a <DMA_CheckFifoParam+0xe6>
      break;
 8008412:	bf00      	nop
 8008414:	e00a      	b.n	800842c <DMA_CheckFifoParam+0xe8>
      break;
 8008416:	bf00      	nop
 8008418:	e008      	b.n	800842c <DMA_CheckFifoParam+0xe8>
      break;
 800841a:	bf00      	nop
 800841c:	e006      	b.n	800842c <DMA_CheckFifoParam+0xe8>
      break;
 800841e:	bf00      	nop
 8008420:	e004      	b.n	800842c <DMA_CheckFifoParam+0xe8>
      break;
 8008422:	bf00      	nop
 8008424:	e002      	b.n	800842c <DMA_CheckFifoParam+0xe8>
      break;   
 8008426:	bf00      	nop
 8008428:	e000      	b.n	800842c <DMA_CheckFifoParam+0xe8>
      break;
 800842a:	bf00      	nop
    }
  } 
  
  return status; 
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop

0800843c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800843c:	b480      	push	{r7}
 800843e:	b089      	sub	sp, #36	; 0x24
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008446:	2300      	movs	r3, #0
 8008448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800844a:	2300      	movs	r3, #0
 800844c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800844e:	2300      	movs	r3, #0
 8008450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008452:	2300      	movs	r3, #0
 8008454:	61fb      	str	r3, [r7, #28]
 8008456:	e16b      	b.n	8008730 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008458:	2201      	movs	r2, #1
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	fa02 f303 	lsl.w	r3, r2, r3
 8008460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	4013      	ands	r3, r2
 800846a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	429a      	cmp	r2, r3
 8008472:	f040 815a 	bne.w	800872a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f003 0303 	and.w	r3, r3, #3
 800847e:	2b01      	cmp	r3, #1
 8008480:	d005      	beq.n	800848e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800848a:	2b02      	cmp	r3, #2
 800848c:	d130      	bne.n	80084f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	005b      	lsls	r3, r3, #1
 8008498:	2203      	movs	r2, #3
 800849a:	fa02 f303 	lsl.w	r3, r2, r3
 800849e:	43db      	mvns	r3, r3
 80084a0:	69ba      	ldr	r2, [r7, #24]
 80084a2:	4013      	ands	r3, r2
 80084a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	68da      	ldr	r2, [r3, #12]
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	005b      	lsls	r3, r3, #1
 80084ae:	fa02 f303 	lsl.w	r3, r2, r3
 80084b2:	69ba      	ldr	r2, [r7, #24]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	69ba      	ldr	r2, [r7, #24]
 80084bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80084c4:	2201      	movs	r2, #1
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	fa02 f303 	lsl.w	r3, r2, r3
 80084cc:	43db      	mvns	r3, r3
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	4013      	ands	r3, r2
 80084d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	091b      	lsrs	r3, r3, #4
 80084da:	f003 0201 	and.w	r2, r3, #1
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	fa02 f303 	lsl.w	r3, r2, r3
 80084e4:	69ba      	ldr	r2, [r7, #24]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f003 0303 	and.w	r3, r3, #3
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d017      	beq.n	800852c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	2203      	movs	r2, #3
 8008508:	fa02 f303 	lsl.w	r3, r2, r3
 800850c:	43db      	mvns	r3, r3
 800850e:	69ba      	ldr	r2, [r7, #24]
 8008510:	4013      	ands	r3, r2
 8008512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	689a      	ldr	r2, [r3, #8]
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	005b      	lsls	r3, r3, #1
 800851c:	fa02 f303 	lsl.w	r3, r2, r3
 8008520:	69ba      	ldr	r2, [r7, #24]
 8008522:	4313      	orrs	r3, r2
 8008524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f003 0303 	and.w	r3, r3, #3
 8008534:	2b02      	cmp	r3, #2
 8008536:	d123      	bne.n	8008580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	08da      	lsrs	r2, r3, #3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	3208      	adds	r2, #8
 8008540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	f003 0307 	and.w	r3, r3, #7
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	220f      	movs	r2, #15
 8008550:	fa02 f303 	lsl.w	r3, r2, r3
 8008554:	43db      	mvns	r3, r3
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	4013      	ands	r3, r2
 800855a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	691a      	ldr	r2, [r3, #16]
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	f003 0307 	and.w	r3, r3, #7
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	fa02 f303 	lsl.w	r3, r2, r3
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	4313      	orrs	r3, r2
 8008570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	08da      	lsrs	r2, r3, #3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	3208      	adds	r2, #8
 800857a:	69b9      	ldr	r1, [r7, #24]
 800857c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	2203      	movs	r2, #3
 800858c:	fa02 f303 	lsl.w	r3, r2, r3
 8008590:	43db      	mvns	r3, r3
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	4013      	ands	r3, r2
 8008596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	f003 0203 	and.w	r2, r3, #3
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	fa02 f303 	lsl.w	r3, r2, r3
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 80b4 	beq.w	800872a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085c2:	2300      	movs	r3, #0
 80085c4:	60fb      	str	r3, [r7, #12]
 80085c6:	4b60      	ldr	r3, [pc, #384]	; (8008748 <HAL_GPIO_Init+0x30c>)
 80085c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ca:	4a5f      	ldr	r2, [pc, #380]	; (8008748 <HAL_GPIO_Init+0x30c>)
 80085cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085d0:	6453      	str	r3, [r2, #68]	; 0x44
 80085d2:	4b5d      	ldr	r3, [pc, #372]	; (8008748 <HAL_GPIO_Init+0x30c>)
 80085d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80085de:	4a5b      	ldr	r2, [pc, #364]	; (800874c <HAL_GPIO_Init+0x310>)
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	089b      	lsrs	r3, r3, #2
 80085e4:	3302      	adds	r3, #2
 80085e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	220f      	movs	r2, #15
 80085f6:	fa02 f303 	lsl.w	r3, r2, r3
 80085fa:	43db      	mvns	r3, r3
 80085fc:	69ba      	ldr	r2, [r7, #24]
 80085fe:	4013      	ands	r3, r2
 8008600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a52      	ldr	r2, [pc, #328]	; (8008750 <HAL_GPIO_Init+0x314>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d02b      	beq.n	8008662 <HAL_GPIO_Init+0x226>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a51      	ldr	r2, [pc, #324]	; (8008754 <HAL_GPIO_Init+0x318>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d025      	beq.n	800865e <HAL_GPIO_Init+0x222>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a50      	ldr	r2, [pc, #320]	; (8008758 <HAL_GPIO_Init+0x31c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d01f      	beq.n	800865a <HAL_GPIO_Init+0x21e>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a4f      	ldr	r2, [pc, #316]	; (800875c <HAL_GPIO_Init+0x320>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d019      	beq.n	8008656 <HAL_GPIO_Init+0x21a>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a4e      	ldr	r2, [pc, #312]	; (8008760 <HAL_GPIO_Init+0x324>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d013      	beq.n	8008652 <HAL_GPIO_Init+0x216>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a4d      	ldr	r2, [pc, #308]	; (8008764 <HAL_GPIO_Init+0x328>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d00d      	beq.n	800864e <HAL_GPIO_Init+0x212>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a4c      	ldr	r2, [pc, #304]	; (8008768 <HAL_GPIO_Init+0x32c>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d007      	beq.n	800864a <HAL_GPIO_Init+0x20e>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a4b      	ldr	r2, [pc, #300]	; (800876c <HAL_GPIO_Init+0x330>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d101      	bne.n	8008646 <HAL_GPIO_Init+0x20a>
 8008642:	2307      	movs	r3, #7
 8008644:	e00e      	b.n	8008664 <HAL_GPIO_Init+0x228>
 8008646:	2308      	movs	r3, #8
 8008648:	e00c      	b.n	8008664 <HAL_GPIO_Init+0x228>
 800864a:	2306      	movs	r3, #6
 800864c:	e00a      	b.n	8008664 <HAL_GPIO_Init+0x228>
 800864e:	2305      	movs	r3, #5
 8008650:	e008      	b.n	8008664 <HAL_GPIO_Init+0x228>
 8008652:	2304      	movs	r3, #4
 8008654:	e006      	b.n	8008664 <HAL_GPIO_Init+0x228>
 8008656:	2303      	movs	r3, #3
 8008658:	e004      	b.n	8008664 <HAL_GPIO_Init+0x228>
 800865a:	2302      	movs	r3, #2
 800865c:	e002      	b.n	8008664 <HAL_GPIO_Init+0x228>
 800865e:	2301      	movs	r3, #1
 8008660:	e000      	b.n	8008664 <HAL_GPIO_Init+0x228>
 8008662:	2300      	movs	r3, #0
 8008664:	69fa      	ldr	r2, [r7, #28]
 8008666:	f002 0203 	and.w	r2, r2, #3
 800866a:	0092      	lsls	r2, r2, #2
 800866c:	4093      	lsls	r3, r2
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	4313      	orrs	r3, r2
 8008672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008674:	4935      	ldr	r1, [pc, #212]	; (800874c <HAL_GPIO_Init+0x310>)
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	089b      	lsrs	r3, r3, #2
 800867a:	3302      	adds	r3, #2
 800867c:	69ba      	ldr	r2, [r7, #24]
 800867e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008682:	4b3b      	ldr	r3, [pc, #236]	; (8008770 <HAL_GPIO_Init+0x334>)
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	43db      	mvns	r3, r3
 800868c:	69ba      	ldr	r2, [r7, #24]
 800868e:	4013      	ands	r3, r2
 8008690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80086a6:	4a32      	ldr	r2, [pc, #200]	; (8008770 <HAL_GPIO_Init+0x334>)
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80086ac:	4b30      	ldr	r3, [pc, #192]	; (8008770 <HAL_GPIO_Init+0x334>)
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	43db      	mvns	r3, r3
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	4013      	ands	r3, r2
 80086ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d003      	beq.n	80086d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80086d0:	4a27      	ldr	r2, [pc, #156]	; (8008770 <HAL_GPIO_Init+0x334>)
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80086d6:	4b26      	ldr	r3, [pc, #152]	; (8008770 <HAL_GPIO_Init+0x334>)
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	43db      	mvns	r3, r3
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	4013      	ands	r3, r2
 80086e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80086fa:	4a1d      	ldr	r2, [pc, #116]	; (8008770 <HAL_GPIO_Init+0x334>)
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008700:	4b1b      	ldr	r3, [pc, #108]	; (8008770 <HAL_GPIO_Init+0x334>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	43db      	mvns	r3, r3
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	4013      	ands	r3, r2
 800870e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	4313      	orrs	r3, r2
 8008722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008724:	4a12      	ldr	r2, [pc, #72]	; (8008770 <HAL_GPIO_Init+0x334>)
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	3301      	adds	r3, #1
 800872e:	61fb      	str	r3, [r7, #28]
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	2b0f      	cmp	r3, #15
 8008734:	f67f ae90 	bls.w	8008458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008738:	bf00      	nop
 800873a:	bf00      	nop
 800873c:	3724      	adds	r7, #36	; 0x24
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	40023800 	.word	0x40023800
 800874c:	40013800 	.word	0x40013800
 8008750:	40020000 	.word	0x40020000
 8008754:	40020400 	.word	0x40020400
 8008758:	40020800 	.word	0x40020800
 800875c:	40020c00 	.word	0x40020c00
 8008760:	40021000 	.word	0x40021000
 8008764:	40021400 	.word	0x40021400
 8008768:	40021800 	.word	0x40021800
 800876c:	40021c00 	.word	0x40021c00
 8008770:	40013c00 	.word	0x40013c00

08008774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	691a      	ldr	r2, [r3, #16]
 8008784:	887b      	ldrh	r3, [r7, #2]
 8008786:	4013      	ands	r3, r2
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800878c:	2301      	movs	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]
 8008790:	e001      	b.n	8008796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008792:	2300      	movs	r3, #0
 8008794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008796:	7bfb      	ldrb	r3, [r7, #15]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	807b      	strh	r3, [r7, #2]
 80087b0:	4613      	mov	r3, r2
 80087b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80087b4:	787b      	ldrb	r3, [r7, #1]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087ba:	887a      	ldrh	r2, [r7, #2]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80087c0:	e003      	b.n	80087ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80087c2:	887b      	ldrh	r3, [r7, #2]
 80087c4:	041a      	lsls	r2, r3, #16
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	619a      	str	r2, [r3, #24]
}
 80087ca:	bf00      	nop
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b085      	sub	sp, #20
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	460b      	mov	r3, r1
 80087e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80087e8:	887a      	ldrh	r2, [r7, #2]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	4013      	ands	r3, r2
 80087ee:	041a      	lsls	r2, r3, #16
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	43d9      	mvns	r1, r3
 80087f4:	887b      	ldrh	r3, [r7, #2]
 80087f6:	400b      	ands	r3, r1
 80087f8:	431a      	orrs	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	619a      	str	r2, [r3, #24]
}
 80087fe:	bf00      	nop
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
	...

0800880c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	4603      	mov	r3, r0
 8008814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008816:	4b08      	ldr	r3, [pc, #32]	; (8008838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008818:	695a      	ldr	r2, [r3, #20]
 800881a:	88fb      	ldrh	r3, [r7, #6]
 800881c:	4013      	ands	r3, r2
 800881e:	2b00      	cmp	r3, #0
 8008820:	d006      	beq.n	8008830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008822:	4a05      	ldr	r2, [pc, #20]	; (8008838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008824:	88fb      	ldrh	r3, [r7, #6]
 8008826:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008828:	88fb      	ldrh	r3, [r7, #6]
 800882a:	4618      	mov	r0, r3
 800882c:	f7f9 fed6 	bl	80025dc <HAL_GPIO_EXTI_Callback>
  }
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	40013c00 	.word	0x40013c00

0800883c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d101      	bne.n	800884e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e267      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d075      	beq.n	8008946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800885a:	4b88      	ldr	r3, [pc, #544]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f003 030c 	and.w	r3, r3, #12
 8008862:	2b04      	cmp	r3, #4
 8008864:	d00c      	beq.n	8008880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008866:	4b85      	ldr	r3, [pc, #532]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800886e:	2b08      	cmp	r3, #8
 8008870:	d112      	bne.n	8008898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008872:	4b82      	ldr	r3, [pc, #520]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800887a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800887e:	d10b      	bne.n	8008898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008880:	4b7e      	ldr	r3, [pc, #504]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d05b      	beq.n	8008944 <HAL_RCC_OscConfig+0x108>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d157      	bne.n	8008944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e242      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088a0:	d106      	bne.n	80088b0 <HAL_RCC_OscConfig+0x74>
 80088a2:	4b76      	ldr	r3, [pc, #472]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a75      	ldr	r2, [pc, #468]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 80088a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	e01d      	b.n	80088ec <HAL_RCC_OscConfig+0xb0>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088b8:	d10c      	bne.n	80088d4 <HAL_RCC_OscConfig+0x98>
 80088ba:	4b70      	ldr	r3, [pc, #448]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a6f      	ldr	r2, [pc, #444]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 80088c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088c4:	6013      	str	r3, [r2, #0]
 80088c6:	4b6d      	ldr	r3, [pc, #436]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a6c      	ldr	r2, [pc, #432]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 80088cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088d0:	6013      	str	r3, [r2, #0]
 80088d2:	e00b      	b.n	80088ec <HAL_RCC_OscConfig+0xb0>
 80088d4:	4b69      	ldr	r3, [pc, #420]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a68      	ldr	r2, [pc, #416]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 80088da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	4b66      	ldr	r3, [pc, #408]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a65      	ldr	r2, [pc, #404]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 80088e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d013      	beq.n	800891c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088f4:	f7fe f9c4 	bl	8006c80 <HAL_GetTick>
 80088f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088fa:	e008      	b.n	800890e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088fc:	f7fe f9c0 	bl	8006c80 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	2b64      	cmp	r3, #100	; 0x64
 8008908:	d901      	bls.n	800890e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e207      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800890e:	4b5b      	ldr	r3, [pc, #364]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0f0      	beq.n	80088fc <HAL_RCC_OscConfig+0xc0>
 800891a:	e014      	b.n	8008946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800891c:	f7fe f9b0 	bl	8006c80 <HAL_GetTick>
 8008920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008922:	e008      	b.n	8008936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008924:	f7fe f9ac 	bl	8006c80 <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	2b64      	cmp	r3, #100	; 0x64
 8008930:	d901      	bls.n	8008936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e1f3      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008936:	4b51      	ldr	r3, [pc, #324]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1f0      	bne.n	8008924 <HAL_RCC_OscConfig+0xe8>
 8008942:	e000      	b.n	8008946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d063      	beq.n	8008a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008952:	4b4a      	ldr	r3, [pc, #296]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f003 030c 	and.w	r3, r3, #12
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00b      	beq.n	8008976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800895e:	4b47      	ldr	r3, [pc, #284]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008966:	2b08      	cmp	r3, #8
 8008968:	d11c      	bne.n	80089a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800896a:	4b44      	ldr	r3, [pc, #272]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d116      	bne.n	80089a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008976:	4b41      	ldr	r3, [pc, #260]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0302 	and.w	r3, r3, #2
 800897e:	2b00      	cmp	r3, #0
 8008980:	d005      	beq.n	800898e <HAL_RCC_OscConfig+0x152>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d001      	beq.n	800898e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e1c7      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800898e:	4b3b      	ldr	r3, [pc, #236]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	00db      	lsls	r3, r3, #3
 800899c:	4937      	ldr	r1, [pc, #220]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089a2:	e03a      	b.n	8008a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d020      	beq.n	80089ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80089ac:	4b34      	ldr	r3, [pc, #208]	; (8008a80 <HAL_RCC_OscConfig+0x244>)
 80089ae:	2201      	movs	r2, #1
 80089b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b2:	f7fe f965 	bl	8006c80 <HAL_GetTick>
 80089b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089b8:	e008      	b.n	80089cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089ba:	f7fe f961 	bl	8006c80 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d901      	bls.n	80089cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e1a8      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089cc:	4b2b      	ldr	r3, [pc, #172]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0f0      	beq.n	80089ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089d8:	4b28      	ldr	r3, [pc, #160]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	4925      	ldr	r1, [pc, #148]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 80089e8:	4313      	orrs	r3, r2
 80089ea:	600b      	str	r3, [r1, #0]
 80089ec:	e015      	b.n	8008a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089ee:	4b24      	ldr	r3, [pc, #144]	; (8008a80 <HAL_RCC_OscConfig+0x244>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f4:	f7fe f944 	bl	8006c80 <HAL_GetTick>
 80089f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089fa:	e008      	b.n	8008a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089fc:	f7fe f940 	bl	8006c80 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e187      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a0e:	4b1b      	ldr	r3, [pc, #108]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1f0      	bne.n	80089fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0308 	and.w	r3, r3, #8
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d036      	beq.n	8008a94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d016      	beq.n	8008a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a2e:	4b15      	ldr	r3, [pc, #84]	; (8008a84 <HAL_RCC_OscConfig+0x248>)
 8008a30:	2201      	movs	r2, #1
 8008a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a34:	f7fe f924 	bl	8006c80 <HAL_GetTick>
 8008a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a3a:	e008      	b.n	8008a4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a3c:	f7fe f920 	bl	8006c80 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d901      	bls.n	8008a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e167      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a4e:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <HAL_RCC_OscConfig+0x240>)
 8008a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d0f0      	beq.n	8008a3c <HAL_RCC_OscConfig+0x200>
 8008a5a:	e01b      	b.n	8008a94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a5c:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <HAL_RCC_OscConfig+0x248>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a62:	f7fe f90d 	bl	8006c80 <HAL_GetTick>
 8008a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a68:	e00e      	b.n	8008a88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a6a:	f7fe f909 	bl	8006c80 <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d907      	bls.n	8008a88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e150      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
 8008a7c:	40023800 	.word	0x40023800
 8008a80:	42470000 	.word	0x42470000
 8008a84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a88:	4b88      	ldr	r3, [pc, #544]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a8c:	f003 0302 	and.w	r3, r3, #2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1ea      	bne.n	8008a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0304 	and.w	r3, r3, #4
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 8097 	beq.w	8008bd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008aa6:	4b81      	ldr	r3, [pc, #516]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10f      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60bb      	str	r3, [r7, #8]
 8008ab6:	4b7d      	ldr	r3, [pc, #500]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aba:	4a7c      	ldr	r2, [pc, #496]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8008ac2:	4b7a      	ldr	r3, [pc, #488]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aca:	60bb      	str	r3, [r7, #8]
 8008acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ad2:	4b77      	ldr	r3, [pc, #476]	; (8008cb0 <HAL_RCC_OscConfig+0x474>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d118      	bne.n	8008b10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ade:	4b74      	ldr	r3, [pc, #464]	; (8008cb0 <HAL_RCC_OscConfig+0x474>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a73      	ldr	r2, [pc, #460]	; (8008cb0 <HAL_RCC_OscConfig+0x474>)
 8008ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008aea:	f7fe f8c9 	bl	8006c80 <HAL_GetTick>
 8008aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008af0:	e008      	b.n	8008b04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008af2:	f7fe f8c5 	bl	8006c80 <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d901      	bls.n	8008b04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e10c      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b04:	4b6a      	ldr	r3, [pc, #424]	; (8008cb0 <HAL_RCC_OscConfig+0x474>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d0f0      	beq.n	8008af2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d106      	bne.n	8008b26 <HAL_RCC_OscConfig+0x2ea>
 8008b18:	4b64      	ldr	r3, [pc, #400]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b1c:	4a63      	ldr	r2, [pc, #396]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008b1e:	f043 0301 	orr.w	r3, r3, #1
 8008b22:	6713      	str	r3, [r2, #112]	; 0x70
 8008b24:	e01c      	b.n	8008b60 <HAL_RCC_OscConfig+0x324>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	2b05      	cmp	r3, #5
 8008b2c:	d10c      	bne.n	8008b48 <HAL_RCC_OscConfig+0x30c>
 8008b2e:	4b5f      	ldr	r3, [pc, #380]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b32:	4a5e      	ldr	r2, [pc, #376]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008b34:	f043 0304 	orr.w	r3, r3, #4
 8008b38:	6713      	str	r3, [r2, #112]	; 0x70
 8008b3a:	4b5c      	ldr	r3, [pc, #368]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b3e:	4a5b      	ldr	r2, [pc, #364]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008b40:	f043 0301 	orr.w	r3, r3, #1
 8008b44:	6713      	str	r3, [r2, #112]	; 0x70
 8008b46:	e00b      	b.n	8008b60 <HAL_RCC_OscConfig+0x324>
 8008b48:	4b58      	ldr	r3, [pc, #352]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4c:	4a57      	ldr	r2, [pc, #348]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008b4e:	f023 0301 	bic.w	r3, r3, #1
 8008b52:	6713      	str	r3, [r2, #112]	; 0x70
 8008b54:	4b55      	ldr	r3, [pc, #340]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b58:	4a54      	ldr	r2, [pc, #336]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008b5a:	f023 0304 	bic.w	r3, r3, #4
 8008b5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d015      	beq.n	8008b94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b68:	f7fe f88a 	bl	8006c80 <HAL_GetTick>
 8008b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b6e:	e00a      	b.n	8008b86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b70:	f7fe f886 	bl	8006c80 <HAL_GetTick>
 8008b74:	4602      	mov	r2, r0
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d901      	bls.n	8008b86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e0cb      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b86:	4b49      	ldr	r3, [pc, #292]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d0ee      	beq.n	8008b70 <HAL_RCC_OscConfig+0x334>
 8008b92:	e014      	b.n	8008bbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b94:	f7fe f874 	bl	8006c80 <HAL_GetTick>
 8008b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b9a:	e00a      	b.n	8008bb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b9c:	f7fe f870 	bl	8006c80 <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d901      	bls.n	8008bb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e0b5      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008bb2:	4b3e      	ldr	r3, [pc, #248]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1ee      	bne.n	8008b9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d105      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bc4:	4b39      	ldr	r3, [pc, #228]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc8:	4a38      	ldr	r2, [pc, #224]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 80a1 	beq.w	8008d1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008bda:	4b34      	ldr	r3, [pc, #208]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f003 030c 	and.w	r3, r3, #12
 8008be2:	2b08      	cmp	r3, #8
 8008be4:	d05c      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d141      	bne.n	8008c72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bee:	4b31      	ldr	r3, [pc, #196]	; (8008cb4 <HAL_RCC_OscConfig+0x478>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bf4:	f7fe f844 	bl	8006c80 <HAL_GetTick>
 8008bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bfa:	e008      	b.n	8008c0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bfc:	f7fe f840 	bl	8006c80 <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e087      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c0e:	4b27      	ldr	r3, [pc, #156]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1f0      	bne.n	8008bfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	69da      	ldr	r2, [r3, #28]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	431a      	orrs	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c28:	019b      	lsls	r3, r3, #6
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c30:	085b      	lsrs	r3, r3, #1
 8008c32:	3b01      	subs	r3, #1
 8008c34:	041b      	lsls	r3, r3, #16
 8008c36:	431a      	orrs	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3c:	061b      	lsls	r3, r3, #24
 8008c3e:	491b      	ldr	r1, [pc, #108]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008c40:	4313      	orrs	r3, r2
 8008c42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c44:	4b1b      	ldr	r3, [pc, #108]	; (8008cb4 <HAL_RCC_OscConfig+0x478>)
 8008c46:	2201      	movs	r2, #1
 8008c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c4a:	f7fe f819 	bl	8006c80 <HAL_GetTick>
 8008c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c50:	e008      	b.n	8008c64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c52:	f7fe f815 	bl	8006c80 <HAL_GetTick>
 8008c56:	4602      	mov	r2, r0
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d901      	bls.n	8008c64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e05c      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c64:	4b11      	ldr	r3, [pc, #68]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d0f0      	beq.n	8008c52 <HAL_RCC_OscConfig+0x416>
 8008c70:	e054      	b.n	8008d1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c72:	4b10      	ldr	r3, [pc, #64]	; (8008cb4 <HAL_RCC_OscConfig+0x478>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c78:	f7fe f802 	bl	8006c80 <HAL_GetTick>
 8008c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c7e:	e008      	b.n	8008c92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c80:	f7fd fffe 	bl	8006c80 <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d901      	bls.n	8008c92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e045      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c92:	4b06      	ldr	r3, [pc, #24]	; (8008cac <HAL_RCC_OscConfig+0x470>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1f0      	bne.n	8008c80 <HAL_RCC_OscConfig+0x444>
 8008c9e:	e03d      	b.n	8008d1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d107      	bne.n	8008cb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e038      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
 8008cac:	40023800 	.word	0x40023800
 8008cb0:	40007000 	.word	0x40007000
 8008cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008cb8:	4b1b      	ldr	r3, [pc, #108]	; (8008d28 <HAL_RCC_OscConfig+0x4ec>)
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d028      	beq.n	8008d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d121      	bne.n	8008d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d11a      	bne.n	8008d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008ce8:	4013      	ands	r3, r2
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d111      	bne.n	8008d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfe:	085b      	lsrs	r3, r3, #1
 8008d00:	3b01      	subs	r3, #1
 8008d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d107      	bne.n	8008d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d001      	beq.n	8008d1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e000      	b.n	8008d1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3718      	adds	r7, #24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	40023800 	.word	0x40023800

08008d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d101      	bne.n	8008d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e0cc      	b.n	8008eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008d40:	4b68      	ldr	r3, [pc, #416]	; (8008ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0307 	and.w	r3, r3, #7
 8008d48:	683a      	ldr	r2, [r7, #0]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d90c      	bls.n	8008d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d4e:	4b65      	ldr	r3, [pc, #404]	; (8008ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	b2d2      	uxtb	r2, r2
 8008d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d56:	4b63      	ldr	r3, [pc, #396]	; (8008ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0307 	and.w	r3, r3, #7
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d001      	beq.n	8008d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e0b8      	b.n	8008eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d020      	beq.n	8008db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d005      	beq.n	8008d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d80:	4b59      	ldr	r3, [pc, #356]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	4a58      	ldr	r2, [pc, #352]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0308 	and.w	r3, r3, #8
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d005      	beq.n	8008da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d98:	4b53      	ldr	r3, [pc, #332]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	4a52      	ldr	r2, [pc, #328]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008da4:	4b50      	ldr	r3, [pc, #320]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	494d      	ldr	r1, [pc, #308]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008db2:	4313      	orrs	r3, r2
 8008db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d044      	beq.n	8008e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d107      	bne.n	8008dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dca:	4b47      	ldr	r3, [pc, #284]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d119      	bne.n	8008e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e07f      	b.n	8008eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d003      	beq.n	8008dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d107      	bne.n	8008dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dea:	4b3f      	ldr	r3, [pc, #252]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d109      	bne.n	8008e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e06f      	b.n	8008eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dfa:	4b3b      	ldr	r3, [pc, #236]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e067      	b.n	8008eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e0a:	4b37      	ldr	r3, [pc, #220]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f023 0203 	bic.w	r2, r3, #3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	4934      	ldr	r1, [pc, #208]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e1c:	f7fd ff30 	bl	8006c80 <HAL_GetTick>
 8008e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e22:	e00a      	b.n	8008e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e24:	f7fd ff2c 	bl	8006c80 <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d901      	bls.n	8008e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e04f      	b.n	8008eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e3a:	4b2b      	ldr	r3, [pc, #172]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f003 020c 	and.w	r2, r3, #12
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d1eb      	bne.n	8008e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e4c:	4b25      	ldr	r3, [pc, #148]	; (8008ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 0307 	and.w	r3, r3, #7
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d20c      	bcs.n	8008e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e5a:	4b22      	ldr	r3, [pc, #136]	; (8008ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	b2d2      	uxtb	r2, r2
 8008e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e62:	4b20      	ldr	r3, [pc, #128]	; (8008ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 0307 	and.w	r3, r3, #7
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d001      	beq.n	8008e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e032      	b.n	8008eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d008      	beq.n	8008e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e80:	4b19      	ldr	r3, [pc, #100]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	4916      	ldr	r1, [pc, #88]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 0308 	and.w	r3, r3, #8
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d009      	beq.n	8008eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e9e:	4b12      	ldr	r3, [pc, #72]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	490e      	ldr	r1, [pc, #56]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008eb2:	f000 f821 	bl	8008ef8 <HAL_RCC_GetSysClockFreq>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	4b0b      	ldr	r3, [pc, #44]	; (8008ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	091b      	lsrs	r3, r3, #4
 8008ebe:	f003 030f 	and.w	r3, r3, #15
 8008ec2:	490a      	ldr	r1, [pc, #40]	; (8008eec <HAL_RCC_ClockConfig+0x1c0>)
 8008ec4:	5ccb      	ldrb	r3, [r1, r3]
 8008ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eca:	4a09      	ldr	r2, [pc, #36]	; (8008ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8008ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008ece:	4b09      	ldr	r3, [pc, #36]	; (8008ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fc ff8e 	bl	8005df4 <HAL_InitTick>

  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	40023c00 	.word	0x40023c00
 8008ee8:	40023800 	.word	0x40023800
 8008eec:	080159f4 	.word	0x080159f4
 8008ef0:	20000090 	.word	0x20000090
 8008ef4:	20000094 	.word	0x20000094

08008ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008efc:	b090      	sub	sp, #64	; 0x40
 8008efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008f00:	2300      	movs	r3, #0
 8008f02:	637b      	str	r3, [r7, #52]	; 0x34
 8008f04:	2300      	movs	r3, #0
 8008f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f08:	2300      	movs	r3, #0
 8008f0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f10:	4b59      	ldr	r3, [pc, #356]	; (8009078 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	f003 030c 	and.w	r3, r3, #12
 8008f18:	2b08      	cmp	r3, #8
 8008f1a:	d00d      	beq.n	8008f38 <HAL_RCC_GetSysClockFreq+0x40>
 8008f1c:	2b08      	cmp	r3, #8
 8008f1e:	f200 80a1 	bhi.w	8009064 <HAL_RCC_GetSysClockFreq+0x16c>
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d002      	beq.n	8008f2c <HAL_RCC_GetSysClockFreq+0x34>
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	d003      	beq.n	8008f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8008f2a:	e09b      	b.n	8009064 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008f2c:	4b53      	ldr	r3, [pc, #332]	; (800907c <HAL_RCC_GetSysClockFreq+0x184>)
 8008f2e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008f30:	e09b      	b.n	800906a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008f32:	4b53      	ldr	r3, [pc, #332]	; (8009080 <HAL_RCC_GetSysClockFreq+0x188>)
 8008f34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008f36:	e098      	b.n	800906a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008f38:	4b4f      	ldr	r3, [pc, #316]	; (8009078 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f40:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008f42:	4b4d      	ldr	r3, [pc, #308]	; (8009078 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d028      	beq.n	8008fa0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f4e:	4b4a      	ldr	r3, [pc, #296]	; (8009078 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	099b      	lsrs	r3, r3, #6
 8008f54:	2200      	movs	r2, #0
 8008f56:	623b      	str	r3, [r7, #32]
 8008f58:	627a      	str	r2, [r7, #36]	; 0x24
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008f60:	2100      	movs	r1, #0
 8008f62:	4b47      	ldr	r3, [pc, #284]	; (8009080 <HAL_RCC_GetSysClockFreq+0x188>)
 8008f64:	fb03 f201 	mul.w	r2, r3, r1
 8008f68:	2300      	movs	r3, #0
 8008f6a:	fb00 f303 	mul.w	r3, r0, r3
 8008f6e:	4413      	add	r3, r2
 8008f70:	4a43      	ldr	r2, [pc, #268]	; (8009080 <HAL_RCC_GetSysClockFreq+0x188>)
 8008f72:	fba0 1202 	umull	r1, r2, r0, r2
 8008f76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f78:	460a      	mov	r2, r1
 8008f7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8008f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f7e:	4413      	add	r3, r2
 8008f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f84:	2200      	movs	r2, #0
 8008f86:	61bb      	str	r3, [r7, #24]
 8008f88:	61fa      	str	r2, [r7, #28]
 8008f8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008f92:	f7f7 fe09 	bl	8000ba8 <__aeabi_uldivmod>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f9e:	e053      	b.n	8009048 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008fa0:	4b35      	ldr	r3, [pc, #212]	; (8009078 <HAL_RCC_GetSysClockFreq+0x180>)
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	099b      	lsrs	r3, r3, #6
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	613b      	str	r3, [r7, #16]
 8008faa:	617a      	str	r2, [r7, #20]
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008fb2:	f04f 0b00 	mov.w	fp, #0
 8008fb6:	4652      	mov	r2, sl
 8008fb8:	465b      	mov	r3, fp
 8008fba:	f04f 0000 	mov.w	r0, #0
 8008fbe:	f04f 0100 	mov.w	r1, #0
 8008fc2:	0159      	lsls	r1, r3, #5
 8008fc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008fc8:	0150      	lsls	r0, r2, #5
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	ebb2 080a 	subs.w	r8, r2, sl
 8008fd2:	eb63 090b 	sbc.w	r9, r3, fp
 8008fd6:	f04f 0200 	mov.w	r2, #0
 8008fda:	f04f 0300 	mov.w	r3, #0
 8008fde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008fe2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008fe6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008fea:	ebb2 0408 	subs.w	r4, r2, r8
 8008fee:	eb63 0509 	sbc.w	r5, r3, r9
 8008ff2:	f04f 0200 	mov.w	r2, #0
 8008ff6:	f04f 0300 	mov.w	r3, #0
 8008ffa:	00eb      	lsls	r3, r5, #3
 8008ffc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009000:	00e2      	lsls	r2, r4, #3
 8009002:	4614      	mov	r4, r2
 8009004:	461d      	mov	r5, r3
 8009006:	eb14 030a 	adds.w	r3, r4, sl
 800900a:	603b      	str	r3, [r7, #0]
 800900c:	eb45 030b 	adc.w	r3, r5, fp
 8009010:	607b      	str	r3, [r7, #4]
 8009012:	f04f 0200 	mov.w	r2, #0
 8009016:	f04f 0300 	mov.w	r3, #0
 800901a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800901e:	4629      	mov	r1, r5
 8009020:	028b      	lsls	r3, r1, #10
 8009022:	4621      	mov	r1, r4
 8009024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009028:	4621      	mov	r1, r4
 800902a:	028a      	lsls	r2, r1, #10
 800902c:	4610      	mov	r0, r2
 800902e:	4619      	mov	r1, r3
 8009030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009032:	2200      	movs	r2, #0
 8009034:	60bb      	str	r3, [r7, #8]
 8009036:	60fa      	str	r2, [r7, #12]
 8009038:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800903c:	f7f7 fdb4 	bl	8000ba8 <__aeabi_uldivmod>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4613      	mov	r3, r2
 8009046:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009048:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <HAL_RCC_GetSysClockFreq+0x180>)
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	0c1b      	lsrs	r3, r3, #16
 800904e:	f003 0303 	and.w	r3, r3, #3
 8009052:	3301      	adds	r3, #1
 8009054:	005b      	lsls	r3, r3, #1
 8009056:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8009058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800905a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009060:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009062:	e002      	b.n	800906a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009064:	4b05      	ldr	r3, [pc, #20]	; (800907c <HAL_RCC_GetSysClockFreq+0x184>)
 8009066:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800906c:	4618      	mov	r0, r3
 800906e:	3740      	adds	r7, #64	; 0x40
 8009070:	46bd      	mov	sp, r7
 8009072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009076:	bf00      	nop
 8009078:	40023800 	.word	0x40023800
 800907c:	00f42400 	.word	0x00f42400
 8009080:	00b71b00 	.word	0x00b71b00

08009084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009084:	b480      	push	{r7}
 8009086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009088:	4b03      	ldr	r3, [pc, #12]	; (8009098 <HAL_RCC_GetHCLKFreq+0x14>)
 800908a:	681b      	ldr	r3, [r3, #0]
}
 800908c:	4618      	mov	r0, r3
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	20000090 	.word	0x20000090

0800909c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80090a0:	f7ff fff0 	bl	8009084 <HAL_RCC_GetHCLKFreq>
 80090a4:	4602      	mov	r2, r0
 80090a6:	4b05      	ldr	r3, [pc, #20]	; (80090bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	0a9b      	lsrs	r3, r3, #10
 80090ac:	f003 0307 	and.w	r3, r3, #7
 80090b0:	4903      	ldr	r1, [pc, #12]	; (80090c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090b2:	5ccb      	ldrb	r3, [r1, r3]
 80090b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	40023800 	.word	0x40023800
 80090c0:	08015a04 	.word	0x08015a04

080090c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80090c8:	f7ff ffdc 	bl	8009084 <HAL_RCC_GetHCLKFreq>
 80090cc:	4602      	mov	r2, r0
 80090ce:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	0b5b      	lsrs	r3, r3, #13
 80090d4:	f003 0307 	and.w	r3, r3, #7
 80090d8:	4903      	ldr	r1, [pc, #12]	; (80090e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80090da:	5ccb      	ldrb	r3, [r1, r3]
 80090dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	40023800 	.word	0x40023800
 80090e8:	08015a04 	.word	0x08015a04

080090ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	220f      	movs	r2, #15
 80090fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80090fc:	4b12      	ldr	r3, [pc, #72]	; (8009148 <HAL_RCC_GetClockConfig+0x5c>)
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	f003 0203 	and.w	r2, r3, #3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009108:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <HAL_RCC_GetClockConfig+0x5c>)
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009114:	4b0c      	ldr	r3, [pc, #48]	; (8009148 <HAL_RCC_GetClockConfig+0x5c>)
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009120:	4b09      	ldr	r3, [pc, #36]	; (8009148 <HAL_RCC_GetClockConfig+0x5c>)
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	08db      	lsrs	r3, r3, #3
 8009126:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800912e:	4b07      	ldr	r3, [pc, #28]	; (800914c <HAL_RCC_GetClockConfig+0x60>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0207 	and.w	r2, r3, #7
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	601a      	str	r2, [r3, #0]
}
 800913a:	bf00      	nop
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	40023800 	.word	0x40023800
 800914c:	40023c00 	.word	0x40023c00

08009150 <HAL_SMBUS_Init>:
  * @param  hsmbus pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8009158:	2300      	movs	r3, #0
 800915a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 800915c:	2300      	movs	r3, #0
 800915e:	60bb      	str	r3, [r7, #8]

  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <HAL_SMBUS_Init+0x1a>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e0a1      	b.n	80092ae <HAL_SMBUS_Init+0x15e>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d106      	bne.n	8009184 <HAL_SMBUS_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7fc fb80 	bl	8005884 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2224      	movs	r2, #36	; 0x24
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 0201 	bic.w	r2, r2, #1
 800919a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800919c:	f7ff ff7e 	bl	800909c <HAL_RCC_GetPCLK1Freq>
 80091a0:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = SMBUS_FREQRANGE(pclk1);
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	4a44      	ldr	r2, [pc, #272]	; (80092b8 <HAL_SMBUS_Init+0x168>)
 80091a6:	fba2 2303 	umull	r2, r3, r2, r3
 80091aa:	0c9b      	lsrs	r3, r3, #18
 80091ac:	60fb      	str	r3, [r7, #12]

  /*---------------------------- SMBUSx CR2 Configuration ----------------------*/
  /* Configure SMBUSx: Frequency range */
  MODIFY_REG(hsmbus->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	430a      	orrs	r2, r1
 80091c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx TRISE Configuration --------------------*/
  /* Configure SMBUSx: Rise Time */
  MODIFY_REG(hsmbus->Instance->TRISE, I2C_TRISE_TRISE, SMBUS_RISE_TIME(freqrange));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	6a1b      	ldr	r3, [r3, #32]
 80091c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	621a      	str	r2, [r3, #32]

  /*---------------------------- SMBUSx CCR Configuration ----------------------*/
  /* Configure SMBUSx: Speed */
  MODIFY_REG(hsmbus->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), SMBUS_SPEED_STANDARD(pclk1, hsmbus->Init.ClockSpeed));
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80091e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	6852      	ldr	r2, [r2, #4]
 80091ea:	0052      	lsls	r2, r2, #1
 80091ec:	68b9      	ldr	r1, [r7, #8]
 80091ee:	fbb1 f1f2 	udiv	r1, r1, r2
 80091f2:	f640 72fc 	movw	r2, #4092	; 0xffc
 80091f6:	400a      	ands	r2, r1
 80091f8:	2a00      	cmp	r2, #0
 80091fa:	d006      	beq.n	800920a <HAL_SMBUS_Init+0xba>
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	6852      	ldr	r2, [r2, #4]
 8009200:	0052      	lsls	r2, r2, #1
 8009202:	68b9      	ldr	r1, [r7, #8]
 8009204:	fbb1 f2f2 	udiv	r2, r1, r2
 8009208:	e000      	b.n	800920c <HAL_SMBUS_Init+0xbc>
 800920a:	2204      	movs	r2, #4
 800920c:	6879      	ldr	r1, [r7, #4]
 800920e:	6809      	ldr	r1, [r1, #0]
 8009210:	4313      	orrs	r3, r2
 8009212:	61cb      	str	r3, [r1, #28]

  /*---------------------------- SMBUSx CR1 Configuration ----------------------*/
  /* Configure SMBUSx: Generalcall , PEC , Peripheral mode and  NoStretch mode */
  MODIFY_REG(hsmbus->Instance->CR1, (I2C_CR1_NOSTRETCH | I2C_CR1_ENGC | I2C_CR1_ENPEC | I2C_CR1_ENARP | I2C_CR1_SMBTYPE | I2C_CR1_SMBUS), (hsmbus->Init.NoStretchMode | hsmbus->Init.GeneralCallMode |  hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f023 01fa 	bic.w	r1, r3, #250	; 0xfa
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a1a      	ldr	r2, [r3, #32]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	431a      	orrs	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	431a      	orrs	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009232:	431a      	orrs	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	430a      	orrs	r2, r1
 800923a:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx OAR1 Configuration ---------------------*/
  /* Configure SMBUSx: Own Address1 and addressing mode */
  MODIFY_REG(hsmbus->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hsmbus->Init.AddressingMode | hsmbus->Init.OwnAddress1));
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009246:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	6911      	ldr	r1, [r2, #16]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	68d2      	ldr	r2, [r2, #12]
 8009252:	4311      	orrs	r1, r2
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	6812      	ldr	r2, [r2, #0]
 8009258:	430b      	orrs	r3, r1
 800925a:	6093      	str	r3, [r2, #8]

  /*---------------------------- SMBUSx OAR2 Configuration ---------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  MODIFY_REG(hsmbus->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	695a      	ldr	r2, [r3, #20]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	431a      	orrs	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	60da      	str	r2, [r3, #12]
  /* Configure SMBUSx: Analog noise filter */
  SET_BIT(hsmbus->Instance->FLTR, hsmbus->Init.AnalogFilter);
#endif

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f042 0201 	orr.w	r2, r2, #1
 8009286:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2220      	movs	r2, #32
 8009292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hsmbus->PreviousState = SMBUS_STATE_NONE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	639a      	str	r2, [r3, #56]	; 0x38
  hsmbus->Mode = HAL_SMBUS_MODE_NONE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hsmbus->XferPEC = 0x00;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	431bde83 	.word	0x431bde83

080092bc <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  SET_BIT(hsmbus->Instance->CR1, I2C_CR1_ALERT);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092d2:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_SMBALERT);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 80092dc:	615a      	str	r2, [r3, #20]

  /* Enable Alert Interrupt */
  __HAL_SMBUS_ENABLE_IT(hsmbus, SMBUS_IT_ERR);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e041      	b.n	8009392 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	d106      	bne.n	8009328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7fd f968 	bl	80065f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2202      	movs	r2, #2
 800932c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3304      	adds	r3, #4
 8009338:	4619      	mov	r1, r3
 800933a:	4610      	mov	r0, r2
 800933c:	f001 f812 	bl	800a364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
	...

0800939c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d001      	beq.n	80093b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e04e      	b.n	8009452 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2202      	movs	r2, #2
 80093b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68da      	ldr	r2, [r3, #12]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f042 0201 	orr.w	r2, r2, #1
 80093ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a23      	ldr	r2, [pc, #140]	; (8009460 <HAL_TIM_Base_Start_IT+0xc4>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d022      	beq.n	800941c <HAL_TIM_Base_Start_IT+0x80>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093de:	d01d      	beq.n	800941c <HAL_TIM_Base_Start_IT+0x80>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a1f      	ldr	r2, [pc, #124]	; (8009464 <HAL_TIM_Base_Start_IT+0xc8>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d018      	beq.n	800941c <HAL_TIM_Base_Start_IT+0x80>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a1e      	ldr	r2, [pc, #120]	; (8009468 <HAL_TIM_Base_Start_IT+0xcc>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d013      	beq.n	800941c <HAL_TIM_Base_Start_IT+0x80>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a1c      	ldr	r2, [pc, #112]	; (800946c <HAL_TIM_Base_Start_IT+0xd0>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d00e      	beq.n	800941c <HAL_TIM_Base_Start_IT+0x80>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a1b      	ldr	r2, [pc, #108]	; (8009470 <HAL_TIM_Base_Start_IT+0xd4>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d009      	beq.n	800941c <HAL_TIM_Base_Start_IT+0x80>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a19      	ldr	r2, [pc, #100]	; (8009474 <HAL_TIM_Base_Start_IT+0xd8>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d004      	beq.n	800941c <HAL_TIM_Base_Start_IT+0x80>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a18      	ldr	r2, [pc, #96]	; (8009478 <HAL_TIM_Base_Start_IT+0xdc>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d111      	bne.n	8009440 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f003 0307 	and.w	r3, r3, #7
 8009426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2b06      	cmp	r3, #6
 800942c:	d010      	beq.n	8009450 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f042 0201 	orr.w	r2, r2, #1
 800943c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800943e:	e007      	b.n	8009450 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f042 0201 	orr.w	r2, r2, #1
 800944e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	40010000 	.word	0x40010000
 8009464:	40000400 	.word	0x40000400
 8009468:	40000800 	.word	0x40000800
 800946c:	40000c00 	.word	0x40000c00
 8009470:	40010400 	.word	0x40010400
 8009474:	40014000 	.word	0x40014000
 8009478:	40001800 	.word	0x40001800

0800947c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d101      	bne.n	800948e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e041      	b.n	8009512 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b00      	cmp	r3, #0
 8009498:	d106      	bne.n	80094a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7fd f860 	bl	8006568 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2202      	movs	r2, #2
 80094ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3304      	adds	r3, #4
 80094b8:	4619      	mov	r1, r3
 80094ba:	4610      	mov	r0, r2
 80094bc:	f000 ff52 	bl	800a364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
	...

0800951c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d109      	bne.n	8009540 <HAL_TIM_PWM_Start+0x24>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b01      	cmp	r3, #1
 8009536:	bf14      	ite	ne
 8009538:	2301      	movne	r3, #1
 800953a:	2300      	moveq	r3, #0
 800953c:	b2db      	uxtb	r3, r3
 800953e:	e022      	b.n	8009586 <HAL_TIM_PWM_Start+0x6a>
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	2b04      	cmp	r3, #4
 8009544:	d109      	bne.n	800955a <HAL_TIM_PWM_Start+0x3e>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b01      	cmp	r3, #1
 8009550:	bf14      	ite	ne
 8009552:	2301      	movne	r3, #1
 8009554:	2300      	moveq	r3, #0
 8009556:	b2db      	uxtb	r3, r3
 8009558:	e015      	b.n	8009586 <HAL_TIM_PWM_Start+0x6a>
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b08      	cmp	r3, #8
 800955e:	d109      	bne.n	8009574 <HAL_TIM_PWM_Start+0x58>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b01      	cmp	r3, #1
 800956a:	bf14      	ite	ne
 800956c:	2301      	movne	r3, #1
 800956e:	2300      	moveq	r3, #0
 8009570:	b2db      	uxtb	r3, r3
 8009572:	e008      	b.n	8009586 <HAL_TIM_PWM_Start+0x6a>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b01      	cmp	r3, #1
 800957e:	bf14      	ite	ne
 8009580:	2301      	movne	r3, #1
 8009582:	2300      	moveq	r3, #0
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e07c      	b.n	8009688 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d104      	bne.n	800959e <HAL_TIM_PWM_Start+0x82>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2202      	movs	r2, #2
 8009598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800959c:	e013      	b.n	80095c6 <HAL_TIM_PWM_Start+0xaa>
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	2b04      	cmp	r3, #4
 80095a2:	d104      	bne.n	80095ae <HAL_TIM_PWM_Start+0x92>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2202      	movs	r2, #2
 80095a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095ac:	e00b      	b.n	80095c6 <HAL_TIM_PWM_Start+0xaa>
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	2b08      	cmp	r3, #8
 80095b2:	d104      	bne.n	80095be <HAL_TIM_PWM_Start+0xa2>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2202      	movs	r2, #2
 80095b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095bc:	e003      	b.n	80095c6 <HAL_TIM_PWM_Start+0xaa>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2202      	movs	r2, #2
 80095c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2201      	movs	r2, #1
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f001 fadc 	bl	800ab8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a2d      	ldr	r2, [pc, #180]	; (8009690 <HAL_TIM_PWM_Start+0x174>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d004      	beq.n	80095e8 <HAL_TIM_PWM_Start+0xcc>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a2c      	ldr	r2, [pc, #176]	; (8009694 <HAL_TIM_PWM_Start+0x178>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d101      	bne.n	80095ec <HAL_TIM_PWM_Start+0xd0>
 80095e8:	2301      	movs	r3, #1
 80095ea:	e000      	b.n	80095ee <HAL_TIM_PWM_Start+0xd2>
 80095ec:	2300      	movs	r3, #0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d007      	beq.n	8009602 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009600:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a22      	ldr	r2, [pc, #136]	; (8009690 <HAL_TIM_PWM_Start+0x174>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d022      	beq.n	8009652 <HAL_TIM_PWM_Start+0x136>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009614:	d01d      	beq.n	8009652 <HAL_TIM_PWM_Start+0x136>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a1f      	ldr	r2, [pc, #124]	; (8009698 <HAL_TIM_PWM_Start+0x17c>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d018      	beq.n	8009652 <HAL_TIM_PWM_Start+0x136>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a1d      	ldr	r2, [pc, #116]	; (800969c <HAL_TIM_PWM_Start+0x180>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d013      	beq.n	8009652 <HAL_TIM_PWM_Start+0x136>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a1c      	ldr	r2, [pc, #112]	; (80096a0 <HAL_TIM_PWM_Start+0x184>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d00e      	beq.n	8009652 <HAL_TIM_PWM_Start+0x136>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a16      	ldr	r2, [pc, #88]	; (8009694 <HAL_TIM_PWM_Start+0x178>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d009      	beq.n	8009652 <HAL_TIM_PWM_Start+0x136>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a18      	ldr	r2, [pc, #96]	; (80096a4 <HAL_TIM_PWM_Start+0x188>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d004      	beq.n	8009652 <HAL_TIM_PWM_Start+0x136>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a16      	ldr	r2, [pc, #88]	; (80096a8 <HAL_TIM_PWM_Start+0x18c>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d111      	bne.n	8009676 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f003 0307 	and.w	r3, r3, #7
 800965c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2b06      	cmp	r3, #6
 8009662:	d010      	beq.n	8009686 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f042 0201 	orr.w	r2, r2, #1
 8009672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009674:	e007      	b.n	8009686 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f042 0201 	orr.w	r2, r2, #1
 8009684:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	40010000 	.word	0x40010000
 8009694:	40010400 	.word	0x40010400
 8009698:	40000400 	.word	0x40000400
 800969c:	40000800 	.word	0x40000800
 80096a0:	40000c00 	.word	0x40000c00
 80096a4:	40014000 	.word	0x40014000
 80096a8:	40001800 	.word	0x40001800

080096ac <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
 80096b8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d109      	bne.n	80096d8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	bf0c      	ite	eq
 80096d0:	2301      	moveq	r3, #1
 80096d2:	2300      	movne	r3, #0
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	e022      	b.n	800971e <HAL_TIM_PWM_Start_DMA+0x72>
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b04      	cmp	r3, #4
 80096dc:	d109      	bne.n	80096f2 <HAL_TIM_PWM_Start_DMA+0x46>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	bf0c      	ite	eq
 80096ea:	2301      	moveq	r3, #1
 80096ec:	2300      	movne	r3, #0
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	e015      	b.n	800971e <HAL_TIM_PWM_Start_DMA+0x72>
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	2b08      	cmp	r3, #8
 80096f6:	d109      	bne.n	800970c <HAL_TIM_PWM_Start_DMA+0x60>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b02      	cmp	r3, #2
 8009702:	bf0c      	ite	eq
 8009704:	2301      	moveq	r3, #1
 8009706:	2300      	movne	r3, #0
 8009708:	b2db      	uxtb	r3, r3
 800970a:	e008      	b.n	800971e <HAL_TIM_PWM_Start_DMA+0x72>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009712:	b2db      	uxtb	r3, r3
 8009714:	2b02      	cmp	r3, #2
 8009716:	bf0c      	ite	eq
 8009718:	2301      	moveq	r3, #1
 800971a:	2300      	movne	r3, #0
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8009722:	2302      	movs	r3, #2
 8009724:	e171      	b.n	8009a0a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d109      	bne.n	8009740 <HAL_TIM_PWM_Start_DMA+0x94>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b01      	cmp	r3, #1
 8009736:	bf0c      	ite	eq
 8009738:	2301      	moveq	r3, #1
 800973a:	2300      	movne	r3, #0
 800973c:	b2db      	uxtb	r3, r3
 800973e:	e022      	b.n	8009786 <HAL_TIM_PWM_Start_DMA+0xda>
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2b04      	cmp	r3, #4
 8009744:	d109      	bne.n	800975a <HAL_TIM_PWM_Start_DMA+0xae>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800974c:	b2db      	uxtb	r3, r3
 800974e:	2b01      	cmp	r3, #1
 8009750:	bf0c      	ite	eq
 8009752:	2301      	moveq	r3, #1
 8009754:	2300      	movne	r3, #0
 8009756:	b2db      	uxtb	r3, r3
 8009758:	e015      	b.n	8009786 <HAL_TIM_PWM_Start_DMA+0xda>
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2b08      	cmp	r3, #8
 800975e:	d109      	bne.n	8009774 <HAL_TIM_PWM_Start_DMA+0xc8>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009766:	b2db      	uxtb	r3, r3
 8009768:	2b01      	cmp	r3, #1
 800976a:	bf0c      	ite	eq
 800976c:	2301      	moveq	r3, #1
 800976e:	2300      	movne	r3, #0
 8009770:	b2db      	uxtb	r3, r3
 8009772:	e008      	b.n	8009786 <HAL_TIM_PWM_Start_DMA+0xda>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800977a:	b2db      	uxtb	r3, r3
 800977c:	2b01      	cmp	r3, #1
 800977e:	bf0c      	ite	eq
 8009780:	2301      	moveq	r3, #1
 8009782:	2300      	movne	r3, #0
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d024      	beq.n	80097d4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d104      	bne.n	800979a <HAL_TIM_PWM_Start_DMA+0xee>
 8009790:	887b      	ldrh	r3, [r7, #2]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d001      	beq.n	800979a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e137      	b.n	8009a0a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d104      	bne.n	80097aa <HAL_TIM_PWM_Start_DMA+0xfe>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2202      	movs	r2, #2
 80097a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097a8:	e016      	b.n	80097d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2b04      	cmp	r3, #4
 80097ae:	d104      	bne.n	80097ba <HAL_TIM_PWM_Start_DMA+0x10e>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2202      	movs	r2, #2
 80097b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097b8:	e00e      	b.n	80097d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	2b08      	cmp	r3, #8
 80097be:	d104      	bne.n	80097ca <HAL_TIM_PWM_Start_DMA+0x11e>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2202      	movs	r2, #2
 80097c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097c8:	e006      	b.n	80097d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2202      	movs	r2, #2
 80097ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097d2:	e001      	b.n	80097d8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e118      	b.n	8009a0a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	2b0c      	cmp	r3, #12
 80097dc:	f200 80ae 	bhi.w	800993c <HAL_TIM_PWM_Start_DMA+0x290>
 80097e0:	a201      	add	r2, pc, #4	; (adr r2, 80097e8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80097e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e6:	bf00      	nop
 80097e8:	0800981d 	.word	0x0800981d
 80097ec:	0800993d 	.word	0x0800993d
 80097f0:	0800993d 	.word	0x0800993d
 80097f4:	0800993d 	.word	0x0800993d
 80097f8:	08009865 	.word	0x08009865
 80097fc:	0800993d 	.word	0x0800993d
 8009800:	0800993d 	.word	0x0800993d
 8009804:	0800993d 	.word	0x0800993d
 8009808:	080098ad 	.word	0x080098ad
 800980c:	0800993d 	.word	0x0800993d
 8009810:	0800993d 	.word	0x0800993d
 8009814:	0800993d 	.word	0x0800993d
 8009818:	080098f5 	.word	0x080098f5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	4a7c      	ldr	r2, [pc, #496]	; (8009a14 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009822:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009828:	4a7b      	ldr	r2, [pc, #492]	; (8009a18 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800982a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009830:	4a7a      	ldr	r2, [pc, #488]	; (8009a1c <HAL_TIM_PWM_Start_DMA+0x370>)
 8009832:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	3334      	adds	r3, #52	; 0x34
 8009840:	461a      	mov	r2, r3
 8009842:	887b      	ldrh	r3, [r7, #2]
 8009844:	f7fe faa6 	bl	8007d94 <HAL_DMA_Start_IT>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d001      	beq.n	8009852 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e0db      	b.n	8009a0a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68da      	ldr	r2, [r3, #12]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009860:	60da      	str	r2, [r3, #12]
      break;
 8009862:	e06e      	b.n	8009942 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009868:	4a6a      	ldr	r2, [pc, #424]	; (8009a14 <HAL_TIM_PWM_Start_DMA+0x368>)
 800986a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009870:	4a69      	ldr	r2, [pc, #420]	; (8009a18 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009872:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009878:	4a68      	ldr	r2, [pc, #416]	; (8009a1c <HAL_TIM_PWM_Start_DMA+0x370>)
 800987a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009880:	6879      	ldr	r1, [r7, #4]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3338      	adds	r3, #56	; 0x38
 8009888:	461a      	mov	r2, r3
 800988a:	887b      	ldrh	r3, [r7, #2]
 800988c:	f7fe fa82 	bl	8007d94 <HAL_DMA_Start_IT>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e0b7      	b.n	8009a0a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68da      	ldr	r2, [r3, #12]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80098a8:	60da      	str	r2, [r3, #12]
      break;
 80098aa:	e04a      	b.n	8009942 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b0:	4a58      	ldr	r2, [pc, #352]	; (8009a14 <HAL_TIM_PWM_Start_DMA+0x368>)
 80098b2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	4a57      	ldr	r2, [pc, #348]	; (8009a18 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80098ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c0:	4a56      	ldr	r2, [pc, #344]	; (8009a1c <HAL_TIM_PWM_Start_DMA+0x370>)
 80098c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80098c8:	6879      	ldr	r1, [r7, #4]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	333c      	adds	r3, #60	; 0x3c
 80098d0:	461a      	mov	r2, r3
 80098d2:	887b      	ldrh	r3, [r7, #2]
 80098d4:	f7fe fa5e 	bl	8007d94 <HAL_DMA_Start_IT>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d001      	beq.n	80098e2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e093      	b.n	8009a0a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68da      	ldr	r2, [r3, #12]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098f0:	60da      	str	r2, [r3, #12]
      break;
 80098f2:	e026      	b.n	8009942 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f8:	4a46      	ldr	r2, [pc, #280]	; (8009a14 <HAL_TIM_PWM_Start_DMA+0x368>)
 80098fa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009900:	4a45      	ldr	r2, [pc, #276]	; (8009a18 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009902:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009908:	4a44      	ldr	r2, [pc, #272]	; (8009a1c <HAL_TIM_PWM_Start_DMA+0x370>)
 800990a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3340      	adds	r3, #64	; 0x40
 8009918:	461a      	mov	r2, r3
 800991a:	887b      	ldrh	r3, [r7, #2]
 800991c:	f7fe fa3a 	bl	8007d94 <HAL_DMA_Start_IT>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e06f      	b.n	8009a0a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68da      	ldr	r2, [r3, #12]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009938:	60da      	str	r2, [r3, #12]
      break;
 800993a:	e002      	b.n	8009942 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	75fb      	strb	r3, [r7, #23]
      break;
 8009940:	bf00      	nop
  }

  if (status == HAL_OK)
 8009942:	7dfb      	ldrb	r3, [r7, #23]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d15f      	bne.n	8009a08 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2201      	movs	r2, #1
 800994e:	68b9      	ldr	r1, [r7, #8]
 8009950:	4618      	mov	r0, r3
 8009952:	f001 f91b 	bl	800ab8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a31      	ldr	r2, [pc, #196]	; (8009a20 <HAL_TIM_PWM_Start_DMA+0x374>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d004      	beq.n	800996a <HAL_TIM_PWM_Start_DMA+0x2be>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a2f      	ldr	r2, [pc, #188]	; (8009a24 <HAL_TIM_PWM_Start_DMA+0x378>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d101      	bne.n	800996e <HAL_TIM_PWM_Start_DMA+0x2c2>
 800996a:	2301      	movs	r3, #1
 800996c:	e000      	b.n	8009970 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800996e:	2300      	movs	r3, #0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d007      	beq.n	8009984 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009982:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a25      	ldr	r2, [pc, #148]	; (8009a20 <HAL_TIM_PWM_Start_DMA+0x374>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d022      	beq.n	80099d4 <HAL_TIM_PWM_Start_DMA+0x328>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009996:	d01d      	beq.n	80099d4 <HAL_TIM_PWM_Start_DMA+0x328>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a22      	ldr	r2, [pc, #136]	; (8009a28 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d018      	beq.n	80099d4 <HAL_TIM_PWM_Start_DMA+0x328>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a21      	ldr	r2, [pc, #132]	; (8009a2c <HAL_TIM_PWM_Start_DMA+0x380>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d013      	beq.n	80099d4 <HAL_TIM_PWM_Start_DMA+0x328>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a1f      	ldr	r2, [pc, #124]	; (8009a30 <HAL_TIM_PWM_Start_DMA+0x384>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d00e      	beq.n	80099d4 <HAL_TIM_PWM_Start_DMA+0x328>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a1a      	ldr	r2, [pc, #104]	; (8009a24 <HAL_TIM_PWM_Start_DMA+0x378>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d009      	beq.n	80099d4 <HAL_TIM_PWM_Start_DMA+0x328>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a1b      	ldr	r2, [pc, #108]	; (8009a34 <HAL_TIM_PWM_Start_DMA+0x388>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d004      	beq.n	80099d4 <HAL_TIM_PWM_Start_DMA+0x328>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a1a      	ldr	r2, [pc, #104]	; (8009a38 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d111      	bne.n	80099f8 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	f003 0307 	and.w	r3, r3, #7
 80099de:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	2b06      	cmp	r3, #6
 80099e4:	d010      	beq.n	8009a08 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f042 0201 	orr.w	r2, r2, #1
 80099f4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099f6:	e007      	b.n	8009a08 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f042 0201 	orr.w	r2, r2, #1
 8009a06:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3718      	adds	r7, #24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	0800a255 	.word	0x0800a255
 8009a18:	0800a2fd 	.word	0x0800a2fd
 8009a1c:	0800a1c3 	.word	0x0800a1c3
 8009a20:	40010000 	.word	0x40010000
 8009a24:	40010400 	.word	0x40010400
 8009a28:	40000400 	.word	0x40000400
 8009a2c:	40000800 	.word	0x40000800
 8009a30:	40000c00 	.word	0x40000c00
 8009a34:	40014000 	.word	0x40014000
 8009a38:	40001800 	.word	0x40001800

08009a3c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d101      	bne.n	8009a4e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e041      	b.n	8009ad2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d106      	bne.n	8009a68 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f839 	bl	8009ada <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3304      	adds	r3, #4
 8009a78:	4619      	mov	r1, r3
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	f000 fc72 	bl	800a364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009ada:	b480      	push	{r7}
 8009adc:	b083      	sub	sp, #12
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009ae2:	bf00      	nop
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b082      	sub	sp, #8
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	f003 0302 	and.w	r3, r3, #2
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	d122      	bne.n	8009b4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f003 0302 	and.w	r3, r3, #2
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d11b      	bne.n	8009b4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f06f 0202 	mvn.w	r2, #2
 8009b1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	f003 0303 	and.w	r3, r3, #3
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d003      	beq.n	8009b38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fb14 	bl	800a15e <HAL_TIM_IC_CaptureCallback>
 8009b36:	e005      	b.n	8009b44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fb06 	bl	800a14a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fb17 	bl	800a172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	f003 0304 	and.w	r3, r3, #4
 8009b54:	2b04      	cmp	r3, #4
 8009b56:	d122      	bne.n	8009b9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	f003 0304 	and.w	r3, r3, #4
 8009b62:	2b04      	cmp	r3, #4
 8009b64:	d11b      	bne.n	8009b9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f06f 0204 	mvn.w	r2, #4
 8009b6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2202      	movs	r2, #2
 8009b74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d003      	beq.n	8009b8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 faea 	bl	800a15e <HAL_TIM_IC_CaptureCallback>
 8009b8a:	e005      	b.n	8009b98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fadc 	bl	800a14a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 faed 	bl	800a172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	f003 0308 	and.w	r3, r3, #8
 8009ba8:	2b08      	cmp	r3, #8
 8009baa:	d122      	bne.n	8009bf2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	f003 0308 	and.w	r3, r3, #8
 8009bb6:	2b08      	cmp	r3, #8
 8009bb8:	d11b      	bne.n	8009bf2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f06f 0208 	mvn.w	r2, #8
 8009bc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2204      	movs	r2, #4
 8009bc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	69db      	ldr	r3, [r3, #28]
 8009bd0:	f003 0303 	and.w	r3, r3, #3
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d003      	beq.n	8009be0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fac0 	bl	800a15e <HAL_TIM_IC_CaptureCallback>
 8009bde:	e005      	b.n	8009bec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 fab2 	bl	800a14a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fac3 	bl	800a172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	f003 0310 	and.w	r3, r3, #16
 8009bfc:	2b10      	cmp	r3, #16
 8009bfe:	d122      	bne.n	8009c46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	f003 0310 	and.w	r3, r3, #16
 8009c0a:	2b10      	cmp	r3, #16
 8009c0c:	d11b      	bne.n	8009c46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f06f 0210 	mvn.w	r2, #16
 8009c16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2208      	movs	r2, #8
 8009c1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d003      	beq.n	8009c34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fa96 	bl	800a15e <HAL_TIM_IC_CaptureCallback>
 8009c32:	e005      	b.n	8009c40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fa88 	bl	800a14a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fa99 	bl	800a172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	f003 0301 	and.w	r3, r3, #1
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d10e      	bne.n	8009c72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d107      	bne.n	8009c72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f06f 0201 	mvn.w	r2, #1
 8009c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7fb ff25 	bl	8005abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c7c:	2b80      	cmp	r3, #128	; 0x80
 8009c7e:	d10e      	bne.n	8009c9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c8a:	2b80      	cmp	r3, #128	; 0x80
 8009c8c:	d107      	bne.n	8009c9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 f875 	bl	800ad88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca8:	2b40      	cmp	r3, #64	; 0x40
 8009caa:	d10e      	bne.n	8009cca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb6:	2b40      	cmp	r3, #64	; 0x40
 8009cb8:	d107      	bne.n	8009cca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 fa68 	bl	800a19a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	f003 0320 	and.w	r3, r3, #32
 8009cd4:	2b20      	cmp	r3, #32
 8009cd6:	d10e      	bne.n	8009cf6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	f003 0320 	and.w	r3, r3, #32
 8009ce2:	2b20      	cmp	r3, #32
 8009ce4:	d107      	bne.n	8009cf6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f06f 0220 	mvn.w	r2, #32
 8009cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f001 f83f 	bl	800ad74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cf6:	bf00      	nop
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b086      	sub	sp, #24
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	60f8      	str	r0, [r7, #12]
 8009d06:	60b9      	str	r1, [r7, #8]
 8009d08:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d101      	bne.n	8009d1c <HAL_TIM_IC_ConfigChannel+0x1e>
 8009d18:	2302      	movs	r3, #2
 8009d1a:	e088      	b.n	8009e2e <HAL_TIM_IC_ConfigChannel+0x130>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d11b      	bne.n	8009d62 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	6819      	ldr	r1, [r3, #0]
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	f000 fd63 	bl	800a804 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	699a      	ldr	r2, [r3, #24]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f022 020c 	bic.w	r2, r2, #12
 8009d4c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6999      	ldr	r1, [r3, #24]
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	689a      	ldr	r2, [r3, #8]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	430a      	orrs	r2, r1
 8009d5e:	619a      	str	r2, [r3, #24]
 8009d60:	e060      	b.n	8009e24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b04      	cmp	r3, #4
 8009d66:	d11c      	bne.n	8009da2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6818      	ldr	r0, [r3, #0]
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	6819      	ldr	r1, [r3, #0]
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	685a      	ldr	r2, [r3, #4]
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	f000 fde7 	bl	800a94a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	699a      	ldr	r2, [r3, #24]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009d8a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6999      	ldr	r1, [r3, #24]
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	021a      	lsls	r2, r3, #8
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	430a      	orrs	r2, r1
 8009d9e:	619a      	str	r2, [r3, #24]
 8009da0:	e040      	b.n	8009e24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b08      	cmp	r3, #8
 8009da6:	d11b      	bne.n	8009de0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6818      	ldr	r0, [r3, #0]
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	6819      	ldr	r1, [r3, #0]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	685a      	ldr	r2, [r3, #4]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	f000 fe34 	bl	800aa24 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	69da      	ldr	r2, [r3, #28]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f022 020c 	bic.w	r2, r2, #12
 8009dca:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	69d9      	ldr	r1, [r3, #28]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	689a      	ldr	r2, [r3, #8]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	430a      	orrs	r2, r1
 8009ddc:	61da      	str	r2, [r3, #28]
 8009dde:	e021      	b.n	8009e24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b0c      	cmp	r3, #12
 8009de4:	d11c      	bne.n	8009e20 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6818      	ldr	r0, [r3, #0]
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	6819      	ldr	r1, [r3, #0]
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	685a      	ldr	r2, [r3, #4]
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	f000 fe51 	bl	800aa9c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	69da      	ldr	r2, [r3, #28]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009e08:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	69d9      	ldr	r1, [r3, #28]
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	021a      	lsls	r2, r3, #8
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	61da      	str	r2, [r3, #28]
 8009e1e:	e001      	b.n	8009e24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
	...

08009e38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d101      	bne.n	8009e56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009e52:	2302      	movs	r3, #2
 8009e54:	e0ae      	b.n	8009fb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b0c      	cmp	r3, #12
 8009e62:	f200 809f 	bhi.w	8009fa4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009e66:	a201      	add	r2, pc, #4	; (adr r2, 8009e6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6c:	08009ea1 	.word	0x08009ea1
 8009e70:	08009fa5 	.word	0x08009fa5
 8009e74:	08009fa5 	.word	0x08009fa5
 8009e78:	08009fa5 	.word	0x08009fa5
 8009e7c:	08009ee1 	.word	0x08009ee1
 8009e80:	08009fa5 	.word	0x08009fa5
 8009e84:	08009fa5 	.word	0x08009fa5
 8009e88:	08009fa5 	.word	0x08009fa5
 8009e8c:	08009f23 	.word	0x08009f23
 8009e90:	08009fa5 	.word	0x08009fa5
 8009e94:	08009fa5 	.word	0x08009fa5
 8009e98:	08009fa5 	.word	0x08009fa5
 8009e9c:	08009f63 	.word	0x08009f63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68b9      	ldr	r1, [r7, #8]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 fafc 	bl	800a4a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	699a      	ldr	r2, [r3, #24]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f042 0208 	orr.w	r2, r2, #8
 8009eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	699a      	ldr	r2, [r3, #24]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f022 0204 	bic.w	r2, r2, #4
 8009eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6999      	ldr	r1, [r3, #24]
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	691a      	ldr	r2, [r3, #16]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	619a      	str	r2, [r3, #24]
      break;
 8009ede:	e064      	b.n	8009faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68b9      	ldr	r1, [r7, #8]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 fb4c 	bl	800a584 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	699a      	ldr	r2, [r3, #24]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	699a      	ldr	r2, [r3, #24]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6999      	ldr	r1, [r3, #24]
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	021a      	lsls	r2, r3, #8
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	619a      	str	r2, [r3, #24]
      break;
 8009f20:	e043      	b.n	8009faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68b9      	ldr	r1, [r7, #8]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 fba1 	bl	800a670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	69da      	ldr	r2, [r3, #28]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f042 0208 	orr.w	r2, r2, #8
 8009f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	69da      	ldr	r2, [r3, #28]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f022 0204 	bic.w	r2, r2, #4
 8009f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	69d9      	ldr	r1, [r3, #28]
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	691a      	ldr	r2, [r3, #16]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	430a      	orrs	r2, r1
 8009f5e:	61da      	str	r2, [r3, #28]
      break;
 8009f60:	e023      	b.n	8009faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68b9      	ldr	r1, [r7, #8]
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 fbf5 	bl	800a758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	69da      	ldr	r2, [r3, #28]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	69da      	ldr	r2, [r3, #28]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	69d9      	ldr	r1, [r3, #28]
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	021a      	lsls	r2, r3, #8
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	61da      	str	r2, [r3, #28]
      break;
 8009fa2:	e002      	b.n	8009faa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d101      	bne.n	8009fd8 <HAL_TIM_ConfigClockSource+0x1c>
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	e0b4      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x186>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ffe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a010:	d03e      	beq.n	800a090 <HAL_TIM_ConfigClockSource+0xd4>
 800a012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a016:	f200 8087 	bhi.w	800a128 <HAL_TIM_ConfigClockSource+0x16c>
 800a01a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a01e:	f000 8086 	beq.w	800a12e <HAL_TIM_ConfigClockSource+0x172>
 800a022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a026:	d87f      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x16c>
 800a028:	2b70      	cmp	r3, #112	; 0x70
 800a02a:	d01a      	beq.n	800a062 <HAL_TIM_ConfigClockSource+0xa6>
 800a02c:	2b70      	cmp	r3, #112	; 0x70
 800a02e:	d87b      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x16c>
 800a030:	2b60      	cmp	r3, #96	; 0x60
 800a032:	d050      	beq.n	800a0d6 <HAL_TIM_ConfigClockSource+0x11a>
 800a034:	2b60      	cmp	r3, #96	; 0x60
 800a036:	d877      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x16c>
 800a038:	2b50      	cmp	r3, #80	; 0x50
 800a03a:	d03c      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0xfa>
 800a03c:	2b50      	cmp	r3, #80	; 0x50
 800a03e:	d873      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x16c>
 800a040:	2b40      	cmp	r3, #64	; 0x40
 800a042:	d058      	beq.n	800a0f6 <HAL_TIM_ConfigClockSource+0x13a>
 800a044:	2b40      	cmp	r3, #64	; 0x40
 800a046:	d86f      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x16c>
 800a048:	2b30      	cmp	r3, #48	; 0x30
 800a04a:	d064      	beq.n	800a116 <HAL_TIM_ConfigClockSource+0x15a>
 800a04c:	2b30      	cmp	r3, #48	; 0x30
 800a04e:	d86b      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x16c>
 800a050:	2b20      	cmp	r3, #32
 800a052:	d060      	beq.n	800a116 <HAL_TIM_ConfigClockSource+0x15a>
 800a054:	2b20      	cmp	r3, #32
 800a056:	d867      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x16c>
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d05c      	beq.n	800a116 <HAL_TIM_ConfigClockSource+0x15a>
 800a05c:	2b10      	cmp	r3, #16
 800a05e:	d05a      	beq.n	800a116 <HAL_TIM_ConfigClockSource+0x15a>
 800a060:	e062      	b.n	800a128 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6818      	ldr	r0, [r3, #0]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	6899      	ldr	r1, [r3, #8]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	f000 fd6b 	bl	800ab4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	609a      	str	r2, [r3, #8]
      break;
 800a08e:	e04f      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6818      	ldr	r0, [r3, #0]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	6899      	ldr	r1, [r3, #8]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	685a      	ldr	r2, [r3, #4]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	f000 fd54 	bl	800ab4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	689a      	ldr	r2, [r3, #8]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0b2:	609a      	str	r2, [r3, #8]
      break;
 800a0b4:	e03c      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6818      	ldr	r0, [r3, #0]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	6859      	ldr	r1, [r3, #4]
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	f000 fc12 	bl	800a8ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2150      	movs	r1, #80	; 0x50
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 fd21 	bl	800ab16 <TIM_ITRx_SetConfig>
      break;
 800a0d4:	e02c      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6818      	ldr	r0, [r3, #0]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	6859      	ldr	r1, [r3, #4]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	f000 fc6e 	bl	800a9c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2160      	movs	r1, #96	; 0x60
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 fd11 	bl	800ab16 <TIM_ITRx_SetConfig>
      break;
 800a0f4:	e01c      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6818      	ldr	r0, [r3, #0]
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	6859      	ldr	r1, [r3, #4]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	461a      	mov	r2, r3
 800a104:	f000 fbf2 	bl	800a8ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2140      	movs	r1, #64	; 0x40
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 fd01 	bl	800ab16 <TIM_ITRx_SetConfig>
      break;
 800a114:	e00c      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4619      	mov	r1, r3
 800a120:	4610      	mov	r0, r2
 800a122:	f000 fcf8 	bl	800ab16 <TIM_ITRx_SetConfig>
      break;
 800a126:	e003      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	73fb      	strb	r3, [r7, #15]
      break;
 800a12c:	e000      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a12e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a14a:	b480      	push	{r7}
 800a14c:	b083      	sub	sp, #12
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a152:	bf00      	nop
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a15e:	b480      	push	{r7}
 800a160:	b083      	sub	sp, #12
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a166:	bf00      	nop
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a172:	b480      	push	{r7}
 800a174:	b083      	sub	sp, #12
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a17a:	bf00      	nop
 800a17c:	370c      	adds	r7, #12
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a186:	b480      	push	{r7}
 800a188:	b083      	sub	sp, #12
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a18e:	bf00      	nop
 800a190:	370c      	adds	r7, #12
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a19a:	b480      	push	{r7}
 800a19c:	b083      	sub	sp, #12
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1a2:	bf00      	nop
 800a1a4:	370c      	adds	r7, #12
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr

0800a1ae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a1ae:	b480      	push	{r7}
 800a1b0:	b083      	sub	sp, #12
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a1b6:	bf00      	nop
 800a1b8:	370c      	adds	r7, #12
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b084      	sub	sp, #16
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d107      	bne.n	800a1ea <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1e8:	e02a      	b.n	800a240 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d107      	bne.n	800a204 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a202:	e01d      	b.n	800a240 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d107      	bne.n	800a21e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2204      	movs	r2, #4
 800a212:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a21c:	e010      	b.n	800a240 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	429a      	cmp	r2, r3
 800a226:	d107      	bne.n	800a238 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2208      	movs	r2, #8
 800a22c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a236:	e003      	b.n	800a240 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f7ff ffb4 	bl	800a1ae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2200      	movs	r2, #0
 800a24a:	771a      	strb	r2, [r3, #28]
}
 800a24c:	bf00      	nop
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a260:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d10b      	bne.n	800a284 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2201      	movs	r2, #1
 800a270:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	69db      	ldr	r3, [r3, #28]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d136      	bne.n	800a2e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a282:	e031      	b.n	800a2e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d10b      	bne.n	800a2a6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2202      	movs	r2, #2
 800a292:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	69db      	ldr	r3, [r3, #28]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d125      	bne.n	800a2e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2a4:	e020      	b.n	800a2e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d10b      	bne.n	800a2c8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2204      	movs	r2, #4
 800a2b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	69db      	ldr	r3, [r3, #28]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d114      	bne.n	800a2e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2c6:	e00f      	b.n	800a2e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d10a      	bne.n	800a2e8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2208      	movs	r2, #8
 800a2d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	69db      	ldr	r3, [r3, #28]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d103      	bne.n	800a2e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f7ff ff42 	bl	800a172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	771a      	strb	r2, [r3, #28]
}
 800a2f4:	bf00      	nop
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a308:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	429a      	cmp	r2, r3
 800a312:	d103      	bne.n	800a31c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2201      	movs	r2, #1
 800a318:	771a      	strb	r2, [r3, #28]
 800a31a:	e019      	b.n	800a350 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	429a      	cmp	r2, r3
 800a324:	d103      	bne.n	800a32e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2202      	movs	r2, #2
 800a32a:	771a      	strb	r2, [r3, #28]
 800a32c:	e010      	b.n	800a350 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	429a      	cmp	r2, r3
 800a336:	d103      	bne.n	800a340 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2204      	movs	r2, #4
 800a33c:	771a      	strb	r2, [r3, #28]
 800a33e:	e007      	b.n	800a350 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	429a      	cmp	r2, r3
 800a348:	d102      	bne.n	800a350 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2208      	movs	r2, #8
 800a34e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f7ff ff18 	bl	800a186 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	771a      	strb	r2, [r3, #28]
}
 800a35c:	bf00      	nop
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a40      	ldr	r2, [pc, #256]	; (800a478 <TIM_Base_SetConfig+0x114>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d013      	beq.n	800a3a4 <TIM_Base_SetConfig+0x40>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a382:	d00f      	beq.n	800a3a4 <TIM_Base_SetConfig+0x40>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a3d      	ldr	r2, [pc, #244]	; (800a47c <TIM_Base_SetConfig+0x118>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d00b      	beq.n	800a3a4 <TIM_Base_SetConfig+0x40>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4a3c      	ldr	r2, [pc, #240]	; (800a480 <TIM_Base_SetConfig+0x11c>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d007      	beq.n	800a3a4 <TIM_Base_SetConfig+0x40>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a3b      	ldr	r2, [pc, #236]	; (800a484 <TIM_Base_SetConfig+0x120>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d003      	beq.n	800a3a4 <TIM_Base_SetConfig+0x40>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a3a      	ldr	r2, [pc, #232]	; (800a488 <TIM_Base_SetConfig+0x124>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d108      	bne.n	800a3b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a2f      	ldr	r2, [pc, #188]	; (800a478 <TIM_Base_SetConfig+0x114>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d02b      	beq.n	800a416 <TIM_Base_SetConfig+0xb2>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3c4:	d027      	beq.n	800a416 <TIM_Base_SetConfig+0xb2>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a2c      	ldr	r2, [pc, #176]	; (800a47c <TIM_Base_SetConfig+0x118>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d023      	beq.n	800a416 <TIM_Base_SetConfig+0xb2>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4a2b      	ldr	r2, [pc, #172]	; (800a480 <TIM_Base_SetConfig+0x11c>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d01f      	beq.n	800a416 <TIM_Base_SetConfig+0xb2>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a2a      	ldr	r2, [pc, #168]	; (800a484 <TIM_Base_SetConfig+0x120>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d01b      	beq.n	800a416 <TIM_Base_SetConfig+0xb2>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a29      	ldr	r2, [pc, #164]	; (800a488 <TIM_Base_SetConfig+0x124>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d017      	beq.n	800a416 <TIM_Base_SetConfig+0xb2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a28      	ldr	r2, [pc, #160]	; (800a48c <TIM_Base_SetConfig+0x128>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d013      	beq.n	800a416 <TIM_Base_SetConfig+0xb2>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a27      	ldr	r2, [pc, #156]	; (800a490 <TIM_Base_SetConfig+0x12c>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d00f      	beq.n	800a416 <TIM_Base_SetConfig+0xb2>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a26      	ldr	r2, [pc, #152]	; (800a494 <TIM_Base_SetConfig+0x130>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d00b      	beq.n	800a416 <TIM_Base_SetConfig+0xb2>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a25      	ldr	r2, [pc, #148]	; (800a498 <TIM_Base_SetConfig+0x134>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d007      	beq.n	800a416 <TIM_Base_SetConfig+0xb2>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a24      	ldr	r2, [pc, #144]	; (800a49c <TIM_Base_SetConfig+0x138>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d003      	beq.n	800a416 <TIM_Base_SetConfig+0xb2>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a23      	ldr	r2, [pc, #140]	; (800a4a0 <TIM_Base_SetConfig+0x13c>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d108      	bne.n	800a428 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a41c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	4313      	orrs	r3, r2
 800a426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	4313      	orrs	r3, r2
 800a434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	689a      	ldr	r2, [r3, #8]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a0a      	ldr	r2, [pc, #40]	; (800a478 <TIM_Base_SetConfig+0x114>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d003      	beq.n	800a45c <TIM_Base_SetConfig+0xf8>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a0c      	ldr	r2, [pc, #48]	; (800a488 <TIM_Base_SetConfig+0x124>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d103      	bne.n	800a464 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	691a      	ldr	r2, [r3, #16]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	615a      	str	r2, [r3, #20]
}
 800a46a:	bf00      	nop
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	40010000 	.word	0x40010000
 800a47c:	40000400 	.word	0x40000400
 800a480:	40000800 	.word	0x40000800
 800a484:	40000c00 	.word	0x40000c00
 800a488:	40010400 	.word	0x40010400
 800a48c:	40014000 	.word	0x40014000
 800a490:	40014400 	.word	0x40014400
 800a494:	40014800 	.word	0x40014800
 800a498:	40001800 	.word	0x40001800
 800a49c:	40001c00 	.word	0x40001c00
 800a4a0:	40002000 	.word	0x40002000

0800a4a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b087      	sub	sp, #28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	f023 0201 	bic.w	r2, r3, #1
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f023 0303 	bic.w	r3, r3, #3
 800a4da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	f023 0302 	bic.w	r3, r3, #2
 800a4ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	697a      	ldr	r2, [r7, #20]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4a20      	ldr	r2, [pc, #128]	; (800a57c <TIM_OC1_SetConfig+0xd8>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d003      	beq.n	800a508 <TIM_OC1_SetConfig+0x64>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a1f      	ldr	r2, [pc, #124]	; (800a580 <TIM_OC1_SetConfig+0xdc>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d10c      	bne.n	800a522 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	f023 0308 	bic.w	r3, r3, #8
 800a50e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	697a      	ldr	r2, [r7, #20]
 800a516:	4313      	orrs	r3, r2
 800a518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f023 0304 	bic.w	r3, r3, #4
 800a520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a15      	ldr	r2, [pc, #84]	; (800a57c <TIM_OC1_SetConfig+0xd8>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d003      	beq.n	800a532 <TIM_OC1_SetConfig+0x8e>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a14      	ldr	r2, [pc, #80]	; (800a580 <TIM_OC1_SetConfig+0xdc>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d111      	bne.n	800a556 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	4313      	orrs	r3, r2
 800a54a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	4313      	orrs	r3, r2
 800a554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	685a      	ldr	r2, [r3, #4]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	621a      	str	r2, [r3, #32]
}
 800a570:	bf00      	nop
 800a572:	371c      	adds	r7, #28
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	40010000 	.word	0x40010000
 800a580:	40010400 	.word	0x40010400

0800a584 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	f023 0210 	bic.w	r2, r3, #16
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	021b      	lsls	r3, r3, #8
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	f023 0320 	bic.w	r3, r3, #32
 800a5ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	011b      	lsls	r3, r3, #4
 800a5d6:	697a      	ldr	r2, [r7, #20]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a22      	ldr	r2, [pc, #136]	; (800a668 <TIM_OC2_SetConfig+0xe4>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d003      	beq.n	800a5ec <TIM_OC2_SetConfig+0x68>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a21      	ldr	r2, [pc, #132]	; (800a66c <TIM_OC2_SetConfig+0xe8>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d10d      	bne.n	800a608 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	011b      	lsls	r3, r3, #4
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a606:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a17      	ldr	r2, [pc, #92]	; (800a668 <TIM_OC2_SetConfig+0xe4>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d003      	beq.n	800a618 <TIM_OC2_SetConfig+0x94>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a16      	ldr	r2, [pc, #88]	; (800a66c <TIM_OC2_SetConfig+0xe8>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d113      	bne.n	800a640 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a61e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	695b      	ldr	r3, [r3, #20]
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	4313      	orrs	r3, r2
 800a632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	693a      	ldr	r2, [r7, #16]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	685a      	ldr	r2, [r3, #4]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	621a      	str	r2, [r3, #32]
}
 800a65a:	bf00      	nop
 800a65c:	371c      	adds	r7, #28
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	40010000 	.word	0x40010000
 800a66c:	40010400 	.word	0x40010400

0800a670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a670:	b480      	push	{r7}
 800a672:	b087      	sub	sp, #28
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a1b      	ldr	r3, [r3, #32]
 800a67e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	69db      	ldr	r3, [r3, #28]
 800a696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a69e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f023 0303 	bic.w	r3, r3, #3
 800a6a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	021b      	lsls	r3, r3, #8
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4a21      	ldr	r2, [pc, #132]	; (800a750 <TIM_OC3_SetConfig+0xe0>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d003      	beq.n	800a6d6 <TIM_OC3_SetConfig+0x66>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4a20      	ldr	r2, [pc, #128]	; (800a754 <TIM_OC3_SetConfig+0xe4>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d10d      	bne.n	800a6f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	021b      	lsls	r3, r3, #8
 800a6e4:	697a      	ldr	r2, [r7, #20]
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a16      	ldr	r2, [pc, #88]	; (800a750 <TIM_OC3_SetConfig+0xe0>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d003      	beq.n	800a702 <TIM_OC3_SetConfig+0x92>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a15      	ldr	r2, [pc, #84]	; (800a754 <TIM_OC3_SetConfig+0xe4>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d113      	bne.n	800a72a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	695b      	ldr	r3, [r3, #20]
 800a716:	011b      	lsls	r3, r3, #4
 800a718:	693a      	ldr	r2, [r7, #16]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	699b      	ldr	r3, [r3, #24]
 800a722:	011b      	lsls	r3, r3, #4
 800a724:	693a      	ldr	r2, [r7, #16]
 800a726:	4313      	orrs	r3, r2
 800a728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	685a      	ldr	r2, [r3, #4]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	697a      	ldr	r2, [r7, #20]
 800a742:	621a      	str	r2, [r3, #32]
}
 800a744:	bf00      	nop
 800a746:	371c      	adds	r7, #28
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	40010000 	.word	0x40010000
 800a754:	40010400 	.word	0x40010400

0800a758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a758:	b480      	push	{r7}
 800a75a:	b087      	sub	sp, #28
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a1b      	ldr	r3, [r3, #32]
 800a766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a1b      	ldr	r3, [r3, #32]
 800a772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	69db      	ldr	r3, [r3, #28]
 800a77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a78e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	021b      	lsls	r3, r3, #8
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	4313      	orrs	r3, r2
 800a79a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	031b      	lsls	r3, r3, #12
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a12      	ldr	r2, [pc, #72]	; (800a7fc <TIM_OC4_SetConfig+0xa4>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d003      	beq.n	800a7c0 <TIM_OC4_SetConfig+0x68>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a11      	ldr	r2, [pc, #68]	; (800a800 <TIM_OC4_SetConfig+0xa8>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d109      	bne.n	800a7d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	019b      	lsls	r3, r3, #6
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	685a      	ldr	r2, [r3, #4]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	621a      	str	r2, [r3, #32]
}
 800a7ee:	bf00      	nop
 800a7f0:	371c      	adds	r7, #28
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	40010000 	.word	0x40010000
 800a800:	40010400 	.word	0x40010400

0800a804 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a804:	b480      	push	{r7}
 800a806:	b087      	sub	sp, #28
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
 800a810:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	f023 0201 	bic.w	r2, r3, #1
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6a1b      	ldr	r3, [r3, #32]
 800a828:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	4a28      	ldr	r2, [pc, #160]	; (800a8d0 <TIM_TI1_SetConfig+0xcc>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d01b      	beq.n	800a86a <TIM_TI1_SetConfig+0x66>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a838:	d017      	beq.n	800a86a <TIM_TI1_SetConfig+0x66>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	4a25      	ldr	r2, [pc, #148]	; (800a8d4 <TIM_TI1_SetConfig+0xd0>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d013      	beq.n	800a86a <TIM_TI1_SetConfig+0x66>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	4a24      	ldr	r2, [pc, #144]	; (800a8d8 <TIM_TI1_SetConfig+0xd4>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d00f      	beq.n	800a86a <TIM_TI1_SetConfig+0x66>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	4a23      	ldr	r2, [pc, #140]	; (800a8dc <TIM_TI1_SetConfig+0xd8>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d00b      	beq.n	800a86a <TIM_TI1_SetConfig+0x66>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	4a22      	ldr	r2, [pc, #136]	; (800a8e0 <TIM_TI1_SetConfig+0xdc>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d007      	beq.n	800a86a <TIM_TI1_SetConfig+0x66>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	4a21      	ldr	r2, [pc, #132]	; (800a8e4 <TIM_TI1_SetConfig+0xe0>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d003      	beq.n	800a86a <TIM_TI1_SetConfig+0x66>
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	4a20      	ldr	r2, [pc, #128]	; (800a8e8 <TIM_TI1_SetConfig+0xe4>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d101      	bne.n	800a86e <TIM_TI1_SetConfig+0x6a>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e000      	b.n	800a870 <TIM_TI1_SetConfig+0x6c>
 800a86e:	2300      	movs	r3, #0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d008      	beq.n	800a886 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	f023 0303 	bic.w	r3, r3, #3
 800a87a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a87c:	697a      	ldr	r2, [r7, #20]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4313      	orrs	r3, r2
 800a882:	617b      	str	r3, [r7, #20]
 800a884:	e003      	b.n	800a88e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	f043 0301 	orr.w	r3, r3, #1
 800a88c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a894:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	011b      	lsls	r3, r3, #4
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	697a      	ldr	r2, [r7, #20]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	f023 030a 	bic.w	r3, r3, #10
 800a8a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	f003 030a 	and.w	r3, r3, #10
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	693a      	ldr	r2, [r7, #16]
 800a8c0:	621a      	str	r2, [r3, #32]
}
 800a8c2:	bf00      	nop
 800a8c4:	371c      	adds	r7, #28
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	40010000 	.word	0x40010000
 800a8d4:	40000400 	.word	0x40000400
 800a8d8:	40000800 	.word	0x40000800
 800a8dc:	40000c00 	.word	0x40000c00
 800a8e0:	40010400 	.word	0x40010400
 800a8e4:	40014000 	.word	0x40014000
 800a8e8:	40001800 	.word	0x40001800

0800a8ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6a1b      	ldr	r3, [r3, #32]
 800a8fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6a1b      	ldr	r3, [r3, #32]
 800a902:	f023 0201 	bic.w	r2, r3, #1
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	011b      	lsls	r3, r3, #4
 800a91c:	693a      	ldr	r2, [r7, #16]
 800a91e:	4313      	orrs	r3, r2
 800a920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f023 030a 	bic.w	r3, r3, #10
 800a928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a92a:	697a      	ldr	r2, [r7, #20]
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	4313      	orrs	r3, r2
 800a930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	697a      	ldr	r2, [r7, #20]
 800a93c:	621a      	str	r2, [r3, #32]
}
 800a93e:	bf00      	nop
 800a940:	371c      	adds	r7, #28
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b087      	sub	sp, #28
 800a94e:	af00      	add	r7, sp, #0
 800a950:	60f8      	str	r0, [r7, #12]
 800a952:	60b9      	str	r1, [r7, #8]
 800a954:	607a      	str	r2, [r7, #4]
 800a956:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6a1b      	ldr	r3, [r3, #32]
 800a95c:	f023 0210 	bic.w	r2, r3, #16
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a976:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	021b      	lsls	r3, r3, #8
 800a97c:	697a      	ldr	r2, [r7, #20]
 800a97e:	4313      	orrs	r3, r2
 800a980:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	031b      	lsls	r3, r3, #12
 800a98e:	b29b      	uxth	r3, r3
 800a990:	697a      	ldr	r2, [r7, #20]
 800a992:	4313      	orrs	r3, r2
 800a994:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a99c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	011b      	lsls	r3, r3, #4
 800a9a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	697a      	ldr	r2, [r7, #20]
 800a9b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	693a      	ldr	r2, [r7, #16]
 800a9b6:	621a      	str	r2, [r3, #32]
}
 800a9b8:	bf00      	nop
 800a9ba:	371c      	adds	r7, #28
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b087      	sub	sp, #28
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6a1b      	ldr	r3, [r3, #32]
 800a9d4:	f023 0210 	bic.w	r2, r3, #16
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6a1b      	ldr	r3, [r3, #32]
 800a9e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	031b      	lsls	r3, r3, #12
 800a9f4:	697a      	ldr	r2, [r7, #20]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	011b      	lsls	r3, r3, #4
 800aa06:	693a      	ldr	r2, [r7, #16]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	693a      	ldr	r2, [r7, #16]
 800aa16:	621a      	str	r2, [r3, #32]
}
 800aa18:	bf00      	nop
 800aa1a:	371c      	adds	r7, #28
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b087      	sub	sp, #28
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
 800aa30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	69db      	ldr	r3, [r3, #28]
 800aa42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6a1b      	ldr	r3, [r3, #32]
 800aa48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f023 0303 	bic.w	r3, r3, #3
 800aa50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	011b      	lsls	r3, r3, #4
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800aa74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	021b      	lsls	r3, r3, #8
 800aa7a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800aa7e:	693a      	ldr	r2, [r7, #16]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	697a      	ldr	r2, [r7, #20]
 800aa88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	621a      	str	r2, [r3, #32]
}
 800aa90:	bf00      	nop
 800aa92:	371c      	adds	r7, #28
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b087      	sub	sp, #28
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	607a      	str	r2, [r7, #4]
 800aaa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	69db      	ldr	r3, [r3, #28]
 800aaba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6a1b      	ldr	r3, [r3, #32]
 800aac0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aac8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	021b      	lsls	r3, r3, #8
 800aace:	697a      	ldr	r2, [r7, #20]
 800aad0:	4313      	orrs	r3, r2
 800aad2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aada:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	031b      	lsls	r3, r3, #12
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800aaee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	031b      	lsls	r3, r3, #12
 800aaf4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	693a      	ldr	r2, [r7, #16]
 800ab08:	621a      	str	r2, [r3, #32]
}
 800ab0a:	bf00      	nop
 800ab0c:	371c      	adds	r7, #28
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab16:	b480      	push	{r7}
 800ab18:	b085      	sub	sp, #20
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
 800ab1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab2e:	683a      	ldr	r2, [r7, #0]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	f043 0307 	orr.w	r3, r3, #7
 800ab38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	609a      	str	r2, [r3, #8]
}
 800ab40:	bf00      	nop
 800ab42:	3714      	adds	r7, #20
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b087      	sub	sp, #28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
 800ab58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	021a      	lsls	r2, r3, #8
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	431a      	orrs	r2, r3
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	697a      	ldr	r2, [r7, #20]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	609a      	str	r2, [r3, #8]
}
 800ab80:	bf00      	nop
 800ab82:	371c      	adds	r7, #28
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b087      	sub	sp, #28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	f003 031f 	and.w	r3, r3, #31
 800ab9e:	2201      	movs	r2, #1
 800aba0:	fa02 f303 	lsl.w	r3, r2, r3
 800aba4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6a1a      	ldr	r2, [r3, #32]
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	43db      	mvns	r3, r3
 800abae:	401a      	ands	r2, r3
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6a1a      	ldr	r2, [r3, #32]
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	f003 031f 	and.w	r3, r3, #31
 800abbe:	6879      	ldr	r1, [r7, #4]
 800abc0:	fa01 f303 	lsl.w	r3, r1, r3
 800abc4:	431a      	orrs	r2, r3
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	621a      	str	r2, [r3, #32]
}
 800abca:	bf00      	nop
 800abcc:	371c      	adds	r7, #28
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
	...

0800abd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d101      	bne.n	800abf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abec:	2302      	movs	r3, #2
 800abee:	e05a      	b.n	800aca6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2202      	movs	r2, #2
 800abfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a21      	ldr	r2, [pc, #132]	; (800acb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d022      	beq.n	800ac7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac3c:	d01d      	beq.n	800ac7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a1d      	ldr	r2, [pc, #116]	; (800acb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d018      	beq.n	800ac7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a1b      	ldr	r2, [pc, #108]	; (800acbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d013      	beq.n	800ac7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a1a      	ldr	r2, [pc, #104]	; (800acc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d00e      	beq.n	800ac7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a18      	ldr	r2, [pc, #96]	; (800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d009      	beq.n	800ac7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a17      	ldr	r2, [pc, #92]	; (800acc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d004      	beq.n	800ac7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a15      	ldr	r2, [pc, #84]	; (800accc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d10c      	bne.n	800ac94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68ba      	ldr	r2, [r7, #8]
 800ac92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2201      	movs	r2, #1
 800ac98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	40010000 	.word	0x40010000
 800acb8:	40000400 	.word	0x40000400
 800acbc:	40000800 	.word	0x40000800
 800acc0:	40000c00 	.word	0x40000c00
 800acc4:	40010400 	.word	0x40010400
 800acc8:	40014000 	.word	0x40014000
 800accc:	40001800 	.word	0x40001800

0800acd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800acda:	2300      	movs	r3, #0
 800acdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d101      	bne.n	800acec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ace8:	2302      	movs	r3, #2
 800acea:	e03d      	b.n	800ad68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	69db      	ldr	r3, [r3, #28]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3714      	adds	r7, #20
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad7c:	bf00      	nop
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad90:	bf00      	nop
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d101      	bne.n	800adae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e03f      	b.n	800ae2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d106      	bne.n	800adc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7fb fe0a 	bl	80069dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2224      	movs	r2, #36	; 0x24
 800adcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	68da      	ldr	r2, [r3, #12]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800adde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 ff35 	bl	800bc50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	691a      	ldr	r2, [r3, #16]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800adf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	695a      	ldr	r2, [r3, #20]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68da      	ldr	r2, [r3, #12]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2220      	movs	r2, #32
 800ae20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2220      	movs	r2, #32
 800ae28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b08a      	sub	sp, #40	; 0x28
 800ae3a:	af02      	add	r7, sp, #8
 800ae3c:	60f8      	str	r0, [r7, #12]
 800ae3e:	60b9      	str	r1, [r7, #8]
 800ae40:	603b      	str	r3, [r7, #0]
 800ae42:	4613      	mov	r3, r2
 800ae44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ae46:	2300      	movs	r3, #0
 800ae48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	2b20      	cmp	r3, #32
 800ae54:	d17c      	bne.n	800af50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <HAL_UART_Transmit+0x2c>
 800ae5c:	88fb      	ldrh	r3, [r7, #6]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d101      	bne.n	800ae66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e075      	b.n	800af52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d101      	bne.n	800ae74 <HAL_UART_Transmit+0x3e>
 800ae70:	2302      	movs	r3, #2
 800ae72:	e06e      	b.n	800af52 <HAL_UART_Transmit+0x11c>
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2221      	movs	r2, #33	; 0x21
 800ae86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae8a:	f7fb fef9 	bl	8006c80 <HAL_GetTick>
 800ae8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	88fa      	ldrh	r2, [r7, #6]
 800ae94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	88fa      	ldrh	r2, [r7, #6]
 800ae9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aea4:	d108      	bne.n	800aeb8 <HAL_UART_Transmit+0x82>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d104      	bne.n	800aeb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	61bb      	str	r3, [r7, #24]
 800aeb6:	e003      	b.n	800aec0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aebc:	2300      	movs	r3, #0
 800aebe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800aec8:	e02a      	b.n	800af20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	9300      	str	r3, [sp, #0]
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	2200      	movs	r2, #0
 800aed2:	2180      	movs	r1, #128	; 0x80
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f000 fc4c 	bl	800b772 <UART_WaitOnFlagUntilTimeout>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d001      	beq.n	800aee4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e036      	b.n	800af52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10b      	bne.n	800af02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	881b      	ldrh	r3, [r3, #0]
 800aeee:	461a      	mov	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aef8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	3302      	adds	r3, #2
 800aefe:	61bb      	str	r3, [r7, #24]
 800af00:	e007      	b.n	800af12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	781a      	ldrb	r2, [r3, #0]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	3301      	adds	r3, #1
 800af10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af16:	b29b      	uxth	r3, r3
 800af18:	3b01      	subs	r3, #1
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af24:	b29b      	uxth	r3, r3
 800af26:	2b00      	cmp	r3, #0
 800af28:	d1cf      	bne.n	800aeca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	2200      	movs	r2, #0
 800af32:	2140      	movs	r1, #64	; 0x40
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f000 fc1c 	bl	800b772 <UART_WaitOnFlagUntilTimeout>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800af40:	2303      	movs	r3, #3
 800af42:	e006      	b.n	800af52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2220      	movs	r2, #32
 800af48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	e000      	b.n	800af52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800af50:	2302      	movs	r3, #2
  }
}
 800af52:	4618      	mov	r0, r3
 800af54:	3720      	adds	r7, #32
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b084      	sub	sp, #16
 800af5e:	af00      	add	r7, sp, #0
 800af60:	60f8      	str	r0, [r7, #12]
 800af62:	60b9      	str	r1, [r7, #8]
 800af64:	4613      	mov	r3, r2
 800af66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	2b20      	cmp	r3, #32
 800af72:	d11d      	bne.n	800afb0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d002      	beq.n	800af80 <HAL_UART_Receive_IT+0x26>
 800af7a:	88fb      	ldrh	r3, [r7, #6]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d101      	bne.n	800af84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	e016      	b.n	800afb2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d101      	bne.n	800af92 <HAL_UART_Receive_IT+0x38>
 800af8e:	2302      	movs	r3, #2
 800af90:	e00f      	b.n	800afb2 <HAL_UART_Receive_IT+0x58>
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2201      	movs	r2, #1
 800af96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800afa0:	88fb      	ldrh	r3, [r7, #6]
 800afa2:	461a      	mov	r2, r3
 800afa4:	68b9      	ldr	r1, [r7, #8]
 800afa6:	68f8      	ldr	r0, [r7, #12]
 800afa8:	f000 fc51 	bl	800b84e <UART_Start_Receive_IT>
 800afac:	4603      	mov	r3, r0
 800afae:	e000      	b.n	800afb2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800afb0:	2302      	movs	r3, #2
  }
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3710      	adds	r7, #16
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
	...

0800afbc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b08c      	sub	sp, #48	; 0x30
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	4613      	mov	r3, r2
 800afc8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b20      	cmp	r3, #32
 800afd4:	d165      	bne.n	800b0a2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <HAL_UART_Transmit_DMA+0x26>
 800afdc:	88fb      	ldrh	r3, [r7, #6]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	e05e      	b.n	800b0a4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afec:	2b01      	cmp	r3, #1
 800afee:	d101      	bne.n	800aff4 <HAL_UART_Transmit_DMA+0x38>
 800aff0:	2302      	movs	r3, #2
 800aff2:	e057      	b.n	800b0a4 <HAL_UART_Transmit_DMA+0xe8>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	88fa      	ldrh	r2, [r7, #6]
 800b006:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	88fa      	ldrh	r2, [r7, #6]
 800b00c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2221      	movs	r2, #33	; 0x21
 800b018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b020:	4a22      	ldr	r2, [pc, #136]	; (800b0ac <HAL_UART_Transmit_DMA+0xf0>)
 800b022:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b028:	4a21      	ldr	r2, [pc, #132]	; (800b0b0 <HAL_UART_Transmit_DMA+0xf4>)
 800b02a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b030:	4a20      	ldr	r2, [pc, #128]	; (800b0b4 <HAL_UART_Transmit_DMA+0xf8>)
 800b032:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b038:	2200      	movs	r2, #0
 800b03a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b03c:	f107 0308 	add.w	r3, r7, #8
 800b040:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b048:	6819      	ldr	r1, [r3, #0]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	3304      	adds	r3, #4
 800b050:	461a      	mov	r2, r3
 800b052:	88fb      	ldrh	r3, [r7, #6]
 800b054:	f7fc fe9e 	bl	8007d94 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b060:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2200      	movs	r2, #0
 800b066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	3314      	adds	r3, #20
 800b070:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	e853 3f00 	ldrex	r3, [r3]
 800b078:	617b      	str	r3, [r7, #20]
   return(result);
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b080:	62bb      	str	r3, [r7, #40]	; 0x28
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3314      	adds	r3, #20
 800b088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b08a:	627a      	str	r2, [r7, #36]	; 0x24
 800b08c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08e:	6a39      	ldr	r1, [r7, #32]
 800b090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b092:	e841 2300 	strex	r3, r2, [r1]
 800b096:	61fb      	str	r3, [r7, #28]
   return(result);
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1e5      	bne.n	800b06a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	e000      	b.n	800b0a4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800b0a2:	2302      	movs	r3, #2
  }
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3730      	adds	r7, #48	; 0x30
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	0800b629 	.word	0x0800b629
 800b0b0:	0800b6c3 	.word	0x0800b6c3
 800b0b4:	0800b6df 	.word	0x0800b6df

0800b0b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b0ba      	sub	sp, #232	; 0xe8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	695b      	ldr	r3, [r3, #20]
 800b0da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b0ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ee:	f003 030f 	and.w	r3, r3, #15
 800b0f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b0f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d10f      	bne.n	800b11e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b0fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b102:	f003 0320 	and.w	r3, r3, #32
 800b106:	2b00      	cmp	r3, #0
 800b108:	d009      	beq.n	800b11e <HAL_UART_IRQHandler+0x66>
 800b10a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b10e:	f003 0320 	and.w	r3, r3, #32
 800b112:	2b00      	cmp	r3, #0
 800b114:	d003      	beq.n	800b11e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 fcde 	bl	800bad8 <UART_Receive_IT>
      return;
 800b11c:	e256      	b.n	800b5cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b11e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b122:	2b00      	cmp	r3, #0
 800b124:	f000 80de 	beq.w	800b2e4 <HAL_UART_IRQHandler+0x22c>
 800b128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b12c:	f003 0301 	and.w	r3, r3, #1
 800b130:	2b00      	cmp	r3, #0
 800b132:	d106      	bne.n	800b142 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b138:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f000 80d1 	beq.w	800b2e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b146:	f003 0301 	and.w	r3, r3, #1
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00b      	beq.n	800b166 <HAL_UART_IRQHandler+0xae>
 800b14e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b156:	2b00      	cmp	r3, #0
 800b158:	d005      	beq.n	800b166 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15e:	f043 0201 	orr.w	r2, r3, #1
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b16a:	f003 0304 	and.w	r3, r3, #4
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00b      	beq.n	800b18a <HAL_UART_IRQHandler+0xd2>
 800b172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b176:	f003 0301 	and.w	r3, r3, #1
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d005      	beq.n	800b18a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b182:	f043 0202 	orr.w	r2, r3, #2
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b18a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b18e:	f003 0302 	and.w	r3, r3, #2
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00b      	beq.n	800b1ae <HAL_UART_IRQHandler+0xf6>
 800b196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b19a:	f003 0301 	and.w	r3, r3, #1
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d005      	beq.n	800b1ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a6:	f043 0204 	orr.w	r2, r3, #4
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1b2:	f003 0308 	and.w	r3, r3, #8
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d011      	beq.n	800b1de <HAL_UART_IRQHandler+0x126>
 800b1ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1be:	f003 0320 	and.w	r3, r3, #32
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d105      	bne.n	800b1d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b1c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1ca:	f003 0301 	and.w	r3, r3, #1
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d005      	beq.n	800b1de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d6:	f043 0208 	orr.w	r2, r3, #8
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	f000 81ed 	beq.w	800b5c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1ec:	f003 0320 	and.w	r3, r3, #32
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d008      	beq.n	800b206 <HAL_UART_IRQHandler+0x14e>
 800b1f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1f8:	f003 0320 	and.w	r3, r3, #32
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d002      	beq.n	800b206 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 fc69 	bl	800bad8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	695b      	ldr	r3, [r3, #20]
 800b20c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b210:	2b40      	cmp	r3, #64	; 0x40
 800b212:	bf0c      	ite	eq
 800b214:	2301      	moveq	r3, #1
 800b216:	2300      	movne	r3, #0
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b222:	f003 0308 	and.w	r3, r3, #8
 800b226:	2b00      	cmp	r3, #0
 800b228:	d103      	bne.n	800b232 <HAL_UART_IRQHandler+0x17a>
 800b22a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d04f      	beq.n	800b2d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 fb71 	bl	800b91a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	695b      	ldr	r3, [r3, #20]
 800b23e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b242:	2b40      	cmp	r3, #64	; 0x40
 800b244:	d141      	bne.n	800b2ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	3314      	adds	r3, #20
 800b24c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b250:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b254:	e853 3f00 	ldrex	r3, [r3]
 800b258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b25c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3314      	adds	r3, #20
 800b26e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b272:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b276:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b27e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b282:	e841 2300 	strex	r3, r2, [r1]
 800b286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b28a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1d9      	bne.n	800b246 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b296:	2b00      	cmp	r3, #0
 800b298:	d013      	beq.n	800b2c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29e:	4a7d      	ldr	r2, [pc, #500]	; (800b494 <HAL_UART_IRQHandler+0x3dc>)
 800b2a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fc fe3c 	bl	8007f24 <HAL_DMA_Abort_IT>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d016      	beq.n	800b2e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b2bc:	4610      	mov	r0, r2
 800b2be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2c0:	e00e      	b.n	800b2e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 f99a 	bl	800b5fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2c8:	e00a      	b.n	800b2e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f996 	bl	800b5fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2d0:	e006      	b.n	800b2e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 f992 	bl	800b5fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b2de:	e170      	b.n	800b5c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2e0:	bf00      	nop
    return;
 800b2e2:	e16e      	b.n	800b5c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	f040 814a 	bne.w	800b582 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b2ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f2:	f003 0310 	and.w	r3, r3, #16
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f000 8143 	beq.w	800b582 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b2fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b300:	f003 0310 	and.w	r3, r3, #16
 800b304:	2b00      	cmp	r3, #0
 800b306:	f000 813c 	beq.w	800b582 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b30a:	2300      	movs	r3, #0
 800b30c:	60bb      	str	r3, [r7, #8]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	60bb      	str	r3, [r7, #8]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	60bb      	str	r3, [r7, #8]
 800b31e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	695b      	ldr	r3, [r3, #20]
 800b326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b32a:	2b40      	cmp	r3, #64	; 0x40
 800b32c:	f040 80b4 	bne.w	800b498 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b33c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 8140 	beq.w	800b5c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b34a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b34e:	429a      	cmp	r2, r3
 800b350:	f080 8139 	bcs.w	800b5c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b35a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b360:	69db      	ldr	r3, [r3, #28]
 800b362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b366:	f000 8088 	beq.w	800b47a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	330c      	adds	r3, #12
 800b370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b374:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b378:	e853 3f00 	ldrex	r3, [r3]
 800b37c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b380:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b388:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	330c      	adds	r3, #12
 800b392:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b396:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b39a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b3a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b3a6:	e841 2300 	strex	r3, r2, [r1]
 800b3aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b3ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1d9      	bne.n	800b36a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	3314      	adds	r3, #20
 800b3bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3c0:	e853 3f00 	ldrex	r3, [r3]
 800b3c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b3c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3c8:	f023 0301 	bic.w	r3, r3, #1
 800b3cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3314      	adds	r3, #20
 800b3d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b3da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b3de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b3e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b3e6:	e841 2300 	strex	r3, r2, [r1]
 800b3ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b3ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1e1      	bne.n	800b3b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	3314      	adds	r3, #20
 800b3f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3fc:	e853 3f00 	ldrex	r3, [r3]
 800b400:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3314      	adds	r3, #20
 800b412:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b416:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b418:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b41c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b41e:	e841 2300 	strex	r3, r2, [r1]
 800b422:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1e3      	bne.n	800b3f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2220      	movs	r2, #32
 800b42e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	330c      	adds	r3, #12
 800b43e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b442:	e853 3f00 	ldrex	r3, [r3]
 800b446:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b44a:	f023 0310 	bic.w	r3, r3, #16
 800b44e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	330c      	adds	r3, #12
 800b458:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b45c:	65ba      	str	r2, [r7, #88]	; 0x58
 800b45e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b460:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b464:	e841 2300 	strex	r3, r2, [r1]
 800b468:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b46a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1e3      	bne.n	800b438 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b474:	4618      	mov	r0, r3
 800b476:	f7fc fce5 	bl	8007e44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b482:	b29b      	uxth	r3, r3
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	b29b      	uxth	r3, r3
 800b488:	4619      	mov	r1, r3
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f8c0 	bl	800b610 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b490:	e099      	b.n	800b5c6 <HAL_UART_IRQHandler+0x50e>
 800b492:	bf00      	nop
 800b494:	0800b9e1 	.word	0x0800b9e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f000 808b 	beq.w	800b5ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b4b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	f000 8086 	beq.w	800b5ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	330c      	adds	r3, #12
 800b4c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c8:	e853 3f00 	ldrex	r3, [r3]
 800b4cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	330c      	adds	r3, #12
 800b4de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b4e2:	647a      	str	r2, [r7, #68]	; 0x44
 800b4e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4ea:	e841 2300 	strex	r3, r2, [r1]
 800b4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b4f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1e3      	bne.n	800b4be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3314      	adds	r3, #20
 800b4fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	e853 3f00 	ldrex	r3, [r3]
 800b504:	623b      	str	r3, [r7, #32]
   return(result);
 800b506:	6a3b      	ldr	r3, [r7, #32]
 800b508:	f023 0301 	bic.w	r3, r3, #1
 800b50c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	3314      	adds	r3, #20
 800b516:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b51a:	633a      	str	r2, [r7, #48]	; 0x30
 800b51c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b522:	e841 2300 	strex	r3, r2, [r1]
 800b526:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1e3      	bne.n	800b4f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2220      	movs	r2, #32
 800b532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	330c      	adds	r3, #12
 800b542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	e853 3f00 	ldrex	r3, [r3]
 800b54a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f023 0310 	bic.w	r3, r3, #16
 800b552:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	330c      	adds	r3, #12
 800b55c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b560:	61fa      	str	r2, [r7, #28]
 800b562:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b564:	69b9      	ldr	r1, [r7, #24]
 800b566:	69fa      	ldr	r2, [r7, #28]
 800b568:	e841 2300 	strex	r3, r2, [r1]
 800b56c:	617b      	str	r3, [r7, #20]
   return(result);
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1e3      	bne.n	800b53c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b578:	4619      	mov	r1, r3
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 f848 	bl	800b610 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b580:	e023      	b.n	800b5ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d009      	beq.n	800b5a2 <HAL_UART_IRQHandler+0x4ea>
 800b58e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b596:	2b00      	cmp	r3, #0
 800b598:	d003      	beq.n	800b5a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fa34 	bl	800ba08 <UART_Transmit_IT>
    return;
 800b5a0:	e014      	b.n	800b5cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b5a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00e      	beq.n	800b5cc <HAL_UART_IRQHandler+0x514>
 800b5ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d008      	beq.n	800b5cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fa74 	bl	800baa8 <UART_EndTransmit_IT>
    return;
 800b5c0:	e004      	b.n	800b5cc <HAL_UART_IRQHandler+0x514>
    return;
 800b5c2:	bf00      	nop
 800b5c4:	e002      	b.n	800b5cc <HAL_UART_IRQHandler+0x514>
      return;
 800b5c6:	bf00      	nop
 800b5c8:	e000      	b.n	800b5cc <HAL_UART_IRQHandler+0x514>
      return;
 800b5ca:	bf00      	nop
  }
}
 800b5cc:	37e8      	adds	r7, #232	; 0xe8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop

0800b5d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b5dc:	bf00      	nop
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b5f0:	bf00      	nop
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b61c:	bf00      	nop
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b090      	sub	sp, #64	; 0x40
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b634:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b640:	2b00      	cmp	r3, #0
 800b642:	d137      	bne.n	800b6b4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b646:	2200      	movs	r2, #0
 800b648:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	3314      	adds	r3, #20
 800b650:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b654:	e853 3f00 	ldrex	r3, [r3]
 800b658:	623b      	str	r3, [r7, #32]
   return(result);
 800b65a:	6a3b      	ldr	r3, [r7, #32]
 800b65c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b660:	63bb      	str	r3, [r7, #56]	; 0x38
 800b662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	3314      	adds	r3, #20
 800b668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b66a:	633a      	str	r2, [r7, #48]	; 0x30
 800b66c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b672:	e841 2300 	strex	r3, r2, [r1]
 800b676:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1e5      	bne.n	800b64a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b67e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	330c      	adds	r3, #12
 800b684:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	e853 3f00 	ldrex	r3, [r3]
 800b68c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b694:	637b      	str	r3, [r7, #52]	; 0x34
 800b696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	330c      	adds	r3, #12
 800b69c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b69e:	61fa      	str	r2, [r7, #28]
 800b6a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a2:	69b9      	ldr	r1, [r7, #24]
 800b6a4:	69fa      	ldr	r2, [r7, #28]
 800b6a6:	e841 2300 	strex	r3, r2, [r1]
 800b6aa:	617b      	str	r3, [r7, #20]
   return(result);
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d1e5      	bne.n	800b67e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6b2:	e002      	b.n	800b6ba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b6b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b6b6:	f7ff ff8d 	bl	800b5d4 <HAL_UART_TxCpltCallback>
}
 800b6ba:	bf00      	nop
 800b6bc:	3740      	adds	r7, #64	; 0x40
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b084      	sub	sp, #16
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	f7ff ff89 	bl	800b5e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6d6:	bf00      	nop
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	695b      	ldr	r3, [r3, #20]
 800b6f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6fa:	2b80      	cmp	r3, #128	; 0x80
 800b6fc:	bf0c      	ite	eq
 800b6fe:	2301      	moveq	r3, #1
 800b700:	2300      	movne	r3, #0
 800b702:	b2db      	uxtb	r3, r3
 800b704:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	2b21      	cmp	r3, #33	; 0x21
 800b710:	d108      	bne.n	800b724 <UART_DMAError+0x46>
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d005      	beq.n	800b724 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	2200      	movs	r2, #0
 800b71c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b71e:	68b8      	ldr	r0, [r7, #8]
 800b720:	f000 f8d3 	bl	800b8ca <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	695b      	ldr	r3, [r3, #20]
 800b72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b72e:	2b40      	cmp	r3, #64	; 0x40
 800b730:	bf0c      	ite	eq
 800b732:	2301      	moveq	r3, #1
 800b734:	2300      	movne	r3, #0
 800b736:	b2db      	uxtb	r3, r3
 800b738:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b740:	b2db      	uxtb	r3, r3
 800b742:	2b22      	cmp	r3, #34	; 0x22
 800b744:	d108      	bne.n	800b758 <UART_DMAError+0x7a>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d005      	beq.n	800b758 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	2200      	movs	r2, #0
 800b750:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b752:	68b8      	ldr	r0, [r7, #8]
 800b754:	f000 f8e1 	bl	800b91a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b75c:	f043 0210 	orr.w	r2, r3, #16
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b764:	68b8      	ldr	r0, [r7, #8]
 800b766:	f7ff ff49 	bl	800b5fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b76a:	bf00      	nop
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}

0800b772 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b090      	sub	sp, #64	; 0x40
 800b776:	af00      	add	r7, sp, #0
 800b778:	60f8      	str	r0, [r7, #12]
 800b77a:	60b9      	str	r1, [r7, #8]
 800b77c:	603b      	str	r3, [r7, #0]
 800b77e:	4613      	mov	r3, r2
 800b780:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b782:	e050      	b.n	800b826 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b78a:	d04c      	beq.n	800b826 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b78c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d007      	beq.n	800b7a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800b792:	f7fb fa75 	bl	8006c80 <HAL_GetTick>
 800b796:	4602      	mov	r2, r0
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d241      	bcs.n	800b826 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	330c      	adds	r3, #12
 800b7a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ac:	e853 3f00 	ldrex	r3, [r3]
 800b7b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	330c      	adds	r3, #12
 800b7c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7c2:	637a      	str	r2, [r7, #52]	; 0x34
 800b7c4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7ca:	e841 2300 	strex	r3, r2, [r1]
 800b7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1e5      	bne.n	800b7a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	3314      	adds	r3, #20
 800b7dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	e853 3f00 	ldrex	r3, [r3]
 800b7e4:	613b      	str	r3, [r7, #16]
   return(result);
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	f023 0301 	bic.w	r3, r3, #1
 800b7ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3314      	adds	r3, #20
 800b7f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7f6:	623a      	str	r2, [r7, #32]
 800b7f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fa:	69f9      	ldr	r1, [r7, #28]
 800b7fc:	6a3a      	ldr	r2, [r7, #32]
 800b7fe:	e841 2300 	strex	r3, r2, [r1]
 800b802:	61bb      	str	r3, [r7, #24]
   return(result);
 800b804:	69bb      	ldr	r3, [r7, #24]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d1e5      	bne.n	800b7d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2220      	movs	r2, #32
 800b80e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2220      	movs	r2, #32
 800b816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2200      	movs	r2, #0
 800b81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b822:	2303      	movs	r3, #3
 800b824:	e00f      	b.n	800b846 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	4013      	ands	r3, r2
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	429a      	cmp	r2, r3
 800b834:	bf0c      	ite	eq
 800b836:	2301      	moveq	r3, #1
 800b838:	2300      	movne	r3, #0
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	461a      	mov	r2, r3
 800b83e:	79fb      	ldrb	r3, [r7, #7]
 800b840:	429a      	cmp	r2, r3
 800b842:	d09f      	beq.n	800b784 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b844:	2300      	movs	r3, #0
}
 800b846:	4618      	mov	r0, r3
 800b848:	3740      	adds	r7, #64	; 0x40
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b84e:	b480      	push	{r7}
 800b850:	b085      	sub	sp, #20
 800b852:	af00      	add	r7, sp, #0
 800b854:	60f8      	str	r0, [r7, #12]
 800b856:	60b9      	str	r1, [r7, #8]
 800b858:	4613      	mov	r3, r2
 800b85a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	88fa      	ldrh	r2, [r7, #6]
 800b866:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	88fa      	ldrh	r2, [r7, #6]
 800b86c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2222      	movs	r2, #34	; 0x22
 800b878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2200      	movs	r2, #0
 800b880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	691b      	ldr	r3, [r3, #16]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d007      	beq.n	800b89c <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	68da      	ldr	r2, [r3, #12]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b89a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	695a      	ldr	r2, [r3, #20]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f042 0201 	orr.w	r2, r2, #1
 800b8aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	68da      	ldr	r2, [r3, #12]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f042 0220 	orr.w	r2, r2, #32
 800b8ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3714      	adds	r7, #20
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr

0800b8ca <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b8ca:	b480      	push	{r7}
 800b8cc:	b089      	sub	sp, #36	; 0x24
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	330c      	adds	r3, #12
 800b8d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	e853 3f00 	ldrex	r3, [r3]
 800b8e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b8e8:	61fb      	str	r3, [r7, #28]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	330c      	adds	r3, #12
 800b8f0:	69fa      	ldr	r2, [r7, #28]
 800b8f2:	61ba      	str	r2, [r7, #24]
 800b8f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f6:	6979      	ldr	r1, [r7, #20]
 800b8f8:	69ba      	ldr	r2, [r7, #24]
 800b8fa:	e841 2300 	strex	r3, r2, [r1]
 800b8fe:	613b      	str	r3, [r7, #16]
   return(result);
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1e5      	bne.n	800b8d2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2220      	movs	r2, #32
 800b90a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b90e:	bf00      	nop
 800b910:	3724      	adds	r7, #36	; 0x24
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr

0800b91a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b91a:	b480      	push	{r7}
 800b91c:	b095      	sub	sp, #84	; 0x54
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	330c      	adds	r3, #12
 800b928:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b92c:	e853 3f00 	ldrex	r3, [r3]
 800b930:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b934:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b938:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	330c      	adds	r3, #12
 800b940:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b942:	643a      	str	r2, [r7, #64]	; 0x40
 800b944:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b946:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b948:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b94a:	e841 2300 	strex	r3, r2, [r1]
 800b94e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1e5      	bne.n	800b922 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	3314      	adds	r3, #20
 800b95c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b95e:	6a3b      	ldr	r3, [r7, #32]
 800b960:	e853 3f00 	ldrex	r3, [r3]
 800b964:	61fb      	str	r3, [r7, #28]
   return(result);
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	f023 0301 	bic.w	r3, r3, #1
 800b96c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	3314      	adds	r3, #20
 800b974:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b976:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b978:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b97c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b97e:	e841 2300 	strex	r3, r2, [r1]
 800b982:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b986:	2b00      	cmp	r3, #0
 800b988:	d1e5      	bne.n	800b956 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d119      	bne.n	800b9c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	330c      	adds	r3, #12
 800b998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	e853 3f00 	ldrex	r3, [r3]
 800b9a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	f023 0310 	bic.w	r3, r3, #16
 800b9a8:	647b      	str	r3, [r7, #68]	; 0x44
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	330c      	adds	r3, #12
 800b9b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9b2:	61ba      	str	r2, [r7, #24]
 800b9b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b6:	6979      	ldr	r1, [r7, #20]
 800b9b8:	69ba      	ldr	r2, [r7, #24]
 800b9ba:	e841 2300 	strex	r3, r2, [r1]
 800b9be:	613b      	str	r3, [r7, #16]
   return(result);
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1e5      	bne.n	800b992 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2220      	movs	r2, #32
 800b9ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b9d4:	bf00      	nop
 800b9d6:	3754      	adds	r7, #84	; 0x54
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f7ff fdfe 	bl	800b5fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba00:	bf00      	nop
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	2b21      	cmp	r3, #33	; 0x21
 800ba1a:	d13e      	bne.n	800ba9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba24:	d114      	bne.n	800ba50 <UART_Transmit_IT+0x48>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d110      	bne.n	800ba50 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a1b      	ldr	r3, [r3, #32]
 800ba32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	881b      	ldrh	r3, [r3, #0]
 800ba38:	461a      	mov	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a1b      	ldr	r3, [r3, #32]
 800ba48:	1c9a      	adds	r2, r3, #2
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	621a      	str	r2, [r3, #32]
 800ba4e:	e008      	b.n	800ba62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6a1b      	ldr	r3, [r3, #32]
 800ba54:	1c59      	adds	r1, r3, #1
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	6211      	str	r1, [r2, #32]
 800ba5a:	781a      	ldrb	r2, [r3, #0]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	4619      	mov	r1, r3
 800ba70:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10f      	bne.n	800ba96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	68da      	ldr	r2, [r3, #12]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	68da      	ldr	r2, [r3, #12]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	e000      	b.n	800ba9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ba9a:	2302      	movs	r3, #2
  }
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	68da      	ldr	r2, [r3, #12]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800babe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2220      	movs	r2, #32
 800bac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f7ff fd83 	bl	800b5d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b08c      	sub	sp, #48	; 0x30
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b22      	cmp	r3, #34	; 0x22
 800baea:	f040 80ab 	bne.w	800bc44 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	689b      	ldr	r3, [r3, #8]
 800baf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baf6:	d117      	bne.n	800bb28 <UART_Receive_IT+0x50>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	691b      	ldr	r3, [r3, #16]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d113      	bne.n	800bb28 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bb00:	2300      	movs	r3, #0
 800bb02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb08:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb20:	1c9a      	adds	r2, r3, #2
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	629a      	str	r2, [r3, #40]	; 0x28
 800bb26:	e026      	b.n	800bb76 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb3a:	d007      	beq.n	800bb4c <UART_Receive_IT+0x74>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10a      	bne.n	800bb5a <UART_Receive_IT+0x82>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	691b      	ldr	r3, [r3, #16]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d106      	bne.n	800bb5a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb56:	701a      	strb	r2, [r3, #0]
 800bb58:	e008      	b.n	800bb6c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb70:	1c5a      	adds	r2, r3, #1
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	4619      	mov	r1, r3
 800bb84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d15a      	bne.n	800bc40 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68da      	ldr	r2, [r3, #12]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f022 0220 	bic.w	r2, r2, #32
 800bb98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68da      	ldr	r2, [r3, #12]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bba8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	695a      	ldr	r2, [r3, #20]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f022 0201 	bic.w	r2, r2, #1
 800bbb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2220      	movs	r2, #32
 800bbbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d135      	bne.n	800bc36 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	330c      	adds	r3, #12
 800bbd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	e853 3f00 	ldrex	r3, [r3]
 800bbde:	613b      	str	r3, [r7, #16]
   return(result);
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	f023 0310 	bic.w	r3, r3, #16
 800bbe6:	627b      	str	r3, [r7, #36]	; 0x24
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	330c      	adds	r3, #12
 800bbee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbf0:	623a      	str	r2, [r7, #32]
 800bbf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf4:	69f9      	ldr	r1, [r7, #28]
 800bbf6:	6a3a      	ldr	r2, [r7, #32]
 800bbf8:	e841 2300 	strex	r3, r2, [r1]
 800bbfc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1e5      	bne.n	800bbd0 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f003 0310 	and.w	r3, r3, #16
 800bc0e:	2b10      	cmp	r3, #16
 800bc10:	d10a      	bne.n	800bc28 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc12:	2300      	movs	r3, #0
 800bc14:	60fb      	str	r3, [r7, #12]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	60fb      	str	r3, [r7, #12]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	60fb      	str	r3, [r7, #12]
 800bc26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f7ff fcee 	bl	800b610 <HAL_UARTEx_RxEventCallback>
 800bc34:	e002      	b.n	800bc3c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f7f9 ff58 	bl	8005aec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	e002      	b.n	800bc46 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	e000      	b.n	800bc46 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bc44:	2302      	movs	r3, #2
  }
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3730      	adds	r7, #48	; 0x30
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
	...

0800bc50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc54:	b0c0      	sub	sp, #256	; 0x100
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bc68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc6c:	68d9      	ldr	r1, [r3, #12]
 800bc6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	ea40 0301 	orr.w	r3, r0, r1
 800bc78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bc7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc7e:	689a      	ldr	r2, [r3, #8]
 800bc80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	431a      	orrs	r2, r3
 800bc88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc8c:	695b      	ldr	r3, [r3, #20]
 800bc8e:	431a      	orrs	r2, r3
 800bc90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc94:	69db      	ldr	r3, [r3, #28]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bc9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bca8:	f021 010c 	bic.w	r1, r1, #12
 800bcac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bcb6:	430b      	orrs	r3, r1
 800bcb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bcba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	695b      	ldr	r3, [r3, #20]
 800bcc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bcc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcca:	6999      	ldr	r1, [r3, #24]
 800bccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	ea40 0301 	orr.w	r3, r0, r1
 800bcd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bcd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	4b8f      	ldr	r3, [pc, #572]	; (800bf1c <UART_SetConfig+0x2cc>)
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d005      	beq.n	800bcf0 <UART_SetConfig+0xa0>
 800bce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	4b8d      	ldr	r3, [pc, #564]	; (800bf20 <UART_SetConfig+0x2d0>)
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d104      	bne.n	800bcfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bcf0:	f7fd f9e8 	bl	80090c4 <HAL_RCC_GetPCLK2Freq>
 800bcf4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bcf8:	e003      	b.n	800bd02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bcfa:	f7fd f9cf 	bl	800909c <HAL_RCC_GetPCLK1Freq>
 800bcfe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd06:	69db      	ldr	r3, [r3, #28]
 800bd08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd0c:	f040 810c 	bne.w	800bf28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bd10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd14:	2200      	movs	r2, #0
 800bd16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bd1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bd22:	4622      	mov	r2, r4
 800bd24:	462b      	mov	r3, r5
 800bd26:	1891      	adds	r1, r2, r2
 800bd28:	65b9      	str	r1, [r7, #88]	; 0x58
 800bd2a:	415b      	adcs	r3, r3
 800bd2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bd32:	4621      	mov	r1, r4
 800bd34:	eb12 0801 	adds.w	r8, r2, r1
 800bd38:	4629      	mov	r1, r5
 800bd3a:	eb43 0901 	adc.w	r9, r3, r1
 800bd3e:	f04f 0200 	mov.w	r2, #0
 800bd42:	f04f 0300 	mov.w	r3, #0
 800bd46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bd4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bd4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bd52:	4690      	mov	r8, r2
 800bd54:	4699      	mov	r9, r3
 800bd56:	4623      	mov	r3, r4
 800bd58:	eb18 0303 	adds.w	r3, r8, r3
 800bd5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bd60:	462b      	mov	r3, r5
 800bd62:	eb49 0303 	adc.w	r3, r9, r3
 800bd66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bd76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bd7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bd7e:	460b      	mov	r3, r1
 800bd80:	18db      	adds	r3, r3, r3
 800bd82:	653b      	str	r3, [r7, #80]	; 0x50
 800bd84:	4613      	mov	r3, r2
 800bd86:	eb42 0303 	adc.w	r3, r2, r3
 800bd8a:	657b      	str	r3, [r7, #84]	; 0x54
 800bd8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bd90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bd94:	f7f4 ff08 	bl	8000ba8 <__aeabi_uldivmod>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	4b61      	ldr	r3, [pc, #388]	; (800bf24 <UART_SetConfig+0x2d4>)
 800bd9e:	fba3 2302 	umull	r2, r3, r3, r2
 800bda2:	095b      	lsrs	r3, r3, #5
 800bda4:	011c      	lsls	r4, r3, #4
 800bda6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bdb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bdb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bdb8:	4642      	mov	r2, r8
 800bdba:	464b      	mov	r3, r9
 800bdbc:	1891      	adds	r1, r2, r2
 800bdbe:	64b9      	str	r1, [r7, #72]	; 0x48
 800bdc0:	415b      	adcs	r3, r3
 800bdc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bdc8:	4641      	mov	r1, r8
 800bdca:	eb12 0a01 	adds.w	sl, r2, r1
 800bdce:	4649      	mov	r1, r9
 800bdd0:	eb43 0b01 	adc.w	fp, r3, r1
 800bdd4:	f04f 0200 	mov.w	r2, #0
 800bdd8:	f04f 0300 	mov.w	r3, #0
 800bddc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bde0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bde4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bde8:	4692      	mov	sl, r2
 800bdea:	469b      	mov	fp, r3
 800bdec:	4643      	mov	r3, r8
 800bdee:	eb1a 0303 	adds.w	r3, sl, r3
 800bdf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bdf6:	464b      	mov	r3, r9
 800bdf8:	eb4b 0303 	adc.w	r3, fp, r3
 800bdfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800be00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800be10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800be14:	460b      	mov	r3, r1
 800be16:	18db      	adds	r3, r3, r3
 800be18:	643b      	str	r3, [r7, #64]	; 0x40
 800be1a:	4613      	mov	r3, r2
 800be1c:	eb42 0303 	adc.w	r3, r2, r3
 800be20:	647b      	str	r3, [r7, #68]	; 0x44
 800be22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800be26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800be2a:	f7f4 febd 	bl	8000ba8 <__aeabi_uldivmod>
 800be2e:	4602      	mov	r2, r0
 800be30:	460b      	mov	r3, r1
 800be32:	4611      	mov	r1, r2
 800be34:	4b3b      	ldr	r3, [pc, #236]	; (800bf24 <UART_SetConfig+0x2d4>)
 800be36:	fba3 2301 	umull	r2, r3, r3, r1
 800be3a:	095b      	lsrs	r3, r3, #5
 800be3c:	2264      	movs	r2, #100	; 0x64
 800be3e:	fb02 f303 	mul.w	r3, r2, r3
 800be42:	1acb      	subs	r3, r1, r3
 800be44:	00db      	lsls	r3, r3, #3
 800be46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800be4a:	4b36      	ldr	r3, [pc, #216]	; (800bf24 <UART_SetConfig+0x2d4>)
 800be4c:	fba3 2302 	umull	r2, r3, r3, r2
 800be50:	095b      	lsrs	r3, r3, #5
 800be52:	005b      	lsls	r3, r3, #1
 800be54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800be58:	441c      	add	r4, r3
 800be5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be5e:	2200      	movs	r2, #0
 800be60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800be68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800be6c:	4642      	mov	r2, r8
 800be6e:	464b      	mov	r3, r9
 800be70:	1891      	adds	r1, r2, r2
 800be72:	63b9      	str	r1, [r7, #56]	; 0x38
 800be74:	415b      	adcs	r3, r3
 800be76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800be7c:	4641      	mov	r1, r8
 800be7e:	1851      	adds	r1, r2, r1
 800be80:	6339      	str	r1, [r7, #48]	; 0x30
 800be82:	4649      	mov	r1, r9
 800be84:	414b      	adcs	r3, r1
 800be86:	637b      	str	r3, [r7, #52]	; 0x34
 800be88:	f04f 0200 	mov.w	r2, #0
 800be8c:	f04f 0300 	mov.w	r3, #0
 800be90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800be94:	4659      	mov	r1, fp
 800be96:	00cb      	lsls	r3, r1, #3
 800be98:	4651      	mov	r1, sl
 800be9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be9e:	4651      	mov	r1, sl
 800bea0:	00ca      	lsls	r2, r1, #3
 800bea2:	4610      	mov	r0, r2
 800bea4:	4619      	mov	r1, r3
 800bea6:	4603      	mov	r3, r0
 800bea8:	4642      	mov	r2, r8
 800beaa:	189b      	adds	r3, r3, r2
 800beac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800beb0:	464b      	mov	r3, r9
 800beb2:	460a      	mov	r2, r1
 800beb4:	eb42 0303 	adc.w	r3, r2, r3
 800beb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bec8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800becc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bed0:	460b      	mov	r3, r1
 800bed2:	18db      	adds	r3, r3, r3
 800bed4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bed6:	4613      	mov	r3, r2
 800bed8:	eb42 0303 	adc.w	r3, r2, r3
 800bedc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bee2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bee6:	f7f4 fe5f 	bl	8000ba8 <__aeabi_uldivmod>
 800beea:	4602      	mov	r2, r0
 800beec:	460b      	mov	r3, r1
 800beee:	4b0d      	ldr	r3, [pc, #52]	; (800bf24 <UART_SetConfig+0x2d4>)
 800bef0:	fba3 1302 	umull	r1, r3, r3, r2
 800bef4:	095b      	lsrs	r3, r3, #5
 800bef6:	2164      	movs	r1, #100	; 0x64
 800bef8:	fb01 f303 	mul.w	r3, r1, r3
 800befc:	1ad3      	subs	r3, r2, r3
 800befe:	00db      	lsls	r3, r3, #3
 800bf00:	3332      	adds	r3, #50	; 0x32
 800bf02:	4a08      	ldr	r2, [pc, #32]	; (800bf24 <UART_SetConfig+0x2d4>)
 800bf04:	fba2 2303 	umull	r2, r3, r2, r3
 800bf08:	095b      	lsrs	r3, r3, #5
 800bf0a:	f003 0207 	and.w	r2, r3, #7
 800bf0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4422      	add	r2, r4
 800bf16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bf18:	e105      	b.n	800c126 <UART_SetConfig+0x4d6>
 800bf1a:	bf00      	nop
 800bf1c:	40011000 	.word	0x40011000
 800bf20:	40011400 	.word	0x40011400
 800bf24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bf32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bf36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bf3a:	4642      	mov	r2, r8
 800bf3c:	464b      	mov	r3, r9
 800bf3e:	1891      	adds	r1, r2, r2
 800bf40:	6239      	str	r1, [r7, #32]
 800bf42:	415b      	adcs	r3, r3
 800bf44:	627b      	str	r3, [r7, #36]	; 0x24
 800bf46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bf4a:	4641      	mov	r1, r8
 800bf4c:	1854      	adds	r4, r2, r1
 800bf4e:	4649      	mov	r1, r9
 800bf50:	eb43 0501 	adc.w	r5, r3, r1
 800bf54:	f04f 0200 	mov.w	r2, #0
 800bf58:	f04f 0300 	mov.w	r3, #0
 800bf5c:	00eb      	lsls	r3, r5, #3
 800bf5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bf62:	00e2      	lsls	r2, r4, #3
 800bf64:	4614      	mov	r4, r2
 800bf66:	461d      	mov	r5, r3
 800bf68:	4643      	mov	r3, r8
 800bf6a:	18e3      	adds	r3, r4, r3
 800bf6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bf70:	464b      	mov	r3, r9
 800bf72:	eb45 0303 	adc.w	r3, r5, r3
 800bf76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bf7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bf8a:	f04f 0200 	mov.w	r2, #0
 800bf8e:	f04f 0300 	mov.w	r3, #0
 800bf92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bf96:	4629      	mov	r1, r5
 800bf98:	008b      	lsls	r3, r1, #2
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	008a      	lsls	r2, r1, #2
 800bfa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bfa8:	f7f4 fdfe 	bl	8000ba8 <__aeabi_uldivmod>
 800bfac:	4602      	mov	r2, r0
 800bfae:	460b      	mov	r3, r1
 800bfb0:	4b60      	ldr	r3, [pc, #384]	; (800c134 <UART_SetConfig+0x4e4>)
 800bfb2:	fba3 2302 	umull	r2, r3, r3, r2
 800bfb6:	095b      	lsrs	r3, r3, #5
 800bfb8:	011c      	lsls	r4, r3, #4
 800bfba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bfc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bfc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bfcc:	4642      	mov	r2, r8
 800bfce:	464b      	mov	r3, r9
 800bfd0:	1891      	adds	r1, r2, r2
 800bfd2:	61b9      	str	r1, [r7, #24]
 800bfd4:	415b      	adcs	r3, r3
 800bfd6:	61fb      	str	r3, [r7, #28]
 800bfd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bfdc:	4641      	mov	r1, r8
 800bfde:	1851      	adds	r1, r2, r1
 800bfe0:	6139      	str	r1, [r7, #16]
 800bfe2:	4649      	mov	r1, r9
 800bfe4:	414b      	adcs	r3, r1
 800bfe6:	617b      	str	r3, [r7, #20]
 800bfe8:	f04f 0200 	mov.w	r2, #0
 800bfec:	f04f 0300 	mov.w	r3, #0
 800bff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bff4:	4659      	mov	r1, fp
 800bff6:	00cb      	lsls	r3, r1, #3
 800bff8:	4651      	mov	r1, sl
 800bffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bffe:	4651      	mov	r1, sl
 800c000:	00ca      	lsls	r2, r1, #3
 800c002:	4610      	mov	r0, r2
 800c004:	4619      	mov	r1, r3
 800c006:	4603      	mov	r3, r0
 800c008:	4642      	mov	r2, r8
 800c00a:	189b      	adds	r3, r3, r2
 800c00c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c010:	464b      	mov	r3, r9
 800c012:	460a      	mov	r2, r1
 800c014:	eb42 0303 	adc.w	r3, r2, r3
 800c018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c01c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	67bb      	str	r3, [r7, #120]	; 0x78
 800c026:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c028:	f04f 0200 	mov.w	r2, #0
 800c02c:	f04f 0300 	mov.w	r3, #0
 800c030:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c034:	4649      	mov	r1, r9
 800c036:	008b      	lsls	r3, r1, #2
 800c038:	4641      	mov	r1, r8
 800c03a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c03e:	4641      	mov	r1, r8
 800c040:	008a      	lsls	r2, r1, #2
 800c042:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c046:	f7f4 fdaf 	bl	8000ba8 <__aeabi_uldivmod>
 800c04a:	4602      	mov	r2, r0
 800c04c:	460b      	mov	r3, r1
 800c04e:	4b39      	ldr	r3, [pc, #228]	; (800c134 <UART_SetConfig+0x4e4>)
 800c050:	fba3 1302 	umull	r1, r3, r3, r2
 800c054:	095b      	lsrs	r3, r3, #5
 800c056:	2164      	movs	r1, #100	; 0x64
 800c058:	fb01 f303 	mul.w	r3, r1, r3
 800c05c:	1ad3      	subs	r3, r2, r3
 800c05e:	011b      	lsls	r3, r3, #4
 800c060:	3332      	adds	r3, #50	; 0x32
 800c062:	4a34      	ldr	r2, [pc, #208]	; (800c134 <UART_SetConfig+0x4e4>)
 800c064:	fba2 2303 	umull	r2, r3, r2, r3
 800c068:	095b      	lsrs	r3, r3, #5
 800c06a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c06e:	441c      	add	r4, r3
 800c070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c074:	2200      	movs	r2, #0
 800c076:	673b      	str	r3, [r7, #112]	; 0x70
 800c078:	677a      	str	r2, [r7, #116]	; 0x74
 800c07a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c07e:	4642      	mov	r2, r8
 800c080:	464b      	mov	r3, r9
 800c082:	1891      	adds	r1, r2, r2
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	415b      	adcs	r3, r3
 800c088:	60fb      	str	r3, [r7, #12]
 800c08a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c08e:	4641      	mov	r1, r8
 800c090:	1851      	adds	r1, r2, r1
 800c092:	6039      	str	r1, [r7, #0]
 800c094:	4649      	mov	r1, r9
 800c096:	414b      	adcs	r3, r1
 800c098:	607b      	str	r3, [r7, #4]
 800c09a:	f04f 0200 	mov.w	r2, #0
 800c09e:	f04f 0300 	mov.w	r3, #0
 800c0a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c0a6:	4659      	mov	r1, fp
 800c0a8:	00cb      	lsls	r3, r1, #3
 800c0aa:	4651      	mov	r1, sl
 800c0ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c0b0:	4651      	mov	r1, sl
 800c0b2:	00ca      	lsls	r2, r1, #3
 800c0b4:	4610      	mov	r0, r2
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	4642      	mov	r2, r8
 800c0bc:	189b      	adds	r3, r3, r2
 800c0be:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0c0:	464b      	mov	r3, r9
 800c0c2:	460a      	mov	r2, r1
 800c0c4:	eb42 0303 	adc.w	r3, r2, r3
 800c0c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c0ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	663b      	str	r3, [r7, #96]	; 0x60
 800c0d4:	667a      	str	r2, [r7, #100]	; 0x64
 800c0d6:	f04f 0200 	mov.w	r2, #0
 800c0da:	f04f 0300 	mov.w	r3, #0
 800c0de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c0e2:	4649      	mov	r1, r9
 800c0e4:	008b      	lsls	r3, r1, #2
 800c0e6:	4641      	mov	r1, r8
 800c0e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c0ec:	4641      	mov	r1, r8
 800c0ee:	008a      	lsls	r2, r1, #2
 800c0f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c0f4:	f7f4 fd58 	bl	8000ba8 <__aeabi_uldivmod>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	4b0d      	ldr	r3, [pc, #52]	; (800c134 <UART_SetConfig+0x4e4>)
 800c0fe:	fba3 1302 	umull	r1, r3, r3, r2
 800c102:	095b      	lsrs	r3, r3, #5
 800c104:	2164      	movs	r1, #100	; 0x64
 800c106:	fb01 f303 	mul.w	r3, r1, r3
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	011b      	lsls	r3, r3, #4
 800c10e:	3332      	adds	r3, #50	; 0x32
 800c110:	4a08      	ldr	r2, [pc, #32]	; (800c134 <UART_SetConfig+0x4e4>)
 800c112:	fba2 2303 	umull	r2, r3, r2, r3
 800c116:	095b      	lsrs	r3, r3, #5
 800c118:	f003 020f 	and.w	r2, r3, #15
 800c11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4422      	add	r2, r4
 800c124:	609a      	str	r2, [r3, #8]
}
 800c126:	bf00      	nop
 800c128:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c12c:	46bd      	mov	sp, r7
 800c12e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c132:	bf00      	nop
 800c134:	51eb851f 	.word	0x51eb851f

0800c138 <__NVIC_SetPriority>:
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	4603      	mov	r3, r0
 800c140:	6039      	str	r1, [r7, #0]
 800c142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	db0a      	blt.n	800c162 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	b2da      	uxtb	r2, r3
 800c150:	490c      	ldr	r1, [pc, #48]	; (800c184 <__NVIC_SetPriority+0x4c>)
 800c152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c156:	0112      	lsls	r2, r2, #4
 800c158:	b2d2      	uxtb	r2, r2
 800c15a:	440b      	add	r3, r1
 800c15c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c160:	e00a      	b.n	800c178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	b2da      	uxtb	r2, r3
 800c166:	4908      	ldr	r1, [pc, #32]	; (800c188 <__NVIC_SetPriority+0x50>)
 800c168:	79fb      	ldrb	r3, [r7, #7]
 800c16a:	f003 030f 	and.w	r3, r3, #15
 800c16e:	3b04      	subs	r3, #4
 800c170:	0112      	lsls	r2, r2, #4
 800c172:	b2d2      	uxtb	r2, r2
 800c174:	440b      	add	r3, r1
 800c176:	761a      	strb	r2, [r3, #24]
}
 800c178:	bf00      	nop
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr
 800c184:	e000e100 	.word	0xe000e100
 800c188:	e000ed00 	.word	0xe000ed00

0800c18c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c18c:	b580      	push	{r7, lr}
 800c18e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c190:	4b05      	ldr	r3, [pc, #20]	; (800c1a8 <SysTick_Handler+0x1c>)
 800c192:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c194:	f002 fc1e 	bl	800e9d4 <xTaskGetSchedulerState>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d001      	beq.n	800c1a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c19e:	f003 fdc3 	bl	800fd28 <xPortSysTickHandler>
  }
}
 800c1a2:	bf00      	nop
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	e000e010 	.word	0xe000e010

0800c1ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	f06f 0004 	mvn.w	r0, #4
 800c1b6:	f7ff ffbf 	bl	800c138 <__NVIC_SetPriority>
#endif
}
 800c1ba:	bf00      	nop
 800c1bc:	bd80      	pop	{r7, pc}
	...

0800c1c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c1c0:	b480      	push	{r7}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1c6:	f3ef 8305 	mrs	r3, IPSR
 800c1ca:	603b      	str	r3, [r7, #0]
  return(result);
 800c1cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d003      	beq.n	800c1da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c1d2:	f06f 0305 	mvn.w	r3, #5
 800c1d6:	607b      	str	r3, [r7, #4]
 800c1d8:	e00c      	b.n	800c1f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c1da:	4b0a      	ldr	r3, [pc, #40]	; (800c204 <osKernelInitialize+0x44>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d105      	bne.n	800c1ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c1e2:	4b08      	ldr	r3, [pc, #32]	; (800c204 <osKernelInitialize+0x44>)
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	607b      	str	r3, [r7, #4]
 800c1ec:	e002      	b.n	800c1f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c1f4:	687b      	ldr	r3, [r7, #4]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	370c      	adds	r7, #12
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	2000114c 	.word	0x2000114c

0800c208 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c20e:	f3ef 8305 	mrs	r3, IPSR
 800c212:	603b      	str	r3, [r7, #0]
  return(result);
 800c214:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c216:	2b00      	cmp	r3, #0
 800c218:	d003      	beq.n	800c222 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c21a:	f06f 0305 	mvn.w	r3, #5
 800c21e:	607b      	str	r3, [r7, #4]
 800c220:	e010      	b.n	800c244 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c222:	4b0b      	ldr	r3, [pc, #44]	; (800c250 <osKernelStart+0x48>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	2b01      	cmp	r3, #1
 800c228:	d109      	bne.n	800c23e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c22a:	f7ff ffbf 	bl	800c1ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c22e:	4b08      	ldr	r3, [pc, #32]	; (800c250 <osKernelStart+0x48>)
 800c230:	2202      	movs	r2, #2
 800c232:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c234:	f001 ff50 	bl	800e0d8 <vTaskStartScheduler>
      stat = osOK;
 800c238:	2300      	movs	r3, #0
 800c23a:	607b      	str	r3, [r7, #4]
 800c23c:	e002      	b.n	800c244 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c23e:	f04f 33ff 	mov.w	r3, #4294967295
 800c242:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c244:	687b      	ldr	r3, [r7, #4]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3708      	adds	r7, #8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	2000114c 	.word	0x2000114c

0800c254 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c25a:	f3ef 8305 	mrs	r3, IPSR
 800c25e:	603b      	str	r3, [r7, #0]
  return(result);
 800c260:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c262:	2b00      	cmp	r3, #0
 800c264:	d003      	beq.n	800c26e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c266:	f002 f863 	bl	800e330 <xTaskGetTickCountFromISR>
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	e002      	b.n	800c274 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c26e:	f002 f84f 	bl	800e310 <xTaskGetTickCount>
 800c272:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c274:	687b      	ldr	r3, [r7, #4]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3708      	adds	r7, #8
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c27e:	b580      	push	{r7, lr}
 800c280:	b08e      	sub	sp, #56	; 0x38
 800c282:	af04      	add	r7, sp, #16
 800c284:	60f8      	str	r0, [r7, #12]
 800c286:	60b9      	str	r1, [r7, #8]
 800c288:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c28a:	2300      	movs	r3, #0
 800c28c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c28e:	f3ef 8305 	mrs	r3, IPSR
 800c292:	617b      	str	r3, [r7, #20]
  return(result);
 800c294:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c296:	2b00      	cmp	r3, #0
 800c298:	d17e      	bne.n	800c398 <osThreadNew+0x11a>
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d07b      	beq.n	800c398 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c2a0:	2380      	movs	r3, #128	; 0x80
 800c2a2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c2a4:	2318      	movs	r3, #24
 800c2a6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c2ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c2b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d045      	beq.n	800c344 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d002      	beq.n	800c2c6 <osThreadNew+0x48>
        name = attr->name;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	699b      	ldr	r3, [r3, #24]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d002      	beq.n	800c2d4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d008      	beq.n	800c2ec <osThreadNew+0x6e>
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	2b38      	cmp	r3, #56	; 0x38
 800c2de:	d805      	bhi.n	800c2ec <osThreadNew+0x6e>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	f003 0301 	and.w	r3, r3, #1
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d001      	beq.n	800c2f0 <osThreadNew+0x72>
        return (NULL);
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	e054      	b.n	800c39a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	695b      	ldr	r3, [r3, #20]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d003      	beq.n	800c300 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	695b      	ldr	r3, [r3, #20]
 800c2fc:	089b      	lsrs	r3, r3, #2
 800c2fe:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00e      	beq.n	800c326 <osThreadNew+0xa8>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	2bbb      	cmp	r3, #187	; 0xbb
 800c30e:	d90a      	bls.n	800c326 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c314:	2b00      	cmp	r3, #0
 800c316:	d006      	beq.n	800c326 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	695b      	ldr	r3, [r3, #20]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <osThreadNew+0xa8>
        mem = 1;
 800c320:	2301      	movs	r3, #1
 800c322:	61bb      	str	r3, [r7, #24]
 800c324:	e010      	b.n	800c348 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d10c      	bne.n	800c348 <osThreadNew+0xca>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d108      	bne.n	800c348 <osThreadNew+0xca>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	691b      	ldr	r3, [r3, #16]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d104      	bne.n	800c348 <osThreadNew+0xca>
          mem = 0;
 800c33e:	2300      	movs	r3, #0
 800c340:	61bb      	str	r3, [r7, #24]
 800c342:	e001      	b.n	800c348 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c344:	2300      	movs	r3, #0
 800c346:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d110      	bne.n	800c370 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c356:	9202      	str	r2, [sp, #8]
 800c358:	9301      	str	r3, [sp, #4]
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	9300      	str	r3, [sp, #0]
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	6a3a      	ldr	r2, [r7, #32]
 800c362:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c364:	68f8      	ldr	r0, [r7, #12]
 800c366:	f001 fc4d 	bl	800dc04 <xTaskCreateStatic>
 800c36a:	4603      	mov	r3, r0
 800c36c:	613b      	str	r3, [r7, #16]
 800c36e:	e013      	b.n	800c398 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d110      	bne.n	800c398 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c376:	6a3b      	ldr	r3, [r7, #32]
 800c378:	b29a      	uxth	r2, r3
 800c37a:	f107 0310 	add.w	r3, r7, #16
 800c37e:	9301      	str	r3, [sp, #4]
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f001 fc98 	bl	800dcbe <xTaskCreate>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b01      	cmp	r3, #1
 800c392:	d001      	beq.n	800c398 <osThreadNew+0x11a>
            hTask = NULL;
 800c394:	2300      	movs	r3, #0
 800c396:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c398:	693b      	ldr	r3, [r7, #16]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3728      	adds	r7, #40	; 0x28
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
	...

0800c3a4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b088      	sub	sp, #32
 800c3a8:	af02      	add	r7, sp, #8
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d002      	beq.n	800c3be <osThreadFlagsSet+0x1a>
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	da03      	bge.n	800c3c6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800c3be:	f06f 0303 	mvn.w	r3, #3
 800c3c2:	60fb      	str	r3, [r7, #12]
 800c3c4:	e035      	b.n	800c432 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800c3c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c3ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3cc:	f3ef 8305 	mrs	r3, IPSR
 800c3d0:	613b      	str	r3, [r7, #16]
  return(result);
 800c3d2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d01f      	beq.n	800c418 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800c3dc:	f107 0308 	add.w	r3, r7, #8
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	6839      	ldr	r1, [r7, #0]
 800c3e8:	6978      	ldr	r0, [r7, #20]
 800c3ea:	f002 fd9b 	bl	800ef24 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800c3ee:	f107 030c 	add.w	r3, r7, #12
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	9200      	str	r2, [sp, #0]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	6978      	ldr	r0, [r7, #20]
 800c3fc:	f002 fd92 	bl	800ef24 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d015      	beq.n	800c432 <osThreadFlagsSet+0x8e>
 800c406:	4b0d      	ldr	r3, [pc, #52]	; (800c43c <osThreadFlagsSet+0x98>)
 800c408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	f3bf 8f4f 	dsb	sy
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	e00c      	b.n	800c432 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800c418:	2300      	movs	r3, #0
 800c41a:	2201      	movs	r2, #1
 800c41c:	6839      	ldr	r1, [r7, #0]
 800c41e:	6978      	ldr	r0, [r7, #20]
 800c420:	f002 fcc2 	bl	800eda8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800c424:	f107 030c 	add.w	r3, r7, #12
 800c428:	2200      	movs	r2, #0
 800c42a:	2100      	movs	r1, #0
 800c42c:	6978      	ldr	r0, [r7, #20]
 800c42e:	f002 fcbb 	bl	800eda8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800c432:	68fb      	ldr	r3, [r7, #12]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3718      	adds	r7, #24
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	e000ed04 	.word	0xe000ed04

0800c440 <osThreadFlagsGet>:

  /* Return flags before clearing */
  return (rflags);
}

uint32_t osThreadFlagsGet (void) {
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c446:	f3ef 8305 	mrs	r3, IPSR
 800c44a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c44c:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d003      	beq.n	800c45a <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 800c452:	f06f 0305 	mvn.w	r3, #5
 800c456:	607b      	str	r3, [r7, #4]
 800c458:	e00e      	b.n	800c478 <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800c45a:	f002 faab 	bl	800e9b4 <xTaskGetCurrentTaskHandle>
 800c45e:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 800c460:	1d3b      	adds	r3, r7, #4
 800c462:	2200      	movs	r2, #0
 800c464:	2100      	movs	r1, #0
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f002 fc9e 	bl	800eda8 <xTaskGenericNotify>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d002      	beq.n	800c478 <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 800c472:	f04f 33ff 	mov.w	r3, #4294967295
 800c476:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 800c478:	687b      	ldr	r3, [r7, #4]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800c482:	b580      	push	{r7, lr}
 800c484:	b08c      	sub	sp, #48	; 0x30
 800c486:	af00      	add	r7, sp, #0
 800c488:	60f8      	str	r0, [r7, #12]
 800c48a:	60b9      	str	r1, [r7, #8]
 800c48c:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c48e:	f3ef 8305 	mrs	r3, IPSR
 800c492:	617b      	str	r3, [r7, #20]
  return(result);
 800c494:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800c496:	2b00      	cmp	r3, #0
 800c498:	d003      	beq.n	800c4a2 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800c49a:	f06f 0305 	mvn.w	r3, #5
 800c49e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4a0:	e06b      	b.n	800c57a <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	da03      	bge.n	800c4b0 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800c4a8:	f06f 0303 	mvn.w	r3, #3
 800c4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4ae:	e064      	b.n	800c57a <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	f003 0302 	and.w	r3, r3, #2
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d002      	beq.n	800c4c0 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4be:	e001      	b.n	800c4c4 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800c4cc:	f001 ff20 	bl	800e310 <xTaskGetTickCount>
 800c4d0:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800c4d2:	f107 0210 	add.w	r2, r7, #16
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4da:	2000      	movs	r0, #0
 800c4dc:	f002 fc04 	bl	800ece8 <xTaskNotifyWait>
 800c4e0:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d137      	bne.n	800c558 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800c4e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	4013      	ands	r3, r2
 800c4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	f003 0301 	and.w	r3, r3, #1
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d00c      	beq.n	800c51c <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800c502:	68fa      	ldr	r2, [r7, #12]
 800c504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c506:	4013      	ands	r3, r2
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d032      	beq.n	800c574 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d10f      	bne.n	800c534 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800c514:	f06f 0302 	mvn.w	r3, #2
 800c518:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800c51a:	e02e      	b.n	800c57a <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c520:	4013      	ands	r3, r2
 800c522:	2b00      	cmp	r3, #0
 800c524:	d128      	bne.n	800c578 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d103      	bne.n	800c534 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800c52c:	f06f 0302 	mvn.w	r3, #2
 800c530:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800c532:	e022      	b.n	800c57a <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800c534:	f001 feec 	bl	800e310 <xTaskGetTickCount>
 800c538:	4602      	mov	r2, r0
 800c53a:	6a3b      	ldr	r3, [r7, #32]
 800c53c:	1ad3      	subs	r3, r2, r3
 800c53e:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800c540:	69ba      	ldr	r2, [r7, #24]
 800c542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c544:	429a      	cmp	r2, r3
 800c546:	d902      	bls.n	800c54e <osThreadFlagsWait+0xcc>
          tout  = 0;
 800c548:	2300      	movs	r3, #0
 800c54a:	627b      	str	r3, [r7, #36]	; 0x24
 800c54c:	e00e      	b.n	800c56c <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800c54e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	1ad3      	subs	r3, r2, r3
 800c554:	627b      	str	r3, [r7, #36]	; 0x24
 800c556:	e009      	b.n	800c56c <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d103      	bne.n	800c566 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800c55e:	f06f 0302 	mvn.w	r3, #2
 800c562:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c564:	e002      	b.n	800c56c <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800c566:	f06f 0301 	mvn.w	r3, #1
 800c56a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1af      	bne.n	800c4d2 <osThreadFlagsWait+0x50>
 800c572:	e002      	b.n	800c57a <osThreadFlagsWait+0xf8>
            break;
 800c574:	bf00      	nop
 800c576:	e000      	b.n	800c57a <osThreadFlagsWait+0xf8>
            break;
 800c578:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800c57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3730      	adds	r7, #48	; 0x30
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c58c:	f3ef 8305 	mrs	r3, IPSR
 800c590:	60bb      	str	r3, [r7, #8]
  return(result);
 800c592:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c594:	2b00      	cmp	r3, #0
 800c596:	d003      	beq.n	800c5a0 <osDelay+0x1c>
    stat = osErrorISR;
 800c598:	f06f 0305 	mvn.w	r3, #5
 800c59c:	60fb      	str	r3, [r7, #12]
 800c59e:	e007      	b.n	800c5b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d002      	beq.n	800c5b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f001 fd60 	bl	800e070 <vTaskDelay>
    }
  }

  return (stat);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3710      	adds	r7, #16
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b086      	sub	sp, #24
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5c2:	f3ef 8305 	mrs	r3, IPSR
 800c5c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d003      	beq.n	800c5d6 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800c5ce:	f06f 0305 	mvn.w	r3, #5
 800c5d2:	617b      	str	r3, [r7, #20]
 800c5d4:	e019      	b.n	800c60a <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800c5da:	f001 fe99 	bl	800e310 <xTaskGetTickCount>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	1ad3      	subs	r3, r2, r3
 800c5e8:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d009      	beq.n	800c604 <osDelayUntil+0x4a>
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	db06      	blt.n	800c604 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800c5f6:	f107 0308 	add.w	r3, r7, #8
 800c5fa:	6939      	ldr	r1, [r7, #16]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f001 fcb9 	bl	800df74 <vTaskDelayUntil>
 800c602:	e002      	b.n	800c60a <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800c604:	f06f 0303 	mvn.w	r3, #3
 800c608:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c60a:	697b      	ldr	r3, [r7, #20]
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3718      	adds	r7, #24
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f003 f9a1 	bl	800f964 <pvTimerGetTimerID>
 800c622:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d005      	beq.n	800c636 <TimerCallback+0x22>
    callb->func (callb->arg);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	68fa      	ldr	r2, [r7, #12]
 800c630:	6852      	ldr	r2, [r2, #4]
 800c632:	4610      	mov	r0, r2
 800c634:	4798      	blx	r3
  }
}
 800c636:	bf00      	nop
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
	...

0800c640 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800c640:	b580      	push	{r7, lr}
 800c642:	b08c      	sub	sp, #48	; 0x30
 800c644:	af02      	add	r7, sp, #8
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	607a      	str	r2, [r7, #4]
 800c64a:	603b      	str	r3, [r7, #0]
 800c64c:	460b      	mov	r3, r1
 800c64e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800c650:	2300      	movs	r3, #0
 800c652:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c654:	f3ef 8305 	mrs	r3, IPSR
 800c658:	613b      	str	r3, [r7, #16]
  return(result);
 800c65a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d163      	bne.n	800c728 <osTimerNew+0xe8>
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d060      	beq.n	800c728 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800c666:	2008      	movs	r0, #8
 800c668:	f003 fbee 	bl	800fe48 <pvPortMalloc>
 800c66c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d059      	beq.n	800c728 <osTimerNew+0xe8>
      callb->func = func;
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800c680:	7afb      	ldrb	r3, [r7, #11]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d102      	bne.n	800c68c <osTimerNew+0x4c>
        reload = pdFALSE;
 800c686:	2300      	movs	r3, #0
 800c688:	61fb      	str	r3, [r7, #28]
 800c68a:	e001      	b.n	800c690 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800c68c:	2301      	movs	r3, #1
 800c68e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800c690:	f04f 33ff 	mov.w	r3, #4294967295
 800c694:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800c696:	2300      	movs	r3, #0
 800c698:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d01c      	beq.n	800c6da <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d002      	beq.n	800c6ae <osTimerNew+0x6e>
          name = attr->name;
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	689b      	ldr	r3, [r3, #8]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d006      	beq.n	800c6c4 <osTimerNew+0x84>
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	2b2b      	cmp	r3, #43	; 0x2b
 800c6bc:	d902      	bls.n	800c6c4 <osTimerNew+0x84>
          mem = 1;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	61bb      	str	r3, [r7, #24]
 800c6c2:	e00c      	b.n	800c6de <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d108      	bne.n	800c6de <osTimerNew+0x9e>
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d104      	bne.n	800c6de <osTimerNew+0x9e>
            mem = 0;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	61bb      	str	r3, [r7, #24]
 800c6d8:	e001      	b.n	800c6de <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d10c      	bne.n	800c6fe <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	9301      	str	r3, [sp, #4]
 800c6ea:	4b12      	ldr	r3, [pc, #72]	; (800c734 <osTimerNew+0xf4>)
 800c6ec:	9300      	str	r3, [sp, #0]
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	69fa      	ldr	r2, [r7, #28]
 800c6f2:	2101      	movs	r1, #1
 800c6f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6f6:	f002 fdb6 	bl	800f266 <xTimerCreateStatic>
 800c6fa:	6238      	str	r0, [r7, #32]
 800c6fc:	e00b      	b.n	800c716 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d108      	bne.n	800c716 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800c704:	4b0b      	ldr	r3, [pc, #44]	; (800c734 <osTimerNew+0xf4>)
 800c706:	9300      	str	r3, [sp, #0]
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	69fa      	ldr	r2, [r7, #28]
 800c70c:	2101      	movs	r1, #1
 800c70e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c710:	f002 fd88 	bl	800f224 <xTimerCreate>
 800c714:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800c716:	6a3b      	ldr	r3, [r7, #32]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d105      	bne.n	800c728 <osTimerNew+0xe8>
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d002      	beq.n	800c728 <osTimerNew+0xe8>
        vPortFree (callb);
 800c722:	6978      	ldr	r0, [r7, #20]
 800c724:	f003 fc5c 	bl	800ffe0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800c728:	6a3b      	ldr	r3, [r7, #32]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3728      	adds	r7, #40	; 0x28
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	0800c615 	.word	0x0800c615

0800c738 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800c738:	b580      	push	{r7, lr}
 800c73a:	b088      	sub	sp, #32
 800c73c:	af02      	add	r7, sp, #8
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c746:	f3ef 8305 	mrs	r3, IPSR
 800c74a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c74c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d003      	beq.n	800c75a <osTimerStart+0x22>
    stat = osErrorISR;
 800c752:	f06f 0305 	mvn.w	r3, #5
 800c756:	617b      	str	r3, [r7, #20]
 800c758:	e017      	b.n	800c78a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d103      	bne.n	800c768 <osTimerStart+0x30>
    stat = osErrorParameter;
 800c760:	f06f 0303 	mvn.w	r3, #3
 800c764:	617b      	str	r3, [r7, #20]
 800c766:	e010      	b.n	800c78a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800c768:	2300      	movs	r3, #0
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	2300      	movs	r3, #0
 800c76e:	683a      	ldr	r2, [r7, #0]
 800c770:	2104      	movs	r1, #4
 800c772:	6938      	ldr	r0, [r7, #16]
 800c774:	f002 fdf0 	bl	800f358 <xTimerGenericCommand>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d102      	bne.n	800c784 <osTimerStart+0x4c>
      stat = osOK;
 800c77e:	2300      	movs	r3, #0
 800c780:	617b      	str	r3, [r7, #20]
 800c782:	e002      	b.n	800c78a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800c784:	f06f 0302 	mvn.w	r3, #2
 800c788:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c78a:	697b      	ldr	r3, [r7, #20]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3718      	adds	r7, #24
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c794:	b580      	push	{r7, lr}
 800c796:	b088      	sub	sp, #32
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c79c:	2300      	movs	r3, #0
 800c79e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7a0:	f3ef 8305 	mrs	r3, IPSR
 800c7a4:	60bb      	str	r3, [r7, #8]
  return(result);
 800c7a6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d174      	bne.n	800c896 <osMutexNew+0x102>
    if (attr != NULL) {
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d003      	beq.n	800c7ba <osMutexNew+0x26>
      type = attr->attr_bits;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	61bb      	str	r3, [r7, #24]
 800c7b8:	e001      	b.n	800c7be <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	f003 0301 	and.w	r3, r3, #1
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d002      	beq.n	800c7ce <osMutexNew+0x3a>
      rmtx = 1U;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	617b      	str	r3, [r7, #20]
 800c7cc:	e001      	b.n	800c7d2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	f003 0308 	and.w	r3, r3, #8
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d15c      	bne.n	800c896 <osMutexNew+0x102>
      mem = -1;
 800c7dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c7e0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d015      	beq.n	800c814 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d006      	beq.n	800c7fe <osMutexNew+0x6a>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	2b4f      	cmp	r3, #79	; 0x4f
 800c7f6:	d902      	bls.n	800c7fe <osMutexNew+0x6a>
          mem = 1;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	613b      	str	r3, [r7, #16]
 800c7fc:	e00c      	b.n	800c818 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d108      	bne.n	800c818 <osMutexNew+0x84>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d104      	bne.n	800c818 <osMutexNew+0x84>
            mem = 0;
 800c80e:	2300      	movs	r3, #0
 800c810:	613b      	str	r3, [r7, #16]
 800c812:	e001      	b.n	800c818 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c814:	2300      	movs	r3, #0
 800c816:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d112      	bne.n	800c844 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d007      	beq.n	800c834 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	4619      	mov	r1, r3
 800c82a:	2004      	movs	r0, #4
 800c82c:	f000 fba1 	bl	800cf72 <xQueueCreateMutexStatic>
 800c830:	61f8      	str	r0, [r7, #28]
 800c832:	e016      	b.n	800c862 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	4619      	mov	r1, r3
 800c83a:	2001      	movs	r0, #1
 800c83c:	f000 fb99 	bl	800cf72 <xQueueCreateMutexStatic>
 800c840:	61f8      	str	r0, [r7, #28]
 800c842:	e00e      	b.n	800c862 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d10b      	bne.n	800c862 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d004      	beq.n	800c85a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c850:	2004      	movs	r0, #4
 800c852:	f000 fb76 	bl	800cf42 <xQueueCreateMutex>
 800c856:	61f8      	str	r0, [r7, #28]
 800c858:	e003      	b.n	800c862 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c85a:	2001      	movs	r0, #1
 800c85c:	f000 fb71 	bl	800cf42 <xQueueCreateMutex>
 800c860:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d00c      	beq.n	800c882 <osMutexNew+0xee>
        if (attr != NULL) {
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d003      	beq.n	800c876 <osMutexNew+0xe2>
          name = attr->name;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	60fb      	str	r3, [r7, #12]
 800c874:	e001      	b.n	800c87a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c876:	2300      	movs	r3, #0
 800c878:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c87a:	68f9      	ldr	r1, [r7, #12]
 800c87c:	69f8      	ldr	r0, [r7, #28]
 800c87e:	f001 f939 	bl	800daf4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d006      	beq.n	800c896 <osMutexNew+0x102>
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d003      	beq.n	800c896 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	f043 0301 	orr.w	r3, r3, #1
 800c894:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c896:	69fb      	ldr	r3, [r7, #28]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3720      	adds	r7, #32
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b086      	sub	sp, #24
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f023 0301 	bic.w	r3, r3, #1
 800c8b0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f003 0301 	and.w	r3, r3, #1
 800c8b8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8be:	f3ef 8305 	mrs	r3, IPSR
 800c8c2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c8c4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d003      	beq.n	800c8d2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c8ca:	f06f 0305 	mvn.w	r3, #5
 800c8ce:	617b      	str	r3, [r7, #20]
 800c8d0:	e02c      	b.n	800c92c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d103      	bne.n	800c8e0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c8d8:	f06f 0303 	mvn.w	r3, #3
 800c8dc:	617b      	str	r3, [r7, #20]
 800c8de:	e025      	b.n	800c92c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d011      	beq.n	800c90a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c8e6:	6839      	ldr	r1, [r7, #0]
 800c8e8:	6938      	ldr	r0, [r7, #16]
 800c8ea:	f000 fb91 	bl	800d010 <xQueueTakeMutexRecursive>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d01b      	beq.n	800c92c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d003      	beq.n	800c902 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c8fa:	f06f 0301 	mvn.w	r3, #1
 800c8fe:	617b      	str	r3, [r7, #20]
 800c900:	e014      	b.n	800c92c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c902:	f06f 0302 	mvn.w	r3, #2
 800c906:	617b      	str	r3, [r7, #20]
 800c908:	e010      	b.n	800c92c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c90a:	6839      	ldr	r1, [r7, #0]
 800c90c:	6938      	ldr	r0, [r7, #16]
 800c90e:	f000 fe99 	bl	800d644 <xQueueSemaphoreTake>
 800c912:	4603      	mov	r3, r0
 800c914:	2b01      	cmp	r3, #1
 800c916:	d009      	beq.n	800c92c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d003      	beq.n	800c926 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c91e:	f06f 0301 	mvn.w	r3, #1
 800c922:	617b      	str	r3, [r7, #20]
 800c924:	e002      	b.n	800c92c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c926:	f06f 0302 	mvn.w	r3, #2
 800c92a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c92c:	697b      	ldr	r3, [r7, #20]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3718      	adds	r7, #24
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c936:	b580      	push	{r7, lr}
 800c938:	b086      	sub	sp, #24
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f023 0301 	bic.w	r3, r3, #1
 800c944:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f003 0301 	and.w	r3, r3, #1
 800c94c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c94e:	2300      	movs	r3, #0
 800c950:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c952:	f3ef 8305 	mrs	r3, IPSR
 800c956:	60bb      	str	r3, [r7, #8]
  return(result);
 800c958:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d003      	beq.n	800c966 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c95e:	f06f 0305 	mvn.w	r3, #5
 800c962:	617b      	str	r3, [r7, #20]
 800c964:	e01f      	b.n	800c9a6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d103      	bne.n	800c974 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c96c:	f06f 0303 	mvn.w	r3, #3
 800c970:	617b      	str	r3, [r7, #20]
 800c972:	e018      	b.n	800c9a6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d009      	beq.n	800c98e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c97a:	6938      	ldr	r0, [r7, #16]
 800c97c:	f000 fb14 	bl	800cfa8 <xQueueGiveMutexRecursive>
 800c980:	4603      	mov	r3, r0
 800c982:	2b01      	cmp	r3, #1
 800c984:	d00f      	beq.n	800c9a6 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c986:	f06f 0302 	mvn.w	r3, #2
 800c98a:	617b      	str	r3, [r7, #20]
 800c98c:	e00b      	b.n	800c9a6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c98e:	2300      	movs	r3, #0
 800c990:	2200      	movs	r2, #0
 800c992:	2100      	movs	r1, #0
 800c994:	6938      	ldr	r0, [r7, #16]
 800c996:	f000 fbdb 	bl	800d150 <xQueueGenericSend>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d002      	beq.n	800c9a6 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c9a0:	f06f 0302 	mvn.w	r3, #2
 800c9a4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c9a6:	697b      	ldr	r3, [r7, #20]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3718      	adds	r7, #24
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b08a      	sub	sp, #40	; 0x28
 800c9b4:	af02      	add	r7, sp, #8
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9c0:	f3ef 8305 	mrs	r3, IPSR
 800c9c4:	613b      	str	r3, [r7, #16]
  return(result);
 800c9c6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d175      	bne.n	800cab8 <osSemaphoreNew+0x108>
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d072      	beq.n	800cab8 <osSemaphoreNew+0x108>
 800c9d2:	68ba      	ldr	r2, [r7, #8]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d86e      	bhi.n	800cab8 <osSemaphoreNew+0x108>
    mem = -1;
 800c9da:	f04f 33ff 	mov.w	r3, #4294967295
 800c9de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d015      	beq.n	800ca12 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d006      	beq.n	800c9fc <osSemaphoreNew+0x4c>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	2b4f      	cmp	r3, #79	; 0x4f
 800c9f4:	d902      	bls.n	800c9fc <osSemaphoreNew+0x4c>
        mem = 1;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	61bb      	str	r3, [r7, #24]
 800c9fa:	e00c      	b.n	800ca16 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d108      	bne.n	800ca16 <osSemaphoreNew+0x66>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d104      	bne.n	800ca16 <osSemaphoreNew+0x66>
          mem = 0;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	61bb      	str	r3, [r7, #24]
 800ca10:	e001      	b.n	800ca16 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ca12:	2300      	movs	r3, #0
 800ca14:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ca16:	69bb      	ldr	r3, [r7, #24]
 800ca18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca1c:	d04c      	beq.n	800cab8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d128      	bne.n	800ca76 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d10a      	bne.n	800ca40 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	689b      	ldr	r3, [r3, #8]
 800ca2e:	2203      	movs	r2, #3
 800ca30:	9200      	str	r2, [sp, #0]
 800ca32:	2200      	movs	r2, #0
 800ca34:	2100      	movs	r1, #0
 800ca36:	2001      	movs	r0, #1
 800ca38:	f000 f994 	bl	800cd64 <xQueueGenericCreateStatic>
 800ca3c:	61f8      	str	r0, [r7, #28]
 800ca3e:	e005      	b.n	800ca4c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ca40:	2203      	movs	r2, #3
 800ca42:	2100      	movs	r1, #0
 800ca44:	2001      	movs	r0, #1
 800ca46:	f000 fa05 	bl	800ce54 <xQueueGenericCreate>
 800ca4a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d022      	beq.n	800ca98 <osSemaphoreNew+0xe8>
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d01f      	beq.n	800ca98 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ca58:	2300      	movs	r3, #0
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	69f8      	ldr	r0, [r7, #28]
 800ca60:	f000 fb76 	bl	800d150 <xQueueGenericSend>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d016      	beq.n	800ca98 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ca6a:	69f8      	ldr	r0, [r7, #28]
 800ca6c:	f000 fef6 	bl	800d85c <vQueueDelete>
            hSemaphore = NULL;
 800ca70:	2300      	movs	r3, #0
 800ca72:	61fb      	str	r3, [r7, #28]
 800ca74:	e010      	b.n	800ca98 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d108      	bne.n	800ca8e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	461a      	mov	r2, r3
 800ca82:	68b9      	ldr	r1, [r7, #8]
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	f000 faf9 	bl	800d07c <xQueueCreateCountingSemaphoreStatic>
 800ca8a:	61f8      	str	r0, [r7, #28]
 800ca8c:	e004      	b.n	800ca98 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ca8e:	68b9      	ldr	r1, [r7, #8]
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f000 fb2a 	bl	800d0ea <xQueueCreateCountingSemaphore>
 800ca96:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00c      	beq.n	800cab8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d003      	beq.n	800caac <osSemaphoreNew+0xfc>
          name = attr->name;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	617b      	str	r3, [r7, #20]
 800caaa:	e001      	b.n	800cab0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800caac:	2300      	movs	r3, #0
 800caae:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800cab0:	6979      	ldr	r1, [r7, #20]
 800cab2:	69f8      	ldr	r0, [r7, #28]
 800cab4:	f001 f81e 	bl	800daf4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800cab8:	69fb      	ldr	r3, [r7, #28]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3720      	adds	r7, #32
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
	...

0800cac4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	4a07      	ldr	r2, [pc, #28]	; (800caf0 <vApplicationGetIdleTaskMemory+0x2c>)
 800cad4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	4a06      	ldr	r2, [pc, #24]	; (800caf4 <vApplicationGetIdleTaskMemory+0x30>)
 800cada:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2280      	movs	r2, #128	; 0x80
 800cae0:	601a      	str	r2, [r3, #0]
}
 800cae2:	bf00      	nop
 800cae4:	3714      	adds	r7, #20
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	20001150 	.word	0x20001150
 800caf4:	2000120c 	.word	0x2000120c

0800caf8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800caf8:	b480      	push	{r7}
 800cafa:	b085      	sub	sp, #20
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	4a07      	ldr	r2, [pc, #28]	; (800cb24 <vApplicationGetTimerTaskMemory+0x2c>)
 800cb08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	4a06      	ldr	r2, [pc, #24]	; (800cb28 <vApplicationGetTimerTaskMemory+0x30>)
 800cb0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb16:	601a      	str	r2, [r3, #0]
}
 800cb18:	bf00      	nop
 800cb1a:	3714      	adds	r7, #20
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr
 800cb24:	2000140c 	.word	0x2000140c
 800cb28:	200014c8 	.word	0x200014c8

0800cb2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f103 0208 	add.w	r2, r3, #8
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f04f 32ff 	mov.w	r2, #4294967295
 800cb44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f103 0208 	add.w	r2, r3, #8
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f103 0208 	add.w	r2, r3, #8
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cb60:	bf00      	nop
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cb7a:	bf00      	nop
 800cb7c:	370c      	adds	r7, #12
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr

0800cb86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb86:	b480      	push	{r7}
 800cb88:	b085      	sub	sp, #20
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
 800cb8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	689a      	ldr	r2, [r3, #8]
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	683a      	ldr	r2, [r7, #0]
 800cbaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	683a      	ldr	r2, [r7, #0]
 800cbb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	1c5a      	adds	r2, r3, #1
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	601a      	str	r2, [r3, #0]
}
 800cbc2:	bf00      	nop
 800cbc4:	3714      	adds	r7, #20
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr

0800cbce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cbce:	b480      	push	{r7}
 800cbd0:	b085      	sub	sp, #20
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe4:	d103      	bne.n	800cbee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	691b      	ldr	r3, [r3, #16]
 800cbea:	60fb      	str	r3, [r7, #12]
 800cbec:	e00c      	b.n	800cc08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	3308      	adds	r3, #8
 800cbf2:	60fb      	str	r3, [r7, #12]
 800cbf4:	e002      	b.n	800cbfc <vListInsert+0x2e>
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	60fb      	str	r3, [r7, #12]
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	68ba      	ldr	r2, [r7, #8]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d2f6      	bcs.n	800cbf6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	685a      	ldr	r2, [r3, #4]
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	683a      	ldr	r2, [r7, #0]
 800cc16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	683a      	ldr	r2, [r7, #0]
 800cc22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	1c5a      	adds	r2, r3, #1
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	601a      	str	r2, [r3, #0]
}
 800cc34:	bf00      	nop
 800cc36:	3714      	adds	r7, #20
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	691b      	ldr	r3, [r3, #16]
 800cc4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	6892      	ldr	r2, [r2, #8]
 800cc56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	689b      	ldr	r3, [r3, #8]
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	6852      	ldr	r2, [r2, #4]
 800cc60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d103      	bne.n	800cc74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	689a      	ldr	r2, [r3, #8]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	1e5a      	subs	r2, r3, #1
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3714      	adds	r7, #20
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d10a      	bne.n	800ccbe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccac:	f383 8811 	msr	BASEPRI, r3
 800ccb0:	f3bf 8f6f 	isb	sy
 800ccb4:	f3bf 8f4f 	dsb	sy
 800ccb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ccba:	bf00      	nop
 800ccbc:	e7fe      	b.n	800ccbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ccbe:	f002 ffa1 	bl	800fc04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccca:	68f9      	ldr	r1, [r7, #12]
 800cccc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ccce:	fb01 f303 	mul.w	r3, r1, r3
 800ccd2:	441a      	add	r2, r3
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccee:	3b01      	subs	r3, #1
 800ccf0:	68f9      	ldr	r1, [r7, #12]
 800ccf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ccf4:	fb01 f303 	mul.w	r3, r1, r3
 800ccf8:	441a      	add	r2, r3
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	22ff      	movs	r2, #255	; 0xff
 800cd02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	22ff      	movs	r2, #255	; 0xff
 800cd0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d114      	bne.n	800cd3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	691b      	ldr	r3, [r3, #16]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d01a      	beq.n	800cd52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	3310      	adds	r3, #16
 800cd20:	4618      	mov	r0, r3
 800cd22:	f001 fc85 	bl	800e630 <xTaskRemoveFromEventList>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d012      	beq.n	800cd52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cd2c:	4b0c      	ldr	r3, [pc, #48]	; (800cd60 <xQueueGenericReset+0xcc>)
 800cd2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd32:	601a      	str	r2, [r3, #0]
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	f3bf 8f6f 	isb	sy
 800cd3c:	e009      	b.n	800cd52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	3310      	adds	r3, #16
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7ff fef2 	bl	800cb2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	3324      	adds	r3, #36	; 0x24
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7ff feed 	bl	800cb2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cd52:	f002 ff87 	bl	800fc64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cd56:	2301      	movs	r3, #1
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3710      	adds	r7, #16
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	e000ed04 	.word	0xe000ed04

0800cd64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b08e      	sub	sp, #56	; 0x38
 800cd68:	af02      	add	r7, sp, #8
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	607a      	str	r2, [r7, #4]
 800cd70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d10a      	bne.n	800cd8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7c:	f383 8811 	msr	BASEPRI, r3
 800cd80:	f3bf 8f6f 	isb	sy
 800cd84:	f3bf 8f4f 	dsb	sy
 800cd88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd8a:	bf00      	nop
 800cd8c:	e7fe      	b.n	800cd8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d10a      	bne.n	800cdaa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd98:	f383 8811 	msr	BASEPRI, r3
 800cd9c:	f3bf 8f6f 	isb	sy
 800cda0:	f3bf 8f4f 	dsb	sy
 800cda4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cda6:	bf00      	nop
 800cda8:	e7fe      	b.n	800cda8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d002      	beq.n	800cdb6 <xQueueGenericCreateStatic+0x52>
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d001      	beq.n	800cdba <xQueueGenericCreateStatic+0x56>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e000      	b.n	800cdbc <xQueueGenericCreateStatic+0x58>
 800cdba:	2300      	movs	r3, #0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d10a      	bne.n	800cdd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc4:	f383 8811 	msr	BASEPRI, r3
 800cdc8:	f3bf 8f6f 	isb	sy
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	623b      	str	r3, [r7, #32]
}
 800cdd2:	bf00      	nop
 800cdd4:	e7fe      	b.n	800cdd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d102      	bne.n	800cde2 <xQueueGenericCreateStatic+0x7e>
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d101      	bne.n	800cde6 <xQueueGenericCreateStatic+0x82>
 800cde2:	2301      	movs	r3, #1
 800cde4:	e000      	b.n	800cde8 <xQueueGenericCreateStatic+0x84>
 800cde6:	2300      	movs	r3, #0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10a      	bne.n	800ce02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf0:	f383 8811 	msr	BASEPRI, r3
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	61fb      	str	r3, [r7, #28]
}
 800cdfe:	bf00      	nop
 800ce00:	e7fe      	b.n	800ce00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ce02:	2350      	movs	r3, #80	; 0x50
 800ce04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	2b50      	cmp	r3, #80	; 0x50
 800ce0a:	d00a      	beq.n	800ce22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ce0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce10:	f383 8811 	msr	BASEPRI, r3
 800ce14:	f3bf 8f6f 	isb	sy
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	61bb      	str	r3, [r7, #24]
}
 800ce1e:	bf00      	nop
 800ce20:	e7fe      	b.n	800ce20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ce22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ce28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00d      	beq.n	800ce4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ce2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce30:	2201      	movs	r2, #1
 800ce32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ce3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3c:	9300      	str	r3, [sp, #0]
 800ce3e:	4613      	mov	r3, r2
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	68b9      	ldr	r1, [r7, #8]
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	f000 f83f 	bl	800cec8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3730      	adds	r7, #48	; 0x30
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b08a      	sub	sp, #40	; 0x28
 800ce58:	af02      	add	r7, sp, #8
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	4613      	mov	r3, r2
 800ce60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10a      	bne.n	800ce7e <xQueueGenericCreate+0x2a>
	__asm volatile
 800ce68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6c:	f383 8811 	msr	BASEPRI, r3
 800ce70:	f3bf 8f6f 	isb	sy
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	613b      	str	r3, [r7, #16]
}
 800ce7a:	bf00      	nop
 800ce7c:	e7fe      	b.n	800ce7c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	fb02 f303 	mul.w	r3, r2, r3
 800ce86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	3350      	adds	r3, #80	; 0x50
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f002 ffdb 	bl	800fe48 <pvPortMalloc>
 800ce92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d011      	beq.n	800cebe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	3350      	adds	r3, #80	; 0x50
 800cea2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ceac:	79fa      	ldrb	r2, [r7, #7]
 800ceae:	69bb      	ldr	r3, [r7, #24]
 800ceb0:	9300      	str	r3, [sp, #0]
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	697a      	ldr	r2, [r7, #20]
 800ceb6:	68b9      	ldr	r1, [r7, #8]
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	f000 f805 	bl	800cec8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cebe:	69bb      	ldr	r3, [r7, #24]
	}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3720      	adds	r7, #32
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	607a      	str	r2, [r7, #4]
 800ced4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d103      	bne.n	800cee4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	69ba      	ldr	r2, [r7, #24]
 800cee0:	601a      	str	r2, [r3, #0]
 800cee2:	e002      	b.n	800ceea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	68ba      	ldr	r2, [r7, #8]
 800cef4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cef6:	2101      	movs	r1, #1
 800cef8:	69b8      	ldr	r0, [r7, #24]
 800cefa:	f7ff fecb 	bl	800cc94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	78fa      	ldrb	r2, [r7, #3]
 800cf02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cf06:	bf00      	nop
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b082      	sub	sp, #8
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d00e      	beq.n	800cf3a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cf2e:	2300      	movs	r3, #0
 800cf30:	2200      	movs	r2, #0
 800cf32:	2100      	movs	r1, #0
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 f90b 	bl	800d150 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cf3a:	bf00      	nop
 800cf3c:	3708      	adds	r7, #8
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}

0800cf42 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cf42:	b580      	push	{r7, lr}
 800cf44:	b086      	sub	sp, #24
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	4603      	mov	r3, r0
 800cf4a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	617b      	str	r3, [r7, #20]
 800cf50:	2300      	movs	r3, #0
 800cf52:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cf54:	79fb      	ldrb	r3, [r7, #7]
 800cf56:	461a      	mov	r2, r3
 800cf58:	6939      	ldr	r1, [r7, #16]
 800cf5a:	6978      	ldr	r0, [r7, #20]
 800cf5c:	f7ff ff7a 	bl	800ce54 <xQueueGenericCreate>
 800cf60:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cf62:	68f8      	ldr	r0, [r7, #12]
 800cf64:	f7ff ffd3 	bl	800cf0e <prvInitialiseMutex>

		return xNewQueue;
 800cf68:	68fb      	ldr	r3, [r7, #12]
	}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3718      	adds	r7, #24
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b088      	sub	sp, #32
 800cf76:	af02      	add	r7, sp, #8
 800cf78:	4603      	mov	r3, r0
 800cf7a:	6039      	str	r1, [r7, #0]
 800cf7c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	617b      	str	r3, [r7, #20]
 800cf82:	2300      	movs	r3, #0
 800cf84:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cf86:	79fb      	ldrb	r3, [r7, #7]
 800cf88:	9300      	str	r3, [sp, #0]
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	6939      	ldr	r1, [r7, #16]
 800cf90:	6978      	ldr	r0, [r7, #20]
 800cf92:	f7ff fee7 	bl	800cd64 <xQueueGenericCreateStatic>
 800cf96:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cf98:	68f8      	ldr	r0, [r7, #12]
 800cf9a:	f7ff ffb8 	bl	800cf0e <prvInitialiseMutex>

		return xNewQueue;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
	}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3718      	adds	r7, #24
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800cfa8:	b590      	push	{r4, r7, lr}
 800cfaa:	b087      	sub	sp, #28
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d10a      	bne.n	800cfd0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800cfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfbe:	f383 8811 	msr	BASEPRI, r3
 800cfc2:	f3bf 8f6f 	isb	sy
 800cfc6:	f3bf 8f4f 	dsb	sy
 800cfca:	60fb      	str	r3, [r7, #12]
}
 800cfcc:	bf00      	nop
 800cfce:	e7fe      	b.n	800cfce <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	689c      	ldr	r4, [r3, #8]
 800cfd4:	f001 fcee 	bl	800e9b4 <xTaskGetCurrentTaskHandle>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	429c      	cmp	r4, r3
 800cfdc:	d111      	bne.n	800d002 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	1e5a      	subs	r2, r3, #1
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	68db      	ldr	r3, [r3, #12]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d105      	bne.n	800cffc <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cff0:	2300      	movs	r3, #0
 800cff2:	2200      	movs	r2, #0
 800cff4:	2100      	movs	r1, #0
 800cff6:	6938      	ldr	r0, [r7, #16]
 800cff8:	f000 f8aa 	bl	800d150 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cffc:	2301      	movs	r3, #1
 800cffe:	617b      	str	r3, [r7, #20]
 800d000:	e001      	b.n	800d006 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d002:	2300      	movs	r3, #0
 800d004:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d006:	697b      	ldr	r3, [r7, #20]
	}
 800d008:	4618      	mov	r0, r3
 800d00a:	371c      	adds	r7, #28
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd90      	pop	{r4, r7, pc}

0800d010 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d010:	b590      	push	{r4, r7, lr}
 800d012:	b087      	sub	sp, #28
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10a      	bne.n	800d03a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800d024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d028:	f383 8811 	msr	BASEPRI, r3
 800d02c:	f3bf 8f6f 	isb	sy
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	60fb      	str	r3, [r7, #12]
}
 800d036:	bf00      	nop
 800d038:	e7fe      	b.n	800d038 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	689c      	ldr	r4, [r3, #8]
 800d03e:	f001 fcb9 	bl	800e9b4 <xTaskGetCurrentTaskHandle>
 800d042:	4603      	mov	r3, r0
 800d044:	429c      	cmp	r4, r3
 800d046:	d107      	bne.n	800d058 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	1c5a      	adds	r2, r3, #1
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d052:	2301      	movs	r3, #1
 800d054:	617b      	str	r3, [r7, #20]
 800d056:	e00c      	b.n	800d072 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d058:	6839      	ldr	r1, [r7, #0]
 800d05a:	6938      	ldr	r0, [r7, #16]
 800d05c:	f000 faf2 	bl	800d644 <xQueueSemaphoreTake>
 800d060:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d004      	beq.n	800d072 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	1c5a      	adds	r2, r3, #1
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d072:	697b      	ldr	r3, [r7, #20]
	}
 800d074:	4618      	mov	r0, r3
 800d076:	371c      	adds	r7, #28
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd90      	pop	{r4, r7, pc}

0800d07c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b08a      	sub	sp, #40	; 0x28
 800d080:	af02      	add	r7, sp, #8
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d10a      	bne.n	800d0a4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d092:	f383 8811 	msr	BASEPRI, r3
 800d096:	f3bf 8f6f 	isb	sy
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	61bb      	str	r3, [r7, #24]
}
 800d0a0:	bf00      	nop
 800d0a2:	e7fe      	b.n	800d0a2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d90a      	bls.n	800d0c2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b0:	f383 8811 	msr	BASEPRI, r3
 800d0b4:	f3bf 8f6f 	isb	sy
 800d0b8:	f3bf 8f4f 	dsb	sy
 800d0bc:	617b      	str	r3, [r7, #20]
}
 800d0be:	bf00      	nop
 800d0c0:	e7fe      	b.n	800d0c0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d0c2:	2302      	movs	r3, #2
 800d0c4:	9300      	str	r3, [sp, #0]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	2100      	movs	r1, #0
 800d0cc:	68f8      	ldr	r0, [r7, #12]
 800d0ce:	f7ff fe49 	bl	800cd64 <xQueueGenericCreateStatic>
 800d0d2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d002      	beq.n	800d0e0 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	68ba      	ldr	r2, [r7, #8]
 800d0de:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d0e0:	69fb      	ldr	r3, [r7, #28]
	}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3720      	adds	r7, #32
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}

0800d0ea <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d0ea:	b580      	push	{r7, lr}
 800d0ec:	b086      	sub	sp, #24
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]
 800d0f2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d10a      	bne.n	800d110 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fe:	f383 8811 	msr	BASEPRI, r3
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	613b      	str	r3, [r7, #16]
}
 800d10c:	bf00      	nop
 800d10e:	e7fe      	b.n	800d10e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d110:	683a      	ldr	r2, [r7, #0]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	429a      	cmp	r2, r3
 800d116:	d90a      	bls.n	800d12e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11c:	f383 8811 	msr	BASEPRI, r3
 800d120:	f3bf 8f6f 	isb	sy
 800d124:	f3bf 8f4f 	dsb	sy
 800d128:	60fb      	str	r3, [r7, #12]
}
 800d12a:	bf00      	nop
 800d12c:	e7fe      	b.n	800d12c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d12e:	2202      	movs	r2, #2
 800d130:	2100      	movs	r1, #0
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f7ff fe8e 	bl	800ce54 <xQueueGenericCreate>
 800d138:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d002      	beq.n	800d146 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	683a      	ldr	r2, [r7, #0]
 800d144:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d146:	697b      	ldr	r3, [r7, #20]
	}
 800d148:	4618      	mov	r0, r3
 800d14a:	3718      	adds	r7, #24
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b08e      	sub	sp, #56	; 0x38
 800d154:	af00      	add	r7, sp, #0
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	607a      	str	r2, [r7, #4]
 800d15c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d15e:	2300      	movs	r3, #0
 800d160:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d10a      	bne.n	800d182 <xQueueGenericSend+0x32>
	__asm volatile
 800d16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d170:	f383 8811 	msr	BASEPRI, r3
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d17e:	bf00      	nop
 800d180:	e7fe      	b.n	800d180 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d103      	bne.n	800d190 <xQueueGenericSend+0x40>
 800d188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d101      	bne.n	800d194 <xQueueGenericSend+0x44>
 800d190:	2301      	movs	r3, #1
 800d192:	e000      	b.n	800d196 <xQueueGenericSend+0x46>
 800d194:	2300      	movs	r3, #0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d10a      	bne.n	800d1b0 <xQueueGenericSend+0x60>
	__asm volatile
 800d19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19e:	f383 8811 	msr	BASEPRI, r3
 800d1a2:	f3bf 8f6f 	isb	sy
 800d1a6:	f3bf 8f4f 	dsb	sy
 800d1aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d1ac:	bf00      	nop
 800d1ae:	e7fe      	b.n	800d1ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	2b02      	cmp	r3, #2
 800d1b4:	d103      	bne.n	800d1be <xQueueGenericSend+0x6e>
 800d1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d101      	bne.n	800d1c2 <xQueueGenericSend+0x72>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	e000      	b.n	800d1c4 <xQueueGenericSend+0x74>
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d10a      	bne.n	800d1de <xQueueGenericSend+0x8e>
	__asm volatile
 800d1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1cc:	f383 8811 	msr	BASEPRI, r3
 800d1d0:	f3bf 8f6f 	isb	sy
 800d1d4:	f3bf 8f4f 	dsb	sy
 800d1d8:	623b      	str	r3, [r7, #32]
}
 800d1da:	bf00      	nop
 800d1dc:	e7fe      	b.n	800d1dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1de:	f001 fbf9 	bl	800e9d4 <xTaskGetSchedulerState>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d102      	bne.n	800d1ee <xQueueGenericSend+0x9e>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d101      	bne.n	800d1f2 <xQueueGenericSend+0xa2>
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e000      	b.n	800d1f4 <xQueueGenericSend+0xa4>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d10a      	bne.n	800d20e <xQueueGenericSend+0xbe>
	__asm volatile
 800d1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fc:	f383 8811 	msr	BASEPRI, r3
 800d200:	f3bf 8f6f 	isb	sy
 800d204:	f3bf 8f4f 	dsb	sy
 800d208:	61fb      	str	r3, [r7, #28]
}
 800d20a:	bf00      	nop
 800d20c:	e7fe      	b.n	800d20c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d20e:	f002 fcf9 	bl	800fc04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d302      	bcc.n	800d224 <xQueueGenericSend+0xd4>
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	2b02      	cmp	r3, #2
 800d222:	d129      	bne.n	800d278 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d224:	683a      	ldr	r2, [r7, #0]
 800d226:	68b9      	ldr	r1, [r7, #8]
 800d228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d22a:	f000 fb52 	bl	800d8d2 <prvCopyDataToQueue>
 800d22e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d234:	2b00      	cmp	r3, #0
 800d236:	d010      	beq.n	800d25a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23a:	3324      	adds	r3, #36	; 0x24
 800d23c:	4618      	mov	r0, r3
 800d23e:	f001 f9f7 	bl	800e630 <xTaskRemoveFromEventList>
 800d242:	4603      	mov	r3, r0
 800d244:	2b00      	cmp	r3, #0
 800d246:	d013      	beq.n	800d270 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d248:	4b3f      	ldr	r3, [pc, #252]	; (800d348 <xQueueGenericSend+0x1f8>)
 800d24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d24e:	601a      	str	r2, [r3, #0]
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	e00a      	b.n	800d270 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d007      	beq.n	800d270 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d260:	4b39      	ldr	r3, [pc, #228]	; (800d348 <xQueueGenericSend+0x1f8>)
 800d262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d266:	601a      	str	r2, [r3, #0]
 800d268:	f3bf 8f4f 	dsb	sy
 800d26c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d270:	f002 fcf8 	bl	800fc64 <vPortExitCritical>
				return pdPASS;
 800d274:	2301      	movs	r3, #1
 800d276:	e063      	b.n	800d340 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d103      	bne.n	800d286 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d27e:	f002 fcf1 	bl	800fc64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d282:	2300      	movs	r3, #0
 800d284:	e05c      	b.n	800d340 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d106      	bne.n	800d29a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d28c:	f107 0314 	add.w	r3, r7, #20
 800d290:	4618      	mov	r0, r3
 800d292:	f001 fa31 	bl	800e6f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d296:	2301      	movs	r3, #1
 800d298:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d29a:	f002 fce3 	bl	800fc64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d29e:	f000 ff8b 	bl	800e1b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2a2:	f002 fcaf 	bl	800fc04 <vPortEnterCritical>
 800d2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2ac:	b25b      	sxtb	r3, r3
 800d2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b2:	d103      	bne.n	800d2bc <xQueueGenericSend+0x16c>
 800d2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2c2:	b25b      	sxtb	r3, r3
 800d2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2c8:	d103      	bne.n	800d2d2 <xQueueGenericSend+0x182>
 800d2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2d2:	f002 fcc7 	bl	800fc64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2d6:	1d3a      	adds	r2, r7, #4
 800d2d8:	f107 0314 	add.w	r3, r7, #20
 800d2dc:	4611      	mov	r1, r2
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f001 fa20 	bl	800e724 <xTaskCheckForTimeOut>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d124      	bne.n	800d334 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d2ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ec:	f000 fbe9 	bl	800dac2 <prvIsQueueFull>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d018      	beq.n	800d328 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f8:	3310      	adds	r3, #16
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	4611      	mov	r1, r2
 800d2fe:	4618      	mov	r0, r3
 800d300:	f001 f946 	bl	800e590 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d306:	f000 fb74 	bl	800d9f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d30a:	f000 ff63 	bl	800e1d4 <xTaskResumeAll>
 800d30e:	4603      	mov	r3, r0
 800d310:	2b00      	cmp	r3, #0
 800d312:	f47f af7c 	bne.w	800d20e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d316:	4b0c      	ldr	r3, [pc, #48]	; (800d348 <xQueueGenericSend+0x1f8>)
 800d318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d31c:	601a      	str	r2, [r3, #0]
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	e772      	b.n	800d20e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d32a:	f000 fb62 	bl	800d9f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d32e:	f000 ff51 	bl	800e1d4 <xTaskResumeAll>
 800d332:	e76c      	b.n	800d20e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d336:	f000 fb5c 	bl	800d9f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d33a:	f000 ff4b 	bl	800e1d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d33e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d340:	4618      	mov	r0, r3
 800d342:	3738      	adds	r7, #56	; 0x38
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}
 800d348:	e000ed04 	.word	0xe000ed04

0800d34c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b090      	sub	sp, #64	; 0x40
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]
 800d358:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10a      	bne.n	800d37a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d368:	f383 8811 	msr	BASEPRI, r3
 800d36c:	f3bf 8f6f 	isb	sy
 800d370:	f3bf 8f4f 	dsb	sy
 800d374:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d376:	bf00      	nop
 800d378:	e7fe      	b.n	800d378 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d103      	bne.n	800d388 <xQueueGenericSendFromISR+0x3c>
 800d380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d384:	2b00      	cmp	r3, #0
 800d386:	d101      	bne.n	800d38c <xQueueGenericSendFromISR+0x40>
 800d388:	2301      	movs	r3, #1
 800d38a:	e000      	b.n	800d38e <xQueueGenericSendFromISR+0x42>
 800d38c:	2300      	movs	r3, #0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d10a      	bne.n	800d3a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d3a4:	bf00      	nop
 800d3a6:	e7fe      	b.n	800d3a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	2b02      	cmp	r3, #2
 800d3ac:	d103      	bne.n	800d3b6 <xQueueGenericSendFromISR+0x6a>
 800d3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d101      	bne.n	800d3ba <xQueueGenericSendFromISR+0x6e>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e000      	b.n	800d3bc <xQueueGenericSendFromISR+0x70>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d10a      	bne.n	800d3d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c4:	f383 8811 	msr	BASEPRI, r3
 800d3c8:	f3bf 8f6f 	isb	sy
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	623b      	str	r3, [r7, #32]
}
 800d3d2:	bf00      	nop
 800d3d4:	e7fe      	b.n	800d3d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3d6:	f002 fcf7 	bl	800fdc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d3da:	f3ef 8211 	mrs	r2, BASEPRI
 800d3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	61fa      	str	r2, [r7, #28]
 800d3f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d3f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d302      	bcc.n	800d408 <xQueueGenericSendFromISR+0xbc>
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2b02      	cmp	r3, #2
 800d406:	d12f      	bne.n	800d468 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d40a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d416:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d418:	683a      	ldr	r2, [r7, #0]
 800d41a:	68b9      	ldr	r1, [r7, #8]
 800d41c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d41e:	f000 fa58 	bl	800d8d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d422:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d42a:	d112      	bne.n	800d452 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d430:	2b00      	cmp	r3, #0
 800d432:	d016      	beq.n	800d462 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d436:	3324      	adds	r3, #36	; 0x24
 800d438:	4618      	mov	r0, r3
 800d43a:	f001 f8f9 	bl	800e630 <xTaskRemoveFromEventList>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00e      	beq.n	800d462 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00b      	beq.n	800d462 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2201      	movs	r2, #1
 800d44e:	601a      	str	r2, [r3, #0]
 800d450:	e007      	b.n	800d462 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d452:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d456:	3301      	adds	r3, #1
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	b25a      	sxtb	r2, r3
 800d45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d462:	2301      	movs	r3, #1
 800d464:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d466:	e001      	b.n	800d46c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d468:	2300      	movs	r3, #0
 800d46a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d46e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d476:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3740      	adds	r7, #64	; 0x40
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
	...

0800d484 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b08c      	sub	sp, #48	; 0x30
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d490:	2300      	movs	r3, #0
 800d492:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d10a      	bne.n	800d4b4 <xQueueReceive+0x30>
	__asm volatile
 800d49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	623b      	str	r3, [r7, #32]
}
 800d4b0:	bf00      	nop
 800d4b2:	e7fe      	b.n	800d4b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d103      	bne.n	800d4c2 <xQueueReceive+0x3e>
 800d4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d101      	bne.n	800d4c6 <xQueueReceive+0x42>
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	e000      	b.n	800d4c8 <xQueueReceive+0x44>
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10a      	bne.n	800d4e2 <xQueueReceive+0x5e>
	__asm volatile
 800d4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d0:	f383 8811 	msr	BASEPRI, r3
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	61fb      	str	r3, [r7, #28]
}
 800d4de:	bf00      	nop
 800d4e0:	e7fe      	b.n	800d4e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4e2:	f001 fa77 	bl	800e9d4 <xTaskGetSchedulerState>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d102      	bne.n	800d4f2 <xQueueReceive+0x6e>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d101      	bne.n	800d4f6 <xQueueReceive+0x72>
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e000      	b.n	800d4f8 <xQueueReceive+0x74>
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d10a      	bne.n	800d512 <xQueueReceive+0x8e>
	__asm volatile
 800d4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d500:	f383 8811 	msr	BASEPRI, r3
 800d504:	f3bf 8f6f 	isb	sy
 800d508:	f3bf 8f4f 	dsb	sy
 800d50c:	61bb      	str	r3, [r7, #24]
}
 800d50e:	bf00      	nop
 800d510:	e7fe      	b.n	800d510 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d512:	f002 fb77 	bl	800fc04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d51a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d01f      	beq.n	800d562 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d522:	68b9      	ldr	r1, [r7, #8]
 800d524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d526:	f000 fa3e 	bl	800d9a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52c:	1e5a      	subs	r2, r3, #1
 800d52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d530:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d534:	691b      	ldr	r3, [r3, #16]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00f      	beq.n	800d55a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53c:	3310      	adds	r3, #16
 800d53e:	4618      	mov	r0, r3
 800d540:	f001 f876 	bl	800e630 <xTaskRemoveFromEventList>
 800d544:	4603      	mov	r3, r0
 800d546:	2b00      	cmp	r3, #0
 800d548:	d007      	beq.n	800d55a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d54a:	4b3d      	ldr	r3, [pc, #244]	; (800d640 <xQueueReceive+0x1bc>)
 800d54c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d550:	601a      	str	r2, [r3, #0]
 800d552:	f3bf 8f4f 	dsb	sy
 800d556:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d55a:	f002 fb83 	bl	800fc64 <vPortExitCritical>
				return pdPASS;
 800d55e:	2301      	movs	r3, #1
 800d560:	e069      	b.n	800d636 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d103      	bne.n	800d570 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d568:	f002 fb7c 	bl	800fc64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d56c:	2300      	movs	r3, #0
 800d56e:	e062      	b.n	800d636 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d572:	2b00      	cmp	r3, #0
 800d574:	d106      	bne.n	800d584 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d576:	f107 0310 	add.w	r3, r7, #16
 800d57a:	4618      	mov	r0, r3
 800d57c:	f001 f8bc 	bl	800e6f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d580:	2301      	movs	r3, #1
 800d582:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d584:	f002 fb6e 	bl	800fc64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d588:	f000 fe16 	bl	800e1b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d58c:	f002 fb3a 	bl	800fc04 <vPortEnterCritical>
 800d590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d592:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d596:	b25b      	sxtb	r3, r3
 800d598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d59c:	d103      	bne.n	800d5a6 <xQueueReceive+0x122>
 800d59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5ac:	b25b      	sxtb	r3, r3
 800d5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b2:	d103      	bne.n	800d5bc <xQueueReceive+0x138>
 800d5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5bc:	f002 fb52 	bl	800fc64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5c0:	1d3a      	adds	r2, r7, #4
 800d5c2:	f107 0310 	add.w	r3, r7, #16
 800d5c6:	4611      	mov	r1, r2
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f001 f8ab 	bl	800e724 <xTaskCheckForTimeOut>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d123      	bne.n	800d61c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5d6:	f000 fa5e 	bl	800da96 <prvIsQueueEmpty>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d017      	beq.n	800d610 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e2:	3324      	adds	r3, #36	; 0x24
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	4611      	mov	r1, r2
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f000 ffd1 	bl	800e590 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d5ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5f0:	f000 f9ff 	bl	800d9f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d5f4:	f000 fdee 	bl	800e1d4 <xTaskResumeAll>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d189      	bne.n	800d512 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d5fe:	4b10      	ldr	r3, [pc, #64]	; (800d640 <xQueueReceive+0x1bc>)
 800d600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d604:	601a      	str	r2, [r3, #0]
 800d606:	f3bf 8f4f 	dsb	sy
 800d60a:	f3bf 8f6f 	isb	sy
 800d60e:	e780      	b.n	800d512 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d612:	f000 f9ee 	bl	800d9f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d616:	f000 fddd 	bl	800e1d4 <xTaskResumeAll>
 800d61a:	e77a      	b.n	800d512 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d61c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d61e:	f000 f9e8 	bl	800d9f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d622:	f000 fdd7 	bl	800e1d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d628:	f000 fa35 	bl	800da96 <prvIsQueueEmpty>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	f43f af6f 	beq.w	800d512 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d634:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d636:	4618      	mov	r0, r3
 800d638:	3730      	adds	r7, #48	; 0x30
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	e000ed04 	.word	0xe000ed04

0800d644 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b08e      	sub	sp, #56	; 0x38
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d64e:	2300      	movs	r3, #0
 800d650:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d656:	2300      	movs	r3, #0
 800d658:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d10a      	bne.n	800d676 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d664:	f383 8811 	msr	BASEPRI, r3
 800d668:	f3bf 8f6f 	isb	sy
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	623b      	str	r3, [r7, #32]
}
 800d672:	bf00      	nop
 800d674:	e7fe      	b.n	800d674 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d00a      	beq.n	800d694 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d682:	f383 8811 	msr	BASEPRI, r3
 800d686:	f3bf 8f6f 	isb	sy
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	61fb      	str	r3, [r7, #28]
}
 800d690:	bf00      	nop
 800d692:	e7fe      	b.n	800d692 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d694:	f001 f99e 	bl	800e9d4 <xTaskGetSchedulerState>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d102      	bne.n	800d6a4 <xQueueSemaphoreTake+0x60>
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d101      	bne.n	800d6a8 <xQueueSemaphoreTake+0x64>
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	e000      	b.n	800d6aa <xQueueSemaphoreTake+0x66>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d10a      	bne.n	800d6c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	61bb      	str	r3, [r7, #24]
}
 800d6c0:	bf00      	nop
 800d6c2:	e7fe      	b.n	800d6c2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6c4:	f002 fa9e 	bl	800fc04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d024      	beq.n	800d71e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d6:	1e5a      	subs	r2, r3, #1
 800d6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d104      	bne.n	800d6ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d6e4:	f001 faec 	bl	800ecc0 <pvTaskIncrementMutexHeldCount>
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f0:	691b      	ldr	r3, [r3, #16]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d00f      	beq.n	800d716 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f8:	3310      	adds	r3, #16
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f000 ff98 	bl	800e630 <xTaskRemoveFromEventList>
 800d700:	4603      	mov	r3, r0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d007      	beq.n	800d716 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d706:	4b54      	ldr	r3, [pc, #336]	; (800d858 <xQueueSemaphoreTake+0x214>)
 800d708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d70c:	601a      	str	r2, [r3, #0]
 800d70e:	f3bf 8f4f 	dsb	sy
 800d712:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d716:	f002 faa5 	bl	800fc64 <vPortExitCritical>
				return pdPASS;
 800d71a:	2301      	movs	r3, #1
 800d71c:	e097      	b.n	800d84e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d111      	bne.n	800d748 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00a      	beq.n	800d740 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72e:	f383 8811 	msr	BASEPRI, r3
 800d732:	f3bf 8f6f 	isb	sy
 800d736:	f3bf 8f4f 	dsb	sy
 800d73a:	617b      	str	r3, [r7, #20]
}
 800d73c:	bf00      	nop
 800d73e:	e7fe      	b.n	800d73e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d740:	f002 fa90 	bl	800fc64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d744:	2300      	movs	r3, #0
 800d746:	e082      	b.n	800d84e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d106      	bne.n	800d75c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d74e:	f107 030c 	add.w	r3, r7, #12
 800d752:	4618      	mov	r0, r3
 800d754:	f000 ffd0 	bl	800e6f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d758:	2301      	movs	r3, #1
 800d75a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d75c:	f002 fa82 	bl	800fc64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d760:	f000 fd2a 	bl	800e1b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d764:	f002 fa4e 	bl	800fc04 <vPortEnterCritical>
 800d768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d76e:	b25b      	sxtb	r3, r3
 800d770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d774:	d103      	bne.n	800d77e <xQueueSemaphoreTake+0x13a>
 800d776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d778:	2200      	movs	r2, #0
 800d77a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d784:	b25b      	sxtb	r3, r3
 800d786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d78a:	d103      	bne.n	800d794 <xQueueSemaphoreTake+0x150>
 800d78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78e:	2200      	movs	r2, #0
 800d790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d794:	f002 fa66 	bl	800fc64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d798:	463a      	mov	r2, r7
 800d79a:	f107 030c 	add.w	r3, r7, #12
 800d79e:	4611      	mov	r1, r2
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 ffbf 	bl	800e724 <xTaskCheckForTimeOut>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d132      	bne.n	800d812 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7ae:	f000 f972 	bl	800da96 <prvIsQueueEmpty>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d026      	beq.n	800d806 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d109      	bne.n	800d7d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d7c0:	f002 fa20 	bl	800fc04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f001 f921 	bl	800ea10 <xTaskPriorityInherit>
 800d7ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d7d0:	f002 fa48 	bl	800fc64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d6:	3324      	adds	r3, #36	; 0x24
 800d7d8:	683a      	ldr	r2, [r7, #0]
 800d7da:	4611      	mov	r1, r2
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f000 fed7 	bl	800e590 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d7e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7e4:	f000 f905 	bl	800d9f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d7e8:	f000 fcf4 	bl	800e1d4 <xTaskResumeAll>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	f47f af68 	bne.w	800d6c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d7f4:	4b18      	ldr	r3, [pc, #96]	; (800d858 <xQueueSemaphoreTake+0x214>)
 800d7f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7fa:	601a      	str	r2, [r3, #0]
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	f3bf 8f6f 	isb	sy
 800d804:	e75e      	b.n	800d6c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d806:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d808:	f000 f8f3 	bl	800d9f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d80c:	f000 fce2 	bl	800e1d4 <xTaskResumeAll>
 800d810:	e758      	b.n	800d6c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d812:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d814:	f000 f8ed 	bl	800d9f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d818:	f000 fcdc 	bl	800e1d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d81c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d81e:	f000 f93a 	bl	800da96 <prvIsQueueEmpty>
 800d822:	4603      	mov	r3, r0
 800d824:	2b00      	cmp	r3, #0
 800d826:	f43f af4d 	beq.w	800d6c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d00d      	beq.n	800d84c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d830:	f002 f9e8 	bl	800fc04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d836:	f000 f834 	bl	800d8a2 <prvGetDisinheritPriorityAfterTimeout>
 800d83a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d842:	4618      	mov	r0, r3
 800d844:	f001 f9ba 	bl	800ebbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d848:	f002 fa0c 	bl	800fc64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d84c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3738      	adds	r7, #56	; 0x38
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	e000ed04 	.word	0xe000ed04

0800d85c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d10a      	bne.n	800d884 <vQueueDelete+0x28>
	__asm volatile
 800d86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d872:	f383 8811 	msr	BASEPRI, r3
 800d876:	f3bf 8f6f 	isb	sy
 800d87a:	f3bf 8f4f 	dsb	sy
 800d87e:	60bb      	str	r3, [r7, #8]
}
 800d880:	bf00      	nop
 800d882:	e7fe      	b.n	800d882 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f000 f95f 	bl	800db48 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d890:	2b00      	cmp	r3, #0
 800d892:	d102      	bne.n	800d89a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f002 fba3 	bl	800ffe0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d89a:	bf00      	nop
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d8a2:	b480      	push	{r7}
 800d8a4:	b085      	sub	sp, #20
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d006      	beq.n	800d8c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d8bc:	60fb      	str	r3, [r7, #12]
 800d8be:	e001      	b.n	800d8c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
	}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3714      	adds	r7, #20
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b086      	sub	sp, #24
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	60f8      	str	r0, [r7, #12]
 800d8da:	60b9      	str	r1, [r7, #8]
 800d8dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d10d      	bne.n	800d90c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d14d      	bne.n	800d994 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	689b      	ldr	r3, [r3, #8]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f001 f8ef 	bl	800eae0 <xTaskPriorityDisinherit>
 800d902:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2200      	movs	r2, #0
 800d908:	609a      	str	r2, [r3, #8]
 800d90a:	e043      	b.n	800d994 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d119      	bne.n	800d946 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6858      	ldr	r0, [r3, #4]
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d91a:	461a      	mov	r2, r3
 800d91c:	68b9      	ldr	r1, [r7, #8]
 800d91e:	f002 fda0 	bl	8010462 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	685a      	ldr	r2, [r3, #4]
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d92a:	441a      	add	r2, r3
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	685a      	ldr	r2, [r3, #4]
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	689b      	ldr	r3, [r3, #8]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d32b      	bcc.n	800d994 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	605a      	str	r2, [r3, #4]
 800d944:	e026      	b.n	800d994 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	68d8      	ldr	r0, [r3, #12]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d94e:	461a      	mov	r2, r3
 800d950:	68b9      	ldr	r1, [r7, #8]
 800d952:	f002 fd86 	bl	8010462 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	68da      	ldr	r2, [r3, #12]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d95e:	425b      	negs	r3, r3
 800d960:	441a      	add	r2, r3
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	68da      	ldr	r2, [r3, #12]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d207      	bcs.n	800d982 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	689a      	ldr	r2, [r3, #8]
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d97a:	425b      	negs	r3, r3
 800d97c:	441a      	add	r2, r3
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2b02      	cmp	r3, #2
 800d986:	d105      	bne.n	800d994 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d002      	beq.n	800d994 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	3b01      	subs	r3, #1
 800d992:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	1c5a      	adds	r2, r3, #1
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d99c:	697b      	ldr	r3, [r7, #20]
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3718      	adds	r7, #24
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}

0800d9a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d9a6:	b580      	push	{r7, lr}
 800d9a8:	b082      	sub	sp, #8
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]
 800d9ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d018      	beq.n	800d9ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	68da      	ldr	r2, [r3, #12]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c0:	441a      	add	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	68da      	ldr	r2, [r3, #12]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d303      	bcc.n	800d9da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	68d9      	ldr	r1, [r3, #12]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	6838      	ldr	r0, [r7, #0]
 800d9e6:	f002 fd3c 	bl	8010462 <memcpy>
	}
}
 800d9ea:	bf00      	nop
 800d9ec:	3708      	adds	r7, #8
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b084      	sub	sp, #16
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d9fa:	f002 f903 	bl	800fc04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da04:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800da06:	e011      	b.n	800da2c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d012      	beq.n	800da36 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	3324      	adds	r3, #36	; 0x24
 800da14:	4618      	mov	r0, r3
 800da16:	f000 fe0b 	bl	800e630 <xTaskRemoveFromEventList>
 800da1a:	4603      	mov	r3, r0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d001      	beq.n	800da24 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800da20:	f000 fee2 	bl	800e7e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800da24:	7bfb      	ldrb	r3, [r7, #15]
 800da26:	3b01      	subs	r3, #1
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800da2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da30:	2b00      	cmp	r3, #0
 800da32:	dce9      	bgt.n	800da08 <prvUnlockQueue+0x16>
 800da34:	e000      	b.n	800da38 <prvUnlockQueue+0x46>
					break;
 800da36:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	22ff      	movs	r2, #255	; 0xff
 800da3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800da40:	f002 f910 	bl	800fc64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800da44:	f002 f8de 	bl	800fc04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da4e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800da50:	e011      	b.n	800da76 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	691b      	ldr	r3, [r3, #16]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d012      	beq.n	800da80 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	3310      	adds	r3, #16
 800da5e:	4618      	mov	r0, r3
 800da60:	f000 fde6 	bl	800e630 <xTaskRemoveFromEventList>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d001      	beq.n	800da6e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800da6a:	f000 febd 	bl	800e7e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800da6e:	7bbb      	ldrb	r3, [r7, #14]
 800da70:	3b01      	subs	r3, #1
 800da72:	b2db      	uxtb	r3, r3
 800da74:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800da76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	dce9      	bgt.n	800da52 <prvUnlockQueue+0x60>
 800da7e:	e000      	b.n	800da82 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800da80:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	22ff      	movs	r2, #255	; 0xff
 800da86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800da8a:	f002 f8eb 	bl	800fc64 <vPortExitCritical>
}
 800da8e:	bf00      	nop
 800da90:	3710      	adds	r7, #16
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b084      	sub	sp, #16
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da9e:	f002 f8b1 	bl	800fc04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d102      	bne.n	800dab0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800daaa:	2301      	movs	r3, #1
 800daac:	60fb      	str	r3, [r7, #12]
 800daae:	e001      	b.n	800dab4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dab0:	2300      	movs	r3, #0
 800dab2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dab4:	f002 f8d6 	bl	800fc64 <vPortExitCritical>

	return xReturn;
 800dab8:	68fb      	ldr	r3, [r7, #12]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3710      	adds	r7, #16
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b084      	sub	sp, #16
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800daca:	f002 f89b 	bl	800fc04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d102      	bne.n	800dae0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dada:	2301      	movs	r3, #1
 800dadc:	60fb      	str	r3, [r7, #12]
 800dade:	e001      	b.n	800dae4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dae0:	2300      	movs	r3, #0
 800dae2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dae4:	f002 f8be 	bl	800fc64 <vPortExitCritical>

	return xReturn;
 800dae8:	68fb      	ldr	r3, [r7, #12]
}
 800daea:	4618      	mov	r0, r3
 800daec:	3710      	adds	r7, #16
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
	...

0800daf4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800daf4:	b480      	push	{r7}
 800daf6:	b085      	sub	sp, #20
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dafe:	2300      	movs	r3, #0
 800db00:	60fb      	str	r3, [r7, #12]
 800db02:	e014      	b.n	800db2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800db04:	4a0f      	ldr	r2, [pc, #60]	; (800db44 <vQueueAddToRegistry+0x50>)
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10b      	bne.n	800db28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800db10:	490c      	ldr	r1, [pc, #48]	; (800db44 <vQueueAddToRegistry+0x50>)
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	683a      	ldr	r2, [r7, #0]
 800db16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800db1a:	4a0a      	ldr	r2, [pc, #40]	; (800db44 <vQueueAddToRegistry+0x50>)
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	00db      	lsls	r3, r3, #3
 800db20:	4413      	add	r3, r2
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800db26:	e006      	b.n	800db36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	3301      	adds	r3, #1
 800db2c:	60fb      	str	r3, [r7, #12]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2b07      	cmp	r3, #7
 800db32:	d9e7      	bls.n	800db04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800db34:	bf00      	nop
 800db36:	bf00      	nop
 800db38:	3714      	adds	r7, #20
 800db3a:	46bd      	mov	sp, r7
 800db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db40:	4770      	bx	lr
 800db42:	bf00      	nop
 800db44:	200018c8 	.word	0x200018c8

0800db48 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800db48:	b480      	push	{r7}
 800db4a:	b085      	sub	sp, #20
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800db50:	2300      	movs	r3, #0
 800db52:	60fb      	str	r3, [r7, #12]
 800db54:	e016      	b.n	800db84 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800db56:	4a10      	ldr	r2, [pc, #64]	; (800db98 <vQueueUnregisterQueue+0x50>)
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	00db      	lsls	r3, r3, #3
 800db5c:	4413      	add	r3, r2
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	429a      	cmp	r2, r3
 800db64:	d10b      	bne.n	800db7e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800db66:	4a0c      	ldr	r2, [pc, #48]	; (800db98 <vQueueUnregisterQueue+0x50>)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2100      	movs	r1, #0
 800db6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800db70:	4a09      	ldr	r2, [pc, #36]	; (800db98 <vQueueUnregisterQueue+0x50>)
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	00db      	lsls	r3, r3, #3
 800db76:	4413      	add	r3, r2
 800db78:	2200      	movs	r2, #0
 800db7a:	605a      	str	r2, [r3, #4]
				break;
 800db7c:	e006      	b.n	800db8c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	3301      	adds	r3, #1
 800db82:	60fb      	str	r3, [r7, #12]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2b07      	cmp	r3, #7
 800db88:	d9e5      	bls.n	800db56 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800db8a:	bf00      	nop
 800db8c:	bf00      	nop
 800db8e:	3714      	adds	r7, #20
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr
 800db98:	200018c8 	.word	0x200018c8

0800db9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b086      	sub	sp, #24
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	60f8      	str	r0, [r7, #12]
 800dba4:	60b9      	str	r1, [r7, #8]
 800dba6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dbac:	f002 f82a 	bl	800fc04 <vPortEnterCritical>
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbb6:	b25b      	sxtb	r3, r3
 800dbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbbc:	d103      	bne.n	800dbc6 <vQueueWaitForMessageRestricted+0x2a>
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbcc:	b25b      	sxtb	r3, r3
 800dbce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd2:	d103      	bne.n	800dbdc <vQueueWaitForMessageRestricted+0x40>
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbdc:	f002 f842 	bl	800fc64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d106      	bne.n	800dbf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	3324      	adds	r3, #36	; 0x24
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	68b9      	ldr	r1, [r7, #8]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f000 fcf1 	bl	800e5d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dbf6:	6978      	ldr	r0, [r7, #20]
 800dbf8:	f7ff fefb 	bl	800d9f2 <prvUnlockQueue>
	}
 800dbfc:	bf00      	nop
 800dbfe:	3718      	adds	r7, #24
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b08e      	sub	sp, #56	; 0x38
 800dc08:	af04      	add	r7, sp, #16
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
 800dc10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d10a      	bne.n	800dc2e <xTaskCreateStatic+0x2a>
	__asm volatile
 800dc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1c:	f383 8811 	msr	BASEPRI, r3
 800dc20:	f3bf 8f6f 	isb	sy
 800dc24:	f3bf 8f4f 	dsb	sy
 800dc28:	623b      	str	r3, [r7, #32]
}
 800dc2a:	bf00      	nop
 800dc2c:	e7fe      	b.n	800dc2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d10a      	bne.n	800dc4a <xTaskCreateStatic+0x46>
	__asm volatile
 800dc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc38:	f383 8811 	msr	BASEPRI, r3
 800dc3c:	f3bf 8f6f 	isb	sy
 800dc40:	f3bf 8f4f 	dsb	sy
 800dc44:	61fb      	str	r3, [r7, #28]
}
 800dc46:	bf00      	nop
 800dc48:	e7fe      	b.n	800dc48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dc4a:	23bc      	movs	r3, #188	; 0xbc
 800dc4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	2bbc      	cmp	r3, #188	; 0xbc
 800dc52:	d00a      	beq.n	800dc6a <xTaskCreateStatic+0x66>
	__asm volatile
 800dc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc58:	f383 8811 	msr	BASEPRI, r3
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f3bf 8f4f 	dsb	sy
 800dc64:	61bb      	str	r3, [r7, #24]
}
 800dc66:	bf00      	nop
 800dc68:	e7fe      	b.n	800dc68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dc6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d01e      	beq.n	800dcb0 <xTaskCreateStatic+0xac>
 800dc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d01b      	beq.n	800dcb0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc84:	2202      	movs	r2, #2
 800dc86:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	9303      	str	r3, [sp, #12]
 800dc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc90:	9302      	str	r3, [sp, #8]
 800dc92:	f107 0314 	add.w	r3, r7, #20
 800dc96:	9301      	str	r3, [sp, #4]
 800dc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9a:	9300      	str	r3, [sp, #0]
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	68b9      	ldr	r1, [r7, #8]
 800dca2:	68f8      	ldr	r0, [r7, #12]
 800dca4:	f000 f850 	bl	800dd48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcaa:	f000 f8f3 	bl	800de94 <prvAddNewTaskToReadyList>
 800dcae:	e001      	b.n	800dcb4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dcb4:	697b      	ldr	r3, [r7, #20]
	}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3728      	adds	r7, #40	; 0x28
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b08c      	sub	sp, #48	; 0x30
 800dcc2:	af04      	add	r7, sp, #16
 800dcc4:	60f8      	str	r0, [r7, #12]
 800dcc6:	60b9      	str	r1, [r7, #8]
 800dcc8:	603b      	str	r3, [r7, #0]
 800dcca:	4613      	mov	r3, r2
 800dccc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dcce:	88fb      	ldrh	r3, [r7, #6]
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f002 f8b8 	bl	800fe48 <pvPortMalloc>
 800dcd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d00e      	beq.n	800dcfe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dce0:	20bc      	movs	r0, #188	; 0xbc
 800dce2:	f002 f8b1 	bl	800fe48 <pvPortMalloc>
 800dce6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dce8:	69fb      	ldr	r3, [r7, #28]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d003      	beq.n	800dcf6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	697a      	ldr	r2, [r7, #20]
 800dcf2:	631a      	str	r2, [r3, #48]	; 0x30
 800dcf4:	e005      	b.n	800dd02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dcf6:	6978      	ldr	r0, [r7, #20]
 800dcf8:	f002 f972 	bl	800ffe0 <vPortFree>
 800dcfc:	e001      	b.n	800dd02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d017      	beq.n	800dd38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dd10:	88fa      	ldrh	r2, [r7, #6]
 800dd12:	2300      	movs	r3, #0
 800dd14:	9303      	str	r3, [sp, #12]
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	9302      	str	r3, [sp, #8]
 800dd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1c:	9301      	str	r3, [sp, #4]
 800dd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd20:	9300      	str	r3, [sp, #0]
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	68b9      	ldr	r1, [r7, #8]
 800dd26:	68f8      	ldr	r0, [r7, #12]
 800dd28:	f000 f80e 	bl	800dd48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd2c:	69f8      	ldr	r0, [r7, #28]
 800dd2e:	f000 f8b1 	bl	800de94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dd32:	2301      	movs	r3, #1
 800dd34:	61bb      	str	r3, [r7, #24]
 800dd36:	e002      	b.n	800dd3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dd38:	f04f 33ff 	mov.w	r3, #4294967295
 800dd3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dd3e:	69bb      	ldr	r3, [r7, #24]
	}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3720      	adds	r7, #32
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b088      	sub	sp, #32
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
 800dd54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	461a      	mov	r2, r3
 800dd60:	21a5      	movs	r1, #165	; 0xa5
 800dd62:	f002 fb8c 	bl	801047e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dd70:	3b01      	subs	r3, #1
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	4413      	add	r3, r2
 800dd76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	f023 0307 	bic.w	r3, r3, #7
 800dd7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dd80:	69bb      	ldr	r3, [r7, #24]
 800dd82:	f003 0307 	and.w	r3, r3, #7
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d00a      	beq.n	800dda0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800dd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd8e:	f383 8811 	msr	BASEPRI, r3
 800dd92:	f3bf 8f6f 	isb	sy
 800dd96:	f3bf 8f4f 	dsb	sy
 800dd9a:	617b      	str	r3, [r7, #20]
}
 800dd9c:	bf00      	nop
 800dd9e:	e7fe      	b.n	800dd9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d01f      	beq.n	800dde6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dda6:	2300      	movs	r3, #0
 800dda8:	61fb      	str	r3, [r7, #28]
 800ddaa:	e012      	b.n	800ddd2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ddac:	68ba      	ldr	r2, [r7, #8]
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	4413      	add	r3, r2
 800ddb2:	7819      	ldrb	r1, [r3, #0]
 800ddb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	4413      	add	r3, r2
 800ddba:	3334      	adds	r3, #52	; 0x34
 800ddbc:	460a      	mov	r2, r1
 800ddbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ddc0:	68ba      	ldr	r2, [r7, #8]
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	4413      	add	r3, r2
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d006      	beq.n	800ddda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	61fb      	str	r3, [r7, #28]
 800ddd2:	69fb      	ldr	r3, [r7, #28]
 800ddd4:	2b0f      	cmp	r3, #15
 800ddd6:	d9e9      	bls.n	800ddac <prvInitialiseNewTask+0x64>
 800ddd8:	e000      	b.n	800dddc <prvInitialiseNewTask+0x94>
			{
				break;
 800ddda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddde:	2200      	movs	r2, #0
 800dde0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dde4:	e003      	b.n	800ddee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ddee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf0:	2b37      	cmp	r3, #55	; 0x37
 800ddf2:	d901      	bls.n	800ddf8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ddf4:	2337      	movs	r3, #55	; 0x37
 800ddf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ddfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800de04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de06:	2200      	movs	r2, #0
 800de08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800de0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0c:	3304      	adds	r3, #4
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fe feac 	bl	800cb6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800de14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de16:	3318      	adds	r3, #24
 800de18:	4618      	mov	r0, r3
 800de1a:	f7fe fea7 	bl	800cb6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800de1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800de2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800de34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de36:	2200      	movs	r2, #0
 800de38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800de3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de3e:	2200      	movs	r2, #0
 800de40:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800de44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de46:	3354      	adds	r3, #84	; 0x54
 800de48:	2260      	movs	r2, #96	; 0x60
 800de4a:	2100      	movs	r1, #0
 800de4c:	4618      	mov	r0, r3
 800de4e:	f002 fb16 	bl	801047e <memset>
 800de52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de54:	4a0c      	ldr	r2, [pc, #48]	; (800de88 <prvInitialiseNewTask+0x140>)
 800de56:	659a      	str	r2, [r3, #88]	; 0x58
 800de58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5a:	4a0c      	ldr	r2, [pc, #48]	; (800de8c <prvInitialiseNewTask+0x144>)
 800de5c:	65da      	str	r2, [r3, #92]	; 0x5c
 800de5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de60:	4a0b      	ldr	r2, [pc, #44]	; (800de90 <prvInitialiseNewTask+0x148>)
 800de62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800de64:	683a      	ldr	r2, [r7, #0]
 800de66:	68f9      	ldr	r1, [r7, #12]
 800de68:	69b8      	ldr	r0, [r7, #24]
 800de6a:	f001 fd9b 	bl	800f9a4 <pxPortInitialiseStack>
 800de6e:	4602      	mov	r2, r0
 800de70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800de74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de76:	2b00      	cmp	r3, #0
 800de78:	d002      	beq.n	800de80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800de7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de80:	bf00      	nop
 800de82:	3720      	adds	r7, #32
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	08015a34 	.word	0x08015a34
 800de8c:	08015a54 	.word	0x08015a54
 800de90:	08015a14 	.word	0x08015a14

0800de94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800de9c:	f001 feb2 	bl	800fc04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dea0:	4b2d      	ldr	r3, [pc, #180]	; (800df58 <prvAddNewTaskToReadyList+0xc4>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	3301      	adds	r3, #1
 800dea6:	4a2c      	ldr	r2, [pc, #176]	; (800df58 <prvAddNewTaskToReadyList+0xc4>)
 800dea8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800deaa:	4b2c      	ldr	r3, [pc, #176]	; (800df5c <prvAddNewTaskToReadyList+0xc8>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d109      	bne.n	800dec6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800deb2:	4a2a      	ldr	r2, [pc, #168]	; (800df5c <prvAddNewTaskToReadyList+0xc8>)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800deb8:	4b27      	ldr	r3, [pc, #156]	; (800df58 <prvAddNewTaskToReadyList+0xc4>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	2b01      	cmp	r3, #1
 800debe:	d110      	bne.n	800dee2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dec0:	f000 fcb6 	bl	800e830 <prvInitialiseTaskLists>
 800dec4:	e00d      	b.n	800dee2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dec6:	4b26      	ldr	r3, [pc, #152]	; (800df60 <prvAddNewTaskToReadyList+0xcc>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d109      	bne.n	800dee2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dece:	4b23      	ldr	r3, [pc, #140]	; (800df5c <prvAddNewTaskToReadyList+0xc8>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded8:	429a      	cmp	r2, r3
 800deda:	d802      	bhi.n	800dee2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dedc:	4a1f      	ldr	r2, [pc, #124]	; (800df5c <prvAddNewTaskToReadyList+0xc8>)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dee2:	4b20      	ldr	r3, [pc, #128]	; (800df64 <prvAddNewTaskToReadyList+0xd0>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	3301      	adds	r3, #1
 800dee8:	4a1e      	ldr	r2, [pc, #120]	; (800df64 <prvAddNewTaskToReadyList+0xd0>)
 800deea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800deec:	4b1d      	ldr	r3, [pc, #116]	; (800df64 <prvAddNewTaskToReadyList+0xd0>)
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800def8:	4b1b      	ldr	r3, [pc, #108]	; (800df68 <prvAddNewTaskToReadyList+0xd4>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	429a      	cmp	r2, r3
 800defe:	d903      	bls.n	800df08 <prvAddNewTaskToReadyList+0x74>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df04:	4a18      	ldr	r2, [pc, #96]	; (800df68 <prvAddNewTaskToReadyList+0xd4>)
 800df06:	6013      	str	r3, [r2, #0]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df0c:	4613      	mov	r3, r2
 800df0e:	009b      	lsls	r3, r3, #2
 800df10:	4413      	add	r3, r2
 800df12:	009b      	lsls	r3, r3, #2
 800df14:	4a15      	ldr	r2, [pc, #84]	; (800df6c <prvAddNewTaskToReadyList+0xd8>)
 800df16:	441a      	add	r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	3304      	adds	r3, #4
 800df1c:	4619      	mov	r1, r3
 800df1e:	4610      	mov	r0, r2
 800df20:	f7fe fe31 	bl	800cb86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800df24:	f001 fe9e 	bl	800fc64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800df28:	4b0d      	ldr	r3, [pc, #52]	; (800df60 <prvAddNewTaskToReadyList+0xcc>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00e      	beq.n	800df4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800df30:	4b0a      	ldr	r3, [pc, #40]	; (800df5c <prvAddNewTaskToReadyList+0xc8>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d207      	bcs.n	800df4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800df3e:	4b0c      	ldr	r3, [pc, #48]	; (800df70 <prvAddNewTaskToReadyList+0xdc>)
 800df40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df44:	601a      	str	r2, [r3, #0]
 800df46:	f3bf 8f4f 	dsb	sy
 800df4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df4e:	bf00      	nop
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	20001ddc 	.word	0x20001ddc
 800df5c:	20001908 	.word	0x20001908
 800df60:	20001de8 	.word	0x20001de8
 800df64:	20001df8 	.word	0x20001df8
 800df68:	20001de4 	.word	0x20001de4
 800df6c:	2000190c 	.word	0x2000190c
 800df70:	e000ed04 	.word	0xe000ed04

0800df74 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800df74:	b580      	push	{r7, lr}
 800df76:	b08a      	sub	sp, #40	; 0x28
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800df7e:	2300      	movs	r3, #0
 800df80:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d10a      	bne.n	800df9e <vTaskDelayUntil+0x2a>
	__asm volatile
 800df88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8c:	f383 8811 	msr	BASEPRI, r3
 800df90:	f3bf 8f6f 	isb	sy
 800df94:	f3bf 8f4f 	dsb	sy
 800df98:	617b      	str	r3, [r7, #20]
}
 800df9a:	bf00      	nop
 800df9c:	e7fe      	b.n	800df9c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d10a      	bne.n	800dfba <vTaskDelayUntil+0x46>
	__asm volatile
 800dfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa8:	f383 8811 	msr	BASEPRI, r3
 800dfac:	f3bf 8f6f 	isb	sy
 800dfb0:	f3bf 8f4f 	dsb	sy
 800dfb4:	613b      	str	r3, [r7, #16]
}
 800dfb6:	bf00      	nop
 800dfb8:	e7fe      	b.n	800dfb8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800dfba:	4b2a      	ldr	r3, [pc, #168]	; (800e064 <vTaskDelayUntil+0xf0>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d00a      	beq.n	800dfd8 <vTaskDelayUntil+0x64>
	__asm volatile
 800dfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc6:	f383 8811 	msr	BASEPRI, r3
 800dfca:	f3bf 8f6f 	isb	sy
 800dfce:	f3bf 8f4f 	dsb	sy
 800dfd2:	60fb      	str	r3, [r7, #12]
}
 800dfd4:	bf00      	nop
 800dfd6:	e7fe      	b.n	800dfd6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800dfd8:	f000 f8ee 	bl	800e1b8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800dfdc:	4b22      	ldr	r3, [pc, #136]	; (800e068 <vTaskDelayUntil+0xf4>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	683a      	ldr	r2, [r7, #0]
 800dfe8:	4413      	add	r3, r2
 800dfea:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	6a3a      	ldr	r2, [r7, #32]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d20b      	bcs.n	800e00e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	69fa      	ldr	r2, [r7, #28]
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d211      	bcs.n	800e024 <vTaskDelayUntil+0xb0>
 800e000:	69fa      	ldr	r2, [r7, #28]
 800e002:	6a3b      	ldr	r3, [r7, #32]
 800e004:	429a      	cmp	r2, r3
 800e006:	d90d      	bls.n	800e024 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e008:	2301      	movs	r3, #1
 800e00a:	627b      	str	r3, [r7, #36]	; 0x24
 800e00c:	e00a      	b.n	800e024 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	69fa      	ldr	r2, [r7, #28]
 800e014:	429a      	cmp	r2, r3
 800e016:	d303      	bcc.n	800e020 <vTaskDelayUntil+0xac>
 800e018:	69fa      	ldr	r2, [r7, #28]
 800e01a:	6a3b      	ldr	r3, [r7, #32]
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d901      	bls.n	800e024 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e020:	2301      	movs	r3, #1
 800e022:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	69fa      	ldr	r2, [r7, #28]
 800e028:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d006      	beq.n	800e03e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e030:	69fa      	ldr	r2, [r7, #28]
 800e032:	6a3b      	ldr	r3, [r7, #32]
 800e034:	1ad3      	subs	r3, r2, r3
 800e036:	2100      	movs	r1, #0
 800e038:	4618      	mov	r0, r3
 800e03a:	f001 f857 	bl	800f0ec <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e03e:	f000 f8c9 	bl	800e1d4 <xTaskResumeAll>
 800e042:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d107      	bne.n	800e05a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e04a:	4b08      	ldr	r3, [pc, #32]	; (800e06c <vTaskDelayUntil+0xf8>)
 800e04c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e050:	601a      	str	r2, [r3, #0]
 800e052:	f3bf 8f4f 	dsb	sy
 800e056:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e05a:	bf00      	nop
 800e05c:	3728      	adds	r7, #40	; 0x28
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	20001e04 	.word	0x20001e04
 800e068:	20001de0 	.word	0x20001de0
 800e06c:	e000ed04 	.word	0xe000ed04

0800e070 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e070:	b580      	push	{r7, lr}
 800e072:	b084      	sub	sp, #16
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e078:	2300      	movs	r3, #0
 800e07a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d017      	beq.n	800e0b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e082:	4b13      	ldr	r3, [pc, #76]	; (800e0d0 <vTaskDelay+0x60>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00a      	beq.n	800e0a0 <vTaskDelay+0x30>
	__asm volatile
 800e08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	f3bf 8f4f 	dsb	sy
 800e09a:	60bb      	str	r3, [r7, #8]
}
 800e09c:	bf00      	nop
 800e09e:	e7fe      	b.n	800e09e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e0a0:	f000 f88a 	bl	800e1b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e0a4:	2100      	movs	r1, #0
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f001 f820 	bl	800f0ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e0ac:	f000 f892 	bl	800e1d4 <xTaskResumeAll>
 800e0b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d107      	bne.n	800e0c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e0b8:	4b06      	ldr	r3, [pc, #24]	; (800e0d4 <vTaskDelay+0x64>)
 800e0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0be:	601a      	str	r2, [r3, #0]
 800e0c0:	f3bf 8f4f 	dsb	sy
 800e0c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e0c8:	bf00      	nop
 800e0ca:	3710      	adds	r7, #16
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	20001e04 	.word	0x20001e04
 800e0d4:	e000ed04 	.word	0xe000ed04

0800e0d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b08a      	sub	sp, #40	; 0x28
 800e0dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e0e6:	463a      	mov	r2, r7
 800e0e8:	1d39      	adds	r1, r7, #4
 800e0ea:	f107 0308 	add.w	r3, r7, #8
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7fe fce8 	bl	800cac4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e0f4:	6839      	ldr	r1, [r7, #0]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	68ba      	ldr	r2, [r7, #8]
 800e0fa:	9202      	str	r2, [sp, #8]
 800e0fc:	9301      	str	r3, [sp, #4]
 800e0fe:	2300      	movs	r3, #0
 800e100:	9300      	str	r3, [sp, #0]
 800e102:	2300      	movs	r3, #0
 800e104:	460a      	mov	r2, r1
 800e106:	4924      	ldr	r1, [pc, #144]	; (800e198 <vTaskStartScheduler+0xc0>)
 800e108:	4824      	ldr	r0, [pc, #144]	; (800e19c <vTaskStartScheduler+0xc4>)
 800e10a:	f7ff fd7b 	bl	800dc04 <xTaskCreateStatic>
 800e10e:	4603      	mov	r3, r0
 800e110:	4a23      	ldr	r2, [pc, #140]	; (800e1a0 <vTaskStartScheduler+0xc8>)
 800e112:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e114:	4b22      	ldr	r3, [pc, #136]	; (800e1a0 <vTaskStartScheduler+0xc8>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d002      	beq.n	800e122 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e11c:	2301      	movs	r3, #1
 800e11e:	617b      	str	r3, [r7, #20]
 800e120:	e001      	b.n	800e126 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e122:	2300      	movs	r3, #0
 800e124:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d102      	bne.n	800e132 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e12c:	f001 f832 	bl	800f194 <xTimerCreateTimerTask>
 800e130:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	2b01      	cmp	r3, #1
 800e136:	d11b      	bne.n	800e170 <vTaskStartScheduler+0x98>
	__asm volatile
 800e138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13c:	f383 8811 	msr	BASEPRI, r3
 800e140:	f3bf 8f6f 	isb	sy
 800e144:	f3bf 8f4f 	dsb	sy
 800e148:	613b      	str	r3, [r7, #16]
}
 800e14a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e14c:	4b15      	ldr	r3, [pc, #84]	; (800e1a4 <vTaskStartScheduler+0xcc>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	3354      	adds	r3, #84	; 0x54
 800e152:	4a15      	ldr	r2, [pc, #84]	; (800e1a8 <vTaskStartScheduler+0xd0>)
 800e154:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e156:	4b15      	ldr	r3, [pc, #84]	; (800e1ac <vTaskStartScheduler+0xd4>)
 800e158:	f04f 32ff 	mov.w	r2, #4294967295
 800e15c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e15e:	4b14      	ldr	r3, [pc, #80]	; (800e1b0 <vTaskStartScheduler+0xd8>)
 800e160:	2201      	movs	r2, #1
 800e162:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e164:	4b13      	ldr	r3, [pc, #76]	; (800e1b4 <vTaskStartScheduler+0xdc>)
 800e166:	2200      	movs	r2, #0
 800e168:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e16a:	f001 fca9 	bl	800fac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e16e:	e00e      	b.n	800e18e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e176:	d10a      	bne.n	800e18e <vTaskStartScheduler+0xb6>
	__asm volatile
 800e178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17c:	f383 8811 	msr	BASEPRI, r3
 800e180:	f3bf 8f6f 	isb	sy
 800e184:	f3bf 8f4f 	dsb	sy
 800e188:	60fb      	str	r3, [r7, #12]
}
 800e18a:	bf00      	nop
 800e18c:	e7fe      	b.n	800e18c <vTaskStartScheduler+0xb4>
}
 800e18e:	bf00      	nop
 800e190:	3718      	adds	r7, #24
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	08015870 	.word	0x08015870
 800e19c:	0800e801 	.word	0x0800e801
 800e1a0:	20001e00 	.word	0x20001e00
 800e1a4:	20001908 	.word	0x20001908
 800e1a8:	200000a0 	.word	0x200000a0
 800e1ac:	20001dfc 	.word	0x20001dfc
 800e1b0:	20001de8 	.word	0x20001de8
 800e1b4:	20001de0 	.word	0x20001de0

0800e1b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e1bc:	4b04      	ldr	r3, [pc, #16]	; (800e1d0 <vTaskSuspendAll+0x18>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	4a03      	ldr	r2, [pc, #12]	; (800e1d0 <vTaskSuspendAll+0x18>)
 800e1c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e1c6:	bf00      	nop
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr
 800e1d0:	20001e04 	.word	0x20001e04

0800e1d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b084      	sub	sp, #16
 800e1d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e1e2:	4b42      	ldr	r3, [pc, #264]	; (800e2ec <xTaskResumeAll+0x118>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d10a      	bne.n	800e200 <xTaskResumeAll+0x2c>
	__asm volatile
 800e1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ee:	f383 8811 	msr	BASEPRI, r3
 800e1f2:	f3bf 8f6f 	isb	sy
 800e1f6:	f3bf 8f4f 	dsb	sy
 800e1fa:	603b      	str	r3, [r7, #0]
}
 800e1fc:	bf00      	nop
 800e1fe:	e7fe      	b.n	800e1fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e200:	f001 fd00 	bl	800fc04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e204:	4b39      	ldr	r3, [pc, #228]	; (800e2ec <xTaskResumeAll+0x118>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	3b01      	subs	r3, #1
 800e20a:	4a38      	ldr	r2, [pc, #224]	; (800e2ec <xTaskResumeAll+0x118>)
 800e20c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e20e:	4b37      	ldr	r3, [pc, #220]	; (800e2ec <xTaskResumeAll+0x118>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d162      	bne.n	800e2dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e216:	4b36      	ldr	r3, [pc, #216]	; (800e2f0 <xTaskResumeAll+0x11c>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d05e      	beq.n	800e2dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e21e:	e02f      	b.n	800e280 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e220:	4b34      	ldr	r3, [pc, #208]	; (800e2f4 <xTaskResumeAll+0x120>)
 800e222:	68db      	ldr	r3, [r3, #12]
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	3318      	adds	r3, #24
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7fe fd07 	bl	800cc40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	3304      	adds	r3, #4
 800e236:	4618      	mov	r0, r3
 800e238:	f7fe fd02 	bl	800cc40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e240:	4b2d      	ldr	r3, [pc, #180]	; (800e2f8 <xTaskResumeAll+0x124>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	429a      	cmp	r2, r3
 800e246:	d903      	bls.n	800e250 <xTaskResumeAll+0x7c>
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e24c:	4a2a      	ldr	r2, [pc, #168]	; (800e2f8 <xTaskResumeAll+0x124>)
 800e24e:	6013      	str	r3, [r2, #0]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e254:	4613      	mov	r3, r2
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	4413      	add	r3, r2
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	4a27      	ldr	r2, [pc, #156]	; (800e2fc <xTaskResumeAll+0x128>)
 800e25e:	441a      	add	r2, r3
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	3304      	adds	r3, #4
 800e264:	4619      	mov	r1, r3
 800e266:	4610      	mov	r0, r2
 800e268:	f7fe fc8d 	bl	800cb86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e270:	4b23      	ldr	r3, [pc, #140]	; (800e300 <xTaskResumeAll+0x12c>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e276:	429a      	cmp	r2, r3
 800e278:	d302      	bcc.n	800e280 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e27a:	4b22      	ldr	r3, [pc, #136]	; (800e304 <xTaskResumeAll+0x130>)
 800e27c:	2201      	movs	r2, #1
 800e27e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e280:	4b1c      	ldr	r3, [pc, #112]	; (800e2f4 <xTaskResumeAll+0x120>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d1cb      	bne.n	800e220 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d001      	beq.n	800e292 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e28e:	f000 fb71 	bl	800e974 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e292:	4b1d      	ldr	r3, [pc, #116]	; (800e308 <xTaskResumeAll+0x134>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d010      	beq.n	800e2c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e29e:	f000 f859 	bl	800e354 <xTaskIncrementTick>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d002      	beq.n	800e2ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e2a8:	4b16      	ldr	r3, [pc, #88]	; (800e304 <xTaskResumeAll+0x130>)
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	3b01      	subs	r3, #1
 800e2b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d1f1      	bne.n	800e29e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e2ba:	4b13      	ldr	r3, [pc, #76]	; (800e308 <xTaskResumeAll+0x134>)
 800e2bc:	2200      	movs	r2, #0
 800e2be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e2c0:	4b10      	ldr	r3, [pc, #64]	; (800e304 <xTaskResumeAll+0x130>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d009      	beq.n	800e2dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e2cc:	4b0f      	ldr	r3, [pc, #60]	; (800e30c <xTaskResumeAll+0x138>)
 800e2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2d2:	601a      	str	r2, [r3, #0]
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e2dc:	f001 fcc2 	bl	800fc64 <vPortExitCritical>

	return xAlreadyYielded;
 800e2e0:	68bb      	ldr	r3, [r7, #8]
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	20001e04 	.word	0x20001e04
 800e2f0:	20001ddc 	.word	0x20001ddc
 800e2f4:	20001d9c 	.word	0x20001d9c
 800e2f8:	20001de4 	.word	0x20001de4
 800e2fc:	2000190c 	.word	0x2000190c
 800e300:	20001908 	.word	0x20001908
 800e304:	20001df0 	.word	0x20001df0
 800e308:	20001dec 	.word	0x20001dec
 800e30c:	e000ed04 	.word	0xe000ed04

0800e310 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e310:	b480      	push	{r7}
 800e312:	b083      	sub	sp, #12
 800e314:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e316:	4b05      	ldr	r3, [pc, #20]	; (800e32c <xTaskGetTickCount+0x1c>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e31c:	687b      	ldr	r3, [r7, #4]
}
 800e31e:	4618      	mov	r0, r3
 800e320:	370c      	adds	r7, #12
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr
 800e32a:	bf00      	nop
 800e32c:	20001de0 	.word	0x20001de0

0800e330 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e336:	f001 fd47 	bl	800fdc8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e33a:	2300      	movs	r3, #0
 800e33c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e33e:	4b04      	ldr	r3, [pc, #16]	; (800e350 <xTaskGetTickCountFromISR+0x20>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e344:	683b      	ldr	r3, [r7, #0]
}
 800e346:	4618      	mov	r0, r3
 800e348:	3708      	adds	r7, #8
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	20001de0 	.word	0x20001de0

0800e354 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b086      	sub	sp, #24
 800e358:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e35a:	2300      	movs	r3, #0
 800e35c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e35e:	4b4f      	ldr	r3, [pc, #316]	; (800e49c <xTaskIncrementTick+0x148>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	f040 808f 	bne.w	800e486 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e368:	4b4d      	ldr	r3, [pc, #308]	; (800e4a0 <xTaskIncrementTick+0x14c>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	3301      	adds	r3, #1
 800e36e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e370:	4a4b      	ldr	r2, [pc, #300]	; (800e4a0 <xTaskIncrementTick+0x14c>)
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d120      	bne.n	800e3be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e37c:	4b49      	ldr	r3, [pc, #292]	; (800e4a4 <xTaskIncrementTick+0x150>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00a      	beq.n	800e39c <xTaskIncrementTick+0x48>
	__asm volatile
 800e386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e38a:	f383 8811 	msr	BASEPRI, r3
 800e38e:	f3bf 8f6f 	isb	sy
 800e392:	f3bf 8f4f 	dsb	sy
 800e396:	603b      	str	r3, [r7, #0]
}
 800e398:	bf00      	nop
 800e39a:	e7fe      	b.n	800e39a <xTaskIncrementTick+0x46>
 800e39c:	4b41      	ldr	r3, [pc, #260]	; (800e4a4 <xTaskIncrementTick+0x150>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	60fb      	str	r3, [r7, #12]
 800e3a2:	4b41      	ldr	r3, [pc, #260]	; (800e4a8 <xTaskIncrementTick+0x154>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	4a3f      	ldr	r2, [pc, #252]	; (800e4a4 <xTaskIncrementTick+0x150>)
 800e3a8:	6013      	str	r3, [r2, #0]
 800e3aa:	4a3f      	ldr	r2, [pc, #252]	; (800e4a8 <xTaskIncrementTick+0x154>)
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	6013      	str	r3, [r2, #0]
 800e3b0:	4b3e      	ldr	r3, [pc, #248]	; (800e4ac <xTaskIncrementTick+0x158>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	4a3d      	ldr	r2, [pc, #244]	; (800e4ac <xTaskIncrementTick+0x158>)
 800e3b8:	6013      	str	r3, [r2, #0]
 800e3ba:	f000 fadb 	bl	800e974 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e3be:	4b3c      	ldr	r3, [pc, #240]	; (800e4b0 <xTaskIncrementTick+0x15c>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	693a      	ldr	r2, [r7, #16]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d349      	bcc.n	800e45c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3c8:	4b36      	ldr	r3, [pc, #216]	; (800e4a4 <xTaskIncrementTick+0x150>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d104      	bne.n	800e3dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3d2:	4b37      	ldr	r3, [pc, #220]	; (800e4b0 <xTaskIncrementTick+0x15c>)
 800e3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d8:	601a      	str	r2, [r3, #0]
					break;
 800e3da:	e03f      	b.n	800e45c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3dc:	4b31      	ldr	r3, [pc, #196]	; (800e4a4 <xTaskIncrementTick+0x150>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	685b      	ldr	r3, [r3, #4]
 800e3ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e3ec:	693a      	ldr	r2, [r7, #16]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d203      	bcs.n	800e3fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e3f4:	4a2e      	ldr	r2, [pc, #184]	; (800e4b0 <xTaskIncrementTick+0x15c>)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e3fa:	e02f      	b.n	800e45c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	3304      	adds	r3, #4
 800e400:	4618      	mov	r0, r3
 800e402:	f7fe fc1d 	bl	800cc40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d004      	beq.n	800e418 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	3318      	adds	r3, #24
 800e412:	4618      	mov	r0, r3
 800e414:	f7fe fc14 	bl	800cc40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e41c:	4b25      	ldr	r3, [pc, #148]	; (800e4b4 <xTaskIncrementTick+0x160>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	429a      	cmp	r2, r3
 800e422:	d903      	bls.n	800e42c <xTaskIncrementTick+0xd8>
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e428:	4a22      	ldr	r2, [pc, #136]	; (800e4b4 <xTaskIncrementTick+0x160>)
 800e42a:	6013      	str	r3, [r2, #0]
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e430:	4613      	mov	r3, r2
 800e432:	009b      	lsls	r3, r3, #2
 800e434:	4413      	add	r3, r2
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	4a1f      	ldr	r2, [pc, #124]	; (800e4b8 <xTaskIncrementTick+0x164>)
 800e43a:	441a      	add	r2, r3
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	3304      	adds	r3, #4
 800e440:	4619      	mov	r1, r3
 800e442:	4610      	mov	r0, r2
 800e444:	f7fe fb9f 	bl	800cb86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e44c:	4b1b      	ldr	r3, [pc, #108]	; (800e4bc <xTaskIncrementTick+0x168>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e452:	429a      	cmp	r2, r3
 800e454:	d3b8      	bcc.n	800e3c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e456:	2301      	movs	r3, #1
 800e458:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e45a:	e7b5      	b.n	800e3c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e45c:	4b17      	ldr	r3, [pc, #92]	; (800e4bc <xTaskIncrementTick+0x168>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e462:	4915      	ldr	r1, [pc, #84]	; (800e4b8 <xTaskIncrementTick+0x164>)
 800e464:	4613      	mov	r3, r2
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	4413      	add	r3, r2
 800e46a:	009b      	lsls	r3, r3, #2
 800e46c:	440b      	add	r3, r1
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2b01      	cmp	r3, #1
 800e472:	d901      	bls.n	800e478 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e474:	2301      	movs	r3, #1
 800e476:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e478:	4b11      	ldr	r3, [pc, #68]	; (800e4c0 <xTaskIncrementTick+0x16c>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d007      	beq.n	800e490 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e480:	2301      	movs	r3, #1
 800e482:	617b      	str	r3, [r7, #20]
 800e484:	e004      	b.n	800e490 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e486:	4b0f      	ldr	r3, [pc, #60]	; (800e4c4 <xTaskIncrementTick+0x170>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	3301      	adds	r3, #1
 800e48c:	4a0d      	ldr	r2, [pc, #52]	; (800e4c4 <xTaskIncrementTick+0x170>)
 800e48e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e490:	697b      	ldr	r3, [r7, #20]
}
 800e492:	4618      	mov	r0, r3
 800e494:	3718      	adds	r7, #24
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop
 800e49c:	20001e04 	.word	0x20001e04
 800e4a0:	20001de0 	.word	0x20001de0
 800e4a4:	20001d94 	.word	0x20001d94
 800e4a8:	20001d98 	.word	0x20001d98
 800e4ac:	20001df4 	.word	0x20001df4
 800e4b0:	20001dfc 	.word	0x20001dfc
 800e4b4:	20001de4 	.word	0x20001de4
 800e4b8:	2000190c 	.word	0x2000190c
 800e4bc:	20001908 	.word	0x20001908
 800e4c0:	20001df0 	.word	0x20001df0
 800e4c4:	20001dec 	.word	0x20001dec

0800e4c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b085      	sub	sp, #20
 800e4cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e4ce:	4b2a      	ldr	r3, [pc, #168]	; (800e578 <vTaskSwitchContext+0xb0>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d003      	beq.n	800e4de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e4d6:	4b29      	ldr	r3, [pc, #164]	; (800e57c <vTaskSwitchContext+0xb4>)
 800e4d8:	2201      	movs	r2, #1
 800e4da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e4dc:	e046      	b.n	800e56c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e4de:	4b27      	ldr	r3, [pc, #156]	; (800e57c <vTaskSwitchContext+0xb4>)
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4e4:	4b26      	ldr	r3, [pc, #152]	; (800e580 <vTaskSwitchContext+0xb8>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	60fb      	str	r3, [r7, #12]
 800e4ea:	e010      	b.n	800e50e <vTaskSwitchContext+0x46>
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d10a      	bne.n	800e508 <vTaskSwitchContext+0x40>
	__asm volatile
 800e4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f6:	f383 8811 	msr	BASEPRI, r3
 800e4fa:	f3bf 8f6f 	isb	sy
 800e4fe:	f3bf 8f4f 	dsb	sy
 800e502:	607b      	str	r3, [r7, #4]
}
 800e504:	bf00      	nop
 800e506:	e7fe      	b.n	800e506 <vTaskSwitchContext+0x3e>
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	3b01      	subs	r3, #1
 800e50c:	60fb      	str	r3, [r7, #12]
 800e50e:	491d      	ldr	r1, [pc, #116]	; (800e584 <vTaskSwitchContext+0xbc>)
 800e510:	68fa      	ldr	r2, [r7, #12]
 800e512:	4613      	mov	r3, r2
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	4413      	add	r3, r2
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	440b      	add	r3, r1
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d0e4      	beq.n	800e4ec <vTaskSwitchContext+0x24>
 800e522:	68fa      	ldr	r2, [r7, #12]
 800e524:	4613      	mov	r3, r2
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	4413      	add	r3, r2
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	4a15      	ldr	r2, [pc, #84]	; (800e584 <vTaskSwitchContext+0xbc>)
 800e52e:	4413      	add	r3, r2
 800e530:	60bb      	str	r3, [r7, #8]
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	685b      	ldr	r3, [r3, #4]
 800e536:	685a      	ldr	r2, [r3, #4]
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	605a      	str	r2, [r3, #4]
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	685a      	ldr	r2, [r3, #4]
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	3308      	adds	r3, #8
 800e544:	429a      	cmp	r2, r3
 800e546:	d104      	bne.n	800e552 <vTaskSwitchContext+0x8a>
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	685b      	ldr	r3, [r3, #4]
 800e54c:	685a      	ldr	r2, [r3, #4]
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	605a      	str	r2, [r3, #4]
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	685b      	ldr	r3, [r3, #4]
 800e556:	68db      	ldr	r3, [r3, #12]
 800e558:	4a0b      	ldr	r2, [pc, #44]	; (800e588 <vTaskSwitchContext+0xc0>)
 800e55a:	6013      	str	r3, [r2, #0]
 800e55c:	4a08      	ldr	r2, [pc, #32]	; (800e580 <vTaskSwitchContext+0xb8>)
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e562:	4b09      	ldr	r3, [pc, #36]	; (800e588 <vTaskSwitchContext+0xc0>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	3354      	adds	r3, #84	; 0x54
 800e568:	4a08      	ldr	r2, [pc, #32]	; (800e58c <vTaskSwitchContext+0xc4>)
 800e56a:	6013      	str	r3, [r2, #0]
}
 800e56c:	bf00      	nop
 800e56e:	3714      	adds	r7, #20
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr
 800e578:	20001e04 	.word	0x20001e04
 800e57c:	20001df0 	.word	0x20001df0
 800e580:	20001de4 	.word	0x20001de4
 800e584:	2000190c 	.word	0x2000190c
 800e588:	20001908 	.word	0x20001908
 800e58c:	200000a0 	.word	0x200000a0

0800e590 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b084      	sub	sp, #16
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d10a      	bne.n	800e5b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a4:	f383 8811 	msr	BASEPRI, r3
 800e5a8:	f3bf 8f6f 	isb	sy
 800e5ac:	f3bf 8f4f 	dsb	sy
 800e5b0:	60fb      	str	r3, [r7, #12]
}
 800e5b2:	bf00      	nop
 800e5b4:	e7fe      	b.n	800e5b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e5b6:	4b07      	ldr	r3, [pc, #28]	; (800e5d4 <vTaskPlaceOnEventList+0x44>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	3318      	adds	r3, #24
 800e5bc:	4619      	mov	r1, r3
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f7fe fb05 	bl	800cbce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e5c4:	2101      	movs	r1, #1
 800e5c6:	6838      	ldr	r0, [r7, #0]
 800e5c8:	f000 fd90 	bl	800f0ec <prvAddCurrentTaskToDelayedList>
}
 800e5cc:	bf00      	nop
 800e5ce:	3710      	adds	r7, #16
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	20001908 	.word	0x20001908

0800e5d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b086      	sub	sp, #24
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	60b9      	str	r1, [r7, #8]
 800e5e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d10a      	bne.n	800e600 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	617b      	str	r3, [r7, #20]
}
 800e5fc:	bf00      	nop
 800e5fe:	e7fe      	b.n	800e5fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e600:	4b0a      	ldr	r3, [pc, #40]	; (800e62c <vTaskPlaceOnEventListRestricted+0x54>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	3318      	adds	r3, #24
 800e606:	4619      	mov	r1, r3
 800e608:	68f8      	ldr	r0, [r7, #12]
 800e60a:	f7fe fabc 	bl	800cb86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d002      	beq.n	800e61a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e614:	f04f 33ff 	mov.w	r3, #4294967295
 800e618:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e61a:	6879      	ldr	r1, [r7, #4]
 800e61c:	68b8      	ldr	r0, [r7, #8]
 800e61e:	f000 fd65 	bl	800f0ec <prvAddCurrentTaskToDelayedList>
	}
 800e622:	bf00      	nop
 800e624:	3718      	adds	r7, #24
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	20001908 	.word	0x20001908

0800e630 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b086      	sub	sp, #24
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	68db      	ldr	r3, [r3, #12]
 800e63c:	68db      	ldr	r3, [r3, #12]
 800e63e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d10a      	bne.n	800e65c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e64a:	f383 8811 	msr	BASEPRI, r3
 800e64e:	f3bf 8f6f 	isb	sy
 800e652:	f3bf 8f4f 	dsb	sy
 800e656:	60fb      	str	r3, [r7, #12]
}
 800e658:	bf00      	nop
 800e65a:	e7fe      	b.n	800e65a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	3318      	adds	r3, #24
 800e660:	4618      	mov	r0, r3
 800e662:	f7fe faed 	bl	800cc40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e666:	4b1e      	ldr	r3, [pc, #120]	; (800e6e0 <xTaskRemoveFromEventList+0xb0>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d11d      	bne.n	800e6aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	3304      	adds	r3, #4
 800e672:	4618      	mov	r0, r3
 800e674:	f7fe fae4 	bl	800cc40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e67c:	4b19      	ldr	r3, [pc, #100]	; (800e6e4 <xTaskRemoveFromEventList+0xb4>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	429a      	cmp	r2, r3
 800e682:	d903      	bls.n	800e68c <xTaskRemoveFromEventList+0x5c>
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e688:	4a16      	ldr	r2, [pc, #88]	; (800e6e4 <xTaskRemoveFromEventList+0xb4>)
 800e68a:	6013      	str	r3, [r2, #0]
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e690:	4613      	mov	r3, r2
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	4413      	add	r3, r2
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	4a13      	ldr	r2, [pc, #76]	; (800e6e8 <xTaskRemoveFromEventList+0xb8>)
 800e69a:	441a      	add	r2, r3
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	3304      	adds	r3, #4
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	4610      	mov	r0, r2
 800e6a4:	f7fe fa6f 	bl	800cb86 <vListInsertEnd>
 800e6a8:	e005      	b.n	800e6b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	3318      	adds	r3, #24
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	480e      	ldr	r0, [pc, #56]	; (800e6ec <xTaskRemoveFromEventList+0xbc>)
 800e6b2:	f7fe fa68 	bl	800cb86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ba:	4b0d      	ldr	r3, [pc, #52]	; (800e6f0 <xTaskRemoveFromEventList+0xc0>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d905      	bls.n	800e6d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e6c8:	4b0a      	ldr	r3, [pc, #40]	; (800e6f4 <xTaskRemoveFromEventList+0xc4>)
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	601a      	str	r2, [r3, #0]
 800e6ce:	e001      	b.n	800e6d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e6d4:	697b      	ldr	r3, [r7, #20]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3718      	adds	r7, #24
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	20001e04 	.word	0x20001e04
 800e6e4:	20001de4 	.word	0x20001de4
 800e6e8:	2000190c 	.word	0x2000190c
 800e6ec:	20001d9c 	.word	0x20001d9c
 800e6f0:	20001908 	.word	0x20001908
 800e6f4:	20001df0 	.word	0x20001df0

0800e6f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e700:	4b06      	ldr	r3, [pc, #24]	; (800e71c <vTaskInternalSetTimeOutState+0x24>)
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e708:	4b05      	ldr	r3, [pc, #20]	; (800e720 <vTaskInternalSetTimeOutState+0x28>)
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	605a      	str	r2, [r3, #4]
}
 800e710:	bf00      	nop
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr
 800e71c:	20001df4 	.word	0x20001df4
 800e720:	20001de0 	.word	0x20001de0

0800e724 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b088      	sub	sp, #32
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d10a      	bne.n	800e74a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e738:	f383 8811 	msr	BASEPRI, r3
 800e73c:	f3bf 8f6f 	isb	sy
 800e740:	f3bf 8f4f 	dsb	sy
 800e744:	613b      	str	r3, [r7, #16]
}
 800e746:	bf00      	nop
 800e748:	e7fe      	b.n	800e748 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d10a      	bne.n	800e766 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e754:	f383 8811 	msr	BASEPRI, r3
 800e758:	f3bf 8f6f 	isb	sy
 800e75c:	f3bf 8f4f 	dsb	sy
 800e760:	60fb      	str	r3, [r7, #12]
}
 800e762:	bf00      	nop
 800e764:	e7fe      	b.n	800e764 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e766:	f001 fa4d 	bl	800fc04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e76a:	4b1d      	ldr	r3, [pc, #116]	; (800e7e0 <xTaskCheckForTimeOut+0xbc>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	69ba      	ldr	r2, [r7, #24]
 800e776:	1ad3      	subs	r3, r2, r3
 800e778:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e782:	d102      	bne.n	800e78a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e784:	2300      	movs	r3, #0
 800e786:	61fb      	str	r3, [r7, #28]
 800e788:	e023      	b.n	800e7d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	4b15      	ldr	r3, [pc, #84]	; (800e7e4 <xTaskCheckForTimeOut+0xc0>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	429a      	cmp	r2, r3
 800e794:	d007      	beq.n	800e7a6 <xTaskCheckForTimeOut+0x82>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	69ba      	ldr	r2, [r7, #24]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d302      	bcc.n	800e7a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	61fb      	str	r3, [r7, #28]
 800e7a4:	e015      	b.n	800e7d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	697a      	ldr	r2, [r7, #20]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d20b      	bcs.n	800e7c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	1ad2      	subs	r2, r2, r3
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f7ff ff9b 	bl	800e6f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	61fb      	str	r3, [r7, #28]
 800e7c6:	e004      	b.n	800e7d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e7d2:	f001 fa47 	bl	800fc64 <vPortExitCritical>

	return xReturn;
 800e7d6:	69fb      	ldr	r3, [r7, #28]
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3720      	adds	r7, #32
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}
 800e7e0:	20001de0 	.word	0x20001de0
 800e7e4:	20001df4 	.word	0x20001df4

0800e7e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e7ec:	4b03      	ldr	r3, [pc, #12]	; (800e7fc <vTaskMissedYield+0x14>)
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	601a      	str	r2, [r3, #0]
}
 800e7f2:	bf00      	nop
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr
 800e7fc:	20001df0 	.word	0x20001df0

0800e800 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e808:	f000 f852 	bl	800e8b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e80c:	4b06      	ldr	r3, [pc, #24]	; (800e828 <prvIdleTask+0x28>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	2b01      	cmp	r3, #1
 800e812:	d9f9      	bls.n	800e808 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e814:	4b05      	ldr	r3, [pc, #20]	; (800e82c <prvIdleTask+0x2c>)
 800e816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e81a:	601a      	str	r2, [r3, #0]
 800e81c:	f3bf 8f4f 	dsb	sy
 800e820:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e824:	e7f0      	b.n	800e808 <prvIdleTask+0x8>
 800e826:	bf00      	nop
 800e828:	2000190c 	.word	0x2000190c
 800e82c:	e000ed04 	.word	0xe000ed04

0800e830 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e836:	2300      	movs	r3, #0
 800e838:	607b      	str	r3, [r7, #4]
 800e83a:	e00c      	b.n	800e856 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e83c:	687a      	ldr	r2, [r7, #4]
 800e83e:	4613      	mov	r3, r2
 800e840:	009b      	lsls	r3, r3, #2
 800e842:	4413      	add	r3, r2
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	4a12      	ldr	r2, [pc, #72]	; (800e890 <prvInitialiseTaskLists+0x60>)
 800e848:	4413      	add	r3, r2
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7fe f96e 	bl	800cb2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	3301      	adds	r3, #1
 800e854:	607b      	str	r3, [r7, #4]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2b37      	cmp	r3, #55	; 0x37
 800e85a:	d9ef      	bls.n	800e83c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e85c:	480d      	ldr	r0, [pc, #52]	; (800e894 <prvInitialiseTaskLists+0x64>)
 800e85e:	f7fe f965 	bl	800cb2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e862:	480d      	ldr	r0, [pc, #52]	; (800e898 <prvInitialiseTaskLists+0x68>)
 800e864:	f7fe f962 	bl	800cb2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e868:	480c      	ldr	r0, [pc, #48]	; (800e89c <prvInitialiseTaskLists+0x6c>)
 800e86a:	f7fe f95f 	bl	800cb2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e86e:	480c      	ldr	r0, [pc, #48]	; (800e8a0 <prvInitialiseTaskLists+0x70>)
 800e870:	f7fe f95c 	bl	800cb2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e874:	480b      	ldr	r0, [pc, #44]	; (800e8a4 <prvInitialiseTaskLists+0x74>)
 800e876:	f7fe f959 	bl	800cb2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e87a:	4b0b      	ldr	r3, [pc, #44]	; (800e8a8 <prvInitialiseTaskLists+0x78>)
 800e87c:	4a05      	ldr	r2, [pc, #20]	; (800e894 <prvInitialiseTaskLists+0x64>)
 800e87e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e880:	4b0a      	ldr	r3, [pc, #40]	; (800e8ac <prvInitialiseTaskLists+0x7c>)
 800e882:	4a05      	ldr	r2, [pc, #20]	; (800e898 <prvInitialiseTaskLists+0x68>)
 800e884:	601a      	str	r2, [r3, #0]
}
 800e886:	bf00      	nop
 800e888:	3708      	adds	r7, #8
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	2000190c 	.word	0x2000190c
 800e894:	20001d6c 	.word	0x20001d6c
 800e898:	20001d80 	.word	0x20001d80
 800e89c:	20001d9c 	.word	0x20001d9c
 800e8a0:	20001db0 	.word	0x20001db0
 800e8a4:	20001dc8 	.word	0x20001dc8
 800e8a8:	20001d94 	.word	0x20001d94
 800e8ac:	20001d98 	.word	0x20001d98

0800e8b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e8b6:	e019      	b.n	800e8ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e8b8:	f001 f9a4 	bl	800fc04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8bc:	4b10      	ldr	r3, [pc, #64]	; (800e900 <prvCheckTasksWaitingTermination+0x50>)
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	68db      	ldr	r3, [r3, #12]
 800e8c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	3304      	adds	r3, #4
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fe f9b9 	bl	800cc40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e8ce:	4b0d      	ldr	r3, [pc, #52]	; (800e904 <prvCheckTasksWaitingTermination+0x54>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	3b01      	subs	r3, #1
 800e8d4:	4a0b      	ldr	r2, [pc, #44]	; (800e904 <prvCheckTasksWaitingTermination+0x54>)
 800e8d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e8d8:	4b0b      	ldr	r3, [pc, #44]	; (800e908 <prvCheckTasksWaitingTermination+0x58>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	3b01      	subs	r3, #1
 800e8de:	4a0a      	ldr	r2, [pc, #40]	; (800e908 <prvCheckTasksWaitingTermination+0x58>)
 800e8e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e8e2:	f001 f9bf 	bl	800fc64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f000 f810 	bl	800e90c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e8ec:	4b06      	ldr	r3, [pc, #24]	; (800e908 <prvCheckTasksWaitingTermination+0x58>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d1e1      	bne.n	800e8b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e8f4:	bf00      	nop
 800e8f6:	bf00      	nop
 800e8f8:	3708      	adds	r7, #8
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	20001db0 	.word	0x20001db0
 800e904:	20001ddc 	.word	0x20001ddc
 800e908:	20001dc4 	.word	0x20001dc4

0800e90c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	3354      	adds	r3, #84	; 0x54
 800e918:	4618      	mov	r0, r3
 800e91a:	f002 fb69 	bl	8010ff0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e924:	2b00      	cmp	r3, #0
 800e926:	d108      	bne.n	800e93a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e92c:	4618      	mov	r0, r3
 800e92e:	f001 fb57 	bl	800ffe0 <vPortFree>
				vPortFree( pxTCB );
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f001 fb54 	bl	800ffe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e938:	e018      	b.n	800e96c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e940:	2b01      	cmp	r3, #1
 800e942:	d103      	bne.n	800e94c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f001 fb4b 	bl	800ffe0 <vPortFree>
	}
 800e94a:	e00f      	b.n	800e96c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e952:	2b02      	cmp	r3, #2
 800e954:	d00a      	beq.n	800e96c <prvDeleteTCB+0x60>
	__asm volatile
 800e956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95a:	f383 8811 	msr	BASEPRI, r3
 800e95e:	f3bf 8f6f 	isb	sy
 800e962:	f3bf 8f4f 	dsb	sy
 800e966:	60fb      	str	r3, [r7, #12]
}
 800e968:	bf00      	nop
 800e96a:	e7fe      	b.n	800e96a <prvDeleteTCB+0x5e>
	}
 800e96c:	bf00      	nop
 800e96e:	3710      	adds	r7, #16
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e97a:	4b0c      	ldr	r3, [pc, #48]	; (800e9ac <prvResetNextTaskUnblockTime+0x38>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d104      	bne.n	800e98e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e984:	4b0a      	ldr	r3, [pc, #40]	; (800e9b0 <prvResetNextTaskUnblockTime+0x3c>)
 800e986:	f04f 32ff 	mov.w	r2, #4294967295
 800e98a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e98c:	e008      	b.n	800e9a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e98e:	4b07      	ldr	r3, [pc, #28]	; (800e9ac <prvResetNextTaskUnblockTime+0x38>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	68db      	ldr	r3, [r3, #12]
 800e994:	68db      	ldr	r3, [r3, #12]
 800e996:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	4a04      	ldr	r2, [pc, #16]	; (800e9b0 <prvResetNextTaskUnblockTime+0x3c>)
 800e99e:	6013      	str	r3, [r2, #0]
}
 800e9a0:	bf00      	nop
 800e9a2:	370c      	adds	r7, #12
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9aa:	4770      	bx	lr
 800e9ac:	20001d94 	.word	0x20001d94
 800e9b0:	20001dfc 	.word	0x20001dfc

0800e9b4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b083      	sub	sp, #12
 800e9b8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e9ba:	4b05      	ldr	r3, [pc, #20]	; (800e9d0 <xTaskGetCurrentTaskHandle+0x1c>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e9c0:	687b      	ldr	r3, [r7, #4]
	}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	370c      	adds	r7, #12
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9cc:	4770      	bx	lr
 800e9ce:	bf00      	nop
 800e9d0:	20001908 	.word	0x20001908

0800e9d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e9da:	4b0b      	ldr	r3, [pc, #44]	; (800ea08 <xTaskGetSchedulerState+0x34>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d102      	bne.n	800e9e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	607b      	str	r3, [r7, #4]
 800e9e6:	e008      	b.n	800e9fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9e8:	4b08      	ldr	r3, [pc, #32]	; (800ea0c <xTaskGetSchedulerState+0x38>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d102      	bne.n	800e9f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e9f0:	2302      	movs	r3, #2
 800e9f2:	607b      	str	r3, [r7, #4]
 800e9f4:	e001      	b.n	800e9fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e9fa:	687b      	ldr	r3, [r7, #4]
	}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	370c      	adds	r7, #12
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr
 800ea08:	20001de8 	.word	0x20001de8
 800ea0c:	20001e04 	.word	0x20001e04

0800ea10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b084      	sub	sp, #16
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d051      	beq.n	800eaca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea2a:	4b2a      	ldr	r3, [pc, #168]	; (800ead4 <xTaskPriorityInherit+0xc4>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d241      	bcs.n	800eab8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	699b      	ldr	r3, [r3, #24]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	db06      	blt.n	800ea4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea3c:	4b25      	ldr	r3, [pc, #148]	; (800ead4 <xTaskPriorityInherit+0xc4>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	6959      	ldr	r1, [r3, #20]
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea52:	4613      	mov	r3, r2
 800ea54:	009b      	lsls	r3, r3, #2
 800ea56:	4413      	add	r3, r2
 800ea58:	009b      	lsls	r3, r3, #2
 800ea5a:	4a1f      	ldr	r2, [pc, #124]	; (800ead8 <xTaskPriorityInherit+0xc8>)
 800ea5c:	4413      	add	r3, r2
 800ea5e:	4299      	cmp	r1, r3
 800ea60:	d122      	bne.n	800eaa8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	3304      	adds	r3, #4
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fe f8ea 	bl	800cc40 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ea6c:	4b19      	ldr	r3, [pc, #100]	; (800ead4 <xTaskPriorityInherit+0xc4>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea7a:	4b18      	ldr	r3, [pc, #96]	; (800eadc <xTaskPriorityInherit+0xcc>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d903      	bls.n	800ea8a <xTaskPriorityInherit+0x7a>
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea86:	4a15      	ldr	r2, [pc, #84]	; (800eadc <xTaskPriorityInherit+0xcc>)
 800ea88:	6013      	str	r3, [r2, #0]
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea8e:	4613      	mov	r3, r2
 800ea90:	009b      	lsls	r3, r3, #2
 800ea92:	4413      	add	r3, r2
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	4a10      	ldr	r2, [pc, #64]	; (800ead8 <xTaskPriorityInherit+0xc8>)
 800ea98:	441a      	add	r2, r3
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	3304      	adds	r3, #4
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	4610      	mov	r0, r2
 800eaa2:	f7fe f870 	bl	800cb86 <vListInsertEnd>
 800eaa6:	e004      	b.n	800eab2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eaa8:	4b0a      	ldr	r3, [pc, #40]	; (800ead4 <xTaskPriorityInherit+0xc4>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eab2:	2301      	movs	r3, #1
 800eab4:	60fb      	str	r3, [r7, #12]
 800eab6:	e008      	b.n	800eaca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eabc:	4b05      	ldr	r3, [pc, #20]	; (800ead4 <xTaskPriorityInherit+0xc4>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d201      	bcs.n	800eaca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eac6:	2301      	movs	r3, #1
 800eac8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eaca:	68fb      	ldr	r3, [r7, #12]
	}
 800eacc:	4618      	mov	r0, r3
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	20001908 	.word	0x20001908
 800ead8:	2000190c 	.word	0x2000190c
 800eadc:	20001de4 	.word	0x20001de4

0800eae0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b086      	sub	sp, #24
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eaec:	2300      	movs	r3, #0
 800eaee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d056      	beq.n	800eba4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eaf6:	4b2e      	ldr	r3, [pc, #184]	; (800ebb0 <xTaskPriorityDisinherit+0xd0>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	693a      	ldr	r2, [r7, #16]
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d00a      	beq.n	800eb16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800eb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb04:	f383 8811 	msr	BASEPRI, r3
 800eb08:	f3bf 8f6f 	isb	sy
 800eb0c:	f3bf 8f4f 	dsb	sy
 800eb10:	60fb      	str	r3, [r7, #12]
}
 800eb12:	bf00      	nop
 800eb14:	e7fe      	b.n	800eb14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d10a      	bne.n	800eb34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800eb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb22:	f383 8811 	msr	BASEPRI, r3
 800eb26:	f3bf 8f6f 	isb	sy
 800eb2a:	f3bf 8f4f 	dsb	sy
 800eb2e:	60bb      	str	r3, [r7, #8]
}
 800eb30:	bf00      	nop
 800eb32:	e7fe      	b.n	800eb32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb38:	1e5a      	subs	r2, r3, #1
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d02c      	beq.n	800eba4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d128      	bne.n	800eba4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	3304      	adds	r3, #4
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7fe f872 	bl	800cc40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb74:	4b0f      	ldr	r3, [pc, #60]	; (800ebb4 <xTaskPriorityDisinherit+0xd4>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d903      	bls.n	800eb84 <xTaskPriorityDisinherit+0xa4>
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb80:	4a0c      	ldr	r2, [pc, #48]	; (800ebb4 <xTaskPriorityDisinherit+0xd4>)
 800eb82:	6013      	str	r3, [r2, #0]
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb88:	4613      	mov	r3, r2
 800eb8a:	009b      	lsls	r3, r3, #2
 800eb8c:	4413      	add	r3, r2
 800eb8e:	009b      	lsls	r3, r3, #2
 800eb90:	4a09      	ldr	r2, [pc, #36]	; (800ebb8 <xTaskPriorityDisinherit+0xd8>)
 800eb92:	441a      	add	r2, r3
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	3304      	adds	r3, #4
 800eb98:	4619      	mov	r1, r3
 800eb9a:	4610      	mov	r0, r2
 800eb9c:	f7fd fff3 	bl	800cb86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eba0:	2301      	movs	r3, #1
 800eba2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eba4:	697b      	ldr	r3, [r7, #20]
	}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3718      	adds	r7, #24
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	20001908 	.word	0x20001908
 800ebb4:	20001de4 	.word	0x20001de4
 800ebb8:	2000190c 	.word	0x2000190c

0800ebbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b088      	sub	sp, #32
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d06a      	beq.n	800ecaa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ebd4:	69bb      	ldr	r3, [r7, #24]
 800ebd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d10a      	bne.n	800ebf2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ebdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe0:	f383 8811 	msr	BASEPRI, r3
 800ebe4:	f3bf 8f6f 	isb	sy
 800ebe8:	f3bf 8f4f 	dsb	sy
 800ebec:	60fb      	str	r3, [r7, #12]
}
 800ebee:	bf00      	nop
 800ebf0:	e7fe      	b.n	800ebf0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ebf2:	69bb      	ldr	r3, [r7, #24]
 800ebf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebf6:	683a      	ldr	r2, [r7, #0]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d902      	bls.n	800ec02 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	61fb      	str	r3, [r7, #28]
 800ec00:	e002      	b.n	800ec08 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ec02:	69bb      	ldr	r3, [r7, #24]
 800ec04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec06:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec0c:	69fa      	ldr	r2, [r7, #28]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d04b      	beq.n	800ecaa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ec12:	69bb      	ldr	r3, [r7, #24]
 800ec14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec16:	697a      	ldr	r2, [r7, #20]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d146      	bne.n	800ecaa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ec1c:	4b25      	ldr	r3, [pc, #148]	; (800ecb4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	69ba      	ldr	r2, [r7, #24]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d10a      	bne.n	800ec3c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ec26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec2a:	f383 8811 	msr	BASEPRI, r3
 800ec2e:	f3bf 8f6f 	isb	sy
 800ec32:	f3bf 8f4f 	dsb	sy
 800ec36:	60bb      	str	r3, [r7, #8]
}
 800ec38:	bf00      	nop
 800ec3a:	e7fe      	b.n	800ec3a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec40:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	69fa      	ldr	r2, [r7, #28]
 800ec46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	699b      	ldr	r3, [r3, #24]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	db04      	blt.n	800ec5a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ec56:	69bb      	ldr	r3, [r7, #24]
 800ec58:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ec5a:	69bb      	ldr	r3, [r7, #24]
 800ec5c:	6959      	ldr	r1, [r3, #20]
 800ec5e:	693a      	ldr	r2, [r7, #16]
 800ec60:	4613      	mov	r3, r2
 800ec62:	009b      	lsls	r3, r3, #2
 800ec64:	4413      	add	r3, r2
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	4a13      	ldr	r2, [pc, #76]	; (800ecb8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ec6a:	4413      	add	r3, r2
 800ec6c:	4299      	cmp	r1, r3
 800ec6e:	d11c      	bne.n	800ecaa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	3304      	adds	r3, #4
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fd ffe3 	bl	800cc40 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ec7a:	69bb      	ldr	r3, [r7, #24]
 800ec7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec7e:	4b0f      	ldr	r3, [pc, #60]	; (800ecbc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d903      	bls.n	800ec8e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec8a:	4a0c      	ldr	r2, [pc, #48]	; (800ecbc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ec8c:	6013      	str	r3, [r2, #0]
 800ec8e:	69bb      	ldr	r3, [r7, #24]
 800ec90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec92:	4613      	mov	r3, r2
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	4413      	add	r3, r2
 800ec98:	009b      	lsls	r3, r3, #2
 800ec9a:	4a07      	ldr	r2, [pc, #28]	; (800ecb8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ec9c:	441a      	add	r2, r3
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	3304      	adds	r3, #4
 800eca2:	4619      	mov	r1, r3
 800eca4:	4610      	mov	r0, r2
 800eca6:	f7fd ff6e 	bl	800cb86 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecaa:	bf00      	nop
 800ecac:	3720      	adds	r7, #32
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	bf00      	nop
 800ecb4:	20001908 	.word	0x20001908
 800ecb8:	2000190c 	.word	0x2000190c
 800ecbc:	20001de4 	.word	0x20001de4

0800ecc0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ecc0:	b480      	push	{r7}
 800ecc2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ecc4:	4b07      	ldr	r3, [pc, #28]	; (800ece4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d004      	beq.n	800ecd6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eccc:	4b05      	ldr	r3, [pc, #20]	; (800ece4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ecd2:	3201      	adds	r2, #1
 800ecd4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ecd6:	4b03      	ldr	r3, [pc, #12]	; (800ece4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
	}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr
 800ece4:	20001908 	.word	0x20001908

0800ece8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b086      	sub	sp, #24
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	60f8      	str	r0, [r7, #12]
 800ecf0:	60b9      	str	r1, [r7, #8]
 800ecf2:	607a      	str	r2, [r7, #4]
 800ecf4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ecf6:	f000 ff85 	bl	800fc04 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ecfa:	4b29      	ldr	r3, [pc, #164]	; (800eda0 <xTaskNotifyWait+0xb8>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	2b02      	cmp	r3, #2
 800ed06:	d01c      	beq.n	800ed42 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ed08:	4b25      	ldr	r3, [pc, #148]	; (800eda0 <xTaskNotifyWait+0xb8>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	43d2      	mvns	r2, r2
 800ed14:	400a      	ands	r2, r1
 800ed16:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ed1a:	4b21      	ldr	r3, [pc, #132]	; (800eda0 <xTaskNotifyWait+0xb8>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d00b      	beq.n	800ed42 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ed2a:	2101      	movs	r1, #1
 800ed2c:	6838      	ldr	r0, [r7, #0]
 800ed2e:	f000 f9dd 	bl	800f0ec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ed32:	4b1c      	ldr	r3, [pc, #112]	; (800eda4 <xTaskNotifyWait+0xbc>)
 800ed34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed38:	601a      	str	r2, [r3, #0]
 800ed3a:	f3bf 8f4f 	dsb	sy
 800ed3e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ed42:	f000 ff8f 	bl	800fc64 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ed46:	f000 ff5d 	bl	800fc04 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d005      	beq.n	800ed5c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ed50:	4b13      	ldr	r3, [pc, #76]	; (800eda0 <xTaskNotifyWait+0xb8>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ed5c:	4b10      	ldr	r3, [pc, #64]	; (800eda0 <xTaskNotifyWait+0xb8>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ed64:	b2db      	uxtb	r3, r3
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	d002      	beq.n	800ed70 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	617b      	str	r3, [r7, #20]
 800ed6e:	e00a      	b.n	800ed86 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ed70:	4b0b      	ldr	r3, [pc, #44]	; (800eda0 <xTaskNotifyWait+0xb8>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800ed78:	68ba      	ldr	r2, [r7, #8]
 800ed7a:	43d2      	mvns	r2, r2
 800ed7c:	400a      	ands	r2, r1
 800ed7e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800ed82:	2301      	movs	r3, #1
 800ed84:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ed86:	4b06      	ldr	r3, [pc, #24]	; (800eda0 <xTaskNotifyWait+0xb8>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800ed90:	f000 ff68 	bl	800fc64 <vPortExitCritical>

		return xReturn;
 800ed94:	697b      	ldr	r3, [r7, #20]
	}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3718      	adds	r7, #24
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	20001908 	.word	0x20001908
 800eda4:	e000ed04 	.word	0xe000ed04

0800eda8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b08a      	sub	sp, #40	; 0x28
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	603b      	str	r3, [r7, #0]
 800edb4:	4613      	mov	r3, r2
 800edb6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800edb8:	2301      	movs	r3, #1
 800edba:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d10a      	bne.n	800edd8 <xTaskGenericNotify+0x30>
	__asm volatile
 800edc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc6:	f383 8811 	msr	BASEPRI, r3
 800edca:	f3bf 8f6f 	isb	sy
 800edce:	f3bf 8f4f 	dsb	sy
 800edd2:	61bb      	str	r3, [r7, #24]
}
 800edd4:	bf00      	nop
 800edd6:	e7fe      	b.n	800edd6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800eddc:	f000 ff12 	bl	800fc04 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d004      	beq.n	800edf0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ede6:	6a3b      	ldr	r3, [r7, #32]
 800ede8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800edf0:	6a3b      	ldr	r3, [r7, #32]
 800edf2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800edf6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800edf8:	6a3b      	ldr	r3, [r7, #32]
 800edfa:	2202      	movs	r2, #2
 800edfc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800ee00:	79fb      	ldrb	r3, [r7, #7]
 800ee02:	2b04      	cmp	r3, #4
 800ee04:	d82d      	bhi.n	800ee62 <xTaskGenericNotify+0xba>
 800ee06:	a201      	add	r2, pc, #4	; (adr r2, 800ee0c <xTaskGenericNotify+0x64>)
 800ee08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee0c:	0800ee85 	.word	0x0800ee85
 800ee10:	0800ee21 	.word	0x0800ee21
 800ee14:	0800ee33 	.word	0x0800ee33
 800ee18:	0800ee43 	.word	0x0800ee43
 800ee1c:	0800ee4d 	.word	0x0800ee4d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ee20:	6a3b      	ldr	r3, [r7, #32]
 800ee22:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	431a      	orrs	r2, r3
 800ee2a:	6a3b      	ldr	r3, [r7, #32]
 800ee2c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ee30:	e02b      	b.n	800ee8a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ee32:	6a3b      	ldr	r3, [r7, #32]
 800ee34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ee38:	1c5a      	adds	r2, r3, #1
 800ee3a:	6a3b      	ldr	r3, [r7, #32]
 800ee3c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ee40:	e023      	b.n	800ee8a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ee42:	6a3b      	ldr	r3, [r7, #32]
 800ee44:	68ba      	ldr	r2, [r7, #8]
 800ee46:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ee4a:	e01e      	b.n	800ee8a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ee4c:	7ffb      	ldrb	r3, [r7, #31]
 800ee4e:	2b02      	cmp	r3, #2
 800ee50:	d004      	beq.n	800ee5c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ee52:	6a3b      	ldr	r3, [r7, #32]
 800ee54:	68ba      	ldr	r2, [r7, #8]
 800ee56:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ee5a:	e016      	b.n	800ee8a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800ee60:	e013      	b.n	800ee8a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ee62:	6a3b      	ldr	r3, [r7, #32]
 800ee64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ee68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee6c:	d00c      	beq.n	800ee88 <xTaskGenericNotify+0xe0>
	__asm volatile
 800ee6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee72:	f383 8811 	msr	BASEPRI, r3
 800ee76:	f3bf 8f6f 	isb	sy
 800ee7a:	f3bf 8f4f 	dsb	sy
 800ee7e:	617b      	str	r3, [r7, #20]
}
 800ee80:	bf00      	nop
 800ee82:	e7fe      	b.n	800ee82 <xTaskGenericNotify+0xda>
					break;
 800ee84:	bf00      	nop
 800ee86:	e000      	b.n	800ee8a <xTaskGenericNotify+0xe2>

					break;
 800ee88:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ee8a:	7ffb      	ldrb	r3, [r7, #31]
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d13a      	bne.n	800ef06 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee90:	6a3b      	ldr	r3, [r7, #32]
 800ee92:	3304      	adds	r3, #4
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fd fed3 	bl	800cc40 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ee9a:	6a3b      	ldr	r3, [r7, #32]
 800ee9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee9e:	4b1d      	ldr	r3, [pc, #116]	; (800ef14 <xTaskGenericNotify+0x16c>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d903      	bls.n	800eeae <xTaskGenericNotify+0x106>
 800eea6:	6a3b      	ldr	r3, [r7, #32]
 800eea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeaa:	4a1a      	ldr	r2, [pc, #104]	; (800ef14 <xTaskGenericNotify+0x16c>)
 800eeac:	6013      	str	r3, [r2, #0]
 800eeae:	6a3b      	ldr	r3, [r7, #32]
 800eeb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb2:	4613      	mov	r3, r2
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	4413      	add	r3, r2
 800eeb8:	009b      	lsls	r3, r3, #2
 800eeba:	4a17      	ldr	r2, [pc, #92]	; (800ef18 <xTaskGenericNotify+0x170>)
 800eebc:	441a      	add	r2, r3
 800eebe:	6a3b      	ldr	r3, [r7, #32]
 800eec0:	3304      	adds	r3, #4
 800eec2:	4619      	mov	r1, r3
 800eec4:	4610      	mov	r0, r2
 800eec6:	f7fd fe5e 	bl	800cb86 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800eeca:	6a3b      	ldr	r3, [r7, #32]
 800eecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00a      	beq.n	800eee8 <xTaskGenericNotify+0x140>
	__asm volatile
 800eed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed6:	f383 8811 	msr	BASEPRI, r3
 800eeda:	f3bf 8f6f 	isb	sy
 800eede:	f3bf 8f4f 	dsb	sy
 800eee2:	613b      	str	r3, [r7, #16]
}
 800eee4:	bf00      	nop
 800eee6:	e7fe      	b.n	800eee6 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eee8:	6a3b      	ldr	r3, [r7, #32]
 800eeea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeec:	4b0b      	ldr	r3, [pc, #44]	; (800ef1c <xTaskGenericNotify+0x174>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d907      	bls.n	800ef06 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800eef6:	4b0a      	ldr	r3, [pc, #40]	; (800ef20 <xTaskGenericNotify+0x178>)
 800eef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eefc:	601a      	str	r2, [r3, #0]
 800eefe:	f3bf 8f4f 	dsb	sy
 800ef02:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ef06:	f000 fead 	bl	800fc64 <vPortExitCritical>

		return xReturn;
 800ef0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3728      	adds	r7, #40	; 0x28
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	20001de4 	.word	0x20001de4
 800ef18:	2000190c 	.word	0x2000190c
 800ef1c:	20001908 	.word	0x20001908
 800ef20:	e000ed04 	.word	0xe000ed04

0800ef24 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b08e      	sub	sp, #56	; 0x38
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	60b9      	str	r1, [r7, #8]
 800ef2e:	603b      	str	r3, [r7, #0]
 800ef30:	4613      	mov	r3, r2
 800ef32:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ef34:	2301      	movs	r3, #1
 800ef36:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d10a      	bne.n	800ef54 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800ef3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef42:	f383 8811 	msr	BASEPRI, r3
 800ef46:	f3bf 8f6f 	isb	sy
 800ef4a:	f3bf 8f4f 	dsb	sy
 800ef4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ef50:	bf00      	nop
 800ef52:	e7fe      	b.n	800ef52 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef54:	f000 ff38 	bl	800fdc8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800ef5c:	f3ef 8211 	mrs	r2, BASEPRI
 800ef60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef64:	f383 8811 	msr	BASEPRI, r3
 800ef68:	f3bf 8f6f 	isb	sy
 800ef6c:	f3bf 8f4f 	dsb	sy
 800ef70:	623a      	str	r2, [r7, #32]
 800ef72:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ef74:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef76:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d004      	beq.n	800ef88 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ef7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef80:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ef88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ef8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ef92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef94:	2202      	movs	r2, #2
 800ef96:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800ef9a:	79fb      	ldrb	r3, [r7, #7]
 800ef9c:	2b04      	cmp	r3, #4
 800ef9e:	d82f      	bhi.n	800f000 <xTaskGenericNotifyFromISR+0xdc>
 800efa0:	a201      	add	r2, pc, #4	; (adr r2, 800efa8 <xTaskGenericNotifyFromISR+0x84>)
 800efa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa6:	bf00      	nop
 800efa8:	0800f023 	.word	0x0800f023
 800efac:	0800efbd 	.word	0x0800efbd
 800efb0:	0800efcf 	.word	0x0800efcf
 800efb4:	0800efdf 	.word	0x0800efdf
 800efb8:	0800efe9 	.word	0x0800efe9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800efbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	431a      	orrs	r2, r3
 800efc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800efcc:	e02c      	b.n	800f028 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800efce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800efd4:	1c5a      	adds	r2, r3, #1
 800efd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800efdc:	e024      	b.n	800f028 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800efde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe0:	68ba      	ldr	r2, [r7, #8]
 800efe2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800efe6:	e01f      	b.n	800f028 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800efe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800efec:	2b02      	cmp	r3, #2
 800efee:	d004      	beq.n	800effa <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800eff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff2:	68ba      	ldr	r2, [r7, #8]
 800eff4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800eff8:	e016      	b.n	800f028 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800effa:	2300      	movs	r3, #0
 800effc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800effe:	e013      	b.n	800f028 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f002:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f00a:	d00c      	beq.n	800f026 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800f00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f010:	f383 8811 	msr	BASEPRI, r3
 800f014:	f3bf 8f6f 	isb	sy
 800f018:	f3bf 8f4f 	dsb	sy
 800f01c:	61bb      	str	r3, [r7, #24]
}
 800f01e:	bf00      	nop
 800f020:	e7fe      	b.n	800f020 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800f022:	bf00      	nop
 800f024:	e000      	b.n	800f028 <xTaskGenericNotifyFromISR+0x104>
					break;
 800f026:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f028:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d146      	bne.n	800f0be <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f034:	2b00      	cmp	r3, #0
 800f036:	d00a      	beq.n	800f04e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800f038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03c:	f383 8811 	msr	BASEPRI, r3
 800f040:	f3bf 8f6f 	isb	sy
 800f044:	f3bf 8f4f 	dsb	sy
 800f048:	617b      	str	r3, [r7, #20]
}
 800f04a:	bf00      	nop
 800f04c:	e7fe      	b.n	800f04c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f04e:	4b21      	ldr	r3, [pc, #132]	; (800f0d4 <xTaskGenericNotifyFromISR+0x1b0>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d11d      	bne.n	800f092 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f058:	3304      	adds	r3, #4
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7fd fdf0 	bl	800cc40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f064:	4b1c      	ldr	r3, [pc, #112]	; (800f0d8 <xTaskGenericNotifyFromISR+0x1b4>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d903      	bls.n	800f074 <xTaskGenericNotifyFromISR+0x150>
 800f06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f070:	4a19      	ldr	r2, [pc, #100]	; (800f0d8 <xTaskGenericNotifyFromISR+0x1b4>)
 800f072:	6013      	str	r3, [r2, #0]
 800f074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f078:	4613      	mov	r3, r2
 800f07a:	009b      	lsls	r3, r3, #2
 800f07c:	4413      	add	r3, r2
 800f07e:	009b      	lsls	r3, r3, #2
 800f080:	4a16      	ldr	r2, [pc, #88]	; (800f0dc <xTaskGenericNotifyFromISR+0x1b8>)
 800f082:	441a      	add	r2, r3
 800f084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f086:	3304      	adds	r3, #4
 800f088:	4619      	mov	r1, r3
 800f08a:	4610      	mov	r0, r2
 800f08c:	f7fd fd7b 	bl	800cb86 <vListInsertEnd>
 800f090:	e005      	b.n	800f09e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f094:	3318      	adds	r3, #24
 800f096:	4619      	mov	r1, r3
 800f098:	4811      	ldr	r0, [pc, #68]	; (800f0e0 <xTaskGenericNotifyFromISR+0x1bc>)
 800f09a:	f7fd fd74 	bl	800cb86 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0a2:	4b10      	ldr	r3, [pc, #64]	; (800f0e4 <xTaskGenericNotifyFromISR+0x1c0>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d908      	bls.n	800f0be <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f0ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d002      	beq.n	800f0b8 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f0b8:	4b0b      	ldr	r3, [pc, #44]	; (800f0e8 <xTaskGenericNotifyFromISR+0x1c4>)
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	601a      	str	r2, [r3, #0]
 800f0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	f383 8811 	msr	BASEPRI, r3
}
 800f0c8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3738      	adds	r7, #56	; 0x38
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}
 800f0d4:	20001e04 	.word	0x20001e04
 800f0d8:	20001de4 	.word	0x20001de4
 800f0dc:	2000190c 	.word	0x2000190c
 800f0e0:	20001d9c 	.word	0x20001d9c
 800f0e4:	20001908 	.word	0x20001908
 800f0e8:	20001df0 	.word	0x20001df0

0800f0ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f0f6:	4b21      	ldr	r3, [pc, #132]	; (800f17c <prvAddCurrentTaskToDelayedList+0x90>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0fc:	4b20      	ldr	r3, [pc, #128]	; (800f180 <prvAddCurrentTaskToDelayedList+0x94>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	3304      	adds	r3, #4
 800f102:	4618      	mov	r0, r3
 800f104:	f7fd fd9c 	bl	800cc40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f10e:	d10a      	bne.n	800f126 <prvAddCurrentTaskToDelayedList+0x3a>
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d007      	beq.n	800f126 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f116:	4b1a      	ldr	r3, [pc, #104]	; (800f180 <prvAddCurrentTaskToDelayedList+0x94>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	3304      	adds	r3, #4
 800f11c:	4619      	mov	r1, r3
 800f11e:	4819      	ldr	r0, [pc, #100]	; (800f184 <prvAddCurrentTaskToDelayedList+0x98>)
 800f120:	f7fd fd31 	bl	800cb86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f124:	e026      	b.n	800f174 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f126:	68fa      	ldr	r2, [r7, #12]
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	4413      	add	r3, r2
 800f12c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f12e:	4b14      	ldr	r3, [pc, #80]	; (800f180 <prvAddCurrentTaskToDelayedList+0x94>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	68ba      	ldr	r2, [r7, #8]
 800f134:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f136:	68ba      	ldr	r2, [r7, #8]
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d209      	bcs.n	800f152 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f13e:	4b12      	ldr	r3, [pc, #72]	; (800f188 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f140:	681a      	ldr	r2, [r3, #0]
 800f142:	4b0f      	ldr	r3, [pc, #60]	; (800f180 <prvAddCurrentTaskToDelayedList+0x94>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	3304      	adds	r3, #4
 800f148:	4619      	mov	r1, r3
 800f14a:	4610      	mov	r0, r2
 800f14c:	f7fd fd3f 	bl	800cbce <vListInsert>
}
 800f150:	e010      	b.n	800f174 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f152:	4b0e      	ldr	r3, [pc, #56]	; (800f18c <prvAddCurrentTaskToDelayedList+0xa0>)
 800f154:	681a      	ldr	r2, [r3, #0]
 800f156:	4b0a      	ldr	r3, [pc, #40]	; (800f180 <prvAddCurrentTaskToDelayedList+0x94>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	3304      	adds	r3, #4
 800f15c:	4619      	mov	r1, r3
 800f15e:	4610      	mov	r0, r2
 800f160:	f7fd fd35 	bl	800cbce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f164:	4b0a      	ldr	r3, [pc, #40]	; (800f190 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	68ba      	ldr	r2, [r7, #8]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d202      	bcs.n	800f174 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f16e:	4a08      	ldr	r2, [pc, #32]	; (800f190 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	6013      	str	r3, [r2, #0]
}
 800f174:	bf00      	nop
 800f176:	3710      	adds	r7, #16
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	20001de0 	.word	0x20001de0
 800f180:	20001908 	.word	0x20001908
 800f184:	20001dc8 	.word	0x20001dc8
 800f188:	20001d98 	.word	0x20001d98
 800f18c:	20001d94 	.word	0x20001d94
 800f190:	20001dfc 	.word	0x20001dfc

0800f194 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b08a      	sub	sp, #40	; 0x28
 800f198:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f19a:	2300      	movs	r3, #0
 800f19c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f19e:	f000 fba1 	bl	800f8e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f1a2:	4b1c      	ldr	r3, [pc, #112]	; (800f214 <xTimerCreateTimerTask+0x80>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d021      	beq.n	800f1ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f1b2:	1d3a      	adds	r2, r7, #4
 800f1b4:	f107 0108 	add.w	r1, r7, #8
 800f1b8:	f107 030c 	add.w	r3, r7, #12
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7fd fc9b 	bl	800caf8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f1c2:	6879      	ldr	r1, [r7, #4]
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	68fa      	ldr	r2, [r7, #12]
 800f1c8:	9202      	str	r2, [sp, #8]
 800f1ca:	9301      	str	r3, [sp, #4]
 800f1cc:	2302      	movs	r3, #2
 800f1ce:	9300      	str	r3, [sp, #0]
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	460a      	mov	r2, r1
 800f1d4:	4910      	ldr	r1, [pc, #64]	; (800f218 <xTimerCreateTimerTask+0x84>)
 800f1d6:	4811      	ldr	r0, [pc, #68]	; (800f21c <xTimerCreateTimerTask+0x88>)
 800f1d8:	f7fe fd14 	bl	800dc04 <xTaskCreateStatic>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	4a10      	ldr	r2, [pc, #64]	; (800f220 <xTimerCreateTimerTask+0x8c>)
 800f1e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f1e2:	4b0f      	ldr	r3, [pc, #60]	; (800f220 <xTimerCreateTimerTask+0x8c>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d001      	beq.n	800f1ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d10a      	bne.n	800f20a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f8:	f383 8811 	msr	BASEPRI, r3
 800f1fc:	f3bf 8f6f 	isb	sy
 800f200:	f3bf 8f4f 	dsb	sy
 800f204:	613b      	str	r3, [r7, #16]
}
 800f206:	bf00      	nop
 800f208:	e7fe      	b.n	800f208 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f20a:	697b      	ldr	r3, [r7, #20]
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3718      	adds	r7, #24
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	20001e38 	.word	0x20001e38
 800f218:	08015878 	.word	0x08015878
 800f21c:	0800f48d 	.word	0x0800f48d
 800f220:	20001e3c 	.word	0x20001e3c

0800f224 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f224:	b580      	push	{r7, lr}
 800f226:	b088      	sub	sp, #32
 800f228:	af02      	add	r7, sp, #8
 800f22a:	60f8      	str	r0, [r7, #12]
 800f22c:	60b9      	str	r1, [r7, #8]
 800f22e:	607a      	str	r2, [r7, #4]
 800f230:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f232:	202c      	movs	r0, #44	; 0x2c
 800f234:	f000 fe08 	bl	800fe48 <pvPortMalloc>
 800f238:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d00d      	beq.n	800f25c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	2200      	movs	r2, #0
 800f244:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	9301      	str	r3, [sp, #4]
 800f24c:	6a3b      	ldr	r3, [r7, #32]
 800f24e:	9300      	str	r3, [sp, #0]
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	68b9      	ldr	r1, [r7, #8]
 800f256:	68f8      	ldr	r0, [r7, #12]
 800f258:	f000 f843 	bl	800f2e2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f25c:	697b      	ldr	r3, [r7, #20]
	}
 800f25e:	4618      	mov	r0, r3
 800f260:	3718      	adds	r7, #24
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}

0800f266 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800f266:	b580      	push	{r7, lr}
 800f268:	b08a      	sub	sp, #40	; 0x28
 800f26a:	af02      	add	r7, sp, #8
 800f26c:	60f8      	str	r0, [r7, #12]
 800f26e:	60b9      	str	r1, [r7, #8]
 800f270:	607a      	str	r2, [r7, #4]
 800f272:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800f274:	232c      	movs	r3, #44	; 0x2c
 800f276:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	2b2c      	cmp	r3, #44	; 0x2c
 800f27c:	d00a      	beq.n	800f294 <xTimerCreateStatic+0x2e>
	__asm volatile
 800f27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f282:	f383 8811 	msr	BASEPRI, r3
 800f286:	f3bf 8f6f 	isb	sy
 800f28a:	f3bf 8f4f 	dsb	sy
 800f28e:	61bb      	str	r3, [r7, #24]
}
 800f290:	bf00      	nop
 800f292:	e7fe      	b.n	800f292 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f294:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800f296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d10a      	bne.n	800f2b2 <xTimerCreateStatic+0x4c>
	__asm volatile
 800f29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a0:	f383 8811 	msr	BASEPRI, r3
 800f2a4:	f3bf 8f6f 	isb	sy
 800f2a8:	f3bf 8f4f 	dsb	sy
 800f2ac:	617b      	str	r3, [r7, #20]
}
 800f2ae:	bf00      	nop
 800f2b0:	e7fe      	b.n	800f2b0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800f2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d00d      	beq.n	800f2d8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	2202      	movs	r2, #2
 800f2c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f2c4:	69fb      	ldr	r3, [r7, #28]
 800f2c6:	9301      	str	r3, [sp, #4]
 800f2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ca:	9300      	str	r3, [sp, #0]
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	687a      	ldr	r2, [r7, #4]
 800f2d0:	68b9      	ldr	r1, [r7, #8]
 800f2d2:	68f8      	ldr	r0, [r7, #12]
 800f2d4:	f000 f805 	bl	800f2e2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f2d8:	69fb      	ldr	r3, [r7, #28]
	}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3720      	adds	r7, #32
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}

0800f2e2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f2e2:	b580      	push	{r7, lr}
 800f2e4:	b086      	sub	sp, #24
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	60f8      	str	r0, [r7, #12]
 800f2ea:	60b9      	str	r1, [r7, #8]
 800f2ec:	607a      	str	r2, [r7, #4]
 800f2ee:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d10a      	bne.n	800f30c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800f2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fa:	f383 8811 	msr	BASEPRI, r3
 800f2fe:	f3bf 8f6f 	isb	sy
 800f302:	f3bf 8f4f 	dsb	sy
 800f306:	617b      	str	r3, [r7, #20]
}
 800f308:	bf00      	nop
 800f30a:	e7fe      	b.n	800f30a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d01e      	beq.n	800f350 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f312:	f000 fae7 	bl	800f8e4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f318:	68fa      	ldr	r2, [r7, #12]
 800f31a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31e:	68ba      	ldr	r2, [r7, #8]
 800f320:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f324:	683a      	ldr	r2, [r7, #0]
 800f326:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f32a:	6a3a      	ldr	r2, [r7, #32]
 800f32c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f330:	3304      	adds	r3, #4
 800f332:	4618      	mov	r0, r3
 800f334:	f7fd fc1a 	bl	800cb6c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d008      	beq.n	800f350 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f344:	f043 0304 	orr.w	r3, r3, #4
 800f348:	b2da      	uxtb	r2, r3
 800f34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f350:	bf00      	nop
 800f352:	3718      	adds	r7, #24
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b08a      	sub	sp, #40	; 0x28
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	607a      	str	r2, [r7, #4]
 800f364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f366:	2300      	movs	r3, #0
 800f368:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d10a      	bne.n	800f386 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f374:	f383 8811 	msr	BASEPRI, r3
 800f378:	f3bf 8f6f 	isb	sy
 800f37c:	f3bf 8f4f 	dsb	sy
 800f380:	623b      	str	r3, [r7, #32]
}
 800f382:	bf00      	nop
 800f384:	e7fe      	b.n	800f384 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f386:	4b1a      	ldr	r3, [pc, #104]	; (800f3f0 <xTimerGenericCommand+0x98>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d02a      	beq.n	800f3e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	2b05      	cmp	r3, #5
 800f39e:	dc18      	bgt.n	800f3d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f3a0:	f7ff fb18 	bl	800e9d4 <xTaskGetSchedulerState>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	2b02      	cmp	r3, #2
 800f3a8:	d109      	bne.n	800f3be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f3aa:	4b11      	ldr	r3, [pc, #68]	; (800f3f0 <xTimerGenericCommand+0x98>)
 800f3ac:	6818      	ldr	r0, [r3, #0]
 800f3ae:	f107 0110 	add.w	r1, r7, #16
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3b6:	f7fd fecb 	bl	800d150 <xQueueGenericSend>
 800f3ba:	6278      	str	r0, [r7, #36]	; 0x24
 800f3bc:	e012      	b.n	800f3e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f3be:	4b0c      	ldr	r3, [pc, #48]	; (800f3f0 <xTimerGenericCommand+0x98>)
 800f3c0:	6818      	ldr	r0, [r3, #0]
 800f3c2:	f107 0110 	add.w	r1, r7, #16
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	f7fd fec1 	bl	800d150 <xQueueGenericSend>
 800f3ce:	6278      	str	r0, [r7, #36]	; 0x24
 800f3d0:	e008      	b.n	800f3e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f3d2:	4b07      	ldr	r3, [pc, #28]	; (800f3f0 <xTimerGenericCommand+0x98>)
 800f3d4:	6818      	ldr	r0, [r3, #0]
 800f3d6:	f107 0110 	add.w	r1, r7, #16
 800f3da:	2300      	movs	r3, #0
 800f3dc:	683a      	ldr	r2, [r7, #0]
 800f3de:	f7fd ffb5 	bl	800d34c <xQueueGenericSendFromISR>
 800f3e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3728      	adds	r7, #40	; 0x28
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	20001e38 	.word	0x20001e38

0800f3f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b088      	sub	sp, #32
 800f3f8:	af02      	add	r7, sp, #8
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3fe:	4b22      	ldr	r3, [pc, #136]	; (800f488 <prvProcessExpiredTimer+0x94>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	68db      	ldr	r3, [r3, #12]
 800f406:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	3304      	adds	r3, #4
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7fd fc17 	bl	800cc40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f418:	f003 0304 	and.w	r3, r3, #4
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d022      	beq.n	800f466 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	699a      	ldr	r2, [r3, #24]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	18d1      	adds	r1, r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	683a      	ldr	r2, [r7, #0]
 800f42c:	6978      	ldr	r0, [r7, #20]
 800f42e:	f000 f8d1 	bl	800f5d4 <prvInsertTimerInActiveList>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d01f      	beq.n	800f478 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f438:	2300      	movs	r3, #0
 800f43a:	9300      	str	r3, [sp, #0]
 800f43c:	2300      	movs	r3, #0
 800f43e:	687a      	ldr	r2, [r7, #4]
 800f440:	2100      	movs	r1, #0
 800f442:	6978      	ldr	r0, [r7, #20]
 800f444:	f7ff ff88 	bl	800f358 <xTimerGenericCommand>
 800f448:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d113      	bne.n	800f478 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f454:	f383 8811 	msr	BASEPRI, r3
 800f458:	f3bf 8f6f 	isb	sy
 800f45c:	f3bf 8f4f 	dsb	sy
 800f460:	60fb      	str	r3, [r7, #12]
}
 800f462:	bf00      	nop
 800f464:	e7fe      	b.n	800f464 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f46c:	f023 0301 	bic.w	r3, r3, #1
 800f470:	b2da      	uxtb	r2, r3
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	6a1b      	ldr	r3, [r3, #32]
 800f47c:	6978      	ldr	r0, [r7, #20]
 800f47e:	4798      	blx	r3
}
 800f480:	bf00      	nop
 800f482:	3718      	adds	r7, #24
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}
 800f488:	20001e30 	.word	0x20001e30

0800f48c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f494:	f107 0308 	add.w	r3, r7, #8
 800f498:	4618      	mov	r0, r3
 800f49a:	f000 f857 	bl	800f54c <prvGetNextExpireTime>
 800f49e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	68f8      	ldr	r0, [r7, #12]
 800f4a6:	f000 f803 	bl	800f4b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f4aa:	f000 f8d5 	bl	800f658 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f4ae:	e7f1      	b.n	800f494 <prvTimerTask+0x8>

0800f4b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f4ba:	f7fe fe7d 	bl	800e1b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f4be:	f107 0308 	add.w	r3, r7, #8
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f000 f866 	bl	800f594 <prvSampleTimeNow>
 800f4c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d130      	bne.n	800f532 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d10a      	bne.n	800f4ec <prvProcessTimerOrBlockTask+0x3c>
 800f4d6:	687a      	ldr	r2, [r7, #4]
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d806      	bhi.n	800f4ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f4de:	f7fe fe79 	bl	800e1d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f4e2:	68f9      	ldr	r1, [r7, #12]
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f7ff ff85 	bl	800f3f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f4ea:	e024      	b.n	800f536 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d008      	beq.n	800f504 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f4f2:	4b13      	ldr	r3, [pc, #76]	; (800f540 <prvProcessTimerOrBlockTask+0x90>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d101      	bne.n	800f500 <prvProcessTimerOrBlockTask+0x50>
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	e000      	b.n	800f502 <prvProcessTimerOrBlockTask+0x52>
 800f500:	2300      	movs	r3, #0
 800f502:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f504:	4b0f      	ldr	r3, [pc, #60]	; (800f544 <prvProcessTimerOrBlockTask+0x94>)
 800f506:	6818      	ldr	r0, [r3, #0]
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	1ad3      	subs	r3, r2, r3
 800f50e:	683a      	ldr	r2, [r7, #0]
 800f510:	4619      	mov	r1, r3
 800f512:	f7fe fb43 	bl	800db9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f516:	f7fe fe5d 	bl	800e1d4 <xTaskResumeAll>
 800f51a:	4603      	mov	r3, r0
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d10a      	bne.n	800f536 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f520:	4b09      	ldr	r3, [pc, #36]	; (800f548 <prvProcessTimerOrBlockTask+0x98>)
 800f522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f526:	601a      	str	r2, [r3, #0]
 800f528:	f3bf 8f4f 	dsb	sy
 800f52c:	f3bf 8f6f 	isb	sy
}
 800f530:	e001      	b.n	800f536 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f532:	f7fe fe4f 	bl	800e1d4 <xTaskResumeAll>
}
 800f536:	bf00      	nop
 800f538:	3710      	adds	r7, #16
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	20001e34 	.word	0x20001e34
 800f544:	20001e38 	.word	0x20001e38
 800f548:	e000ed04 	.word	0xe000ed04

0800f54c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f54c:	b480      	push	{r7}
 800f54e:	b085      	sub	sp, #20
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f554:	4b0e      	ldr	r3, [pc, #56]	; (800f590 <prvGetNextExpireTime+0x44>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d101      	bne.n	800f562 <prvGetNextExpireTime+0x16>
 800f55e:	2201      	movs	r2, #1
 800f560:	e000      	b.n	800f564 <prvGetNextExpireTime+0x18>
 800f562:	2200      	movs	r2, #0
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d105      	bne.n	800f57c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f570:	4b07      	ldr	r3, [pc, #28]	; (800f590 <prvGetNextExpireTime+0x44>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	68db      	ldr	r3, [r3, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	60fb      	str	r3, [r7, #12]
 800f57a:	e001      	b.n	800f580 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f57c:	2300      	movs	r3, #0
 800f57e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f580:	68fb      	ldr	r3, [r7, #12]
}
 800f582:	4618      	mov	r0, r3
 800f584:	3714      	adds	r7, #20
 800f586:	46bd      	mov	sp, r7
 800f588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58c:	4770      	bx	lr
 800f58e:	bf00      	nop
 800f590:	20001e30 	.word	0x20001e30

0800f594 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f59c:	f7fe feb8 	bl	800e310 <xTaskGetTickCount>
 800f5a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f5a2:	4b0b      	ldr	r3, [pc, #44]	; (800f5d0 <prvSampleTimeNow+0x3c>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	68fa      	ldr	r2, [r7, #12]
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d205      	bcs.n	800f5b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f5ac:	f000 f936 	bl	800f81c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	601a      	str	r2, [r3, #0]
 800f5b6:	e002      	b.n	800f5be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f5be:	4a04      	ldr	r2, [pc, #16]	; (800f5d0 <prvSampleTimeNow+0x3c>)
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3710      	adds	r7, #16
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	20001e40 	.word	0x20001e40

0800f5d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b086      	sub	sp, #24
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	607a      	str	r2, [r7, #4]
 800f5e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	68ba      	ldr	r2, [r7, #8]
 800f5ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	68fa      	ldr	r2, [r7, #12]
 800f5f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f5f2:	68ba      	ldr	r2, [r7, #8]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d812      	bhi.n	800f620 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5fa:	687a      	ldr	r2, [r7, #4]
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	1ad2      	subs	r2, r2, r3
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	699b      	ldr	r3, [r3, #24]
 800f604:	429a      	cmp	r2, r3
 800f606:	d302      	bcc.n	800f60e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f608:	2301      	movs	r3, #1
 800f60a:	617b      	str	r3, [r7, #20]
 800f60c:	e01b      	b.n	800f646 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f60e:	4b10      	ldr	r3, [pc, #64]	; (800f650 <prvInsertTimerInActiveList+0x7c>)
 800f610:	681a      	ldr	r2, [r3, #0]
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	3304      	adds	r3, #4
 800f616:	4619      	mov	r1, r3
 800f618:	4610      	mov	r0, r2
 800f61a:	f7fd fad8 	bl	800cbce <vListInsert>
 800f61e:	e012      	b.n	800f646 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	429a      	cmp	r2, r3
 800f626:	d206      	bcs.n	800f636 <prvInsertTimerInActiveList+0x62>
 800f628:	68ba      	ldr	r2, [r7, #8]
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d302      	bcc.n	800f636 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f630:	2301      	movs	r3, #1
 800f632:	617b      	str	r3, [r7, #20]
 800f634:	e007      	b.n	800f646 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f636:	4b07      	ldr	r3, [pc, #28]	; (800f654 <prvInsertTimerInActiveList+0x80>)
 800f638:	681a      	ldr	r2, [r3, #0]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	3304      	adds	r3, #4
 800f63e:	4619      	mov	r1, r3
 800f640:	4610      	mov	r0, r2
 800f642:	f7fd fac4 	bl	800cbce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f646:	697b      	ldr	r3, [r7, #20]
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3718      	adds	r7, #24
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}
 800f650:	20001e34 	.word	0x20001e34
 800f654:	20001e30 	.word	0x20001e30

0800f658 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b08e      	sub	sp, #56	; 0x38
 800f65c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f65e:	e0ca      	b.n	800f7f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2b00      	cmp	r3, #0
 800f664:	da18      	bge.n	800f698 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f666:	1d3b      	adds	r3, r7, #4
 800f668:	3304      	adds	r3, #4
 800f66a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d10a      	bne.n	800f688 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f676:	f383 8811 	msr	BASEPRI, r3
 800f67a:	f3bf 8f6f 	isb	sy
 800f67e:	f3bf 8f4f 	dsb	sy
 800f682:	61fb      	str	r3, [r7, #28]
}
 800f684:	bf00      	nop
 800f686:	e7fe      	b.n	800f686 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f68e:	6850      	ldr	r0, [r2, #4]
 800f690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f692:	6892      	ldr	r2, [r2, #8]
 800f694:	4611      	mov	r1, r2
 800f696:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	f2c0 80aa 	blt.w	800f7f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a6:	695b      	ldr	r3, [r3, #20]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d004      	beq.n	800f6b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ae:	3304      	adds	r3, #4
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7fd fac5 	bl	800cc40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f6b6:	463b      	mov	r3, r7
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7ff ff6b 	bl	800f594 <prvSampleTimeNow>
 800f6be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2b09      	cmp	r3, #9
 800f6c4:	f200 8097 	bhi.w	800f7f6 <prvProcessReceivedCommands+0x19e>
 800f6c8:	a201      	add	r2, pc, #4	; (adr r2, 800f6d0 <prvProcessReceivedCommands+0x78>)
 800f6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ce:	bf00      	nop
 800f6d0:	0800f6f9 	.word	0x0800f6f9
 800f6d4:	0800f6f9 	.word	0x0800f6f9
 800f6d8:	0800f6f9 	.word	0x0800f6f9
 800f6dc:	0800f76d 	.word	0x0800f76d
 800f6e0:	0800f781 	.word	0x0800f781
 800f6e4:	0800f7cb 	.word	0x0800f7cb
 800f6e8:	0800f6f9 	.word	0x0800f6f9
 800f6ec:	0800f6f9 	.word	0x0800f6f9
 800f6f0:	0800f76d 	.word	0x0800f76d
 800f6f4:	0800f781 	.word	0x0800f781
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f6fe:	f043 0301 	orr.w	r3, r3, #1
 800f702:	b2da      	uxtb	r2, r3
 800f704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f70a:	68ba      	ldr	r2, [r7, #8]
 800f70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f70e:	699b      	ldr	r3, [r3, #24]
 800f710:	18d1      	adds	r1, r2, r3
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f718:	f7ff ff5c 	bl	800f5d4 <prvInsertTimerInActiveList>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d069      	beq.n	800f7f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f724:	6a1b      	ldr	r3, [r3, #32]
 800f726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f728:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f72c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f730:	f003 0304 	and.w	r3, r3, #4
 800f734:	2b00      	cmp	r3, #0
 800f736:	d05e      	beq.n	800f7f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f738:	68ba      	ldr	r2, [r7, #8]
 800f73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f73c:	699b      	ldr	r3, [r3, #24]
 800f73e:	441a      	add	r2, r3
 800f740:	2300      	movs	r3, #0
 800f742:	9300      	str	r3, [sp, #0]
 800f744:	2300      	movs	r3, #0
 800f746:	2100      	movs	r1, #0
 800f748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f74a:	f7ff fe05 	bl	800f358 <xTimerGenericCommand>
 800f74e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f750:	6a3b      	ldr	r3, [r7, #32]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d14f      	bne.n	800f7f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f75a:	f383 8811 	msr	BASEPRI, r3
 800f75e:	f3bf 8f6f 	isb	sy
 800f762:	f3bf 8f4f 	dsb	sy
 800f766:	61bb      	str	r3, [r7, #24]
}
 800f768:	bf00      	nop
 800f76a:	e7fe      	b.n	800f76a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f772:	f023 0301 	bic.w	r3, r3, #1
 800f776:	b2da      	uxtb	r2, r3
 800f778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f77a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f77e:	e03a      	b.n	800f7f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f786:	f043 0301 	orr.w	r3, r3, #1
 800f78a:	b2da      	uxtb	r2, r3
 800f78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f78e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f792:	68ba      	ldr	r2, [r7, #8]
 800f794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f796:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f79a:	699b      	ldr	r3, [r3, #24]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d10a      	bne.n	800f7b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a4:	f383 8811 	msr	BASEPRI, r3
 800f7a8:	f3bf 8f6f 	isb	sy
 800f7ac:	f3bf 8f4f 	dsb	sy
 800f7b0:	617b      	str	r3, [r7, #20]
}
 800f7b2:	bf00      	nop
 800f7b4:	e7fe      	b.n	800f7b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b8:	699a      	ldr	r2, [r3, #24]
 800f7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7bc:	18d1      	adds	r1, r2, r3
 800f7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7c4:	f7ff ff06 	bl	800f5d4 <prvInsertTimerInActiveList>
					break;
 800f7c8:	e015      	b.n	800f7f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7d0:	f003 0302 	and.w	r3, r3, #2
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d103      	bne.n	800f7e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f7d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7da:	f000 fc01 	bl	800ffe0 <vPortFree>
 800f7de:	e00a      	b.n	800f7f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7e6:	f023 0301 	bic.w	r3, r3, #1
 800f7ea:	b2da      	uxtb	r2, r3
 800f7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f7f2:	e000      	b.n	800f7f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f7f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f7f6:	4b08      	ldr	r3, [pc, #32]	; (800f818 <prvProcessReceivedCommands+0x1c0>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	1d39      	adds	r1, r7, #4
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7fd fe40 	bl	800d484 <xQueueReceive>
 800f804:	4603      	mov	r3, r0
 800f806:	2b00      	cmp	r3, #0
 800f808:	f47f af2a 	bne.w	800f660 <prvProcessReceivedCommands+0x8>
	}
}
 800f80c:	bf00      	nop
 800f80e:	bf00      	nop
 800f810:	3730      	adds	r7, #48	; 0x30
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
 800f816:	bf00      	nop
 800f818:	20001e38 	.word	0x20001e38

0800f81c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b088      	sub	sp, #32
 800f820:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f822:	e048      	b.n	800f8b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f824:	4b2d      	ldr	r3, [pc, #180]	; (800f8dc <prvSwitchTimerLists+0xc0>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f82e:	4b2b      	ldr	r3, [pc, #172]	; (800f8dc <prvSwitchTimerLists+0xc0>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	68db      	ldr	r3, [r3, #12]
 800f834:	68db      	ldr	r3, [r3, #12]
 800f836:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	3304      	adds	r3, #4
 800f83c:	4618      	mov	r0, r3
 800f83e:	f7fd f9ff 	bl	800cc40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6a1b      	ldr	r3, [r3, #32]
 800f846:	68f8      	ldr	r0, [r7, #12]
 800f848:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f850:	f003 0304 	and.w	r3, r3, #4
 800f854:	2b00      	cmp	r3, #0
 800f856:	d02e      	beq.n	800f8b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	699b      	ldr	r3, [r3, #24]
 800f85c:	693a      	ldr	r2, [r7, #16]
 800f85e:	4413      	add	r3, r2
 800f860:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f862:	68ba      	ldr	r2, [r7, #8]
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	429a      	cmp	r2, r3
 800f868:	d90e      	bls.n	800f888 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	68ba      	ldr	r2, [r7, #8]
 800f86e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	68fa      	ldr	r2, [r7, #12]
 800f874:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f876:	4b19      	ldr	r3, [pc, #100]	; (800f8dc <prvSwitchTimerLists+0xc0>)
 800f878:	681a      	ldr	r2, [r3, #0]
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	3304      	adds	r3, #4
 800f87e:	4619      	mov	r1, r3
 800f880:	4610      	mov	r0, r2
 800f882:	f7fd f9a4 	bl	800cbce <vListInsert>
 800f886:	e016      	b.n	800f8b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f888:	2300      	movs	r3, #0
 800f88a:	9300      	str	r3, [sp, #0]
 800f88c:	2300      	movs	r3, #0
 800f88e:	693a      	ldr	r2, [r7, #16]
 800f890:	2100      	movs	r1, #0
 800f892:	68f8      	ldr	r0, [r7, #12]
 800f894:	f7ff fd60 	bl	800f358 <xTimerGenericCommand>
 800f898:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d10a      	bne.n	800f8b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a4:	f383 8811 	msr	BASEPRI, r3
 800f8a8:	f3bf 8f6f 	isb	sy
 800f8ac:	f3bf 8f4f 	dsb	sy
 800f8b0:	603b      	str	r3, [r7, #0]
}
 800f8b2:	bf00      	nop
 800f8b4:	e7fe      	b.n	800f8b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f8b6:	4b09      	ldr	r3, [pc, #36]	; (800f8dc <prvSwitchTimerLists+0xc0>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d1b1      	bne.n	800f824 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f8c0:	4b06      	ldr	r3, [pc, #24]	; (800f8dc <prvSwitchTimerLists+0xc0>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f8c6:	4b06      	ldr	r3, [pc, #24]	; (800f8e0 <prvSwitchTimerLists+0xc4>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	4a04      	ldr	r2, [pc, #16]	; (800f8dc <prvSwitchTimerLists+0xc0>)
 800f8cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f8ce:	4a04      	ldr	r2, [pc, #16]	; (800f8e0 <prvSwitchTimerLists+0xc4>)
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	6013      	str	r3, [r2, #0]
}
 800f8d4:	bf00      	nop
 800f8d6:	3718      	adds	r7, #24
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	20001e30 	.word	0x20001e30
 800f8e0:	20001e34 	.word	0x20001e34

0800f8e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f8ea:	f000 f98b 	bl	800fc04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f8ee:	4b15      	ldr	r3, [pc, #84]	; (800f944 <prvCheckForValidListAndQueue+0x60>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d120      	bne.n	800f938 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f8f6:	4814      	ldr	r0, [pc, #80]	; (800f948 <prvCheckForValidListAndQueue+0x64>)
 800f8f8:	f7fd f918 	bl	800cb2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f8fc:	4813      	ldr	r0, [pc, #76]	; (800f94c <prvCheckForValidListAndQueue+0x68>)
 800f8fe:	f7fd f915 	bl	800cb2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f902:	4b13      	ldr	r3, [pc, #76]	; (800f950 <prvCheckForValidListAndQueue+0x6c>)
 800f904:	4a10      	ldr	r2, [pc, #64]	; (800f948 <prvCheckForValidListAndQueue+0x64>)
 800f906:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f908:	4b12      	ldr	r3, [pc, #72]	; (800f954 <prvCheckForValidListAndQueue+0x70>)
 800f90a:	4a10      	ldr	r2, [pc, #64]	; (800f94c <prvCheckForValidListAndQueue+0x68>)
 800f90c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f90e:	2300      	movs	r3, #0
 800f910:	9300      	str	r3, [sp, #0]
 800f912:	4b11      	ldr	r3, [pc, #68]	; (800f958 <prvCheckForValidListAndQueue+0x74>)
 800f914:	4a11      	ldr	r2, [pc, #68]	; (800f95c <prvCheckForValidListAndQueue+0x78>)
 800f916:	2110      	movs	r1, #16
 800f918:	200a      	movs	r0, #10
 800f91a:	f7fd fa23 	bl	800cd64 <xQueueGenericCreateStatic>
 800f91e:	4603      	mov	r3, r0
 800f920:	4a08      	ldr	r2, [pc, #32]	; (800f944 <prvCheckForValidListAndQueue+0x60>)
 800f922:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f924:	4b07      	ldr	r3, [pc, #28]	; (800f944 <prvCheckForValidListAndQueue+0x60>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d005      	beq.n	800f938 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f92c:	4b05      	ldr	r3, [pc, #20]	; (800f944 <prvCheckForValidListAndQueue+0x60>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	490b      	ldr	r1, [pc, #44]	; (800f960 <prvCheckForValidListAndQueue+0x7c>)
 800f932:	4618      	mov	r0, r3
 800f934:	f7fe f8de 	bl	800daf4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f938:	f000 f994 	bl	800fc64 <vPortExitCritical>
}
 800f93c:	bf00      	nop
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	20001e38 	.word	0x20001e38
 800f948:	20001e08 	.word	0x20001e08
 800f94c:	20001e1c 	.word	0x20001e1c
 800f950:	20001e30 	.word	0x20001e30
 800f954:	20001e34 	.word	0x20001e34
 800f958:	20001ee4 	.word	0x20001ee4
 800f95c:	20001e44 	.word	0x20001e44
 800f960:	08015880 	.word	0x08015880

0800f964 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b086      	sub	sp, #24
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d10a      	bne.n	800f98c <pvTimerGetTimerID+0x28>
	__asm volatile
 800f976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f97a:	f383 8811 	msr	BASEPRI, r3
 800f97e:	f3bf 8f6f 	isb	sy
 800f982:	f3bf 8f4f 	dsb	sy
 800f986:	60fb      	str	r3, [r7, #12]
}
 800f988:	bf00      	nop
 800f98a:	e7fe      	b.n	800f98a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800f98c:	f000 f93a 	bl	800fc04 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	69db      	ldr	r3, [r3, #28]
 800f994:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f996:	f000 f965 	bl	800fc64 <vPortExitCritical>

	return pvReturn;
 800f99a:	693b      	ldr	r3, [r7, #16]
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3718      	adds	r7, #24
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b085      	sub	sp, #20
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	60f8      	str	r0, [r7, #12]
 800f9ac:	60b9      	str	r1, [r7, #8]
 800f9ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	3b04      	subs	r3, #4
 800f9b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f9bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	3b04      	subs	r3, #4
 800f9c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	f023 0201 	bic.w	r2, r3, #1
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	3b04      	subs	r3, #4
 800f9d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f9d4:	4a0c      	ldr	r2, [pc, #48]	; (800fa08 <pxPortInitialiseStack+0x64>)
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	3b14      	subs	r3, #20
 800f9de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	3b04      	subs	r3, #4
 800f9ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f06f 0202 	mvn.w	r2, #2
 800f9f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	3b20      	subs	r3, #32
 800f9f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3714      	adds	r7, #20
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr
 800fa08:	0800fa0d 	.word	0x0800fa0d

0800fa0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fa0c:	b480      	push	{r7}
 800fa0e:	b085      	sub	sp, #20
 800fa10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fa12:	2300      	movs	r3, #0
 800fa14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fa16:	4b12      	ldr	r3, [pc, #72]	; (800fa60 <prvTaskExitError+0x54>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa1e:	d00a      	beq.n	800fa36 <prvTaskExitError+0x2a>
	__asm volatile
 800fa20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa24:	f383 8811 	msr	BASEPRI, r3
 800fa28:	f3bf 8f6f 	isb	sy
 800fa2c:	f3bf 8f4f 	dsb	sy
 800fa30:	60fb      	str	r3, [r7, #12]
}
 800fa32:	bf00      	nop
 800fa34:	e7fe      	b.n	800fa34 <prvTaskExitError+0x28>
	__asm volatile
 800fa36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa3a:	f383 8811 	msr	BASEPRI, r3
 800fa3e:	f3bf 8f6f 	isb	sy
 800fa42:	f3bf 8f4f 	dsb	sy
 800fa46:	60bb      	str	r3, [r7, #8]
}
 800fa48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fa4a:	bf00      	nop
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d0fc      	beq.n	800fa4c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fa52:	bf00      	nop
 800fa54:	bf00      	nop
 800fa56:	3714      	adds	r7, #20
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr
 800fa60:	2000009c 	.word	0x2000009c
	...

0800fa70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fa70:	4b07      	ldr	r3, [pc, #28]	; (800fa90 <pxCurrentTCBConst2>)
 800fa72:	6819      	ldr	r1, [r3, #0]
 800fa74:	6808      	ldr	r0, [r1, #0]
 800fa76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa7a:	f380 8809 	msr	PSP, r0
 800fa7e:	f3bf 8f6f 	isb	sy
 800fa82:	f04f 0000 	mov.w	r0, #0
 800fa86:	f380 8811 	msr	BASEPRI, r0
 800fa8a:	4770      	bx	lr
 800fa8c:	f3af 8000 	nop.w

0800fa90 <pxCurrentTCBConst2>:
 800fa90:	20001908 	.word	0x20001908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fa94:	bf00      	nop
 800fa96:	bf00      	nop

0800fa98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fa98:	4808      	ldr	r0, [pc, #32]	; (800fabc <prvPortStartFirstTask+0x24>)
 800fa9a:	6800      	ldr	r0, [r0, #0]
 800fa9c:	6800      	ldr	r0, [r0, #0]
 800fa9e:	f380 8808 	msr	MSP, r0
 800faa2:	f04f 0000 	mov.w	r0, #0
 800faa6:	f380 8814 	msr	CONTROL, r0
 800faaa:	b662      	cpsie	i
 800faac:	b661      	cpsie	f
 800faae:	f3bf 8f4f 	dsb	sy
 800fab2:	f3bf 8f6f 	isb	sy
 800fab6:	df00      	svc	0
 800fab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800faba:	bf00      	nop
 800fabc:	e000ed08 	.word	0xe000ed08

0800fac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b086      	sub	sp, #24
 800fac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fac6:	4b46      	ldr	r3, [pc, #280]	; (800fbe0 <xPortStartScheduler+0x120>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	4a46      	ldr	r2, [pc, #280]	; (800fbe4 <xPortStartScheduler+0x124>)
 800facc:	4293      	cmp	r3, r2
 800face:	d10a      	bne.n	800fae6 <xPortStartScheduler+0x26>
	__asm volatile
 800fad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad4:	f383 8811 	msr	BASEPRI, r3
 800fad8:	f3bf 8f6f 	isb	sy
 800fadc:	f3bf 8f4f 	dsb	sy
 800fae0:	613b      	str	r3, [r7, #16]
}
 800fae2:	bf00      	nop
 800fae4:	e7fe      	b.n	800fae4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fae6:	4b3e      	ldr	r3, [pc, #248]	; (800fbe0 <xPortStartScheduler+0x120>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	4a3f      	ldr	r2, [pc, #252]	; (800fbe8 <xPortStartScheduler+0x128>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d10a      	bne.n	800fb06 <xPortStartScheduler+0x46>
	__asm volatile
 800faf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf4:	f383 8811 	msr	BASEPRI, r3
 800faf8:	f3bf 8f6f 	isb	sy
 800fafc:	f3bf 8f4f 	dsb	sy
 800fb00:	60fb      	str	r3, [r7, #12]
}
 800fb02:	bf00      	nop
 800fb04:	e7fe      	b.n	800fb04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fb06:	4b39      	ldr	r3, [pc, #228]	; (800fbec <xPortStartScheduler+0x12c>)
 800fb08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	781b      	ldrb	r3, [r3, #0]
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	22ff      	movs	r2, #255	; 0xff
 800fb16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	b2db      	uxtb	r3, r3
 800fb1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fb20:	78fb      	ldrb	r3, [r7, #3]
 800fb22:	b2db      	uxtb	r3, r3
 800fb24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fb28:	b2da      	uxtb	r2, r3
 800fb2a:	4b31      	ldr	r3, [pc, #196]	; (800fbf0 <xPortStartScheduler+0x130>)
 800fb2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fb2e:	4b31      	ldr	r3, [pc, #196]	; (800fbf4 <xPortStartScheduler+0x134>)
 800fb30:	2207      	movs	r2, #7
 800fb32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fb34:	e009      	b.n	800fb4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fb36:	4b2f      	ldr	r3, [pc, #188]	; (800fbf4 <xPortStartScheduler+0x134>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	3b01      	subs	r3, #1
 800fb3c:	4a2d      	ldr	r2, [pc, #180]	; (800fbf4 <xPortStartScheduler+0x134>)
 800fb3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fb40:	78fb      	ldrb	r3, [r7, #3]
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	005b      	lsls	r3, r3, #1
 800fb46:	b2db      	uxtb	r3, r3
 800fb48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fb4a:	78fb      	ldrb	r3, [r7, #3]
 800fb4c:	b2db      	uxtb	r3, r3
 800fb4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb52:	2b80      	cmp	r3, #128	; 0x80
 800fb54:	d0ef      	beq.n	800fb36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fb56:	4b27      	ldr	r3, [pc, #156]	; (800fbf4 <xPortStartScheduler+0x134>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	f1c3 0307 	rsb	r3, r3, #7
 800fb5e:	2b04      	cmp	r3, #4
 800fb60:	d00a      	beq.n	800fb78 <xPortStartScheduler+0xb8>
	__asm volatile
 800fb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb66:	f383 8811 	msr	BASEPRI, r3
 800fb6a:	f3bf 8f6f 	isb	sy
 800fb6e:	f3bf 8f4f 	dsb	sy
 800fb72:	60bb      	str	r3, [r7, #8]
}
 800fb74:	bf00      	nop
 800fb76:	e7fe      	b.n	800fb76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fb78:	4b1e      	ldr	r3, [pc, #120]	; (800fbf4 <xPortStartScheduler+0x134>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	021b      	lsls	r3, r3, #8
 800fb7e:	4a1d      	ldr	r2, [pc, #116]	; (800fbf4 <xPortStartScheduler+0x134>)
 800fb80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fb82:	4b1c      	ldr	r3, [pc, #112]	; (800fbf4 <xPortStartScheduler+0x134>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fb8a:	4a1a      	ldr	r2, [pc, #104]	; (800fbf4 <xPortStartScheduler+0x134>)
 800fb8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	b2da      	uxtb	r2, r3
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fb96:	4b18      	ldr	r3, [pc, #96]	; (800fbf8 <xPortStartScheduler+0x138>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	4a17      	ldr	r2, [pc, #92]	; (800fbf8 <xPortStartScheduler+0x138>)
 800fb9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fba2:	4b15      	ldr	r3, [pc, #84]	; (800fbf8 <xPortStartScheduler+0x138>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	4a14      	ldr	r2, [pc, #80]	; (800fbf8 <xPortStartScheduler+0x138>)
 800fba8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fbac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fbae:	f000 f8dd 	bl	800fd6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fbb2:	4b12      	ldr	r3, [pc, #72]	; (800fbfc <xPortStartScheduler+0x13c>)
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fbb8:	f000 f8fc 	bl	800fdb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fbbc:	4b10      	ldr	r3, [pc, #64]	; (800fc00 <xPortStartScheduler+0x140>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4a0f      	ldr	r2, [pc, #60]	; (800fc00 <xPortStartScheduler+0x140>)
 800fbc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fbc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fbc8:	f7ff ff66 	bl	800fa98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fbcc:	f7fe fc7c 	bl	800e4c8 <vTaskSwitchContext>
	prvTaskExitError();
 800fbd0:	f7ff ff1c 	bl	800fa0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fbd4:	2300      	movs	r3, #0
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3718      	adds	r7, #24
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	e000ed00 	.word	0xe000ed00
 800fbe4:	410fc271 	.word	0x410fc271
 800fbe8:	410fc270 	.word	0x410fc270
 800fbec:	e000e400 	.word	0xe000e400
 800fbf0:	20001f34 	.word	0x20001f34
 800fbf4:	20001f38 	.word	0x20001f38
 800fbf8:	e000ed20 	.word	0xe000ed20
 800fbfc:	2000009c 	.word	0x2000009c
 800fc00:	e000ef34 	.word	0xe000ef34

0800fc04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fc04:	b480      	push	{r7}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
	__asm volatile
 800fc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc0e:	f383 8811 	msr	BASEPRI, r3
 800fc12:	f3bf 8f6f 	isb	sy
 800fc16:	f3bf 8f4f 	dsb	sy
 800fc1a:	607b      	str	r3, [r7, #4]
}
 800fc1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fc1e:	4b0f      	ldr	r3, [pc, #60]	; (800fc5c <vPortEnterCritical+0x58>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	3301      	adds	r3, #1
 800fc24:	4a0d      	ldr	r2, [pc, #52]	; (800fc5c <vPortEnterCritical+0x58>)
 800fc26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fc28:	4b0c      	ldr	r3, [pc, #48]	; (800fc5c <vPortEnterCritical+0x58>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d10f      	bne.n	800fc50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fc30:	4b0b      	ldr	r3, [pc, #44]	; (800fc60 <vPortEnterCritical+0x5c>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d00a      	beq.n	800fc50 <vPortEnterCritical+0x4c>
	__asm volatile
 800fc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc3e:	f383 8811 	msr	BASEPRI, r3
 800fc42:	f3bf 8f6f 	isb	sy
 800fc46:	f3bf 8f4f 	dsb	sy
 800fc4a:	603b      	str	r3, [r7, #0]
}
 800fc4c:	bf00      	nop
 800fc4e:	e7fe      	b.n	800fc4e <vPortEnterCritical+0x4a>
	}
}
 800fc50:	bf00      	nop
 800fc52:	370c      	adds	r7, #12
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr
 800fc5c:	2000009c 	.word	0x2000009c
 800fc60:	e000ed04 	.word	0xe000ed04

0800fc64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fc64:	b480      	push	{r7}
 800fc66:	b083      	sub	sp, #12
 800fc68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fc6a:	4b12      	ldr	r3, [pc, #72]	; (800fcb4 <vPortExitCritical+0x50>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d10a      	bne.n	800fc88 <vPortExitCritical+0x24>
	__asm volatile
 800fc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc76:	f383 8811 	msr	BASEPRI, r3
 800fc7a:	f3bf 8f6f 	isb	sy
 800fc7e:	f3bf 8f4f 	dsb	sy
 800fc82:	607b      	str	r3, [r7, #4]
}
 800fc84:	bf00      	nop
 800fc86:	e7fe      	b.n	800fc86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fc88:	4b0a      	ldr	r3, [pc, #40]	; (800fcb4 <vPortExitCritical+0x50>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	3b01      	subs	r3, #1
 800fc8e:	4a09      	ldr	r2, [pc, #36]	; (800fcb4 <vPortExitCritical+0x50>)
 800fc90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fc92:	4b08      	ldr	r3, [pc, #32]	; (800fcb4 <vPortExitCritical+0x50>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d105      	bne.n	800fca6 <vPortExitCritical+0x42>
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	f383 8811 	msr	BASEPRI, r3
}
 800fca4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fca6:	bf00      	nop
 800fca8:	370c      	adds	r7, #12
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb0:	4770      	bx	lr
 800fcb2:	bf00      	nop
 800fcb4:	2000009c 	.word	0x2000009c
	...

0800fcc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fcc0:	f3ef 8009 	mrs	r0, PSP
 800fcc4:	f3bf 8f6f 	isb	sy
 800fcc8:	4b15      	ldr	r3, [pc, #84]	; (800fd20 <pxCurrentTCBConst>)
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	f01e 0f10 	tst.w	lr, #16
 800fcd0:	bf08      	it	eq
 800fcd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fcd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcda:	6010      	str	r0, [r2, #0]
 800fcdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fce4:	f380 8811 	msr	BASEPRI, r0
 800fce8:	f3bf 8f4f 	dsb	sy
 800fcec:	f3bf 8f6f 	isb	sy
 800fcf0:	f7fe fbea 	bl	800e4c8 <vTaskSwitchContext>
 800fcf4:	f04f 0000 	mov.w	r0, #0
 800fcf8:	f380 8811 	msr	BASEPRI, r0
 800fcfc:	bc09      	pop	{r0, r3}
 800fcfe:	6819      	ldr	r1, [r3, #0]
 800fd00:	6808      	ldr	r0, [r1, #0]
 800fd02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd06:	f01e 0f10 	tst.w	lr, #16
 800fd0a:	bf08      	it	eq
 800fd0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fd10:	f380 8809 	msr	PSP, r0
 800fd14:	f3bf 8f6f 	isb	sy
 800fd18:	4770      	bx	lr
 800fd1a:	bf00      	nop
 800fd1c:	f3af 8000 	nop.w

0800fd20 <pxCurrentTCBConst>:
 800fd20:	20001908 	.word	0x20001908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fd24:	bf00      	nop
 800fd26:	bf00      	nop

0800fd28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b082      	sub	sp, #8
 800fd2c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd32:	f383 8811 	msr	BASEPRI, r3
 800fd36:	f3bf 8f6f 	isb	sy
 800fd3a:	f3bf 8f4f 	dsb	sy
 800fd3e:	607b      	str	r3, [r7, #4]
}
 800fd40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fd42:	f7fe fb07 	bl	800e354 <xTaskIncrementTick>
 800fd46:	4603      	mov	r3, r0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d003      	beq.n	800fd54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fd4c:	4b06      	ldr	r3, [pc, #24]	; (800fd68 <xPortSysTickHandler+0x40>)
 800fd4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd52:	601a      	str	r2, [r3, #0]
 800fd54:	2300      	movs	r3, #0
 800fd56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	f383 8811 	msr	BASEPRI, r3
}
 800fd5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fd60:	bf00      	nop
 800fd62:	3708      	adds	r7, #8
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}
 800fd68:	e000ed04 	.word	0xe000ed04

0800fd6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fd70:	4b0b      	ldr	r3, [pc, #44]	; (800fda0 <vPortSetupTimerInterrupt+0x34>)
 800fd72:	2200      	movs	r2, #0
 800fd74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fd76:	4b0b      	ldr	r3, [pc, #44]	; (800fda4 <vPortSetupTimerInterrupt+0x38>)
 800fd78:	2200      	movs	r2, #0
 800fd7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fd7c:	4b0a      	ldr	r3, [pc, #40]	; (800fda8 <vPortSetupTimerInterrupt+0x3c>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	4a0a      	ldr	r2, [pc, #40]	; (800fdac <vPortSetupTimerInterrupt+0x40>)
 800fd82:	fba2 2303 	umull	r2, r3, r2, r3
 800fd86:	099b      	lsrs	r3, r3, #6
 800fd88:	4a09      	ldr	r2, [pc, #36]	; (800fdb0 <vPortSetupTimerInterrupt+0x44>)
 800fd8a:	3b01      	subs	r3, #1
 800fd8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fd8e:	4b04      	ldr	r3, [pc, #16]	; (800fda0 <vPortSetupTimerInterrupt+0x34>)
 800fd90:	2207      	movs	r2, #7
 800fd92:	601a      	str	r2, [r3, #0]
}
 800fd94:	bf00      	nop
 800fd96:	46bd      	mov	sp, r7
 800fd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9c:	4770      	bx	lr
 800fd9e:	bf00      	nop
 800fda0:	e000e010 	.word	0xe000e010
 800fda4:	e000e018 	.word	0xe000e018
 800fda8:	20000090 	.word	0x20000090
 800fdac:	10624dd3 	.word	0x10624dd3
 800fdb0:	e000e014 	.word	0xe000e014

0800fdb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fdb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fdc4 <vPortEnableVFP+0x10>
 800fdb8:	6801      	ldr	r1, [r0, #0]
 800fdba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fdbe:	6001      	str	r1, [r0, #0]
 800fdc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fdc2:	bf00      	nop
 800fdc4:	e000ed88 	.word	0xe000ed88

0800fdc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fdc8:	b480      	push	{r7}
 800fdca:	b085      	sub	sp, #20
 800fdcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fdce:	f3ef 8305 	mrs	r3, IPSR
 800fdd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	2b0f      	cmp	r3, #15
 800fdd8:	d914      	bls.n	800fe04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fdda:	4a17      	ldr	r2, [pc, #92]	; (800fe38 <vPortValidateInterruptPriority+0x70>)
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	4413      	add	r3, r2
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fde4:	4b15      	ldr	r3, [pc, #84]	; (800fe3c <vPortValidateInterruptPriority+0x74>)
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	7afa      	ldrb	r2, [r7, #11]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d20a      	bcs.n	800fe04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf2:	f383 8811 	msr	BASEPRI, r3
 800fdf6:	f3bf 8f6f 	isb	sy
 800fdfa:	f3bf 8f4f 	dsb	sy
 800fdfe:	607b      	str	r3, [r7, #4]
}
 800fe00:	bf00      	nop
 800fe02:	e7fe      	b.n	800fe02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fe04:	4b0e      	ldr	r3, [pc, #56]	; (800fe40 <vPortValidateInterruptPriority+0x78>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fe0c:	4b0d      	ldr	r3, [pc, #52]	; (800fe44 <vPortValidateInterruptPriority+0x7c>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	429a      	cmp	r2, r3
 800fe12:	d90a      	bls.n	800fe2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fe14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe18:	f383 8811 	msr	BASEPRI, r3
 800fe1c:	f3bf 8f6f 	isb	sy
 800fe20:	f3bf 8f4f 	dsb	sy
 800fe24:	603b      	str	r3, [r7, #0]
}
 800fe26:	bf00      	nop
 800fe28:	e7fe      	b.n	800fe28 <vPortValidateInterruptPriority+0x60>
	}
 800fe2a:	bf00      	nop
 800fe2c:	3714      	adds	r7, #20
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe34:	4770      	bx	lr
 800fe36:	bf00      	nop
 800fe38:	e000e3f0 	.word	0xe000e3f0
 800fe3c:	20001f34 	.word	0x20001f34
 800fe40:	e000ed0c 	.word	0xe000ed0c
 800fe44:	20001f38 	.word	0x20001f38

0800fe48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b08a      	sub	sp, #40	; 0x28
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fe50:	2300      	movs	r3, #0
 800fe52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fe54:	f7fe f9b0 	bl	800e1b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fe58:	4b5b      	ldr	r3, [pc, #364]	; (800ffc8 <pvPortMalloc+0x180>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d101      	bne.n	800fe64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fe60:	f000 f920 	bl	80100a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fe64:	4b59      	ldr	r3, [pc, #356]	; (800ffcc <pvPortMalloc+0x184>)
 800fe66:	681a      	ldr	r2, [r3, #0]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4013      	ands	r3, r2
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	f040 8093 	bne.w	800ff98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d01d      	beq.n	800feb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fe78:	2208      	movs	r2, #8
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	4413      	add	r3, r2
 800fe7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f003 0307 	and.w	r3, r3, #7
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d014      	beq.n	800feb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f023 0307 	bic.w	r3, r3, #7
 800fe90:	3308      	adds	r3, #8
 800fe92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f003 0307 	and.w	r3, r3, #7
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d00a      	beq.n	800feb4 <pvPortMalloc+0x6c>
	__asm volatile
 800fe9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea2:	f383 8811 	msr	BASEPRI, r3
 800fea6:	f3bf 8f6f 	isb	sy
 800feaa:	f3bf 8f4f 	dsb	sy
 800feae:	617b      	str	r3, [r7, #20]
}
 800feb0:	bf00      	nop
 800feb2:	e7fe      	b.n	800feb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d06e      	beq.n	800ff98 <pvPortMalloc+0x150>
 800feba:	4b45      	ldr	r3, [pc, #276]	; (800ffd0 <pvPortMalloc+0x188>)
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	687a      	ldr	r2, [r7, #4]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d869      	bhi.n	800ff98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fec4:	4b43      	ldr	r3, [pc, #268]	; (800ffd4 <pvPortMalloc+0x18c>)
 800fec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fec8:	4b42      	ldr	r3, [pc, #264]	; (800ffd4 <pvPortMalloc+0x18c>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fece:	e004      	b.n	800feda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800feda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	687a      	ldr	r2, [r7, #4]
 800fee0:	429a      	cmp	r2, r3
 800fee2:	d903      	bls.n	800feec <pvPortMalloc+0xa4>
 800fee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d1f1      	bne.n	800fed0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800feec:	4b36      	ldr	r3, [pc, #216]	; (800ffc8 <pvPortMalloc+0x180>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d050      	beq.n	800ff98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fef6:	6a3b      	ldr	r3, [r7, #32]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2208      	movs	r2, #8
 800fefc:	4413      	add	r3, r2
 800fefe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ff00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff02:	681a      	ldr	r2, [r3, #0]
 800ff04:	6a3b      	ldr	r3, [r7, #32]
 800ff06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ff08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff0a:	685a      	ldr	r2, [r3, #4]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	1ad2      	subs	r2, r2, r3
 800ff10:	2308      	movs	r3, #8
 800ff12:	005b      	lsls	r3, r3, #1
 800ff14:	429a      	cmp	r2, r3
 800ff16:	d91f      	bls.n	800ff58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ff18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	4413      	add	r3, r2
 800ff1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff20:	69bb      	ldr	r3, [r7, #24]
 800ff22:	f003 0307 	and.w	r3, r3, #7
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d00a      	beq.n	800ff40 <pvPortMalloc+0xf8>
	__asm volatile
 800ff2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff2e:	f383 8811 	msr	BASEPRI, r3
 800ff32:	f3bf 8f6f 	isb	sy
 800ff36:	f3bf 8f4f 	dsb	sy
 800ff3a:	613b      	str	r3, [r7, #16]
}
 800ff3c:	bf00      	nop
 800ff3e:	e7fe      	b.n	800ff3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ff40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff42:	685a      	ldr	r2, [r3, #4]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	1ad2      	subs	r2, r2, r3
 800ff48:	69bb      	ldr	r3, [r7, #24]
 800ff4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ff4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ff52:	69b8      	ldr	r0, [r7, #24]
 800ff54:	f000 f908 	bl	8010168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ff58:	4b1d      	ldr	r3, [pc, #116]	; (800ffd0 <pvPortMalloc+0x188>)
 800ff5a:	681a      	ldr	r2, [r3, #0]
 800ff5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5e:	685b      	ldr	r3, [r3, #4]
 800ff60:	1ad3      	subs	r3, r2, r3
 800ff62:	4a1b      	ldr	r2, [pc, #108]	; (800ffd0 <pvPortMalloc+0x188>)
 800ff64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ff66:	4b1a      	ldr	r3, [pc, #104]	; (800ffd0 <pvPortMalloc+0x188>)
 800ff68:	681a      	ldr	r2, [r3, #0]
 800ff6a:	4b1b      	ldr	r3, [pc, #108]	; (800ffd8 <pvPortMalloc+0x190>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d203      	bcs.n	800ff7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ff72:	4b17      	ldr	r3, [pc, #92]	; (800ffd0 <pvPortMalloc+0x188>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	4a18      	ldr	r2, [pc, #96]	; (800ffd8 <pvPortMalloc+0x190>)
 800ff78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ff7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7c:	685a      	ldr	r2, [r3, #4]
 800ff7e:	4b13      	ldr	r3, [pc, #76]	; (800ffcc <pvPortMalloc+0x184>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	431a      	orrs	r2, r3
 800ff84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ff88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ff8e:	4b13      	ldr	r3, [pc, #76]	; (800ffdc <pvPortMalloc+0x194>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	3301      	adds	r3, #1
 800ff94:	4a11      	ldr	r2, [pc, #68]	; (800ffdc <pvPortMalloc+0x194>)
 800ff96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ff98:	f7fe f91c 	bl	800e1d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	f003 0307 	and.w	r3, r3, #7
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d00a      	beq.n	800ffbc <pvPortMalloc+0x174>
	__asm volatile
 800ffa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffaa:	f383 8811 	msr	BASEPRI, r3
 800ffae:	f3bf 8f6f 	isb	sy
 800ffb2:	f3bf 8f4f 	dsb	sy
 800ffb6:	60fb      	str	r3, [r7, #12]
}
 800ffb8:	bf00      	nop
 800ffba:	e7fe      	b.n	800ffba <pvPortMalloc+0x172>
	return pvReturn;
 800ffbc:	69fb      	ldr	r3, [r7, #28]
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3728      	adds	r7, #40	; 0x28
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	20005b44 	.word	0x20005b44
 800ffcc:	20005b58 	.word	0x20005b58
 800ffd0:	20005b48 	.word	0x20005b48
 800ffd4:	20005b3c 	.word	0x20005b3c
 800ffd8:	20005b4c 	.word	0x20005b4c
 800ffdc:	20005b50 	.word	0x20005b50

0800ffe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b086      	sub	sp, #24
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d04d      	beq.n	801008e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fff2:	2308      	movs	r3, #8
 800fff4:	425b      	negs	r3, r3
 800fff6:	697a      	ldr	r2, [r7, #20]
 800fff8:	4413      	add	r3, r2
 800fffa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	685a      	ldr	r2, [r3, #4]
 8010004:	4b24      	ldr	r3, [pc, #144]	; (8010098 <vPortFree+0xb8>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	4013      	ands	r3, r2
 801000a:	2b00      	cmp	r3, #0
 801000c:	d10a      	bne.n	8010024 <vPortFree+0x44>
	__asm volatile
 801000e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010012:	f383 8811 	msr	BASEPRI, r3
 8010016:	f3bf 8f6f 	isb	sy
 801001a:	f3bf 8f4f 	dsb	sy
 801001e:	60fb      	str	r3, [r7, #12]
}
 8010020:	bf00      	nop
 8010022:	e7fe      	b.n	8010022 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d00a      	beq.n	8010042 <vPortFree+0x62>
	__asm volatile
 801002c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010030:	f383 8811 	msr	BASEPRI, r3
 8010034:	f3bf 8f6f 	isb	sy
 8010038:	f3bf 8f4f 	dsb	sy
 801003c:	60bb      	str	r3, [r7, #8]
}
 801003e:	bf00      	nop
 8010040:	e7fe      	b.n	8010040 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	685a      	ldr	r2, [r3, #4]
 8010046:	4b14      	ldr	r3, [pc, #80]	; (8010098 <vPortFree+0xb8>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4013      	ands	r3, r2
 801004c:	2b00      	cmp	r3, #0
 801004e:	d01e      	beq.n	801008e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d11a      	bne.n	801008e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	685a      	ldr	r2, [r3, #4]
 801005c:	4b0e      	ldr	r3, [pc, #56]	; (8010098 <vPortFree+0xb8>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	43db      	mvns	r3, r3
 8010062:	401a      	ands	r2, r3
 8010064:	693b      	ldr	r3, [r7, #16]
 8010066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010068:	f7fe f8a6 	bl	800e1b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	685a      	ldr	r2, [r3, #4]
 8010070:	4b0a      	ldr	r3, [pc, #40]	; (801009c <vPortFree+0xbc>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	4413      	add	r3, r2
 8010076:	4a09      	ldr	r2, [pc, #36]	; (801009c <vPortFree+0xbc>)
 8010078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801007a:	6938      	ldr	r0, [r7, #16]
 801007c:	f000 f874 	bl	8010168 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010080:	4b07      	ldr	r3, [pc, #28]	; (80100a0 <vPortFree+0xc0>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	3301      	adds	r3, #1
 8010086:	4a06      	ldr	r2, [pc, #24]	; (80100a0 <vPortFree+0xc0>)
 8010088:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801008a:	f7fe f8a3 	bl	800e1d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801008e:	bf00      	nop
 8010090:	3718      	adds	r7, #24
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	20005b58 	.word	0x20005b58
 801009c:	20005b48 	.word	0x20005b48
 80100a0:	20005b54 	.word	0x20005b54

080100a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80100a4:	b480      	push	{r7}
 80100a6:	b085      	sub	sp, #20
 80100a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80100aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80100ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80100b0:	4b27      	ldr	r3, [pc, #156]	; (8010150 <prvHeapInit+0xac>)
 80100b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	f003 0307 	and.w	r3, r3, #7
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d00c      	beq.n	80100d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	3307      	adds	r3, #7
 80100c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f023 0307 	bic.w	r3, r3, #7
 80100ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80100cc:	68ba      	ldr	r2, [r7, #8]
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	1ad3      	subs	r3, r2, r3
 80100d2:	4a1f      	ldr	r2, [pc, #124]	; (8010150 <prvHeapInit+0xac>)
 80100d4:	4413      	add	r3, r2
 80100d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80100dc:	4a1d      	ldr	r2, [pc, #116]	; (8010154 <prvHeapInit+0xb0>)
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80100e2:	4b1c      	ldr	r3, [pc, #112]	; (8010154 <prvHeapInit+0xb0>)
 80100e4:	2200      	movs	r2, #0
 80100e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	68ba      	ldr	r2, [r7, #8]
 80100ec:	4413      	add	r3, r2
 80100ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80100f0:	2208      	movs	r2, #8
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	1a9b      	subs	r3, r3, r2
 80100f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	f023 0307 	bic.w	r3, r3, #7
 80100fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	4a15      	ldr	r2, [pc, #84]	; (8010158 <prvHeapInit+0xb4>)
 8010104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010106:	4b14      	ldr	r3, [pc, #80]	; (8010158 <prvHeapInit+0xb4>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	2200      	movs	r2, #0
 801010c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801010e:	4b12      	ldr	r3, [pc, #72]	; (8010158 <prvHeapInit+0xb4>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	2200      	movs	r2, #0
 8010114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	68fa      	ldr	r2, [r7, #12]
 801011e:	1ad2      	subs	r2, r2, r3
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010124:	4b0c      	ldr	r3, [pc, #48]	; (8010158 <prvHeapInit+0xb4>)
 8010126:	681a      	ldr	r2, [r3, #0]
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	4a0a      	ldr	r2, [pc, #40]	; (801015c <prvHeapInit+0xb8>)
 8010132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	685b      	ldr	r3, [r3, #4]
 8010138:	4a09      	ldr	r2, [pc, #36]	; (8010160 <prvHeapInit+0xbc>)
 801013a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801013c:	4b09      	ldr	r3, [pc, #36]	; (8010164 <prvHeapInit+0xc0>)
 801013e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010142:	601a      	str	r2, [r3, #0]
}
 8010144:	bf00      	nop
 8010146:	3714      	adds	r7, #20
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr
 8010150:	20001f3c 	.word	0x20001f3c
 8010154:	20005b3c 	.word	0x20005b3c
 8010158:	20005b44 	.word	0x20005b44
 801015c:	20005b4c 	.word	0x20005b4c
 8010160:	20005b48 	.word	0x20005b48
 8010164:	20005b58 	.word	0x20005b58

08010168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010168:	b480      	push	{r7}
 801016a:	b085      	sub	sp, #20
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010170:	4b28      	ldr	r3, [pc, #160]	; (8010214 <prvInsertBlockIntoFreeList+0xac>)
 8010172:	60fb      	str	r3, [r7, #12]
 8010174:	e002      	b.n	801017c <prvInsertBlockIntoFreeList+0x14>
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	60fb      	str	r3, [r7, #12]
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	687a      	ldr	r2, [r7, #4]
 8010182:	429a      	cmp	r2, r3
 8010184:	d8f7      	bhi.n	8010176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	68ba      	ldr	r2, [r7, #8]
 8010190:	4413      	add	r3, r2
 8010192:	687a      	ldr	r2, [r7, #4]
 8010194:	429a      	cmp	r2, r3
 8010196:	d108      	bne.n	80101aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	685a      	ldr	r2, [r3, #4]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	441a      	add	r2, r3
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	68ba      	ldr	r2, [r7, #8]
 80101b4:	441a      	add	r2, r3
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d118      	bne.n	80101f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	681a      	ldr	r2, [r3, #0]
 80101c2:	4b15      	ldr	r3, [pc, #84]	; (8010218 <prvInsertBlockIntoFreeList+0xb0>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d00d      	beq.n	80101e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	685a      	ldr	r2, [r3, #4]
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	441a      	add	r2, r3
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	601a      	str	r2, [r3, #0]
 80101e4:	e008      	b.n	80101f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80101e6:	4b0c      	ldr	r3, [pc, #48]	; (8010218 <prvInsertBlockIntoFreeList+0xb0>)
 80101e8:	681a      	ldr	r2, [r3, #0]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	601a      	str	r2, [r3, #0]
 80101ee:	e003      	b.n	80101f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	681a      	ldr	r2, [r3, #0]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80101f8:	68fa      	ldr	r2, [r7, #12]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d002      	beq.n	8010206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010206:	bf00      	nop
 8010208:	3714      	adds	r7, #20
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr
 8010212:	bf00      	nop
 8010214:	20005b3c 	.word	0x20005b3c
 8010218:	20005b44 	.word	0x20005b44

0801021c <__errno>:
 801021c:	4b01      	ldr	r3, [pc, #4]	; (8010224 <__errno+0x8>)
 801021e:	6818      	ldr	r0, [r3, #0]
 8010220:	4770      	bx	lr
 8010222:	bf00      	nop
 8010224:	200000a0 	.word	0x200000a0

08010228 <std>:
 8010228:	2300      	movs	r3, #0
 801022a:	b510      	push	{r4, lr}
 801022c:	4604      	mov	r4, r0
 801022e:	e9c0 3300 	strd	r3, r3, [r0]
 8010232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010236:	6083      	str	r3, [r0, #8]
 8010238:	8181      	strh	r1, [r0, #12]
 801023a:	6643      	str	r3, [r0, #100]	; 0x64
 801023c:	81c2      	strh	r2, [r0, #14]
 801023e:	6183      	str	r3, [r0, #24]
 8010240:	4619      	mov	r1, r3
 8010242:	2208      	movs	r2, #8
 8010244:	305c      	adds	r0, #92	; 0x5c
 8010246:	f000 f91a 	bl	801047e <memset>
 801024a:	4b05      	ldr	r3, [pc, #20]	; (8010260 <std+0x38>)
 801024c:	6263      	str	r3, [r4, #36]	; 0x24
 801024e:	4b05      	ldr	r3, [pc, #20]	; (8010264 <std+0x3c>)
 8010250:	62a3      	str	r3, [r4, #40]	; 0x28
 8010252:	4b05      	ldr	r3, [pc, #20]	; (8010268 <std+0x40>)
 8010254:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010256:	4b05      	ldr	r3, [pc, #20]	; (801026c <std+0x44>)
 8010258:	6224      	str	r4, [r4, #32]
 801025a:	6323      	str	r3, [r4, #48]	; 0x30
 801025c:	bd10      	pop	{r4, pc}
 801025e:	bf00      	nop
 8010260:	080110c9 	.word	0x080110c9
 8010264:	080110eb 	.word	0x080110eb
 8010268:	08011123 	.word	0x08011123
 801026c:	08011147 	.word	0x08011147

08010270 <_cleanup_r>:
 8010270:	4901      	ldr	r1, [pc, #4]	; (8010278 <_cleanup_r+0x8>)
 8010272:	f000 b8af 	b.w	80103d4 <_fwalk_reent>
 8010276:	bf00      	nop
 8010278:	08012119 	.word	0x08012119

0801027c <__sfmoreglue>:
 801027c:	b570      	push	{r4, r5, r6, lr}
 801027e:	2268      	movs	r2, #104	; 0x68
 8010280:	1e4d      	subs	r5, r1, #1
 8010282:	4355      	muls	r5, r2
 8010284:	460e      	mov	r6, r1
 8010286:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801028a:	f000 f921 	bl	80104d0 <_malloc_r>
 801028e:	4604      	mov	r4, r0
 8010290:	b140      	cbz	r0, 80102a4 <__sfmoreglue+0x28>
 8010292:	2100      	movs	r1, #0
 8010294:	e9c0 1600 	strd	r1, r6, [r0]
 8010298:	300c      	adds	r0, #12
 801029a:	60a0      	str	r0, [r4, #8]
 801029c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80102a0:	f000 f8ed 	bl	801047e <memset>
 80102a4:	4620      	mov	r0, r4
 80102a6:	bd70      	pop	{r4, r5, r6, pc}

080102a8 <__sfp_lock_acquire>:
 80102a8:	4801      	ldr	r0, [pc, #4]	; (80102b0 <__sfp_lock_acquire+0x8>)
 80102aa:	f000 b8d8 	b.w	801045e <__retarget_lock_acquire_recursive>
 80102ae:	bf00      	nop
 80102b0:	20005b5d 	.word	0x20005b5d

080102b4 <__sfp_lock_release>:
 80102b4:	4801      	ldr	r0, [pc, #4]	; (80102bc <__sfp_lock_release+0x8>)
 80102b6:	f000 b8d3 	b.w	8010460 <__retarget_lock_release_recursive>
 80102ba:	bf00      	nop
 80102bc:	20005b5d 	.word	0x20005b5d

080102c0 <__sinit_lock_acquire>:
 80102c0:	4801      	ldr	r0, [pc, #4]	; (80102c8 <__sinit_lock_acquire+0x8>)
 80102c2:	f000 b8cc 	b.w	801045e <__retarget_lock_acquire_recursive>
 80102c6:	bf00      	nop
 80102c8:	20005b5e 	.word	0x20005b5e

080102cc <__sinit_lock_release>:
 80102cc:	4801      	ldr	r0, [pc, #4]	; (80102d4 <__sinit_lock_release+0x8>)
 80102ce:	f000 b8c7 	b.w	8010460 <__retarget_lock_release_recursive>
 80102d2:	bf00      	nop
 80102d4:	20005b5e 	.word	0x20005b5e

080102d8 <__sinit>:
 80102d8:	b510      	push	{r4, lr}
 80102da:	4604      	mov	r4, r0
 80102dc:	f7ff fff0 	bl	80102c0 <__sinit_lock_acquire>
 80102e0:	69a3      	ldr	r3, [r4, #24]
 80102e2:	b11b      	cbz	r3, 80102ec <__sinit+0x14>
 80102e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102e8:	f7ff bff0 	b.w	80102cc <__sinit_lock_release>
 80102ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80102f0:	6523      	str	r3, [r4, #80]	; 0x50
 80102f2:	4b13      	ldr	r3, [pc, #76]	; (8010340 <__sinit+0x68>)
 80102f4:	4a13      	ldr	r2, [pc, #76]	; (8010344 <__sinit+0x6c>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80102fa:	42a3      	cmp	r3, r4
 80102fc:	bf04      	itt	eq
 80102fe:	2301      	moveq	r3, #1
 8010300:	61a3      	streq	r3, [r4, #24]
 8010302:	4620      	mov	r0, r4
 8010304:	f000 f820 	bl	8010348 <__sfp>
 8010308:	6060      	str	r0, [r4, #4]
 801030a:	4620      	mov	r0, r4
 801030c:	f000 f81c 	bl	8010348 <__sfp>
 8010310:	60a0      	str	r0, [r4, #8]
 8010312:	4620      	mov	r0, r4
 8010314:	f000 f818 	bl	8010348 <__sfp>
 8010318:	2200      	movs	r2, #0
 801031a:	60e0      	str	r0, [r4, #12]
 801031c:	2104      	movs	r1, #4
 801031e:	6860      	ldr	r0, [r4, #4]
 8010320:	f7ff ff82 	bl	8010228 <std>
 8010324:	68a0      	ldr	r0, [r4, #8]
 8010326:	2201      	movs	r2, #1
 8010328:	2109      	movs	r1, #9
 801032a:	f7ff ff7d 	bl	8010228 <std>
 801032e:	68e0      	ldr	r0, [r4, #12]
 8010330:	2202      	movs	r2, #2
 8010332:	2112      	movs	r1, #18
 8010334:	f7ff ff78 	bl	8010228 <std>
 8010338:	2301      	movs	r3, #1
 801033a:	61a3      	str	r3, [r4, #24]
 801033c:	e7d2      	b.n	80102e4 <__sinit+0xc>
 801033e:	bf00      	nop
 8010340:	08015a74 	.word	0x08015a74
 8010344:	08010271 	.word	0x08010271

08010348 <__sfp>:
 8010348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801034a:	4607      	mov	r7, r0
 801034c:	f7ff ffac 	bl	80102a8 <__sfp_lock_acquire>
 8010350:	4b1e      	ldr	r3, [pc, #120]	; (80103cc <__sfp+0x84>)
 8010352:	681e      	ldr	r6, [r3, #0]
 8010354:	69b3      	ldr	r3, [r6, #24]
 8010356:	b913      	cbnz	r3, 801035e <__sfp+0x16>
 8010358:	4630      	mov	r0, r6
 801035a:	f7ff ffbd 	bl	80102d8 <__sinit>
 801035e:	3648      	adds	r6, #72	; 0x48
 8010360:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010364:	3b01      	subs	r3, #1
 8010366:	d503      	bpl.n	8010370 <__sfp+0x28>
 8010368:	6833      	ldr	r3, [r6, #0]
 801036a:	b30b      	cbz	r3, 80103b0 <__sfp+0x68>
 801036c:	6836      	ldr	r6, [r6, #0]
 801036e:	e7f7      	b.n	8010360 <__sfp+0x18>
 8010370:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010374:	b9d5      	cbnz	r5, 80103ac <__sfp+0x64>
 8010376:	4b16      	ldr	r3, [pc, #88]	; (80103d0 <__sfp+0x88>)
 8010378:	60e3      	str	r3, [r4, #12]
 801037a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801037e:	6665      	str	r5, [r4, #100]	; 0x64
 8010380:	f000 f86c 	bl	801045c <__retarget_lock_init_recursive>
 8010384:	f7ff ff96 	bl	80102b4 <__sfp_lock_release>
 8010388:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801038c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010390:	6025      	str	r5, [r4, #0]
 8010392:	61a5      	str	r5, [r4, #24]
 8010394:	2208      	movs	r2, #8
 8010396:	4629      	mov	r1, r5
 8010398:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801039c:	f000 f86f 	bl	801047e <memset>
 80103a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80103a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80103a8:	4620      	mov	r0, r4
 80103aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103ac:	3468      	adds	r4, #104	; 0x68
 80103ae:	e7d9      	b.n	8010364 <__sfp+0x1c>
 80103b0:	2104      	movs	r1, #4
 80103b2:	4638      	mov	r0, r7
 80103b4:	f7ff ff62 	bl	801027c <__sfmoreglue>
 80103b8:	4604      	mov	r4, r0
 80103ba:	6030      	str	r0, [r6, #0]
 80103bc:	2800      	cmp	r0, #0
 80103be:	d1d5      	bne.n	801036c <__sfp+0x24>
 80103c0:	f7ff ff78 	bl	80102b4 <__sfp_lock_release>
 80103c4:	230c      	movs	r3, #12
 80103c6:	603b      	str	r3, [r7, #0]
 80103c8:	e7ee      	b.n	80103a8 <__sfp+0x60>
 80103ca:	bf00      	nop
 80103cc:	08015a74 	.word	0x08015a74
 80103d0:	ffff0001 	.word	0xffff0001

080103d4 <_fwalk_reent>:
 80103d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103d8:	4606      	mov	r6, r0
 80103da:	4688      	mov	r8, r1
 80103dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80103e0:	2700      	movs	r7, #0
 80103e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80103e6:	f1b9 0901 	subs.w	r9, r9, #1
 80103ea:	d505      	bpl.n	80103f8 <_fwalk_reent+0x24>
 80103ec:	6824      	ldr	r4, [r4, #0]
 80103ee:	2c00      	cmp	r4, #0
 80103f0:	d1f7      	bne.n	80103e2 <_fwalk_reent+0xe>
 80103f2:	4638      	mov	r0, r7
 80103f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103f8:	89ab      	ldrh	r3, [r5, #12]
 80103fa:	2b01      	cmp	r3, #1
 80103fc:	d907      	bls.n	801040e <_fwalk_reent+0x3a>
 80103fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010402:	3301      	adds	r3, #1
 8010404:	d003      	beq.n	801040e <_fwalk_reent+0x3a>
 8010406:	4629      	mov	r1, r5
 8010408:	4630      	mov	r0, r6
 801040a:	47c0      	blx	r8
 801040c:	4307      	orrs	r7, r0
 801040e:	3568      	adds	r5, #104	; 0x68
 8010410:	e7e9      	b.n	80103e6 <_fwalk_reent+0x12>
	...

08010414 <__libc_init_array>:
 8010414:	b570      	push	{r4, r5, r6, lr}
 8010416:	4d0d      	ldr	r5, [pc, #52]	; (801044c <__libc_init_array+0x38>)
 8010418:	4c0d      	ldr	r4, [pc, #52]	; (8010450 <__libc_init_array+0x3c>)
 801041a:	1b64      	subs	r4, r4, r5
 801041c:	10a4      	asrs	r4, r4, #2
 801041e:	2600      	movs	r6, #0
 8010420:	42a6      	cmp	r6, r4
 8010422:	d109      	bne.n	8010438 <__libc_init_array+0x24>
 8010424:	4d0b      	ldr	r5, [pc, #44]	; (8010454 <__libc_init_array+0x40>)
 8010426:	4c0c      	ldr	r4, [pc, #48]	; (8010458 <__libc_init_array+0x44>)
 8010428:	f004 fe38 	bl	801509c <_init>
 801042c:	1b64      	subs	r4, r4, r5
 801042e:	10a4      	asrs	r4, r4, #2
 8010430:	2600      	movs	r6, #0
 8010432:	42a6      	cmp	r6, r4
 8010434:	d105      	bne.n	8010442 <__libc_init_array+0x2e>
 8010436:	bd70      	pop	{r4, r5, r6, pc}
 8010438:	f855 3b04 	ldr.w	r3, [r5], #4
 801043c:	4798      	blx	r3
 801043e:	3601      	adds	r6, #1
 8010440:	e7ee      	b.n	8010420 <__libc_init_array+0xc>
 8010442:	f855 3b04 	ldr.w	r3, [r5], #4
 8010446:	4798      	blx	r3
 8010448:	3601      	adds	r6, #1
 801044a:	e7f2      	b.n	8010432 <__libc_init_array+0x1e>
 801044c:	08016040 	.word	0x08016040
 8010450:	08016040 	.word	0x08016040
 8010454:	08016040 	.word	0x08016040
 8010458:	08016044 	.word	0x08016044

0801045c <__retarget_lock_init_recursive>:
 801045c:	4770      	bx	lr

0801045e <__retarget_lock_acquire_recursive>:
 801045e:	4770      	bx	lr

08010460 <__retarget_lock_release_recursive>:
 8010460:	4770      	bx	lr

08010462 <memcpy>:
 8010462:	440a      	add	r2, r1
 8010464:	4291      	cmp	r1, r2
 8010466:	f100 33ff 	add.w	r3, r0, #4294967295
 801046a:	d100      	bne.n	801046e <memcpy+0xc>
 801046c:	4770      	bx	lr
 801046e:	b510      	push	{r4, lr}
 8010470:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010474:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010478:	4291      	cmp	r1, r2
 801047a:	d1f9      	bne.n	8010470 <memcpy+0xe>
 801047c:	bd10      	pop	{r4, pc}

0801047e <memset>:
 801047e:	4402      	add	r2, r0
 8010480:	4603      	mov	r3, r0
 8010482:	4293      	cmp	r3, r2
 8010484:	d100      	bne.n	8010488 <memset+0xa>
 8010486:	4770      	bx	lr
 8010488:	f803 1b01 	strb.w	r1, [r3], #1
 801048c:	e7f9      	b.n	8010482 <memset+0x4>
	...

08010490 <sbrk_aligned>:
 8010490:	b570      	push	{r4, r5, r6, lr}
 8010492:	4e0e      	ldr	r6, [pc, #56]	; (80104cc <sbrk_aligned+0x3c>)
 8010494:	460c      	mov	r4, r1
 8010496:	6831      	ldr	r1, [r6, #0]
 8010498:	4605      	mov	r5, r0
 801049a:	b911      	cbnz	r1, 80104a2 <sbrk_aligned+0x12>
 801049c:	f000 fe04 	bl	80110a8 <_sbrk_r>
 80104a0:	6030      	str	r0, [r6, #0]
 80104a2:	4621      	mov	r1, r4
 80104a4:	4628      	mov	r0, r5
 80104a6:	f000 fdff 	bl	80110a8 <_sbrk_r>
 80104aa:	1c43      	adds	r3, r0, #1
 80104ac:	d00a      	beq.n	80104c4 <sbrk_aligned+0x34>
 80104ae:	1cc4      	adds	r4, r0, #3
 80104b0:	f024 0403 	bic.w	r4, r4, #3
 80104b4:	42a0      	cmp	r0, r4
 80104b6:	d007      	beq.n	80104c8 <sbrk_aligned+0x38>
 80104b8:	1a21      	subs	r1, r4, r0
 80104ba:	4628      	mov	r0, r5
 80104bc:	f000 fdf4 	bl	80110a8 <_sbrk_r>
 80104c0:	3001      	adds	r0, #1
 80104c2:	d101      	bne.n	80104c8 <sbrk_aligned+0x38>
 80104c4:	f04f 34ff 	mov.w	r4, #4294967295
 80104c8:	4620      	mov	r0, r4
 80104ca:	bd70      	pop	{r4, r5, r6, pc}
 80104cc:	20005b64 	.word	0x20005b64

080104d0 <_malloc_r>:
 80104d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104d4:	1ccd      	adds	r5, r1, #3
 80104d6:	f025 0503 	bic.w	r5, r5, #3
 80104da:	3508      	adds	r5, #8
 80104dc:	2d0c      	cmp	r5, #12
 80104de:	bf38      	it	cc
 80104e0:	250c      	movcc	r5, #12
 80104e2:	2d00      	cmp	r5, #0
 80104e4:	4607      	mov	r7, r0
 80104e6:	db01      	blt.n	80104ec <_malloc_r+0x1c>
 80104e8:	42a9      	cmp	r1, r5
 80104ea:	d905      	bls.n	80104f8 <_malloc_r+0x28>
 80104ec:	230c      	movs	r3, #12
 80104ee:	603b      	str	r3, [r7, #0]
 80104f0:	2600      	movs	r6, #0
 80104f2:	4630      	mov	r0, r6
 80104f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104f8:	4e2e      	ldr	r6, [pc, #184]	; (80105b4 <_malloc_r+0xe4>)
 80104fa:	f001 fecd 	bl	8012298 <__malloc_lock>
 80104fe:	6833      	ldr	r3, [r6, #0]
 8010500:	461c      	mov	r4, r3
 8010502:	bb34      	cbnz	r4, 8010552 <_malloc_r+0x82>
 8010504:	4629      	mov	r1, r5
 8010506:	4638      	mov	r0, r7
 8010508:	f7ff ffc2 	bl	8010490 <sbrk_aligned>
 801050c:	1c43      	adds	r3, r0, #1
 801050e:	4604      	mov	r4, r0
 8010510:	d14d      	bne.n	80105ae <_malloc_r+0xde>
 8010512:	6834      	ldr	r4, [r6, #0]
 8010514:	4626      	mov	r6, r4
 8010516:	2e00      	cmp	r6, #0
 8010518:	d140      	bne.n	801059c <_malloc_r+0xcc>
 801051a:	6823      	ldr	r3, [r4, #0]
 801051c:	4631      	mov	r1, r6
 801051e:	4638      	mov	r0, r7
 8010520:	eb04 0803 	add.w	r8, r4, r3
 8010524:	f000 fdc0 	bl	80110a8 <_sbrk_r>
 8010528:	4580      	cmp	r8, r0
 801052a:	d13a      	bne.n	80105a2 <_malloc_r+0xd2>
 801052c:	6821      	ldr	r1, [r4, #0]
 801052e:	3503      	adds	r5, #3
 8010530:	1a6d      	subs	r5, r5, r1
 8010532:	f025 0503 	bic.w	r5, r5, #3
 8010536:	3508      	adds	r5, #8
 8010538:	2d0c      	cmp	r5, #12
 801053a:	bf38      	it	cc
 801053c:	250c      	movcc	r5, #12
 801053e:	4629      	mov	r1, r5
 8010540:	4638      	mov	r0, r7
 8010542:	f7ff ffa5 	bl	8010490 <sbrk_aligned>
 8010546:	3001      	adds	r0, #1
 8010548:	d02b      	beq.n	80105a2 <_malloc_r+0xd2>
 801054a:	6823      	ldr	r3, [r4, #0]
 801054c:	442b      	add	r3, r5
 801054e:	6023      	str	r3, [r4, #0]
 8010550:	e00e      	b.n	8010570 <_malloc_r+0xa0>
 8010552:	6822      	ldr	r2, [r4, #0]
 8010554:	1b52      	subs	r2, r2, r5
 8010556:	d41e      	bmi.n	8010596 <_malloc_r+0xc6>
 8010558:	2a0b      	cmp	r2, #11
 801055a:	d916      	bls.n	801058a <_malloc_r+0xba>
 801055c:	1961      	adds	r1, r4, r5
 801055e:	42a3      	cmp	r3, r4
 8010560:	6025      	str	r5, [r4, #0]
 8010562:	bf18      	it	ne
 8010564:	6059      	strne	r1, [r3, #4]
 8010566:	6863      	ldr	r3, [r4, #4]
 8010568:	bf08      	it	eq
 801056a:	6031      	streq	r1, [r6, #0]
 801056c:	5162      	str	r2, [r4, r5]
 801056e:	604b      	str	r3, [r1, #4]
 8010570:	4638      	mov	r0, r7
 8010572:	f104 060b 	add.w	r6, r4, #11
 8010576:	f001 fe95 	bl	80122a4 <__malloc_unlock>
 801057a:	f026 0607 	bic.w	r6, r6, #7
 801057e:	1d23      	adds	r3, r4, #4
 8010580:	1af2      	subs	r2, r6, r3
 8010582:	d0b6      	beq.n	80104f2 <_malloc_r+0x22>
 8010584:	1b9b      	subs	r3, r3, r6
 8010586:	50a3      	str	r3, [r4, r2]
 8010588:	e7b3      	b.n	80104f2 <_malloc_r+0x22>
 801058a:	6862      	ldr	r2, [r4, #4]
 801058c:	42a3      	cmp	r3, r4
 801058e:	bf0c      	ite	eq
 8010590:	6032      	streq	r2, [r6, #0]
 8010592:	605a      	strne	r2, [r3, #4]
 8010594:	e7ec      	b.n	8010570 <_malloc_r+0xa0>
 8010596:	4623      	mov	r3, r4
 8010598:	6864      	ldr	r4, [r4, #4]
 801059a:	e7b2      	b.n	8010502 <_malloc_r+0x32>
 801059c:	4634      	mov	r4, r6
 801059e:	6876      	ldr	r6, [r6, #4]
 80105a0:	e7b9      	b.n	8010516 <_malloc_r+0x46>
 80105a2:	230c      	movs	r3, #12
 80105a4:	603b      	str	r3, [r7, #0]
 80105a6:	4638      	mov	r0, r7
 80105a8:	f001 fe7c 	bl	80122a4 <__malloc_unlock>
 80105ac:	e7a1      	b.n	80104f2 <_malloc_r+0x22>
 80105ae:	6025      	str	r5, [r4, #0]
 80105b0:	e7de      	b.n	8010570 <_malloc_r+0xa0>
 80105b2:	bf00      	nop
 80105b4:	20005b60 	.word	0x20005b60

080105b8 <__cvt>:
 80105b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80105bc:	ec55 4b10 	vmov	r4, r5, d0
 80105c0:	2d00      	cmp	r5, #0
 80105c2:	460e      	mov	r6, r1
 80105c4:	4619      	mov	r1, r3
 80105c6:	462b      	mov	r3, r5
 80105c8:	bfbb      	ittet	lt
 80105ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80105ce:	461d      	movlt	r5, r3
 80105d0:	2300      	movge	r3, #0
 80105d2:	232d      	movlt	r3, #45	; 0x2d
 80105d4:	700b      	strb	r3, [r1, #0]
 80105d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80105d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80105dc:	4691      	mov	r9, r2
 80105de:	f023 0820 	bic.w	r8, r3, #32
 80105e2:	bfbc      	itt	lt
 80105e4:	4622      	movlt	r2, r4
 80105e6:	4614      	movlt	r4, r2
 80105e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80105ec:	d005      	beq.n	80105fa <__cvt+0x42>
 80105ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80105f2:	d100      	bne.n	80105f6 <__cvt+0x3e>
 80105f4:	3601      	adds	r6, #1
 80105f6:	2102      	movs	r1, #2
 80105f8:	e000      	b.n	80105fc <__cvt+0x44>
 80105fa:	2103      	movs	r1, #3
 80105fc:	ab03      	add	r3, sp, #12
 80105fe:	9301      	str	r3, [sp, #4]
 8010600:	ab02      	add	r3, sp, #8
 8010602:	9300      	str	r3, [sp, #0]
 8010604:	ec45 4b10 	vmov	d0, r4, r5
 8010608:	4653      	mov	r3, sl
 801060a:	4632      	mov	r2, r6
 801060c:	f000 ff10 	bl	8011430 <_dtoa_r>
 8010610:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010614:	4607      	mov	r7, r0
 8010616:	d102      	bne.n	801061e <__cvt+0x66>
 8010618:	f019 0f01 	tst.w	r9, #1
 801061c:	d022      	beq.n	8010664 <__cvt+0xac>
 801061e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010622:	eb07 0906 	add.w	r9, r7, r6
 8010626:	d110      	bne.n	801064a <__cvt+0x92>
 8010628:	783b      	ldrb	r3, [r7, #0]
 801062a:	2b30      	cmp	r3, #48	; 0x30
 801062c:	d10a      	bne.n	8010644 <__cvt+0x8c>
 801062e:	2200      	movs	r2, #0
 8010630:	2300      	movs	r3, #0
 8010632:	4620      	mov	r0, r4
 8010634:	4629      	mov	r1, r5
 8010636:	f7f0 fa47 	bl	8000ac8 <__aeabi_dcmpeq>
 801063a:	b918      	cbnz	r0, 8010644 <__cvt+0x8c>
 801063c:	f1c6 0601 	rsb	r6, r6, #1
 8010640:	f8ca 6000 	str.w	r6, [sl]
 8010644:	f8da 3000 	ldr.w	r3, [sl]
 8010648:	4499      	add	r9, r3
 801064a:	2200      	movs	r2, #0
 801064c:	2300      	movs	r3, #0
 801064e:	4620      	mov	r0, r4
 8010650:	4629      	mov	r1, r5
 8010652:	f7f0 fa39 	bl	8000ac8 <__aeabi_dcmpeq>
 8010656:	b108      	cbz	r0, 801065c <__cvt+0xa4>
 8010658:	f8cd 900c 	str.w	r9, [sp, #12]
 801065c:	2230      	movs	r2, #48	; 0x30
 801065e:	9b03      	ldr	r3, [sp, #12]
 8010660:	454b      	cmp	r3, r9
 8010662:	d307      	bcc.n	8010674 <__cvt+0xbc>
 8010664:	9b03      	ldr	r3, [sp, #12]
 8010666:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010668:	1bdb      	subs	r3, r3, r7
 801066a:	4638      	mov	r0, r7
 801066c:	6013      	str	r3, [r2, #0]
 801066e:	b004      	add	sp, #16
 8010670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010674:	1c59      	adds	r1, r3, #1
 8010676:	9103      	str	r1, [sp, #12]
 8010678:	701a      	strb	r2, [r3, #0]
 801067a:	e7f0      	b.n	801065e <__cvt+0xa6>

0801067c <__exponent>:
 801067c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801067e:	4603      	mov	r3, r0
 8010680:	2900      	cmp	r1, #0
 8010682:	bfb8      	it	lt
 8010684:	4249      	neglt	r1, r1
 8010686:	f803 2b02 	strb.w	r2, [r3], #2
 801068a:	bfb4      	ite	lt
 801068c:	222d      	movlt	r2, #45	; 0x2d
 801068e:	222b      	movge	r2, #43	; 0x2b
 8010690:	2909      	cmp	r1, #9
 8010692:	7042      	strb	r2, [r0, #1]
 8010694:	dd2a      	ble.n	80106ec <__exponent+0x70>
 8010696:	f10d 0407 	add.w	r4, sp, #7
 801069a:	46a4      	mov	ip, r4
 801069c:	270a      	movs	r7, #10
 801069e:	46a6      	mov	lr, r4
 80106a0:	460a      	mov	r2, r1
 80106a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80106a6:	fb07 1516 	mls	r5, r7, r6, r1
 80106aa:	3530      	adds	r5, #48	; 0x30
 80106ac:	2a63      	cmp	r2, #99	; 0x63
 80106ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80106b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80106b6:	4631      	mov	r1, r6
 80106b8:	dcf1      	bgt.n	801069e <__exponent+0x22>
 80106ba:	3130      	adds	r1, #48	; 0x30
 80106bc:	f1ae 0502 	sub.w	r5, lr, #2
 80106c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80106c4:	1c44      	adds	r4, r0, #1
 80106c6:	4629      	mov	r1, r5
 80106c8:	4561      	cmp	r1, ip
 80106ca:	d30a      	bcc.n	80106e2 <__exponent+0x66>
 80106cc:	f10d 0209 	add.w	r2, sp, #9
 80106d0:	eba2 020e 	sub.w	r2, r2, lr
 80106d4:	4565      	cmp	r5, ip
 80106d6:	bf88      	it	hi
 80106d8:	2200      	movhi	r2, #0
 80106da:	4413      	add	r3, r2
 80106dc:	1a18      	subs	r0, r3, r0
 80106de:	b003      	add	sp, #12
 80106e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80106e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80106ea:	e7ed      	b.n	80106c8 <__exponent+0x4c>
 80106ec:	2330      	movs	r3, #48	; 0x30
 80106ee:	3130      	adds	r1, #48	; 0x30
 80106f0:	7083      	strb	r3, [r0, #2]
 80106f2:	70c1      	strb	r1, [r0, #3]
 80106f4:	1d03      	adds	r3, r0, #4
 80106f6:	e7f1      	b.n	80106dc <__exponent+0x60>

080106f8 <_printf_float>:
 80106f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106fc:	ed2d 8b02 	vpush	{d8}
 8010700:	b08d      	sub	sp, #52	; 0x34
 8010702:	460c      	mov	r4, r1
 8010704:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010708:	4616      	mov	r6, r2
 801070a:	461f      	mov	r7, r3
 801070c:	4605      	mov	r5, r0
 801070e:	f001 fd3f 	bl	8012190 <_localeconv_r>
 8010712:	f8d0 a000 	ldr.w	sl, [r0]
 8010716:	4650      	mov	r0, sl
 8010718:	f7ef fd5a 	bl	80001d0 <strlen>
 801071c:	2300      	movs	r3, #0
 801071e:	930a      	str	r3, [sp, #40]	; 0x28
 8010720:	6823      	ldr	r3, [r4, #0]
 8010722:	9305      	str	r3, [sp, #20]
 8010724:	f8d8 3000 	ldr.w	r3, [r8]
 8010728:	f894 b018 	ldrb.w	fp, [r4, #24]
 801072c:	3307      	adds	r3, #7
 801072e:	f023 0307 	bic.w	r3, r3, #7
 8010732:	f103 0208 	add.w	r2, r3, #8
 8010736:	f8c8 2000 	str.w	r2, [r8]
 801073a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010742:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010746:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801074a:	9307      	str	r3, [sp, #28]
 801074c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010750:	ee08 0a10 	vmov	s16, r0
 8010754:	4b9f      	ldr	r3, [pc, #636]	; (80109d4 <_printf_float+0x2dc>)
 8010756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801075a:	f04f 32ff 	mov.w	r2, #4294967295
 801075e:	f7f0 f9e5 	bl	8000b2c <__aeabi_dcmpun>
 8010762:	bb88      	cbnz	r0, 80107c8 <_printf_float+0xd0>
 8010764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010768:	4b9a      	ldr	r3, [pc, #616]	; (80109d4 <_printf_float+0x2dc>)
 801076a:	f04f 32ff 	mov.w	r2, #4294967295
 801076e:	f7f0 f9bf 	bl	8000af0 <__aeabi_dcmple>
 8010772:	bb48      	cbnz	r0, 80107c8 <_printf_float+0xd0>
 8010774:	2200      	movs	r2, #0
 8010776:	2300      	movs	r3, #0
 8010778:	4640      	mov	r0, r8
 801077a:	4649      	mov	r1, r9
 801077c:	f7f0 f9ae 	bl	8000adc <__aeabi_dcmplt>
 8010780:	b110      	cbz	r0, 8010788 <_printf_float+0x90>
 8010782:	232d      	movs	r3, #45	; 0x2d
 8010784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010788:	4b93      	ldr	r3, [pc, #588]	; (80109d8 <_printf_float+0x2e0>)
 801078a:	4894      	ldr	r0, [pc, #592]	; (80109dc <_printf_float+0x2e4>)
 801078c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010790:	bf94      	ite	ls
 8010792:	4698      	movls	r8, r3
 8010794:	4680      	movhi	r8, r0
 8010796:	2303      	movs	r3, #3
 8010798:	6123      	str	r3, [r4, #16]
 801079a:	9b05      	ldr	r3, [sp, #20]
 801079c:	f023 0204 	bic.w	r2, r3, #4
 80107a0:	6022      	str	r2, [r4, #0]
 80107a2:	f04f 0900 	mov.w	r9, #0
 80107a6:	9700      	str	r7, [sp, #0]
 80107a8:	4633      	mov	r3, r6
 80107aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80107ac:	4621      	mov	r1, r4
 80107ae:	4628      	mov	r0, r5
 80107b0:	f000 f9d8 	bl	8010b64 <_printf_common>
 80107b4:	3001      	adds	r0, #1
 80107b6:	f040 8090 	bne.w	80108da <_printf_float+0x1e2>
 80107ba:	f04f 30ff 	mov.w	r0, #4294967295
 80107be:	b00d      	add	sp, #52	; 0x34
 80107c0:	ecbd 8b02 	vpop	{d8}
 80107c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c8:	4642      	mov	r2, r8
 80107ca:	464b      	mov	r3, r9
 80107cc:	4640      	mov	r0, r8
 80107ce:	4649      	mov	r1, r9
 80107d0:	f7f0 f9ac 	bl	8000b2c <__aeabi_dcmpun>
 80107d4:	b140      	cbz	r0, 80107e8 <_printf_float+0xf0>
 80107d6:	464b      	mov	r3, r9
 80107d8:	2b00      	cmp	r3, #0
 80107da:	bfbc      	itt	lt
 80107dc:	232d      	movlt	r3, #45	; 0x2d
 80107de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80107e2:	487f      	ldr	r0, [pc, #508]	; (80109e0 <_printf_float+0x2e8>)
 80107e4:	4b7f      	ldr	r3, [pc, #508]	; (80109e4 <_printf_float+0x2ec>)
 80107e6:	e7d1      	b.n	801078c <_printf_float+0x94>
 80107e8:	6863      	ldr	r3, [r4, #4]
 80107ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80107ee:	9206      	str	r2, [sp, #24]
 80107f0:	1c5a      	adds	r2, r3, #1
 80107f2:	d13f      	bne.n	8010874 <_printf_float+0x17c>
 80107f4:	2306      	movs	r3, #6
 80107f6:	6063      	str	r3, [r4, #4]
 80107f8:	9b05      	ldr	r3, [sp, #20]
 80107fa:	6861      	ldr	r1, [r4, #4]
 80107fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010800:	2300      	movs	r3, #0
 8010802:	9303      	str	r3, [sp, #12]
 8010804:	ab0a      	add	r3, sp, #40	; 0x28
 8010806:	e9cd b301 	strd	fp, r3, [sp, #4]
 801080a:	ab09      	add	r3, sp, #36	; 0x24
 801080c:	ec49 8b10 	vmov	d0, r8, r9
 8010810:	9300      	str	r3, [sp, #0]
 8010812:	6022      	str	r2, [r4, #0]
 8010814:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010818:	4628      	mov	r0, r5
 801081a:	f7ff fecd 	bl	80105b8 <__cvt>
 801081e:	9b06      	ldr	r3, [sp, #24]
 8010820:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010822:	2b47      	cmp	r3, #71	; 0x47
 8010824:	4680      	mov	r8, r0
 8010826:	d108      	bne.n	801083a <_printf_float+0x142>
 8010828:	1cc8      	adds	r0, r1, #3
 801082a:	db02      	blt.n	8010832 <_printf_float+0x13a>
 801082c:	6863      	ldr	r3, [r4, #4]
 801082e:	4299      	cmp	r1, r3
 8010830:	dd41      	ble.n	80108b6 <_printf_float+0x1be>
 8010832:	f1ab 0b02 	sub.w	fp, fp, #2
 8010836:	fa5f fb8b 	uxtb.w	fp, fp
 801083a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801083e:	d820      	bhi.n	8010882 <_printf_float+0x18a>
 8010840:	3901      	subs	r1, #1
 8010842:	465a      	mov	r2, fp
 8010844:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010848:	9109      	str	r1, [sp, #36]	; 0x24
 801084a:	f7ff ff17 	bl	801067c <__exponent>
 801084e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010850:	1813      	adds	r3, r2, r0
 8010852:	2a01      	cmp	r2, #1
 8010854:	4681      	mov	r9, r0
 8010856:	6123      	str	r3, [r4, #16]
 8010858:	dc02      	bgt.n	8010860 <_printf_float+0x168>
 801085a:	6822      	ldr	r2, [r4, #0]
 801085c:	07d2      	lsls	r2, r2, #31
 801085e:	d501      	bpl.n	8010864 <_printf_float+0x16c>
 8010860:	3301      	adds	r3, #1
 8010862:	6123      	str	r3, [r4, #16]
 8010864:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010868:	2b00      	cmp	r3, #0
 801086a:	d09c      	beq.n	80107a6 <_printf_float+0xae>
 801086c:	232d      	movs	r3, #45	; 0x2d
 801086e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010872:	e798      	b.n	80107a6 <_printf_float+0xae>
 8010874:	9a06      	ldr	r2, [sp, #24]
 8010876:	2a47      	cmp	r2, #71	; 0x47
 8010878:	d1be      	bne.n	80107f8 <_printf_float+0x100>
 801087a:	2b00      	cmp	r3, #0
 801087c:	d1bc      	bne.n	80107f8 <_printf_float+0x100>
 801087e:	2301      	movs	r3, #1
 8010880:	e7b9      	b.n	80107f6 <_printf_float+0xfe>
 8010882:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010886:	d118      	bne.n	80108ba <_printf_float+0x1c2>
 8010888:	2900      	cmp	r1, #0
 801088a:	6863      	ldr	r3, [r4, #4]
 801088c:	dd0b      	ble.n	80108a6 <_printf_float+0x1ae>
 801088e:	6121      	str	r1, [r4, #16]
 8010890:	b913      	cbnz	r3, 8010898 <_printf_float+0x1a0>
 8010892:	6822      	ldr	r2, [r4, #0]
 8010894:	07d0      	lsls	r0, r2, #31
 8010896:	d502      	bpl.n	801089e <_printf_float+0x1a6>
 8010898:	3301      	adds	r3, #1
 801089a:	440b      	add	r3, r1
 801089c:	6123      	str	r3, [r4, #16]
 801089e:	65a1      	str	r1, [r4, #88]	; 0x58
 80108a0:	f04f 0900 	mov.w	r9, #0
 80108a4:	e7de      	b.n	8010864 <_printf_float+0x16c>
 80108a6:	b913      	cbnz	r3, 80108ae <_printf_float+0x1b6>
 80108a8:	6822      	ldr	r2, [r4, #0]
 80108aa:	07d2      	lsls	r2, r2, #31
 80108ac:	d501      	bpl.n	80108b2 <_printf_float+0x1ba>
 80108ae:	3302      	adds	r3, #2
 80108b0:	e7f4      	b.n	801089c <_printf_float+0x1a4>
 80108b2:	2301      	movs	r3, #1
 80108b4:	e7f2      	b.n	801089c <_printf_float+0x1a4>
 80108b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80108ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108bc:	4299      	cmp	r1, r3
 80108be:	db05      	blt.n	80108cc <_printf_float+0x1d4>
 80108c0:	6823      	ldr	r3, [r4, #0]
 80108c2:	6121      	str	r1, [r4, #16]
 80108c4:	07d8      	lsls	r0, r3, #31
 80108c6:	d5ea      	bpl.n	801089e <_printf_float+0x1a6>
 80108c8:	1c4b      	adds	r3, r1, #1
 80108ca:	e7e7      	b.n	801089c <_printf_float+0x1a4>
 80108cc:	2900      	cmp	r1, #0
 80108ce:	bfd4      	ite	le
 80108d0:	f1c1 0202 	rsble	r2, r1, #2
 80108d4:	2201      	movgt	r2, #1
 80108d6:	4413      	add	r3, r2
 80108d8:	e7e0      	b.n	801089c <_printf_float+0x1a4>
 80108da:	6823      	ldr	r3, [r4, #0]
 80108dc:	055a      	lsls	r2, r3, #21
 80108de:	d407      	bmi.n	80108f0 <_printf_float+0x1f8>
 80108e0:	6923      	ldr	r3, [r4, #16]
 80108e2:	4642      	mov	r2, r8
 80108e4:	4631      	mov	r1, r6
 80108e6:	4628      	mov	r0, r5
 80108e8:	47b8      	blx	r7
 80108ea:	3001      	adds	r0, #1
 80108ec:	d12c      	bne.n	8010948 <_printf_float+0x250>
 80108ee:	e764      	b.n	80107ba <_printf_float+0xc2>
 80108f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80108f4:	f240 80e0 	bls.w	8010ab8 <_printf_float+0x3c0>
 80108f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80108fc:	2200      	movs	r2, #0
 80108fe:	2300      	movs	r3, #0
 8010900:	f7f0 f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8010904:	2800      	cmp	r0, #0
 8010906:	d034      	beq.n	8010972 <_printf_float+0x27a>
 8010908:	4a37      	ldr	r2, [pc, #220]	; (80109e8 <_printf_float+0x2f0>)
 801090a:	2301      	movs	r3, #1
 801090c:	4631      	mov	r1, r6
 801090e:	4628      	mov	r0, r5
 8010910:	47b8      	blx	r7
 8010912:	3001      	adds	r0, #1
 8010914:	f43f af51 	beq.w	80107ba <_printf_float+0xc2>
 8010918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801091c:	429a      	cmp	r2, r3
 801091e:	db02      	blt.n	8010926 <_printf_float+0x22e>
 8010920:	6823      	ldr	r3, [r4, #0]
 8010922:	07d8      	lsls	r0, r3, #31
 8010924:	d510      	bpl.n	8010948 <_printf_float+0x250>
 8010926:	ee18 3a10 	vmov	r3, s16
 801092a:	4652      	mov	r2, sl
 801092c:	4631      	mov	r1, r6
 801092e:	4628      	mov	r0, r5
 8010930:	47b8      	blx	r7
 8010932:	3001      	adds	r0, #1
 8010934:	f43f af41 	beq.w	80107ba <_printf_float+0xc2>
 8010938:	f04f 0800 	mov.w	r8, #0
 801093c:	f104 091a 	add.w	r9, r4, #26
 8010940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010942:	3b01      	subs	r3, #1
 8010944:	4543      	cmp	r3, r8
 8010946:	dc09      	bgt.n	801095c <_printf_float+0x264>
 8010948:	6823      	ldr	r3, [r4, #0]
 801094a:	079b      	lsls	r3, r3, #30
 801094c:	f100 8105 	bmi.w	8010b5a <_printf_float+0x462>
 8010950:	68e0      	ldr	r0, [r4, #12]
 8010952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010954:	4298      	cmp	r0, r3
 8010956:	bfb8      	it	lt
 8010958:	4618      	movlt	r0, r3
 801095a:	e730      	b.n	80107be <_printf_float+0xc6>
 801095c:	2301      	movs	r3, #1
 801095e:	464a      	mov	r2, r9
 8010960:	4631      	mov	r1, r6
 8010962:	4628      	mov	r0, r5
 8010964:	47b8      	blx	r7
 8010966:	3001      	adds	r0, #1
 8010968:	f43f af27 	beq.w	80107ba <_printf_float+0xc2>
 801096c:	f108 0801 	add.w	r8, r8, #1
 8010970:	e7e6      	b.n	8010940 <_printf_float+0x248>
 8010972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010974:	2b00      	cmp	r3, #0
 8010976:	dc39      	bgt.n	80109ec <_printf_float+0x2f4>
 8010978:	4a1b      	ldr	r2, [pc, #108]	; (80109e8 <_printf_float+0x2f0>)
 801097a:	2301      	movs	r3, #1
 801097c:	4631      	mov	r1, r6
 801097e:	4628      	mov	r0, r5
 8010980:	47b8      	blx	r7
 8010982:	3001      	adds	r0, #1
 8010984:	f43f af19 	beq.w	80107ba <_printf_float+0xc2>
 8010988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801098c:	4313      	orrs	r3, r2
 801098e:	d102      	bne.n	8010996 <_printf_float+0x29e>
 8010990:	6823      	ldr	r3, [r4, #0]
 8010992:	07d9      	lsls	r1, r3, #31
 8010994:	d5d8      	bpl.n	8010948 <_printf_float+0x250>
 8010996:	ee18 3a10 	vmov	r3, s16
 801099a:	4652      	mov	r2, sl
 801099c:	4631      	mov	r1, r6
 801099e:	4628      	mov	r0, r5
 80109a0:	47b8      	blx	r7
 80109a2:	3001      	adds	r0, #1
 80109a4:	f43f af09 	beq.w	80107ba <_printf_float+0xc2>
 80109a8:	f04f 0900 	mov.w	r9, #0
 80109ac:	f104 0a1a 	add.w	sl, r4, #26
 80109b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109b2:	425b      	negs	r3, r3
 80109b4:	454b      	cmp	r3, r9
 80109b6:	dc01      	bgt.n	80109bc <_printf_float+0x2c4>
 80109b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109ba:	e792      	b.n	80108e2 <_printf_float+0x1ea>
 80109bc:	2301      	movs	r3, #1
 80109be:	4652      	mov	r2, sl
 80109c0:	4631      	mov	r1, r6
 80109c2:	4628      	mov	r0, r5
 80109c4:	47b8      	blx	r7
 80109c6:	3001      	adds	r0, #1
 80109c8:	f43f aef7 	beq.w	80107ba <_printf_float+0xc2>
 80109cc:	f109 0901 	add.w	r9, r9, #1
 80109d0:	e7ee      	b.n	80109b0 <_printf_float+0x2b8>
 80109d2:	bf00      	nop
 80109d4:	7fefffff 	.word	0x7fefffff
 80109d8:	08015a78 	.word	0x08015a78
 80109dc:	08015a7c 	.word	0x08015a7c
 80109e0:	08015a84 	.word	0x08015a84
 80109e4:	08015a80 	.word	0x08015a80
 80109e8:	08015a88 	.word	0x08015a88
 80109ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80109f0:	429a      	cmp	r2, r3
 80109f2:	bfa8      	it	ge
 80109f4:	461a      	movge	r2, r3
 80109f6:	2a00      	cmp	r2, #0
 80109f8:	4691      	mov	r9, r2
 80109fa:	dc37      	bgt.n	8010a6c <_printf_float+0x374>
 80109fc:	f04f 0b00 	mov.w	fp, #0
 8010a00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010a04:	f104 021a 	add.w	r2, r4, #26
 8010a08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010a0a:	9305      	str	r3, [sp, #20]
 8010a0c:	eba3 0309 	sub.w	r3, r3, r9
 8010a10:	455b      	cmp	r3, fp
 8010a12:	dc33      	bgt.n	8010a7c <_printf_float+0x384>
 8010a14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	db3b      	blt.n	8010a94 <_printf_float+0x39c>
 8010a1c:	6823      	ldr	r3, [r4, #0]
 8010a1e:	07da      	lsls	r2, r3, #31
 8010a20:	d438      	bmi.n	8010a94 <_printf_float+0x39c>
 8010a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a24:	9a05      	ldr	r2, [sp, #20]
 8010a26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a28:	1a9a      	subs	r2, r3, r2
 8010a2a:	eba3 0901 	sub.w	r9, r3, r1
 8010a2e:	4591      	cmp	r9, r2
 8010a30:	bfa8      	it	ge
 8010a32:	4691      	movge	r9, r2
 8010a34:	f1b9 0f00 	cmp.w	r9, #0
 8010a38:	dc35      	bgt.n	8010aa6 <_printf_float+0x3ae>
 8010a3a:	f04f 0800 	mov.w	r8, #0
 8010a3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010a42:	f104 0a1a 	add.w	sl, r4, #26
 8010a46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a4a:	1a9b      	subs	r3, r3, r2
 8010a4c:	eba3 0309 	sub.w	r3, r3, r9
 8010a50:	4543      	cmp	r3, r8
 8010a52:	f77f af79 	ble.w	8010948 <_printf_float+0x250>
 8010a56:	2301      	movs	r3, #1
 8010a58:	4652      	mov	r2, sl
 8010a5a:	4631      	mov	r1, r6
 8010a5c:	4628      	mov	r0, r5
 8010a5e:	47b8      	blx	r7
 8010a60:	3001      	adds	r0, #1
 8010a62:	f43f aeaa 	beq.w	80107ba <_printf_float+0xc2>
 8010a66:	f108 0801 	add.w	r8, r8, #1
 8010a6a:	e7ec      	b.n	8010a46 <_printf_float+0x34e>
 8010a6c:	4613      	mov	r3, r2
 8010a6e:	4631      	mov	r1, r6
 8010a70:	4642      	mov	r2, r8
 8010a72:	4628      	mov	r0, r5
 8010a74:	47b8      	blx	r7
 8010a76:	3001      	adds	r0, #1
 8010a78:	d1c0      	bne.n	80109fc <_printf_float+0x304>
 8010a7a:	e69e      	b.n	80107ba <_printf_float+0xc2>
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	4631      	mov	r1, r6
 8010a80:	4628      	mov	r0, r5
 8010a82:	9205      	str	r2, [sp, #20]
 8010a84:	47b8      	blx	r7
 8010a86:	3001      	adds	r0, #1
 8010a88:	f43f ae97 	beq.w	80107ba <_printf_float+0xc2>
 8010a8c:	9a05      	ldr	r2, [sp, #20]
 8010a8e:	f10b 0b01 	add.w	fp, fp, #1
 8010a92:	e7b9      	b.n	8010a08 <_printf_float+0x310>
 8010a94:	ee18 3a10 	vmov	r3, s16
 8010a98:	4652      	mov	r2, sl
 8010a9a:	4631      	mov	r1, r6
 8010a9c:	4628      	mov	r0, r5
 8010a9e:	47b8      	blx	r7
 8010aa0:	3001      	adds	r0, #1
 8010aa2:	d1be      	bne.n	8010a22 <_printf_float+0x32a>
 8010aa4:	e689      	b.n	80107ba <_printf_float+0xc2>
 8010aa6:	9a05      	ldr	r2, [sp, #20]
 8010aa8:	464b      	mov	r3, r9
 8010aaa:	4442      	add	r2, r8
 8010aac:	4631      	mov	r1, r6
 8010aae:	4628      	mov	r0, r5
 8010ab0:	47b8      	blx	r7
 8010ab2:	3001      	adds	r0, #1
 8010ab4:	d1c1      	bne.n	8010a3a <_printf_float+0x342>
 8010ab6:	e680      	b.n	80107ba <_printf_float+0xc2>
 8010ab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010aba:	2a01      	cmp	r2, #1
 8010abc:	dc01      	bgt.n	8010ac2 <_printf_float+0x3ca>
 8010abe:	07db      	lsls	r3, r3, #31
 8010ac0:	d538      	bpl.n	8010b34 <_printf_float+0x43c>
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	4642      	mov	r2, r8
 8010ac6:	4631      	mov	r1, r6
 8010ac8:	4628      	mov	r0, r5
 8010aca:	47b8      	blx	r7
 8010acc:	3001      	adds	r0, #1
 8010ace:	f43f ae74 	beq.w	80107ba <_printf_float+0xc2>
 8010ad2:	ee18 3a10 	vmov	r3, s16
 8010ad6:	4652      	mov	r2, sl
 8010ad8:	4631      	mov	r1, r6
 8010ada:	4628      	mov	r0, r5
 8010adc:	47b8      	blx	r7
 8010ade:	3001      	adds	r0, #1
 8010ae0:	f43f ae6b 	beq.w	80107ba <_printf_float+0xc2>
 8010ae4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010ae8:	2200      	movs	r2, #0
 8010aea:	2300      	movs	r3, #0
 8010aec:	f7ef ffec 	bl	8000ac8 <__aeabi_dcmpeq>
 8010af0:	b9d8      	cbnz	r0, 8010b2a <_printf_float+0x432>
 8010af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010af4:	f108 0201 	add.w	r2, r8, #1
 8010af8:	3b01      	subs	r3, #1
 8010afa:	4631      	mov	r1, r6
 8010afc:	4628      	mov	r0, r5
 8010afe:	47b8      	blx	r7
 8010b00:	3001      	adds	r0, #1
 8010b02:	d10e      	bne.n	8010b22 <_printf_float+0x42a>
 8010b04:	e659      	b.n	80107ba <_printf_float+0xc2>
 8010b06:	2301      	movs	r3, #1
 8010b08:	4652      	mov	r2, sl
 8010b0a:	4631      	mov	r1, r6
 8010b0c:	4628      	mov	r0, r5
 8010b0e:	47b8      	blx	r7
 8010b10:	3001      	adds	r0, #1
 8010b12:	f43f ae52 	beq.w	80107ba <_printf_float+0xc2>
 8010b16:	f108 0801 	add.w	r8, r8, #1
 8010b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b1c:	3b01      	subs	r3, #1
 8010b1e:	4543      	cmp	r3, r8
 8010b20:	dcf1      	bgt.n	8010b06 <_printf_float+0x40e>
 8010b22:	464b      	mov	r3, r9
 8010b24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010b28:	e6dc      	b.n	80108e4 <_printf_float+0x1ec>
 8010b2a:	f04f 0800 	mov.w	r8, #0
 8010b2e:	f104 0a1a 	add.w	sl, r4, #26
 8010b32:	e7f2      	b.n	8010b1a <_printf_float+0x422>
 8010b34:	2301      	movs	r3, #1
 8010b36:	4642      	mov	r2, r8
 8010b38:	e7df      	b.n	8010afa <_printf_float+0x402>
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	464a      	mov	r2, r9
 8010b3e:	4631      	mov	r1, r6
 8010b40:	4628      	mov	r0, r5
 8010b42:	47b8      	blx	r7
 8010b44:	3001      	adds	r0, #1
 8010b46:	f43f ae38 	beq.w	80107ba <_printf_float+0xc2>
 8010b4a:	f108 0801 	add.w	r8, r8, #1
 8010b4e:	68e3      	ldr	r3, [r4, #12]
 8010b50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010b52:	1a5b      	subs	r3, r3, r1
 8010b54:	4543      	cmp	r3, r8
 8010b56:	dcf0      	bgt.n	8010b3a <_printf_float+0x442>
 8010b58:	e6fa      	b.n	8010950 <_printf_float+0x258>
 8010b5a:	f04f 0800 	mov.w	r8, #0
 8010b5e:	f104 0919 	add.w	r9, r4, #25
 8010b62:	e7f4      	b.n	8010b4e <_printf_float+0x456>

08010b64 <_printf_common>:
 8010b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b68:	4616      	mov	r6, r2
 8010b6a:	4699      	mov	r9, r3
 8010b6c:	688a      	ldr	r2, [r1, #8]
 8010b6e:	690b      	ldr	r3, [r1, #16]
 8010b70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010b74:	4293      	cmp	r3, r2
 8010b76:	bfb8      	it	lt
 8010b78:	4613      	movlt	r3, r2
 8010b7a:	6033      	str	r3, [r6, #0]
 8010b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010b80:	4607      	mov	r7, r0
 8010b82:	460c      	mov	r4, r1
 8010b84:	b10a      	cbz	r2, 8010b8a <_printf_common+0x26>
 8010b86:	3301      	adds	r3, #1
 8010b88:	6033      	str	r3, [r6, #0]
 8010b8a:	6823      	ldr	r3, [r4, #0]
 8010b8c:	0699      	lsls	r1, r3, #26
 8010b8e:	bf42      	ittt	mi
 8010b90:	6833      	ldrmi	r3, [r6, #0]
 8010b92:	3302      	addmi	r3, #2
 8010b94:	6033      	strmi	r3, [r6, #0]
 8010b96:	6825      	ldr	r5, [r4, #0]
 8010b98:	f015 0506 	ands.w	r5, r5, #6
 8010b9c:	d106      	bne.n	8010bac <_printf_common+0x48>
 8010b9e:	f104 0a19 	add.w	sl, r4, #25
 8010ba2:	68e3      	ldr	r3, [r4, #12]
 8010ba4:	6832      	ldr	r2, [r6, #0]
 8010ba6:	1a9b      	subs	r3, r3, r2
 8010ba8:	42ab      	cmp	r3, r5
 8010baa:	dc26      	bgt.n	8010bfa <_printf_common+0x96>
 8010bac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010bb0:	1e13      	subs	r3, r2, #0
 8010bb2:	6822      	ldr	r2, [r4, #0]
 8010bb4:	bf18      	it	ne
 8010bb6:	2301      	movne	r3, #1
 8010bb8:	0692      	lsls	r2, r2, #26
 8010bba:	d42b      	bmi.n	8010c14 <_printf_common+0xb0>
 8010bbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010bc0:	4649      	mov	r1, r9
 8010bc2:	4638      	mov	r0, r7
 8010bc4:	47c0      	blx	r8
 8010bc6:	3001      	adds	r0, #1
 8010bc8:	d01e      	beq.n	8010c08 <_printf_common+0xa4>
 8010bca:	6823      	ldr	r3, [r4, #0]
 8010bcc:	68e5      	ldr	r5, [r4, #12]
 8010bce:	6832      	ldr	r2, [r6, #0]
 8010bd0:	f003 0306 	and.w	r3, r3, #6
 8010bd4:	2b04      	cmp	r3, #4
 8010bd6:	bf08      	it	eq
 8010bd8:	1aad      	subeq	r5, r5, r2
 8010bda:	68a3      	ldr	r3, [r4, #8]
 8010bdc:	6922      	ldr	r2, [r4, #16]
 8010bde:	bf0c      	ite	eq
 8010be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010be4:	2500      	movne	r5, #0
 8010be6:	4293      	cmp	r3, r2
 8010be8:	bfc4      	itt	gt
 8010bea:	1a9b      	subgt	r3, r3, r2
 8010bec:	18ed      	addgt	r5, r5, r3
 8010bee:	2600      	movs	r6, #0
 8010bf0:	341a      	adds	r4, #26
 8010bf2:	42b5      	cmp	r5, r6
 8010bf4:	d11a      	bne.n	8010c2c <_printf_common+0xc8>
 8010bf6:	2000      	movs	r0, #0
 8010bf8:	e008      	b.n	8010c0c <_printf_common+0xa8>
 8010bfa:	2301      	movs	r3, #1
 8010bfc:	4652      	mov	r2, sl
 8010bfe:	4649      	mov	r1, r9
 8010c00:	4638      	mov	r0, r7
 8010c02:	47c0      	blx	r8
 8010c04:	3001      	adds	r0, #1
 8010c06:	d103      	bne.n	8010c10 <_printf_common+0xac>
 8010c08:	f04f 30ff 	mov.w	r0, #4294967295
 8010c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c10:	3501      	adds	r5, #1
 8010c12:	e7c6      	b.n	8010ba2 <_printf_common+0x3e>
 8010c14:	18e1      	adds	r1, r4, r3
 8010c16:	1c5a      	adds	r2, r3, #1
 8010c18:	2030      	movs	r0, #48	; 0x30
 8010c1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010c1e:	4422      	add	r2, r4
 8010c20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010c24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010c28:	3302      	adds	r3, #2
 8010c2a:	e7c7      	b.n	8010bbc <_printf_common+0x58>
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	4622      	mov	r2, r4
 8010c30:	4649      	mov	r1, r9
 8010c32:	4638      	mov	r0, r7
 8010c34:	47c0      	blx	r8
 8010c36:	3001      	adds	r0, #1
 8010c38:	d0e6      	beq.n	8010c08 <_printf_common+0xa4>
 8010c3a:	3601      	adds	r6, #1
 8010c3c:	e7d9      	b.n	8010bf2 <_printf_common+0x8e>
	...

08010c40 <_printf_i>:
 8010c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c44:	7e0f      	ldrb	r7, [r1, #24]
 8010c46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010c48:	2f78      	cmp	r7, #120	; 0x78
 8010c4a:	4691      	mov	r9, r2
 8010c4c:	4680      	mov	r8, r0
 8010c4e:	460c      	mov	r4, r1
 8010c50:	469a      	mov	sl, r3
 8010c52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010c56:	d807      	bhi.n	8010c68 <_printf_i+0x28>
 8010c58:	2f62      	cmp	r7, #98	; 0x62
 8010c5a:	d80a      	bhi.n	8010c72 <_printf_i+0x32>
 8010c5c:	2f00      	cmp	r7, #0
 8010c5e:	f000 80d8 	beq.w	8010e12 <_printf_i+0x1d2>
 8010c62:	2f58      	cmp	r7, #88	; 0x58
 8010c64:	f000 80a3 	beq.w	8010dae <_printf_i+0x16e>
 8010c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010c70:	e03a      	b.n	8010ce8 <_printf_i+0xa8>
 8010c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010c76:	2b15      	cmp	r3, #21
 8010c78:	d8f6      	bhi.n	8010c68 <_printf_i+0x28>
 8010c7a:	a101      	add	r1, pc, #4	; (adr r1, 8010c80 <_printf_i+0x40>)
 8010c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010c80:	08010cd9 	.word	0x08010cd9
 8010c84:	08010ced 	.word	0x08010ced
 8010c88:	08010c69 	.word	0x08010c69
 8010c8c:	08010c69 	.word	0x08010c69
 8010c90:	08010c69 	.word	0x08010c69
 8010c94:	08010c69 	.word	0x08010c69
 8010c98:	08010ced 	.word	0x08010ced
 8010c9c:	08010c69 	.word	0x08010c69
 8010ca0:	08010c69 	.word	0x08010c69
 8010ca4:	08010c69 	.word	0x08010c69
 8010ca8:	08010c69 	.word	0x08010c69
 8010cac:	08010df9 	.word	0x08010df9
 8010cb0:	08010d1d 	.word	0x08010d1d
 8010cb4:	08010ddb 	.word	0x08010ddb
 8010cb8:	08010c69 	.word	0x08010c69
 8010cbc:	08010c69 	.word	0x08010c69
 8010cc0:	08010e1b 	.word	0x08010e1b
 8010cc4:	08010c69 	.word	0x08010c69
 8010cc8:	08010d1d 	.word	0x08010d1d
 8010ccc:	08010c69 	.word	0x08010c69
 8010cd0:	08010c69 	.word	0x08010c69
 8010cd4:	08010de3 	.word	0x08010de3
 8010cd8:	682b      	ldr	r3, [r5, #0]
 8010cda:	1d1a      	adds	r2, r3, #4
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	602a      	str	r2, [r5, #0]
 8010ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010ce8:	2301      	movs	r3, #1
 8010cea:	e0a3      	b.n	8010e34 <_printf_i+0x1f4>
 8010cec:	6820      	ldr	r0, [r4, #0]
 8010cee:	6829      	ldr	r1, [r5, #0]
 8010cf0:	0606      	lsls	r6, r0, #24
 8010cf2:	f101 0304 	add.w	r3, r1, #4
 8010cf6:	d50a      	bpl.n	8010d0e <_printf_i+0xce>
 8010cf8:	680e      	ldr	r6, [r1, #0]
 8010cfa:	602b      	str	r3, [r5, #0]
 8010cfc:	2e00      	cmp	r6, #0
 8010cfe:	da03      	bge.n	8010d08 <_printf_i+0xc8>
 8010d00:	232d      	movs	r3, #45	; 0x2d
 8010d02:	4276      	negs	r6, r6
 8010d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d08:	485e      	ldr	r0, [pc, #376]	; (8010e84 <_printf_i+0x244>)
 8010d0a:	230a      	movs	r3, #10
 8010d0c:	e019      	b.n	8010d42 <_printf_i+0x102>
 8010d0e:	680e      	ldr	r6, [r1, #0]
 8010d10:	602b      	str	r3, [r5, #0]
 8010d12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010d16:	bf18      	it	ne
 8010d18:	b236      	sxthne	r6, r6
 8010d1a:	e7ef      	b.n	8010cfc <_printf_i+0xbc>
 8010d1c:	682b      	ldr	r3, [r5, #0]
 8010d1e:	6820      	ldr	r0, [r4, #0]
 8010d20:	1d19      	adds	r1, r3, #4
 8010d22:	6029      	str	r1, [r5, #0]
 8010d24:	0601      	lsls	r1, r0, #24
 8010d26:	d501      	bpl.n	8010d2c <_printf_i+0xec>
 8010d28:	681e      	ldr	r6, [r3, #0]
 8010d2a:	e002      	b.n	8010d32 <_printf_i+0xf2>
 8010d2c:	0646      	lsls	r6, r0, #25
 8010d2e:	d5fb      	bpl.n	8010d28 <_printf_i+0xe8>
 8010d30:	881e      	ldrh	r6, [r3, #0]
 8010d32:	4854      	ldr	r0, [pc, #336]	; (8010e84 <_printf_i+0x244>)
 8010d34:	2f6f      	cmp	r7, #111	; 0x6f
 8010d36:	bf0c      	ite	eq
 8010d38:	2308      	moveq	r3, #8
 8010d3a:	230a      	movne	r3, #10
 8010d3c:	2100      	movs	r1, #0
 8010d3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010d42:	6865      	ldr	r5, [r4, #4]
 8010d44:	60a5      	str	r5, [r4, #8]
 8010d46:	2d00      	cmp	r5, #0
 8010d48:	bfa2      	ittt	ge
 8010d4a:	6821      	ldrge	r1, [r4, #0]
 8010d4c:	f021 0104 	bicge.w	r1, r1, #4
 8010d50:	6021      	strge	r1, [r4, #0]
 8010d52:	b90e      	cbnz	r6, 8010d58 <_printf_i+0x118>
 8010d54:	2d00      	cmp	r5, #0
 8010d56:	d04d      	beq.n	8010df4 <_printf_i+0x1b4>
 8010d58:	4615      	mov	r5, r2
 8010d5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8010d5e:	fb03 6711 	mls	r7, r3, r1, r6
 8010d62:	5dc7      	ldrb	r7, [r0, r7]
 8010d64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010d68:	4637      	mov	r7, r6
 8010d6a:	42bb      	cmp	r3, r7
 8010d6c:	460e      	mov	r6, r1
 8010d6e:	d9f4      	bls.n	8010d5a <_printf_i+0x11a>
 8010d70:	2b08      	cmp	r3, #8
 8010d72:	d10b      	bne.n	8010d8c <_printf_i+0x14c>
 8010d74:	6823      	ldr	r3, [r4, #0]
 8010d76:	07de      	lsls	r6, r3, #31
 8010d78:	d508      	bpl.n	8010d8c <_printf_i+0x14c>
 8010d7a:	6923      	ldr	r3, [r4, #16]
 8010d7c:	6861      	ldr	r1, [r4, #4]
 8010d7e:	4299      	cmp	r1, r3
 8010d80:	bfde      	ittt	le
 8010d82:	2330      	movle	r3, #48	; 0x30
 8010d84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010d88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010d8c:	1b52      	subs	r2, r2, r5
 8010d8e:	6122      	str	r2, [r4, #16]
 8010d90:	f8cd a000 	str.w	sl, [sp]
 8010d94:	464b      	mov	r3, r9
 8010d96:	aa03      	add	r2, sp, #12
 8010d98:	4621      	mov	r1, r4
 8010d9a:	4640      	mov	r0, r8
 8010d9c:	f7ff fee2 	bl	8010b64 <_printf_common>
 8010da0:	3001      	adds	r0, #1
 8010da2:	d14c      	bne.n	8010e3e <_printf_i+0x1fe>
 8010da4:	f04f 30ff 	mov.w	r0, #4294967295
 8010da8:	b004      	add	sp, #16
 8010daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dae:	4835      	ldr	r0, [pc, #212]	; (8010e84 <_printf_i+0x244>)
 8010db0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010db4:	6829      	ldr	r1, [r5, #0]
 8010db6:	6823      	ldr	r3, [r4, #0]
 8010db8:	f851 6b04 	ldr.w	r6, [r1], #4
 8010dbc:	6029      	str	r1, [r5, #0]
 8010dbe:	061d      	lsls	r5, r3, #24
 8010dc0:	d514      	bpl.n	8010dec <_printf_i+0x1ac>
 8010dc2:	07df      	lsls	r7, r3, #31
 8010dc4:	bf44      	itt	mi
 8010dc6:	f043 0320 	orrmi.w	r3, r3, #32
 8010dca:	6023      	strmi	r3, [r4, #0]
 8010dcc:	b91e      	cbnz	r6, 8010dd6 <_printf_i+0x196>
 8010dce:	6823      	ldr	r3, [r4, #0]
 8010dd0:	f023 0320 	bic.w	r3, r3, #32
 8010dd4:	6023      	str	r3, [r4, #0]
 8010dd6:	2310      	movs	r3, #16
 8010dd8:	e7b0      	b.n	8010d3c <_printf_i+0xfc>
 8010dda:	6823      	ldr	r3, [r4, #0]
 8010ddc:	f043 0320 	orr.w	r3, r3, #32
 8010de0:	6023      	str	r3, [r4, #0]
 8010de2:	2378      	movs	r3, #120	; 0x78
 8010de4:	4828      	ldr	r0, [pc, #160]	; (8010e88 <_printf_i+0x248>)
 8010de6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010dea:	e7e3      	b.n	8010db4 <_printf_i+0x174>
 8010dec:	0659      	lsls	r1, r3, #25
 8010dee:	bf48      	it	mi
 8010df0:	b2b6      	uxthmi	r6, r6
 8010df2:	e7e6      	b.n	8010dc2 <_printf_i+0x182>
 8010df4:	4615      	mov	r5, r2
 8010df6:	e7bb      	b.n	8010d70 <_printf_i+0x130>
 8010df8:	682b      	ldr	r3, [r5, #0]
 8010dfa:	6826      	ldr	r6, [r4, #0]
 8010dfc:	6961      	ldr	r1, [r4, #20]
 8010dfe:	1d18      	adds	r0, r3, #4
 8010e00:	6028      	str	r0, [r5, #0]
 8010e02:	0635      	lsls	r5, r6, #24
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	d501      	bpl.n	8010e0c <_printf_i+0x1cc>
 8010e08:	6019      	str	r1, [r3, #0]
 8010e0a:	e002      	b.n	8010e12 <_printf_i+0x1d2>
 8010e0c:	0670      	lsls	r0, r6, #25
 8010e0e:	d5fb      	bpl.n	8010e08 <_printf_i+0x1c8>
 8010e10:	8019      	strh	r1, [r3, #0]
 8010e12:	2300      	movs	r3, #0
 8010e14:	6123      	str	r3, [r4, #16]
 8010e16:	4615      	mov	r5, r2
 8010e18:	e7ba      	b.n	8010d90 <_printf_i+0x150>
 8010e1a:	682b      	ldr	r3, [r5, #0]
 8010e1c:	1d1a      	adds	r2, r3, #4
 8010e1e:	602a      	str	r2, [r5, #0]
 8010e20:	681d      	ldr	r5, [r3, #0]
 8010e22:	6862      	ldr	r2, [r4, #4]
 8010e24:	2100      	movs	r1, #0
 8010e26:	4628      	mov	r0, r5
 8010e28:	f7ef f9da 	bl	80001e0 <memchr>
 8010e2c:	b108      	cbz	r0, 8010e32 <_printf_i+0x1f2>
 8010e2e:	1b40      	subs	r0, r0, r5
 8010e30:	6060      	str	r0, [r4, #4]
 8010e32:	6863      	ldr	r3, [r4, #4]
 8010e34:	6123      	str	r3, [r4, #16]
 8010e36:	2300      	movs	r3, #0
 8010e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e3c:	e7a8      	b.n	8010d90 <_printf_i+0x150>
 8010e3e:	6923      	ldr	r3, [r4, #16]
 8010e40:	462a      	mov	r2, r5
 8010e42:	4649      	mov	r1, r9
 8010e44:	4640      	mov	r0, r8
 8010e46:	47d0      	blx	sl
 8010e48:	3001      	adds	r0, #1
 8010e4a:	d0ab      	beq.n	8010da4 <_printf_i+0x164>
 8010e4c:	6823      	ldr	r3, [r4, #0]
 8010e4e:	079b      	lsls	r3, r3, #30
 8010e50:	d413      	bmi.n	8010e7a <_printf_i+0x23a>
 8010e52:	68e0      	ldr	r0, [r4, #12]
 8010e54:	9b03      	ldr	r3, [sp, #12]
 8010e56:	4298      	cmp	r0, r3
 8010e58:	bfb8      	it	lt
 8010e5a:	4618      	movlt	r0, r3
 8010e5c:	e7a4      	b.n	8010da8 <_printf_i+0x168>
 8010e5e:	2301      	movs	r3, #1
 8010e60:	4632      	mov	r2, r6
 8010e62:	4649      	mov	r1, r9
 8010e64:	4640      	mov	r0, r8
 8010e66:	47d0      	blx	sl
 8010e68:	3001      	adds	r0, #1
 8010e6a:	d09b      	beq.n	8010da4 <_printf_i+0x164>
 8010e6c:	3501      	adds	r5, #1
 8010e6e:	68e3      	ldr	r3, [r4, #12]
 8010e70:	9903      	ldr	r1, [sp, #12]
 8010e72:	1a5b      	subs	r3, r3, r1
 8010e74:	42ab      	cmp	r3, r5
 8010e76:	dcf2      	bgt.n	8010e5e <_printf_i+0x21e>
 8010e78:	e7eb      	b.n	8010e52 <_printf_i+0x212>
 8010e7a:	2500      	movs	r5, #0
 8010e7c:	f104 0619 	add.w	r6, r4, #25
 8010e80:	e7f5      	b.n	8010e6e <_printf_i+0x22e>
 8010e82:	bf00      	nop
 8010e84:	08015a8a 	.word	0x08015a8a
 8010e88:	08015a9b 	.word	0x08015a9b

08010e8c <iprintf>:
 8010e8c:	b40f      	push	{r0, r1, r2, r3}
 8010e8e:	4b0a      	ldr	r3, [pc, #40]	; (8010eb8 <iprintf+0x2c>)
 8010e90:	b513      	push	{r0, r1, r4, lr}
 8010e92:	681c      	ldr	r4, [r3, #0]
 8010e94:	b124      	cbz	r4, 8010ea0 <iprintf+0x14>
 8010e96:	69a3      	ldr	r3, [r4, #24]
 8010e98:	b913      	cbnz	r3, 8010ea0 <iprintf+0x14>
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	f7ff fa1c 	bl	80102d8 <__sinit>
 8010ea0:	ab05      	add	r3, sp, #20
 8010ea2:	9a04      	ldr	r2, [sp, #16]
 8010ea4:	68a1      	ldr	r1, [r4, #8]
 8010ea6:	9301      	str	r3, [sp, #4]
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	f001 fe11 	bl	8012ad0 <_vfiprintf_r>
 8010eae:	b002      	add	sp, #8
 8010eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010eb4:	b004      	add	sp, #16
 8010eb6:	4770      	bx	lr
 8010eb8:	200000a0 	.word	0x200000a0

08010ebc <putchar>:
 8010ebc:	4b09      	ldr	r3, [pc, #36]	; (8010ee4 <putchar+0x28>)
 8010ebe:	b513      	push	{r0, r1, r4, lr}
 8010ec0:	681c      	ldr	r4, [r3, #0]
 8010ec2:	4601      	mov	r1, r0
 8010ec4:	b134      	cbz	r4, 8010ed4 <putchar+0x18>
 8010ec6:	69a3      	ldr	r3, [r4, #24]
 8010ec8:	b923      	cbnz	r3, 8010ed4 <putchar+0x18>
 8010eca:	9001      	str	r0, [sp, #4]
 8010ecc:	4620      	mov	r0, r4
 8010ece:	f7ff fa03 	bl	80102d8 <__sinit>
 8010ed2:	9901      	ldr	r1, [sp, #4]
 8010ed4:	68a2      	ldr	r2, [r4, #8]
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	b002      	add	sp, #8
 8010eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ede:	f001 bf27 	b.w	8012d30 <_putc_r>
 8010ee2:	bf00      	nop
 8010ee4:	200000a0 	.word	0x200000a0

08010ee8 <_puts_r>:
 8010ee8:	b570      	push	{r4, r5, r6, lr}
 8010eea:	460e      	mov	r6, r1
 8010eec:	4605      	mov	r5, r0
 8010eee:	b118      	cbz	r0, 8010ef8 <_puts_r+0x10>
 8010ef0:	6983      	ldr	r3, [r0, #24]
 8010ef2:	b90b      	cbnz	r3, 8010ef8 <_puts_r+0x10>
 8010ef4:	f7ff f9f0 	bl	80102d8 <__sinit>
 8010ef8:	69ab      	ldr	r3, [r5, #24]
 8010efa:	68ac      	ldr	r4, [r5, #8]
 8010efc:	b913      	cbnz	r3, 8010f04 <_puts_r+0x1c>
 8010efe:	4628      	mov	r0, r5
 8010f00:	f7ff f9ea 	bl	80102d8 <__sinit>
 8010f04:	4b2c      	ldr	r3, [pc, #176]	; (8010fb8 <_puts_r+0xd0>)
 8010f06:	429c      	cmp	r4, r3
 8010f08:	d120      	bne.n	8010f4c <_puts_r+0x64>
 8010f0a:	686c      	ldr	r4, [r5, #4]
 8010f0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f0e:	07db      	lsls	r3, r3, #31
 8010f10:	d405      	bmi.n	8010f1e <_puts_r+0x36>
 8010f12:	89a3      	ldrh	r3, [r4, #12]
 8010f14:	0598      	lsls	r0, r3, #22
 8010f16:	d402      	bmi.n	8010f1e <_puts_r+0x36>
 8010f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f1a:	f7ff faa0 	bl	801045e <__retarget_lock_acquire_recursive>
 8010f1e:	89a3      	ldrh	r3, [r4, #12]
 8010f20:	0719      	lsls	r1, r3, #28
 8010f22:	d51d      	bpl.n	8010f60 <_puts_r+0x78>
 8010f24:	6923      	ldr	r3, [r4, #16]
 8010f26:	b1db      	cbz	r3, 8010f60 <_puts_r+0x78>
 8010f28:	3e01      	subs	r6, #1
 8010f2a:	68a3      	ldr	r3, [r4, #8]
 8010f2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010f30:	3b01      	subs	r3, #1
 8010f32:	60a3      	str	r3, [r4, #8]
 8010f34:	bb39      	cbnz	r1, 8010f86 <_puts_r+0x9e>
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	da38      	bge.n	8010fac <_puts_r+0xc4>
 8010f3a:	4622      	mov	r2, r4
 8010f3c:	210a      	movs	r1, #10
 8010f3e:	4628      	mov	r0, r5
 8010f40:	f000 f906 	bl	8011150 <__swbuf_r>
 8010f44:	3001      	adds	r0, #1
 8010f46:	d011      	beq.n	8010f6c <_puts_r+0x84>
 8010f48:	250a      	movs	r5, #10
 8010f4a:	e011      	b.n	8010f70 <_puts_r+0x88>
 8010f4c:	4b1b      	ldr	r3, [pc, #108]	; (8010fbc <_puts_r+0xd4>)
 8010f4e:	429c      	cmp	r4, r3
 8010f50:	d101      	bne.n	8010f56 <_puts_r+0x6e>
 8010f52:	68ac      	ldr	r4, [r5, #8]
 8010f54:	e7da      	b.n	8010f0c <_puts_r+0x24>
 8010f56:	4b1a      	ldr	r3, [pc, #104]	; (8010fc0 <_puts_r+0xd8>)
 8010f58:	429c      	cmp	r4, r3
 8010f5a:	bf08      	it	eq
 8010f5c:	68ec      	ldreq	r4, [r5, #12]
 8010f5e:	e7d5      	b.n	8010f0c <_puts_r+0x24>
 8010f60:	4621      	mov	r1, r4
 8010f62:	4628      	mov	r0, r5
 8010f64:	f000 f958 	bl	8011218 <__swsetup_r>
 8010f68:	2800      	cmp	r0, #0
 8010f6a:	d0dd      	beq.n	8010f28 <_puts_r+0x40>
 8010f6c:	f04f 35ff 	mov.w	r5, #4294967295
 8010f70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f72:	07da      	lsls	r2, r3, #31
 8010f74:	d405      	bmi.n	8010f82 <_puts_r+0x9a>
 8010f76:	89a3      	ldrh	r3, [r4, #12]
 8010f78:	059b      	lsls	r3, r3, #22
 8010f7a:	d402      	bmi.n	8010f82 <_puts_r+0x9a>
 8010f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f7e:	f7ff fa6f 	bl	8010460 <__retarget_lock_release_recursive>
 8010f82:	4628      	mov	r0, r5
 8010f84:	bd70      	pop	{r4, r5, r6, pc}
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	da04      	bge.n	8010f94 <_puts_r+0xac>
 8010f8a:	69a2      	ldr	r2, [r4, #24]
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	dc06      	bgt.n	8010f9e <_puts_r+0xb6>
 8010f90:	290a      	cmp	r1, #10
 8010f92:	d004      	beq.n	8010f9e <_puts_r+0xb6>
 8010f94:	6823      	ldr	r3, [r4, #0]
 8010f96:	1c5a      	adds	r2, r3, #1
 8010f98:	6022      	str	r2, [r4, #0]
 8010f9a:	7019      	strb	r1, [r3, #0]
 8010f9c:	e7c5      	b.n	8010f2a <_puts_r+0x42>
 8010f9e:	4622      	mov	r2, r4
 8010fa0:	4628      	mov	r0, r5
 8010fa2:	f000 f8d5 	bl	8011150 <__swbuf_r>
 8010fa6:	3001      	adds	r0, #1
 8010fa8:	d1bf      	bne.n	8010f2a <_puts_r+0x42>
 8010faa:	e7df      	b.n	8010f6c <_puts_r+0x84>
 8010fac:	6823      	ldr	r3, [r4, #0]
 8010fae:	250a      	movs	r5, #10
 8010fb0:	1c5a      	adds	r2, r3, #1
 8010fb2:	6022      	str	r2, [r4, #0]
 8010fb4:	701d      	strb	r5, [r3, #0]
 8010fb6:	e7db      	b.n	8010f70 <_puts_r+0x88>
 8010fb8:	08015a34 	.word	0x08015a34
 8010fbc:	08015a54 	.word	0x08015a54
 8010fc0:	08015a14 	.word	0x08015a14

08010fc4 <puts>:
 8010fc4:	4b02      	ldr	r3, [pc, #8]	; (8010fd0 <puts+0xc>)
 8010fc6:	4601      	mov	r1, r0
 8010fc8:	6818      	ldr	r0, [r3, #0]
 8010fca:	f7ff bf8d 	b.w	8010ee8 <_puts_r>
 8010fce:	bf00      	nop
 8010fd0:	200000a0 	.word	0x200000a0

08010fd4 <cleanup_glue>:
 8010fd4:	b538      	push	{r3, r4, r5, lr}
 8010fd6:	460c      	mov	r4, r1
 8010fd8:	6809      	ldr	r1, [r1, #0]
 8010fda:	4605      	mov	r5, r0
 8010fdc:	b109      	cbz	r1, 8010fe2 <cleanup_glue+0xe>
 8010fde:	f7ff fff9 	bl	8010fd4 <cleanup_glue>
 8010fe2:	4621      	mov	r1, r4
 8010fe4:	4628      	mov	r0, r5
 8010fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fea:	f001 bcfb 	b.w	80129e4 <_free_r>
	...

08010ff0 <_reclaim_reent>:
 8010ff0:	4b2c      	ldr	r3, [pc, #176]	; (80110a4 <_reclaim_reent+0xb4>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	4283      	cmp	r3, r0
 8010ff6:	b570      	push	{r4, r5, r6, lr}
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	d051      	beq.n	80110a0 <_reclaim_reent+0xb0>
 8010ffc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010ffe:	b143      	cbz	r3, 8011012 <_reclaim_reent+0x22>
 8011000:	68db      	ldr	r3, [r3, #12]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d14a      	bne.n	801109c <_reclaim_reent+0xac>
 8011006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011008:	6819      	ldr	r1, [r3, #0]
 801100a:	b111      	cbz	r1, 8011012 <_reclaim_reent+0x22>
 801100c:	4620      	mov	r0, r4
 801100e:	f001 fce9 	bl	80129e4 <_free_r>
 8011012:	6961      	ldr	r1, [r4, #20]
 8011014:	b111      	cbz	r1, 801101c <_reclaim_reent+0x2c>
 8011016:	4620      	mov	r0, r4
 8011018:	f001 fce4 	bl	80129e4 <_free_r>
 801101c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801101e:	b111      	cbz	r1, 8011026 <_reclaim_reent+0x36>
 8011020:	4620      	mov	r0, r4
 8011022:	f001 fcdf 	bl	80129e4 <_free_r>
 8011026:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011028:	b111      	cbz	r1, 8011030 <_reclaim_reent+0x40>
 801102a:	4620      	mov	r0, r4
 801102c:	f001 fcda 	bl	80129e4 <_free_r>
 8011030:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011032:	b111      	cbz	r1, 801103a <_reclaim_reent+0x4a>
 8011034:	4620      	mov	r0, r4
 8011036:	f001 fcd5 	bl	80129e4 <_free_r>
 801103a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801103c:	b111      	cbz	r1, 8011044 <_reclaim_reent+0x54>
 801103e:	4620      	mov	r0, r4
 8011040:	f001 fcd0 	bl	80129e4 <_free_r>
 8011044:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011046:	b111      	cbz	r1, 801104e <_reclaim_reent+0x5e>
 8011048:	4620      	mov	r0, r4
 801104a:	f001 fccb 	bl	80129e4 <_free_r>
 801104e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011050:	b111      	cbz	r1, 8011058 <_reclaim_reent+0x68>
 8011052:	4620      	mov	r0, r4
 8011054:	f001 fcc6 	bl	80129e4 <_free_r>
 8011058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801105a:	b111      	cbz	r1, 8011062 <_reclaim_reent+0x72>
 801105c:	4620      	mov	r0, r4
 801105e:	f001 fcc1 	bl	80129e4 <_free_r>
 8011062:	69a3      	ldr	r3, [r4, #24]
 8011064:	b1e3      	cbz	r3, 80110a0 <_reclaim_reent+0xb0>
 8011066:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011068:	4620      	mov	r0, r4
 801106a:	4798      	blx	r3
 801106c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801106e:	b1b9      	cbz	r1, 80110a0 <_reclaim_reent+0xb0>
 8011070:	4620      	mov	r0, r4
 8011072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011076:	f7ff bfad 	b.w	8010fd4 <cleanup_glue>
 801107a:	5949      	ldr	r1, [r1, r5]
 801107c:	b941      	cbnz	r1, 8011090 <_reclaim_reent+0xa0>
 801107e:	3504      	adds	r5, #4
 8011080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011082:	2d80      	cmp	r5, #128	; 0x80
 8011084:	68d9      	ldr	r1, [r3, #12]
 8011086:	d1f8      	bne.n	801107a <_reclaim_reent+0x8a>
 8011088:	4620      	mov	r0, r4
 801108a:	f001 fcab 	bl	80129e4 <_free_r>
 801108e:	e7ba      	b.n	8011006 <_reclaim_reent+0x16>
 8011090:	680e      	ldr	r6, [r1, #0]
 8011092:	4620      	mov	r0, r4
 8011094:	f001 fca6 	bl	80129e4 <_free_r>
 8011098:	4631      	mov	r1, r6
 801109a:	e7ef      	b.n	801107c <_reclaim_reent+0x8c>
 801109c:	2500      	movs	r5, #0
 801109e:	e7ef      	b.n	8011080 <_reclaim_reent+0x90>
 80110a0:	bd70      	pop	{r4, r5, r6, pc}
 80110a2:	bf00      	nop
 80110a4:	200000a0 	.word	0x200000a0

080110a8 <_sbrk_r>:
 80110a8:	b538      	push	{r3, r4, r5, lr}
 80110aa:	4d06      	ldr	r5, [pc, #24]	; (80110c4 <_sbrk_r+0x1c>)
 80110ac:	2300      	movs	r3, #0
 80110ae:	4604      	mov	r4, r0
 80110b0:	4608      	mov	r0, r1
 80110b2:	602b      	str	r3, [r5, #0]
 80110b4:	f7f5 f81e 	bl	80060f4 <_sbrk>
 80110b8:	1c43      	adds	r3, r0, #1
 80110ba:	d102      	bne.n	80110c2 <_sbrk_r+0x1a>
 80110bc:	682b      	ldr	r3, [r5, #0]
 80110be:	b103      	cbz	r3, 80110c2 <_sbrk_r+0x1a>
 80110c0:	6023      	str	r3, [r4, #0]
 80110c2:	bd38      	pop	{r3, r4, r5, pc}
 80110c4:	20005b68 	.word	0x20005b68

080110c8 <__sread>:
 80110c8:	b510      	push	{r4, lr}
 80110ca:	460c      	mov	r4, r1
 80110cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110d0:	f001 fe76 	bl	8012dc0 <_read_r>
 80110d4:	2800      	cmp	r0, #0
 80110d6:	bfab      	itete	ge
 80110d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80110da:	89a3      	ldrhlt	r3, [r4, #12]
 80110dc:	181b      	addge	r3, r3, r0
 80110de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80110e2:	bfac      	ite	ge
 80110e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80110e6:	81a3      	strhlt	r3, [r4, #12]
 80110e8:	bd10      	pop	{r4, pc}

080110ea <__swrite>:
 80110ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110ee:	461f      	mov	r7, r3
 80110f0:	898b      	ldrh	r3, [r1, #12]
 80110f2:	05db      	lsls	r3, r3, #23
 80110f4:	4605      	mov	r5, r0
 80110f6:	460c      	mov	r4, r1
 80110f8:	4616      	mov	r6, r2
 80110fa:	d505      	bpl.n	8011108 <__swrite+0x1e>
 80110fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011100:	2302      	movs	r3, #2
 8011102:	2200      	movs	r2, #0
 8011104:	f001 f848 	bl	8012198 <_lseek_r>
 8011108:	89a3      	ldrh	r3, [r4, #12]
 801110a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801110e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011112:	81a3      	strh	r3, [r4, #12]
 8011114:	4632      	mov	r2, r6
 8011116:	463b      	mov	r3, r7
 8011118:	4628      	mov	r0, r5
 801111a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801111e:	f000 b869 	b.w	80111f4 <_write_r>

08011122 <__sseek>:
 8011122:	b510      	push	{r4, lr}
 8011124:	460c      	mov	r4, r1
 8011126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801112a:	f001 f835 	bl	8012198 <_lseek_r>
 801112e:	1c43      	adds	r3, r0, #1
 8011130:	89a3      	ldrh	r3, [r4, #12]
 8011132:	bf15      	itete	ne
 8011134:	6560      	strne	r0, [r4, #84]	; 0x54
 8011136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801113a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801113e:	81a3      	strheq	r3, [r4, #12]
 8011140:	bf18      	it	ne
 8011142:	81a3      	strhne	r3, [r4, #12]
 8011144:	bd10      	pop	{r4, pc}

08011146 <__sclose>:
 8011146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801114a:	f000 b8d3 	b.w	80112f4 <_close_r>
	...

08011150 <__swbuf_r>:
 8011150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011152:	460e      	mov	r6, r1
 8011154:	4614      	mov	r4, r2
 8011156:	4605      	mov	r5, r0
 8011158:	b118      	cbz	r0, 8011162 <__swbuf_r+0x12>
 801115a:	6983      	ldr	r3, [r0, #24]
 801115c:	b90b      	cbnz	r3, 8011162 <__swbuf_r+0x12>
 801115e:	f7ff f8bb 	bl	80102d8 <__sinit>
 8011162:	4b21      	ldr	r3, [pc, #132]	; (80111e8 <__swbuf_r+0x98>)
 8011164:	429c      	cmp	r4, r3
 8011166:	d12b      	bne.n	80111c0 <__swbuf_r+0x70>
 8011168:	686c      	ldr	r4, [r5, #4]
 801116a:	69a3      	ldr	r3, [r4, #24]
 801116c:	60a3      	str	r3, [r4, #8]
 801116e:	89a3      	ldrh	r3, [r4, #12]
 8011170:	071a      	lsls	r2, r3, #28
 8011172:	d52f      	bpl.n	80111d4 <__swbuf_r+0x84>
 8011174:	6923      	ldr	r3, [r4, #16]
 8011176:	b36b      	cbz	r3, 80111d4 <__swbuf_r+0x84>
 8011178:	6923      	ldr	r3, [r4, #16]
 801117a:	6820      	ldr	r0, [r4, #0]
 801117c:	1ac0      	subs	r0, r0, r3
 801117e:	6963      	ldr	r3, [r4, #20]
 8011180:	b2f6      	uxtb	r6, r6
 8011182:	4283      	cmp	r3, r0
 8011184:	4637      	mov	r7, r6
 8011186:	dc04      	bgt.n	8011192 <__swbuf_r+0x42>
 8011188:	4621      	mov	r1, r4
 801118a:	4628      	mov	r0, r5
 801118c:	f000 ffc4 	bl	8012118 <_fflush_r>
 8011190:	bb30      	cbnz	r0, 80111e0 <__swbuf_r+0x90>
 8011192:	68a3      	ldr	r3, [r4, #8]
 8011194:	3b01      	subs	r3, #1
 8011196:	60a3      	str	r3, [r4, #8]
 8011198:	6823      	ldr	r3, [r4, #0]
 801119a:	1c5a      	adds	r2, r3, #1
 801119c:	6022      	str	r2, [r4, #0]
 801119e:	701e      	strb	r6, [r3, #0]
 80111a0:	6963      	ldr	r3, [r4, #20]
 80111a2:	3001      	adds	r0, #1
 80111a4:	4283      	cmp	r3, r0
 80111a6:	d004      	beq.n	80111b2 <__swbuf_r+0x62>
 80111a8:	89a3      	ldrh	r3, [r4, #12]
 80111aa:	07db      	lsls	r3, r3, #31
 80111ac:	d506      	bpl.n	80111bc <__swbuf_r+0x6c>
 80111ae:	2e0a      	cmp	r6, #10
 80111b0:	d104      	bne.n	80111bc <__swbuf_r+0x6c>
 80111b2:	4621      	mov	r1, r4
 80111b4:	4628      	mov	r0, r5
 80111b6:	f000 ffaf 	bl	8012118 <_fflush_r>
 80111ba:	b988      	cbnz	r0, 80111e0 <__swbuf_r+0x90>
 80111bc:	4638      	mov	r0, r7
 80111be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111c0:	4b0a      	ldr	r3, [pc, #40]	; (80111ec <__swbuf_r+0x9c>)
 80111c2:	429c      	cmp	r4, r3
 80111c4:	d101      	bne.n	80111ca <__swbuf_r+0x7a>
 80111c6:	68ac      	ldr	r4, [r5, #8]
 80111c8:	e7cf      	b.n	801116a <__swbuf_r+0x1a>
 80111ca:	4b09      	ldr	r3, [pc, #36]	; (80111f0 <__swbuf_r+0xa0>)
 80111cc:	429c      	cmp	r4, r3
 80111ce:	bf08      	it	eq
 80111d0:	68ec      	ldreq	r4, [r5, #12]
 80111d2:	e7ca      	b.n	801116a <__swbuf_r+0x1a>
 80111d4:	4621      	mov	r1, r4
 80111d6:	4628      	mov	r0, r5
 80111d8:	f000 f81e 	bl	8011218 <__swsetup_r>
 80111dc:	2800      	cmp	r0, #0
 80111de:	d0cb      	beq.n	8011178 <__swbuf_r+0x28>
 80111e0:	f04f 37ff 	mov.w	r7, #4294967295
 80111e4:	e7ea      	b.n	80111bc <__swbuf_r+0x6c>
 80111e6:	bf00      	nop
 80111e8:	08015a34 	.word	0x08015a34
 80111ec:	08015a54 	.word	0x08015a54
 80111f0:	08015a14 	.word	0x08015a14

080111f4 <_write_r>:
 80111f4:	b538      	push	{r3, r4, r5, lr}
 80111f6:	4d07      	ldr	r5, [pc, #28]	; (8011214 <_write_r+0x20>)
 80111f8:	4604      	mov	r4, r0
 80111fa:	4608      	mov	r0, r1
 80111fc:	4611      	mov	r1, r2
 80111fe:	2200      	movs	r2, #0
 8011200:	602a      	str	r2, [r5, #0]
 8011202:	461a      	mov	r2, r3
 8011204:	f7f4 fbad 	bl	8005962 <_write>
 8011208:	1c43      	adds	r3, r0, #1
 801120a:	d102      	bne.n	8011212 <_write_r+0x1e>
 801120c:	682b      	ldr	r3, [r5, #0]
 801120e:	b103      	cbz	r3, 8011212 <_write_r+0x1e>
 8011210:	6023      	str	r3, [r4, #0]
 8011212:	bd38      	pop	{r3, r4, r5, pc}
 8011214:	20005b68 	.word	0x20005b68

08011218 <__swsetup_r>:
 8011218:	4b32      	ldr	r3, [pc, #200]	; (80112e4 <__swsetup_r+0xcc>)
 801121a:	b570      	push	{r4, r5, r6, lr}
 801121c:	681d      	ldr	r5, [r3, #0]
 801121e:	4606      	mov	r6, r0
 8011220:	460c      	mov	r4, r1
 8011222:	b125      	cbz	r5, 801122e <__swsetup_r+0x16>
 8011224:	69ab      	ldr	r3, [r5, #24]
 8011226:	b913      	cbnz	r3, 801122e <__swsetup_r+0x16>
 8011228:	4628      	mov	r0, r5
 801122a:	f7ff f855 	bl	80102d8 <__sinit>
 801122e:	4b2e      	ldr	r3, [pc, #184]	; (80112e8 <__swsetup_r+0xd0>)
 8011230:	429c      	cmp	r4, r3
 8011232:	d10f      	bne.n	8011254 <__swsetup_r+0x3c>
 8011234:	686c      	ldr	r4, [r5, #4]
 8011236:	89a3      	ldrh	r3, [r4, #12]
 8011238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801123c:	0719      	lsls	r1, r3, #28
 801123e:	d42c      	bmi.n	801129a <__swsetup_r+0x82>
 8011240:	06dd      	lsls	r5, r3, #27
 8011242:	d411      	bmi.n	8011268 <__swsetup_r+0x50>
 8011244:	2309      	movs	r3, #9
 8011246:	6033      	str	r3, [r6, #0]
 8011248:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801124c:	81a3      	strh	r3, [r4, #12]
 801124e:	f04f 30ff 	mov.w	r0, #4294967295
 8011252:	e03e      	b.n	80112d2 <__swsetup_r+0xba>
 8011254:	4b25      	ldr	r3, [pc, #148]	; (80112ec <__swsetup_r+0xd4>)
 8011256:	429c      	cmp	r4, r3
 8011258:	d101      	bne.n	801125e <__swsetup_r+0x46>
 801125a:	68ac      	ldr	r4, [r5, #8]
 801125c:	e7eb      	b.n	8011236 <__swsetup_r+0x1e>
 801125e:	4b24      	ldr	r3, [pc, #144]	; (80112f0 <__swsetup_r+0xd8>)
 8011260:	429c      	cmp	r4, r3
 8011262:	bf08      	it	eq
 8011264:	68ec      	ldreq	r4, [r5, #12]
 8011266:	e7e6      	b.n	8011236 <__swsetup_r+0x1e>
 8011268:	0758      	lsls	r0, r3, #29
 801126a:	d512      	bpl.n	8011292 <__swsetup_r+0x7a>
 801126c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801126e:	b141      	cbz	r1, 8011282 <__swsetup_r+0x6a>
 8011270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011274:	4299      	cmp	r1, r3
 8011276:	d002      	beq.n	801127e <__swsetup_r+0x66>
 8011278:	4630      	mov	r0, r6
 801127a:	f001 fbb3 	bl	80129e4 <_free_r>
 801127e:	2300      	movs	r3, #0
 8011280:	6363      	str	r3, [r4, #52]	; 0x34
 8011282:	89a3      	ldrh	r3, [r4, #12]
 8011284:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011288:	81a3      	strh	r3, [r4, #12]
 801128a:	2300      	movs	r3, #0
 801128c:	6063      	str	r3, [r4, #4]
 801128e:	6923      	ldr	r3, [r4, #16]
 8011290:	6023      	str	r3, [r4, #0]
 8011292:	89a3      	ldrh	r3, [r4, #12]
 8011294:	f043 0308 	orr.w	r3, r3, #8
 8011298:	81a3      	strh	r3, [r4, #12]
 801129a:	6923      	ldr	r3, [r4, #16]
 801129c:	b94b      	cbnz	r3, 80112b2 <__swsetup_r+0x9a>
 801129e:	89a3      	ldrh	r3, [r4, #12]
 80112a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80112a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80112a8:	d003      	beq.n	80112b2 <__swsetup_r+0x9a>
 80112aa:	4621      	mov	r1, r4
 80112ac:	4630      	mov	r0, r6
 80112ae:	f000 ffab 	bl	8012208 <__smakebuf_r>
 80112b2:	89a0      	ldrh	r0, [r4, #12]
 80112b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80112b8:	f010 0301 	ands.w	r3, r0, #1
 80112bc:	d00a      	beq.n	80112d4 <__swsetup_r+0xbc>
 80112be:	2300      	movs	r3, #0
 80112c0:	60a3      	str	r3, [r4, #8]
 80112c2:	6963      	ldr	r3, [r4, #20]
 80112c4:	425b      	negs	r3, r3
 80112c6:	61a3      	str	r3, [r4, #24]
 80112c8:	6923      	ldr	r3, [r4, #16]
 80112ca:	b943      	cbnz	r3, 80112de <__swsetup_r+0xc6>
 80112cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80112d0:	d1ba      	bne.n	8011248 <__swsetup_r+0x30>
 80112d2:	bd70      	pop	{r4, r5, r6, pc}
 80112d4:	0781      	lsls	r1, r0, #30
 80112d6:	bf58      	it	pl
 80112d8:	6963      	ldrpl	r3, [r4, #20]
 80112da:	60a3      	str	r3, [r4, #8]
 80112dc:	e7f4      	b.n	80112c8 <__swsetup_r+0xb0>
 80112de:	2000      	movs	r0, #0
 80112e0:	e7f7      	b.n	80112d2 <__swsetup_r+0xba>
 80112e2:	bf00      	nop
 80112e4:	200000a0 	.word	0x200000a0
 80112e8:	08015a34 	.word	0x08015a34
 80112ec:	08015a54 	.word	0x08015a54
 80112f0:	08015a14 	.word	0x08015a14

080112f4 <_close_r>:
 80112f4:	b538      	push	{r3, r4, r5, lr}
 80112f6:	4d06      	ldr	r5, [pc, #24]	; (8011310 <_close_r+0x1c>)
 80112f8:	2300      	movs	r3, #0
 80112fa:	4604      	mov	r4, r0
 80112fc:	4608      	mov	r0, r1
 80112fe:	602b      	str	r3, [r5, #0]
 8011300:	f7f4 fec3 	bl	800608a <_close>
 8011304:	1c43      	adds	r3, r0, #1
 8011306:	d102      	bne.n	801130e <_close_r+0x1a>
 8011308:	682b      	ldr	r3, [r5, #0]
 801130a:	b103      	cbz	r3, 801130e <_close_r+0x1a>
 801130c:	6023      	str	r3, [r4, #0]
 801130e:	bd38      	pop	{r3, r4, r5, pc}
 8011310:	20005b68 	.word	0x20005b68

08011314 <quorem>:
 8011314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011318:	6903      	ldr	r3, [r0, #16]
 801131a:	690c      	ldr	r4, [r1, #16]
 801131c:	42a3      	cmp	r3, r4
 801131e:	4607      	mov	r7, r0
 8011320:	f2c0 8081 	blt.w	8011426 <quorem+0x112>
 8011324:	3c01      	subs	r4, #1
 8011326:	f101 0814 	add.w	r8, r1, #20
 801132a:	f100 0514 	add.w	r5, r0, #20
 801132e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011332:	9301      	str	r3, [sp, #4]
 8011334:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011338:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801133c:	3301      	adds	r3, #1
 801133e:	429a      	cmp	r2, r3
 8011340:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011344:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011348:	fbb2 f6f3 	udiv	r6, r2, r3
 801134c:	d331      	bcc.n	80113b2 <quorem+0x9e>
 801134e:	f04f 0e00 	mov.w	lr, #0
 8011352:	4640      	mov	r0, r8
 8011354:	46ac      	mov	ip, r5
 8011356:	46f2      	mov	sl, lr
 8011358:	f850 2b04 	ldr.w	r2, [r0], #4
 801135c:	b293      	uxth	r3, r2
 801135e:	fb06 e303 	mla	r3, r6, r3, lr
 8011362:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011366:	b29b      	uxth	r3, r3
 8011368:	ebaa 0303 	sub.w	r3, sl, r3
 801136c:	f8dc a000 	ldr.w	sl, [ip]
 8011370:	0c12      	lsrs	r2, r2, #16
 8011372:	fa13 f38a 	uxtah	r3, r3, sl
 8011376:	fb06 e202 	mla	r2, r6, r2, lr
 801137a:	9300      	str	r3, [sp, #0]
 801137c:	9b00      	ldr	r3, [sp, #0]
 801137e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011382:	b292      	uxth	r2, r2
 8011384:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011388:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801138c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011390:	4581      	cmp	r9, r0
 8011392:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011396:	f84c 3b04 	str.w	r3, [ip], #4
 801139a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801139e:	d2db      	bcs.n	8011358 <quorem+0x44>
 80113a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80113a4:	b92b      	cbnz	r3, 80113b2 <quorem+0x9e>
 80113a6:	9b01      	ldr	r3, [sp, #4]
 80113a8:	3b04      	subs	r3, #4
 80113aa:	429d      	cmp	r5, r3
 80113ac:	461a      	mov	r2, r3
 80113ae:	d32e      	bcc.n	801140e <quorem+0xfa>
 80113b0:	613c      	str	r4, [r7, #16]
 80113b2:	4638      	mov	r0, r7
 80113b4:	f001 f9fe 	bl	80127b4 <__mcmp>
 80113b8:	2800      	cmp	r0, #0
 80113ba:	db24      	blt.n	8011406 <quorem+0xf2>
 80113bc:	3601      	adds	r6, #1
 80113be:	4628      	mov	r0, r5
 80113c0:	f04f 0c00 	mov.w	ip, #0
 80113c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80113c8:	f8d0 e000 	ldr.w	lr, [r0]
 80113cc:	b293      	uxth	r3, r2
 80113ce:	ebac 0303 	sub.w	r3, ip, r3
 80113d2:	0c12      	lsrs	r2, r2, #16
 80113d4:	fa13 f38e 	uxtah	r3, r3, lr
 80113d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80113dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80113e0:	b29b      	uxth	r3, r3
 80113e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80113e6:	45c1      	cmp	r9, r8
 80113e8:	f840 3b04 	str.w	r3, [r0], #4
 80113ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80113f0:	d2e8      	bcs.n	80113c4 <quorem+0xb0>
 80113f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80113f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80113fa:	b922      	cbnz	r2, 8011406 <quorem+0xf2>
 80113fc:	3b04      	subs	r3, #4
 80113fe:	429d      	cmp	r5, r3
 8011400:	461a      	mov	r2, r3
 8011402:	d30a      	bcc.n	801141a <quorem+0x106>
 8011404:	613c      	str	r4, [r7, #16]
 8011406:	4630      	mov	r0, r6
 8011408:	b003      	add	sp, #12
 801140a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801140e:	6812      	ldr	r2, [r2, #0]
 8011410:	3b04      	subs	r3, #4
 8011412:	2a00      	cmp	r2, #0
 8011414:	d1cc      	bne.n	80113b0 <quorem+0x9c>
 8011416:	3c01      	subs	r4, #1
 8011418:	e7c7      	b.n	80113aa <quorem+0x96>
 801141a:	6812      	ldr	r2, [r2, #0]
 801141c:	3b04      	subs	r3, #4
 801141e:	2a00      	cmp	r2, #0
 8011420:	d1f0      	bne.n	8011404 <quorem+0xf0>
 8011422:	3c01      	subs	r4, #1
 8011424:	e7eb      	b.n	80113fe <quorem+0xea>
 8011426:	2000      	movs	r0, #0
 8011428:	e7ee      	b.n	8011408 <quorem+0xf4>
 801142a:	0000      	movs	r0, r0
 801142c:	0000      	movs	r0, r0
	...

08011430 <_dtoa_r>:
 8011430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011434:	ed2d 8b04 	vpush	{d8-d9}
 8011438:	ec57 6b10 	vmov	r6, r7, d0
 801143c:	b093      	sub	sp, #76	; 0x4c
 801143e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011440:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011444:	9106      	str	r1, [sp, #24]
 8011446:	ee10 aa10 	vmov	sl, s0
 801144a:	4604      	mov	r4, r0
 801144c:	9209      	str	r2, [sp, #36]	; 0x24
 801144e:	930c      	str	r3, [sp, #48]	; 0x30
 8011450:	46bb      	mov	fp, r7
 8011452:	b975      	cbnz	r5, 8011472 <_dtoa_r+0x42>
 8011454:	2010      	movs	r0, #16
 8011456:	f000 ff17 	bl	8012288 <malloc>
 801145a:	4602      	mov	r2, r0
 801145c:	6260      	str	r0, [r4, #36]	; 0x24
 801145e:	b920      	cbnz	r0, 801146a <_dtoa_r+0x3a>
 8011460:	4ba7      	ldr	r3, [pc, #668]	; (8011700 <_dtoa_r+0x2d0>)
 8011462:	21ea      	movs	r1, #234	; 0xea
 8011464:	48a7      	ldr	r0, [pc, #668]	; (8011704 <_dtoa_r+0x2d4>)
 8011466:	f001 fcbd 	bl	8012de4 <__assert_func>
 801146a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801146e:	6005      	str	r5, [r0, #0]
 8011470:	60c5      	str	r5, [r0, #12]
 8011472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011474:	6819      	ldr	r1, [r3, #0]
 8011476:	b151      	cbz	r1, 801148e <_dtoa_r+0x5e>
 8011478:	685a      	ldr	r2, [r3, #4]
 801147a:	604a      	str	r2, [r1, #4]
 801147c:	2301      	movs	r3, #1
 801147e:	4093      	lsls	r3, r2
 8011480:	608b      	str	r3, [r1, #8]
 8011482:	4620      	mov	r0, r4
 8011484:	f000 ff54 	bl	8012330 <_Bfree>
 8011488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801148a:	2200      	movs	r2, #0
 801148c:	601a      	str	r2, [r3, #0]
 801148e:	1e3b      	subs	r3, r7, #0
 8011490:	bfaa      	itet	ge
 8011492:	2300      	movge	r3, #0
 8011494:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011498:	f8c8 3000 	strge.w	r3, [r8]
 801149c:	4b9a      	ldr	r3, [pc, #616]	; (8011708 <_dtoa_r+0x2d8>)
 801149e:	bfbc      	itt	lt
 80114a0:	2201      	movlt	r2, #1
 80114a2:	f8c8 2000 	strlt.w	r2, [r8]
 80114a6:	ea33 030b 	bics.w	r3, r3, fp
 80114aa:	d11b      	bne.n	80114e4 <_dtoa_r+0xb4>
 80114ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80114ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80114b2:	6013      	str	r3, [r2, #0]
 80114b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80114b8:	4333      	orrs	r3, r6
 80114ba:	f000 8592 	beq.w	8011fe2 <_dtoa_r+0xbb2>
 80114be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80114c0:	b963      	cbnz	r3, 80114dc <_dtoa_r+0xac>
 80114c2:	4b92      	ldr	r3, [pc, #584]	; (801170c <_dtoa_r+0x2dc>)
 80114c4:	e022      	b.n	801150c <_dtoa_r+0xdc>
 80114c6:	4b92      	ldr	r3, [pc, #584]	; (8011710 <_dtoa_r+0x2e0>)
 80114c8:	9301      	str	r3, [sp, #4]
 80114ca:	3308      	adds	r3, #8
 80114cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80114ce:	6013      	str	r3, [r2, #0]
 80114d0:	9801      	ldr	r0, [sp, #4]
 80114d2:	b013      	add	sp, #76	; 0x4c
 80114d4:	ecbd 8b04 	vpop	{d8-d9}
 80114d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114dc:	4b8b      	ldr	r3, [pc, #556]	; (801170c <_dtoa_r+0x2dc>)
 80114de:	9301      	str	r3, [sp, #4]
 80114e0:	3303      	adds	r3, #3
 80114e2:	e7f3      	b.n	80114cc <_dtoa_r+0x9c>
 80114e4:	2200      	movs	r2, #0
 80114e6:	2300      	movs	r3, #0
 80114e8:	4650      	mov	r0, sl
 80114ea:	4659      	mov	r1, fp
 80114ec:	f7ef faec 	bl	8000ac8 <__aeabi_dcmpeq>
 80114f0:	ec4b ab19 	vmov	d9, sl, fp
 80114f4:	4680      	mov	r8, r0
 80114f6:	b158      	cbz	r0, 8011510 <_dtoa_r+0xe0>
 80114f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80114fa:	2301      	movs	r3, #1
 80114fc:	6013      	str	r3, [r2, #0]
 80114fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011500:	2b00      	cmp	r3, #0
 8011502:	f000 856b 	beq.w	8011fdc <_dtoa_r+0xbac>
 8011506:	4883      	ldr	r0, [pc, #524]	; (8011714 <_dtoa_r+0x2e4>)
 8011508:	6018      	str	r0, [r3, #0]
 801150a:	1e43      	subs	r3, r0, #1
 801150c:	9301      	str	r3, [sp, #4]
 801150e:	e7df      	b.n	80114d0 <_dtoa_r+0xa0>
 8011510:	ec4b ab10 	vmov	d0, sl, fp
 8011514:	aa10      	add	r2, sp, #64	; 0x40
 8011516:	a911      	add	r1, sp, #68	; 0x44
 8011518:	4620      	mov	r0, r4
 801151a:	f001 f9f1 	bl	8012900 <__d2b>
 801151e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011522:	ee08 0a10 	vmov	s16, r0
 8011526:	2d00      	cmp	r5, #0
 8011528:	f000 8084 	beq.w	8011634 <_dtoa_r+0x204>
 801152c:	ee19 3a90 	vmov	r3, s19
 8011530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011534:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011538:	4656      	mov	r6, sl
 801153a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801153e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011542:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011546:	4b74      	ldr	r3, [pc, #464]	; (8011718 <_dtoa_r+0x2e8>)
 8011548:	2200      	movs	r2, #0
 801154a:	4630      	mov	r0, r6
 801154c:	4639      	mov	r1, r7
 801154e:	f7ee fe9b 	bl	8000288 <__aeabi_dsub>
 8011552:	a365      	add	r3, pc, #404	; (adr r3, 80116e8 <_dtoa_r+0x2b8>)
 8011554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011558:	f7ef f84e 	bl	80005f8 <__aeabi_dmul>
 801155c:	a364      	add	r3, pc, #400	; (adr r3, 80116f0 <_dtoa_r+0x2c0>)
 801155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011562:	f7ee fe93 	bl	800028c <__adddf3>
 8011566:	4606      	mov	r6, r0
 8011568:	4628      	mov	r0, r5
 801156a:	460f      	mov	r7, r1
 801156c:	f7ee ffda 	bl	8000524 <__aeabi_i2d>
 8011570:	a361      	add	r3, pc, #388	; (adr r3, 80116f8 <_dtoa_r+0x2c8>)
 8011572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011576:	f7ef f83f 	bl	80005f8 <__aeabi_dmul>
 801157a:	4602      	mov	r2, r0
 801157c:	460b      	mov	r3, r1
 801157e:	4630      	mov	r0, r6
 8011580:	4639      	mov	r1, r7
 8011582:	f7ee fe83 	bl	800028c <__adddf3>
 8011586:	4606      	mov	r6, r0
 8011588:	460f      	mov	r7, r1
 801158a:	f7ef fae5 	bl	8000b58 <__aeabi_d2iz>
 801158e:	2200      	movs	r2, #0
 8011590:	9000      	str	r0, [sp, #0]
 8011592:	2300      	movs	r3, #0
 8011594:	4630      	mov	r0, r6
 8011596:	4639      	mov	r1, r7
 8011598:	f7ef faa0 	bl	8000adc <__aeabi_dcmplt>
 801159c:	b150      	cbz	r0, 80115b4 <_dtoa_r+0x184>
 801159e:	9800      	ldr	r0, [sp, #0]
 80115a0:	f7ee ffc0 	bl	8000524 <__aeabi_i2d>
 80115a4:	4632      	mov	r2, r6
 80115a6:	463b      	mov	r3, r7
 80115a8:	f7ef fa8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80115ac:	b910      	cbnz	r0, 80115b4 <_dtoa_r+0x184>
 80115ae:	9b00      	ldr	r3, [sp, #0]
 80115b0:	3b01      	subs	r3, #1
 80115b2:	9300      	str	r3, [sp, #0]
 80115b4:	9b00      	ldr	r3, [sp, #0]
 80115b6:	2b16      	cmp	r3, #22
 80115b8:	d85a      	bhi.n	8011670 <_dtoa_r+0x240>
 80115ba:	9a00      	ldr	r2, [sp, #0]
 80115bc:	4b57      	ldr	r3, [pc, #348]	; (801171c <_dtoa_r+0x2ec>)
 80115be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80115c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c6:	ec51 0b19 	vmov	r0, r1, d9
 80115ca:	f7ef fa87 	bl	8000adc <__aeabi_dcmplt>
 80115ce:	2800      	cmp	r0, #0
 80115d0:	d050      	beq.n	8011674 <_dtoa_r+0x244>
 80115d2:	9b00      	ldr	r3, [sp, #0]
 80115d4:	3b01      	subs	r3, #1
 80115d6:	9300      	str	r3, [sp, #0]
 80115d8:	2300      	movs	r3, #0
 80115da:	930b      	str	r3, [sp, #44]	; 0x2c
 80115dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80115de:	1b5d      	subs	r5, r3, r5
 80115e0:	1e6b      	subs	r3, r5, #1
 80115e2:	9305      	str	r3, [sp, #20]
 80115e4:	bf45      	ittet	mi
 80115e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80115ea:	9304      	strmi	r3, [sp, #16]
 80115ec:	2300      	movpl	r3, #0
 80115ee:	2300      	movmi	r3, #0
 80115f0:	bf4c      	ite	mi
 80115f2:	9305      	strmi	r3, [sp, #20]
 80115f4:	9304      	strpl	r3, [sp, #16]
 80115f6:	9b00      	ldr	r3, [sp, #0]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	db3d      	blt.n	8011678 <_dtoa_r+0x248>
 80115fc:	9b05      	ldr	r3, [sp, #20]
 80115fe:	9a00      	ldr	r2, [sp, #0]
 8011600:	920a      	str	r2, [sp, #40]	; 0x28
 8011602:	4413      	add	r3, r2
 8011604:	9305      	str	r3, [sp, #20]
 8011606:	2300      	movs	r3, #0
 8011608:	9307      	str	r3, [sp, #28]
 801160a:	9b06      	ldr	r3, [sp, #24]
 801160c:	2b09      	cmp	r3, #9
 801160e:	f200 8089 	bhi.w	8011724 <_dtoa_r+0x2f4>
 8011612:	2b05      	cmp	r3, #5
 8011614:	bfc4      	itt	gt
 8011616:	3b04      	subgt	r3, #4
 8011618:	9306      	strgt	r3, [sp, #24]
 801161a:	9b06      	ldr	r3, [sp, #24]
 801161c:	f1a3 0302 	sub.w	r3, r3, #2
 8011620:	bfcc      	ite	gt
 8011622:	2500      	movgt	r5, #0
 8011624:	2501      	movle	r5, #1
 8011626:	2b03      	cmp	r3, #3
 8011628:	f200 8087 	bhi.w	801173a <_dtoa_r+0x30a>
 801162c:	e8df f003 	tbb	[pc, r3]
 8011630:	59383a2d 	.word	0x59383a2d
 8011634:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011638:	441d      	add	r5, r3
 801163a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801163e:	2b20      	cmp	r3, #32
 8011640:	bfc1      	itttt	gt
 8011642:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011646:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801164a:	fa0b f303 	lslgt.w	r3, fp, r3
 801164e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011652:	bfda      	itte	le
 8011654:	f1c3 0320 	rsble	r3, r3, #32
 8011658:	fa06 f003 	lslle.w	r0, r6, r3
 801165c:	4318      	orrgt	r0, r3
 801165e:	f7ee ff51 	bl	8000504 <__aeabi_ui2d>
 8011662:	2301      	movs	r3, #1
 8011664:	4606      	mov	r6, r0
 8011666:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801166a:	3d01      	subs	r5, #1
 801166c:	930e      	str	r3, [sp, #56]	; 0x38
 801166e:	e76a      	b.n	8011546 <_dtoa_r+0x116>
 8011670:	2301      	movs	r3, #1
 8011672:	e7b2      	b.n	80115da <_dtoa_r+0x1aa>
 8011674:	900b      	str	r0, [sp, #44]	; 0x2c
 8011676:	e7b1      	b.n	80115dc <_dtoa_r+0x1ac>
 8011678:	9b04      	ldr	r3, [sp, #16]
 801167a:	9a00      	ldr	r2, [sp, #0]
 801167c:	1a9b      	subs	r3, r3, r2
 801167e:	9304      	str	r3, [sp, #16]
 8011680:	4253      	negs	r3, r2
 8011682:	9307      	str	r3, [sp, #28]
 8011684:	2300      	movs	r3, #0
 8011686:	930a      	str	r3, [sp, #40]	; 0x28
 8011688:	e7bf      	b.n	801160a <_dtoa_r+0x1da>
 801168a:	2300      	movs	r3, #0
 801168c:	9308      	str	r3, [sp, #32]
 801168e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011690:	2b00      	cmp	r3, #0
 8011692:	dc55      	bgt.n	8011740 <_dtoa_r+0x310>
 8011694:	2301      	movs	r3, #1
 8011696:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801169a:	461a      	mov	r2, r3
 801169c:	9209      	str	r2, [sp, #36]	; 0x24
 801169e:	e00c      	b.n	80116ba <_dtoa_r+0x28a>
 80116a0:	2301      	movs	r3, #1
 80116a2:	e7f3      	b.n	801168c <_dtoa_r+0x25c>
 80116a4:	2300      	movs	r3, #0
 80116a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116a8:	9308      	str	r3, [sp, #32]
 80116aa:	9b00      	ldr	r3, [sp, #0]
 80116ac:	4413      	add	r3, r2
 80116ae:	9302      	str	r3, [sp, #8]
 80116b0:	3301      	adds	r3, #1
 80116b2:	2b01      	cmp	r3, #1
 80116b4:	9303      	str	r3, [sp, #12]
 80116b6:	bfb8      	it	lt
 80116b8:	2301      	movlt	r3, #1
 80116ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80116bc:	2200      	movs	r2, #0
 80116be:	6042      	str	r2, [r0, #4]
 80116c0:	2204      	movs	r2, #4
 80116c2:	f102 0614 	add.w	r6, r2, #20
 80116c6:	429e      	cmp	r6, r3
 80116c8:	6841      	ldr	r1, [r0, #4]
 80116ca:	d93d      	bls.n	8011748 <_dtoa_r+0x318>
 80116cc:	4620      	mov	r0, r4
 80116ce:	f000 fdef 	bl	80122b0 <_Balloc>
 80116d2:	9001      	str	r0, [sp, #4]
 80116d4:	2800      	cmp	r0, #0
 80116d6:	d13b      	bne.n	8011750 <_dtoa_r+0x320>
 80116d8:	4b11      	ldr	r3, [pc, #68]	; (8011720 <_dtoa_r+0x2f0>)
 80116da:	4602      	mov	r2, r0
 80116dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80116e0:	e6c0      	b.n	8011464 <_dtoa_r+0x34>
 80116e2:	2301      	movs	r3, #1
 80116e4:	e7df      	b.n	80116a6 <_dtoa_r+0x276>
 80116e6:	bf00      	nop
 80116e8:	636f4361 	.word	0x636f4361
 80116ec:	3fd287a7 	.word	0x3fd287a7
 80116f0:	8b60c8b3 	.word	0x8b60c8b3
 80116f4:	3fc68a28 	.word	0x3fc68a28
 80116f8:	509f79fb 	.word	0x509f79fb
 80116fc:	3fd34413 	.word	0x3fd34413
 8011700:	08015ab9 	.word	0x08015ab9
 8011704:	08015ad0 	.word	0x08015ad0
 8011708:	7ff00000 	.word	0x7ff00000
 801170c:	08015ab5 	.word	0x08015ab5
 8011710:	08015aac 	.word	0x08015aac
 8011714:	08015a89 	.word	0x08015a89
 8011718:	3ff80000 	.word	0x3ff80000
 801171c:	08015bc0 	.word	0x08015bc0
 8011720:	08015b2b 	.word	0x08015b2b
 8011724:	2501      	movs	r5, #1
 8011726:	2300      	movs	r3, #0
 8011728:	9306      	str	r3, [sp, #24]
 801172a:	9508      	str	r5, [sp, #32]
 801172c:	f04f 33ff 	mov.w	r3, #4294967295
 8011730:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011734:	2200      	movs	r2, #0
 8011736:	2312      	movs	r3, #18
 8011738:	e7b0      	b.n	801169c <_dtoa_r+0x26c>
 801173a:	2301      	movs	r3, #1
 801173c:	9308      	str	r3, [sp, #32]
 801173e:	e7f5      	b.n	801172c <_dtoa_r+0x2fc>
 8011740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011742:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011746:	e7b8      	b.n	80116ba <_dtoa_r+0x28a>
 8011748:	3101      	adds	r1, #1
 801174a:	6041      	str	r1, [r0, #4]
 801174c:	0052      	lsls	r2, r2, #1
 801174e:	e7b8      	b.n	80116c2 <_dtoa_r+0x292>
 8011750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011752:	9a01      	ldr	r2, [sp, #4]
 8011754:	601a      	str	r2, [r3, #0]
 8011756:	9b03      	ldr	r3, [sp, #12]
 8011758:	2b0e      	cmp	r3, #14
 801175a:	f200 809d 	bhi.w	8011898 <_dtoa_r+0x468>
 801175e:	2d00      	cmp	r5, #0
 8011760:	f000 809a 	beq.w	8011898 <_dtoa_r+0x468>
 8011764:	9b00      	ldr	r3, [sp, #0]
 8011766:	2b00      	cmp	r3, #0
 8011768:	dd32      	ble.n	80117d0 <_dtoa_r+0x3a0>
 801176a:	4ab7      	ldr	r2, [pc, #732]	; (8011a48 <_dtoa_r+0x618>)
 801176c:	f003 030f 	and.w	r3, r3, #15
 8011770:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011774:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011778:	9b00      	ldr	r3, [sp, #0]
 801177a:	05d8      	lsls	r0, r3, #23
 801177c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011780:	d516      	bpl.n	80117b0 <_dtoa_r+0x380>
 8011782:	4bb2      	ldr	r3, [pc, #712]	; (8011a4c <_dtoa_r+0x61c>)
 8011784:	ec51 0b19 	vmov	r0, r1, d9
 8011788:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801178c:	f7ef f85e 	bl	800084c <__aeabi_ddiv>
 8011790:	f007 070f 	and.w	r7, r7, #15
 8011794:	4682      	mov	sl, r0
 8011796:	468b      	mov	fp, r1
 8011798:	2503      	movs	r5, #3
 801179a:	4eac      	ldr	r6, [pc, #688]	; (8011a4c <_dtoa_r+0x61c>)
 801179c:	b957      	cbnz	r7, 80117b4 <_dtoa_r+0x384>
 801179e:	4642      	mov	r2, r8
 80117a0:	464b      	mov	r3, r9
 80117a2:	4650      	mov	r0, sl
 80117a4:	4659      	mov	r1, fp
 80117a6:	f7ef f851 	bl	800084c <__aeabi_ddiv>
 80117aa:	4682      	mov	sl, r0
 80117ac:	468b      	mov	fp, r1
 80117ae:	e028      	b.n	8011802 <_dtoa_r+0x3d2>
 80117b0:	2502      	movs	r5, #2
 80117b2:	e7f2      	b.n	801179a <_dtoa_r+0x36a>
 80117b4:	07f9      	lsls	r1, r7, #31
 80117b6:	d508      	bpl.n	80117ca <_dtoa_r+0x39a>
 80117b8:	4640      	mov	r0, r8
 80117ba:	4649      	mov	r1, r9
 80117bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80117c0:	f7ee ff1a 	bl	80005f8 <__aeabi_dmul>
 80117c4:	3501      	adds	r5, #1
 80117c6:	4680      	mov	r8, r0
 80117c8:	4689      	mov	r9, r1
 80117ca:	107f      	asrs	r7, r7, #1
 80117cc:	3608      	adds	r6, #8
 80117ce:	e7e5      	b.n	801179c <_dtoa_r+0x36c>
 80117d0:	f000 809b 	beq.w	801190a <_dtoa_r+0x4da>
 80117d4:	9b00      	ldr	r3, [sp, #0]
 80117d6:	4f9d      	ldr	r7, [pc, #628]	; (8011a4c <_dtoa_r+0x61c>)
 80117d8:	425e      	negs	r6, r3
 80117da:	4b9b      	ldr	r3, [pc, #620]	; (8011a48 <_dtoa_r+0x618>)
 80117dc:	f006 020f 	and.w	r2, r6, #15
 80117e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80117e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e8:	ec51 0b19 	vmov	r0, r1, d9
 80117ec:	f7ee ff04 	bl	80005f8 <__aeabi_dmul>
 80117f0:	1136      	asrs	r6, r6, #4
 80117f2:	4682      	mov	sl, r0
 80117f4:	468b      	mov	fp, r1
 80117f6:	2300      	movs	r3, #0
 80117f8:	2502      	movs	r5, #2
 80117fa:	2e00      	cmp	r6, #0
 80117fc:	d17a      	bne.n	80118f4 <_dtoa_r+0x4c4>
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d1d3      	bne.n	80117aa <_dtoa_r+0x37a>
 8011802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011804:	2b00      	cmp	r3, #0
 8011806:	f000 8082 	beq.w	801190e <_dtoa_r+0x4de>
 801180a:	4b91      	ldr	r3, [pc, #580]	; (8011a50 <_dtoa_r+0x620>)
 801180c:	2200      	movs	r2, #0
 801180e:	4650      	mov	r0, sl
 8011810:	4659      	mov	r1, fp
 8011812:	f7ef f963 	bl	8000adc <__aeabi_dcmplt>
 8011816:	2800      	cmp	r0, #0
 8011818:	d079      	beq.n	801190e <_dtoa_r+0x4de>
 801181a:	9b03      	ldr	r3, [sp, #12]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d076      	beq.n	801190e <_dtoa_r+0x4de>
 8011820:	9b02      	ldr	r3, [sp, #8]
 8011822:	2b00      	cmp	r3, #0
 8011824:	dd36      	ble.n	8011894 <_dtoa_r+0x464>
 8011826:	9b00      	ldr	r3, [sp, #0]
 8011828:	4650      	mov	r0, sl
 801182a:	4659      	mov	r1, fp
 801182c:	1e5f      	subs	r7, r3, #1
 801182e:	2200      	movs	r2, #0
 8011830:	4b88      	ldr	r3, [pc, #544]	; (8011a54 <_dtoa_r+0x624>)
 8011832:	f7ee fee1 	bl	80005f8 <__aeabi_dmul>
 8011836:	9e02      	ldr	r6, [sp, #8]
 8011838:	4682      	mov	sl, r0
 801183a:	468b      	mov	fp, r1
 801183c:	3501      	adds	r5, #1
 801183e:	4628      	mov	r0, r5
 8011840:	f7ee fe70 	bl	8000524 <__aeabi_i2d>
 8011844:	4652      	mov	r2, sl
 8011846:	465b      	mov	r3, fp
 8011848:	f7ee fed6 	bl	80005f8 <__aeabi_dmul>
 801184c:	4b82      	ldr	r3, [pc, #520]	; (8011a58 <_dtoa_r+0x628>)
 801184e:	2200      	movs	r2, #0
 8011850:	f7ee fd1c 	bl	800028c <__adddf3>
 8011854:	46d0      	mov	r8, sl
 8011856:	46d9      	mov	r9, fp
 8011858:	4682      	mov	sl, r0
 801185a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801185e:	2e00      	cmp	r6, #0
 8011860:	d158      	bne.n	8011914 <_dtoa_r+0x4e4>
 8011862:	4b7e      	ldr	r3, [pc, #504]	; (8011a5c <_dtoa_r+0x62c>)
 8011864:	2200      	movs	r2, #0
 8011866:	4640      	mov	r0, r8
 8011868:	4649      	mov	r1, r9
 801186a:	f7ee fd0d 	bl	8000288 <__aeabi_dsub>
 801186e:	4652      	mov	r2, sl
 8011870:	465b      	mov	r3, fp
 8011872:	4680      	mov	r8, r0
 8011874:	4689      	mov	r9, r1
 8011876:	f7ef f94f 	bl	8000b18 <__aeabi_dcmpgt>
 801187a:	2800      	cmp	r0, #0
 801187c:	f040 8295 	bne.w	8011daa <_dtoa_r+0x97a>
 8011880:	4652      	mov	r2, sl
 8011882:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011886:	4640      	mov	r0, r8
 8011888:	4649      	mov	r1, r9
 801188a:	f7ef f927 	bl	8000adc <__aeabi_dcmplt>
 801188e:	2800      	cmp	r0, #0
 8011890:	f040 8289 	bne.w	8011da6 <_dtoa_r+0x976>
 8011894:	ec5b ab19 	vmov	sl, fp, d9
 8011898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801189a:	2b00      	cmp	r3, #0
 801189c:	f2c0 8148 	blt.w	8011b30 <_dtoa_r+0x700>
 80118a0:	9a00      	ldr	r2, [sp, #0]
 80118a2:	2a0e      	cmp	r2, #14
 80118a4:	f300 8144 	bgt.w	8011b30 <_dtoa_r+0x700>
 80118a8:	4b67      	ldr	r3, [pc, #412]	; (8011a48 <_dtoa_r+0x618>)
 80118aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80118ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80118b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	f280 80d5 	bge.w	8011a64 <_dtoa_r+0x634>
 80118ba:	9b03      	ldr	r3, [sp, #12]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	f300 80d1 	bgt.w	8011a64 <_dtoa_r+0x634>
 80118c2:	f040 826f 	bne.w	8011da4 <_dtoa_r+0x974>
 80118c6:	4b65      	ldr	r3, [pc, #404]	; (8011a5c <_dtoa_r+0x62c>)
 80118c8:	2200      	movs	r2, #0
 80118ca:	4640      	mov	r0, r8
 80118cc:	4649      	mov	r1, r9
 80118ce:	f7ee fe93 	bl	80005f8 <__aeabi_dmul>
 80118d2:	4652      	mov	r2, sl
 80118d4:	465b      	mov	r3, fp
 80118d6:	f7ef f915 	bl	8000b04 <__aeabi_dcmpge>
 80118da:	9e03      	ldr	r6, [sp, #12]
 80118dc:	4637      	mov	r7, r6
 80118de:	2800      	cmp	r0, #0
 80118e0:	f040 8245 	bne.w	8011d6e <_dtoa_r+0x93e>
 80118e4:	9d01      	ldr	r5, [sp, #4]
 80118e6:	2331      	movs	r3, #49	; 0x31
 80118e8:	f805 3b01 	strb.w	r3, [r5], #1
 80118ec:	9b00      	ldr	r3, [sp, #0]
 80118ee:	3301      	adds	r3, #1
 80118f0:	9300      	str	r3, [sp, #0]
 80118f2:	e240      	b.n	8011d76 <_dtoa_r+0x946>
 80118f4:	07f2      	lsls	r2, r6, #31
 80118f6:	d505      	bpl.n	8011904 <_dtoa_r+0x4d4>
 80118f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80118fc:	f7ee fe7c 	bl	80005f8 <__aeabi_dmul>
 8011900:	3501      	adds	r5, #1
 8011902:	2301      	movs	r3, #1
 8011904:	1076      	asrs	r6, r6, #1
 8011906:	3708      	adds	r7, #8
 8011908:	e777      	b.n	80117fa <_dtoa_r+0x3ca>
 801190a:	2502      	movs	r5, #2
 801190c:	e779      	b.n	8011802 <_dtoa_r+0x3d2>
 801190e:	9f00      	ldr	r7, [sp, #0]
 8011910:	9e03      	ldr	r6, [sp, #12]
 8011912:	e794      	b.n	801183e <_dtoa_r+0x40e>
 8011914:	9901      	ldr	r1, [sp, #4]
 8011916:	4b4c      	ldr	r3, [pc, #304]	; (8011a48 <_dtoa_r+0x618>)
 8011918:	4431      	add	r1, r6
 801191a:	910d      	str	r1, [sp, #52]	; 0x34
 801191c:	9908      	ldr	r1, [sp, #32]
 801191e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011922:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011926:	2900      	cmp	r1, #0
 8011928:	d043      	beq.n	80119b2 <_dtoa_r+0x582>
 801192a:	494d      	ldr	r1, [pc, #308]	; (8011a60 <_dtoa_r+0x630>)
 801192c:	2000      	movs	r0, #0
 801192e:	f7ee ff8d 	bl	800084c <__aeabi_ddiv>
 8011932:	4652      	mov	r2, sl
 8011934:	465b      	mov	r3, fp
 8011936:	f7ee fca7 	bl	8000288 <__aeabi_dsub>
 801193a:	9d01      	ldr	r5, [sp, #4]
 801193c:	4682      	mov	sl, r0
 801193e:	468b      	mov	fp, r1
 8011940:	4649      	mov	r1, r9
 8011942:	4640      	mov	r0, r8
 8011944:	f7ef f908 	bl	8000b58 <__aeabi_d2iz>
 8011948:	4606      	mov	r6, r0
 801194a:	f7ee fdeb 	bl	8000524 <__aeabi_i2d>
 801194e:	4602      	mov	r2, r0
 8011950:	460b      	mov	r3, r1
 8011952:	4640      	mov	r0, r8
 8011954:	4649      	mov	r1, r9
 8011956:	f7ee fc97 	bl	8000288 <__aeabi_dsub>
 801195a:	3630      	adds	r6, #48	; 0x30
 801195c:	f805 6b01 	strb.w	r6, [r5], #1
 8011960:	4652      	mov	r2, sl
 8011962:	465b      	mov	r3, fp
 8011964:	4680      	mov	r8, r0
 8011966:	4689      	mov	r9, r1
 8011968:	f7ef f8b8 	bl	8000adc <__aeabi_dcmplt>
 801196c:	2800      	cmp	r0, #0
 801196e:	d163      	bne.n	8011a38 <_dtoa_r+0x608>
 8011970:	4642      	mov	r2, r8
 8011972:	464b      	mov	r3, r9
 8011974:	4936      	ldr	r1, [pc, #216]	; (8011a50 <_dtoa_r+0x620>)
 8011976:	2000      	movs	r0, #0
 8011978:	f7ee fc86 	bl	8000288 <__aeabi_dsub>
 801197c:	4652      	mov	r2, sl
 801197e:	465b      	mov	r3, fp
 8011980:	f7ef f8ac 	bl	8000adc <__aeabi_dcmplt>
 8011984:	2800      	cmp	r0, #0
 8011986:	f040 80b5 	bne.w	8011af4 <_dtoa_r+0x6c4>
 801198a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801198c:	429d      	cmp	r5, r3
 801198e:	d081      	beq.n	8011894 <_dtoa_r+0x464>
 8011990:	4b30      	ldr	r3, [pc, #192]	; (8011a54 <_dtoa_r+0x624>)
 8011992:	2200      	movs	r2, #0
 8011994:	4650      	mov	r0, sl
 8011996:	4659      	mov	r1, fp
 8011998:	f7ee fe2e 	bl	80005f8 <__aeabi_dmul>
 801199c:	4b2d      	ldr	r3, [pc, #180]	; (8011a54 <_dtoa_r+0x624>)
 801199e:	4682      	mov	sl, r0
 80119a0:	468b      	mov	fp, r1
 80119a2:	4640      	mov	r0, r8
 80119a4:	4649      	mov	r1, r9
 80119a6:	2200      	movs	r2, #0
 80119a8:	f7ee fe26 	bl	80005f8 <__aeabi_dmul>
 80119ac:	4680      	mov	r8, r0
 80119ae:	4689      	mov	r9, r1
 80119b0:	e7c6      	b.n	8011940 <_dtoa_r+0x510>
 80119b2:	4650      	mov	r0, sl
 80119b4:	4659      	mov	r1, fp
 80119b6:	f7ee fe1f 	bl	80005f8 <__aeabi_dmul>
 80119ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119bc:	9d01      	ldr	r5, [sp, #4]
 80119be:	930f      	str	r3, [sp, #60]	; 0x3c
 80119c0:	4682      	mov	sl, r0
 80119c2:	468b      	mov	fp, r1
 80119c4:	4649      	mov	r1, r9
 80119c6:	4640      	mov	r0, r8
 80119c8:	f7ef f8c6 	bl	8000b58 <__aeabi_d2iz>
 80119cc:	4606      	mov	r6, r0
 80119ce:	f7ee fda9 	bl	8000524 <__aeabi_i2d>
 80119d2:	3630      	adds	r6, #48	; 0x30
 80119d4:	4602      	mov	r2, r0
 80119d6:	460b      	mov	r3, r1
 80119d8:	4640      	mov	r0, r8
 80119da:	4649      	mov	r1, r9
 80119dc:	f7ee fc54 	bl	8000288 <__aeabi_dsub>
 80119e0:	f805 6b01 	strb.w	r6, [r5], #1
 80119e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119e6:	429d      	cmp	r5, r3
 80119e8:	4680      	mov	r8, r0
 80119ea:	4689      	mov	r9, r1
 80119ec:	f04f 0200 	mov.w	r2, #0
 80119f0:	d124      	bne.n	8011a3c <_dtoa_r+0x60c>
 80119f2:	4b1b      	ldr	r3, [pc, #108]	; (8011a60 <_dtoa_r+0x630>)
 80119f4:	4650      	mov	r0, sl
 80119f6:	4659      	mov	r1, fp
 80119f8:	f7ee fc48 	bl	800028c <__adddf3>
 80119fc:	4602      	mov	r2, r0
 80119fe:	460b      	mov	r3, r1
 8011a00:	4640      	mov	r0, r8
 8011a02:	4649      	mov	r1, r9
 8011a04:	f7ef f888 	bl	8000b18 <__aeabi_dcmpgt>
 8011a08:	2800      	cmp	r0, #0
 8011a0a:	d173      	bne.n	8011af4 <_dtoa_r+0x6c4>
 8011a0c:	4652      	mov	r2, sl
 8011a0e:	465b      	mov	r3, fp
 8011a10:	4913      	ldr	r1, [pc, #76]	; (8011a60 <_dtoa_r+0x630>)
 8011a12:	2000      	movs	r0, #0
 8011a14:	f7ee fc38 	bl	8000288 <__aeabi_dsub>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	4640      	mov	r0, r8
 8011a1e:	4649      	mov	r1, r9
 8011a20:	f7ef f85c 	bl	8000adc <__aeabi_dcmplt>
 8011a24:	2800      	cmp	r0, #0
 8011a26:	f43f af35 	beq.w	8011894 <_dtoa_r+0x464>
 8011a2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011a2c:	1e6b      	subs	r3, r5, #1
 8011a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011a34:	2b30      	cmp	r3, #48	; 0x30
 8011a36:	d0f8      	beq.n	8011a2a <_dtoa_r+0x5fa>
 8011a38:	9700      	str	r7, [sp, #0]
 8011a3a:	e049      	b.n	8011ad0 <_dtoa_r+0x6a0>
 8011a3c:	4b05      	ldr	r3, [pc, #20]	; (8011a54 <_dtoa_r+0x624>)
 8011a3e:	f7ee fddb 	bl	80005f8 <__aeabi_dmul>
 8011a42:	4680      	mov	r8, r0
 8011a44:	4689      	mov	r9, r1
 8011a46:	e7bd      	b.n	80119c4 <_dtoa_r+0x594>
 8011a48:	08015bc0 	.word	0x08015bc0
 8011a4c:	08015b98 	.word	0x08015b98
 8011a50:	3ff00000 	.word	0x3ff00000
 8011a54:	40240000 	.word	0x40240000
 8011a58:	401c0000 	.word	0x401c0000
 8011a5c:	40140000 	.word	0x40140000
 8011a60:	3fe00000 	.word	0x3fe00000
 8011a64:	9d01      	ldr	r5, [sp, #4]
 8011a66:	4656      	mov	r6, sl
 8011a68:	465f      	mov	r7, fp
 8011a6a:	4642      	mov	r2, r8
 8011a6c:	464b      	mov	r3, r9
 8011a6e:	4630      	mov	r0, r6
 8011a70:	4639      	mov	r1, r7
 8011a72:	f7ee feeb 	bl	800084c <__aeabi_ddiv>
 8011a76:	f7ef f86f 	bl	8000b58 <__aeabi_d2iz>
 8011a7a:	4682      	mov	sl, r0
 8011a7c:	f7ee fd52 	bl	8000524 <__aeabi_i2d>
 8011a80:	4642      	mov	r2, r8
 8011a82:	464b      	mov	r3, r9
 8011a84:	f7ee fdb8 	bl	80005f8 <__aeabi_dmul>
 8011a88:	4602      	mov	r2, r0
 8011a8a:	460b      	mov	r3, r1
 8011a8c:	4630      	mov	r0, r6
 8011a8e:	4639      	mov	r1, r7
 8011a90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011a94:	f7ee fbf8 	bl	8000288 <__aeabi_dsub>
 8011a98:	f805 6b01 	strb.w	r6, [r5], #1
 8011a9c:	9e01      	ldr	r6, [sp, #4]
 8011a9e:	9f03      	ldr	r7, [sp, #12]
 8011aa0:	1bae      	subs	r6, r5, r6
 8011aa2:	42b7      	cmp	r7, r6
 8011aa4:	4602      	mov	r2, r0
 8011aa6:	460b      	mov	r3, r1
 8011aa8:	d135      	bne.n	8011b16 <_dtoa_r+0x6e6>
 8011aaa:	f7ee fbef 	bl	800028c <__adddf3>
 8011aae:	4642      	mov	r2, r8
 8011ab0:	464b      	mov	r3, r9
 8011ab2:	4606      	mov	r6, r0
 8011ab4:	460f      	mov	r7, r1
 8011ab6:	f7ef f82f 	bl	8000b18 <__aeabi_dcmpgt>
 8011aba:	b9d0      	cbnz	r0, 8011af2 <_dtoa_r+0x6c2>
 8011abc:	4642      	mov	r2, r8
 8011abe:	464b      	mov	r3, r9
 8011ac0:	4630      	mov	r0, r6
 8011ac2:	4639      	mov	r1, r7
 8011ac4:	f7ef f800 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ac8:	b110      	cbz	r0, 8011ad0 <_dtoa_r+0x6a0>
 8011aca:	f01a 0f01 	tst.w	sl, #1
 8011ace:	d110      	bne.n	8011af2 <_dtoa_r+0x6c2>
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	ee18 1a10 	vmov	r1, s16
 8011ad6:	f000 fc2b 	bl	8012330 <_Bfree>
 8011ada:	2300      	movs	r3, #0
 8011adc:	9800      	ldr	r0, [sp, #0]
 8011ade:	702b      	strb	r3, [r5, #0]
 8011ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ae2:	3001      	adds	r0, #1
 8011ae4:	6018      	str	r0, [r3, #0]
 8011ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	f43f acf1 	beq.w	80114d0 <_dtoa_r+0xa0>
 8011aee:	601d      	str	r5, [r3, #0]
 8011af0:	e4ee      	b.n	80114d0 <_dtoa_r+0xa0>
 8011af2:	9f00      	ldr	r7, [sp, #0]
 8011af4:	462b      	mov	r3, r5
 8011af6:	461d      	mov	r5, r3
 8011af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011afc:	2a39      	cmp	r2, #57	; 0x39
 8011afe:	d106      	bne.n	8011b0e <_dtoa_r+0x6de>
 8011b00:	9a01      	ldr	r2, [sp, #4]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d1f7      	bne.n	8011af6 <_dtoa_r+0x6c6>
 8011b06:	9901      	ldr	r1, [sp, #4]
 8011b08:	2230      	movs	r2, #48	; 0x30
 8011b0a:	3701      	adds	r7, #1
 8011b0c:	700a      	strb	r2, [r1, #0]
 8011b0e:	781a      	ldrb	r2, [r3, #0]
 8011b10:	3201      	adds	r2, #1
 8011b12:	701a      	strb	r2, [r3, #0]
 8011b14:	e790      	b.n	8011a38 <_dtoa_r+0x608>
 8011b16:	4ba6      	ldr	r3, [pc, #664]	; (8011db0 <_dtoa_r+0x980>)
 8011b18:	2200      	movs	r2, #0
 8011b1a:	f7ee fd6d 	bl	80005f8 <__aeabi_dmul>
 8011b1e:	2200      	movs	r2, #0
 8011b20:	2300      	movs	r3, #0
 8011b22:	4606      	mov	r6, r0
 8011b24:	460f      	mov	r7, r1
 8011b26:	f7ee ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b2a:	2800      	cmp	r0, #0
 8011b2c:	d09d      	beq.n	8011a6a <_dtoa_r+0x63a>
 8011b2e:	e7cf      	b.n	8011ad0 <_dtoa_r+0x6a0>
 8011b30:	9a08      	ldr	r2, [sp, #32]
 8011b32:	2a00      	cmp	r2, #0
 8011b34:	f000 80d7 	beq.w	8011ce6 <_dtoa_r+0x8b6>
 8011b38:	9a06      	ldr	r2, [sp, #24]
 8011b3a:	2a01      	cmp	r2, #1
 8011b3c:	f300 80ba 	bgt.w	8011cb4 <_dtoa_r+0x884>
 8011b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b42:	2a00      	cmp	r2, #0
 8011b44:	f000 80b2 	beq.w	8011cac <_dtoa_r+0x87c>
 8011b48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011b4c:	9e07      	ldr	r6, [sp, #28]
 8011b4e:	9d04      	ldr	r5, [sp, #16]
 8011b50:	9a04      	ldr	r2, [sp, #16]
 8011b52:	441a      	add	r2, r3
 8011b54:	9204      	str	r2, [sp, #16]
 8011b56:	9a05      	ldr	r2, [sp, #20]
 8011b58:	2101      	movs	r1, #1
 8011b5a:	441a      	add	r2, r3
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	9205      	str	r2, [sp, #20]
 8011b60:	f000 fc9e 	bl	80124a0 <__i2b>
 8011b64:	4607      	mov	r7, r0
 8011b66:	2d00      	cmp	r5, #0
 8011b68:	dd0c      	ble.n	8011b84 <_dtoa_r+0x754>
 8011b6a:	9b05      	ldr	r3, [sp, #20]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	dd09      	ble.n	8011b84 <_dtoa_r+0x754>
 8011b70:	42ab      	cmp	r3, r5
 8011b72:	9a04      	ldr	r2, [sp, #16]
 8011b74:	bfa8      	it	ge
 8011b76:	462b      	movge	r3, r5
 8011b78:	1ad2      	subs	r2, r2, r3
 8011b7a:	9204      	str	r2, [sp, #16]
 8011b7c:	9a05      	ldr	r2, [sp, #20]
 8011b7e:	1aed      	subs	r5, r5, r3
 8011b80:	1ad3      	subs	r3, r2, r3
 8011b82:	9305      	str	r3, [sp, #20]
 8011b84:	9b07      	ldr	r3, [sp, #28]
 8011b86:	b31b      	cbz	r3, 8011bd0 <_dtoa_r+0x7a0>
 8011b88:	9b08      	ldr	r3, [sp, #32]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	f000 80af 	beq.w	8011cee <_dtoa_r+0x8be>
 8011b90:	2e00      	cmp	r6, #0
 8011b92:	dd13      	ble.n	8011bbc <_dtoa_r+0x78c>
 8011b94:	4639      	mov	r1, r7
 8011b96:	4632      	mov	r2, r6
 8011b98:	4620      	mov	r0, r4
 8011b9a:	f000 fd41 	bl	8012620 <__pow5mult>
 8011b9e:	ee18 2a10 	vmov	r2, s16
 8011ba2:	4601      	mov	r1, r0
 8011ba4:	4607      	mov	r7, r0
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	f000 fc90 	bl	80124cc <__multiply>
 8011bac:	ee18 1a10 	vmov	r1, s16
 8011bb0:	4680      	mov	r8, r0
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f000 fbbc 	bl	8012330 <_Bfree>
 8011bb8:	ee08 8a10 	vmov	s16, r8
 8011bbc:	9b07      	ldr	r3, [sp, #28]
 8011bbe:	1b9a      	subs	r2, r3, r6
 8011bc0:	d006      	beq.n	8011bd0 <_dtoa_r+0x7a0>
 8011bc2:	ee18 1a10 	vmov	r1, s16
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	f000 fd2a 	bl	8012620 <__pow5mult>
 8011bcc:	ee08 0a10 	vmov	s16, r0
 8011bd0:	2101      	movs	r1, #1
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	f000 fc64 	bl	80124a0 <__i2b>
 8011bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	4606      	mov	r6, r0
 8011bde:	f340 8088 	ble.w	8011cf2 <_dtoa_r+0x8c2>
 8011be2:	461a      	mov	r2, r3
 8011be4:	4601      	mov	r1, r0
 8011be6:	4620      	mov	r0, r4
 8011be8:	f000 fd1a 	bl	8012620 <__pow5mult>
 8011bec:	9b06      	ldr	r3, [sp, #24]
 8011bee:	2b01      	cmp	r3, #1
 8011bf0:	4606      	mov	r6, r0
 8011bf2:	f340 8081 	ble.w	8011cf8 <_dtoa_r+0x8c8>
 8011bf6:	f04f 0800 	mov.w	r8, #0
 8011bfa:	6933      	ldr	r3, [r6, #16]
 8011bfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011c00:	6918      	ldr	r0, [r3, #16]
 8011c02:	f000 fbfd 	bl	8012400 <__hi0bits>
 8011c06:	f1c0 0020 	rsb	r0, r0, #32
 8011c0a:	9b05      	ldr	r3, [sp, #20]
 8011c0c:	4418      	add	r0, r3
 8011c0e:	f010 001f 	ands.w	r0, r0, #31
 8011c12:	f000 8092 	beq.w	8011d3a <_dtoa_r+0x90a>
 8011c16:	f1c0 0320 	rsb	r3, r0, #32
 8011c1a:	2b04      	cmp	r3, #4
 8011c1c:	f340 808a 	ble.w	8011d34 <_dtoa_r+0x904>
 8011c20:	f1c0 001c 	rsb	r0, r0, #28
 8011c24:	9b04      	ldr	r3, [sp, #16]
 8011c26:	4403      	add	r3, r0
 8011c28:	9304      	str	r3, [sp, #16]
 8011c2a:	9b05      	ldr	r3, [sp, #20]
 8011c2c:	4403      	add	r3, r0
 8011c2e:	4405      	add	r5, r0
 8011c30:	9305      	str	r3, [sp, #20]
 8011c32:	9b04      	ldr	r3, [sp, #16]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	dd07      	ble.n	8011c48 <_dtoa_r+0x818>
 8011c38:	ee18 1a10 	vmov	r1, s16
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	4620      	mov	r0, r4
 8011c40:	f000 fd48 	bl	80126d4 <__lshift>
 8011c44:	ee08 0a10 	vmov	s16, r0
 8011c48:	9b05      	ldr	r3, [sp, #20]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	dd05      	ble.n	8011c5a <_dtoa_r+0x82a>
 8011c4e:	4631      	mov	r1, r6
 8011c50:	461a      	mov	r2, r3
 8011c52:	4620      	mov	r0, r4
 8011c54:	f000 fd3e 	bl	80126d4 <__lshift>
 8011c58:	4606      	mov	r6, r0
 8011c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d06e      	beq.n	8011d3e <_dtoa_r+0x90e>
 8011c60:	ee18 0a10 	vmov	r0, s16
 8011c64:	4631      	mov	r1, r6
 8011c66:	f000 fda5 	bl	80127b4 <__mcmp>
 8011c6a:	2800      	cmp	r0, #0
 8011c6c:	da67      	bge.n	8011d3e <_dtoa_r+0x90e>
 8011c6e:	9b00      	ldr	r3, [sp, #0]
 8011c70:	3b01      	subs	r3, #1
 8011c72:	ee18 1a10 	vmov	r1, s16
 8011c76:	9300      	str	r3, [sp, #0]
 8011c78:	220a      	movs	r2, #10
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	4620      	mov	r0, r4
 8011c7e:	f000 fb79 	bl	8012374 <__multadd>
 8011c82:	9b08      	ldr	r3, [sp, #32]
 8011c84:	ee08 0a10 	vmov	s16, r0
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	f000 81b1 	beq.w	8011ff0 <_dtoa_r+0xbc0>
 8011c8e:	2300      	movs	r3, #0
 8011c90:	4639      	mov	r1, r7
 8011c92:	220a      	movs	r2, #10
 8011c94:	4620      	mov	r0, r4
 8011c96:	f000 fb6d 	bl	8012374 <__multadd>
 8011c9a:	9b02      	ldr	r3, [sp, #8]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	4607      	mov	r7, r0
 8011ca0:	f300 808e 	bgt.w	8011dc0 <_dtoa_r+0x990>
 8011ca4:	9b06      	ldr	r3, [sp, #24]
 8011ca6:	2b02      	cmp	r3, #2
 8011ca8:	dc51      	bgt.n	8011d4e <_dtoa_r+0x91e>
 8011caa:	e089      	b.n	8011dc0 <_dtoa_r+0x990>
 8011cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011cae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011cb2:	e74b      	b.n	8011b4c <_dtoa_r+0x71c>
 8011cb4:	9b03      	ldr	r3, [sp, #12]
 8011cb6:	1e5e      	subs	r6, r3, #1
 8011cb8:	9b07      	ldr	r3, [sp, #28]
 8011cba:	42b3      	cmp	r3, r6
 8011cbc:	bfbf      	itttt	lt
 8011cbe:	9b07      	ldrlt	r3, [sp, #28]
 8011cc0:	9607      	strlt	r6, [sp, #28]
 8011cc2:	1af2      	sublt	r2, r6, r3
 8011cc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011cc6:	bfb6      	itet	lt
 8011cc8:	189b      	addlt	r3, r3, r2
 8011cca:	1b9e      	subge	r6, r3, r6
 8011ccc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011cce:	9b03      	ldr	r3, [sp, #12]
 8011cd0:	bfb8      	it	lt
 8011cd2:	2600      	movlt	r6, #0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	bfb7      	itett	lt
 8011cd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011cdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011ce0:	1a9d      	sublt	r5, r3, r2
 8011ce2:	2300      	movlt	r3, #0
 8011ce4:	e734      	b.n	8011b50 <_dtoa_r+0x720>
 8011ce6:	9e07      	ldr	r6, [sp, #28]
 8011ce8:	9d04      	ldr	r5, [sp, #16]
 8011cea:	9f08      	ldr	r7, [sp, #32]
 8011cec:	e73b      	b.n	8011b66 <_dtoa_r+0x736>
 8011cee:	9a07      	ldr	r2, [sp, #28]
 8011cf0:	e767      	b.n	8011bc2 <_dtoa_r+0x792>
 8011cf2:	9b06      	ldr	r3, [sp, #24]
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	dc18      	bgt.n	8011d2a <_dtoa_r+0x8fa>
 8011cf8:	f1ba 0f00 	cmp.w	sl, #0
 8011cfc:	d115      	bne.n	8011d2a <_dtoa_r+0x8fa>
 8011cfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011d02:	b993      	cbnz	r3, 8011d2a <_dtoa_r+0x8fa>
 8011d04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011d08:	0d1b      	lsrs	r3, r3, #20
 8011d0a:	051b      	lsls	r3, r3, #20
 8011d0c:	b183      	cbz	r3, 8011d30 <_dtoa_r+0x900>
 8011d0e:	9b04      	ldr	r3, [sp, #16]
 8011d10:	3301      	adds	r3, #1
 8011d12:	9304      	str	r3, [sp, #16]
 8011d14:	9b05      	ldr	r3, [sp, #20]
 8011d16:	3301      	adds	r3, #1
 8011d18:	9305      	str	r3, [sp, #20]
 8011d1a:	f04f 0801 	mov.w	r8, #1
 8011d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	f47f af6a 	bne.w	8011bfa <_dtoa_r+0x7ca>
 8011d26:	2001      	movs	r0, #1
 8011d28:	e76f      	b.n	8011c0a <_dtoa_r+0x7da>
 8011d2a:	f04f 0800 	mov.w	r8, #0
 8011d2e:	e7f6      	b.n	8011d1e <_dtoa_r+0x8ee>
 8011d30:	4698      	mov	r8, r3
 8011d32:	e7f4      	b.n	8011d1e <_dtoa_r+0x8ee>
 8011d34:	f43f af7d 	beq.w	8011c32 <_dtoa_r+0x802>
 8011d38:	4618      	mov	r0, r3
 8011d3a:	301c      	adds	r0, #28
 8011d3c:	e772      	b.n	8011c24 <_dtoa_r+0x7f4>
 8011d3e:	9b03      	ldr	r3, [sp, #12]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	dc37      	bgt.n	8011db4 <_dtoa_r+0x984>
 8011d44:	9b06      	ldr	r3, [sp, #24]
 8011d46:	2b02      	cmp	r3, #2
 8011d48:	dd34      	ble.n	8011db4 <_dtoa_r+0x984>
 8011d4a:	9b03      	ldr	r3, [sp, #12]
 8011d4c:	9302      	str	r3, [sp, #8]
 8011d4e:	9b02      	ldr	r3, [sp, #8]
 8011d50:	b96b      	cbnz	r3, 8011d6e <_dtoa_r+0x93e>
 8011d52:	4631      	mov	r1, r6
 8011d54:	2205      	movs	r2, #5
 8011d56:	4620      	mov	r0, r4
 8011d58:	f000 fb0c 	bl	8012374 <__multadd>
 8011d5c:	4601      	mov	r1, r0
 8011d5e:	4606      	mov	r6, r0
 8011d60:	ee18 0a10 	vmov	r0, s16
 8011d64:	f000 fd26 	bl	80127b4 <__mcmp>
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	f73f adbb 	bgt.w	80118e4 <_dtoa_r+0x4b4>
 8011d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d70:	9d01      	ldr	r5, [sp, #4]
 8011d72:	43db      	mvns	r3, r3
 8011d74:	9300      	str	r3, [sp, #0]
 8011d76:	f04f 0800 	mov.w	r8, #0
 8011d7a:	4631      	mov	r1, r6
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	f000 fad7 	bl	8012330 <_Bfree>
 8011d82:	2f00      	cmp	r7, #0
 8011d84:	f43f aea4 	beq.w	8011ad0 <_dtoa_r+0x6a0>
 8011d88:	f1b8 0f00 	cmp.w	r8, #0
 8011d8c:	d005      	beq.n	8011d9a <_dtoa_r+0x96a>
 8011d8e:	45b8      	cmp	r8, r7
 8011d90:	d003      	beq.n	8011d9a <_dtoa_r+0x96a>
 8011d92:	4641      	mov	r1, r8
 8011d94:	4620      	mov	r0, r4
 8011d96:	f000 facb 	bl	8012330 <_Bfree>
 8011d9a:	4639      	mov	r1, r7
 8011d9c:	4620      	mov	r0, r4
 8011d9e:	f000 fac7 	bl	8012330 <_Bfree>
 8011da2:	e695      	b.n	8011ad0 <_dtoa_r+0x6a0>
 8011da4:	2600      	movs	r6, #0
 8011da6:	4637      	mov	r7, r6
 8011da8:	e7e1      	b.n	8011d6e <_dtoa_r+0x93e>
 8011daa:	9700      	str	r7, [sp, #0]
 8011dac:	4637      	mov	r7, r6
 8011dae:	e599      	b.n	80118e4 <_dtoa_r+0x4b4>
 8011db0:	40240000 	.word	0x40240000
 8011db4:	9b08      	ldr	r3, [sp, #32]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	f000 80ca 	beq.w	8011f50 <_dtoa_r+0xb20>
 8011dbc:	9b03      	ldr	r3, [sp, #12]
 8011dbe:	9302      	str	r3, [sp, #8]
 8011dc0:	2d00      	cmp	r5, #0
 8011dc2:	dd05      	ble.n	8011dd0 <_dtoa_r+0x9a0>
 8011dc4:	4639      	mov	r1, r7
 8011dc6:	462a      	mov	r2, r5
 8011dc8:	4620      	mov	r0, r4
 8011dca:	f000 fc83 	bl	80126d4 <__lshift>
 8011dce:	4607      	mov	r7, r0
 8011dd0:	f1b8 0f00 	cmp.w	r8, #0
 8011dd4:	d05b      	beq.n	8011e8e <_dtoa_r+0xa5e>
 8011dd6:	6879      	ldr	r1, [r7, #4]
 8011dd8:	4620      	mov	r0, r4
 8011dda:	f000 fa69 	bl	80122b0 <_Balloc>
 8011dde:	4605      	mov	r5, r0
 8011de0:	b928      	cbnz	r0, 8011dee <_dtoa_r+0x9be>
 8011de2:	4b87      	ldr	r3, [pc, #540]	; (8012000 <_dtoa_r+0xbd0>)
 8011de4:	4602      	mov	r2, r0
 8011de6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011dea:	f7ff bb3b 	b.w	8011464 <_dtoa_r+0x34>
 8011dee:	693a      	ldr	r2, [r7, #16]
 8011df0:	3202      	adds	r2, #2
 8011df2:	0092      	lsls	r2, r2, #2
 8011df4:	f107 010c 	add.w	r1, r7, #12
 8011df8:	300c      	adds	r0, #12
 8011dfa:	f7fe fb32 	bl	8010462 <memcpy>
 8011dfe:	2201      	movs	r2, #1
 8011e00:	4629      	mov	r1, r5
 8011e02:	4620      	mov	r0, r4
 8011e04:	f000 fc66 	bl	80126d4 <__lshift>
 8011e08:	9b01      	ldr	r3, [sp, #4]
 8011e0a:	f103 0901 	add.w	r9, r3, #1
 8011e0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011e12:	4413      	add	r3, r2
 8011e14:	9305      	str	r3, [sp, #20]
 8011e16:	f00a 0301 	and.w	r3, sl, #1
 8011e1a:	46b8      	mov	r8, r7
 8011e1c:	9304      	str	r3, [sp, #16]
 8011e1e:	4607      	mov	r7, r0
 8011e20:	4631      	mov	r1, r6
 8011e22:	ee18 0a10 	vmov	r0, s16
 8011e26:	f7ff fa75 	bl	8011314 <quorem>
 8011e2a:	4641      	mov	r1, r8
 8011e2c:	9002      	str	r0, [sp, #8]
 8011e2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011e32:	ee18 0a10 	vmov	r0, s16
 8011e36:	f000 fcbd 	bl	80127b4 <__mcmp>
 8011e3a:	463a      	mov	r2, r7
 8011e3c:	9003      	str	r0, [sp, #12]
 8011e3e:	4631      	mov	r1, r6
 8011e40:	4620      	mov	r0, r4
 8011e42:	f000 fcd3 	bl	80127ec <__mdiff>
 8011e46:	68c2      	ldr	r2, [r0, #12]
 8011e48:	f109 3bff 	add.w	fp, r9, #4294967295
 8011e4c:	4605      	mov	r5, r0
 8011e4e:	bb02      	cbnz	r2, 8011e92 <_dtoa_r+0xa62>
 8011e50:	4601      	mov	r1, r0
 8011e52:	ee18 0a10 	vmov	r0, s16
 8011e56:	f000 fcad 	bl	80127b4 <__mcmp>
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	4629      	mov	r1, r5
 8011e5e:	4620      	mov	r0, r4
 8011e60:	9207      	str	r2, [sp, #28]
 8011e62:	f000 fa65 	bl	8012330 <_Bfree>
 8011e66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011e6a:	ea43 0102 	orr.w	r1, r3, r2
 8011e6e:	9b04      	ldr	r3, [sp, #16]
 8011e70:	430b      	orrs	r3, r1
 8011e72:	464d      	mov	r5, r9
 8011e74:	d10f      	bne.n	8011e96 <_dtoa_r+0xa66>
 8011e76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011e7a:	d02a      	beq.n	8011ed2 <_dtoa_r+0xaa2>
 8011e7c:	9b03      	ldr	r3, [sp, #12]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	dd02      	ble.n	8011e88 <_dtoa_r+0xa58>
 8011e82:	9b02      	ldr	r3, [sp, #8]
 8011e84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011e88:	f88b a000 	strb.w	sl, [fp]
 8011e8c:	e775      	b.n	8011d7a <_dtoa_r+0x94a>
 8011e8e:	4638      	mov	r0, r7
 8011e90:	e7ba      	b.n	8011e08 <_dtoa_r+0x9d8>
 8011e92:	2201      	movs	r2, #1
 8011e94:	e7e2      	b.n	8011e5c <_dtoa_r+0xa2c>
 8011e96:	9b03      	ldr	r3, [sp, #12]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	db04      	blt.n	8011ea6 <_dtoa_r+0xa76>
 8011e9c:	9906      	ldr	r1, [sp, #24]
 8011e9e:	430b      	orrs	r3, r1
 8011ea0:	9904      	ldr	r1, [sp, #16]
 8011ea2:	430b      	orrs	r3, r1
 8011ea4:	d122      	bne.n	8011eec <_dtoa_r+0xabc>
 8011ea6:	2a00      	cmp	r2, #0
 8011ea8:	ddee      	ble.n	8011e88 <_dtoa_r+0xa58>
 8011eaa:	ee18 1a10 	vmov	r1, s16
 8011eae:	2201      	movs	r2, #1
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	f000 fc0f 	bl	80126d4 <__lshift>
 8011eb6:	4631      	mov	r1, r6
 8011eb8:	ee08 0a10 	vmov	s16, r0
 8011ebc:	f000 fc7a 	bl	80127b4 <__mcmp>
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	dc03      	bgt.n	8011ecc <_dtoa_r+0xa9c>
 8011ec4:	d1e0      	bne.n	8011e88 <_dtoa_r+0xa58>
 8011ec6:	f01a 0f01 	tst.w	sl, #1
 8011eca:	d0dd      	beq.n	8011e88 <_dtoa_r+0xa58>
 8011ecc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011ed0:	d1d7      	bne.n	8011e82 <_dtoa_r+0xa52>
 8011ed2:	2339      	movs	r3, #57	; 0x39
 8011ed4:	f88b 3000 	strb.w	r3, [fp]
 8011ed8:	462b      	mov	r3, r5
 8011eda:	461d      	mov	r5, r3
 8011edc:	3b01      	subs	r3, #1
 8011ede:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011ee2:	2a39      	cmp	r2, #57	; 0x39
 8011ee4:	d071      	beq.n	8011fca <_dtoa_r+0xb9a>
 8011ee6:	3201      	adds	r2, #1
 8011ee8:	701a      	strb	r2, [r3, #0]
 8011eea:	e746      	b.n	8011d7a <_dtoa_r+0x94a>
 8011eec:	2a00      	cmp	r2, #0
 8011eee:	dd07      	ble.n	8011f00 <_dtoa_r+0xad0>
 8011ef0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011ef4:	d0ed      	beq.n	8011ed2 <_dtoa_r+0xaa2>
 8011ef6:	f10a 0301 	add.w	r3, sl, #1
 8011efa:	f88b 3000 	strb.w	r3, [fp]
 8011efe:	e73c      	b.n	8011d7a <_dtoa_r+0x94a>
 8011f00:	9b05      	ldr	r3, [sp, #20]
 8011f02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011f06:	4599      	cmp	r9, r3
 8011f08:	d047      	beq.n	8011f9a <_dtoa_r+0xb6a>
 8011f0a:	ee18 1a10 	vmov	r1, s16
 8011f0e:	2300      	movs	r3, #0
 8011f10:	220a      	movs	r2, #10
 8011f12:	4620      	mov	r0, r4
 8011f14:	f000 fa2e 	bl	8012374 <__multadd>
 8011f18:	45b8      	cmp	r8, r7
 8011f1a:	ee08 0a10 	vmov	s16, r0
 8011f1e:	f04f 0300 	mov.w	r3, #0
 8011f22:	f04f 020a 	mov.w	r2, #10
 8011f26:	4641      	mov	r1, r8
 8011f28:	4620      	mov	r0, r4
 8011f2a:	d106      	bne.n	8011f3a <_dtoa_r+0xb0a>
 8011f2c:	f000 fa22 	bl	8012374 <__multadd>
 8011f30:	4680      	mov	r8, r0
 8011f32:	4607      	mov	r7, r0
 8011f34:	f109 0901 	add.w	r9, r9, #1
 8011f38:	e772      	b.n	8011e20 <_dtoa_r+0x9f0>
 8011f3a:	f000 fa1b 	bl	8012374 <__multadd>
 8011f3e:	4639      	mov	r1, r7
 8011f40:	4680      	mov	r8, r0
 8011f42:	2300      	movs	r3, #0
 8011f44:	220a      	movs	r2, #10
 8011f46:	4620      	mov	r0, r4
 8011f48:	f000 fa14 	bl	8012374 <__multadd>
 8011f4c:	4607      	mov	r7, r0
 8011f4e:	e7f1      	b.n	8011f34 <_dtoa_r+0xb04>
 8011f50:	9b03      	ldr	r3, [sp, #12]
 8011f52:	9302      	str	r3, [sp, #8]
 8011f54:	9d01      	ldr	r5, [sp, #4]
 8011f56:	ee18 0a10 	vmov	r0, s16
 8011f5a:	4631      	mov	r1, r6
 8011f5c:	f7ff f9da 	bl	8011314 <quorem>
 8011f60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011f64:	9b01      	ldr	r3, [sp, #4]
 8011f66:	f805 ab01 	strb.w	sl, [r5], #1
 8011f6a:	1aea      	subs	r2, r5, r3
 8011f6c:	9b02      	ldr	r3, [sp, #8]
 8011f6e:	4293      	cmp	r3, r2
 8011f70:	dd09      	ble.n	8011f86 <_dtoa_r+0xb56>
 8011f72:	ee18 1a10 	vmov	r1, s16
 8011f76:	2300      	movs	r3, #0
 8011f78:	220a      	movs	r2, #10
 8011f7a:	4620      	mov	r0, r4
 8011f7c:	f000 f9fa 	bl	8012374 <__multadd>
 8011f80:	ee08 0a10 	vmov	s16, r0
 8011f84:	e7e7      	b.n	8011f56 <_dtoa_r+0xb26>
 8011f86:	9b02      	ldr	r3, [sp, #8]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	bfc8      	it	gt
 8011f8c:	461d      	movgt	r5, r3
 8011f8e:	9b01      	ldr	r3, [sp, #4]
 8011f90:	bfd8      	it	le
 8011f92:	2501      	movle	r5, #1
 8011f94:	441d      	add	r5, r3
 8011f96:	f04f 0800 	mov.w	r8, #0
 8011f9a:	ee18 1a10 	vmov	r1, s16
 8011f9e:	2201      	movs	r2, #1
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	f000 fb97 	bl	80126d4 <__lshift>
 8011fa6:	4631      	mov	r1, r6
 8011fa8:	ee08 0a10 	vmov	s16, r0
 8011fac:	f000 fc02 	bl	80127b4 <__mcmp>
 8011fb0:	2800      	cmp	r0, #0
 8011fb2:	dc91      	bgt.n	8011ed8 <_dtoa_r+0xaa8>
 8011fb4:	d102      	bne.n	8011fbc <_dtoa_r+0xb8c>
 8011fb6:	f01a 0f01 	tst.w	sl, #1
 8011fba:	d18d      	bne.n	8011ed8 <_dtoa_r+0xaa8>
 8011fbc:	462b      	mov	r3, r5
 8011fbe:	461d      	mov	r5, r3
 8011fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011fc4:	2a30      	cmp	r2, #48	; 0x30
 8011fc6:	d0fa      	beq.n	8011fbe <_dtoa_r+0xb8e>
 8011fc8:	e6d7      	b.n	8011d7a <_dtoa_r+0x94a>
 8011fca:	9a01      	ldr	r2, [sp, #4]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d184      	bne.n	8011eda <_dtoa_r+0xaaa>
 8011fd0:	9b00      	ldr	r3, [sp, #0]
 8011fd2:	3301      	adds	r3, #1
 8011fd4:	9300      	str	r3, [sp, #0]
 8011fd6:	2331      	movs	r3, #49	; 0x31
 8011fd8:	7013      	strb	r3, [r2, #0]
 8011fda:	e6ce      	b.n	8011d7a <_dtoa_r+0x94a>
 8011fdc:	4b09      	ldr	r3, [pc, #36]	; (8012004 <_dtoa_r+0xbd4>)
 8011fde:	f7ff ba95 	b.w	801150c <_dtoa_r+0xdc>
 8011fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	f47f aa6e 	bne.w	80114c6 <_dtoa_r+0x96>
 8011fea:	4b07      	ldr	r3, [pc, #28]	; (8012008 <_dtoa_r+0xbd8>)
 8011fec:	f7ff ba8e 	b.w	801150c <_dtoa_r+0xdc>
 8011ff0:	9b02      	ldr	r3, [sp, #8]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	dcae      	bgt.n	8011f54 <_dtoa_r+0xb24>
 8011ff6:	9b06      	ldr	r3, [sp, #24]
 8011ff8:	2b02      	cmp	r3, #2
 8011ffa:	f73f aea8 	bgt.w	8011d4e <_dtoa_r+0x91e>
 8011ffe:	e7a9      	b.n	8011f54 <_dtoa_r+0xb24>
 8012000:	08015b2b 	.word	0x08015b2b
 8012004:	08015a88 	.word	0x08015a88
 8012008:	08015aac 	.word	0x08015aac

0801200c <__sflush_r>:
 801200c:	898a      	ldrh	r2, [r1, #12]
 801200e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012012:	4605      	mov	r5, r0
 8012014:	0710      	lsls	r0, r2, #28
 8012016:	460c      	mov	r4, r1
 8012018:	d458      	bmi.n	80120cc <__sflush_r+0xc0>
 801201a:	684b      	ldr	r3, [r1, #4]
 801201c:	2b00      	cmp	r3, #0
 801201e:	dc05      	bgt.n	801202c <__sflush_r+0x20>
 8012020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012022:	2b00      	cmp	r3, #0
 8012024:	dc02      	bgt.n	801202c <__sflush_r+0x20>
 8012026:	2000      	movs	r0, #0
 8012028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801202c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801202e:	2e00      	cmp	r6, #0
 8012030:	d0f9      	beq.n	8012026 <__sflush_r+0x1a>
 8012032:	2300      	movs	r3, #0
 8012034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012038:	682f      	ldr	r7, [r5, #0]
 801203a:	602b      	str	r3, [r5, #0]
 801203c:	d032      	beq.n	80120a4 <__sflush_r+0x98>
 801203e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012040:	89a3      	ldrh	r3, [r4, #12]
 8012042:	075a      	lsls	r2, r3, #29
 8012044:	d505      	bpl.n	8012052 <__sflush_r+0x46>
 8012046:	6863      	ldr	r3, [r4, #4]
 8012048:	1ac0      	subs	r0, r0, r3
 801204a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801204c:	b10b      	cbz	r3, 8012052 <__sflush_r+0x46>
 801204e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012050:	1ac0      	subs	r0, r0, r3
 8012052:	2300      	movs	r3, #0
 8012054:	4602      	mov	r2, r0
 8012056:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012058:	6a21      	ldr	r1, [r4, #32]
 801205a:	4628      	mov	r0, r5
 801205c:	47b0      	blx	r6
 801205e:	1c43      	adds	r3, r0, #1
 8012060:	89a3      	ldrh	r3, [r4, #12]
 8012062:	d106      	bne.n	8012072 <__sflush_r+0x66>
 8012064:	6829      	ldr	r1, [r5, #0]
 8012066:	291d      	cmp	r1, #29
 8012068:	d82c      	bhi.n	80120c4 <__sflush_r+0xb8>
 801206a:	4a2a      	ldr	r2, [pc, #168]	; (8012114 <__sflush_r+0x108>)
 801206c:	40ca      	lsrs	r2, r1
 801206e:	07d6      	lsls	r6, r2, #31
 8012070:	d528      	bpl.n	80120c4 <__sflush_r+0xb8>
 8012072:	2200      	movs	r2, #0
 8012074:	6062      	str	r2, [r4, #4]
 8012076:	04d9      	lsls	r1, r3, #19
 8012078:	6922      	ldr	r2, [r4, #16]
 801207a:	6022      	str	r2, [r4, #0]
 801207c:	d504      	bpl.n	8012088 <__sflush_r+0x7c>
 801207e:	1c42      	adds	r2, r0, #1
 8012080:	d101      	bne.n	8012086 <__sflush_r+0x7a>
 8012082:	682b      	ldr	r3, [r5, #0]
 8012084:	b903      	cbnz	r3, 8012088 <__sflush_r+0x7c>
 8012086:	6560      	str	r0, [r4, #84]	; 0x54
 8012088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801208a:	602f      	str	r7, [r5, #0]
 801208c:	2900      	cmp	r1, #0
 801208e:	d0ca      	beq.n	8012026 <__sflush_r+0x1a>
 8012090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012094:	4299      	cmp	r1, r3
 8012096:	d002      	beq.n	801209e <__sflush_r+0x92>
 8012098:	4628      	mov	r0, r5
 801209a:	f000 fca3 	bl	80129e4 <_free_r>
 801209e:	2000      	movs	r0, #0
 80120a0:	6360      	str	r0, [r4, #52]	; 0x34
 80120a2:	e7c1      	b.n	8012028 <__sflush_r+0x1c>
 80120a4:	6a21      	ldr	r1, [r4, #32]
 80120a6:	2301      	movs	r3, #1
 80120a8:	4628      	mov	r0, r5
 80120aa:	47b0      	blx	r6
 80120ac:	1c41      	adds	r1, r0, #1
 80120ae:	d1c7      	bne.n	8012040 <__sflush_r+0x34>
 80120b0:	682b      	ldr	r3, [r5, #0]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d0c4      	beq.n	8012040 <__sflush_r+0x34>
 80120b6:	2b1d      	cmp	r3, #29
 80120b8:	d001      	beq.n	80120be <__sflush_r+0xb2>
 80120ba:	2b16      	cmp	r3, #22
 80120bc:	d101      	bne.n	80120c2 <__sflush_r+0xb6>
 80120be:	602f      	str	r7, [r5, #0]
 80120c0:	e7b1      	b.n	8012026 <__sflush_r+0x1a>
 80120c2:	89a3      	ldrh	r3, [r4, #12]
 80120c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120c8:	81a3      	strh	r3, [r4, #12]
 80120ca:	e7ad      	b.n	8012028 <__sflush_r+0x1c>
 80120cc:	690f      	ldr	r7, [r1, #16]
 80120ce:	2f00      	cmp	r7, #0
 80120d0:	d0a9      	beq.n	8012026 <__sflush_r+0x1a>
 80120d2:	0793      	lsls	r3, r2, #30
 80120d4:	680e      	ldr	r6, [r1, #0]
 80120d6:	bf08      	it	eq
 80120d8:	694b      	ldreq	r3, [r1, #20]
 80120da:	600f      	str	r7, [r1, #0]
 80120dc:	bf18      	it	ne
 80120de:	2300      	movne	r3, #0
 80120e0:	eba6 0807 	sub.w	r8, r6, r7
 80120e4:	608b      	str	r3, [r1, #8]
 80120e6:	f1b8 0f00 	cmp.w	r8, #0
 80120ea:	dd9c      	ble.n	8012026 <__sflush_r+0x1a>
 80120ec:	6a21      	ldr	r1, [r4, #32]
 80120ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80120f0:	4643      	mov	r3, r8
 80120f2:	463a      	mov	r2, r7
 80120f4:	4628      	mov	r0, r5
 80120f6:	47b0      	blx	r6
 80120f8:	2800      	cmp	r0, #0
 80120fa:	dc06      	bgt.n	801210a <__sflush_r+0xfe>
 80120fc:	89a3      	ldrh	r3, [r4, #12]
 80120fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012102:	81a3      	strh	r3, [r4, #12]
 8012104:	f04f 30ff 	mov.w	r0, #4294967295
 8012108:	e78e      	b.n	8012028 <__sflush_r+0x1c>
 801210a:	4407      	add	r7, r0
 801210c:	eba8 0800 	sub.w	r8, r8, r0
 8012110:	e7e9      	b.n	80120e6 <__sflush_r+0xda>
 8012112:	bf00      	nop
 8012114:	20400001 	.word	0x20400001

08012118 <_fflush_r>:
 8012118:	b538      	push	{r3, r4, r5, lr}
 801211a:	690b      	ldr	r3, [r1, #16]
 801211c:	4605      	mov	r5, r0
 801211e:	460c      	mov	r4, r1
 8012120:	b913      	cbnz	r3, 8012128 <_fflush_r+0x10>
 8012122:	2500      	movs	r5, #0
 8012124:	4628      	mov	r0, r5
 8012126:	bd38      	pop	{r3, r4, r5, pc}
 8012128:	b118      	cbz	r0, 8012132 <_fflush_r+0x1a>
 801212a:	6983      	ldr	r3, [r0, #24]
 801212c:	b90b      	cbnz	r3, 8012132 <_fflush_r+0x1a>
 801212e:	f7fe f8d3 	bl	80102d8 <__sinit>
 8012132:	4b14      	ldr	r3, [pc, #80]	; (8012184 <_fflush_r+0x6c>)
 8012134:	429c      	cmp	r4, r3
 8012136:	d11b      	bne.n	8012170 <_fflush_r+0x58>
 8012138:	686c      	ldr	r4, [r5, #4]
 801213a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d0ef      	beq.n	8012122 <_fflush_r+0xa>
 8012142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012144:	07d0      	lsls	r0, r2, #31
 8012146:	d404      	bmi.n	8012152 <_fflush_r+0x3a>
 8012148:	0599      	lsls	r1, r3, #22
 801214a:	d402      	bmi.n	8012152 <_fflush_r+0x3a>
 801214c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801214e:	f7fe f986 	bl	801045e <__retarget_lock_acquire_recursive>
 8012152:	4628      	mov	r0, r5
 8012154:	4621      	mov	r1, r4
 8012156:	f7ff ff59 	bl	801200c <__sflush_r>
 801215a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801215c:	07da      	lsls	r2, r3, #31
 801215e:	4605      	mov	r5, r0
 8012160:	d4e0      	bmi.n	8012124 <_fflush_r+0xc>
 8012162:	89a3      	ldrh	r3, [r4, #12]
 8012164:	059b      	lsls	r3, r3, #22
 8012166:	d4dd      	bmi.n	8012124 <_fflush_r+0xc>
 8012168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801216a:	f7fe f979 	bl	8010460 <__retarget_lock_release_recursive>
 801216e:	e7d9      	b.n	8012124 <_fflush_r+0xc>
 8012170:	4b05      	ldr	r3, [pc, #20]	; (8012188 <_fflush_r+0x70>)
 8012172:	429c      	cmp	r4, r3
 8012174:	d101      	bne.n	801217a <_fflush_r+0x62>
 8012176:	68ac      	ldr	r4, [r5, #8]
 8012178:	e7df      	b.n	801213a <_fflush_r+0x22>
 801217a:	4b04      	ldr	r3, [pc, #16]	; (801218c <_fflush_r+0x74>)
 801217c:	429c      	cmp	r4, r3
 801217e:	bf08      	it	eq
 8012180:	68ec      	ldreq	r4, [r5, #12]
 8012182:	e7da      	b.n	801213a <_fflush_r+0x22>
 8012184:	08015a34 	.word	0x08015a34
 8012188:	08015a54 	.word	0x08015a54
 801218c:	08015a14 	.word	0x08015a14

08012190 <_localeconv_r>:
 8012190:	4800      	ldr	r0, [pc, #0]	; (8012194 <_localeconv_r+0x4>)
 8012192:	4770      	bx	lr
 8012194:	200001f4 	.word	0x200001f4

08012198 <_lseek_r>:
 8012198:	b538      	push	{r3, r4, r5, lr}
 801219a:	4d07      	ldr	r5, [pc, #28]	; (80121b8 <_lseek_r+0x20>)
 801219c:	4604      	mov	r4, r0
 801219e:	4608      	mov	r0, r1
 80121a0:	4611      	mov	r1, r2
 80121a2:	2200      	movs	r2, #0
 80121a4:	602a      	str	r2, [r5, #0]
 80121a6:	461a      	mov	r2, r3
 80121a8:	f7f3 ff96 	bl	80060d8 <_lseek>
 80121ac:	1c43      	adds	r3, r0, #1
 80121ae:	d102      	bne.n	80121b6 <_lseek_r+0x1e>
 80121b0:	682b      	ldr	r3, [r5, #0]
 80121b2:	b103      	cbz	r3, 80121b6 <_lseek_r+0x1e>
 80121b4:	6023      	str	r3, [r4, #0]
 80121b6:	bd38      	pop	{r3, r4, r5, pc}
 80121b8:	20005b68 	.word	0x20005b68

080121bc <__swhatbuf_r>:
 80121bc:	b570      	push	{r4, r5, r6, lr}
 80121be:	460e      	mov	r6, r1
 80121c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121c4:	2900      	cmp	r1, #0
 80121c6:	b096      	sub	sp, #88	; 0x58
 80121c8:	4614      	mov	r4, r2
 80121ca:	461d      	mov	r5, r3
 80121cc:	da08      	bge.n	80121e0 <__swhatbuf_r+0x24>
 80121ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80121d2:	2200      	movs	r2, #0
 80121d4:	602a      	str	r2, [r5, #0]
 80121d6:	061a      	lsls	r2, r3, #24
 80121d8:	d410      	bmi.n	80121fc <__swhatbuf_r+0x40>
 80121da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121de:	e00e      	b.n	80121fe <__swhatbuf_r+0x42>
 80121e0:	466a      	mov	r2, sp
 80121e2:	f000 fe2f 	bl	8012e44 <_fstat_r>
 80121e6:	2800      	cmp	r0, #0
 80121e8:	dbf1      	blt.n	80121ce <__swhatbuf_r+0x12>
 80121ea:	9a01      	ldr	r2, [sp, #4]
 80121ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80121f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80121f4:	425a      	negs	r2, r3
 80121f6:	415a      	adcs	r2, r3
 80121f8:	602a      	str	r2, [r5, #0]
 80121fa:	e7ee      	b.n	80121da <__swhatbuf_r+0x1e>
 80121fc:	2340      	movs	r3, #64	; 0x40
 80121fe:	2000      	movs	r0, #0
 8012200:	6023      	str	r3, [r4, #0]
 8012202:	b016      	add	sp, #88	; 0x58
 8012204:	bd70      	pop	{r4, r5, r6, pc}
	...

08012208 <__smakebuf_r>:
 8012208:	898b      	ldrh	r3, [r1, #12]
 801220a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801220c:	079d      	lsls	r5, r3, #30
 801220e:	4606      	mov	r6, r0
 8012210:	460c      	mov	r4, r1
 8012212:	d507      	bpl.n	8012224 <__smakebuf_r+0x1c>
 8012214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012218:	6023      	str	r3, [r4, #0]
 801221a:	6123      	str	r3, [r4, #16]
 801221c:	2301      	movs	r3, #1
 801221e:	6163      	str	r3, [r4, #20]
 8012220:	b002      	add	sp, #8
 8012222:	bd70      	pop	{r4, r5, r6, pc}
 8012224:	ab01      	add	r3, sp, #4
 8012226:	466a      	mov	r2, sp
 8012228:	f7ff ffc8 	bl	80121bc <__swhatbuf_r>
 801222c:	9900      	ldr	r1, [sp, #0]
 801222e:	4605      	mov	r5, r0
 8012230:	4630      	mov	r0, r6
 8012232:	f7fe f94d 	bl	80104d0 <_malloc_r>
 8012236:	b948      	cbnz	r0, 801224c <__smakebuf_r+0x44>
 8012238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801223c:	059a      	lsls	r2, r3, #22
 801223e:	d4ef      	bmi.n	8012220 <__smakebuf_r+0x18>
 8012240:	f023 0303 	bic.w	r3, r3, #3
 8012244:	f043 0302 	orr.w	r3, r3, #2
 8012248:	81a3      	strh	r3, [r4, #12]
 801224a:	e7e3      	b.n	8012214 <__smakebuf_r+0xc>
 801224c:	4b0d      	ldr	r3, [pc, #52]	; (8012284 <__smakebuf_r+0x7c>)
 801224e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012250:	89a3      	ldrh	r3, [r4, #12]
 8012252:	6020      	str	r0, [r4, #0]
 8012254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012258:	81a3      	strh	r3, [r4, #12]
 801225a:	9b00      	ldr	r3, [sp, #0]
 801225c:	6163      	str	r3, [r4, #20]
 801225e:	9b01      	ldr	r3, [sp, #4]
 8012260:	6120      	str	r0, [r4, #16]
 8012262:	b15b      	cbz	r3, 801227c <__smakebuf_r+0x74>
 8012264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012268:	4630      	mov	r0, r6
 801226a:	f000 fdfd 	bl	8012e68 <_isatty_r>
 801226e:	b128      	cbz	r0, 801227c <__smakebuf_r+0x74>
 8012270:	89a3      	ldrh	r3, [r4, #12]
 8012272:	f023 0303 	bic.w	r3, r3, #3
 8012276:	f043 0301 	orr.w	r3, r3, #1
 801227a:	81a3      	strh	r3, [r4, #12]
 801227c:	89a0      	ldrh	r0, [r4, #12]
 801227e:	4305      	orrs	r5, r0
 8012280:	81a5      	strh	r5, [r4, #12]
 8012282:	e7cd      	b.n	8012220 <__smakebuf_r+0x18>
 8012284:	08010271 	.word	0x08010271

08012288 <malloc>:
 8012288:	4b02      	ldr	r3, [pc, #8]	; (8012294 <malloc+0xc>)
 801228a:	4601      	mov	r1, r0
 801228c:	6818      	ldr	r0, [r3, #0]
 801228e:	f7fe b91f 	b.w	80104d0 <_malloc_r>
 8012292:	bf00      	nop
 8012294:	200000a0 	.word	0x200000a0

08012298 <__malloc_lock>:
 8012298:	4801      	ldr	r0, [pc, #4]	; (80122a0 <__malloc_lock+0x8>)
 801229a:	f7fe b8e0 	b.w	801045e <__retarget_lock_acquire_recursive>
 801229e:	bf00      	nop
 80122a0:	20005b5c 	.word	0x20005b5c

080122a4 <__malloc_unlock>:
 80122a4:	4801      	ldr	r0, [pc, #4]	; (80122ac <__malloc_unlock+0x8>)
 80122a6:	f7fe b8db 	b.w	8010460 <__retarget_lock_release_recursive>
 80122aa:	bf00      	nop
 80122ac:	20005b5c 	.word	0x20005b5c

080122b0 <_Balloc>:
 80122b0:	b570      	push	{r4, r5, r6, lr}
 80122b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80122b4:	4604      	mov	r4, r0
 80122b6:	460d      	mov	r5, r1
 80122b8:	b976      	cbnz	r6, 80122d8 <_Balloc+0x28>
 80122ba:	2010      	movs	r0, #16
 80122bc:	f7ff ffe4 	bl	8012288 <malloc>
 80122c0:	4602      	mov	r2, r0
 80122c2:	6260      	str	r0, [r4, #36]	; 0x24
 80122c4:	b920      	cbnz	r0, 80122d0 <_Balloc+0x20>
 80122c6:	4b18      	ldr	r3, [pc, #96]	; (8012328 <_Balloc+0x78>)
 80122c8:	4818      	ldr	r0, [pc, #96]	; (801232c <_Balloc+0x7c>)
 80122ca:	2166      	movs	r1, #102	; 0x66
 80122cc:	f000 fd8a 	bl	8012de4 <__assert_func>
 80122d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80122d4:	6006      	str	r6, [r0, #0]
 80122d6:	60c6      	str	r6, [r0, #12]
 80122d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80122da:	68f3      	ldr	r3, [r6, #12]
 80122dc:	b183      	cbz	r3, 8012300 <_Balloc+0x50>
 80122de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122e0:	68db      	ldr	r3, [r3, #12]
 80122e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80122e6:	b9b8      	cbnz	r0, 8012318 <_Balloc+0x68>
 80122e8:	2101      	movs	r1, #1
 80122ea:	fa01 f605 	lsl.w	r6, r1, r5
 80122ee:	1d72      	adds	r2, r6, #5
 80122f0:	0092      	lsls	r2, r2, #2
 80122f2:	4620      	mov	r0, r4
 80122f4:	f000 fb60 	bl	80129b8 <_calloc_r>
 80122f8:	b160      	cbz	r0, 8012314 <_Balloc+0x64>
 80122fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80122fe:	e00e      	b.n	801231e <_Balloc+0x6e>
 8012300:	2221      	movs	r2, #33	; 0x21
 8012302:	2104      	movs	r1, #4
 8012304:	4620      	mov	r0, r4
 8012306:	f000 fb57 	bl	80129b8 <_calloc_r>
 801230a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801230c:	60f0      	str	r0, [r6, #12]
 801230e:	68db      	ldr	r3, [r3, #12]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d1e4      	bne.n	80122de <_Balloc+0x2e>
 8012314:	2000      	movs	r0, #0
 8012316:	bd70      	pop	{r4, r5, r6, pc}
 8012318:	6802      	ldr	r2, [r0, #0]
 801231a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801231e:	2300      	movs	r3, #0
 8012320:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012324:	e7f7      	b.n	8012316 <_Balloc+0x66>
 8012326:	bf00      	nop
 8012328:	08015ab9 	.word	0x08015ab9
 801232c:	08015b3c 	.word	0x08015b3c

08012330 <_Bfree>:
 8012330:	b570      	push	{r4, r5, r6, lr}
 8012332:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012334:	4605      	mov	r5, r0
 8012336:	460c      	mov	r4, r1
 8012338:	b976      	cbnz	r6, 8012358 <_Bfree+0x28>
 801233a:	2010      	movs	r0, #16
 801233c:	f7ff ffa4 	bl	8012288 <malloc>
 8012340:	4602      	mov	r2, r0
 8012342:	6268      	str	r0, [r5, #36]	; 0x24
 8012344:	b920      	cbnz	r0, 8012350 <_Bfree+0x20>
 8012346:	4b09      	ldr	r3, [pc, #36]	; (801236c <_Bfree+0x3c>)
 8012348:	4809      	ldr	r0, [pc, #36]	; (8012370 <_Bfree+0x40>)
 801234a:	218a      	movs	r1, #138	; 0x8a
 801234c:	f000 fd4a 	bl	8012de4 <__assert_func>
 8012350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012354:	6006      	str	r6, [r0, #0]
 8012356:	60c6      	str	r6, [r0, #12]
 8012358:	b13c      	cbz	r4, 801236a <_Bfree+0x3a>
 801235a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801235c:	6862      	ldr	r2, [r4, #4]
 801235e:	68db      	ldr	r3, [r3, #12]
 8012360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012364:	6021      	str	r1, [r4, #0]
 8012366:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801236a:	bd70      	pop	{r4, r5, r6, pc}
 801236c:	08015ab9 	.word	0x08015ab9
 8012370:	08015b3c 	.word	0x08015b3c

08012374 <__multadd>:
 8012374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012378:	690d      	ldr	r5, [r1, #16]
 801237a:	4607      	mov	r7, r0
 801237c:	460c      	mov	r4, r1
 801237e:	461e      	mov	r6, r3
 8012380:	f101 0c14 	add.w	ip, r1, #20
 8012384:	2000      	movs	r0, #0
 8012386:	f8dc 3000 	ldr.w	r3, [ip]
 801238a:	b299      	uxth	r1, r3
 801238c:	fb02 6101 	mla	r1, r2, r1, r6
 8012390:	0c1e      	lsrs	r6, r3, #16
 8012392:	0c0b      	lsrs	r3, r1, #16
 8012394:	fb02 3306 	mla	r3, r2, r6, r3
 8012398:	b289      	uxth	r1, r1
 801239a:	3001      	adds	r0, #1
 801239c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80123a0:	4285      	cmp	r5, r0
 80123a2:	f84c 1b04 	str.w	r1, [ip], #4
 80123a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80123aa:	dcec      	bgt.n	8012386 <__multadd+0x12>
 80123ac:	b30e      	cbz	r6, 80123f2 <__multadd+0x7e>
 80123ae:	68a3      	ldr	r3, [r4, #8]
 80123b0:	42ab      	cmp	r3, r5
 80123b2:	dc19      	bgt.n	80123e8 <__multadd+0x74>
 80123b4:	6861      	ldr	r1, [r4, #4]
 80123b6:	4638      	mov	r0, r7
 80123b8:	3101      	adds	r1, #1
 80123ba:	f7ff ff79 	bl	80122b0 <_Balloc>
 80123be:	4680      	mov	r8, r0
 80123c0:	b928      	cbnz	r0, 80123ce <__multadd+0x5a>
 80123c2:	4602      	mov	r2, r0
 80123c4:	4b0c      	ldr	r3, [pc, #48]	; (80123f8 <__multadd+0x84>)
 80123c6:	480d      	ldr	r0, [pc, #52]	; (80123fc <__multadd+0x88>)
 80123c8:	21b5      	movs	r1, #181	; 0xb5
 80123ca:	f000 fd0b 	bl	8012de4 <__assert_func>
 80123ce:	6922      	ldr	r2, [r4, #16]
 80123d0:	3202      	adds	r2, #2
 80123d2:	f104 010c 	add.w	r1, r4, #12
 80123d6:	0092      	lsls	r2, r2, #2
 80123d8:	300c      	adds	r0, #12
 80123da:	f7fe f842 	bl	8010462 <memcpy>
 80123de:	4621      	mov	r1, r4
 80123e0:	4638      	mov	r0, r7
 80123e2:	f7ff ffa5 	bl	8012330 <_Bfree>
 80123e6:	4644      	mov	r4, r8
 80123e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80123ec:	3501      	adds	r5, #1
 80123ee:	615e      	str	r6, [r3, #20]
 80123f0:	6125      	str	r5, [r4, #16]
 80123f2:	4620      	mov	r0, r4
 80123f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123f8:	08015b2b 	.word	0x08015b2b
 80123fc:	08015b3c 	.word	0x08015b3c

08012400 <__hi0bits>:
 8012400:	0c03      	lsrs	r3, r0, #16
 8012402:	041b      	lsls	r3, r3, #16
 8012404:	b9d3      	cbnz	r3, 801243c <__hi0bits+0x3c>
 8012406:	0400      	lsls	r0, r0, #16
 8012408:	2310      	movs	r3, #16
 801240a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801240e:	bf04      	itt	eq
 8012410:	0200      	lsleq	r0, r0, #8
 8012412:	3308      	addeq	r3, #8
 8012414:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012418:	bf04      	itt	eq
 801241a:	0100      	lsleq	r0, r0, #4
 801241c:	3304      	addeq	r3, #4
 801241e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012422:	bf04      	itt	eq
 8012424:	0080      	lsleq	r0, r0, #2
 8012426:	3302      	addeq	r3, #2
 8012428:	2800      	cmp	r0, #0
 801242a:	db05      	blt.n	8012438 <__hi0bits+0x38>
 801242c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012430:	f103 0301 	add.w	r3, r3, #1
 8012434:	bf08      	it	eq
 8012436:	2320      	moveq	r3, #32
 8012438:	4618      	mov	r0, r3
 801243a:	4770      	bx	lr
 801243c:	2300      	movs	r3, #0
 801243e:	e7e4      	b.n	801240a <__hi0bits+0xa>

08012440 <__lo0bits>:
 8012440:	6803      	ldr	r3, [r0, #0]
 8012442:	f013 0207 	ands.w	r2, r3, #7
 8012446:	4601      	mov	r1, r0
 8012448:	d00b      	beq.n	8012462 <__lo0bits+0x22>
 801244a:	07da      	lsls	r2, r3, #31
 801244c:	d423      	bmi.n	8012496 <__lo0bits+0x56>
 801244e:	0798      	lsls	r0, r3, #30
 8012450:	bf49      	itett	mi
 8012452:	085b      	lsrmi	r3, r3, #1
 8012454:	089b      	lsrpl	r3, r3, #2
 8012456:	2001      	movmi	r0, #1
 8012458:	600b      	strmi	r3, [r1, #0]
 801245a:	bf5c      	itt	pl
 801245c:	600b      	strpl	r3, [r1, #0]
 801245e:	2002      	movpl	r0, #2
 8012460:	4770      	bx	lr
 8012462:	b298      	uxth	r0, r3
 8012464:	b9a8      	cbnz	r0, 8012492 <__lo0bits+0x52>
 8012466:	0c1b      	lsrs	r3, r3, #16
 8012468:	2010      	movs	r0, #16
 801246a:	b2da      	uxtb	r2, r3
 801246c:	b90a      	cbnz	r2, 8012472 <__lo0bits+0x32>
 801246e:	3008      	adds	r0, #8
 8012470:	0a1b      	lsrs	r3, r3, #8
 8012472:	071a      	lsls	r2, r3, #28
 8012474:	bf04      	itt	eq
 8012476:	091b      	lsreq	r3, r3, #4
 8012478:	3004      	addeq	r0, #4
 801247a:	079a      	lsls	r2, r3, #30
 801247c:	bf04      	itt	eq
 801247e:	089b      	lsreq	r3, r3, #2
 8012480:	3002      	addeq	r0, #2
 8012482:	07da      	lsls	r2, r3, #31
 8012484:	d403      	bmi.n	801248e <__lo0bits+0x4e>
 8012486:	085b      	lsrs	r3, r3, #1
 8012488:	f100 0001 	add.w	r0, r0, #1
 801248c:	d005      	beq.n	801249a <__lo0bits+0x5a>
 801248e:	600b      	str	r3, [r1, #0]
 8012490:	4770      	bx	lr
 8012492:	4610      	mov	r0, r2
 8012494:	e7e9      	b.n	801246a <__lo0bits+0x2a>
 8012496:	2000      	movs	r0, #0
 8012498:	4770      	bx	lr
 801249a:	2020      	movs	r0, #32
 801249c:	4770      	bx	lr
	...

080124a0 <__i2b>:
 80124a0:	b510      	push	{r4, lr}
 80124a2:	460c      	mov	r4, r1
 80124a4:	2101      	movs	r1, #1
 80124a6:	f7ff ff03 	bl	80122b0 <_Balloc>
 80124aa:	4602      	mov	r2, r0
 80124ac:	b928      	cbnz	r0, 80124ba <__i2b+0x1a>
 80124ae:	4b05      	ldr	r3, [pc, #20]	; (80124c4 <__i2b+0x24>)
 80124b0:	4805      	ldr	r0, [pc, #20]	; (80124c8 <__i2b+0x28>)
 80124b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80124b6:	f000 fc95 	bl	8012de4 <__assert_func>
 80124ba:	2301      	movs	r3, #1
 80124bc:	6144      	str	r4, [r0, #20]
 80124be:	6103      	str	r3, [r0, #16]
 80124c0:	bd10      	pop	{r4, pc}
 80124c2:	bf00      	nop
 80124c4:	08015b2b 	.word	0x08015b2b
 80124c8:	08015b3c 	.word	0x08015b3c

080124cc <__multiply>:
 80124cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d0:	4691      	mov	r9, r2
 80124d2:	690a      	ldr	r2, [r1, #16]
 80124d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80124d8:	429a      	cmp	r2, r3
 80124da:	bfb8      	it	lt
 80124dc:	460b      	movlt	r3, r1
 80124de:	460c      	mov	r4, r1
 80124e0:	bfbc      	itt	lt
 80124e2:	464c      	movlt	r4, r9
 80124e4:	4699      	movlt	r9, r3
 80124e6:	6927      	ldr	r7, [r4, #16]
 80124e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80124ec:	68a3      	ldr	r3, [r4, #8]
 80124ee:	6861      	ldr	r1, [r4, #4]
 80124f0:	eb07 060a 	add.w	r6, r7, sl
 80124f4:	42b3      	cmp	r3, r6
 80124f6:	b085      	sub	sp, #20
 80124f8:	bfb8      	it	lt
 80124fa:	3101      	addlt	r1, #1
 80124fc:	f7ff fed8 	bl	80122b0 <_Balloc>
 8012500:	b930      	cbnz	r0, 8012510 <__multiply+0x44>
 8012502:	4602      	mov	r2, r0
 8012504:	4b44      	ldr	r3, [pc, #272]	; (8012618 <__multiply+0x14c>)
 8012506:	4845      	ldr	r0, [pc, #276]	; (801261c <__multiply+0x150>)
 8012508:	f240 115d 	movw	r1, #349	; 0x15d
 801250c:	f000 fc6a 	bl	8012de4 <__assert_func>
 8012510:	f100 0514 	add.w	r5, r0, #20
 8012514:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012518:	462b      	mov	r3, r5
 801251a:	2200      	movs	r2, #0
 801251c:	4543      	cmp	r3, r8
 801251e:	d321      	bcc.n	8012564 <__multiply+0x98>
 8012520:	f104 0314 	add.w	r3, r4, #20
 8012524:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012528:	f109 0314 	add.w	r3, r9, #20
 801252c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012530:	9202      	str	r2, [sp, #8]
 8012532:	1b3a      	subs	r2, r7, r4
 8012534:	3a15      	subs	r2, #21
 8012536:	f022 0203 	bic.w	r2, r2, #3
 801253a:	3204      	adds	r2, #4
 801253c:	f104 0115 	add.w	r1, r4, #21
 8012540:	428f      	cmp	r7, r1
 8012542:	bf38      	it	cc
 8012544:	2204      	movcc	r2, #4
 8012546:	9201      	str	r2, [sp, #4]
 8012548:	9a02      	ldr	r2, [sp, #8]
 801254a:	9303      	str	r3, [sp, #12]
 801254c:	429a      	cmp	r2, r3
 801254e:	d80c      	bhi.n	801256a <__multiply+0x9e>
 8012550:	2e00      	cmp	r6, #0
 8012552:	dd03      	ble.n	801255c <__multiply+0x90>
 8012554:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012558:	2b00      	cmp	r3, #0
 801255a:	d05a      	beq.n	8012612 <__multiply+0x146>
 801255c:	6106      	str	r6, [r0, #16]
 801255e:	b005      	add	sp, #20
 8012560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012564:	f843 2b04 	str.w	r2, [r3], #4
 8012568:	e7d8      	b.n	801251c <__multiply+0x50>
 801256a:	f8b3 a000 	ldrh.w	sl, [r3]
 801256e:	f1ba 0f00 	cmp.w	sl, #0
 8012572:	d024      	beq.n	80125be <__multiply+0xf2>
 8012574:	f104 0e14 	add.w	lr, r4, #20
 8012578:	46a9      	mov	r9, r5
 801257a:	f04f 0c00 	mov.w	ip, #0
 801257e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012582:	f8d9 1000 	ldr.w	r1, [r9]
 8012586:	fa1f fb82 	uxth.w	fp, r2
 801258a:	b289      	uxth	r1, r1
 801258c:	fb0a 110b 	mla	r1, sl, fp, r1
 8012590:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012594:	f8d9 2000 	ldr.w	r2, [r9]
 8012598:	4461      	add	r1, ip
 801259a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801259e:	fb0a c20b 	mla	r2, sl, fp, ip
 80125a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80125a6:	b289      	uxth	r1, r1
 80125a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80125ac:	4577      	cmp	r7, lr
 80125ae:	f849 1b04 	str.w	r1, [r9], #4
 80125b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80125b6:	d8e2      	bhi.n	801257e <__multiply+0xb2>
 80125b8:	9a01      	ldr	r2, [sp, #4]
 80125ba:	f845 c002 	str.w	ip, [r5, r2]
 80125be:	9a03      	ldr	r2, [sp, #12]
 80125c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80125c4:	3304      	adds	r3, #4
 80125c6:	f1b9 0f00 	cmp.w	r9, #0
 80125ca:	d020      	beq.n	801260e <__multiply+0x142>
 80125cc:	6829      	ldr	r1, [r5, #0]
 80125ce:	f104 0c14 	add.w	ip, r4, #20
 80125d2:	46ae      	mov	lr, r5
 80125d4:	f04f 0a00 	mov.w	sl, #0
 80125d8:	f8bc b000 	ldrh.w	fp, [ip]
 80125dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80125e0:	fb09 220b 	mla	r2, r9, fp, r2
 80125e4:	4492      	add	sl, r2
 80125e6:	b289      	uxth	r1, r1
 80125e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80125ec:	f84e 1b04 	str.w	r1, [lr], #4
 80125f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80125f4:	f8be 1000 	ldrh.w	r1, [lr]
 80125f8:	0c12      	lsrs	r2, r2, #16
 80125fa:	fb09 1102 	mla	r1, r9, r2, r1
 80125fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012602:	4567      	cmp	r7, ip
 8012604:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012608:	d8e6      	bhi.n	80125d8 <__multiply+0x10c>
 801260a:	9a01      	ldr	r2, [sp, #4]
 801260c:	50a9      	str	r1, [r5, r2]
 801260e:	3504      	adds	r5, #4
 8012610:	e79a      	b.n	8012548 <__multiply+0x7c>
 8012612:	3e01      	subs	r6, #1
 8012614:	e79c      	b.n	8012550 <__multiply+0x84>
 8012616:	bf00      	nop
 8012618:	08015b2b 	.word	0x08015b2b
 801261c:	08015b3c 	.word	0x08015b3c

08012620 <__pow5mult>:
 8012620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012624:	4615      	mov	r5, r2
 8012626:	f012 0203 	ands.w	r2, r2, #3
 801262a:	4606      	mov	r6, r0
 801262c:	460f      	mov	r7, r1
 801262e:	d007      	beq.n	8012640 <__pow5mult+0x20>
 8012630:	4c25      	ldr	r4, [pc, #148]	; (80126c8 <__pow5mult+0xa8>)
 8012632:	3a01      	subs	r2, #1
 8012634:	2300      	movs	r3, #0
 8012636:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801263a:	f7ff fe9b 	bl	8012374 <__multadd>
 801263e:	4607      	mov	r7, r0
 8012640:	10ad      	asrs	r5, r5, #2
 8012642:	d03d      	beq.n	80126c0 <__pow5mult+0xa0>
 8012644:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012646:	b97c      	cbnz	r4, 8012668 <__pow5mult+0x48>
 8012648:	2010      	movs	r0, #16
 801264a:	f7ff fe1d 	bl	8012288 <malloc>
 801264e:	4602      	mov	r2, r0
 8012650:	6270      	str	r0, [r6, #36]	; 0x24
 8012652:	b928      	cbnz	r0, 8012660 <__pow5mult+0x40>
 8012654:	4b1d      	ldr	r3, [pc, #116]	; (80126cc <__pow5mult+0xac>)
 8012656:	481e      	ldr	r0, [pc, #120]	; (80126d0 <__pow5mult+0xb0>)
 8012658:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801265c:	f000 fbc2 	bl	8012de4 <__assert_func>
 8012660:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012664:	6004      	str	r4, [r0, #0]
 8012666:	60c4      	str	r4, [r0, #12]
 8012668:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801266c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012670:	b94c      	cbnz	r4, 8012686 <__pow5mult+0x66>
 8012672:	f240 2171 	movw	r1, #625	; 0x271
 8012676:	4630      	mov	r0, r6
 8012678:	f7ff ff12 	bl	80124a0 <__i2b>
 801267c:	2300      	movs	r3, #0
 801267e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012682:	4604      	mov	r4, r0
 8012684:	6003      	str	r3, [r0, #0]
 8012686:	f04f 0900 	mov.w	r9, #0
 801268a:	07eb      	lsls	r3, r5, #31
 801268c:	d50a      	bpl.n	80126a4 <__pow5mult+0x84>
 801268e:	4639      	mov	r1, r7
 8012690:	4622      	mov	r2, r4
 8012692:	4630      	mov	r0, r6
 8012694:	f7ff ff1a 	bl	80124cc <__multiply>
 8012698:	4639      	mov	r1, r7
 801269a:	4680      	mov	r8, r0
 801269c:	4630      	mov	r0, r6
 801269e:	f7ff fe47 	bl	8012330 <_Bfree>
 80126a2:	4647      	mov	r7, r8
 80126a4:	106d      	asrs	r5, r5, #1
 80126a6:	d00b      	beq.n	80126c0 <__pow5mult+0xa0>
 80126a8:	6820      	ldr	r0, [r4, #0]
 80126aa:	b938      	cbnz	r0, 80126bc <__pow5mult+0x9c>
 80126ac:	4622      	mov	r2, r4
 80126ae:	4621      	mov	r1, r4
 80126b0:	4630      	mov	r0, r6
 80126b2:	f7ff ff0b 	bl	80124cc <__multiply>
 80126b6:	6020      	str	r0, [r4, #0]
 80126b8:	f8c0 9000 	str.w	r9, [r0]
 80126bc:	4604      	mov	r4, r0
 80126be:	e7e4      	b.n	801268a <__pow5mult+0x6a>
 80126c0:	4638      	mov	r0, r7
 80126c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126c6:	bf00      	nop
 80126c8:	08015c88 	.word	0x08015c88
 80126cc:	08015ab9 	.word	0x08015ab9
 80126d0:	08015b3c 	.word	0x08015b3c

080126d4 <__lshift>:
 80126d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126d8:	460c      	mov	r4, r1
 80126da:	6849      	ldr	r1, [r1, #4]
 80126dc:	6923      	ldr	r3, [r4, #16]
 80126de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80126e2:	68a3      	ldr	r3, [r4, #8]
 80126e4:	4607      	mov	r7, r0
 80126e6:	4691      	mov	r9, r2
 80126e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80126ec:	f108 0601 	add.w	r6, r8, #1
 80126f0:	42b3      	cmp	r3, r6
 80126f2:	db0b      	blt.n	801270c <__lshift+0x38>
 80126f4:	4638      	mov	r0, r7
 80126f6:	f7ff fddb 	bl	80122b0 <_Balloc>
 80126fa:	4605      	mov	r5, r0
 80126fc:	b948      	cbnz	r0, 8012712 <__lshift+0x3e>
 80126fe:	4602      	mov	r2, r0
 8012700:	4b2a      	ldr	r3, [pc, #168]	; (80127ac <__lshift+0xd8>)
 8012702:	482b      	ldr	r0, [pc, #172]	; (80127b0 <__lshift+0xdc>)
 8012704:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012708:	f000 fb6c 	bl	8012de4 <__assert_func>
 801270c:	3101      	adds	r1, #1
 801270e:	005b      	lsls	r3, r3, #1
 8012710:	e7ee      	b.n	80126f0 <__lshift+0x1c>
 8012712:	2300      	movs	r3, #0
 8012714:	f100 0114 	add.w	r1, r0, #20
 8012718:	f100 0210 	add.w	r2, r0, #16
 801271c:	4618      	mov	r0, r3
 801271e:	4553      	cmp	r3, sl
 8012720:	db37      	blt.n	8012792 <__lshift+0xbe>
 8012722:	6920      	ldr	r0, [r4, #16]
 8012724:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012728:	f104 0314 	add.w	r3, r4, #20
 801272c:	f019 091f 	ands.w	r9, r9, #31
 8012730:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012734:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012738:	d02f      	beq.n	801279a <__lshift+0xc6>
 801273a:	f1c9 0e20 	rsb	lr, r9, #32
 801273e:	468a      	mov	sl, r1
 8012740:	f04f 0c00 	mov.w	ip, #0
 8012744:	681a      	ldr	r2, [r3, #0]
 8012746:	fa02 f209 	lsl.w	r2, r2, r9
 801274a:	ea42 020c 	orr.w	r2, r2, ip
 801274e:	f84a 2b04 	str.w	r2, [sl], #4
 8012752:	f853 2b04 	ldr.w	r2, [r3], #4
 8012756:	4298      	cmp	r0, r3
 8012758:	fa22 fc0e 	lsr.w	ip, r2, lr
 801275c:	d8f2      	bhi.n	8012744 <__lshift+0x70>
 801275e:	1b03      	subs	r3, r0, r4
 8012760:	3b15      	subs	r3, #21
 8012762:	f023 0303 	bic.w	r3, r3, #3
 8012766:	3304      	adds	r3, #4
 8012768:	f104 0215 	add.w	r2, r4, #21
 801276c:	4290      	cmp	r0, r2
 801276e:	bf38      	it	cc
 8012770:	2304      	movcc	r3, #4
 8012772:	f841 c003 	str.w	ip, [r1, r3]
 8012776:	f1bc 0f00 	cmp.w	ip, #0
 801277a:	d001      	beq.n	8012780 <__lshift+0xac>
 801277c:	f108 0602 	add.w	r6, r8, #2
 8012780:	3e01      	subs	r6, #1
 8012782:	4638      	mov	r0, r7
 8012784:	612e      	str	r6, [r5, #16]
 8012786:	4621      	mov	r1, r4
 8012788:	f7ff fdd2 	bl	8012330 <_Bfree>
 801278c:	4628      	mov	r0, r5
 801278e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012792:	f842 0f04 	str.w	r0, [r2, #4]!
 8012796:	3301      	adds	r3, #1
 8012798:	e7c1      	b.n	801271e <__lshift+0x4a>
 801279a:	3904      	subs	r1, #4
 801279c:	f853 2b04 	ldr.w	r2, [r3], #4
 80127a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80127a4:	4298      	cmp	r0, r3
 80127a6:	d8f9      	bhi.n	801279c <__lshift+0xc8>
 80127a8:	e7ea      	b.n	8012780 <__lshift+0xac>
 80127aa:	bf00      	nop
 80127ac:	08015b2b 	.word	0x08015b2b
 80127b0:	08015b3c 	.word	0x08015b3c

080127b4 <__mcmp>:
 80127b4:	b530      	push	{r4, r5, lr}
 80127b6:	6902      	ldr	r2, [r0, #16]
 80127b8:	690c      	ldr	r4, [r1, #16]
 80127ba:	1b12      	subs	r2, r2, r4
 80127bc:	d10e      	bne.n	80127dc <__mcmp+0x28>
 80127be:	f100 0314 	add.w	r3, r0, #20
 80127c2:	3114      	adds	r1, #20
 80127c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80127c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80127cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80127d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80127d4:	42a5      	cmp	r5, r4
 80127d6:	d003      	beq.n	80127e0 <__mcmp+0x2c>
 80127d8:	d305      	bcc.n	80127e6 <__mcmp+0x32>
 80127da:	2201      	movs	r2, #1
 80127dc:	4610      	mov	r0, r2
 80127de:	bd30      	pop	{r4, r5, pc}
 80127e0:	4283      	cmp	r3, r0
 80127e2:	d3f3      	bcc.n	80127cc <__mcmp+0x18>
 80127e4:	e7fa      	b.n	80127dc <__mcmp+0x28>
 80127e6:	f04f 32ff 	mov.w	r2, #4294967295
 80127ea:	e7f7      	b.n	80127dc <__mcmp+0x28>

080127ec <__mdiff>:
 80127ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127f0:	460c      	mov	r4, r1
 80127f2:	4606      	mov	r6, r0
 80127f4:	4611      	mov	r1, r2
 80127f6:	4620      	mov	r0, r4
 80127f8:	4690      	mov	r8, r2
 80127fa:	f7ff ffdb 	bl	80127b4 <__mcmp>
 80127fe:	1e05      	subs	r5, r0, #0
 8012800:	d110      	bne.n	8012824 <__mdiff+0x38>
 8012802:	4629      	mov	r1, r5
 8012804:	4630      	mov	r0, r6
 8012806:	f7ff fd53 	bl	80122b0 <_Balloc>
 801280a:	b930      	cbnz	r0, 801281a <__mdiff+0x2e>
 801280c:	4b3a      	ldr	r3, [pc, #232]	; (80128f8 <__mdiff+0x10c>)
 801280e:	4602      	mov	r2, r0
 8012810:	f240 2132 	movw	r1, #562	; 0x232
 8012814:	4839      	ldr	r0, [pc, #228]	; (80128fc <__mdiff+0x110>)
 8012816:	f000 fae5 	bl	8012de4 <__assert_func>
 801281a:	2301      	movs	r3, #1
 801281c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012824:	bfa4      	itt	ge
 8012826:	4643      	movge	r3, r8
 8012828:	46a0      	movge	r8, r4
 801282a:	4630      	mov	r0, r6
 801282c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012830:	bfa6      	itte	ge
 8012832:	461c      	movge	r4, r3
 8012834:	2500      	movge	r5, #0
 8012836:	2501      	movlt	r5, #1
 8012838:	f7ff fd3a 	bl	80122b0 <_Balloc>
 801283c:	b920      	cbnz	r0, 8012848 <__mdiff+0x5c>
 801283e:	4b2e      	ldr	r3, [pc, #184]	; (80128f8 <__mdiff+0x10c>)
 8012840:	4602      	mov	r2, r0
 8012842:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012846:	e7e5      	b.n	8012814 <__mdiff+0x28>
 8012848:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801284c:	6926      	ldr	r6, [r4, #16]
 801284e:	60c5      	str	r5, [r0, #12]
 8012850:	f104 0914 	add.w	r9, r4, #20
 8012854:	f108 0514 	add.w	r5, r8, #20
 8012858:	f100 0e14 	add.w	lr, r0, #20
 801285c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012860:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012864:	f108 0210 	add.w	r2, r8, #16
 8012868:	46f2      	mov	sl, lr
 801286a:	2100      	movs	r1, #0
 801286c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012870:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012874:	fa1f f883 	uxth.w	r8, r3
 8012878:	fa11 f18b 	uxtah	r1, r1, fp
 801287c:	0c1b      	lsrs	r3, r3, #16
 801287e:	eba1 0808 	sub.w	r8, r1, r8
 8012882:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012886:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801288a:	fa1f f888 	uxth.w	r8, r8
 801288e:	1419      	asrs	r1, r3, #16
 8012890:	454e      	cmp	r6, r9
 8012892:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012896:	f84a 3b04 	str.w	r3, [sl], #4
 801289a:	d8e7      	bhi.n	801286c <__mdiff+0x80>
 801289c:	1b33      	subs	r3, r6, r4
 801289e:	3b15      	subs	r3, #21
 80128a0:	f023 0303 	bic.w	r3, r3, #3
 80128a4:	3304      	adds	r3, #4
 80128a6:	3415      	adds	r4, #21
 80128a8:	42a6      	cmp	r6, r4
 80128aa:	bf38      	it	cc
 80128ac:	2304      	movcc	r3, #4
 80128ae:	441d      	add	r5, r3
 80128b0:	4473      	add	r3, lr
 80128b2:	469e      	mov	lr, r3
 80128b4:	462e      	mov	r6, r5
 80128b6:	4566      	cmp	r6, ip
 80128b8:	d30e      	bcc.n	80128d8 <__mdiff+0xec>
 80128ba:	f10c 0203 	add.w	r2, ip, #3
 80128be:	1b52      	subs	r2, r2, r5
 80128c0:	f022 0203 	bic.w	r2, r2, #3
 80128c4:	3d03      	subs	r5, #3
 80128c6:	45ac      	cmp	ip, r5
 80128c8:	bf38      	it	cc
 80128ca:	2200      	movcc	r2, #0
 80128cc:	441a      	add	r2, r3
 80128ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80128d2:	b17b      	cbz	r3, 80128f4 <__mdiff+0x108>
 80128d4:	6107      	str	r7, [r0, #16]
 80128d6:	e7a3      	b.n	8012820 <__mdiff+0x34>
 80128d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80128dc:	fa11 f288 	uxtah	r2, r1, r8
 80128e0:	1414      	asrs	r4, r2, #16
 80128e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80128e6:	b292      	uxth	r2, r2
 80128e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80128ec:	f84e 2b04 	str.w	r2, [lr], #4
 80128f0:	1421      	asrs	r1, r4, #16
 80128f2:	e7e0      	b.n	80128b6 <__mdiff+0xca>
 80128f4:	3f01      	subs	r7, #1
 80128f6:	e7ea      	b.n	80128ce <__mdiff+0xe2>
 80128f8:	08015b2b 	.word	0x08015b2b
 80128fc:	08015b3c 	.word	0x08015b3c

08012900 <__d2b>:
 8012900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012904:	4689      	mov	r9, r1
 8012906:	2101      	movs	r1, #1
 8012908:	ec57 6b10 	vmov	r6, r7, d0
 801290c:	4690      	mov	r8, r2
 801290e:	f7ff fccf 	bl	80122b0 <_Balloc>
 8012912:	4604      	mov	r4, r0
 8012914:	b930      	cbnz	r0, 8012924 <__d2b+0x24>
 8012916:	4602      	mov	r2, r0
 8012918:	4b25      	ldr	r3, [pc, #148]	; (80129b0 <__d2b+0xb0>)
 801291a:	4826      	ldr	r0, [pc, #152]	; (80129b4 <__d2b+0xb4>)
 801291c:	f240 310a 	movw	r1, #778	; 0x30a
 8012920:	f000 fa60 	bl	8012de4 <__assert_func>
 8012924:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012928:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801292c:	bb35      	cbnz	r5, 801297c <__d2b+0x7c>
 801292e:	2e00      	cmp	r6, #0
 8012930:	9301      	str	r3, [sp, #4]
 8012932:	d028      	beq.n	8012986 <__d2b+0x86>
 8012934:	4668      	mov	r0, sp
 8012936:	9600      	str	r6, [sp, #0]
 8012938:	f7ff fd82 	bl	8012440 <__lo0bits>
 801293c:	9900      	ldr	r1, [sp, #0]
 801293e:	b300      	cbz	r0, 8012982 <__d2b+0x82>
 8012940:	9a01      	ldr	r2, [sp, #4]
 8012942:	f1c0 0320 	rsb	r3, r0, #32
 8012946:	fa02 f303 	lsl.w	r3, r2, r3
 801294a:	430b      	orrs	r3, r1
 801294c:	40c2      	lsrs	r2, r0
 801294e:	6163      	str	r3, [r4, #20]
 8012950:	9201      	str	r2, [sp, #4]
 8012952:	9b01      	ldr	r3, [sp, #4]
 8012954:	61a3      	str	r3, [r4, #24]
 8012956:	2b00      	cmp	r3, #0
 8012958:	bf14      	ite	ne
 801295a:	2202      	movne	r2, #2
 801295c:	2201      	moveq	r2, #1
 801295e:	6122      	str	r2, [r4, #16]
 8012960:	b1d5      	cbz	r5, 8012998 <__d2b+0x98>
 8012962:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012966:	4405      	add	r5, r0
 8012968:	f8c9 5000 	str.w	r5, [r9]
 801296c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012970:	f8c8 0000 	str.w	r0, [r8]
 8012974:	4620      	mov	r0, r4
 8012976:	b003      	add	sp, #12
 8012978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801297c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012980:	e7d5      	b.n	801292e <__d2b+0x2e>
 8012982:	6161      	str	r1, [r4, #20]
 8012984:	e7e5      	b.n	8012952 <__d2b+0x52>
 8012986:	a801      	add	r0, sp, #4
 8012988:	f7ff fd5a 	bl	8012440 <__lo0bits>
 801298c:	9b01      	ldr	r3, [sp, #4]
 801298e:	6163      	str	r3, [r4, #20]
 8012990:	2201      	movs	r2, #1
 8012992:	6122      	str	r2, [r4, #16]
 8012994:	3020      	adds	r0, #32
 8012996:	e7e3      	b.n	8012960 <__d2b+0x60>
 8012998:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801299c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80129a0:	f8c9 0000 	str.w	r0, [r9]
 80129a4:	6918      	ldr	r0, [r3, #16]
 80129a6:	f7ff fd2b 	bl	8012400 <__hi0bits>
 80129aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80129ae:	e7df      	b.n	8012970 <__d2b+0x70>
 80129b0:	08015b2b 	.word	0x08015b2b
 80129b4:	08015b3c 	.word	0x08015b3c

080129b8 <_calloc_r>:
 80129b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129ba:	fba1 2402 	umull	r2, r4, r1, r2
 80129be:	b94c      	cbnz	r4, 80129d4 <_calloc_r+0x1c>
 80129c0:	4611      	mov	r1, r2
 80129c2:	9201      	str	r2, [sp, #4]
 80129c4:	f7fd fd84 	bl	80104d0 <_malloc_r>
 80129c8:	9a01      	ldr	r2, [sp, #4]
 80129ca:	4605      	mov	r5, r0
 80129cc:	b930      	cbnz	r0, 80129dc <_calloc_r+0x24>
 80129ce:	4628      	mov	r0, r5
 80129d0:	b003      	add	sp, #12
 80129d2:	bd30      	pop	{r4, r5, pc}
 80129d4:	220c      	movs	r2, #12
 80129d6:	6002      	str	r2, [r0, #0]
 80129d8:	2500      	movs	r5, #0
 80129da:	e7f8      	b.n	80129ce <_calloc_r+0x16>
 80129dc:	4621      	mov	r1, r4
 80129de:	f7fd fd4e 	bl	801047e <memset>
 80129e2:	e7f4      	b.n	80129ce <_calloc_r+0x16>

080129e4 <_free_r>:
 80129e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129e6:	2900      	cmp	r1, #0
 80129e8:	d044      	beq.n	8012a74 <_free_r+0x90>
 80129ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129ee:	9001      	str	r0, [sp, #4]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	f1a1 0404 	sub.w	r4, r1, #4
 80129f6:	bfb8      	it	lt
 80129f8:	18e4      	addlt	r4, r4, r3
 80129fa:	f7ff fc4d 	bl	8012298 <__malloc_lock>
 80129fe:	4a1e      	ldr	r2, [pc, #120]	; (8012a78 <_free_r+0x94>)
 8012a00:	9801      	ldr	r0, [sp, #4]
 8012a02:	6813      	ldr	r3, [r2, #0]
 8012a04:	b933      	cbnz	r3, 8012a14 <_free_r+0x30>
 8012a06:	6063      	str	r3, [r4, #4]
 8012a08:	6014      	str	r4, [r2, #0]
 8012a0a:	b003      	add	sp, #12
 8012a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a10:	f7ff bc48 	b.w	80122a4 <__malloc_unlock>
 8012a14:	42a3      	cmp	r3, r4
 8012a16:	d908      	bls.n	8012a2a <_free_r+0x46>
 8012a18:	6825      	ldr	r5, [r4, #0]
 8012a1a:	1961      	adds	r1, r4, r5
 8012a1c:	428b      	cmp	r3, r1
 8012a1e:	bf01      	itttt	eq
 8012a20:	6819      	ldreq	r1, [r3, #0]
 8012a22:	685b      	ldreq	r3, [r3, #4]
 8012a24:	1949      	addeq	r1, r1, r5
 8012a26:	6021      	streq	r1, [r4, #0]
 8012a28:	e7ed      	b.n	8012a06 <_free_r+0x22>
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	685b      	ldr	r3, [r3, #4]
 8012a2e:	b10b      	cbz	r3, 8012a34 <_free_r+0x50>
 8012a30:	42a3      	cmp	r3, r4
 8012a32:	d9fa      	bls.n	8012a2a <_free_r+0x46>
 8012a34:	6811      	ldr	r1, [r2, #0]
 8012a36:	1855      	adds	r5, r2, r1
 8012a38:	42a5      	cmp	r5, r4
 8012a3a:	d10b      	bne.n	8012a54 <_free_r+0x70>
 8012a3c:	6824      	ldr	r4, [r4, #0]
 8012a3e:	4421      	add	r1, r4
 8012a40:	1854      	adds	r4, r2, r1
 8012a42:	42a3      	cmp	r3, r4
 8012a44:	6011      	str	r1, [r2, #0]
 8012a46:	d1e0      	bne.n	8012a0a <_free_r+0x26>
 8012a48:	681c      	ldr	r4, [r3, #0]
 8012a4a:	685b      	ldr	r3, [r3, #4]
 8012a4c:	6053      	str	r3, [r2, #4]
 8012a4e:	4421      	add	r1, r4
 8012a50:	6011      	str	r1, [r2, #0]
 8012a52:	e7da      	b.n	8012a0a <_free_r+0x26>
 8012a54:	d902      	bls.n	8012a5c <_free_r+0x78>
 8012a56:	230c      	movs	r3, #12
 8012a58:	6003      	str	r3, [r0, #0]
 8012a5a:	e7d6      	b.n	8012a0a <_free_r+0x26>
 8012a5c:	6825      	ldr	r5, [r4, #0]
 8012a5e:	1961      	adds	r1, r4, r5
 8012a60:	428b      	cmp	r3, r1
 8012a62:	bf04      	itt	eq
 8012a64:	6819      	ldreq	r1, [r3, #0]
 8012a66:	685b      	ldreq	r3, [r3, #4]
 8012a68:	6063      	str	r3, [r4, #4]
 8012a6a:	bf04      	itt	eq
 8012a6c:	1949      	addeq	r1, r1, r5
 8012a6e:	6021      	streq	r1, [r4, #0]
 8012a70:	6054      	str	r4, [r2, #4]
 8012a72:	e7ca      	b.n	8012a0a <_free_r+0x26>
 8012a74:	b003      	add	sp, #12
 8012a76:	bd30      	pop	{r4, r5, pc}
 8012a78:	20005b60 	.word	0x20005b60

08012a7c <__sfputc_r>:
 8012a7c:	6893      	ldr	r3, [r2, #8]
 8012a7e:	3b01      	subs	r3, #1
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	b410      	push	{r4}
 8012a84:	6093      	str	r3, [r2, #8]
 8012a86:	da08      	bge.n	8012a9a <__sfputc_r+0x1e>
 8012a88:	6994      	ldr	r4, [r2, #24]
 8012a8a:	42a3      	cmp	r3, r4
 8012a8c:	db01      	blt.n	8012a92 <__sfputc_r+0x16>
 8012a8e:	290a      	cmp	r1, #10
 8012a90:	d103      	bne.n	8012a9a <__sfputc_r+0x1e>
 8012a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a96:	f7fe bb5b 	b.w	8011150 <__swbuf_r>
 8012a9a:	6813      	ldr	r3, [r2, #0]
 8012a9c:	1c58      	adds	r0, r3, #1
 8012a9e:	6010      	str	r0, [r2, #0]
 8012aa0:	7019      	strb	r1, [r3, #0]
 8012aa2:	4608      	mov	r0, r1
 8012aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012aa8:	4770      	bx	lr

08012aaa <__sfputs_r>:
 8012aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aac:	4606      	mov	r6, r0
 8012aae:	460f      	mov	r7, r1
 8012ab0:	4614      	mov	r4, r2
 8012ab2:	18d5      	adds	r5, r2, r3
 8012ab4:	42ac      	cmp	r4, r5
 8012ab6:	d101      	bne.n	8012abc <__sfputs_r+0x12>
 8012ab8:	2000      	movs	r0, #0
 8012aba:	e007      	b.n	8012acc <__sfputs_r+0x22>
 8012abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ac0:	463a      	mov	r2, r7
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	f7ff ffda 	bl	8012a7c <__sfputc_r>
 8012ac8:	1c43      	adds	r3, r0, #1
 8012aca:	d1f3      	bne.n	8012ab4 <__sfputs_r+0xa>
 8012acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ad0 <_vfiprintf_r>:
 8012ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ad4:	460d      	mov	r5, r1
 8012ad6:	b09d      	sub	sp, #116	; 0x74
 8012ad8:	4614      	mov	r4, r2
 8012ada:	4698      	mov	r8, r3
 8012adc:	4606      	mov	r6, r0
 8012ade:	b118      	cbz	r0, 8012ae8 <_vfiprintf_r+0x18>
 8012ae0:	6983      	ldr	r3, [r0, #24]
 8012ae2:	b90b      	cbnz	r3, 8012ae8 <_vfiprintf_r+0x18>
 8012ae4:	f7fd fbf8 	bl	80102d8 <__sinit>
 8012ae8:	4b89      	ldr	r3, [pc, #548]	; (8012d10 <_vfiprintf_r+0x240>)
 8012aea:	429d      	cmp	r5, r3
 8012aec:	d11b      	bne.n	8012b26 <_vfiprintf_r+0x56>
 8012aee:	6875      	ldr	r5, [r6, #4]
 8012af0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012af2:	07d9      	lsls	r1, r3, #31
 8012af4:	d405      	bmi.n	8012b02 <_vfiprintf_r+0x32>
 8012af6:	89ab      	ldrh	r3, [r5, #12]
 8012af8:	059a      	lsls	r2, r3, #22
 8012afa:	d402      	bmi.n	8012b02 <_vfiprintf_r+0x32>
 8012afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012afe:	f7fd fcae 	bl	801045e <__retarget_lock_acquire_recursive>
 8012b02:	89ab      	ldrh	r3, [r5, #12]
 8012b04:	071b      	lsls	r3, r3, #28
 8012b06:	d501      	bpl.n	8012b0c <_vfiprintf_r+0x3c>
 8012b08:	692b      	ldr	r3, [r5, #16]
 8012b0a:	b9eb      	cbnz	r3, 8012b48 <_vfiprintf_r+0x78>
 8012b0c:	4629      	mov	r1, r5
 8012b0e:	4630      	mov	r0, r6
 8012b10:	f7fe fb82 	bl	8011218 <__swsetup_r>
 8012b14:	b1c0      	cbz	r0, 8012b48 <_vfiprintf_r+0x78>
 8012b16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012b18:	07dc      	lsls	r4, r3, #31
 8012b1a:	d50e      	bpl.n	8012b3a <_vfiprintf_r+0x6a>
 8012b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b20:	b01d      	add	sp, #116	; 0x74
 8012b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b26:	4b7b      	ldr	r3, [pc, #492]	; (8012d14 <_vfiprintf_r+0x244>)
 8012b28:	429d      	cmp	r5, r3
 8012b2a:	d101      	bne.n	8012b30 <_vfiprintf_r+0x60>
 8012b2c:	68b5      	ldr	r5, [r6, #8]
 8012b2e:	e7df      	b.n	8012af0 <_vfiprintf_r+0x20>
 8012b30:	4b79      	ldr	r3, [pc, #484]	; (8012d18 <_vfiprintf_r+0x248>)
 8012b32:	429d      	cmp	r5, r3
 8012b34:	bf08      	it	eq
 8012b36:	68f5      	ldreq	r5, [r6, #12]
 8012b38:	e7da      	b.n	8012af0 <_vfiprintf_r+0x20>
 8012b3a:	89ab      	ldrh	r3, [r5, #12]
 8012b3c:	0598      	lsls	r0, r3, #22
 8012b3e:	d4ed      	bmi.n	8012b1c <_vfiprintf_r+0x4c>
 8012b40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012b42:	f7fd fc8d 	bl	8010460 <__retarget_lock_release_recursive>
 8012b46:	e7e9      	b.n	8012b1c <_vfiprintf_r+0x4c>
 8012b48:	2300      	movs	r3, #0
 8012b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8012b4c:	2320      	movs	r3, #32
 8012b4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b52:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b56:	2330      	movs	r3, #48	; 0x30
 8012b58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012d1c <_vfiprintf_r+0x24c>
 8012b5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b60:	f04f 0901 	mov.w	r9, #1
 8012b64:	4623      	mov	r3, r4
 8012b66:	469a      	mov	sl, r3
 8012b68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b6c:	b10a      	cbz	r2, 8012b72 <_vfiprintf_r+0xa2>
 8012b6e:	2a25      	cmp	r2, #37	; 0x25
 8012b70:	d1f9      	bne.n	8012b66 <_vfiprintf_r+0x96>
 8012b72:	ebba 0b04 	subs.w	fp, sl, r4
 8012b76:	d00b      	beq.n	8012b90 <_vfiprintf_r+0xc0>
 8012b78:	465b      	mov	r3, fp
 8012b7a:	4622      	mov	r2, r4
 8012b7c:	4629      	mov	r1, r5
 8012b7e:	4630      	mov	r0, r6
 8012b80:	f7ff ff93 	bl	8012aaa <__sfputs_r>
 8012b84:	3001      	adds	r0, #1
 8012b86:	f000 80aa 	beq.w	8012cde <_vfiprintf_r+0x20e>
 8012b8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b8c:	445a      	add	r2, fp
 8012b8e:	9209      	str	r2, [sp, #36]	; 0x24
 8012b90:	f89a 3000 	ldrb.w	r3, [sl]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	f000 80a2 	beq.w	8012cde <_vfiprintf_r+0x20e>
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8012ba0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ba4:	f10a 0a01 	add.w	sl, sl, #1
 8012ba8:	9304      	str	r3, [sp, #16]
 8012baa:	9307      	str	r3, [sp, #28]
 8012bac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012bb0:	931a      	str	r3, [sp, #104]	; 0x68
 8012bb2:	4654      	mov	r4, sl
 8012bb4:	2205      	movs	r2, #5
 8012bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bba:	4858      	ldr	r0, [pc, #352]	; (8012d1c <_vfiprintf_r+0x24c>)
 8012bbc:	f7ed fb10 	bl	80001e0 <memchr>
 8012bc0:	9a04      	ldr	r2, [sp, #16]
 8012bc2:	b9d8      	cbnz	r0, 8012bfc <_vfiprintf_r+0x12c>
 8012bc4:	06d1      	lsls	r1, r2, #27
 8012bc6:	bf44      	itt	mi
 8012bc8:	2320      	movmi	r3, #32
 8012bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012bce:	0713      	lsls	r3, r2, #28
 8012bd0:	bf44      	itt	mi
 8012bd2:	232b      	movmi	r3, #43	; 0x2b
 8012bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8012bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8012bde:	d015      	beq.n	8012c0c <_vfiprintf_r+0x13c>
 8012be0:	9a07      	ldr	r2, [sp, #28]
 8012be2:	4654      	mov	r4, sl
 8012be4:	2000      	movs	r0, #0
 8012be6:	f04f 0c0a 	mov.w	ip, #10
 8012bea:	4621      	mov	r1, r4
 8012bec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012bf0:	3b30      	subs	r3, #48	; 0x30
 8012bf2:	2b09      	cmp	r3, #9
 8012bf4:	d94e      	bls.n	8012c94 <_vfiprintf_r+0x1c4>
 8012bf6:	b1b0      	cbz	r0, 8012c26 <_vfiprintf_r+0x156>
 8012bf8:	9207      	str	r2, [sp, #28]
 8012bfa:	e014      	b.n	8012c26 <_vfiprintf_r+0x156>
 8012bfc:	eba0 0308 	sub.w	r3, r0, r8
 8012c00:	fa09 f303 	lsl.w	r3, r9, r3
 8012c04:	4313      	orrs	r3, r2
 8012c06:	9304      	str	r3, [sp, #16]
 8012c08:	46a2      	mov	sl, r4
 8012c0a:	e7d2      	b.n	8012bb2 <_vfiprintf_r+0xe2>
 8012c0c:	9b03      	ldr	r3, [sp, #12]
 8012c0e:	1d19      	adds	r1, r3, #4
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	9103      	str	r1, [sp, #12]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	bfbb      	ittet	lt
 8012c18:	425b      	neglt	r3, r3
 8012c1a:	f042 0202 	orrlt.w	r2, r2, #2
 8012c1e:	9307      	strge	r3, [sp, #28]
 8012c20:	9307      	strlt	r3, [sp, #28]
 8012c22:	bfb8      	it	lt
 8012c24:	9204      	strlt	r2, [sp, #16]
 8012c26:	7823      	ldrb	r3, [r4, #0]
 8012c28:	2b2e      	cmp	r3, #46	; 0x2e
 8012c2a:	d10c      	bne.n	8012c46 <_vfiprintf_r+0x176>
 8012c2c:	7863      	ldrb	r3, [r4, #1]
 8012c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8012c30:	d135      	bne.n	8012c9e <_vfiprintf_r+0x1ce>
 8012c32:	9b03      	ldr	r3, [sp, #12]
 8012c34:	1d1a      	adds	r2, r3, #4
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	9203      	str	r2, [sp, #12]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	bfb8      	it	lt
 8012c3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012c42:	3402      	adds	r4, #2
 8012c44:	9305      	str	r3, [sp, #20]
 8012c46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012d2c <_vfiprintf_r+0x25c>
 8012c4a:	7821      	ldrb	r1, [r4, #0]
 8012c4c:	2203      	movs	r2, #3
 8012c4e:	4650      	mov	r0, sl
 8012c50:	f7ed fac6 	bl	80001e0 <memchr>
 8012c54:	b140      	cbz	r0, 8012c68 <_vfiprintf_r+0x198>
 8012c56:	2340      	movs	r3, #64	; 0x40
 8012c58:	eba0 000a 	sub.w	r0, r0, sl
 8012c5c:	fa03 f000 	lsl.w	r0, r3, r0
 8012c60:	9b04      	ldr	r3, [sp, #16]
 8012c62:	4303      	orrs	r3, r0
 8012c64:	3401      	adds	r4, #1
 8012c66:	9304      	str	r3, [sp, #16]
 8012c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c6c:	482c      	ldr	r0, [pc, #176]	; (8012d20 <_vfiprintf_r+0x250>)
 8012c6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c72:	2206      	movs	r2, #6
 8012c74:	f7ed fab4 	bl	80001e0 <memchr>
 8012c78:	2800      	cmp	r0, #0
 8012c7a:	d03f      	beq.n	8012cfc <_vfiprintf_r+0x22c>
 8012c7c:	4b29      	ldr	r3, [pc, #164]	; (8012d24 <_vfiprintf_r+0x254>)
 8012c7e:	bb1b      	cbnz	r3, 8012cc8 <_vfiprintf_r+0x1f8>
 8012c80:	9b03      	ldr	r3, [sp, #12]
 8012c82:	3307      	adds	r3, #7
 8012c84:	f023 0307 	bic.w	r3, r3, #7
 8012c88:	3308      	adds	r3, #8
 8012c8a:	9303      	str	r3, [sp, #12]
 8012c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c8e:	443b      	add	r3, r7
 8012c90:	9309      	str	r3, [sp, #36]	; 0x24
 8012c92:	e767      	b.n	8012b64 <_vfiprintf_r+0x94>
 8012c94:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c98:	460c      	mov	r4, r1
 8012c9a:	2001      	movs	r0, #1
 8012c9c:	e7a5      	b.n	8012bea <_vfiprintf_r+0x11a>
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	3401      	adds	r4, #1
 8012ca2:	9305      	str	r3, [sp, #20]
 8012ca4:	4619      	mov	r1, r3
 8012ca6:	f04f 0c0a 	mov.w	ip, #10
 8012caa:	4620      	mov	r0, r4
 8012cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012cb0:	3a30      	subs	r2, #48	; 0x30
 8012cb2:	2a09      	cmp	r2, #9
 8012cb4:	d903      	bls.n	8012cbe <_vfiprintf_r+0x1ee>
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d0c5      	beq.n	8012c46 <_vfiprintf_r+0x176>
 8012cba:	9105      	str	r1, [sp, #20]
 8012cbc:	e7c3      	b.n	8012c46 <_vfiprintf_r+0x176>
 8012cbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8012cc2:	4604      	mov	r4, r0
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	e7f0      	b.n	8012caa <_vfiprintf_r+0x1da>
 8012cc8:	ab03      	add	r3, sp, #12
 8012cca:	9300      	str	r3, [sp, #0]
 8012ccc:	462a      	mov	r2, r5
 8012cce:	4b16      	ldr	r3, [pc, #88]	; (8012d28 <_vfiprintf_r+0x258>)
 8012cd0:	a904      	add	r1, sp, #16
 8012cd2:	4630      	mov	r0, r6
 8012cd4:	f7fd fd10 	bl	80106f8 <_printf_float>
 8012cd8:	4607      	mov	r7, r0
 8012cda:	1c78      	adds	r0, r7, #1
 8012cdc:	d1d6      	bne.n	8012c8c <_vfiprintf_r+0x1bc>
 8012cde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ce0:	07d9      	lsls	r1, r3, #31
 8012ce2:	d405      	bmi.n	8012cf0 <_vfiprintf_r+0x220>
 8012ce4:	89ab      	ldrh	r3, [r5, #12]
 8012ce6:	059a      	lsls	r2, r3, #22
 8012ce8:	d402      	bmi.n	8012cf0 <_vfiprintf_r+0x220>
 8012cea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012cec:	f7fd fbb8 	bl	8010460 <__retarget_lock_release_recursive>
 8012cf0:	89ab      	ldrh	r3, [r5, #12]
 8012cf2:	065b      	lsls	r3, r3, #25
 8012cf4:	f53f af12 	bmi.w	8012b1c <_vfiprintf_r+0x4c>
 8012cf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012cfa:	e711      	b.n	8012b20 <_vfiprintf_r+0x50>
 8012cfc:	ab03      	add	r3, sp, #12
 8012cfe:	9300      	str	r3, [sp, #0]
 8012d00:	462a      	mov	r2, r5
 8012d02:	4b09      	ldr	r3, [pc, #36]	; (8012d28 <_vfiprintf_r+0x258>)
 8012d04:	a904      	add	r1, sp, #16
 8012d06:	4630      	mov	r0, r6
 8012d08:	f7fd ff9a 	bl	8010c40 <_printf_i>
 8012d0c:	e7e4      	b.n	8012cd8 <_vfiprintf_r+0x208>
 8012d0e:	bf00      	nop
 8012d10:	08015a34 	.word	0x08015a34
 8012d14:	08015a54 	.word	0x08015a54
 8012d18:	08015a14 	.word	0x08015a14
 8012d1c:	08015c94 	.word	0x08015c94
 8012d20:	08015c9e 	.word	0x08015c9e
 8012d24:	080106f9 	.word	0x080106f9
 8012d28:	08012aab 	.word	0x08012aab
 8012d2c:	08015c9a 	.word	0x08015c9a

08012d30 <_putc_r>:
 8012d30:	b570      	push	{r4, r5, r6, lr}
 8012d32:	460d      	mov	r5, r1
 8012d34:	4614      	mov	r4, r2
 8012d36:	4606      	mov	r6, r0
 8012d38:	b118      	cbz	r0, 8012d42 <_putc_r+0x12>
 8012d3a:	6983      	ldr	r3, [r0, #24]
 8012d3c:	b90b      	cbnz	r3, 8012d42 <_putc_r+0x12>
 8012d3e:	f7fd facb 	bl	80102d8 <__sinit>
 8012d42:	4b1c      	ldr	r3, [pc, #112]	; (8012db4 <_putc_r+0x84>)
 8012d44:	429c      	cmp	r4, r3
 8012d46:	d124      	bne.n	8012d92 <_putc_r+0x62>
 8012d48:	6874      	ldr	r4, [r6, #4]
 8012d4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d4c:	07d8      	lsls	r0, r3, #31
 8012d4e:	d405      	bmi.n	8012d5c <_putc_r+0x2c>
 8012d50:	89a3      	ldrh	r3, [r4, #12]
 8012d52:	0599      	lsls	r1, r3, #22
 8012d54:	d402      	bmi.n	8012d5c <_putc_r+0x2c>
 8012d56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d58:	f7fd fb81 	bl	801045e <__retarget_lock_acquire_recursive>
 8012d5c:	68a3      	ldr	r3, [r4, #8]
 8012d5e:	3b01      	subs	r3, #1
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	60a3      	str	r3, [r4, #8]
 8012d64:	da05      	bge.n	8012d72 <_putc_r+0x42>
 8012d66:	69a2      	ldr	r2, [r4, #24]
 8012d68:	4293      	cmp	r3, r2
 8012d6a:	db1c      	blt.n	8012da6 <_putc_r+0x76>
 8012d6c:	b2eb      	uxtb	r3, r5
 8012d6e:	2b0a      	cmp	r3, #10
 8012d70:	d019      	beq.n	8012da6 <_putc_r+0x76>
 8012d72:	6823      	ldr	r3, [r4, #0]
 8012d74:	1c5a      	adds	r2, r3, #1
 8012d76:	6022      	str	r2, [r4, #0]
 8012d78:	701d      	strb	r5, [r3, #0]
 8012d7a:	b2ed      	uxtb	r5, r5
 8012d7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d7e:	07da      	lsls	r2, r3, #31
 8012d80:	d405      	bmi.n	8012d8e <_putc_r+0x5e>
 8012d82:	89a3      	ldrh	r3, [r4, #12]
 8012d84:	059b      	lsls	r3, r3, #22
 8012d86:	d402      	bmi.n	8012d8e <_putc_r+0x5e>
 8012d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d8a:	f7fd fb69 	bl	8010460 <__retarget_lock_release_recursive>
 8012d8e:	4628      	mov	r0, r5
 8012d90:	bd70      	pop	{r4, r5, r6, pc}
 8012d92:	4b09      	ldr	r3, [pc, #36]	; (8012db8 <_putc_r+0x88>)
 8012d94:	429c      	cmp	r4, r3
 8012d96:	d101      	bne.n	8012d9c <_putc_r+0x6c>
 8012d98:	68b4      	ldr	r4, [r6, #8]
 8012d9a:	e7d6      	b.n	8012d4a <_putc_r+0x1a>
 8012d9c:	4b07      	ldr	r3, [pc, #28]	; (8012dbc <_putc_r+0x8c>)
 8012d9e:	429c      	cmp	r4, r3
 8012da0:	bf08      	it	eq
 8012da2:	68f4      	ldreq	r4, [r6, #12]
 8012da4:	e7d1      	b.n	8012d4a <_putc_r+0x1a>
 8012da6:	4629      	mov	r1, r5
 8012da8:	4622      	mov	r2, r4
 8012daa:	4630      	mov	r0, r6
 8012dac:	f7fe f9d0 	bl	8011150 <__swbuf_r>
 8012db0:	4605      	mov	r5, r0
 8012db2:	e7e3      	b.n	8012d7c <_putc_r+0x4c>
 8012db4:	08015a34 	.word	0x08015a34
 8012db8:	08015a54 	.word	0x08015a54
 8012dbc:	08015a14 	.word	0x08015a14

08012dc0 <_read_r>:
 8012dc0:	b538      	push	{r3, r4, r5, lr}
 8012dc2:	4d07      	ldr	r5, [pc, #28]	; (8012de0 <_read_r+0x20>)
 8012dc4:	4604      	mov	r4, r0
 8012dc6:	4608      	mov	r0, r1
 8012dc8:	4611      	mov	r1, r2
 8012dca:	2200      	movs	r2, #0
 8012dcc:	602a      	str	r2, [r5, #0]
 8012dce:	461a      	mov	r2, r3
 8012dd0:	f7f3 f93e 	bl	8006050 <_read>
 8012dd4:	1c43      	adds	r3, r0, #1
 8012dd6:	d102      	bne.n	8012dde <_read_r+0x1e>
 8012dd8:	682b      	ldr	r3, [r5, #0]
 8012dda:	b103      	cbz	r3, 8012dde <_read_r+0x1e>
 8012ddc:	6023      	str	r3, [r4, #0]
 8012dde:	bd38      	pop	{r3, r4, r5, pc}
 8012de0:	20005b68 	.word	0x20005b68

08012de4 <__assert_func>:
 8012de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012de6:	4614      	mov	r4, r2
 8012de8:	461a      	mov	r2, r3
 8012dea:	4b09      	ldr	r3, [pc, #36]	; (8012e10 <__assert_func+0x2c>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	4605      	mov	r5, r0
 8012df0:	68d8      	ldr	r0, [r3, #12]
 8012df2:	b14c      	cbz	r4, 8012e08 <__assert_func+0x24>
 8012df4:	4b07      	ldr	r3, [pc, #28]	; (8012e14 <__assert_func+0x30>)
 8012df6:	9100      	str	r1, [sp, #0]
 8012df8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012dfc:	4906      	ldr	r1, [pc, #24]	; (8012e18 <__assert_func+0x34>)
 8012dfe:	462b      	mov	r3, r5
 8012e00:	f000 f80e 	bl	8012e20 <fiprintf>
 8012e04:	f000 f85f 	bl	8012ec6 <abort>
 8012e08:	4b04      	ldr	r3, [pc, #16]	; (8012e1c <__assert_func+0x38>)
 8012e0a:	461c      	mov	r4, r3
 8012e0c:	e7f3      	b.n	8012df6 <__assert_func+0x12>
 8012e0e:	bf00      	nop
 8012e10:	200000a0 	.word	0x200000a0
 8012e14:	08015ca5 	.word	0x08015ca5
 8012e18:	08015cb2 	.word	0x08015cb2
 8012e1c:	08015ce0 	.word	0x08015ce0

08012e20 <fiprintf>:
 8012e20:	b40e      	push	{r1, r2, r3}
 8012e22:	b503      	push	{r0, r1, lr}
 8012e24:	4601      	mov	r1, r0
 8012e26:	ab03      	add	r3, sp, #12
 8012e28:	4805      	ldr	r0, [pc, #20]	; (8012e40 <fiprintf+0x20>)
 8012e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e2e:	6800      	ldr	r0, [r0, #0]
 8012e30:	9301      	str	r3, [sp, #4]
 8012e32:	f7ff fe4d 	bl	8012ad0 <_vfiprintf_r>
 8012e36:	b002      	add	sp, #8
 8012e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e3c:	b003      	add	sp, #12
 8012e3e:	4770      	bx	lr
 8012e40:	200000a0 	.word	0x200000a0

08012e44 <_fstat_r>:
 8012e44:	b538      	push	{r3, r4, r5, lr}
 8012e46:	4d07      	ldr	r5, [pc, #28]	; (8012e64 <_fstat_r+0x20>)
 8012e48:	2300      	movs	r3, #0
 8012e4a:	4604      	mov	r4, r0
 8012e4c:	4608      	mov	r0, r1
 8012e4e:	4611      	mov	r1, r2
 8012e50:	602b      	str	r3, [r5, #0]
 8012e52:	f7f3 f926 	bl	80060a2 <_fstat>
 8012e56:	1c43      	adds	r3, r0, #1
 8012e58:	d102      	bne.n	8012e60 <_fstat_r+0x1c>
 8012e5a:	682b      	ldr	r3, [r5, #0]
 8012e5c:	b103      	cbz	r3, 8012e60 <_fstat_r+0x1c>
 8012e5e:	6023      	str	r3, [r4, #0]
 8012e60:	bd38      	pop	{r3, r4, r5, pc}
 8012e62:	bf00      	nop
 8012e64:	20005b68 	.word	0x20005b68

08012e68 <_isatty_r>:
 8012e68:	b538      	push	{r3, r4, r5, lr}
 8012e6a:	4d06      	ldr	r5, [pc, #24]	; (8012e84 <_isatty_r+0x1c>)
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	4604      	mov	r4, r0
 8012e70:	4608      	mov	r0, r1
 8012e72:	602b      	str	r3, [r5, #0]
 8012e74:	f7f3 f925 	bl	80060c2 <_isatty>
 8012e78:	1c43      	adds	r3, r0, #1
 8012e7a:	d102      	bne.n	8012e82 <_isatty_r+0x1a>
 8012e7c:	682b      	ldr	r3, [r5, #0]
 8012e7e:	b103      	cbz	r3, 8012e82 <_isatty_r+0x1a>
 8012e80:	6023      	str	r3, [r4, #0]
 8012e82:	bd38      	pop	{r3, r4, r5, pc}
 8012e84:	20005b68 	.word	0x20005b68

08012e88 <__ascii_mbtowc>:
 8012e88:	b082      	sub	sp, #8
 8012e8a:	b901      	cbnz	r1, 8012e8e <__ascii_mbtowc+0x6>
 8012e8c:	a901      	add	r1, sp, #4
 8012e8e:	b142      	cbz	r2, 8012ea2 <__ascii_mbtowc+0x1a>
 8012e90:	b14b      	cbz	r3, 8012ea6 <__ascii_mbtowc+0x1e>
 8012e92:	7813      	ldrb	r3, [r2, #0]
 8012e94:	600b      	str	r3, [r1, #0]
 8012e96:	7812      	ldrb	r2, [r2, #0]
 8012e98:	1e10      	subs	r0, r2, #0
 8012e9a:	bf18      	it	ne
 8012e9c:	2001      	movne	r0, #1
 8012e9e:	b002      	add	sp, #8
 8012ea0:	4770      	bx	lr
 8012ea2:	4610      	mov	r0, r2
 8012ea4:	e7fb      	b.n	8012e9e <__ascii_mbtowc+0x16>
 8012ea6:	f06f 0001 	mvn.w	r0, #1
 8012eaa:	e7f8      	b.n	8012e9e <__ascii_mbtowc+0x16>

08012eac <__ascii_wctomb>:
 8012eac:	b149      	cbz	r1, 8012ec2 <__ascii_wctomb+0x16>
 8012eae:	2aff      	cmp	r2, #255	; 0xff
 8012eb0:	bf85      	ittet	hi
 8012eb2:	238a      	movhi	r3, #138	; 0x8a
 8012eb4:	6003      	strhi	r3, [r0, #0]
 8012eb6:	700a      	strbls	r2, [r1, #0]
 8012eb8:	f04f 30ff 	movhi.w	r0, #4294967295
 8012ebc:	bf98      	it	ls
 8012ebe:	2001      	movls	r0, #1
 8012ec0:	4770      	bx	lr
 8012ec2:	4608      	mov	r0, r1
 8012ec4:	4770      	bx	lr

08012ec6 <abort>:
 8012ec6:	b508      	push	{r3, lr}
 8012ec8:	2006      	movs	r0, #6
 8012eca:	f000 f82b 	bl	8012f24 <raise>
 8012ece:	2001      	movs	r0, #1
 8012ed0:	f7f3 f8b4 	bl	800603c <_exit>

08012ed4 <_raise_r>:
 8012ed4:	291f      	cmp	r1, #31
 8012ed6:	b538      	push	{r3, r4, r5, lr}
 8012ed8:	4604      	mov	r4, r0
 8012eda:	460d      	mov	r5, r1
 8012edc:	d904      	bls.n	8012ee8 <_raise_r+0x14>
 8012ede:	2316      	movs	r3, #22
 8012ee0:	6003      	str	r3, [r0, #0]
 8012ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8012ee6:	bd38      	pop	{r3, r4, r5, pc}
 8012ee8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012eea:	b112      	cbz	r2, 8012ef2 <_raise_r+0x1e>
 8012eec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ef0:	b94b      	cbnz	r3, 8012f06 <_raise_r+0x32>
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	f000 f830 	bl	8012f58 <_getpid_r>
 8012ef8:	462a      	mov	r2, r5
 8012efa:	4601      	mov	r1, r0
 8012efc:	4620      	mov	r0, r4
 8012efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f02:	f000 b817 	b.w	8012f34 <_kill_r>
 8012f06:	2b01      	cmp	r3, #1
 8012f08:	d00a      	beq.n	8012f20 <_raise_r+0x4c>
 8012f0a:	1c59      	adds	r1, r3, #1
 8012f0c:	d103      	bne.n	8012f16 <_raise_r+0x42>
 8012f0e:	2316      	movs	r3, #22
 8012f10:	6003      	str	r3, [r0, #0]
 8012f12:	2001      	movs	r0, #1
 8012f14:	e7e7      	b.n	8012ee6 <_raise_r+0x12>
 8012f16:	2400      	movs	r4, #0
 8012f18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012f1c:	4628      	mov	r0, r5
 8012f1e:	4798      	blx	r3
 8012f20:	2000      	movs	r0, #0
 8012f22:	e7e0      	b.n	8012ee6 <_raise_r+0x12>

08012f24 <raise>:
 8012f24:	4b02      	ldr	r3, [pc, #8]	; (8012f30 <raise+0xc>)
 8012f26:	4601      	mov	r1, r0
 8012f28:	6818      	ldr	r0, [r3, #0]
 8012f2a:	f7ff bfd3 	b.w	8012ed4 <_raise_r>
 8012f2e:	bf00      	nop
 8012f30:	200000a0 	.word	0x200000a0

08012f34 <_kill_r>:
 8012f34:	b538      	push	{r3, r4, r5, lr}
 8012f36:	4d07      	ldr	r5, [pc, #28]	; (8012f54 <_kill_r+0x20>)
 8012f38:	2300      	movs	r3, #0
 8012f3a:	4604      	mov	r4, r0
 8012f3c:	4608      	mov	r0, r1
 8012f3e:	4611      	mov	r1, r2
 8012f40:	602b      	str	r3, [r5, #0]
 8012f42:	f7f3 f86b 	bl	800601c <_kill>
 8012f46:	1c43      	adds	r3, r0, #1
 8012f48:	d102      	bne.n	8012f50 <_kill_r+0x1c>
 8012f4a:	682b      	ldr	r3, [r5, #0]
 8012f4c:	b103      	cbz	r3, 8012f50 <_kill_r+0x1c>
 8012f4e:	6023      	str	r3, [r4, #0]
 8012f50:	bd38      	pop	{r3, r4, r5, pc}
 8012f52:	bf00      	nop
 8012f54:	20005b68 	.word	0x20005b68

08012f58 <_getpid_r>:
 8012f58:	f7f3 b858 	b.w	800600c <_getpid>
 8012f5c:	0000      	movs	r0, r0
	...

08012f60 <cos>:
 8012f60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f62:	ec53 2b10 	vmov	r2, r3, d0
 8012f66:	4826      	ldr	r0, [pc, #152]	; (8013000 <cos+0xa0>)
 8012f68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012f6c:	4281      	cmp	r1, r0
 8012f6e:	dc06      	bgt.n	8012f7e <cos+0x1e>
 8012f70:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8012ff8 <cos+0x98>
 8012f74:	b005      	add	sp, #20
 8012f76:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f7a:	f000 bef1 	b.w	8013d60 <__kernel_cos>
 8012f7e:	4821      	ldr	r0, [pc, #132]	; (8013004 <cos+0xa4>)
 8012f80:	4281      	cmp	r1, r0
 8012f82:	dd09      	ble.n	8012f98 <cos+0x38>
 8012f84:	ee10 0a10 	vmov	r0, s0
 8012f88:	4619      	mov	r1, r3
 8012f8a:	f7ed f97d 	bl	8000288 <__aeabi_dsub>
 8012f8e:	ec41 0b10 	vmov	d0, r0, r1
 8012f92:	b005      	add	sp, #20
 8012f94:	f85d fb04 	ldr.w	pc, [sp], #4
 8012f98:	4668      	mov	r0, sp
 8012f9a:	f000 fc21 	bl	80137e0 <__ieee754_rem_pio2>
 8012f9e:	f000 0003 	and.w	r0, r0, #3
 8012fa2:	2801      	cmp	r0, #1
 8012fa4:	d00b      	beq.n	8012fbe <cos+0x5e>
 8012fa6:	2802      	cmp	r0, #2
 8012fa8:	d016      	beq.n	8012fd8 <cos+0x78>
 8012faa:	b9e0      	cbnz	r0, 8012fe6 <cos+0x86>
 8012fac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012fb0:	ed9d 0b00 	vldr	d0, [sp]
 8012fb4:	f000 fed4 	bl	8013d60 <__kernel_cos>
 8012fb8:	ec51 0b10 	vmov	r0, r1, d0
 8012fbc:	e7e7      	b.n	8012f8e <cos+0x2e>
 8012fbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012fc2:	ed9d 0b00 	vldr	d0, [sp]
 8012fc6:	f001 fae3 	bl	8014590 <__kernel_sin>
 8012fca:	ec53 2b10 	vmov	r2, r3, d0
 8012fce:	ee10 0a10 	vmov	r0, s0
 8012fd2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012fd6:	e7da      	b.n	8012f8e <cos+0x2e>
 8012fd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012fdc:	ed9d 0b00 	vldr	d0, [sp]
 8012fe0:	f000 febe 	bl	8013d60 <__kernel_cos>
 8012fe4:	e7f1      	b.n	8012fca <cos+0x6a>
 8012fe6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012fea:	ed9d 0b00 	vldr	d0, [sp]
 8012fee:	2001      	movs	r0, #1
 8012ff0:	f001 face 	bl	8014590 <__kernel_sin>
 8012ff4:	e7e0      	b.n	8012fb8 <cos+0x58>
 8012ff6:	bf00      	nop
	...
 8013000:	3fe921fb 	.word	0x3fe921fb
 8013004:	7fefffff 	.word	0x7fefffff

08013008 <round>:
 8013008:	ec51 0b10 	vmov	r0, r1, d0
 801300c:	b570      	push	{r4, r5, r6, lr}
 801300e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8013012:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8013016:	2c13      	cmp	r4, #19
 8013018:	ee10 2a10 	vmov	r2, s0
 801301c:	460b      	mov	r3, r1
 801301e:	dc19      	bgt.n	8013054 <round+0x4c>
 8013020:	2c00      	cmp	r4, #0
 8013022:	da09      	bge.n	8013038 <round+0x30>
 8013024:	3401      	adds	r4, #1
 8013026:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801302a:	d103      	bne.n	8013034 <round+0x2c>
 801302c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013030:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013034:	2200      	movs	r2, #0
 8013036:	e028      	b.n	801308a <round+0x82>
 8013038:	4d15      	ldr	r5, [pc, #84]	; (8013090 <round+0x88>)
 801303a:	4125      	asrs	r5, r4
 801303c:	ea01 0605 	and.w	r6, r1, r5
 8013040:	4332      	orrs	r2, r6
 8013042:	d00e      	beq.n	8013062 <round+0x5a>
 8013044:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013048:	fa42 f404 	asr.w	r4, r2, r4
 801304c:	4423      	add	r3, r4
 801304e:	ea23 0305 	bic.w	r3, r3, r5
 8013052:	e7ef      	b.n	8013034 <round+0x2c>
 8013054:	2c33      	cmp	r4, #51	; 0x33
 8013056:	dd07      	ble.n	8013068 <round+0x60>
 8013058:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801305c:	d101      	bne.n	8013062 <round+0x5a>
 801305e:	f7ed f915 	bl	800028c <__adddf3>
 8013062:	ec41 0b10 	vmov	d0, r0, r1
 8013066:	bd70      	pop	{r4, r5, r6, pc}
 8013068:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801306c:	f04f 35ff 	mov.w	r5, #4294967295
 8013070:	40f5      	lsrs	r5, r6
 8013072:	4228      	tst	r0, r5
 8013074:	d0f5      	beq.n	8013062 <round+0x5a>
 8013076:	2101      	movs	r1, #1
 8013078:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801307c:	fa01 f404 	lsl.w	r4, r1, r4
 8013080:	1912      	adds	r2, r2, r4
 8013082:	bf28      	it	cs
 8013084:	185b      	addcs	r3, r3, r1
 8013086:	ea22 0205 	bic.w	r2, r2, r5
 801308a:	4619      	mov	r1, r3
 801308c:	4610      	mov	r0, r2
 801308e:	e7e8      	b.n	8013062 <round+0x5a>
 8013090:	000fffff 	.word	0x000fffff
 8013094:	00000000 	.word	0x00000000

08013098 <sin>:
 8013098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801309a:	ec53 2b10 	vmov	r2, r3, d0
 801309e:	4828      	ldr	r0, [pc, #160]	; (8013140 <sin+0xa8>)
 80130a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80130a4:	4281      	cmp	r1, r0
 80130a6:	dc07      	bgt.n	80130b8 <sin+0x20>
 80130a8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8013138 <sin+0xa0>
 80130ac:	2000      	movs	r0, #0
 80130ae:	b005      	add	sp, #20
 80130b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80130b4:	f001 ba6c 	b.w	8014590 <__kernel_sin>
 80130b8:	4822      	ldr	r0, [pc, #136]	; (8013144 <sin+0xac>)
 80130ba:	4281      	cmp	r1, r0
 80130bc:	dd09      	ble.n	80130d2 <sin+0x3a>
 80130be:	ee10 0a10 	vmov	r0, s0
 80130c2:	4619      	mov	r1, r3
 80130c4:	f7ed f8e0 	bl	8000288 <__aeabi_dsub>
 80130c8:	ec41 0b10 	vmov	d0, r0, r1
 80130cc:	b005      	add	sp, #20
 80130ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80130d2:	4668      	mov	r0, sp
 80130d4:	f000 fb84 	bl	80137e0 <__ieee754_rem_pio2>
 80130d8:	f000 0003 	and.w	r0, r0, #3
 80130dc:	2801      	cmp	r0, #1
 80130de:	d00c      	beq.n	80130fa <sin+0x62>
 80130e0:	2802      	cmp	r0, #2
 80130e2:	d011      	beq.n	8013108 <sin+0x70>
 80130e4:	b9f0      	cbnz	r0, 8013124 <sin+0x8c>
 80130e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130ea:	ed9d 0b00 	vldr	d0, [sp]
 80130ee:	2001      	movs	r0, #1
 80130f0:	f001 fa4e 	bl	8014590 <__kernel_sin>
 80130f4:	ec51 0b10 	vmov	r0, r1, d0
 80130f8:	e7e6      	b.n	80130c8 <sin+0x30>
 80130fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130fe:	ed9d 0b00 	vldr	d0, [sp]
 8013102:	f000 fe2d 	bl	8013d60 <__kernel_cos>
 8013106:	e7f5      	b.n	80130f4 <sin+0x5c>
 8013108:	ed9d 1b02 	vldr	d1, [sp, #8]
 801310c:	ed9d 0b00 	vldr	d0, [sp]
 8013110:	2001      	movs	r0, #1
 8013112:	f001 fa3d 	bl	8014590 <__kernel_sin>
 8013116:	ec53 2b10 	vmov	r2, r3, d0
 801311a:	ee10 0a10 	vmov	r0, s0
 801311e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013122:	e7d1      	b.n	80130c8 <sin+0x30>
 8013124:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013128:	ed9d 0b00 	vldr	d0, [sp]
 801312c:	f000 fe18 	bl	8013d60 <__kernel_cos>
 8013130:	e7f1      	b.n	8013116 <sin+0x7e>
 8013132:	bf00      	nop
 8013134:	f3af 8000 	nop.w
	...
 8013140:	3fe921fb 	.word	0x3fe921fb
 8013144:	7fefffff 	.word	0x7fefffff

08013148 <tan>:
 8013148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801314a:	ec53 2b10 	vmov	r2, r3, d0
 801314e:	4816      	ldr	r0, [pc, #88]	; (80131a8 <tan+0x60>)
 8013150:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013154:	4281      	cmp	r1, r0
 8013156:	dc07      	bgt.n	8013168 <tan+0x20>
 8013158:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80131a0 <tan+0x58>
 801315c:	2001      	movs	r0, #1
 801315e:	b005      	add	sp, #20
 8013160:	f85d eb04 	ldr.w	lr, [sp], #4
 8013164:	f001 bad4 	b.w	8014710 <__kernel_tan>
 8013168:	4810      	ldr	r0, [pc, #64]	; (80131ac <tan+0x64>)
 801316a:	4281      	cmp	r1, r0
 801316c:	dd09      	ble.n	8013182 <tan+0x3a>
 801316e:	ee10 0a10 	vmov	r0, s0
 8013172:	4619      	mov	r1, r3
 8013174:	f7ed f888 	bl	8000288 <__aeabi_dsub>
 8013178:	ec41 0b10 	vmov	d0, r0, r1
 801317c:	b005      	add	sp, #20
 801317e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013182:	4668      	mov	r0, sp
 8013184:	f000 fb2c 	bl	80137e0 <__ieee754_rem_pio2>
 8013188:	0040      	lsls	r0, r0, #1
 801318a:	f000 0002 	and.w	r0, r0, #2
 801318e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013192:	ed9d 0b00 	vldr	d0, [sp]
 8013196:	f1c0 0001 	rsb	r0, r0, #1
 801319a:	f001 fab9 	bl	8014710 <__kernel_tan>
 801319e:	e7ed      	b.n	801317c <tan+0x34>
	...
 80131a8:	3fe921fb 	.word	0x3fe921fb
 80131ac:	7fefffff 	.word	0x7fefffff

080131b0 <asin>:
 80131b0:	b538      	push	{r3, r4, r5, lr}
 80131b2:	ed2d 8b02 	vpush	{d8}
 80131b6:	ec55 4b10 	vmov	r4, r5, d0
 80131ba:	f000 f831 	bl	8013220 <__ieee754_asin>
 80131be:	4622      	mov	r2, r4
 80131c0:	462b      	mov	r3, r5
 80131c2:	4620      	mov	r0, r4
 80131c4:	4629      	mov	r1, r5
 80131c6:	eeb0 8a40 	vmov.f32	s16, s0
 80131ca:	eef0 8a60 	vmov.f32	s17, s1
 80131ce:	f7ed fcad 	bl	8000b2c <__aeabi_dcmpun>
 80131d2:	b9a8      	cbnz	r0, 8013200 <asin+0x50>
 80131d4:	ec45 4b10 	vmov	d0, r4, r5
 80131d8:	f001 fe46 	bl	8014e68 <fabs>
 80131dc:	4b0c      	ldr	r3, [pc, #48]	; (8013210 <asin+0x60>)
 80131de:	ec51 0b10 	vmov	r0, r1, d0
 80131e2:	2200      	movs	r2, #0
 80131e4:	f7ed fc98 	bl	8000b18 <__aeabi_dcmpgt>
 80131e8:	b150      	cbz	r0, 8013200 <asin+0x50>
 80131ea:	f7fd f817 	bl	801021c <__errno>
 80131ee:	ecbd 8b02 	vpop	{d8}
 80131f2:	2321      	movs	r3, #33	; 0x21
 80131f4:	6003      	str	r3, [r0, #0]
 80131f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131fa:	4806      	ldr	r0, [pc, #24]	; (8013214 <asin+0x64>)
 80131fc:	f001 bec0 	b.w	8014f80 <nan>
 8013200:	eeb0 0a48 	vmov.f32	s0, s16
 8013204:	eef0 0a68 	vmov.f32	s1, s17
 8013208:	ecbd 8b02 	vpop	{d8}
 801320c:	bd38      	pop	{r3, r4, r5, pc}
 801320e:	bf00      	nop
 8013210:	3ff00000 	.word	0x3ff00000
 8013214:	08015ce0 	.word	0x08015ce0

08013218 <atan2>:
 8013218:	f000 ba16 	b.w	8013648 <__ieee754_atan2>
 801321c:	0000      	movs	r0, r0
	...

08013220 <__ieee754_asin>:
 8013220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013224:	ed2d 8b04 	vpush	{d8-d9}
 8013228:	ec55 4b10 	vmov	r4, r5, d0
 801322c:	4bcc      	ldr	r3, [pc, #816]	; (8013560 <__ieee754_asin+0x340>)
 801322e:	b083      	sub	sp, #12
 8013230:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8013234:	4598      	cmp	r8, r3
 8013236:	9501      	str	r5, [sp, #4]
 8013238:	dd35      	ble.n	80132a6 <__ieee754_asin+0x86>
 801323a:	ee10 3a10 	vmov	r3, s0
 801323e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8013242:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8013246:	ea58 0303 	orrs.w	r3, r8, r3
 801324a:	d117      	bne.n	801327c <__ieee754_asin+0x5c>
 801324c:	a3aa      	add	r3, pc, #680	; (adr r3, 80134f8 <__ieee754_asin+0x2d8>)
 801324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013252:	ee10 0a10 	vmov	r0, s0
 8013256:	4629      	mov	r1, r5
 8013258:	f7ed f9ce 	bl	80005f8 <__aeabi_dmul>
 801325c:	a3a8      	add	r3, pc, #672	; (adr r3, 8013500 <__ieee754_asin+0x2e0>)
 801325e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013262:	4606      	mov	r6, r0
 8013264:	460f      	mov	r7, r1
 8013266:	4620      	mov	r0, r4
 8013268:	4629      	mov	r1, r5
 801326a:	f7ed f9c5 	bl	80005f8 <__aeabi_dmul>
 801326e:	4602      	mov	r2, r0
 8013270:	460b      	mov	r3, r1
 8013272:	4630      	mov	r0, r6
 8013274:	4639      	mov	r1, r7
 8013276:	f7ed f809 	bl	800028c <__adddf3>
 801327a:	e00b      	b.n	8013294 <__ieee754_asin+0x74>
 801327c:	ee10 2a10 	vmov	r2, s0
 8013280:	462b      	mov	r3, r5
 8013282:	ee10 0a10 	vmov	r0, s0
 8013286:	4629      	mov	r1, r5
 8013288:	f7ec fffe 	bl	8000288 <__aeabi_dsub>
 801328c:	4602      	mov	r2, r0
 801328e:	460b      	mov	r3, r1
 8013290:	f7ed fadc 	bl	800084c <__aeabi_ddiv>
 8013294:	4604      	mov	r4, r0
 8013296:	460d      	mov	r5, r1
 8013298:	ec45 4b10 	vmov	d0, r4, r5
 801329c:	b003      	add	sp, #12
 801329e:	ecbd 8b04 	vpop	{d8-d9}
 80132a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132a6:	4baf      	ldr	r3, [pc, #700]	; (8013564 <__ieee754_asin+0x344>)
 80132a8:	4598      	cmp	r8, r3
 80132aa:	dc11      	bgt.n	80132d0 <__ieee754_asin+0xb0>
 80132ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80132b0:	f280 80ae 	bge.w	8013410 <__ieee754_asin+0x1f0>
 80132b4:	a394      	add	r3, pc, #592	; (adr r3, 8013508 <__ieee754_asin+0x2e8>)
 80132b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ba:	ee10 0a10 	vmov	r0, s0
 80132be:	4629      	mov	r1, r5
 80132c0:	f7ec ffe4 	bl	800028c <__adddf3>
 80132c4:	4ba8      	ldr	r3, [pc, #672]	; (8013568 <__ieee754_asin+0x348>)
 80132c6:	2200      	movs	r2, #0
 80132c8:	f7ed fc26 	bl	8000b18 <__aeabi_dcmpgt>
 80132cc:	2800      	cmp	r0, #0
 80132ce:	d1e3      	bne.n	8013298 <__ieee754_asin+0x78>
 80132d0:	ec45 4b10 	vmov	d0, r4, r5
 80132d4:	f001 fdc8 	bl	8014e68 <fabs>
 80132d8:	49a3      	ldr	r1, [pc, #652]	; (8013568 <__ieee754_asin+0x348>)
 80132da:	ec53 2b10 	vmov	r2, r3, d0
 80132de:	2000      	movs	r0, #0
 80132e0:	f7ec ffd2 	bl	8000288 <__aeabi_dsub>
 80132e4:	4ba1      	ldr	r3, [pc, #644]	; (801356c <__ieee754_asin+0x34c>)
 80132e6:	2200      	movs	r2, #0
 80132e8:	f7ed f986 	bl	80005f8 <__aeabi_dmul>
 80132ec:	a388      	add	r3, pc, #544	; (adr r3, 8013510 <__ieee754_asin+0x2f0>)
 80132ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f2:	4604      	mov	r4, r0
 80132f4:	460d      	mov	r5, r1
 80132f6:	f7ed f97f 	bl	80005f8 <__aeabi_dmul>
 80132fa:	a387      	add	r3, pc, #540	; (adr r3, 8013518 <__ieee754_asin+0x2f8>)
 80132fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013300:	f7ec ffc4 	bl	800028c <__adddf3>
 8013304:	4622      	mov	r2, r4
 8013306:	462b      	mov	r3, r5
 8013308:	f7ed f976 	bl	80005f8 <__aeabi_dmul>
 801330c:	a384      	add	r3, pc, #528	; (adr r3, 8013520 <__ieee754_asin+0x300>)
 801330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013312:	f7ec ffb9 	bl	8000288 <__aeabi_dsub>
 8013316:	4622      	mov	r2, r4
 8013318:	462b      	mov	r3, r5
 801331a:	f7ed f96d 	bl	80005f8 <__aeabi_dmul>
 801331e:	a382      	add	r3, pc, #520	; (adr r3, 8013528 <__ieee754_asin+0x308>)
 8013320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013324:	f7ec ffb2 	bl	800028c <__adddf3>
 8013328:	4622      	mov	r2, r4
 801332a:	462b      	mov	r3, r5
 801332c:	f7ed f964 	bl	80005f8 <__aeabi_dmul>
 8013330:	a37f      	add	r3, pc, #508	; (adr r3, 8013530 <__ieee754_asin+0x310>)
 8013332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013336:	f7ec ffa7 	bl	8000288 <__aeabi_dsub>
 801333a:	4622      	mov	r2, r4
 801333c:	462b      	mov	r3, r5
 801333e:	f7ed f95b 	bl	80005f8 <__aeabi_dmul>
 8013342:	a37d      	add	r3, pc, #500	; (adr r3, 8013538 <__ieee754_asin+0x318>)
 8013344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013348:	f7ec ffa0 	bl	800028c <__adddf3>
 801334c:	4622      	mov	r2, r4
 801334e:	462b      	mov	r3, r5
 8013350:	f7ed f952 	bl	80005f8 <__aeabi_dmul>
 8013354:	a37a      	add	r3, pc, #488	; (adr r3, 8013540 <__ieee754_asin+0x320>)
 8013356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801335a:	ec41 0b18 	vmov	d8, r0, r1
 801335e:	4620      	mov	r0, r4
 8013360:	4629      	mov	r1, r5
 8013362:	f7ed f949 	bl	80005f8 <__aeabi_dmul>
 8013366:	a378      	add	r3, pc, #480	; (adr r3, 8013548 <__ieee754_asin+0x328>)
 8013368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801336c:	f7ec ff8c 	bl	8000288 <__aeabi_dsub>
 8013370:	4622      	mov	r2, r4
 8013372:	462b      	mov	r3, r5
 8013374:	f7ed f940 	bl	80005f8 <__aeabi_dmul>
 8013378:	a375      	add	r3, pc, #468	; (adr r3, 8013550 <__ieee754_asin+0x330>)
 801337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801337e:	f7ec ff85 	bl	800028c <__adddf3>
 8013382:	4622      	mov	r2, r4
 8013384:	462b      	mov	r3, r5
 8013386:	f7ed f937 	bl	80005f8 <__aeabi_dmul>
 801338a:	a373      	add	r3, pc, #460	; (adr r3, 8013558 <__ieee754_asin+0x338>)
 801338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013390:	f7ec ff7a 	bl	8000288 <__aeabi_dsub>
 8013394:	4622      	mov	r2, r4
 8013396:	462b      	mov	r3, r5
 8013398:	f7ed f92e 	bl	80005f8 <__aeabi_dmul>
 801339c:	4b72      	ldr	r3, [pc, #456]	; (8013568 <__ieee754_asin+0x348>)
 801339e:	2200      	movs	r2, #0
 80133a0:	f7ec ff74 	bl	800028c <__adddf3>
 80133a4:	ec45 4b10 	vmov	d0, r4, r5
 80133a8:	4606      	mov	r6, r0
 80133aa:	460f      	mov	r7, r1
 80133ac:	f000 fc24 	bl	8013bf8 <__ieee754_sqrt>
 80133b0:	4b6f      	ldr	r3, [pc, #444]	; (8013570 <__ieee754_asin+0x350>)
 80133b2:	4598      	cmp	r8, r3
 80133b4:	ec5b ab10 	vmov	sl, fp, d0
 80133b8:	f340 80dc 	ble.w	8013574 <__ieee754_asin+0x354>
 80133bc:	4632      	mov	r2, r6
 80133be:	463b      	mov	r3, r7
 80133c0:	ec51 0b18 	vmov	r0, r1, d8
 80133c4:	f7ed fa42 	bl	800084c <__aeabi_ddiv>
 80133c8:	4652      	mov	r2, sl
 80133ca:	465b      	mov	r3, fp
 80133cc:	f7ed f914 	bl	80005f8 <__aeabi_dmul>
 80133d0:	4652      	mov	r2, sl
 80133d2:	465b      	mov	r3, fp
 80133d4:	f7ec ff5a 	bl	800028c <__adddf3>
 80133d8:	4602      	mov	r2, r0
 80133da:	460b      	mov	r3, r1
 80133dc:	f7ec ff56 	bl	800028c <__adddf3>
 80133e0:	a347      	add	r3, pc, #284	; (adr r3, 8013500 <__ieee754_asin+0x2e0>)
 80133e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e6:	f7ec ff4f 	bl	8000288 <__aeabi_dsub>
 80133ea:	4602      	mov	r2, r0
 80133ec:	460b      	mov	r3, r1
 80133ee:	a142      	add	r1, pc, #264	; (adr r1, 80134f8 <__ieee754_asin+0x2d8>)
 80133f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133f4:	f7ec ff48 	bl	8000288 <__aeabi_dsub>
 80133f8:	9b01      	ldr	r3, [sp, #4]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	bfdc      	itt	le
 80133fe:	4602      	movle	r2, r0
 8013400:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8013404:	4604      	mov	r4, r0
 8013406:	460d      	mov	r5, r1
 8013408:	bfdc      	itt	le
 801340a:	4614      	movle	r4, r2
 801340c:	461d      	movle	r5, r3
 801340e:	e743      	b.n	8013298 <__ieee754_asin+0x78>
 8013410:	ee10 2a10 	vmov	r2, s0
 8013414:	ee10 0a10 	vmov	r0, s0
 8013418:	462b      	mov	r3, r5
 801341a:	4629      	mov	r1, r5
 801341c:	f7ed f8ec 	bl	80005f8 <__aeabi_dmul>
 8013420:	a33b      	add	r3, pc, #236	; (adr r3, 8013510 <__ieee754_asin+0x2f0>)
 8013422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013426:	4606      	mov	r6, r0
 8013428:	460f      	mov	r7, r1
 801342a:	f7ed f8e5 	bl	80005f8 <__aeabi_dmul>
 801342e:	a33a      	add	r3, pc, #232	; (adr r3, 8013518 <__ieee754_asin+0x2f8>)
 8013430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013434:	f7ec ff2a 	bl	800028c <__adddf3>
 8013438:	4632      	mov	r2, r6
 801343a:	463b      	mov	r3, r7
 801343c:	f7ed f8dc 	bl	80005f8 <__aeabi_dmul>
 8013440:	a337      	add	r3, pc, #220	; (adr r3, 8013520 <__ieee754_asin+0x300>)
 8013442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013446:	f7ec ff1f 	bl	8000288 <__aeabi_dsub>
 801344a:	4632      	mov	r2, r6
 801344c:	463b      	mov	r3, r7
 801344e:	f7ed f8d3 	bl	80005f8 <__aeabi_dmul>
 8013452:	a335      	add	r3, pc, #212	; (adr r3, 8013528 <__ieee754_asin+0x308>)
 8013454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013458:	f7ec ff18 	bl	800028c <__adddf3>
 801345c:	4632      	mov	r2, r6
 801345e:	463b      	mov	r3, r7
 8013460:	f7ed f8ca 	bl	80005f8 <__aeabi_dmul>
 8013464:	a332      	add	r3, pc, #200	; (adr r3, 8013530 <__ieee754_asin+0x310>)
 8013466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801346a:	f7ec ff0d 	bl	8000288 <__aeabi_dsub>
 801346e:	4632      	mov	r2, r6
 8013470:	463b      	mov	r3, r7
 8013472:	f7ed f8c1 	bl	80005f8 <__aeabi_dmul>
 8013476:	a330      	add	r3, pc, #192	; (adr r3, 8013538 <__ieee754_asin+0x318>)
 8013478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801347c:	f7ec ff06 	bl	800028c <__adddf3>
 8013480:	4632      	mov	r2, r6
 8013482:	463b      	mov	r3, r7
 8013484:	f7ed f8b8 	bl	80005f8 <__aeabi_dmul>
 8013488:	a32d      	add	r3, pc, #180	; (adr r3, 8013540 <__ieee754_asin+0x320>)
 801348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801348e:	4680      	mov	r8, r0
 8013490:	4689      	mov	r9, r1
 8013492:	4630      	mov	r0, r6
 8013494:	4639      	mov	r1, r7
 8013496:	f7ed f8af 	bl	80005f8 <__aeabi_dmul>
 801349a:	a32b      	add	r3, pc, #172	; (adr r3, 8013548 <__ieee754_asin+0x328>)
 801349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a0:	f7ec fef2 	bl	8000288 <__aeabi_dsub>
 80134a4:	4632      	mov	r2, r6
 80134a6:	463b      	mov	r3, r7
 80134a8:	f7ed f8a6 	bl	80005f8 <__aeabi_dmul>
 80134ac:	a328      	add	r3, pc, #160	; (adr r3, 8013550 <__ieee754_asin+0x330>)
 80134ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b2:	f7ec feeb 	bl	800028c <__adddf3>
 80134b6:	4632      	mov	r2, r6
 80134b8:	463b      	mov	r3, r7
 80134ba:	f7ed f89d 	bl	80005f8 <__aeabi_dmul>
 80134be:	a326      	add	r3, pc, #152	; (adr r3, 8013558 <__ieee754_asin+0x338>)
 80134c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c4:	f7ec fee0 	bl	8000288 <__aeabi_dsub>
 80134c8:	4632      	mov	r2, r6
 80134ca:	463b      	mov	r3, r7
 80134cc:	f7ed f894 	bl	80005f8 <__aeabi_dmul>
 80134d0:	4b25      	ldr	r3, [pc, #148]	; (8013568 <__ieee754_asin+0x348>)
 80134d2:	2200      	movs	r2, #0
 80134d4:	f7ec feda 	bl	800028c <__adddf3>
 80134d8:	4602      	mov	r2, r0
 80134da:	460b      	mov	r3, r1
 80134dc:	4640      	mov	r0, r8
 80134de:	4649      	mov	r1, r9
 80134e0:	f7ed f9b4 	bl	800084c <__aeabi_ddiv>
 80134e4:	4622      	mov	r2, r4
 80134e6:	462b      	mov	r3, r5
 80134e8:	f7ed f886 	bl	80005f8 <__aeabi_dmul>
 80134ec:	4602      	mov	r2, r0
 80134ee:	460b      	mov	r3, r1
 80134f0:	4620      	mov	r0, r4
 80134f2:	4629      	mov	r1, r5
 80134f4:	e6bf      	b.n	8013276 <__ieee754_asin+0x56>
 80134f6:	bf00      	nop
 80134f8:	54442d18 	.word	0x54442d18
 80134fc:	3ff921fb 	.word	0x3ff921fb
 8013500:	33145c07 	.word	0x33145c07
 8013504:	3c91a626 	.word	0x3c91a626
 8013508:	8800759c 	.word	0x8800759c
 801350c:	7e37e43c 	.word	0x7e37e43c
 8013510:	0dfdf709 	.word	0x0dfdf709
 8013514:	3f023de1 	.word	0x3f023de1
 8013518:	7501b288 	.word	0x7501b288
 801351c:	3f49efe0 	.word	0x3f49efe0
 8013520:	b5688f3b 	.word	0xb5688f3b
 8013524:	3fa48228 	.word	0x3fa48228
 8013528:	0e884455 	.word	0x0e884455
 801352c:	3fc9c155 	.word	0x3fc9c155
 8013530:	03eb6f7d 	.word	0x03eb6f7d
 8013534:	3fd4d612 	.word	0x3fd4d612
 8013538:	55555555 	.word	0x55555555
 801353c:	3fc55555 	.word	0x3fc55555
 8013540:	b12e9282 	.word	0xb12e9282
 8013544:	3fb3b8c5 	.word	0x3fb3b8c5
 8013548:	1b8d0159 	.word	0x1b8d0159
 801354c:	3fe6066c 	.word	0x3fe6066c
 8013550:	9c598ac8 	.word	0x9c598ac8
 8013554:	40002ae5 	.word	0x40002ae5
 8013558:	1c8a2d4b 	.word	0x1c8a2d4b
 801355c:	40033a27 	.word	0x40033a27
 8013560:	3fefffff 	.word	0x3fefffff
 8013564:	3fdfffff 	.word	0x3fdfffff
 8013568:	3ff00000 	.word	0x3ff00000
 801356c:	3fe00000 	.word	0x3fe00000
 8013570:	3fef3332 	.word	0x3fef3332
 8013574:	ee10 2a10 	vmov	r2, s0
 8013578:	ee10 0a10 	vmov	r0, s0
 801357c:	465b      	mov	r3, fp
 801357e:	4659      	mov	r1, fp
 8013580:	f7ec fe84 	bl	800028c <__adddf3>
 8013584:	4632      	mov	r2, r6
 8013586:	463b      	mov	r3, r7
 8013588:	ec41 0b19 	vmov	d9, r0, r1
 801358c:	ec51 0b18 	vmov	r0, r1, d8
 8013590:	f7ed f95c 	bl	800084c <__aeabi_ddiv>
 8013594:	4602      	mov	r2, r0
 8013596:	460b      	mov	r3, r1
 8013598:	ec51 0b19 	vmov	r0, r1, d9
 801359c:	f7ed f82c 	bl	80005f8 <__aeabi_dmul>
 80135a0:	f04f 0800 	mov.w	r8, #0
 80135a4:	4606      	mov	r6, r0
 80135a6:	460f      	mov	r7, r1
 80135a8:	4642      	mov	r2, r8
 80135aa:	465b      	mov	r3, fp
 80135ac:	4640      	mov	r0, r8
 80135ae:	4659      	mov	r1, fp
 80135b0:	f7ed f822 	bl	80005f8 <__aeabi_dmul>
 80135b4:	4602      	mov	r2, r0
 80135b6:	460b      	mov	r3, r1
 80135b8:	4620      	mov	r0, r4
 80135ba:	4629      	mov	r1, r5
 80135bc:	f7ec fe64 	bl	8000288 <__aeabi_dsub>
 80135c0:	4642      	mov	r2, r8
 80135c2:	4604      	mov	r4, r0
 80135c4:	460d      	mov	r5, r1
 80135c6:	465b      	mov	r3, fp
 80135c8:	4650      	mov	r0, sl
 80135ca:	4659      	mov	r1, fp
 80135cc:	f7ec fe5e 	bl	800028c <__adddf3>
 80135d0:	4602      	mov	r2, r0
 80135d2:	460b      	mov	r3, r1
 80135d4:	4620      	mov	r0, r4
 80135d6:	4629      	mov	r1, r5
 80135d8:	f7ed f938 	bl	800084c <__aeabi_ddiv>
 80135dc:	4602      	mov	r2, r0
 80135de:	460b      	mov	r3, r1
 80135e0:	f7ec fe54 	bl	800028c <__adddf3>
 80135e4:	4602      	mov	r2, r0
 80135e6:	460b      	mov	r3, r1
 80135e8:	a113      	add	r1, pc, #76	; (adr r1, 8013638 <__ieee754_asin+0x418>)
 80135ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135ee:	f7ec fe4b 	bl	8000288 <__aeabi_dsub>
 80135f2:	4602      	mov	r2, r0
 80135f4:	460b      	mov	r3, r1
 80135f6:	4630      	mov	r0, r6
 80135f8:	4639      	mov	r1, r7
 80135fa:	f7ec fe45 	bl	8000288 <__aeabi_dsub>
 80135fe:	4642      	mov	r2, r8
 8013600:	4604      	mov	r4, r0
 8013602:	460d      	mov	r5, r1
 8013604:	465b      	mov	r3, fp
 8013606:	4640      	mov	r0, r8
 8013608:	4659      	mov	r1, fp
 801360a:	f7ec fe3f 	bl	800028c <__adddf3>
 801360e:	4602      	mov	r2, r0
 8013610:	460b      	mov	r3, r1
 8013612:	a10b      	add	r1, pc, #44	; (adr r1, 8013640 <__ieee754_asin+0x420>)
 8013614:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013618:	f7ec fe36 	bl	8000288 <__aeabi_dsub>
 801361c:	4602      	mov	r2, r0
 801361e:	460b      	mov	r3, r1
 8013620:	4620      	mov	r0, r4
 8013622:	4629      	mov	r1, r5
 8013624:	f7ec fe30 	bl	8000288 <__aeabi_dsub>
 8013628:	4602      	mov	r2, r0
 801362a:	460b      	mov	r3, r1
 801362c:	a104      	add	r1, pc, #16	; (adr r1, 8013640 <__ieee754_asin+0x420>)
 801362e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013632:	e6df      	b.n	80133f4 <__ieee754_asin+0x1d4>
 8013634:	f3af 8000 	nop.w
 8013638:	33145c07 	.word	0x33145c07
 801363c:	3c91a626 	.word	0x3c91a626
 8013640:	54442d18 	.word	0x54442d18
 8013644:	3fe921fb 	.word	0x3fe921fb

08013648 <__ieee754_atan2>:
 8013648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801364c:	ec57 6b11 	vmov	r6, r7, d1
 8013650:	4273      	negs	r3, r6
 8013652:	f8df e184 	ldr.w	lr, [pc, #388]	; 80137d8 <__ieee754_atan2+0x190>
 8013656:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801365a:	4333      	orrs	r3, r6
 801365c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013660:	4573      	cmp	r3, lr
 8013662:	ec51 0b10 	vmov	r0, r1, d0
 8013666:	ee11 8a10 	vmov	r8, s2
 801366a:	d80a      	bhi.n	8013682 <__ieee754_atan2+0x3a>
 801366c:	4244      	negs	r4, r0
 801366e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013672:	4304      	orrs	r4, r0
 8013674:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013678:	4574      	cmp	r4, lr
 801367a:	ee10 9a10 	vmov	r9, s0
 801367e:	468c      	mov	ip, r1
 8013680:	d907      	bls.n	8013692 <__ieee754_atan2+0x4a>
 8013682:	4632      	mov	r2, r6
 8013684:	463b      	mov	r3, r7
 8013686:	f7ec fe01 	bl	800028c <__adddf3>
 801368a:	ec41 0b10 	vmov	d0, r0, r1
 801368e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013692:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8013696:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801369a:	4334      	orrs	r4, r6
 801369c:	d103      	bne.n	80136a6 <__ieee754_atan2+0x5e>
 801369e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136a2:	f001 ba41 	b.w	8014b28 <atan>
 80136a6:	17bc      	asrs	r4, r7, #30
 80136a8:	f004 0402 	and.w	r4, r4, #2
 80136ac:	ea53 0909 	orrs.w	r9, r3, r9
 80136b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80136b4:	d107      	bne.n	80136c6 <__ieee754_atan2+0x7e>
 80136b6:	2c02      	cmp	r4, #2
 80136b8:	d060      	beq.n	801377c <__ieee754_atan2+0x134>
 80136ba:	2c03      	cmp	r4, #3
 80136bc:	d1e5      	bne.n	801368a <__ieee754_atan2+0x42>
 80136be:	a142      	add	r1, pc, #264	; (adr r1, 80137c8 <__ieee754_atan2+0x180>)
 80136c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136c4:	e7e1      	b.n	801368a <__ieee754_atan2+0x42>
 80136c6:	ea52 0808 	orrs.w	r8, r2, r8
 80136ca:	d106      	bne.n	80136da <__ieee754_atan2+0x92>
 80136cc:	f1bc 0f00 	cmp.w	ip, #0
 80136d0:	da5f      	bge.n	8013792 <__ieee754_atan2+0x14a>
 80136d2:	a13f      	add	r1, pc, #252	; (adr r1, 80137d0 <__ieee754_atan2+0x188>)
 80136d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136d8:	e7d7      	b.n	801368a <__ieee754_atan2+0x42>
 80136da:	4572      	cmp	r2, lr
 80136dc:	d10f      	bne.n	80136fe <__ieee754_atan2+0xb6>
 80136de:	4293      	cmp	r3, r2
 80136e0:	f104 34ff 	add.w	r4, r4, #4294967295
 80136e4:	d107      	bne.n	80136f6 <__ieee754_atan2+0xae>
 80136e6:	2c02      	cmp	r4, #2
 80136e8:	d84c      	bhi.n	8013784 <__ieee754_atan2+0x13c>
 80136ea:	4b35      	ldr	r3, [pc, #212]	; (80137c0 <__ieee754_atan2+0x178>)
 80136ec:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80136f0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80136f4:	e7c9      	b.n	801368a <__ieee754_atan2+0x42>
 80136f6:	2c02      	cmp	r4, #2
 80136f8:	d848      	bhi.n	801378c <__ieee754_atan2+0x144>
 80136fa:	4b32      	ldr	r3, [pc, #200]	; (80137c4 <__ieee754_atan2+0x17c>)
 80136fc:	e7f6      	b.n	80136ec <__ieee754_atan2+0xa4>
 80136fe:	4573      	cmp	r3, lr
 8013700:	d0e4      	beq.n	80136cc <__ieee754_atan2+0x84>
 8013702:	1a9b      	subs	r3, r3, r2
 8013704:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8013708:	ea4f 5223 	mov.w	r2, r3, asr #20
 801370c:	da1e      	bge.n	801374c <__ieee754_atan2+0x104>
 801370e:	2f00      	cmp	r7, #0
 8013710:	da01      	bge.n	8013716 <__ieee754_atan2+0xce>
 8013712:	323c      	adds	r2, #60	; 0x3c
 8013714:	db1e      	blt.n	8013754 <__ieee754_atan2+0x10c>
 8013716:	4632      	mov	r2, r6
 8013718:	463b      	mov	r3, r7
 801371a:	f7ed f897 	bl	800084c <__aeabi_ddiv>
 801371e:	ec41 0b10 	vmov	d0, r0, r1
 8013722:	f001 fba1 	bl	8014e68 <fabs>
 8013726:	f001 f9ff 	bl	8014b28 <atan>
 801372a:	ec51 0b10 	vmov	r0, r1, d0
 801372e:	2c01      	cmp	r4, #1
 8013730:	d013      	beq.n	801375a <__ieee754_atan2+0x112>
 8013732:	2c02      	cmp	r4, #2
 8013734:	d015      	beq.n	8013762 <__ieee754_atan2+0x11a>
 8013736:	2c00      	cmp	r4, #0
 8013738:	d0a7      	beq.n	801368a <__ieee754_atan2+0x42>
 801373a:	a319      	add	r3, pc, #100	; (adr r3, 80137a0 <__ieee754_atan2+0x158>)
 801373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013740:	f7ec fda2 	bl	8000288 <__aeabi_dsub>
 8013744:	a318      	add	r3, pc, #96	; (adr r3, 80137a8 <__ieee754_atan2+0x160>)
 8013746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801374a:	e014      	b.n	8013776 <__ieee754_atan2+0x12e>
 801374c:	a118      	add	r1, pc, #96	; (adr r1, 80137b0 <__ieee754_atan2+0x168>)
 801374e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013752:	e7ec      	b.n	801372e <__ieee754_atan2+0xe6>
 8013754:	2000      	movs	r0, #0
 8013756:	2100      	movs	r1, #0
 8013758:	e7e9      	b.n	801372e <__ieee754_atan2+0xe6>
 801375a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801375e:	4619      	mov	r1, r3
 8013760:	e793      	b.n	801368a <__ieee754_atan2+0x42>
 8013762:	a30f      	add	r3, pc, #60	; (adr r3, 80137a0 <__ieee754_atan2+0x158>)
 8013764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013768:	f7ec fd8e 	bl	8000288 <__aeabi_dsub>
 801376c:	4602      	mov	r2, r0
 801376e:	460b      	mov	r3, r1
 8013770:	a10d      	add	r1, pc, #52	; (adr r1, 80137a8 <__ieee754_atan2+0x160>)
 8013772:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013776:	f7ec fd87 	bl	8000288 <__aeabi_dsub>
 801377a:	e786      	b.n	801368a <__ieee754_atan2+0x42>
 801377c:	a10a      	add	r1, pc, #40	; (adr r1, 80137a8 <__ieee754_atan2+0x160>)
 801377e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013782:	e782      	b.n	801368a <__ieee754_atan2+0x42>
 8013784:	a10c      	add	r1, pc, #48	; (adr r1, 80137b8 <__ieee754_atan2+0x170>)
 8013786:	e9d1 0100 	ldrd	r0, r1, [r1]
 801378a:	e77e      	b.n	801368a <__ieee754_atan2+0x42>
 801378c:	2000      	movs	r0, #0
 801378e:	2100      	movs	r1, #0
 8013790:	e77b      	b.n	801368a <__ieee754_atan2+0x42>
 8013792:	a107      	add	r1, pc, #28	; (adr r1, 80137b0 <__ieee754_atan2+0x168>)
 8013794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013798:	e777      	b.n	801368a <__ieee754_atan2+0x42>
 801379a:	bf00      	nop
 801379c:	f3af 8000 	nop.w
 80137a0:	33145c07 	.word	0x33145c07
 80137a4:	3ca1a626 	.word	0x3ca1a626
 80137a8:	54442d18 	.word	0x54442d18
 80137ac:	400921fb 	.word	0x400921fb
 80137b0:	54442d18 	.word	0x54442d18
 80137b4:	3ff921fb 	.word	0x3ff921fb
 80137b8:	54442d18 	.word	0x54442d18
 80137bc:	3fe921fb 	.word	0x3fe921fb
 80137c0:	08015df0 	.word	0x08015df0
 80137c4:	08015e08 	.word	0x08015e08
 80137c8:	54442d18 	.word	0x54442d18
 80137cc:	c00921fb 	.word	0xc00921fb
 80137d0:	54442d18 	.word	0x54442d18
 80137d4:	bff921fb 	.word	0xbff921fb
 80137d8:	7ff00000 	.word	0x7ff00000
 80137dc:	00000000 	.word	0x00000000

080137e0 <__ieee754_rem_pio2>:
 80137e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137e4:	ed2d 8b02 	vpush	{d8}
 80137e8:	ec55 4b10 	vmov	r4, r5, d0
 80137ec:	4bca      	ldr	r3, [pc, #808]	; (8013b18 <__ieee754_rem_pio2+0x338>)
 80137ee:	b08b      	sub	sp, #44	; 0x2c
 80137f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80137f4:	4598      	cmp	r8, r3
 80137f6:	4682      	mov	sl, r0
 80137f8:	9502      	str	r5, [sp, #8]
 80137fa:	dc08      	bgt.n	801380e <__ieee754_rem_pio2+0x2e>
 80137fc:	2200      	movs	r2, #0
 80137fe:	2300      	movs	r3, #0
 8013800:	ed80 0b00 	vstr	d0, [r0]
 8013804:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013808:	f04f 0b00 	mov.w	fp, #0
 801380c:	e028      	b.n	8013860 <__ieee754_rem_pio2+0x80>
 801380e:	4bc3      	ldr	r3, [pc, #780]	; (8013b1c <__ieee754_rem_pio2+0x33c>)
 8013810:	4598      	cmp	r8, r3
 8013812:	dc78      	bgt.n	8013906 <__ieee754_rem_pio2+0x126>
 8013814:	9b02      	ldr	r3, [sp, #8]
 8013816:	4ec2      	ldr	r6, [pc, #776]	; (8013b20 <__ieee754_rem_pio2+0x340>)
 8013818:	2b00      	cmp	r3, #0
 801381a:	ee10 0a10 	vmov	r0, s0
 801381e:	a3b0      	add	r3, pc, #704	; (adr r3, 8013ae0 <__ieee754_rem_pio2+0x300>)
 8013820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013824:	4629      	mov	r1, r5
 8013826:	dd39      	ble.n	801389c <__ieee754_rem_pio2+0xbc>
 8013828:	f7ec fd2e 	bl	8000288 <__aeabi_dsub>
 801382c:	45b0      	cmp	r8, r6
 801382e:	4604      	mov	r4, r0
 8013830:	460d      	mov	r5, r1
 8013832:	d01b      	beq.n	801386c <__ieee754_rem_pio2+0x8c>
 8013834:	a3ac      	add	r3, pc, #688	; (adr r3, 8013ae8 <__ieee754_rem_pio2+0x308>)
 8013836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801383a:	f7ec fd25 	bl	8000288 <__aeabi_dsub>
 801383e:	4602      	mov	r2, r0
 8013840:	460b      	mov	r3, r1
 8013842:	e9ca 2300 	strd	r2, r3, [sl]
 8013846:	4620      	mov	r0, r4
 8013848:	4629      	mov	r1, r5
 801384a:	f7ec fd1d 	bl	8000288 <__aeabi_dsub>
 801384e:	a3a6      	add	r3, pc, #664	; (adr r3, 8013ae8 <__ieee754_rem_pio2+0x308>)
 8013850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013854:	f7ec fd18 	bl	8000288 <__aeabi_dsub>
 8013858:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801385c:	f04f 0b01 	mov.w	fp, #1
 8013860:	4658      	mov	r0, fp
 8013862:	b00b      	add	sp, #44	; 0x2c
 8013864:	ecbd 8b02 	vpop	{d8}
 8013868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801386c:	a3a0      	add	r3, pc, #640	; (adr r3, 8013af0 <__ieee754_rem_pio2+0x310>)
 801386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013872:	f7ec fd09 	bl	8000288 <__aeabi_dsub>
 8013876:	a3a0      	add	r3, pc, #640	; (adr r3, 8013af8 <__ieee754_rem_pio2+0x318>)
 8013878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801387c:	4604      	mov	r4, r0
 801387e:	460d      	mov	r5, r1
 8013880:	f7ec fd02 	bl	8000288 <__aeabi_dsub>
 8013884:	4602      	mov	r2, r0
 8013886:	460b      	mov	r3, r1
 8013888:	e9ca 2300 	strd	r2, r3, [sl]
 801388c:	4620      	mov	r0, r4
 801388e:	4629      	mov	r1, r5
 8013890:	f7ec fcfa 	bl	8000288 <__aeabi_dsub>
 8013894:	a398      	add	r3, pc, #608	; (adr r3, 8013af8 <__ieee754_rem_pio2+0x318>)
 8013896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801389a:	e7db      	b.n	8013854 <__ieee754_rem_pio2+0x74>
 801389c:	f7ec fcf6 	bl	800028c <__adddf3>
 80138a0:	45b0      	cmp	r8, r6
 80138a2:	4604      	mov	r4, r0
 80138a4:	460d      	mov	r5, r1
 80138a6:	d016      	beq.n	80138d6 <__ieee754_rem_pio2+0xf6>
 80138a8:	a38f      	add	r3, pc, #572	; (adr r3, 8013ae8 <__ieee754_rem_pio2+0x308>)
 80138aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ae:	f7ec fced 	bl	800028c <__adddf3>
 80138b2:	4602      	mov	r2, r0
 80138b4:	460b      	mov	r3, r1
 80138b6:	e9ca 2300 	strd	r2, r3, [sl]
 80138ba:	4620      	mov	r0, r4
 80138bc:	4629      	mov	r1, r5
 80138be:	f7ec fce3 	bl	8000288 <__aeabi_dsub>
 80138c2:	a389      	add	r3, pc, #548	; (adr r3, 8013ae8 <__ieee754_rem_pio2+0x308>)
 80138c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138c8:	f7ec fce0 	bl	800028c <__adddf3>
 80138cc:	f04f 3bff 	mov.w	fp, #4294967295
 80138d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80138d4:	e7c4      	b.n	8013860 <__ieee754_rem_pio2+0x80>
 80138d6:	a386      	add	r3, pc, #536	; (adr r3, 8013af0 <__ieee754_rem_pio2+0x310>)
 80138d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138dc:	f7ec fcd6 	bl	800028c <__adddf3>
 80138e0:	a385      	add	r3, pc, #532	; (adr r3, 8013af8 <__ieee754_rem_pio2+0x318>)
 80138e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e6:	4604      	mov	r4, r0
 80138e8:	460d      	mov	r5, r1
 80138ea:	f7ec fccf 	bl	800028c <__adddf3>
 80138ee:	4602      	mov	r2, r0
 80138f0:	460b      	mov	r3, r1
 80138f2:	e9ca 2300 	strd	r2, r3, [sl]
 80138f6:	4620      	mov	r0, r4
 80138f8:	4629      	mov	r1, r5
 80138fa:	f7ec fcc5 	bl	8000288 <__aeabi_dsub>
 80138fe:	a37e      	add	r3, pc, #504	; (adr r3, 8013af8 <__ieee754_rem_pio2+0x318>)
 8013900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013904:	e7e0      	b.n	80138c8 <__ieee754_rem_pio2+0xe8>
 8013906:	4b87      	ldr	r3, [pc, #540]	; (8013b24 <__ieee754_rem_pio2+0x344>)
 8013908:	4598      	cmp	r8, r3
 801390a:	f300 80d9 	bgt.w	8013ac0 <__ieee754_rem_pio2+0x2e0>
 801390e:	f001 faab 	bl	8014e68 <fabs>
 8013912:	ec55 4b10 	vmov	r4, r5, d0
 8013916:	ee10 0a10 	vmov	r0, s0
 801391a:	a379      	add	r3, pc, #484	; (adr r3, 8013b00 <__ieee754_rem_pio2+0x320>)
 801391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013920:	4629      	mov	r1, r5
 8013922:	f7ec fe69 	bl	80005f8 <__aeabi_dmul>
 8013926:	4b80      	ldr	r3, [pc, #512]	; (8013b28 <__ieee754_rem_pio2+0x348>)
 8013928:	2200      	movs	r2, #0
 801392a:	f7ec fcaf 	bl	800028c <__adddf3>
 801392e:	f7ed f913 	bl	8000b58 <__aeabi_d2iz>
 8013932:	4683      	mov	fp, r0
 8013934:	f7ec fdf6 	bl	8000524 <__aeabi_i2d>
 8013938:	4602      	mov	r2, r0
 801393a:	460b      	mov	r3, r1
 801393c:	ec43 2b18 	vmov	d8, r2, r3
 8013940:	a367      	add	r3, pc, #412	; (adr r3, 8013ae0 <__ieee754_rem_pio2+0x300>)
 8013942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013946:	f7ec fe57 	bl	80005f8 <__aeabi_dmul>
 801394a:	4602      	mov	r2, r0
 801394c:	460b      	mov	r3, r1
 801394e:	4620      	mov	r0, r4
 8013950:	4629      	mov	r1, r5
 8013952:	f7ec fc99 	bl	8000288 <__aeabi_dsub>
 8013956:	a364      	add	r3, pc, #400	; (adr r3, 8013ae8 <__ieee754_rem_pio2+0x308>)
 8013958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801395c:	4606      	mov	r6, r0
 801395e:	460f      	mov	r7, r1
 8013960:	ec51 0b18 	vmov	r0, r1, d8
 8013964:	f7ec fe48 	bl	80005f8 <__aeabi_dmul>
 8013968:	f1bb 0f1f 	cmp.w	fp, #31
 801396c:	4604      	mov	r4, r0
 801396e:	460d      	mov	r5, r1
 8013970:	dc0d      	bgt.n	801398e <__ieee754_rem_pio2+0x1ae>
 8013972:	4b6e      	ldr	r3, [pc, #440]	; (8013b2c <__ieee754_rem_pio2+0x34c>)
 8013974:	f10b 32ff 	add.w	r2, fp, #4294967295
 8013978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801397c:	4543      	cmp	r3, r8
 801397e:	d006      	beq.n	801398e <__ieee754_rem_pio2+0x1ae>
 8013980:	4622      	mov	r2, r4
 8013982:	462b      	mov	r3, r5
 8013984:	4630      	mov	r0, r6
 8013986:	4639      	mov	r1, r7
 8013988:	f7ec fc7e 	bl	8000288 <__aeabi_dsub>
 801398c:	e00f      	b.n	80139ae <__ieee754_rem_pio2+0x1ce>
 801398e:	462b      	mov	r3, r5
 8013990:	4622      	mov	r2, r4
 8013992:	4630      	mov	r0, r6
 8013994:	4639      	mov	r1, r7
 8013996:	f7ec fc77 	bl	8000288 <__aeabi_dsub>
 801399a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801399e:	9303      	str	r3, [sp, #12]
 80139a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80139a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80139a8:	f1b8 0f10 	cmp.w	r8, #16
 80139ac:	dc02      	bgt.n	80139b4 <__ieee754_rem_pio2+0x1d4>
 80139ae:	e9ca 0100 	strd	r0, r1, [sl]
 80139b2:	e039      	b.n	8013a28 <__ieee754_rem_pio2+0x248>
 80139b4:	a34e      	add	r3, pc, #312	; (adr r3, 8013af0 <__ieee754_rem_pio2+0x310>)
 80139b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ba:	ec51 0b18 	vmov	r0, r1, d8
 80139be:	f7ec fe1b 	bl	80005f8 <__aeabi_dmul>
 80139c2:	4604      	mov	r4, r0
 80139c4:	460d      	mov	r5, r1
 80139c6:	4602      	mov	r2, r0
 80139c8:	460b      	mov	r3, r1
 80139ca:	4630      	mov	r0, r6
 80139cc:	4639      	mov	r1, r7
 80139ce:	f7ec fc5b 	bl	8000288 <__aeabi_dsub>
 80139d2:	4602      	mov	r2, r0
 80139d4:	460b      	mov	r3, r1
 80139d6:	4680      	mov	r8, r0
 80139d8:	4689      	mov	r9, r1
 80139da:	4630      	mov	r0, r6
 80139dc:	4639      	mov	r1, r7
 80139de:	f7ec fc53 	bl	8000288 <__aeabi_dsub>
 80139e2:	4622      	mov	r2, r4
 80139e4:	462b      	mov	r3, r5
 80139e6:	f7ec fc4f 	bl	8000288 <__aeabi_dsub>
 80139ea:	a343      	add	r3, pc, #268	; (adr r3, 8013af8 <__ieee754_rem_pio2+0x318>)
 80139ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f0:	4604      	mov	r4, r0
 80139f2:	460d      	mov	r5, r1
 80139f4:	ec51 0b18 	vmov	r0, r1, d8
 80139f8:	f7ec fdfe 	bl	80005f8 <__aeabi_dmul>
 80139fc:	4622      	mov	r2, r4
 80139fe:	462b      	mov	r3, r5
 8013a00:	f7ec fc42 	bl	8000288 <__aeabi_dsub>
 8013a04:	4602      	mov	r2, r0
 8013a06:	460b      	mov	r3, r1
 8013a08:	4604      	mov	r4, r0
 8013a0a:	460d      	mov	r5, r1
 8013a0c:	4640      	mov	r0, r8
 8013a0e:	4649      	mov	r1, r9
 8013a10:	f7ec fc3a 	bl	8000288 <__aeabi_dsub>
 8013a14:	9a03      	ldr	r2, [sp, #12]
 8013a16:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013a1a:	1ad3      	subs	r3, r2, r3
 8013a1c:	2b31      	cmp	r3, #49	; 0x31
 8013a1e:	dc24      	bgt.n	8013a6a <__ieee754_rem_pio2+0x28a>
 8013a20:	e9ca 0100 	strd	r0, r1, [sl]
 8013a24:	4646      	mov	r6, r8
 8013a26:	464f      	mov	r7, r9
 8013a28:	e9da 8900 	ldrd	r8, r9, [sl]
 8013a2c:	4630      	mov	r0, r6
 8013a2e:	4642      	mov	r2, r8
 8013a30:	464b      	mov	r3, r9
 8013a32:	4639      	mov	r1, r7
 8013a34:	f7ec fc28 	bl	8000288 <__aeabi_dsub>
 8013a38:	462b      	mov	r3, r5
 8013a3a:	4622      	mov	r2, r4
 8013a3c:	f7ec fc24 	bl	8000288 <__aeabi_dsub>
 8013a40:	9b02      	ldr	r3, [sp, #8]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013a48:	f6bf af0a 	bge.w	8013860 <__ieee754_rem_pio2+0x80>
 8013a4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013a50:	f8ca 3004 	str.w	r3, [sl, #4]
 8013a54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a58:	f8ca 8000 	str.w	r8, [sl]
 8013a5c:	f8ca 0008 	str.w	r0, [sl, #8]
 8013a60:	f8ca 300c 	str.w	r3, [sl, #12]
 8013a64:	f1cb 0b00 	rsb	fp, fp, #0
 8013a68:	e6fa      	b.n	8013860 <__ieee754_rem_pio2+0x80>
 8013a6a:	a327      	add	r3, pc, #156	; (adr r3, 8013b08 <__ieee754_rem_pio2+0x328>)
 8013a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a70:	ec51 0b18 	vmov	r0, r1, d8
 8013a74:	f7ec fdc0 	bl	80005f8 <__aeabi_dmul>
 8013a78:	4604      	mov	r4, r0
 8013a7a:	460d      	mov	r5, r1
 8013a7c:	4602      	mov	r2, r0
 8013a7e:	460b      	mov	r3, r1
 8013a80:	4640      	mov	r0, r8
 8013a82:	4649      	mov	r1, r9
 8013a84:	f7ec fc00 	bl	8000288 <__aeabi_dsub>
 8013a88:	4602      	mov	r2, r0
 8013a8a:	460b      	mov	r3, r1
 8013a8c:	4606      	mov	r6, r0
 8013a8e:	460f      	mov	r7, r1
 8013a90:	4640      	mov	r0, r8
 8013a92:	4649      	mov	r1, r9
 8013a94:	f7ec fbf8 	bl	8000288 <__aeabi_dsub>
 8013a98:	4622      	mov	r2, r4
 8013a9a:	462b      	mov	r3, r5
 8013a9c:	f7ec fbf4 	bl	8000288 <__aeabi_dsub>
 8013aa0:	a31b      	add	r3, pc, #108	; (adr r3, 8013b10 <__ieee754_rem_pio2+0x330>)
 8013aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aa6:	4604      	mov	r4, r0
 8013aa8:	460d      	mov	r5, r1
 8013aaa:	ec51 0b18 	vmov	r0, r1, d8
 8013aae:	f7ec fda3 	bl	80005f8 <__aeabi_dmul>
 8013ab2:	4622      	mov	r2, r4
 8013ab4:	462b      	mov	r3, r5
 8013ab6:	f7ec fbe7 	bl	8000288 <__aeabi_dsub>
 8013aba:	4604      	mov	r4, r0
 8013abc:	460d      	mov	r5, r1
 8013abe:	e75f      	b.n	8013980 <__ieee754_rem_pio2+0x1a0>
 8013ac0:	4b1b      	ldr	r3, [pc, #108]	; (8013b30 <__ieee754_rem_pio2+0x350>)
 8013ac2:	4598      	cmp	r8, r3
 8013ac4:	dd36      	ble.n	8013b34 <__ieee754_rem_pio2+0x354>
 8013ac6:	ee10 2a10 	vmov	r2, s0
 8013aca:	462b      	mov	r3, r5
 8013acc:	4620      	mov	r0, r4
 8013ace:	4629      	mov	r1, r5
 8013ad0:	f7ec fbda 	bl	8000288 <__aeabi_dsub>
 8013ad4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013ad8:	e9ca 0100 	strd	r0, r1, [sl]
 8013adc:	e694      	b.n	8013808 <__ieee754_rem_pio2+0x28>
 8013ade:	bf00      	nop
 8013ae0:	54400000 	.word	0x54400000
 8013ae4:	3ff921fb 	.word	0x3ff921fb
 8013ae8:	1a626331 	.word	0x1a626331
 8013aec:	3dd0b461 	.word	0x3dd0b461
 8013af0:	1a600000 	.word	0x1a600000
 8013af4:	3dd0b461 	.word	0x3dd0b461
 8013af8:	2e037073 	.word	0x2e037073
 8013afc:	3ba3198a 	.word	0x3ba3198a
 8013b00:	6dc9c883 	.word	0x6dc9c883
 8013b04:	3fe45f30 	.word	0x3fe45f30
 8013b08:	2e000000 	.word	0x2e000000
 8013b0c:	3ba3198a 	.word	0x3ba3198a
 8013b10:	252049c1 	.word	0x252049c1
 8013b14:	397b839a 	.word	0x397b839a
 8013b18:	3fe921fb 	.word	0x3fe921fb
 8013b1c:	4002d97b 	.word	0x4002d97b
 8013b20:	3ff921fb 	.word	0x3ff921fb
 8013b24:	413921fb 	.word	0x413921fb
 8013b28:	3fe00000 	.word	0x3fe00000
 8013b2c:	08015e20 	.word	0x08015e20
 8013b30:	7fefffff 	.word	0x7fefffff
 8013b34:	ea4f 5428 	mov.w	r4, r8, asr #20
 8013b38:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8013b3c:	ee10 0a10 	vmov	r0, s0
 8013b40:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8013b44:	ee10 6a10 	vmov	r6, s0
 8013b48:	460f      	mov	r7, r1
 8013b4a:	f7ed f805 	bl	8000b58 <__aeabi_d2iz>
 8013b4e:	f7ec fce9 	bl	8000524 <__aeabi_i2d>
 8013b52:	4602      	mov	r2, r0
 8013b54:	460b      	mov	r3, r1
 8013b56:	4630      	mov	r0, r6
 8013b58:	4639      	mov	r1, r7
 8013b5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013b5e:	f7ec fb93 	bl	8000288 <__aeabi_dsub>
 8013b62:	4b23      	ldr	r3, [pc, #140]	; (8013bf0 <__ieee754_rem_pio2+0x410>)
 8013b64:	2200      	movs	r2, #0
 8013b66:	f7ec fd47 	bl	80005f8 <__aeabi_dmul>
 8013b6a:	460f      	mov	r7, r1
 8013b6c:	4606      	mov	r6, r0
 8013b6e:	f7ec fff3 	bl	8000b58 <__aeabi_d2iz>
 8013b72:	f7ec fcd7 	bl	8000524 <__aeabi_i2d>
 8013b76:	4602      	mov	r2, r0
 8013b78:	460b      	mov	r3, r1
 8013b7a:	4630      	mov	r0, r6
 8013b7c:	4639      	mov	r1, r7
 8013b7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013b82:	f7ec fb81 	bl	8000288 <__aeabi_dsub>
 8013b86:	4b1a      	ldr	r3, [pc, #104]	; (8013bf0 <__ieee754_rem_pio2+0x410>)
 8013b88:	2200      	movs	r2, #0
 8013b8a:	f7ec fd35 	bl	80005f8 <__aeabi_dmul>
 8013b8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013b92:	ad04      	add	r5, sp, #16
 8013b94:	f04f 0803 	mov.w	r8, #3
 8013b98:	46a9      	mov	r9, r5
 8013b9a:	2600      	movs	r6, #0
 8013b9c:	2700      	movs	r7, #0
 8013b9e:	4632      	mov	r2, r6
 8013ba0:	463b      	mov	r3, r7
 8013ba2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8013ba6:	46c3      	mov	fp, r8
 8013ba8:	3d08      	subs	r5, #8
 8013baa:	f108 38ff 	add.w	r8, r8, #4294967295
 8013bae:	f7ec ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8013bb2:	2800      	cmp	r0, #0
 8013bb4:	d1f3      	bne.n	8013b9e <__ieee754_rem_pio2+0x3be>
 8013bb6:	4b0f      	ldr	r3, [pc, #60]	; (8013bf4 <__ieee754_rem_pio2+0x414>)
 8013bb8:	9301      	str	r3, [sp, #4]
 8013bba:	2302      	movs	r3, #2
 8013bbc:	9300      	str	r3, [sp, #0]
 8013bbe:	4622      	mov	r2, r4
 8013bc0:	465b      	mov	r3, fp
 8013bc2:	4651      	mov	r1, sl
 8013bc4:	4648      	mov	r0, r9
 8013bc6:	f000 f993 	bl	8013ef0 <__kernel_rem_pio2>
 8013bca:	9b02      	ldr	r3, [sp, #8]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	4683      	mov	fp, r0
 8013bd0:	f6bf ae46 	bge.w	8013860 <__ieee754_rem_pio2+0x80>
 8013bd4:	e9da 2100 	ldrd	r2, r1, [sl]
 8013bd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013bdc:	e9ca 2300 	strd	r2, r3, [sl]
 8013be0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8013be4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013be8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8013bec:	e73a      	b.n	8013a64 <__ieee754_rem_pio2+0x284>
 8013bee:	bf00      	nop
 8013bf0:	41700000 	.word	0x41700000
 8013bf4:	08015ea0 	.word	0x08015ea0

08013bf8 <__ieee754_sqrt>:
 8013bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bfc:	ec55 4b10 	vmov	r4, r5, d0
 8013c00:	4e55      	ldr	r6, [pc, #340]	; (8013d58 <__ieee754_sqrt+0x160>)
 8013c02:	43ae      	bics	r6, r5
 8013c04:	ee10 0a10 	vmov	r0, s0
 8013c08:	ee10 3a10 	vmov	r3, s0
 8013c0c:	462a      	mov	r2, r5
 8013c0e:	4629      	mov	r1, r5
 8013c10:	d110      	bne.n	8013c34 <__ieee754_sqrt+0x3c>
 8013c12:	ee10 2a10 	vmov	r2, s0
 8013c16:	462b      	mov	r3, r5
 8013c18:	f7ec fcee 	bl	80005f8 <__aeabi_dmul>
 8013c1c:	4602      	mov	r2, r0
 8013c1e:	460b      	mov	r3, r1
 8013c20:	4620      	mov	r0, r4
 8013c22:	4629      	mov	r1, r5
 8013c24:	f7ec fb32 	bl	800028c <__adddf3>
 8013c28:	4604      	mov	r4, r0
 8013c2a:	460d      	mov	r5, r1
 8013c2c:	ec45 4b10 	vmov	d0, r4, r5
 8013c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c34:	2d00      	cmp	r5, #0
 8013c36:	dc10      	bgt.n	8013c5a <__ieee754_sqrt+0x62>
 8013c38:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013c3c:	4330      	orrs	r0, r6
 8013c3e:	d0f5      	beq.n	8013c2c <__ieee754_sqrt+0x34>
 8013c40:	b15d      	cbz	r5, 8013c5a <__ieee754_sqrt+0x62>
 8013c42:	ee10 2a10 	vmov	r2, s0
 8013c46:	462b      	mov	r3, r5
 8013c48:	ee10 0a10 	vmov	r0, s0
 8013c4c:	f7ec fb1c 	bl	8000288 <__aeabi_dsub>
 8013c50:	4602      	mov	r2, r0
 8013c52:	460b      	mov	r3, r1
 8013c54:	f7ec fdfa 	bl	800084c <__aeabi_ddiv>
 8013c58:	e7e6      	b.n	8013c28 <__ieee754_sqrt+0x30>
 8013c5a:	1512      	asrs	r2, r2, #20
 8013c5c:	d074      	beq.n	8013d48 <__ieee754_sqrt+0x150>
 8013c5e:	07d4      	lsls	r4, r2, #31
 8013c60:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013c64:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8013c68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8013c6c:	bf5e      	ittt	pl
 8013c6e:	0fda      	lsrpl	r2, r3, #31
 8013c70:	005b      	lslpl	r3, r3, #1
 8013c72:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8013c76:	2400      	movs	r4, #0
 8013c78:	0fda      	lsrs	r2, r3, #31
 8013c7a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8013c7e:	107f      	asrs	r7, r7, #1
 8013c80:	005b      	lsls	r3, r3, #1
 8013c82:	2516      	movs	r5, #22
 8013c84:	4620      	mov	r0, r4
 8013c86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013c8a:	1886      	adds	r6, r0, r2
 8013c8c:	428e      	cmp	r6, r1
 8013c8e:	bfde      	ittt	le
 8013c90:	1b89      	suble	r1, r1, r6
 8013c92:	18b0      	addle	r0, r6, r2
 8013c94:	18a4      	addle	r4, r4, r2
 8013c96:	0049      	lsls	r1, r1, #1
 8013c98:	3d01      	subs	r5, #1
 8013c9a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8013c9e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8013ca2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013ca6:	d1f0      	bne.n	8013c8a <__ieee754_sqrt+0x92>
 8013ca8:	462a      	mov	r2, r5
 8013caa:	f04f 0e20 	mov.w	lr, #32
 8013cae:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013cb2:	4281      	cmp	r1, r0
 8013cb4:	eb06 0c05 	add.w	ip, r6, r5
 8013cb8:	dc02      	bgt.n	8013cc0 <__ieee754_sqrt+0xc8>
 8013cba:	d113      	bne.n	8013ce4 <__ieee754_sqrt+0xec>
 8013cbc:	459c      	cmp	ip, r3
 8013cbe:	d811      	bhi.n	8013ce4 <__ieee754_sqrt+0xec>
 8013cc0:	f1bc 0f00 	cmp.w	ip, #0
 8013cc4:	eb0c 0506 	add.w	r5, ip, r6
 8013cc8:	da43      	bge.n	8013d52 <__ieee754_sqrt+0x15a>
 8013cca:	2d00      	cmp	r5, #0
 8013ccc:	db41      	blt.n	8013d52 <__ieee754_sqrt+0x15a>
 8013cce:	f100 0801 	add.w	r8, r0, #1
 8013cd2:	1a09      	subs	r1, r1, r0
 8013cd4:	459c      	cmp	ip, r3
 8013cd6:	bf88      	it	hi
 8013cd8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8013cdc:	eba3 030c 	sub.w	r3, r3, ip
 8013ce0:	4432      	add	r2, r6
 8013ce2:	4640      	mov	r0, r8
 8013ce4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8013ce8:	f1be 0e01 	subs.w	lr, lr, #1
 8013cec:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8013cf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013cf4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013cf8:	d1db      	bne.n	8013cb2 <__ieee754_sqrt+0xba>
 8013cfa:	430b      	orrs	r3, r1
 8013cfc:	d006      	beq.n	8013d0c <__ieee754_sqrt+0x114>
 8013cfe:	1c50      	adds	r0, r2, #1
 8013d00:	bf13      	iteet	ne
 8013d02:	3201      	addne	r2, #1
 8013d04:	3401      	addeq	r4, #1
 8013d06:	4672      	moveq	r2, lr
 8013d08:	f022 0201 	bicne.w	r2, r2, #1
 8013d0c:	1063      	asrs	r3, r4, #1
 8013d0e:	0852      	lsrs	r2, r2, #1
 8013d10:	07e1      	lsls	r1, r4, #31
 8013d12:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013d16:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8013d1a:	bf48      	it	mi
 8013d1c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8013d20:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8013d24:	4614      	mov	r4, r2
 8013d26:	e781      	b.n	8013c2c <__ieee754_sqrt+0x34>
 8013d28:	0ad9      	lsrs	r1, r3, #11
 8013d2a:	3815      	subs	r0, #21
 8013d2c:	055b      	lsls	r3, r3, #21
 8013d2e:	2900      	cmp	r1, #0
 8013d30:	d0fa      	beq.n	8013d28 <__ieee754_sqrt+0x130>
 8013d32:	02cd      	lsls	r5, r1, #11
 8013d34:	d50a      	bpl.n	8013d4c <__ieee754_sqrt+0x154>
 8013d36:	f1c2 0420 	rsb	r4, r2, #32
 8013d3a:	fa23 f404 	lsr.w	r4, r3, r4
 8013d3e:	1e55      	subs	r5, r2, #1
 8013d40:	4093      	lsls	r3, r2
 8013d42:	4321      	orrs	r1, r4
 8013d44:	1b42      	subs	r2, r0, r5
 8013d46:	e78a      	b.n	8013c5e <__ieee754_sqrt+0x66>
 8013d48:	4610      	mov	r0, r2
 8013d4a:	e7f0      	b.n	8013d2e <__ieee754_sqrt+0x136>
 8013d4c:	0049      	lsls	r1, r1, #1
 8013d4e:	3201      	adds	r2, #1
 8013d50:	e7ef      	b.n	8013d32 <__ieee754_sqrt+0x13a>
 8013d52:	4680      	mov	r8, r0
 8013d54:	e7bd      	b.n	8013cd2 <__ieee754_sqrt+0xda>
 8013d56:	bf00      	nop
 8013d58:	7ff00000 	.word	0x7ff00000
 8013d5c:	00000000 	.word	0x00000000

08013d60 <__kernel_cos>:
 8013d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d64:	ec57 6b10 	vmov	r6, r7, d0
 8013d68:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013d6c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8013d70:	ed8d 1b00 	vstr	d1, [sp]
 8013d74:	da07      	bge.n	8013d86 <__kernel_cos+0x26>
 8013d76:	ee10 0a10 	vmov	r0, s0
 8013d7a:	4639      	mov	r1, r7
 8013d7c:	f7ec feec 	bl	8000b58 <__aeabi_d2iz>
 8013d80:	2800      	cmp	r0, #0
 8013d82:	f000 8088 	beq.w	8013e96 <__kernel_cos+0x136>
 8013d86:	4632      	mov	r2, r6
 8013d88:	463b      	mov	r3, r7
 8013d8a:	4630      	mov	r0, r6
 8013d8c:	4639      	mov	r1, r7
 8013d8e:	f7ec fc33 	bl	80005f8 <__aeabi_dmul>
 8013d92:	4b51      	ldr	r3, [pc, #324]	; (8013ed8 <__kernel_cos+0x178>)
 8013d94:	2200      	movs	r2, #0
 8013d96:	4604      	mov	r4, r0
 8013d98:	460d      	mov	r5, r1
 8013d9a:	f7ec fc2d 	bl	80005f8 <__aeabi_dmul>
 8013d9e:	a340      	add	r3, pc, #256	; (adr r3, 8013ea0 <__kernel_cos+0x140>)
 8013da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da4:	4682      	mov	sl, r0
 8013da6:	468b      	mov	fp, r1
 8013da8:	4620      	mov	r0, r4
 8013daa:	4629      	mov	r1, r5
 8013dac:	f7ec fc24 	bl	80005f8 <__aeabi_dmul>
 8013db0:	a33d      	add	r3, pc, #244	; (adr r3, 8013ea8 <__kernel_cos+0x148>)
 8013db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db6:	f7ec fa69 	bl	800028c <__adddf3>
 8013dba:	4622      	mov	r2, r4
 8013dbc:	462b      	mov	r3, r5
 8013dbe:	f7ec fc1b 	bl	80005f8 <__aeabi_dmul>
 8013dc2:	a33b      	add	r3, pc, #236	; (adr r3, 8013eb0 <__kernel_cos+0x150>)
 8013dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dc8:	f7ec fa5e 	bl	8000288 <__aeabi_dsub>
 8013dcc:	4622      	mov	r2, r4
 8013dce:	462b      	mov	r3, r5
 8013dd0:	f7ec fc12 	bl	80005f8 <__aeabi_dmul>
 8013dd4:	a338      	add	r3, pc, #224	; (adr r3, 8013eb8 <__kernel_cos+0x158>)
 8013dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dda:	f7ec fa57 	bl	800028c <__adddf3>
 8013dde:	4622      	mov	r2, r4
 8013de0:	462b      	mov	r3, r5
 8013de2:	f7ec fc09 	bl	80005f8 <__aeabi_dmul>
 8013de6:	a336      	add	r3, pc, #216	; (adr r3, 8013ec0 <__kernel_cos+0x160>)
 8013de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dec:	f7ec fa4c 	bl	8000288 <__aeabi_dsub>
 8013df0:	4622      	mov	r2, r4
 8013df2:	462b      	mov	r3, r5
 8013df4:	f7ec fc00 	bl	80005f8 <__aeabi_dmul>
 8013df8:	a333      	add	r3, pc, #204	; (adr r3, 8013ec8 <__kernel_cos+0x168>)
 8013dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dfe:	f7ec fa45 	bl	800028c <__adddf3>
 8013e02:	4622      	mov	r2, r4
 8013e04:	462b      	mov	r3, r5
 8013e06:	f7ec fbf7 	bl	80005f8 <__aeabi_dmul>
 8013e0a:	4622      	mov	r2, r4
 8013e0c:	462b      	mov	r3, r5
 8013e0e:	f7ec fbf3 	bl	80005f8 <__aeabi_dmul>
 8013e12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013e16:	4604      	mov	r4, r0
 8013e18:	460d      	mov	r5, r1
 8013e1a:	4630      	mov	r0, r6
 8013e1c:	4639      	mov	r1, r7
 8013e1e:	f7ec fbeb 	bl	80005f8 <__aeabi_dmul>
 8013e22:	460b      	mov	r3, r1
 8013e24:	4602      	mov	r2, r0
 8013e26:	4629      	mov	r1, r5
 8013e28:	4620      	mov	r0, r4
 8013e2a:	f7ec fa2d 	bl	8000288 <__aeabi_dsub>
 8013e2e:	4b2b      	ldr	r3, [pc, #172]	; (8013edc <__kernel_cos+0x17c>)
 8013e30:	4598      	cmp	r8, r3
 8013e32:	4606      	mov	r6, r0
 8013e34:	460f      	mov	r7, r1
 8013e36:	dc10      	bgt.n	8013e5a <__kernel_cos+0xfa>
 8013e38:	4602      	mov	r2, r0
 8013e3a:	460b      	mov	r3, r1
 8013e3c:	4650      	mov	r0, sl
 8013e3e:	4659      	mov	r1, fp
 8013e40:	f7ec fa22 	bl	8000288 <__aeabi_dsub>
 8013e44:	460b      	mov	r3, r1
 8013e46:	4926      	ldr	r1, [pc, #152]	; (8013ee0 <__kernel_cos+0x180>)
 8013e48:	4602      	mov	r2, r0
 8013e4a:	2000      	movs	r0, #0
 8013e4c:	f7ec fa1c 	bl	8000288 <__aeabi_dsub>
 8013e50:	ec41 0b10 	vmov	d0, r0, r1
 8013e54:	b003      	add	sp, #12
 8013e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e5a:	4b22      	ldr	r3, [pc, #136]	; (8013ee4 <__kernel_cos+0x184>)
 8013e5c:	4920      	ldr	r1, [pc, #128]	; (8013ee0 <__kernel_cos+0x180>)
 8013e5e:	4598      	cmp	r8, r3
 8013e60:	bfcc      	ite	gt
 8013e62:	4d21      	ldrgt	r5, [pc, #132]	; (8013ee8 <__kernel_cos+0x188>)
 8013e64:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8013e68:	2400      	movs	r4, #0
 8013e6a:	4622      	mov	r2, r4
 8013e6c:	462b      	mov	r3, r5
 8013e6e:	2000      	movs	r0, #0
 8013e70:	f7ec fa0a 	bl	8000288 <__aeabi_dsub>
 8013e74:	4622      	mov	r2, r4
 8013e76:	4680      	mov	r8, r0
 8013e78:	4689      	mov	r9, r1
 8013e7a:	462b      	mov	r3, r5
 8013e7c:	4650      	mov	r0, sl
 8013e7e:	4659      	mov	r1, fp
 8013e80:	f7ec fa02 	bl	8000288 <__aeabi_dsub>
 8013e84:	4632      	mov	r2, r6
 8013e86:	463b      	mov	r3, r7
 8013e88:	f7ec f9fe 	bl	8000288 <__aeabi_dsub>
 8013e8c:	4602      	mov	r2, r0
 8013e8e:	460b      	mov	r3, r1
 8013e90:	4640      	mov	r0, r8
 8013e92:	4649      	mov	r1, r9
 8013e94:	e7da      	b.n	8013e4c <__kernel_cos+0xec>
 8013e96:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013ed0 <__kernel_cos+0x170>
 8013e9a:	e7db      	b.n	8013e54 <__kernel_cos+0xf4>
 8013e9c:	f3af 8000 	nop.w
 8013ea0:	be8838d4 	.word	0xbe8838d4
 8013ea4:	bda8fae9 	.word	0xbda8fae9
 8013ea8:	bdb4b1c4 	.word	0xbdb4b1c4
 8013eac:	3e21ee9e 	.word	0x3e21ee9e
 8013eb0:	809c52ad 	.word	0x809c52ad
 8013eb4:	3e927e4f 	.word	0x3e927e4f
 8013eb8:	19cb1590 	.word	0x19cb1590
 8013ebc:	3efa01a0 	.word	0x3efa01a0
 8013ec0:	16c15177 	.word	0x16c15177
 8013ec4:	3f56c16c 	.word	0x3f56c16c
 8013ec8:	5555554c 	.word	0x5555554c
 8013ecc:	3fa55555 	.word	0x3fa55555
 8013ed0:	00000000 	.word	0x00000000
 8013ed4:	3ff00000 	.word	0x3ff00000
 8013ed8:	3fe00000 	.word	0x3fe00000
 8013edc:	3fd33332 	.word	0x3fd33332
 8013ee0:	3ff00000 	.word	0x3ff00000
 8013ee4:	3fe90000 	.word	0x3fe90000
 8013ee8:	3fd20000 	.word	0x3fd20000
 8013eec:	00000000 	.word	0x00000000

08013ef0 <__kernel_rem_pio2>:
 8013ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef4:	ed2d 8b02 	vpush	{d8}
 8013ef8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8013efc:	f112 0f14 	cmn.w	r2, #20
 8013f00:	9308      	str	r3, [sp, #32]
 8013f02:	9101      	str	r1, [sp, #4]
 8013f04:	4bc4      	ldr	r3, [pc, #784]	; (8014218 <__kernel_rem_pio2+0x328>)
 8013f06:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013f08:	900b      	str	r0, [sp, #44]	; 0x2c
 8013f0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013f0e:	9302      	str	r3, [sp, #8]
 8013f10:	9b08      	ldr	r3, [sp, #32]
 8013f12:	f103 33ff 	add.w	r3, r3, #4294967295
 8013f16:	bfa8      	it	ge
 8013f18:	1ed4      	subge	r4, r2, #3
 8013f1a:	9306      	str	r3, [sp, #24]
 8013f1c:	bfb2      	itee	lt
 8013f1e:	2400      	movlt	r4, #0
 8013f20:	2318      	movge	r3, #24
 8013f22:	fb94 f4f3 	sdivge	r4, r4, r3
 8013f26:	f06f 0317 	mvn.w	r3, #23
 8013f2a:	fb04 3303 	mla	r3, r4, r3, r3
 8013f2e:	eb03 0a02 	add.w	sl, r3, r2
 8013f32:	9b02      	ldr	r3, [sp, #8]
 8013f34:	9a06      	ldr	r2, [sp, #24]
 8013f36:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8014208 <__kernel_rem_pio2+0x318>
 8013f3a:	eb03 0802 	add.w	r8, r3, r2
 8013f3e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013f40:	1aa7      	subs	r7, r4, r2
 8013f42:	ae22      	add	r6, sp, #136	; 0x88
 8013f44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013f48:	2500      	movs	r5, #0
 8013f4a:	4545      	cmp	r5, r8
 8013f4c:	dd13      	ble.n	8013f76 <__kernel_rem_pio2+0x86>
 8013f4e:	9b08      	ldr	r3, [sp, #32]
 8013f50:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8014208 <__kernel_rem_pio2+0x318>
 8013f54:	aa22      	add	r2, sp, #136	; 0x88
 8013f56:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8013f5a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8013f5e:	f04f 0800 	mov.w	r8, #0
 8013f62:	9b02      	ldr	r3, [sp, #8]
 8013f64:	4598      	cmp	r8, r3
 8013f66:	dc2f      	bgt.n	8013fc8 <__kernel_rem_pio2+0xd8>
 8013f68:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013f6c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8013f70:	462f      	mov	r7, r5
 8013f72:	2600      	movs	r6, #0
 8013f74:	e01b      	b.n	8013fae <__kernel_rem_pio2+0xbe>
 8013f76:	42ef      	cmn	r7, r5
 8013f78:	d407      	bmi.n	8013f8a <__kernel_rem_pio2+0x9a>
 8013f7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013f7e:	f7ec fad1 	bl	8000524 <__aeabi_i2d>
 8013f82:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013f86:	3501      	adds	r5, #1
 8013f88:	e7df      	b.n	8013f4a <__kernel_rem_pio2+0x5a>
 8013f8a:	ec51 0b18 	vmov	r0, r1, d8
 8013f8e:	e7f8      	b.n	8013f82 <__kernel_rem_pio2+0x92>
 8013f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013f94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013f98:	f7ec fb2e 	bl	80005f8 <__aeabi_dmul>
 8013f9c:	4602      	mov	r2, r0
 8013f9e:	460b      	mov	r3, r1
 8013fa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013fa4:	f7ec f972 	bl	800028c <__adddf3>
 8013fa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013fac:	3601      	adds	r6, #1
 8013fae:	9b06      	ldr	r3, [sp, #24]
 8013fb0:	429e      	cmp	r6, r3
 8013fb2:	f1a7 0708 	sub.w	r7, r7, #8
 8013fb6:	ddeb      	ble.n	8013f90 <__kernel_rem_pio2+0xa0>
 8013fb8:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013fbc:	f108 0801 	add.w	r8, r8, #1
 8013fc0:	ecab 7b02 	vstmia	fp!, {d7}
 8013fc4:	3508      	adds	r5, #8
 8013fc6:	e7cc      	b.n	8013f62 <__kernel_rem_pio2+0x72>
 8013fc8:	9b02      	ldr	r3, [sp, #8]
 8013fca:	aa0e      	add	r2, sp, #56	; 0x38
 8013fcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013fd0:	930d      	str	r3, [sp, #52]	; 0x34
 8013fd2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013fd4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013fd8:	9c02      	ldr	r4, [sp, #8]
 8013fda:	930c      	str	r3, [sp, #48]	; 0x30
 8013fdc:	00e3      	lsls	r3, r4, #3
 8013fde:	930a      	str	r3, [sp, #40]	; 0x28
 8013fe0:	ab9a      	add	r3, sp, #616	; 0x268
 8013fe2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013fe6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8013fea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8013fee:	ab72      	add	r3, sp, #456	; 0x1c8
 8013ff0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8013ff4:	46c3      	mov	fp, r8
 8013ff6:	46a1      	mov	r9, r4
 8013ff8:	f1b9 0f00 	cmp.w	r9, #0
 8013ffc:	f1a5 0508 	sub.w	r5, r5, #8
 8014000:	dc77      	bgt.n	80140f2 <__kernel_rem_pio2+0x202>
 8014002:	ec47 6b10 	vmov	d0, r6, r7
 8014006:	4650      	mov	r0, sl
 8014008:	f000 ffc2 	bl	8014f90 <scalbn>
 801400c:	ec57 6b10 	vmov	r6, r7, d0
 8014010:	2200      	movs	r2, #0
 8014012:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014016:	ee10 0a10 	vmov	r0, s0
 801401a:	4639      	mov	r1, r7
 801401c:	f7ec faec 	bl	80005f8 <__aeabi_dmul>
 8014020:	ec41 0b10 	vmov	d0, r0, r1
 8014024:	f000 ff2c 	bl	8014e80 <floor>
 8014028:	4b7c      	ldr	r3, [pc, #496]	; (801421c <__kernel_rem_pio2+0x32c>)
 801402a:	ec51 0b10 	vmov	r0, r1, d0
 801402e:	2200      	movs	r2, #0
 8014030:	f7ec fae2 	bl	80005f8 <__aeabi_dmul>
 8014034:	4602      	mov	r2, r0
 8014036:	460b      	mov	r3, r1
 8014038:	4630      	mov	r0, r6
 801403a:	4639      	mov	r1, r7
 801403c:	f7ec f924 	bl	8000288 <__aeabi_dsub>
 8014040:	460f      	mov	r7, r1
 8014042:	4606      	mov	r6, r0
 8014044:	f7ec fd88 	bl	8000b58 <__aeabi_d2iz>
 8014048:	9004      	str	r0, [sp, #16]
 801404a:	f7ec fa6b 	bl	8000524 <__aeabi_i2d>
 801404e:	4602      	mov	r2, r0
 8014050:	460b      	mov	r3, r1
 8014052:	4630      	mov	r0, r6
 8014054:	4639      	mov	r1, r7
 8014056:	f7ec f917 	bl	8000288 <__aeabi_dsub>
 801405a:	f1ba 0f00 	cmp.w	sl, #0
 801405e:	4606      	mov	r6, r0
 8014060:	460f      	mov	r7, r1
 8014062:	dd6d      	ble.n	8014140 <__kernel_rem_pio2+0x250>
 8014064:	1e62      	subs	r2, r4, #1
 8014066:	ab0e      	add	r3, sp, #56	; 0x38
 8014068:	9d04      	ldr	r5, [sp, #16]
 801406a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801406e:	f1ca 0118 	rsb	r1, sl, #24
 8014072:	fa40 f301 	asr.w	r3, r0, r1
 8014076:	441d      	add	r5, r3
 8014078:	408b      	lsls	r3, r1
 801407a:	1ac0      	subs	r0, r0, r3
 801407c:	ab0e      	add	r3, sp, #56	; 0x38
 801407e:	9504      	str	r5, [sp, #16]
 8014080:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014084:	f1ca 0317 	rsb	r3, sl, #23
 8014088:	fa40 fb03 	asr.w	fp, r0, r3
 801408c:	f1bb 0f00 	cmp.w	fp, #0
 8014090:	dd65      	ble.n	801415e <__kernel_rem_pio2+0x26e>
 8014092:	9b04      	ldr	r3, [sp, #16]
 8014094:	2200      	movs	r2, #0
 8014096:	3301      	adds	r3, #1
 8014098:	9304      	str	r3, [sp, #16]
 801409a:	4615      	mov	r5, r2
 801409c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80140a0:	4294      	cmp	r4, r2
 80140a2:	f300 809c 	bgt.w	80141de <__kernel_rem_pio2+0x2ee>
 80140a6:	f1ba 0f00 	cmp.w	sl, #0
 80140aa:	dd07      	ble.n	80140bc <__kernel_rem_pio2+0x1cc>
 80140ac:	f1ba 0f01 	cmp.w	sl, #1
 80140b0:	f000 80c0 	beq.w	8014234 <__kernel_rem_pio2+0x344>
 80140b4:	f1ba 0f02 	cmp.w	sl, #2
 80140b8:	f000 80c6 	beq.w	8014248 <__kernel_rem_pio2+0x358>
 80140bc:	f1bb 0f02 	cmp.w	fp, #2
 80140c0:	d14d      	bne.n	801415e <__kernel_rem_pio2+0x26e>
 80140c2:	4632      	mov	r2, r6
 80140c4:	463b      	mov	r3, r7
 80140c6:	4956      	ldr	r1, [pc, #344]	; (8014220 <__kernel_rem_pio2+0x330>)
 80140c8:	2000      	movs	r0, #0
 80140ca:	f7ec f8dd 	bl	8000288 <__aeabi_dsub>
 80140ce:	4606      	mov	r6, r0
 80140d0:	460f      	mov	r7, r1
 80140d2:	2d00      	cmp	r5, #0
 80140d4:	d043      	beq.n	801415e <__kernel_rem_pio2+0x26e>
 80140d6:	4650      	mov	r0, sl
 80140d8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8014210 <__kernel_rem_pio2+0x320>
 80140dc:	f000 ff58 	bl	8014f90 <scalbn>
 80140e0:	4630      	mov	r0, r6
 80140e2:	4639      	mov	r1, r7
 80140e4:	ec53 2b10 	vmov	r2, r3, d0
 80140e8:	f7ec f8ce 	bl	8000288 <__aeabi_dsub>
 80140ec:	4606      	mov	r6, r0
 80140ee:	460f      	mov	r7, r1
 80140f0:	e035      	b.n	801415e <__kernel_rem_pio2+0x26e>
 80140f2:	4b4c      	ldr	r3, [pc, #304]	; (8014224 <__kernel_rem_pio2+0x334>)
 80140f4:	2200      	movs	r2, #0
 80140f6:	4630      	mov	r0, r6
 80140f8:	4639      	mov	r1, r7
 80140fa:	f7ec fa7d 	bl	80005f8 <__aeabi_dmul>
 80140fe:	f7ec fd2b 	bl	8000b58 <__aeabi_d2iz>
 8014102:	f7ec fa0f 	bl	8000524 <__aeabi_i2d>
 8014106:	4602      	mov	r2, r0
 8014108:	460b      	mov	r3, r1
 801410a:	ec43 2b18 	vmov	d8, r2, r3
 801410e:	4b46      	ldr	r3, [pc, #280]	; (8014228 <__kernel_rem_pio2+0x338>)
 8014110:	2200      	movs	r2, #0
 8014112:	f7ec fa71 	bl	80005f8 <__aeabi_dmul>
 8014116:	4602      	mov	r2, r0
 8014118:	460b      	mov	r3, r1
 801411a:	4630      	mov	r0, r6
 801411c:	4639      	mov	r1, r7
 801411e:	f7ec f8b3 	bl	8000288 <__aeabi_dsub>
 8014122:	f7ec fd19 	bl	8000b58 <__aeabi_d2iz>
 8014126:	e9d5 2300 	ldrd	r2, r3, [r5]
 801412a:	f84b 0b04 	str.w	r0, [fp], #4
 801412e:	ec51 0b18 	vmov	r0, r1, d8
 8014132:	f7ec f8ab 	bl	800028c <__adddf3>
 8014136:	f109 39ff 	add.w	r9, r9, #4294967295
 801413a:	4606      	mov	r6, r0
 801413c:	460f      	mov	r7, r1
 801413e:	e75b      	b.n	8013ff8 <__kernel_rem_pio2+0x108>
 8014140:	d106      	bne.n	8014150 <__kernel_rem_pio2+0x260>
 8014142:	1e63      	subs	r3, r4, #1
 8014144:	aa0e      	add	r2, sp, #56	; 0x38
 8014146:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801414a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801414e:	e79d      	b.n	801408c <__kernel_rem_pio2+0x19c>
 8014150:	4b36      	ldr	r3, [pc, #216]	; (801422c <__kernel_rem_pio2+0x33c>)
 8014152:	2200      	movs	r2, #0
 8014154:	f7ec fcd6 	bl	8000b04 <__aeabi_dcmpge>
 8014158:	2800      	cmp	r0, #0
 801415a:	d13d      	bne.n	80141d8 <__kernel_rem_pio2+0x2e8>
 801415c:	4683      	mov	fp, r0
 801415e:	2200      	movs	r2, #0
 8014160:	2300      	movs	r3, #0
 8014162:	4630      	mov	r0, r6
 8014164:	4639      	mov	r1, r7
 8014166:	f7ec fcaf 	bl	8000ac8 <__aeabi_dcmpeq>
 801416a:	2800      	cmp	r0, #0
 801416c:	f000 80c0 	beq.w	80142f0 <__kernel_rem_pio2+0x400>
 8014170:	1e65      	subs	r5, r4, #1
 8014172:	462b      	mov	r3, r5
 8014174:	2200      	movs	r2, #0
 8014176:	9902      	ldr	r1, [sp, #8]
 8014178:	428b      	cmp	r3, r1
 801417a:	da6c      	bge.n	8014256 <__kernel_rem_pio2+0x366>
 801417c:	2a00      	cmp	r2, #0
 801417e:	f000 8089 	beq.w	8014294 <__kernel_rem_pio2+0x3a4>
 8014182:	ab0e      	add	r3, sp, #56	; 0x38
 8014184:	f1aa 0a18 	sub.w	sl, sl, #24
 8014188:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801418c:	2b00      	cmp	r3, #0
 801418e:	f000 80ad 	beq.w	80142ec <__kernel_rem_pio2+0x3fc>
 8014192:	4650      	mov	r0, sl
 8014194:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8014210 <__kernel_rem_pio2+0x320>
 8014198:	f000 fefa 	bl	8014f90 <scalbn>
 801419c:	ab9a      	add	r3, sp, #616	; 0x268
 801419e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80141a2:	ec57 6b10 	vmov	r6, r7, d0
 80141a6:	00ec      	lsls	r4, r5, #3
 80141a8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80141ac:	46aa      	mov	sl, r5
 80141ae:	f1ba 0f00 	cmp.w	sl, #0
 80141b2:	f280 80d6 	bge.w	8014362 <__kernel_rem_pio2+0x472>
 80141b6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8014208 <__kernel_rem_pio2+0x318>
 80141ba:	462e      	mov	r6, r5
 80141bc:	2e00      	cmp	r6, #0
 80141be:	f2c0 8104 	blt.w	80143ca <__kernel_rem_pio2+0x4da>
 80141c2:	ab72      	add	r3, sp, #456	; 0x1c8
 80141c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80141c8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8014230 <__kernel_rem_pio2+0x340>
 80141cc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80141d0:	f04f 0800 	mov.w	r8, #0
 80141d4:	1baf      	subs	r7, r5, r6
 80141d6:	e0ea      	b.n	80143ae <__kernel_rem_pio2+0x4be>
 80141d8:	f04f 0b02 	mov.w	fp, #2
 80141dc:	e759      	b.n	8014092 <__kernel_rem_pio2+0x1a2>
 80141de:	f8d8 3000 	ldr.w	r3, [r8]
 80141e2:	b955      	cbnz	r5, 80141fa <__kernel_rem_pio2+0x30a>
 80141e4:	b123      	cbz	r3, 80141f0 <__kernel_rem_pio2+0x300>
 80141e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80141ea:	f8c8 3000 	str.w	r3, [r8]
 80141ee:	2301      	movs	r3, #1
 80141f0:	3201      	adds	r2, #1
 80141f2:	f108 0804 	add.w	r8, r8, #4
 80141f6:	461d      	mov	r5, r3
 80141f8:	e752      	b.n	80140a0 <__kernel_rem_pio2+0x1b0>
 80141fa:	1acb      	subs	r3, r1, r3
 80141fc:	f8c8 3000 	str.w	r3, [r8]
 8014200:	462b      	mov	r3, r5
 8014202:	e7f5      	b.n	80141f0 <__kernel_rem_pio2+0x300>
 8014204:	f3af 8000 	nop.w
	...
 8014214:	3ff00000 	.word	0x3ff00000
 8014218:	08015fe8 	.word	0x08015fe8
 801421c:	40200000 	.word	0x40200000
 8014220:	3ff00000 	.word	0x3ff00000
 8014224:	3e700000 	.word	0x3e700000
 8014228:	41700000 	.word	0x41700000
 801422c:	3fe00000 	.word	0x3fe00000
 8014230:	08015fa8 	.word	0x08015fa8
 8014234:	1e62      	subs	r2, r4, #1
 8014236:	ab0e      	add	r3, sp, #56	; 0x38
 8014238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801423c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014240:	a90e      	add	r1, sp, #56	; 0x38
 8014242:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014246:	e739      	b.n	80140bc <__kernel_rem_pio2+0x1cc>
 8014248:	1e62      	subs	r2, r4, #1
 801424a:	ab0e      	add	r3, sp, #56	; 0x38
 801424c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014250:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014254:	e7f4      	b.n	8014240 <__kernel_rem_pio2+0x350>
 8014256:	a90e      	add	r1, sp, #56	; 0x38
 8014258:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801425c:	3b01      	subs	r3, #1
 801425e:	430a      	orrs	r2, r1
 8014260:	e789      	b.n	8014176 <__kernel_rem_pio2+0x286>
 8014262:	3301      	adds	r3, #1
 8014264:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014268:	2900      	cmp	r1, #0
 801426a:	d0fa      	beq.n	8014262 <__kernel_rem_pio2+0x372>
 801426c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801426e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8014272:	446a      	add	r2, sp
 8014274:	3a98      	subs	r2, #152	; 0x98
 8014276:	920a      	str	r2, [sp, #40]	; 0x28
 8014278:	9a08      	ldr	r2, [sp, #32]
 801427a:	18e3      	adds	r3, r4, r3
 801427c:	18a5      	adds	r5, r4, r2
 801427e:	aa22      	add	r2, sp, #136	; 0x88
 8014280:	f104 0801 	add.w	r8, r4, #1
 8014284:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8014288:	9304      	str	r3, [sp, #16]
 801428a:	9b04      	ldr	r3, [sp, #16]
 801428c:	4543      	cmp	r3, r8
 801428e:	da04      	bge.n	801429a <__kernel_rem_pio2+0x3aa>
 8014290:	461c      	mov	r4, r3
 8014292:	e6a3      	b.n	8013fdc <__kernel_rem_pio2+0xec>
 8014294:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014296:	2301      	movs	r3, #1
 8014298:	e7e4      	b.n	8014264 <__kernel_rem_pio2+0x374>
 801429a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801429c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80142a0:	f7ec f940 	bl	8000524 <__aeabi_i2d>
 80142a4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80142a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142aa:	46ab      	mov	fp, r5
 80142ac:	461c      	mov	r4, r3
 80142ae:	f04f 0900 	mov.w	r9, #0
 80142b2:	2600      	movs	r6, #0
 80142b4:	2700      	movs	r7, #0
 80142b6:	9b06      	ldr	r3, [sp, #24]
 80142b8:	4599      	cmp	r9, r3
 80142ba:	dd06      	ble.n	80142ca <__kernel_rem_pio2+0x3da>
 80142bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142be:	e8e3 6702 	strd	r6, r7, [r3], #8
 80142c2:	f108 0801 	add.w	r8, r8, #1
 80142c6:	930a      	str	r3, [sp, #40]	; 0x28
 80142c8:	e7df      	b.n	801428a <__kernel_rem_pio2+0x39a>
 80142ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80142ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80142d2:	f7ec f991 	bl	80005f8 <__aeabi_dmul>
 80142d6:	4602      	mov	r2, r0
 80142d8:	460b      	mov	r3, r1
 80142da:	4630      	mov	r0, r6
 80142dc:	4639      	mov	r1, r7
 80142de:	f7eb ffd5 	bl	800028c <__adddf3>
 80142e2:	f109 0901 	add.w	r9, r9, #1
 80142e6:	4606      	mov	r6, r0
 80142e8:	460f      	mov	r7, r1
 80142ea:	e7e4      	b.n	80142b6 <__kernel_rem_pio2+0x3c6>
 80142ec:	3d01      	subs	r5, #1
 80142ee:	e748      	b.n	8014182 <__kernel_rem_pio2+0x292>
 80142f0:	ec47 6b10 	vmov	d0, r6, r7
 80142f4:	f1ca 0000 	rsb	r0, sl, #0
 80142f8:	f000 fe4a 	bl	8014f90 <scalbn>
 80142fc:	ec57 6b10 	vmov	r6, r7, d0
 8014300:	4ba0      	ldr	r3, [pc, #640]	; (8014584 <__kernel_rem_pio2+0x694>)
 8014302:	ee10 0a10 	vmov	r0, s0
 8014306:	2200      	movs	r2, #0
 8014308:	4639      	mov	r1, r7
 801430a:	f7ec fbfb 	bl	8000b04 <__aeabi_dcmpge>
 801430e:	b1f8      	cbz	r0, 8014350 <__kernel_rem_pio2+0x460>
 8014310:	4b9d      	ldr	r3, [pc, #628]	; (8014588 <__kernel_rem_pio2+0x698>)
 8014312:	2200      	movs	r2, #0
 8014314:	4630      	mov	r0, r6
 8014316:	4639      	mov	r1, r7
 8014318:	f7ec f96e 	bl	80005f8 <__aeabi_dmul>
 801431c:	f7ec fc1c 	bl	8000b58 <__aeabi_d2iz>
 8014320:	4680      	mov	r8, r0
 8014322:	f7ec f8ff 	bl	8000524 <__aeabi_i2d>
 8014326:	4b97      	ldr	r3, [pc, #604]	; (8014584 <__kernel_rem_pio2+0x694>)
 8014328:	2200      	movs	r2, #0
 801432a:	f7ec f965 	bl	80005f8 <__aeabi_dmul>
 801432e:	460b      	mov	r3, r1
 8014330:	4602      	mov	r2, r0
 8014332:	4639      	mov	r1, r7
 8014334:	4630      	mov	r0, r6
 8014336:	f7eb ffa7 	bl	8000288 <__aeabi_dsub>
 801433a:	f7ec fc0d 	bl	8000b58 <__aeabi_d2iz>
 801433e:	1c65      	adds	r5, r4, #1
 8014340:	ab0e      	add	r3, sp, #56	; 0x38
 8014342:	f10a 0a18 	add.w	sl, sl, #24
 8014346:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801434a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801434e:	e720      	b.n	8014192 <__kernel_rem_pio2+0x2a2>
 8014350:	4630      	mov	r0, r6
 8014352:	4639      	mov	r1, r7
 8014354:	f7ec fc00 	bl	8000b58 <__aeabi_d2iz>
 8014358:	ab0e      	add	r3, sp, #56	; 0x38
 801435a:	4625      	mov	r5, r4
 801435c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014360:	e717      	b.n	8014192 <__kernel_rem_pio2+0x2a2>
 8014362:	ab0e      	add	r3, sp, #56	; 0x38
 8014364:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8014368:	f7ec f8dc 	bl	8000524 <__aeabi_i2d>
 801436c:	4632      	mov	r2, r6
 801436e:	463b      	mov	r3, r7
 8014370:	f7ec f942 	bl	80005f8 <__aeabi_dmul>
 8014374:	4b84      	ldr	r3, [pc, #528]	; (8014588 <__kernel_rem_pio2+0x698>)
 8014376:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801437a:	2200      	movs	r2, #0
 801437c:	4630      	mov	r0, r6
 801437e:	4639      	mov	r1, r7
 8014380:	f7ec f93a 	bl	80005f8 <__aeabi_dmul>
 8014384:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014388:	4606      	mov	r6, r0
 801438a:	460f      	mov	r7, r1
 801438c:	e70f      	b.n	80141ae <__kernel_rem_pio2+0x2be>
 801438e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8014392:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8014396:	f7ec f92f 	bl	80005f8 <__aeabi_dmul>
 801439a:	4602      	mov	r2, r0
 801439c:	460b      	mov	r3, r1
 801439e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80143a2:	f7eb ff73 	bl	800028c <__adddf3>
 80143a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80143aa:	f108 0801 	add.w	r8, r8, #1
 80143ae:	9b02      	ldr	r3, [sp, #8]
 80143b0:	4598      	cmp	r8, r3
 80143b2:	dc01      	bgt.n	80143b8 <__kernel_rem_pio2+0x4c8>
 80143b4:	45b8      	cmp	r8, r7
 80143b6:	ddea      	ble.n	801438e <__kernel_rem_pio2+0x49e>
 80143b8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80143bc:	ab4a      	add	r3, sp, #296	; 0x128
 80143be:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80143c2:	ed87 7b00 	vstr	d7, [r7]
 80143c6:	3e01      	subs	r6, #1
 80143c8:	e6f8      	b.n	80141bc <__kernel_rem_pio2+0x2cc>
 80143ca:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80143cc:	2b02      	cmp	r3, #2
 80143ce:	dc0b      	bgt.n	80143e8 <__kernel_rem_pio2+0x4f8>
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	dc35      	bgt.n	8014440 <__kernel_rem_pio2+0x550>
 80143d4:	d059      	beq.n	801448a <__kernel_rem_pio2+0x59a>
 80143d6:	9b04      	ldr	r3, [sp, #16]
 80143d8:	f003 0007 	and.w	r0, r3, #7
 80143dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80143e0:	ecbd 8b02 	vpop	{d8}
 80143e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143e8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80143ea:	2b03      	cmp	r3, #3
 80143ec:	d1f3      	bne.n	80143d6 <__kernel_rem_pio2+0x4e6>
 80143ee:	ab4a      	add	r3, sp, #296	; 0x128
 80143f0:	4423      	add	r3, r4
 80143f2:	9306      	str	r3, [sp, #24]
 80143f4:	461c      	mov	r4, r3
 80143f6:	469a      	mov	sl, r3
 80143f8:	9502      	str	r5, [sp, #8]
 80143fa:	9b02      	ldr	r3, [sp, #8]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	f1aa 0a08 	sub.w	sl, sl, #8
 8014402:	dc6b      	bgt.n	80144dc <__kernel_rem_pio2+0x5ec>
 8014404:	46aa      	mov	sl, r5
 8014406:	f1ba 0f01 	cmp.w	sl, #1
 801440a:	f1a4 0408 	sub.w	r4, r4, #8
 801440e:	f300 8085 	bgt.w	801451c <__kernel_rem_pio2+0x62c>
 8014412:	9c06      	ldr	r4, [sp, #24]
 8014414:	2000      	movs	r0, #0
 8014416:	3408      	adds	r4, #8
 8014418:	2100      	movs	r1, #0
 801441a:	2d01      	cmp	r5, #1
 801441c:	f300 809d 	bgt.w	801455a <__kernel_rem_pio2+0x66a>
 8014420:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8014424:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8014428:	f1bb 0f00 	cmp.w	fp, #0
 801442c:	f040 809b 	bne.w	8014566 <__kernel_rem_pio2+0x676>
 8014430:	9b01      	ldr	r3, [sp, #4]
 8014432:	e9c3 5600 	strd	r5, r6, [r3]
 8014436:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801443a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801443e:	e7ca      	b.n	80143d6 <__kernel_rem_pio2+0x4e6>
 8014440:	3408      	adds	r4, #8
 8014442:	ab4a      	add	r3, sp, #296	; 0x128
 8014444:	441c      	add	r4, r3
 8014446:	462e      	mov	r6, r5
 8014448:	2000      	movs	r0, #0
 801444a:	2100      	movs	r1, #0
 801444c:	2e00      	cmp	r6, #0
 801444e:	da36      	bge.n	80144be <__kernel_rem_pio2+0x5ce>
 8014450:	f1bb 0f00 	cmp.w	fp, #0
 8014454:	d039      	beq.n	80144ca <__kernel_rem_pio2+0x5da>
 8014456:	4602      	mov	r2, r0
 8014458:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801445c:	9c01      	ldr	r4, [sp, #4]
 801445e:	e9c4 2300 	strd	r2, r3, [r4]
 8014462:	4602      	mov	r2, r0
 8014464:	460b      	mov	r3, r1
 8014466:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801446a:	f7eb ff0d 	bl	8000288 <__aeabi_dsub>
 801446e:	ae4c      	add	r6, sp, #304	; 0x130
 8014470:	2401      	movs	r4, #1
 8014472:	42a5      	cmp	r5, r4
 8014474:	da2c      	bge.n	80144d0 <__kernel_rem_pio2+0x5e0>
 8014476:	f1bb 0f00 	cmp.w	fp, #0
 801447a:	d002      	beq.n	8014482 <__kernel_rem_pio2+0x592>
 801447c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014480:	4619      	mov	r1, r3
 8014482:	9b01      	ldr	r3, [sp, #4]
 8014484:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014488:	e7a5      	b.n	80143d6 <__kernel_rem_pio2+0x4e6>
 801448a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801448e:	eb0d 0403 	add.w	r4, sp, r3
 8014492:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014496:	2000      	movs	r0, #0
 8014498:	2100      	movs	r1, #0
 801449a:	2d00      	cmp	r5, #0
 801449c:	da09      	bge.n	80144b2 <__kernel_rem_pio2+0x5c2>
 801449e:	f1bb 0f00 	cmp.w	fp, #0
 80144a2:	d002      	beq.n	80144aa <__kernel_rem_pio2+0x5ba>
 80144a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80144a8:	4619      	mov	r1, r3
 80144aa:	9b01      	ldr	r3, [sp, #4]
 80144ac:	e9c3 0100 	strd	r0, r1, [r3]
 80144b0:	e791      	b.n	80143d6 <__kernel_rem_pio2+0x4e6>
 80144b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80144b6:	f7eb fee9 	bl	800028c <__adddf3>
 80144ba:	3d01      	subs	r5, #1
 80144bc:	e7ed      	b.n	801449a <__kernel_rem_pio2+0x5aa>
 80144be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80144c2:	f7eb fee3 	bl	800028c <__adddf3>
 80144c6:	3e01      	subs	r6, #1
 80144c8:	e7c0      	b.n	801444c <__kernel_rem_pio2+0x55c>
 80144ca:	4602      	mov	r2, r0
 80144cc:	460b      	mov	r3, r1
 80144ce:	e7c5      	b.n	801445c <__kernel_rem_pio2+0x56c>
 80144d0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80144d4:	f7eb feda 	bl	800028c <__adddf3>
 80144d8:	3401      	adds	r4, #1
 80144da:	e7ca      	b.n	8014472 <__kernel_rem_pio2+0x582>
 80144dc:	e9da 8900 	ldrd	r8, r9, [sl]
 80144e0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80144e4:	9b02      	ldr	r3, [sp, #8]
 80144e6:	3b01      	subs	r3, #1
 80144e8:	9302      	str	r3, [sp, #8]
 80144ea:	4632      	mov	r2, r6
 80144ec:	463b      	mov	r3, r7
 80144ee:	4640      	mov	r0, r8
 80144f0:	4649      	mov	r1, r9
 80144f2:	f7eb fecb 	bl	800028c <__adddf3>
 80144f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80144fa:	4602      	mov	r2, r0
 80144fc:	460b      	mov	r3, r1
 80144fe:	4640      	mov	r0, r8
 8014500:	4649      	mov	r1, r9
 8014502:	f7eb fec1 	bl	8000288 <__aeabi_dsub>
 8014506:	4632      	mov	r2, r6
 8014508:	463b      	mov	r3, r7
 801450a:	f7eb febf 	bl	800028c <__adddf3>
 801450e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8014512:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014516:	ed8a 7b00 	vstr	d7, [sl]
 801451a:	e76e      	b.n	80143fa <__kernel_rem_pio2+0x50a>
 801451c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014520:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8014524:	4640      	mov	r0, r8
 8014526:	4632      	mov	r2, r6
 8014528:	463b      	mov	r3, r7
 801452a:	4649      	mov	r1, r9
 801452c:	f7eb feae 	bl	800028c <__adddf3>
 8014530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014534:	4602      	mov	r2, r0
 8014536:	460b      	mov	r3, r1
 8014538:	4640      	mov	r0, r8
 801453a:	4649      	mov	r1, r9
 801453c:	f7eb fea4 	bl	8000288 <__aeabi_dsub>
 8014540:	4632      	mov	r2, r6
 8014542:	463b      	mov	r3, r7
 8014544:	f7eb fea2 	bl	800028c <__adddf3>
 8014548:	ed9d 7b02 	vldr	d7, [sp, #8]
 801454c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014550:	ed84 7b00 	vstr	d7, [r4]
 8014554:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014558:	e755      	b.n	8014406 <__kernel_rem_pio2+0x516>
 801455a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801455e:	f7eb fe95 	bl	800028c <__adddf3>
 8014562:	3d01      	subs	r5, #1
 8014564:	e759      	b.n	801441a <__kernel_rem_pio2+0x52a>
 8014566:	9b01      	ldr	r3, [sp, #4]
 8014568:	9a01      	ldr	r2, [sp, #4]
 801456a:	601d      	str	r5, [r3, #0]
 801456c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8014570:	605c      	str	r4, [r3, #4]
 8014572:	609f      	str	r7, [r3, #8]
 8014574:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8014578:	60d3      	str	r3, [r2, #12]
 801457a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801457e:	6110      	str	r0, [r2, #16]
 8014580:	6153      	str	r3, [r2, #20]
 8014582:	e728      	b.n	80143d6 <__kernel_rem_pio2+0x4e6>
 8014584:	41700000 	.word	0x41700000
 8014588:	3e700000 	.word	0x3e700000
 801458c:	00000000 	.word	0x00000000

08014590 <__kernel_sin>:
 8014590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014594:	ed2d 8b04 	vpush	{d8-d9}
 8014598:	eeb0 8a41 	vmov.f32	s16, s2
 801459c:	eef0 8a61 	vmov.f32	s17, s3
 80145a0:	ec55 4b10 	vmov	r4, r5, d0
 80145a4:	b083      	sub	sp, #12
 80145a6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80145aa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80145ae:	9001      	str	r0, [sp, #4]
 80145b0:	da06      	bge.n	80145c0 <__kernel_sin+0x30>
 80145b2:	ee10 0a10 	vmov	r0, s0
 80145b6:	4629      	mov	r1, r5
 80145b8:	f7ec face 	bl	8000b58 <__aeabi_d2iz>
 80145bc:	2800      	cmp	r0, #0
 80145be:	d051      	beq.n	8014664 <__kernel_sin+0xd4>
 80145c0:	4622      	mov	r2, r4
 80145c2:	462b      	mov	r3, r5
 80145c4:	4620      	mov	r0, r4
 80145c6:	4629      	mov	r1, r5
 80145c8:	f7ec f816 	bl	80005f8 <__aeabi_dmul>
 80145cc:	4682      	mov	sl, r0
 80145ce:	468b      	mov	fp, r1
 80145d0:	4602      	mov	r2, r0
 80145d2:	460b      	mov	r3, r1
 80145d4:	4620      	mov	r0, r4
 80145d6:	4629      	mov	r1, r5
 80145d8:	f7ec f80e 	bl	80005f8 <__aeabi_dmul>
 80145dc:	a341      	add	r3, pc, #260	; (adr r3, 80146e4 <__kernel_sin+0x154>)
 80145de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145e2:	4680      	mov	r8, r0
 80145e4:	4689      	mov	r9, r1
 80145e6:	4650      	mov	r0, sl
 80145e8:	4659      	mov	r1, fp
 80145ea:	f7ec f805 	bl	80005f8 <__aeabi_dmul>
 80145ee:	a33f      	add	r3, pc, #252	; (adr r3, 80146ec <__kernel_sin+0x15c>)
 80145f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145f4:	f7eb fe48 	bl	8000288 <__aeabi_dsub>
 80145f8:	4652      	mov	r2, sl
 80145fa:	465b      	mov	r3, fp
 80145fc:	f7eb fffc 	bl	80005f8 <__aeabi_dmul>
 8014600:	a33c      	add	r3, pc, #240	; (adr r3, 80146f4 <__kernel_sin+0x164>)
 8014602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014606:	f7eb fe41 	bl	800028c <__adddf3>
 801460a:	4652      	mov	r2, sl
 801460c:	465b      	mov	r3, fp
 801460e:	f7eb fff3 	bl	80005f8 <__aeabi_dmul>
 8014612:	a33a      	add	r3, pc, #232	; (adr r3, 80146fc <__kernel_sin+0x16c>)
 8014614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014618:	f7eb fe36 	bl	8000288 <__aeabi_dsub>
 801461c:	4652      	mov	r2, sl
 801461e:	465b      	mov	r3, fp
 8014620:	f7eb ffea 	bl	80005f8 <__aeabi_dmul>
 8014624:	a337      	add	r3, pc, #220	; (adr r3, 8014704 <__kernel_sin+0x174>)
 8014626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801462a:	f7eb fe2f 	bl	800028c <__adddf3>
 801462e:	9b01      	ldr	r3, [sp, #4]
 8014630:	4606      	mov	r6, r0
 8014632:	460f      	mov	r7, r1
 8014634:	b9eb      	cbnz	r3, 8014672 <__kernel_sin+0xe2>
 8014636:	4602      	mov	r2, r0
 8014638:	460b      	mov	r3, r1
 801463a:	4650      	mov	r0, sl
 801463c:	4659      	mov	r1, fp
 801463e:	f7eb ffdb 	bl	80005f8 <__aeabi_dmul>
 8014642:	a325      	add	r3, pc, #148	; (adr r3, 80146d8 <__kernel_sin+0x148>)
 8014644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014648:	f7eb fe1e 	bl	8000288 <__aeabi_dsub>
 801464c:	4642      	mov	r2, r8
 801464e:	464b      	mov	r3, r9
 8014650:	f7eb ffd2 	bl	80005f8 <__aeabi_dmul>
 8014654:	4602      	mov	r2, r0
 8014656:	460b      	mov	r3, r1
 8014658:	4620      	mov	r0, r4
 801465a:	4629      	mov	r1, r5
 801465c:	f7eb fe16 	bl	800028c <__adddf3>
 8014660:	4604      	mov	r4, r0
 8014662:	460d      	mov	r5, r1
 8014664:	ec45 4b10 	vmov	d0, r4, r5
 8014668:	b003      	add	sp, #12
 801466a:	ecbd 8b04 	vpop	{d8-d9}
 801466e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014672:	4b1b      	ldr	r3, [pc, #108]	; (80146e0 <__kernel_sin+0x150>)
 8014674:	ec51 0b18 	vmov	r0, r1, d8
 8014678:	2200      	movs	r2, #0
 801467a:	f7eb ffbd 	bl	80005f8 <__aeabi_dmul>
 801467e:	4632      	mov	r2, r6
 8014680:	ec41 0b19 	vmov	d9, r0, r1
 8014684:	463b      	mov	r3, r7
 8014686:	4640      	mov	r0, r8
 8014688:	4649      	mov	r1, r9
 801468a:	f7eb ffb5 	bl	80005f8 <__aeabi_dmul>
 801468e:	4602      	mov	r2, r0
 8014690:	460b      	mov	r3, r1
 8014692:	ec51 0b19 	vmov	r0, r1, d9
 8014696:	f7eb fdf7 	bl	8000288 <__aeabi_dsub>
 801469a:	4652      	mov	r2, sl
 801469c:	465b      	mov	r3, fp
 801469e:	f7eb ffab 	bl	80005f8 <__aeabi_dmul>
 80146a2:	ec53 2b18 	vmov	r2, r3, d8
 80146a6:	f7eb fdef 	bl	8000288 <__aeabi_dsub>
 80146aa:	a30b      	add	r3, pc, #44	; (adr r3, 80146d8 <__kernel_sin+0x148>)
 80146ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b0:	4606      	mov	r6, r0
 80146b2:	460f      	mov	r7, r1
 80146b4:	4640      	mov	r0, r8
 80146b6:	4649      	mov	r1, r9
 80146b8:	f7eb ff9e 	bl	80005f8 <__aeabi_dmul>
 80146bc:	4602      	mov	r2, r0
 80146be:	460b      	mov	r3, r1
 80146c0:	4630      	mov	r0, r6
 80146c2:	4639      	mov	r1, r7
 80146c4:	f7eb fde2 	bl	800028c <__adddf3>
 80146c8:	4602      	mov	r2, r0
 80146ca:	460b      	mov	r3, r1
 80146cc:	4620      	mov	r0, r4
 80146ce:	4629      	mov	r1, r5
 80146d0:	f7eb fdda 	bl	8000288 <__aeabi_dsub>
 80146d4:	e7c4      	b.n	8014660 <__kernel_sin+0xd0>
 80146d6:	bf00      	nop
 80146d8:	55555549 	.word	0x55555549
 80146dc:	3fc55555 	.word	0x3fc55555
 80146e0:	3fe00000 	.word	0x3fe00000
 80146e4:	5acfd57c 	.word	0x5acfd57c
 80146e8:	3de5d93a 	.word	0x3de5d93a
 80146ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80146f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80146f4:	57b1fe7d 	.word	0x57b1fe7d
 80146f8:	3ec71de3 	.word	0x3ec71de3
 80146fc:	19c161d5 	.word	0x19c161d5
 8014700:	3f2a01a0 	.word	0x3f2a01a0
 8014704:	1110f8a6 	.word	0x1110f8a6
 8014708:	3f811111 	.word	0x3f811111
 801470c:	00000000 	.word	0x00000000

08014710 <__kernel_tan>:
 8014710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014714:	ed2d 8b06 	vpush	{d8-d10}
 8014718:	ec5b ab10 	vmov	sl, fp, d0
 801471c:	4be0      	ldr	r3, [pc, #896]	; (8014aa0 <__kernel_tan+0x390>)
 801471e:	b083      	sub	sp, #12
 8014720:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8014724:	429f      	cmp	r7, r3
 8014726:	ec59 8b11 	vmov	r8, r9, d1
 801472a:	4606      	mov	r6, r0
 801472c:	f8cd b000 	str.w	fp, [sp]
 8014730:	dc61      	bgt.n	80147f6 <__kernel_tan+0xe6>
 8014732:	ee10 0a10 	vmov	r0, s0
 8014736:	4659      	mov	r1, fp
 8014738:	f7ec fa0e 	bl	8000b58 <__aeabi_d2iz>
 801473c:	4605      	mov	r5, r0
 801473e:	2800      	cmp	r0, #0
 8014740:	f040 8083 	bne.w	801484a <__kernel_tan+0x13a>
 8014744:	1c73      	adds	r3, r6, #1
 8014746:	4652      	mov	r2, sl
 8014748:	4313      	orrs	r3, r2
 801474a:	433b      	orrs	r3, r7
 801474c:	d112      	bne.n	8014774 <__kernel_tan+0x64>
 801474e:	ec4b ab10 	vmov	d0, sl, fp
 8014752:	f000 fb89 	bl	8014e68 <fabs>
 8014756:	49d3      	ldr	r1, [pc, #844]	; (8014aa4 <__kernel_tan+0x394>)
 8014758:	ec53 2b10 	vmov	r2, r3, d0
 801475c:	2000      	movs	r0, #0
 801475e:	f7ec f875 	bl	800084c <__aeabi_ddiv>
 8014762:	4682      	mov	sl, r0
 8014764:	468b      	mov	fp, r1
 8014766:	ec4b ab10 	vmov	d0, sl, fp
 801476a:	b003      	add	sp, #12
 801476c:	ecbd 8b06 	vpop	{d8-d10}
 8014770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014774:	2e01      	cmp	r6, #1
 8014776:	d0f6      	beq.n	8014766 <__kernel_tan+0x56>
 8014778:	4642      	mov	r2, r8
 801477a:	464b      	mov	r3, r9
 801477c:	4650      	mov	r0, sl
 801477e:	4659      	mov	r1, fp
 8014780:	f7eb fd84 	bl	800028c <__adddf3>
 8014784:	4602      	mov	r2, r0
 8014786:	460b      	mov	r3, r1
 8014788:	460f      	mov	r7, r1
 801478a:	2000      	movs	r0, #0
 801478c:	49c6      	ldr	r1, [pc, #792]	; (8014aa8 <__kernel_tan+0x398>)
 801478e:	f7ec f85d 	bl	800084c <__aeabi_ddiv>
 8014792:	e9cd 0100 	strd	r0, r1, [sp]
 8014796:	e9dd 2300 	ldrd	r2, r3, [sp]
 801479a:	462e      	mov	r6, r5
 801479c:	4652      	mov	r2, sl
 801479e:	462c      	mov	r4, r5
 80147a0:	4630      	mov	r0, r6
 80147a2:	461d      	mov	r5, r3
 80147a4:	4639      	mov	r1, r7
 80147a6:	465b      	mov	r3, fp
 80147a8:	f7eb fd6e 	bl	8000288 <__aeabi_dsub>
 80147ac:	4602      	mov	r2, r0
 80147ae:	460b      	mov	r3, r1
 80147b0:	4640      	mov	r0, r8
 80147b2:	4649      	mov	r1, r9
 80147b4:	f7eb fd68 	bl	8000288 <__aeabi_dsub>
 80147b8:	4632      	mov	r2, r6
 80147ba:	462b      	mov	r3, r5
 80147bc:	f7eb ff1c 	bl	80005f8 <__aeabi_dmul>
 80147c0:	4632      	mov	r2, r6
 80147c2:	4680      	mov	r8, r0
 80147c4:	4689      	mov	r9, r1
 80147c6:	462b      	mov	r3, r5
 80147c8:	4630      	mov	r0, r6
 80147ca:	4639      	mov	r1, r7
 80147cc:	f7eb ff14 	bl	80005f8 <__aeabi_dmul>
 80147d0:	4bb4      	ldr	r3, [pc, #720]	; (8014aa4 <__kernel_tan+0x394>)
 80147d2:	2200      	movs	r2, #0
 80147d4:	f7eb fd5a 	bl	800028c <__adddf3>
 80147d8:	4602      	mov	r2, r0
 80147da:	460b      	mov	r3, r1
 80147dc:	4640      	mov	r0, r8
 80147de:	4649      	mov	r1, r9
 80147e0:	f7eb fd54 	bl	800028c <__adddf3>
 80147e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80147e8:	f7eb ff06 	bl	80005f8 <__aeabi_dmul>
 80147ec:	4622      	mov	r2, r4
 80147ee:	462b      	mov	r3, r5
 80147f0:	f7eb fd4c 	bl	800028c <__adddf3>
 80147f4:	e7b5      	b.n	8014762 <__kernel_tan+0x52>
 80147f6:	4bad      	ldr	r3, [pc, #692]	; (8014aac <__kernel_tan+0x39c>)
 80147f8:	429f      	cmp	r7, r3
 80147fa:	dd26      	ble.n	801484a <__kernel_tan+0x13a>
 80147fc:	9b00      	ldr	r3, [sp, #0]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	da09      	bge.n	8014816 <__kernel_tan+0x106>
 8014802:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014806:	469b      	mov	fp, r3
 8014808:	ee10 aa10 	vmov	sl, s0
 801480c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014810:	ee11 8a10 	vmov	r8, s2
 8014814:	4699      	mov	r9, r3
 8014816:	4652      	mov	r2, sl
 8014818:	465b      	mov	r3, fp
 801481a:	a183      	add	r1, pc, #524	; (adr r1, 8014a28 <__kernel_tan+0x318>)
 801481c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014820:	f7eb fd32 	bl	8000288 <__aeabi_dsub>
 8014824:	4642      	mov	r2, r8
 8014826:	464b      	mov	r3, r9
 8014828:	4604      	mov	r4, r0
 801482a:	460d      	mov	r5, r1
 801482c:	a180      	add	r1, pc, #512	; (adr r1, 8014a30 <__kernel_tan+0x320>)
 801482e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014832:	f7eb fd29 	bl	8000288 <__aeabi_dsub>
 8014836:	4622      	mov	r2, r4
 8014838:	462b      	mov	r3, r5
 801483a:	f7eb fd27 	bl	800028c <__adddf3>
 801483e:	f04f 0800 	mov.w	r8, #0
 8014842:	4682      	mov	sl, r0
 8014844:	468b      	mov	fp, r1
 8014846:	f04f 0900 	mov.w	r9, #0
 801484a:	4652      	mov	r2, sl
 801484c:	465b      	mov	r3, fp
 801484e:	4650      	mov	r0, sl
 8014850:	4659      	mov	r1, fp
 8014852:	f7eb fed1 	bl	80005f8 <__aeabi_dmul>
 8014856:	4602      	mov	r2, r0
 8014858:	460b      	mov	r3, r1
 801485a:	ec43 2b18 	vmov	d8, r2, r3
 801485e:	f7eb fecb 	bl	80005f8 <__aeabi_dmul>
 8014862:	ec53 2b18 	vmov	r2, r3, d8
 8014866:	4604      	mov	r4, r0
 8014868:	460d      	mov	r5, r1
 801486a:	4650      	mov	r0, sl
 801486c:	4659      	mov	r1, fp
 801486e:	f7eb fec3 	bl	80005f8 <__aeabi_dmul>
 8014872:	a371      	add	r3, pc, #452	; (adr r3, 8014a38 <__kernel_tan+0x328>)
 8014874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014878:	ec41 0b19 	vmov	d9, r0, r1
 801487c:	4620      	mov	r0, r4
 801487e:	4629      	mov	r1, r5
 8014880:	f7eb feba 	bl	80005f8 <__aeabi_dmul>
 8014884:	a36e      	add	r3, pc, #440	; (adr r3, 8014a40 <__kernel_tan+0x330>)
 8014886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801488a:	f7eb fcff 	bl	800028c <__adddf3>
 801488e:	4622      	mov	r2, r4
 8014890:	462b      	mov	r3, r5
 8014892:	f7eb feb1 	bl	80005f8 <__aeabi_dmul>
 8014896:	a36c      	add	r3, pc, #432	; (adr r3, 8014a48 <__kernel_tan+0x338>)
 8014898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801489c:	f7eb fcf6 	bl	800028c <__adddf3>
 80148a0:	4622      	mov	r2, r4
 80148a2:	462b      	mov	r3, r5
 80148a4:	f7eb fea8 	bl	80005f8 <__aeabi_dmul>
 80148a8:	a369      	add	r3, pc, #420	; (adr r3, 8014a50 <__kernel_tan+0x340>)
 80148aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ae:	f7eb fced 	bl	800028c <__adddf3>
 80148b2:	4622      	mov	r2, r4
 80148b4:	462b      	mov	r3, r5
 80148b6:	f7eb fe9f 	bl	80005f8 <__aeabi_dmul>
 80148ba:	a367      	add	r3, pc, #412	; (adr r3, 8014a58 <__kernel_tan+0x348>)
 80148bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c0:	f7eb fce4 	bl	800028c <__adddf3>
 80148c4:	4622      	mov	r2, r4
 80148c6:	462b      	mov	r3, r5
 80148c8:	f7eb fe96 	bl	80005f8 <__aeabi_dmul>
 80148cc:	a364      	add	r3, pc, #400	; (adr r3, 8014a60 <__kernel_tan+0x350>)
 80148ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148d2:	f7eb fcdb 	bl	800028c <__adddf3>
 80148d6:	ec53 2b18 	vmov	r2, r3, d8
 80148da:	f7eb fe8d 	bl	80005f8 <__aeabi_dmul>
 80148de:	a362      	add	r3, pc, #392	; (adr r3, 8014a68 <__kernel_tan+0x358>)
 80148e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e4:	ec41 0b1a 	vmov	d10, r0, r1
 80148e8:	4620      	mov	r0, r4
 80148ea:	4629      	mov	r1, r5
 80148ec:	f7eb fe84 	bl	80005f8 <__aeabi_dmul>
 80148f0:	a35f      	add	r3, pc, #380	; (adr r3, 8014a70 <__kernel_tan+0x360>)
 80148f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f6:	f7eb fcc9 	bl	800028c <__adddf3>
 80148fa:	4622      	mov	r2, r4
 80148fc:	462b      	mov	r3, r5
 80148fe:	f7eb fe7b 	bl	80005f8 <__aeabi_dmul>
 8014902:	a35d      	add	r3, pc, #372	; (adr r3, 8014a78 <__kernel_tan+0x368>)
 8014904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014908:	f7eb fcc0 	bl	800028c <__adddf3>
 801490c:	4622      	mov	r2, r4
 801490e:	462b      	mov	r3, r5
 8014910:	f7eb fe72 	bl	80005f8 <__aeabi_dmul>
 8014914:	a35a      	add	r3, pc, #360	; (adr r3, 8014a80 <__kernel_tan+0x370>)
 8014916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801491a:	f7eb fcb7 	bl	800028c <__adddf3>
 801491e:	4622      	mov	r2, r4
 8014920:	462b      	mov	r3, r5
 8014922:	f7eb fe69 	bl	80005f8 <__aeabi_dmul>
 8014926:	a358      	add	r3, pc, #352	; (adr r3, 8014a88 <__kernel_tan+0x378>)
 8014928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801492c:	f7eb fcae 	bl	800028c <__adddf3>
 8014930:	4622      	mov	r2, r4
 8014932:	462b      	mov	r3, r5
 8014934:	f7eb fe60 	bl	80005f8 <__aeabi_dmul>
 8014938:	a355      	add	r3, pc, #340	; (adr r3, 8014a90 <__kernel_tan+0x380>)
 801493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801493e:	f7eb fca5 	bl	800028c <__adddf3>
 8014942:	4602      	mov	r2, r0
 8014944:	460b      	mov	r3, r1
 8014946:	ec51 0b1a 	vmov	r0, r1, d10
 801494a:	f7eb fc9f 	bl	800028c <__adddf3>
 801494e:	ec53 2b19 	vmov	r2, r3, d9
 8014952:	f7eb fe51 	bl	80005f8 <__aeabi_dmul>
 8014956:	4642      	mov	r2, r8
 8014958:	464b      	mov	r3, r9
 801495a:	f7eb fc97 	bl	800028c <__adddf3>
 801495e:	ec53 2b18 	vmov	r2, r3, d8
 8014962:	f7eb fe49 	bl	80005f8 <__aeabi_dmul>
 8014966:	4642      	mov	r2, r8
 8014968:	464b      	mov	r3, r9
 801496a:	f7eb fc8f 	bl	800028c <__adddf3>
 801496e:	a34a      	add	r3, pc, #296	; (adr r3, 8014a98 <__kernel_tan+0x388>)
 8014970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014974:	4604      	mov	r4, r0
 8014976:	460d      	mov	r5, r1
 8014978:	ec51 0b19 	vmov	r0, r1, d9
 801497c:	f7eb fe3c 	bl	80005f8 <__aeabi_dmul>
 8014980:	4622      	mov	r2, r4
 8014982:	462b      	mov	r3, r5
 8014984:	f7eb fc82 	bl	800028c <__adddf3>
 8014988:	460b      	mov	r3, r1
 801498a:	ec41 0b18 	vmov	d8, r0, r1
 801498e:	4602      	mov	r2, r0
 8014990:	4659      	mov	r1, fp
 8014992:	4650      	mov	r0, sl
 8014994:	f7eb fc7a 	bl	800028c <__adddf3>
 8014998:	4b44      	ldr	r3, [pc, #272]	; (8014aac <__kernel_tan+0x39c>)
 801499a:	429f      	cmp	r7, r3
 801499c:	4604      	mov	r4, r0
 801499e:	460d      	mov	r5, r1
 80149a0:	f340 8086 	ble.w	8014ab0 <__kernel_tan+0x3a0>
 80149a4:	4630      	mov	r0, r6
 80149a6:	f7eb fdbd 	bl	8000524 <__aeabi_i2d>
 80149aa:	4622      	mov	r2, r4
 80149ac:	4680      	mov	r8, r0
 80149ae:	4689      	mov	r9, r1
 80149b0:	462b      	mov	r3, r5
 80149b2:	4620      	mov	r0, r4
 80149b4:	4629      	mov	r1, r5
 80149b6:	f7eb fe1f 	bl	80005f8 <__aeabi_dmul>
 80149ba:	4642      	mov	r2, r8
 80149bc:	4606      	mov	r6, r0
 80149be:	460f      	mov	r7, r1
 80149c0:	464b      	mov	r3, r9
 80149c2:	4620      	mov	r0, r4
 80149c4:	4629      	mov	r1, r5
 80149c6:	f7eb fc61 	bl	800028c <__adddf3>
 80149ca:	4602      	mov	r2, r0
 80149cc:	460b      	mov	r3, r1
 80149ce:	4630      	mov	r0, r6
 80149d0:	4639      	mov	r1, r7
 80149d2:	f7eb ff3b 	bl	800084c <__aeabi_ddiv>
 80149d6:	ec53 2b18 	vmov	r2, r3, d8
 80149da:	f7eb fc55 	bl	8000288 <__aeabi_dsub>
 80149de:	4602      	mov	r2, r0
 80149e0:	460b      	mov	r3, r1
 80149e2:	4650      	mov	r0, sl
 80149e4:	4659      	mov	r1, fp
 80149e6:	f7eb fc4f 	bl	8000288 <__aeabi_dsub>
 80149ea:	4602      	mov	r2, r0
 80149ec:	460b      	mov	r3, r1
 80149ee:	f7eb fc4d 	bl	800028c <__adddf3>
 80149f2:	4602      	mov	r2, r0
 80149f4:	460b      	mov	r3, r1
 80149f6:	4640      	mov	r0, r8
 80149f8:	4649      	mov	r1, r9
 80149fa:	f7eb fc45 	bl	8000288 <__aeabi_dsub>
 80149fe:	9b00      	ldr	r3, [sp, #0]
 8014a00:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8014a04:	f00a 0a02 	and.w	sl, sl, #2
 8014a08:	4604      	mov	r4, r0
 8014a0a:	f1ca 0001 	rsb	r0, sl, #1
 8014a0e:	460d      	mov	r5, r1
 8014a10:	f7eb fd88 	bl	8000524 <__aeabi_i2d>
 8014a14:	4602      	mov	r2, r0
 8014a16:	460b      	mov	r3, r1
 8014a18:	4620      	mov	r0, r4
 8014a1a:	4629      	mov	r1, r5
 8014a1c:	f7eb fdec 	bl	80005f8 <__aeabi_dmul>
 8014a20:	e69f      	b.n	8014762 <__kernel_tan+0x52>
 8014a22:	bf00      	nop
 8014a24:	f3af 8000 	nop.w
 8014a28:	54442d18 	.word	0x54442d18
 8014a2c:	3fe921fb 	.word	0x3fe921fb
 8014a30:	33145c07 	.word	0x33145c07
 8014a34:	3c81a626 	.word	0x3c81a626
 8014a38:	74bf7ad4 	.word	0x74bf7ad4
 8014a3c:	3efb2a70 	.word	0x3efb2a70
 8014a40:	32f0a7e9 	.word	0x32f0a7e9
 8014a44:	3f12b80f 	.word	0x3f12b80f
 8014a48:	1a8d1068 	.word	0x1a8d1068
 8014a4c:	3f3026f7 	.word	0x3f3026f7
 8014a50:	fee08315 	.word	0xfee08315
 8014a54:	3f57dbc8 	.word	0x3f57dbc8
 8014a58:	e96e8493 	.word	0xe96e8493
 8014a5c:	3f8226e3 	.word	0x3f8226e3
 8014a60:	1bb341fe 	.word	0x1bb341fe
 8014a64:	3faba1ba 	.word	0x3faba1ba
 8014a68:	db605373 	.word	0xdb605373
 8014a6c:	bef375cb 	.word	0xbef375cb
 8014a70:	a03792a6 	.word	0xa03792a6
 8014a74:	3f147e88 	.word	0x3f147e88
 8014a78:	f2f26501 	.word	0xf2f26501
 8014a7c:	3f4344d8 	.word	0x3f4344d8
 8014a80:	c9560328 	.word	0xc9560328
 8014a84:	3f6d6d22 	.word	0x3f6d6d22
 8014a88:	8406d637 	.word	0x8406d637
 8014a8c:	3f9664f4 	.word	0x3f9664f4
 8014a90:	1110fe7a 	.word	0x1110fe7a
 8014a94:	3fc11111 	.word	0x3fc11111
 8014a98:	55555563 	.word	0x55555563
 8014a9c:	3fd55555 	.word	0x3fd55555
 8014aa0:	3e2fffff 	.word	0x3e2fffff
 8014aa4:	3ff00000 	.word	0x3ff00000
 8014aa8:	bff00000 	.word	0xbff00000
 8014aac:	3fe59427 	.word	0x3fe59427
 8014ab0:	2e01      	cmp	r6, #1
 8014ab2:	d02f      	beq.n	8014b14 <__kernel_tan+0x404>
 8014ab4:	460f      	mov	r7, r1
 8014ab6:	4602      	mov	r2, r0
 8014ab8:	460b      	mov	r3, r1
 8014aba:	4689      	mov	r9, r1
 8014abc:	2000      	movs	r0, #0
 8014abe:	4917      	ldr	r1, [pc, #92]	; (8014b1c <__kernel_tan+0x40c>)
 8014ac0:	f7eb fec4 	bl	800084c <__aeabi_ddiv>
 8014ac4:	2600      	movs	r6, #0
 8014ac6:	e9cd 0100 	strd	r0, r1, [sp]
 8014aca:	4652      	mov	r2, sl
 8014acc:	465b      	mov	r3, fp
 8014ace:	4630      	mov	r0, r6
 8014ad0:	4639      	mov	r1, r7
 8014ad2:	f7eb fbd9 	bl	8000288 <__aeabi_dsub>
 8014ad6:	e9dd 4500 	ldrd	r4, r5, [sp]
 8014ada:	4602      	mov	r2, r0
 8014adc:	460b      	mov	r3, r1
 8014ade:	ec51 0b18 	vmov	r0, r1, d8
 8014ae2:	f7eb fbd1 	bl	8000288 <__aeabi_dsub>
 8014ae6:	4632      	mov	r2, r6
 8014ae8:	462b      	mov	r3, r5
 8014aea:	f7eb fd85 	bl	80005f8 <__aeabi_dmul>
 8014aee:	46b0      	mov	r8, r6
 8014af0:	460f      	mov	r7, r1
 8014af2:	4642      	mov	r2, r8
 8014af4:	462b      	mov	r3, r5
 8014af6:	4634      	mov	r4, r6
 8014af8:	4649      	mov	r1, r9
 8014afa:	4606      	mov	r6, r0
 8014afc:	4640      	mov	r0, r8
 8014afe:	f7eb fd7b 	bl	80005f8 <__aeabi_dmul>
 8014b02:	4b07      	ldr	r3, [pc, #28]	; (8014b20 <__kernel_tan+0x410>)
 8014b04:	2200      	movs	r2, #0
 8014b06:	f7eb fbc1 	bl	800028c <__adddf3>
 8014b0a:	4602      	mov	r2, r0
 8014b0c:	460b      	mov	r3, r1
 8014b0e:	4630      	mov	r0, r6
 8014b10:	4639      	mov	r1, r7
 8014b12:	e665      	b.n	80147e0 <__kernel_tan+0xd0>
 8014b14:	4682      	mov	sl, r0
 8014b16:	468b      	mov	fp, r1
 8014b18:	e625      	b.n	8014766 <__kernel_tan+0x56>
 8014b1a:	bf00      	nop
 8014b1c:	bff00000 	.word	0xbff00000
 8014b20:	3ff00000 	.word	0x3ff00000
 8014b24:	00000000 	.word	0x00000000

08014b28 <atan>:
 8014b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b2c:	ec55 4b10 	vmov	r4, r5, d0
 8014b30:	4bc3      	ldr	r3, [pc, #780]	; (8014e40 <atan+0x318>)
 8014b32:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014b36:	429e      	cmp	r6, r3
 8014b38:	46ab      	mov	fp, r5
 8014b3a:	dd18      	ble.n	8014b6e <atan+0x46>
 8014b3c:	4bc1      	ldr	r3, [pc, #772]	; (8014e44 <atan+0x31c>)
 8014b3e:	429e      	cmp	r6, r3
 8014b40:	dc01      	bgt.n	8014b46 <atan+0x1e>
 8014b42:	d109      	bne.n	8014b58 <atan+0x30>
 8014b44:	b144      	cbz	r4, 8014b58 <atan+0x30>
 8014b46:	4622      	mov	r2, r4
 8014b48:	462b      	mov	r3, r5
 8014b4a:	4620      	mov	r0, r4
 8014b4c:	4629      	mov	r1, r5
 8014b4e:	f7eb fb9d 	bl	800028c <__adddf3>
 8014b52:	4604      	mov	r4, r0
 8014b54:	460d      	mov	r5, r1
 8014b56:	e006      	b.n	8014b66 <atan+0x3e>
 8014b58:	f1bb 0f00 	cmp.w	fp, #0
 8014b5c:	f300 8131 	bgt.w	8014dc2 <atan+0x29a>
 8014b60:	a59b      	add	r5, pc, #620	; (adr r5, 8014dd0 <atan+0x2a8>)
 8014b62:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014b66:	ec45 4b10 	vmov	d0, r4, r5
 8014b6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b6e:	4bb6      	ldr	r3, [pc, #728]	; (8014e48 <atan+0x320>)
 8014b70:	429e      	cmp	r6, r3
 8014b72:	dc14      	bgt.n	8014b9e <atan+0x76>
 8014b74:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8014b78:	429e      	cmp	r6, r3
 8014b7a:	dc0d      	bgt.n	8014b98 <atan+0x70>
 8014b7c:	a396      	add	r3, pc, #600	; (adr r3, 8014dd8 <atan+0x2b0>)
 8014b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b82:	ee10 0a10 	vmov	r0, s0
 8014b86:	4629      	mov	r1, r5
 8014b88:	f7eb fb80 	bl	800028c <__adddf3>
 8014b8c:	4baf      	ldr	r3, [pc, #700]	; (8014e4c <atan+0x324>)
 8014b8e:	2200      	movs	r2, #0
 8014b90:	f7eb ffc2 	bl	8000b18 <__aeabi_dcmpgt>
 8014b94:	2800      	cmp	r0, #0
 8014b96:	d1e6      	bne.n	8014b66 <atan+0x3e>
 8014b98:	f04f 3aff 	mov.w	sl, #4294967295
 8014b9c:	e02b      	b.n	8014bf6 <atan+0xce>
 8014b9e:	f000 f963 	bl	8014e68 <fabs>
 8014ba2:	4bab      	ldr	r3, [pc, #684]	; (8014e50 <atan+0x328>)
 8014ba4:	429e      	cmp	r6, r3
 8014ba6:	ec55 4b10 	vmov	r4, r5, d0
 8014baa:	f300 80bf 	bgt.w	8014d2c <atan+0x204>
 8014bae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8014bb2:	429e      	cmp	r6, r3
 8014bb4:	f300 80a0 	bgt.w	8014cf8 <atan+0x1d0>
 8014bb8:	ee10 2a10 	vmov	r2, s0
 8014bbc:	ee10 0a10 	vmov	r0, s0
 8014bc0:	462b      	mov	r3, r5
 8014bc2:	4629      	mov	r1, r5
 8014bc4:	f7eb fb62 	bl	800028c <__adddf3>
 8014bc8:	4ba0      	ldr	r3, [pc, #640]	; (8014e4c <atan+0x324>)
 8014bca:	2200      	movs	r2, #0
 8014bcc:	f7eb fb5c 	bl	8000288 <__aeabi_dsub>
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	4606      	mov	r6, r0
 8014bd4:	460f      	mov	r7, r1
 8014bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014bda:	4620      	mov	r0, r4
 8014bdc:	4629      	mov	r1, r5
 8014bde:	f7eb fb55 	bl	800028c <__adddf3>
 8014be2:	4602      	mov	r2, r0
 8014be4:	460b      	mov	r3, r1
 8014be6:	4630      	mov	r0, r6
 8014be8:	4639      	mov	r1, r7
 8014bea:	f7eb fe2f 	bl	800084c <__aeabi_ddiv>
 8014bee:	f04f 0a00 	mov.w	sl, #0
 8014bf2:	4604      	mov	r4, r0
 8014bf4:	460d      	mov	r5, r1
 8014bf6:	4622      	mov	r2, r4
 8014bf8:	462b      	mov	r3, r5
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	4629      	mov	r1, r5
 8014bfe:	f7eb fcfb 	bl	80005f8 <__aeabi_dmul>
 8014c02:	4602      	mov	r2, r0
 8014c04:	460b      	mov	r3, r1
 8014c06:	4680      	mov	r8, r0
 8014c08:	4689      	mov	r9, r1
 8014c0a:	f7eb fcf5 	bl	80005f8 <__aeabi_dmul>
 8014c0e:	a374      	add	r3, pc, #464	; (adr r3, 8014de0 <atan+0x2b8>)
 8014c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c14:	4606      	mov	r6, r0
 8014c16:	460f      	mov	r7, r1
 8014c18:	f7eb fcee 	bl	80005f8 <__aeabi_dmul>
 8014c1c:	a372      	add	r3, pc, #456	; (adr r3, 8014de8 <atan+0x2c0>)
 8014c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c22:	f7eb fb33 	bl	800028c <__adddf3>
 8014c26:	4632      	mov	r2, r6
 8014c28:	463b      	mov	r3, r7
 8014c2a:	f7eb fce5 	bl	80005f8 <__aeabi_dmul>
 8014c2e:	a370      	add	r3, pc, #448	; (adr r3, 8014df0 <atan+0x2c8>)
 8014c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c34:	f7eb fb2a 	bl	800028c <__adddf3>
 8014c38:	4632      	mov	r2, r6
 8014c3a:	463b      	mov	r3, r7
 8014c3c:	f7eb fcdc 	bl	80005f8 <__aeabi_dmul>
 8014c40:	a36d      	add	r3, pc, #436	; (adr r3, 8014df8 <atan+0x2d0>)
 8014c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c46:	f7eb fb21 	bl	800028c <__adddf3>
 8014c4a:	4632      	mov	r2, r6
 8014c4c:	463b      	mov	r3, r7
 8014c4e:	f7eb fcd3 	bl	80005f8 <__aeabi_dmul>
 8014c52:	a36b      	add	r3, pc, #428	; (adr r3, 8014e00 <atan+0x2d8>)
 8014c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c58:	f7eb fb18 	bl	800028c <__adddf3>
 8014c5c:	4632      	mov	r2, r6
 8014c5e:	463b      	mov	r3, r7
 8014c60:	f7eb fcca 	bl	80005f8 <__aeabi_dmul>
 8014c64:	a368      	add	r3, pc, #416	; (adr r3, 8014e08 <atan+0x2e0>)
 8014c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c6a:	f7eb fb0f 	bl	800028c <__adddf3>
 8014c6e:	4642      	mov	r2, r8
 8014c70:	464b      	mov	r3, r9
 8014c72:	f7eb fcc1 	bl	80005f8 <__aeabi_dmul>
 8014c76:	a366      	add	r3, pc, #408	; (adr r3, 8014e10 <atan+0x2e8>)
 8014c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c7c:	4680      	mov	r8, r0
 8014c7e:	4689      	mov	r9, r1
 8014c80:	4630      	mov	r0, r6
 8014c82:	4639      	mov	r1, r7
 8014c84:	f7eb fcb8 	bl	80005f8 <__aeabi_dmul>
 8014c88:	a363      	add	r3, pc, #396	; (adr r3, 8014e18 <atan+0x2f0>)
 8014c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c8e:	f7eb fafb 	bl	8000288 <__aeabi_dsub>
 8014c92:	4632      	mov	r2, r6
 8014c94:	463b      	mov	r3, r7
 8014c96:	f7eb fcaf 	bl	80005f8 <__aeabi_dmul>
 8014c9a:	a361      	add	r3, pc, #388	; (adr r3, 8014e20 <atan+0x2f8>)
 8014c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca0:	f7eb faf2 	bl	8000288 <__aeabi_dsub>
 8014ca4:	4632      	mov	r2, r6
 8014ca6:	463b      	mov	r3, r7
 8014ca8:	f7eb fca6 	bl	80005f8 <__aeabi_dmul>
 8014cac:	a35e      	add	r3, pc, #376	; (adr r3, 8014e28 <atan+0x300>)
 8014cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb2:	f7eb fae9 	bl	8000288 <__aeabi_dsub>
 8014cb6:	4632      	mov	r2, r6
 8014cb8:	463b      	mov	r3, r7
 8014cba:	f7eb fc9d 	bl	80005f8 <__aeabi_dmul>
 8014cbe:	a35c      	add	r3, pc, #368	; (adr r3, 8014e30 <atan+0x308>)
 8014cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc4:	f7eb fae0 	bl	8000288 <__aeabi_dsub>
 8014cc8:	4632      	mov	r2, r6
 8014cca:	463b      	mov	r3, r7
 8014ccc:	f7eb fc94 	bl	80005f8 <__aeabi_dmul>
 8014cd0:	4602      	mov	r2, r0
 8014cd2:	460b      	mov	r3, r1
 8014cd4:	4640      	mov	r0, r8
 8014cd6:	4649      	mov	r1, r9
 8014cd8:	f7eb fad8 	bl	800028c <__adddf3>
 8014cdc:	4622      	mov	r2, r4
 8014cde:	462b      	mov	r3, r5
 8014ce0:	f7eb fc8a 	bl	80005f8 <__aeabi_dmul>
 8014ce4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014ce8:	4602      	mov	r2, r0
 8014cea:	460b      	mov	r3, r1
 8014cec:	d14b      	bne.n	8014d86 <atan+0x25e>
 8014cee:	4620      	mov	r0, r4
 8014cf0:	4629      	mov	r1, r5
 8014cf2:	f7eb fac9 	bl	8000288 <__aeabi_dsub>
 8014cf6:	e72c      	b.n	8014b52 <atan+0x2a>
 8014cf8:	ee10 0a10 	vmov	r0, s0
 8014cfc:	4b53      	ldr	r3, [pc, #332]	; (8014e4c <atan+0x324>)
 8014cfe:	2200      	movs	r2, #0
 8014d00:	4629      	mov	r1, r5
 8014d02:	f7eb fac1 	bl	8000288 <__aeabi_dsub>
 8014d06:	4b51      	ldr	r3, [pc, #324]	; (8014e4c <atan+0x324>)
 8014d08:	4606      	mov	r6, r0
 8014d0a:	460f      	mov	r7, r1
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	4620      	mov	r0, r4
 8014d10:	4629      	mov	r1, r5
 8014d12:	f7eb fabb 	bl	800028c <__adddf3>
 8014d16:	4602      	mov	r2, r0
 8014d18:	460b      	mov	r3, r1
 8014d1a:	4630      	mov	r0, r6
 8014d1c:	4639      	mov	r1, r7
 8014d1e:	f7eb fd95 	bl	800084c <__aeabi_ddiv>
 8014d22:	f04f 0a01 	mov.w	sl, #1
 8014d26:	4604      	mov	r4, r0
 8014d28:	460d      	mov	r5, r1
 8014d2a:	e764      	b.n	8014bf6 <atan+0xce>
 8014d2c:	4b49      	ldr	r3, [pc, #292]	; (8014e54 <atan+0x32c>)
 8014d2e:	429e      	cmp	r6, r3
 8014d30:	da1d      	bge.n	8014d6e <atan+0x246>
 8014d32:	ee10 0a10 	vmov	r0, s0
 8014d36:	4b48      	ldr	r3, [pc, #288]	; (8014e58 <atan+0x330>)
 8014d38:	2200      	movs	r2, #0
 8014d3a:	4629      	mov	r1, r5
 8014d3c:	f7eb faa4 	bl	8000288 <__aeabi_dsub>
 8014d40:	4b45      	ldr	r3, [pc, #276]	; (8014e58 <atan+0x330>)
 8014d42:	4606      	mov	r6, r0
 8014d44:	460f      	mov	r7, r1
 8014d46:	2200      	movs	r2, #0
 8014d48:	4620      	mov	r0, r4
 8014d4a:	4629      	mov	r1, r5
 8014d4c:	f7eb fc54 	bl	80005f8 <__aeabi_dmul>
 8014d50:	4b3e      	ldr	r3, [pc, #248]	; (8014e4c <atan+0x324>)
 8014d52:	2200      	movs	r2, #0
 8014d54:	f7eb fa9a 	bl	800028c <__adddf3>
 8014d58:	4602      	mov	r2, r0
 8014d5a:	460b      	mov	r3, r1
 8014d5c:	4630      	mov	r0, r6
 8014d5e:	4639      	mov	r1, r7
 8014d60:	f7eb fd74 	bl	800084c <__aeabi_ddiv>
 8014d64:	f04f 0a02 	mov.w	sl, #2
 8014d68:	4604      	mov	r4, r0
 8014d6a:	460d      	mov	r5, r1
 8014d6c:	e743      	b.n	8014bf6 <atan+0xce>
 8014d6e:	462b      	mov	r3, r5
 8014d70:	ee10 2a10 	vmov	r2, s0
 8014d74:	4939      	ldr	r1, [pc, #228]	; (8014e5c <atan+0x334>)
 8014d76:	2000      	movs	r0, #0
 8014d78:	f7eb fd68 	bl	800084c <__aeabi_ddiv>
 8014d7c:	f04f 0a03 	mov.w	sl, #3
 8014d80:	4604      	mov	r4, r0
 8014d82:	460d      	mov	r5, r1
 8014d84:	e737      	b.n	8014bf6 <atan+0xce>
 8014d86:	4b36      	ldr	r3, [pc, #216]	; (8014e60 <atan+0x338>)
 8014d88:	4e36      	ldr	r6, [pc, #216]	; (8014e64 <atan+0x33c>)
 8014d8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8014d8e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8014d92:	e9da 2300 	ldrd	r2, r3, [sl]
 8014d96:	f7eb fa77 	bl	8000288 <__aeabi_dsub>
 8014d9a:	4622      	mov	r2, r4
 8014d9c:	462b      	mov	r3, r5
 8014d9e:	f7eb fa73 	bl	8000288 <__aeabi_dsub>
 8014da2:	4602      	mov	r2, r0
 8014da4:	460b      	mov	r3, r1
 8014da6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014daa:	f7eb fa6d 	bl	8000288 <__aeabi_dsub>
 8014dae:	f1bb 0f00 	cmp.w	fp, #0
 8014db2:	4604      	mov	r4, r0
 8014db4:	460d      	mov	r5, r1
 8014db6:	f6bf aed6 	bge.w	8014b66 <atan+0x3e>
 8014dba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014dbe:	461d      	mov	r5, r3
 8014dc0:	e6d1      	b.n	8014b66 <atan+0x3e>
 8014dc2:	a51d      	add	r5, pc, #116	; (adr r5, 8014e38 <atan+0x310>)
 8014dc4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014dc8:	e6cd      	b.n	8014b66 <atan+0x3e>
 8014dca:	bf00      	nop
 8014dcc:	f3af 8000 	nop.w
 8014dd0:	54442d18 	.word	0x54442d18
 8014dd4:	bff921fb 	.word	0xbff921fb
 8014dd8:	8800759c 	.word	0x8800759c
 8014ddc:	7e37e43c 	.word	0x7e37e43c
 8014de0:	e322da11 	.word	0xe322da11
 8014de4:	3f90ad3a 	.word	0x3f90ad3a
 8014de8:	24760deb 	.word	0x24760deb
 8014dec:	3fa97b4b 	.word	0x3fa97b4b
 8014df0:	a0d03d51 	.word	0xa0d03d51
 8014df4:	3fb10d66 	.word	0x3fb10d66
 8014df8:	c54c206e 	.word	0xc54c206e
 8014dfc:	3fb745cd 	.word	0x3fb745cd
 8014e00:	920083ff 	.word	0x920083ff
 8014e04:	3fc24924 	.word	0x3fc24924
 8014e08:	5555550d 	.word	0x5555550d
 8014e0c:	3fd55555 	.word	0x3fd55555
 8014e10:	2c6a6c2f 	.word	0x2c6a6c2f
 8014e14:	bfa2b444 	.word	0xbfa2b444
 8014e18:	52defd9a 	.word	0x52defd9a
 8014e1c:	3fadde2d 	.word	0x3fadde2d
 8014e20:	af749a6d 	.word	0xaf749a6d
 8014e24:	3fb3b0f2 	.word	0x3fb3b0f2
 8014e28:	fe231671 	.word	0xfe231671
 8014e2c:	3fbc71c6 	.word	0x3fbc71c6
 8014e30:	9998ebc4 	.word	0x9998ebc4
 8014e34:	3fc99999 	.word	0x3fc99999
 8014e38:	54442d18 	.word	0x54442d18
 8014e3c:	3ff921fb 	.word	0x3ff921fb
 8014e40:	440fffff 	.word	0x440fffff
 8014e44:	7ff00000 	.word	0x7ff00000
 8014e48:	3fdbffff 	.word	0x3fdbffff
 8014e4c:	3ff00000 	.word	0x3ff00000
 8014e50:	3ff2ffff 	.word	0x3ff2ffff
 8014e54:	40038000 	.word	0x40038000
 8014e58:	3ff80000 	.word	0x3ff80000
 8014e5c:	bff00000 	.word	0xbff00000
 8014e60:	08016018 	.word	0x08016018
 8014e64:	08015ff8 	.word	0x08015ff8

08014e68 <fabs>:
 8014e68:	ec51 0b10 	vmov	r0, r1, d0
 8014e6c:	ee10 2a10 	vmov	r2, s0
 8014e70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014e74:	ec43 2b10 	vmov	d0, r2, r3
 8014e78:	4770      	bx	lr
 8014e7a:	0000      	movs	r0, r0
 8014e7c:	0000      	movs	r0, r0
	...

08014e80 <floor>:
 8014e80:	ec51 0b10 	vmov	r0, r1, d0
 8014e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8014e8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014e90:	2e13      	cmp	r6, #19
 8014e92:	ee10 5a10 	vmov	r5, s0
 8014e96:	ee10 8a10 	vmov	r8, s0
 8014e9a:	460c      	mov	r4, r1
 8014e9c:	dc32      	bgt.n	8014f04 <floor+0x84>
 8014e9e:	2e00      	cmp	r6, #0
 8014ea0:	da14      	bge.n	8014ecc <floor+0x4c>
 8014ea2:	a333      	add	r3, pc, #204	; (adr r3, 8014f70 <floor+0xf0>)
 8014ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ea8:	f7eb f9f0 	bl	800028c <__adddf3>
 8014eac:	2200      	movs	r2, #0
 8014eae:	2300      	movs	r3, #0
 8014eb0:	f7eb fe32 	bl	8000b18 <__aeabi_dcmpgt>
 8014eb4:	b138      	cbz	r0, 8014ec6 <floor+0x46>
 8014eb6:	2c00      	cmp	r4, #0
 8014eb8:	da57      	bge.n	8014f6a <floor+0xea>
 8014eba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014ebe:	431d      	orrs	r5, r3
 8014ec0:	d001      	beq.n	8014ec6 <floor+0x46>
 8014ec2:	4c2d      	ldr	r4, [pc, #180]	; (8014f78 <floor+0xf8>)
 8014ec4:	2500      	movs	r5, #0
 8014ec6:	4621      	mov	r1, r4
 8014ec8:	4628      	mov	r0, r5
 8014eca:	e025      	b.n	8014f18 <floor+0x98>
 8014ecc:	4f2b      	ldr	r7, [pc, #172]	; (8014f7c <floor+0xfc>)
 8014ece:	4137      	asrs	r7, r6
 8014ed0:	ea01 0307 	and.w	r3, r1, r7
 8014ed4:	4303      	orrs	r3, r0
 8014ed6:	d01f      	beq.n	8014f18 <floor+0x98>
 8014ed8:	a325      	add	r3, pc, #148	; (adr r3, 8014f70 <floor+0xf0>)
 8014eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ede:	f7eb f9d5 	bl	800028c <__adddf3>
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	f7eb fe17 	bl	8000b18 <__aeabi_dcmpgt>
 8014eea:	2800      	cmp	r0, #0
 8014eec:	d0eb      	beq.n	8014ec6 <floor+0x46>
 8014eee:	2c00      	cmp	r4, #0
 8014ef0:	bfbe      	ittt	lt
 8014ef2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014ef6:	fa43 f606 	asrlt.w	r6, r3, r6
 8014efa:	19a4      	addlt	r4, r4, r6
 8014efc:	ea24 0407 	bic.w	r4, r4, r7
 8014f00:	2500      	movs	r5, #0
 8014f02:	e7e0      	b.n	8014ec6 <floor+0x46>
 8014f04:	2e33      	cmp	r6, #51	; 0x33
 8014f06:	dd0b      	ble.n	8014f20 <floor+0xa0>
 8014f08:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014f0c:	d104      	bne.n	8014f18 <floor+0x98>
 8014f0e:	ee10 2a10 	vmov	r2, s0
 8014f12:	460b      	mov	r3, r1
 8014f14:	f7eb f9ba 	bl	800028c <__adddf3>
 8014f18:	ec41 0b10 	vmov	d0, r0, r1
 8014f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f20:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8014f24:	f04f 33ff 	mov.w	r3, #4294967295
 8014f28:	fa23 f707 	lsr.w	r7, r3, r7
 8014f2c:	4207      	tst	r7, r0
 8014f2e:	d0f3      	beq.n	8014f18 <floor+0x98>
 8014f30:	a30f      	add	r3, pc, #60	; (adr r3, 8014f70 <floor+0xf0>)
 8014f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f36:	f7eb f9a9 	bl	800028c <__adddf3>
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	f7eb fdeb 	bl	8000b18 <__aeabi_dcmpgt>
 8014f42:	2800      	cmp	r0, #0
 8014f44:	d0bf      	beq.n	8014ec6 <floor+0x46>
 8014f46:	2c00      	cmp	r4, #0
 8014f48:	da02      	bge.n	8014f50 <floor+0xd0>
 8014f4a:	2e14      	cmp	r6, #20
 8014f4c:	d103      	bne.n	8014f56 <floor+0xd6>
 8014f4e:	3401      	adds	r4, #1
 8014f50:	ea25 0507 	bic.w	r5, r5, r7
 8014f54:	e7b7      	b.n	8014ec6 <floor+0x46>
 8014f56:	2301      	movs	r3, #1
 8014f58:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014f5c:	fa03 f606 	lsl.w	r6, r3, r6
 8014f60:	4435      	add	r5, r6
 8014f62:	4545      	cmp	r5, r8
 8014f64:	bf38      	it	cc
 8014f66:	18e4      	addcc	r4, r4, r3
 8014f68:	e7f2      	b.n	8014f50 <floor+0xd0>
 8014f6a:	2500      	movs	r5, #0
 8014f6c:	462c      	mov	r4, r5
 8014f6e:	e7aa      	b.n	8014ec6 <floor+0x46>
 8014f70:	8800759c 	.word	0x8800759c
 8014f74:	7e37e43c 	.word	0x7e37e43c
 8014f78:	bff00000 	.word	0xbff00000
 8014f7c:	000fffff 	.word	0x000fffff

08014f80 <nan>:
 8014f80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014f88 <nan+0x8>
 8014f84:	4770      	bx	lr
 8014f86:	bf00      	nop
 8014f88:	00000000 	.word	0x00000000
 8014f8c:	7ff80000 	.word	0x7ff80000

08014f90 <scalbn>:
 8014f90:	b570      	push	{r4, r5, r6, lr}
 8014f92:	ec55 4b10 	vmov	r4, r5, d0
 8014f96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014f9a:	4606      	mov	r6, r0
 8014f9c:	462b      	mov	r3, r5
 8014f9e:	b99a      	cbnz	r2, 8014fc8 <scalbn+0x38>
 8014fa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014fa4:	4323      	orrs	r3, r4
 8014fa6:	d036      	beq.n	8015016 <scalbn+0x86>
 8014fa8:	4b39      	ldr	r3, [pc, #228]	; (8015090 <scalbn+0x100>)
 8014faa:	4629      	mov	r1, r5
 8014fac:	ee10 0a10 	vmov	r0, s0
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	f7eb fb21 	bl	80005f8 <__aeabi_dmul>
 8014fb6:	4b37      	ldr	r3, [pc, #220]	; (8015094 <scalbn+0x104>)
 8014fb8:	429e      	cmp	r6, r3
 8014fba:	4604      	mov	r4, r0
 8014fbc:	460d      	mov	r5, r1
 8014fbe:	da10      	bge.n	8014fe2 <scalbn+0x52>
 8014fc0:	a32b      	add	r3, pc, #172	; (adr r3, 8015070 <scalbn+0xe0>)
 8014fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fc6:	e03a      	b.n	801503e <scalbn+0xae>
 8014fc8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014fcc:	428a      	cmp	r2, r1
 8014fce:	d10c      	bne.n	8014fea <scalbn+0x5a>
 8014fd0:	ee10 2a10 	vmov	r2, s0
 8014fd4:	4620      	mov	r0, r4
 8014fd6:	4629      	mov	r1, r5
 8014fd8:	f7eb f958 	bl	800028c <__adddf3>
 8014fdc:	4604      	mov	r4, r0
 8014fde:	460d      	mov	r5, r1
 8014fe0:	e019      	b.n	8015016 <scalbn+0x86>
 8014fe2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014fe6:	460b      	mov	r3, r1
 8014fe8:	3a36      	subs	r2, #54	; 0x36
 8014fea:	4432      	add	r2, r6
 8014fec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014ff0:	428a      	cmp	r2, r1
 8014ff2:	dd08      	ble.n	8015006 <scalbn+0x76>
 8014ff4:	2d00      	cmp	r5, #0
 8014ff6:	a120      	add	r1, pc, #128	; (adr r1, 8015078 <scalbn+0xe8>)
 8014ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ffc:	da1c      	bge.n	8015038 <scalbn+0xa8>
 8014ffe:	a120      	add	r1, pc, #128	; (adr r1, 8015080 <scalbn+0xf0>)
 8015000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015004:	e018      	b.n	8015038 <scalbn+0xa8>
 8015006:	2a00      	cmp	r2, #0
 8015008:	dd08      	ble.n	801501c <scalbn+0x8c>
 801500a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801500e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015012:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015016:	ec45 4b10 	vmov	d0, r4, r5
 801501a:	bd70      	pop	{r4, r5, r6, pc}
 801501c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015020:	da19      	bge.n	8015056 <scalbn+0xc6>
 8015022:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015026:	429e      	cmp	r6, r3
 8015028:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801502c:	dd0a      	ble.n	8015044 <scalbn+0xb4>
 801502e:	a112      	add	r1, pc, #72	; (adr r1, 8015078 <scalbn+0xe8>)
 8015030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d1e2      	bne.n	8014ffe <scalbn+0x6e>
 8015038:	a30f      	add	r3, pc, #60	; (adr r3, 8015078 <scalbn+0xe8>)
 801503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801503e:	f7eb fadb 	bl	80005f8 <__aeabi_dmul>
 8015042:	e7cb      	b.n	8014fdc <scalbn+0x4c>
 8015044:	a10a      	add	r1, pc, #40	; (adr r1, 8015070 <scalbn+0xe0>)
 8015046:	e9d1 0100 	ldrd	r0, r1, [r1]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d0b8      	beq.n	8014fc0 <scalbn+0x30>
 801504e:	a10e      	add	r1, pc, #56	; (adr r1, 8015088 <scalbn+0xf8>)
 8015050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015054:	e7b4      	b.n	8014fc0 <scalbn+0x30>
 8015056:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801505a:	3236      	adds	r2, #54	; 0x36
 801505c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015060:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015064:	4620      	mov	r0, r4
 8015066:	4b0c      	ldr	r3, [pc, #48]	; (8015098 <scalbn+0x108>)
 8015068:	2200      	movs	r2, #0
 801506a:	e7e8      	b.n	801503e <scalbn+0xae>
 801506c:	f3af 8000 	nop.w
 8015070:	c2f8f359 	.word	0xc2f8f359
 8015074:	01a56e1f 	.word	0x01a56e1f
 8015078:	8800759c 	.word	0x8800759c
 801507c:	7e37e43c 	.word	0x7e37e43c
 8015080:	8800759c 	.word	0x8800759c
 8015084:	fe37e43c 	.word	0xfe37e43c
 8015088:	c2f8f359 	.word	0xc2f8f359
 801508c:	81a56e1f 	.word	0x81a56e1f
 8015090:	43500000 	.word	0x43500000
 8015094:	ffff3cb0 	.word	0xffff3cb0
 8015098:	3c900000 	.word	0x3c900000

0801509c <_init>:
 801509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801509e:	bf00      	nop
 80150a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150a2:	bc08      	pop	{r3}
 80150a4:	469e      	mov	lr, r3
 80150a6:	4770      	bx	lr

080150a8 <_fini>:
 80150a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150aa:	bf00      	nop
 80150ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150ae:	bc08      	pop	{r3}
 80150b0:	469e      	mov	lr, r3
 80150b2:	4770      	bx	lr
