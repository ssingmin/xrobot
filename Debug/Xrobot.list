
Xrobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800b284  0800b284  0001b284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5ac  0800b5ac  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5ac  0800b5ac  0001b5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5b4  0800b5b4  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5b4  0800b5b4  0001b5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5b8  0800b5b8  0001b5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800b5bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          00005298  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000533c  2000533c  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021d85  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c13  00000000  00000000  00041e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e0  00000000  00000000  00046a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017e8  00000000  00000000  00048450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006f8d  00000000  00000000  00049c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ea56  00000000  00000000  00050bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d143c  00000000  00000000  0006f61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140a57  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072a8  00000000  00000000  00140aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b26c 	.word	0x0800b26c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	0800b26c 	.word	0x0800b26c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ws2812NumOn>:

uint16_t g_led_data[(TOTALNUM*24)+CYCLE_RESET]={0,};//CYCLE_RESET of data = 0, not BIT_HIGH or BIT_LOW


void ws2812NumOn(uint32_t led_cnt)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint16_t *)g_led_data, (TOTALNUM*24)+CYCLE_RESET);
 800057c:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <ws2812NumOn+0x20>)
 8000582:	2100      	movs	r1, #0
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <ws2812NumOn+0x24>)
 8000586:	f004 fa37 	bl	80049f8 <HAL_TIM_PWM_Start_DMA>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000c0 	.word	0x200000c0
 8000598:	20000788 	.word	0x20000788

0800059c <ws2812SetColor>:


void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 800059c:	b480      	push	{r7}
 800059e:	b09d      	sub	sp, #116	; 0x74
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	4608      	mov	r0, r1
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	4603      	mov	r3, r0
 80005ac:	70fb      	strb	r3, [r7, #3]
 80005ae:	460b      	mov	r3, r1
 80005b0:	70bb      	strb	r3, [r7, #2]
 80005b2:	4613      	mov	r3, r2
 80005b4:	707b      	strb	r3, [r7, #1]
	uint32_t buf[TOTALNUM];

	buf[index] = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 80005b6:	78bb      	ldrb	r3, [r7, #2]
 80005b8:	021a      	lsls	r2, r3, #8
 80005ba:	78fb      	ldrb	r3, [r7, #3]
 80005bc:	4413      	add	r3, r2
 80005be:	021a      	lsls	r2, r3, #8
 80005c0:	787b      	ldrb	r3, [r7, #1]
 80005c2:	4413      	add	r3, r2
 80005c4:	461a      	mov	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	3370      	adds	r3, #112	; 0x70
 80005cc:	443b      	add	r3, r7
 80005ce:	f843 2c64 	str.w	r2, [r3, #-100]

	for(int i=0;i<24;i++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80005d6:	e02c      	b.n	8000632 <ws2812SetColor+0x96>
	{
		if(buf[index]&(1<<i)) {g_led_data[(TOTALNUM-index)*24-i] = BIT_HIGH;}
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	3370      	adds	r3, #112	; 0x70
 80005de:	443b      	add	r3, r7
 80005e0:	f853 3c64 	ldr.w	r3, [r3, #-100]
 80005e4:	2101      	movs	r1, #1
 80005e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80005e8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ec:	4013      	ands	r3, r2
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d00e      	beq.n	8000610 <ws2812SetColor+0x74>
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4613      	mov	r3, r2
 80005f6:	0092      	lsls	r2, r2, #2
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	461a      	mov	r2, r3
 80005fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000606:	4a10      	ldr	r2, [pc, #64]	; (8000648 <ws2812SetColor+0xac>)
 8000608:	2143      	movs	r1, #67	; 0x43
 800060a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800060e:	e00d      	b.n	800062c <ws2812SetColor+0x90>
		else {g_led_data[(TOTALNUM-index)*24-i] = BIT_LOW;}
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	4613      	mov	r3, r2
 8000614:	0092      	lsls	r2, r2, #2
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	461a      	mov	r2, r3
 800061c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000624:	4a08      	ldr	r2, [pc, #32]	; (8000648 <ws2812SetColor+0xac>)
 8000626:	2121      	movs	r1, #33	; 0x21
 8000628:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<24;i++)
 800062c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800062e:	3301      	adds	r3, #1
 8000630:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000634:	2b17      	cmp	r3, #23
 8000636:	ddcf      	ble.n	80005d8 <ws2812SetColor+0x3c>
	}
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3774      	adds	r7, #116	; 0x74
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	200000c0 	.word	0x200000c0

0800064c <ws2812AllColor>:


void ws2812AllColor(uint8_t red, uint8_t green, uint8_t blue)
{
 800064c:	b480      	push	{r7}
 800064e:	b087      	sub	sp, #28
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	460b      	mov	r3, r1
 8000658:	71bb      	strb	r3, [r7, #6]
 800065a:	4613      	mov	r3, r2
 800065c:	717b      	strb	r3, [r7, #5]
	uint32_t buf;

	buf = green*0x10000 + red*0x100 + blue;	//8bit+8bit+8bit=24bit
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	021a      	lsls	r2, r3, #8
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4413      	add	r3, r2
 8000666:	021a      	lsls	r2, r3, #8
 8000668:	797b      	ldrb	r3, [r7, #5]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]

	for(int j=TOTALNUM;j>0;j--)
 800066e:	2318      	movs	r3, #24
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	e02d      	b.n	80006d0 <ws2812AllColor+0x84>
	{
		for(int i=0;i<24;i++)
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	e024      	b.n	80006c4 <ws2812AllColor+0x78>
		{
			if(buf&(1<<i)) {g_led_data[(j*24)-i] = BIT_HIGH;}
 800067a:	2201      	movs	r2, #1
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4013      	ands	r3, r2
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00c      	beq.n	80006a6 <ws2812AllColor+0x5a>
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	4613      	mov	r3, r2
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	4413      	add	r3, r2
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	461a      	mov	r2, r3
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	4a11      	ldr	r2, [pc, #68]	; (80006e4 <ws2812AllColor+0x98>)
 800069e:	2143      	movs	r1, #67	; 0x43
 80006a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006a4:	e00b      	b.n	80006be <ws2812AllColor+0x72>
			else {g_led_data[(j*24)-i] = BIT_LOW;}
 80006a6:	697a      	ldr	r2, [r7, #20]
 80006a8:	4613      	mov	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	461a      	mov	r2, r3
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <ws2812AllColor+0x98>)
 80006b8:	2121      	movs	r1, #33	; 0x21
 80006ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<24;i++)
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	3301      	adds	r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	2b17      	cmp	r3, #23
 80006c8:	ddd7      	ble.n	800067a <ws2812AllColor+0x2e>
	for(int j=TOTALNUM;j>0;j--)
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	dcce      	bgt.n	8000674 <ws2812AllColor+0x28>
		}
	}
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	371c      	adds	r7, #28
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	200000c0 	.word	0x200000c0

080006e8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_CAN1_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_CAN1_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_CAN1_Init+0x64>)
 80006f4:	2206      	movs	r2, #6
 80006f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_CAN1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_CAN1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_CAN1_Init+0x64>)
 8000706:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800070a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_CAN1_Init+0x64>)
 800070e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000712:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_CAN1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_CAN1_Init+0x64>)
 800071c:	2201      	movs	r2, #1
 800071e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_CAN1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_CAN1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_CAN1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_CAN1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_CAN1_Init+0x64>)
 800073a:	f001 fcc1 	bl	80020c0 <HAL_CAN_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 fe54 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000608 	.word	0x20000608
 8000750:	40006400 	.word	0x40006400

08000754 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a1d      	ldr	r2, [pc, #116]	; (80007e8 <HAL_CAN_MspInit+0x94>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d134      	bne.n	80007e0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <HAL_CAN_MspInit+0x98>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <HAL_CAN_MspInit+0x98>)
 8000780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000784:	6413      	str	r3, [r2, #64]	; 0x40
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <HAL_CAN_MspInit+0x98>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <HAL_CAN_MspInit+0x98>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a14      	ldr	r2, [pc, #80]	; (80007ec <HAL_CAN_MspInit+0x98>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_CAN_MspInit+0x98>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007c0:	2309      	movs	r3, #9
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4809      	ldr	r0, [pc, #36]	; (80007f0 <HAL_CAN_MspInit+0x9c>)
 80007cc:	f002 fff4 	bl	80037b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2105      	movs	r1, #5
 80007d4:	2014      	movs	r0, #20
 80007d6:	f002 fbc3 	bl	8002f60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80007da:	2014      	movs	r0, #20
 80007dc:	f002 fbdc 	bl	8002f98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	; 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40006400 	.word	0x40006400
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400

080007f4 <CanInit>:
}

/* USER CODE BEGIN 1 */

void CanInit(uint32_t id, uint32_t mask)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <CanInit+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <CanInit+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <CanInit+0x98>)
 800080c:	2201      	movs	r2, #1
 800080e:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id<<3)>>16;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	0c1b      	lsrs	r3, r3, #16
 8000816:	4a1d      	ldr	r2, [pc, #116]	; (800088c <CanInit+0x98>)
 8000818:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = ((id<<3)&0xffff)|(0x1<<2);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	b29b      	uxth	r3, r3
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	4a19      	ldr	r2, [pc, #100]	; (800088c <CanInit+0x98>)
 8000826:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask<<3)>>16;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	0c1b      	lsrs	r3, r3, #16
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <CanInit+0x98>)
 8000830:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = ((mask<<3)&0xffff)|(0x1<<2);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	b29b      	uxth	r3, r3
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	4a13      	ldr	r2, [pc, #76]	; (800088c <CanInit+0x98>)
 800083e:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <CanInit+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <CanInit+0x98>)
 8000848:	2201      	movs	r2, #1
 800084a:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <CanInit+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 8000852:	480f      	ldr	r0, [pc, #60]	; (8000890 <CanInit+0x9c>)
 8000854:	f001 fe10 	bl	8002478 <HAL_CAN_Start>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <CanInit+0x6e>
 800085e:	f000 fdc7 	bl	80013f0 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 8000862:	2102      	movs	r1, #2
 8000864:	480a      	ldr	r0, [pc, #40]	; (8000890 <CanInit+0x9c>)
 8000866:	f002 f86d 	bl	8002944 <HAL_CAN_ActivateNotification>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d000      	beq.n	8000872 <CanInit+0x7e>
 8000870:	e7fe      	b.n	8000870 <CanInit+0x7c>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000872:	4906      	ldr	r1, [pc, #24]	; (800088c <CanInit+0x98>)
 8000874:	4806      	ldr	r0, [pc, #24]	; (8000890 <CanInit+0x9c>)
 8000876:	f001 fd1f 	bl	80022b8 <HAL_CAN_ConfigFilter>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <CanInit+0x90>
    {
		/* Filter configuration Error */
		Error_Handler();
 8000880:	f000 fdb6 	bl	80013f0 <Error_Handler>
    }
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200005e0 	.word	0x200005e0
 8000890:	20000608 	.word	0x20000608

08000894 <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	4611      	mov	r1, r2
 80008a0:	461a      	mov	r2, r3
 80008a2:	460b      	mov	r3, r1
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	4613      	mov	r3, r2
 80008a8:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 80008b6:	79bb      	ldrb	r3, [r7, #6]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <sendCan+0x2c>
 80008bc:	2304      	movs	r3, #4
 80008be:	e000      	b.n	80008c2 <sendCan+0x2e>
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 80008ce:	480d      	ldr	r0, [pc, #52]	; (8000904 <sendCan+0x70>)
 80008d0:	f001 fef1 	bl	80026b6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00d      	beq.n	80008fa <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	f107 0114 	add.w	r1, r7, #20
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	4806      	ldr	r0, [pc, #24]	; (8000904 <sendCan+0x70>)
 80008ea:	f001 fe09 	bl	8002500 <HAL_CAN_AddTxMessage>
 80008ee:	4603      	mov	r3, r0
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 80008f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d000      	beq.n	80008fa <sendCan+0x66>
 80008f8:	e7fe      	b.n	80008f8 <sendCan+0x64>
    }
}
 80008fa:	bf00      	nop
 80008fc:	3730      	adds	r7, #48	; 0x30
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000608 	.word	0x20000608

08000908 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000914:	2100      	movs	r1, #0
 8000916:	480a      	ldr	r0, [pc, #40]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000918:	f001 ff02 	bl	8002720 <HAL_CAN_GetRxMessage>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d000      	beq.n	8000924 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 8000922:	e7fe      	b.n	8000922 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	4a06      	ldr	r2, [pc, #24]	; (8000944 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800092c:	6013      	str	r3, [r2, #0]

}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200005bc 	.word	0x200005bc
 800093c:	200005c4 	.word	0x200005c4
 8000940:	20000608 	.word	0x20000608
 8000944:	200005b8 	.word	0x200005b8

08000948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_DMA_Init+0x68>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <MX_DMA_Init+0x68>)
 8000958:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_DMA_Init+0x68>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_DMA_Init+0x68>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <MX_DMA_Init+0x68>)
 8000974:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_DMA_Init+0x68>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	200e      	movs	r0, #14
 800098c:	f002 fae8 	bl	8002f60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000990:	200e      	movs	r0, #14
 8000992:	f002 fb01 	bl	8002f98 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2105      	movs	r1, #5
 800099a:	203a      	movs	r0, #58	; 0x3a
 800099c:	f002 fae0 	bl	8002f60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80009a0:	203a      	movs	r0, #58	; 0x3a
 80009a2:	f002 faf9 	bl	8002f98 <HAL_NVIC_EnableIRQ>

}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <fanInit>:

#include <fan.h>


void fanInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
    //HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_1);//stm32f103
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009b8:	2100      	movs	r1, #0
 80009ba:	4802      	ldr	r0, [pc, #8]	; (80009c4 <fanInit+0x10>)
 80009bc:	f003 ff54 	bl	8004868 <HAL_TIM_PWM_Start>
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200006f8 	.word	0x200006f8

080009c8 <fanOn>:

void fanOn(uint8_t duty)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	if(duty>=100){duty = 100;}
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b63      	cmp	r3, #99	; 0x63
 80009d6:	d901      	bls.n	80009dc <fanOn+0x14>
 80009d8:	2364      	movs	r3, #100	; 0x64
 80009da:	71fb      	strb	r3, [r7, #7]

	if(duty==0){htim1.Instance->CCR1 = 0;}
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d104      	bne.n	80009ec <fanOn+0x24>
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <fanOn+0x38>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2200      	movs	r2, #0
 80009e8:	635a      	str	r2, [r3, #52]	; 0x34
	else {htim1.Instance->CCR1 = duty;}//write gogo
}
 80009ea:	e003      	b.n	80009f4 <fanOn+0x2c>
	else {htim1.Instance->CCR1 = duty;}//write gogo
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <fanOn+0x38>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	79fa      	ldrb	r2, [r7, #7]
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	200006f8 	.word	0x200006f8

08000a04 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a08:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <MX_FREERTOS_Init+0x68>)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4818      	ldr	r0, [pc, #96]	; (8000a70 <MX_FREERTOS_Init+0x6c>)
 8000a0e:	f006 fddc 	bl	80075ca <osThreadNew>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <MX_FREERTOS_Init+0x70>)
 8000a16:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(StartTask02, NULL, &canTask_attributes);
 8000a18:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <MX_FREERTOS_Init+0x74>)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4817      	ldr	r0, [pc, #92]	; (8000a7c <MX_FREERTOS_Init+0x78>)
 8000a1e:	f006 fdd4 	bl	80075ca <osThreadNew>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a16      	ldr	r2, [pc, #88]	; (8000a80 <MX_FREERTOS_Init+0x7c>)
 8000a26:	6013      	str	r3, [r2, #0]

  /* creation of UartComm */
  UartCommHandle = osThreadNew(StartTask03, NULL, &UartComm_attributes);
 8000a28:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <MX_FREERTOS_Init+0x80>)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4816      	ldr	r0, [pc, #88]	; (8000a88 <MX_FREERTOS_Init+0x84>)
 8000a2e:	f006 fdcc 	bl	80075ca <osThreadNew>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <MX_FREERTOS_Init+0x88>)
 8000a36:	6013      	str	r3, [r2, #0]

  /* creation of NP_LED */
  NP_LEDHandle = osThreadNew(StartTask04, NULL, &NP_LED_attributes);
 8000a38:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <MX_FREERTOS_Init+0x8c>)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4815      	ldr	r0, [pc, #84]	; (8000a94 <MX_FREERTOS_Init+0x90>)
 8000a3e:	f006 fdc4 	bl	80075ca <osThreadNew>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <MX_FREERTOS_Init+0x94>)
 8000a46:	6013      	str	r3, [r2, #0]

  /* creation of fancntl */
  fancntlHandle = osThreadNew(StartTask05, NULL, &fancntl_attributes);
 8000a48:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <MX_FREERTOS_Init+0x98>)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4814      	ldr	r0, [pc, #80]	; (8000aa0 <MX_FREERTOS_Init+0x9c>)
 8000a4e:	f006 fdbc 	bl	80075ca <osThreadNew>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a13      	ldr	r2, [pc, #76]	; (8000aa4 <MX_FREERTOS_Init+0xa0>)
 8000a56:	6013      	str	r3, [r2, #0]

  /* creation of IRQ_PSx */
  IRQ_PSxHandle = osThreadNew(StartTask06, NULL, &IRQ_PSx_attributes);
 8000a58:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <MX_FREERTOS_Init+0xa4>)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4813      	ldr	r0, [pc, #76]	; (8000aac <MX_FREERTOS_Init+0xa8>)
 8000a5e:	f006 fdb4 	bl	80075ca <osThreadNew>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <MX_FREERTOS_Init+0xac>)
 8000a66:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	0800b41c 	.word	0x0800b41c
 8000a70:	08000ab5 	.word	0x08000ab5
 8000a74:	20000630 	.word	0x20000630
 8000a78:	0800b440 	.word	0x0800b440
 8000a7c:	08000ae1 	.word	0x08000ae1
 8000a80:	20000634 	.word	0x20000634
 8000a84:	0800b464 	.word	0x0800b464
 8000a88:	08000b25 	.word	0x08000b25
 8000a8c:	20000638 	.word	0x20000638
 8000a90:	0800b488 	.word	0x0800b488
 8000a94:	08000b6d 	.word	0x08000b6d
 8000a98:	2000063c 	.word	0x2000063c
 8000a9c:	0800b4ac 	.word	0x0800b4ac
 8000aa0:	08000f99 	.word	0x08000f99
 8000aa4:	20000640 	.word	0x20000640
 8000aa8:	0800b4d0 	.word	0x0800b4d0
 8000aac:	08000fcd 	.word	0x08000fcd
 8000ab0:	20000644 	.word	0x20000644

08000ab4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	//StartTask01 is related gpio toggle for state check //
	uint32_t lastTime = osKernelGetTickCount();
 8000abc:	f006 fd70 	bl	80075a0 <osKernelGetTickCount>
 8000ac0:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STATUS_LED;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ac8:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f006 fe0f 	bl	80076ee <osDelayUntil>

	HAL_GPIO_TogglePin(testled_GPIO_Port, testled_Pin);
 8000ad0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad4:	4801      	ldr	r0, [pc, #4]	; (8000adc <StartDefaultTask+0x28>)
 8000ad6:	f003 f824 	bl	8003b22 <HAL_GPIO_TogglePin>
	lastTime += PERIOD_STATUS_LED;
 8000ada:	e7f2      	b.n	8000ac2 <StartDefaultTask+0xe>
 8000adc:	40020800 	.word	0x40020800

08000ae0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	//StartTask02 is related CAN communication. //
	uint32_t lastTime = osKernelGetTickCount();
 8000ae8:	f006 fd5a 	bl	80075a0 <osKernelGetTickCount>
 8000aec:	6178      	str	r0, [r7, #20]

	CanInit(0,0);
 8000aee:	2100      	movs	r1, #0
 8000af0:	2000      	movs	r0, #0
 8000af2:	f7ff fe7f 	bl	80007f4 <CanInit>
  /* Infinite loop */
  for(;;)
  {
	  uint8_t canbuf[8]={1, 2, 3, 4, 5, 6, 7, 8};
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <StartTask02+0x40>)
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b00:	e883 0003 	stmia.w	r3, {r0, r1}

	lastTime += PERIOD_CANCOMM;;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	3314      	adds	r3, #20
 8000b08:	617b      	str	r3, [r7, #20]
	osDelayUntil(lastTime);
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	f006 fdef 	bl	80076ee <osDelayUntil>

	//for(int i=0;i<8;i++){canbuf[i]=0;}
	sendCan(0, canbuf, 8, 0);//(uint32_t ID, uint8_t data[8], uint8_t len, uint8_t ext
 8000b10:	f107 010c 	add.w	r1, r7, #12
 8000b14:	2300      	movs	r3, #0
 8000b16:	2208      	movs	r2, #8
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f7ff febb 	bl	8000894 <sendCan>
  {
 8000b1e:	e7ea      	b.n	8000af6 <StartTask02+0x16>
 8000b20:	0800b2bc 	.word	0x0800b2bc

08000b24 <StartTask03>:
					21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
					31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
					41, 42, 43, 44, 45, 46, 47, 48	};
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	uint32_t lastTime = osKernelGetTickCount();
 8000b2c:	f006 fd38 	bl	80075a0 <osKernelGetTickCount>
 8000b30:	60f8      	str	r0, [r7, #12]

	HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b38:	4809      	ldr	r0, [pc, #36]	; (8000b60 <StartTask03+0x3c>)
 8000b3a:	f002 ffd9 	bl	8003af0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STEERING;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	3332      	adds	r3, #50	; 0x32
 8000b42:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8000b44:	68f8      	ldr	r0, [r7, #12]
 8000b46:	f006 fdd2 	bl	80076ee <osDelayUntil>

	if(HAL_UART_Transmit_DMA(&huart3,testarr, 48)!= HAL_OK){Error_Handler();}
 8000b4a:	2230      	movs	r2, #48	; 0x30
 8000b4c:	4905      	ldr	r1, [pc, #20]	; (8000b64 <StartTask03+0x40>)
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <StartTask03+0x44>)
 8000b50:	f005 fbda 	bl	8006308 <HAL_UART_Transmit_DMA>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d0f1      	beq.n	8000b3e <StartTask03+0x1a>
 8000b5a:	f000 fc49 	bl	80013f0 <Error_Handler>
	lastTime += PERIOD_STEERING;
 8000b5e:	e7ee      	b.n	8000b3e <StartTask03+0x1a>
 8000b60:	40020400 	.word	0x40020400
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000874 	.word	0x20000874

08000b6c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	//StartTask04 is related ws2812b//
	uint32_t lastTime = osKernelGetTickCount();
 8000b74:	f006 fd14 	bl	80075a0 <osKernelGetTickCount>
 8000b78:	60f8      	str	r0, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
		lastTime += PERIOD_NP_LED;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000b80:	60fb      	str	r3, [r7, #12]
		osDelayUntil(lastTime);
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f006 fdb3 	bl	80076ee <osDelayUntil>


		temp++;
 8000b88:	4bd0      	ldr	r3, [pc, #832]	; (8000ecc <StartTask04+0x360>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	4acf      	ldr	r2, [pc, #828]	; (8000ecc <StartTask04+0x360>)
 8000b90:	6013      	str	r3, [r2, #0]
		switch (temp) {
 8000b92:	4bce      	ldr	r3, [pc, #824]	; (8000ecc <StartTask04+0x360>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	2b07      	cmp	r3, #7
 8000b9a:	f200 81ea 	bhi.w	8000f72 <StartTask04+0x406>
 8000b9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ba4 <StartTask04+0x38>)
 8000ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba4:	08000bc5 	.word	0x08000bc5
 8000ba8:	08000c2d 	.word	0x08000c2d
 8000bac:	08000c95 	.word	0x08000c95
 8000bb0:	08000cfd 	.word	0x08000cfd
 8000bb4:	08000d65 	.word	0x08000d65
 8000bb8:	08000de5 	.word	0x08000de5
 8000bbc:	08000e65 	.word	0x08000e65
 8000bc0:	08000eed 	.word	0x08000eed
			case 1:
				printf("case1\n");
 8000bc4:	48c2      	ldr	r0, [pc, #776]	; (8000ed0 <StartTask04+0x364>)
 8000bc6:	f009 fcf5 	bl	800a5b4 <puts>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8000bca:	2301      	movs	r3, #1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff fce3 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f7ff fcdd 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 8000be2:	2300      	movs	r3, #0
 8000be4:	2200      	movs	r2, #0
 8000be6:	2101      	movs	r1, #1
 8000be8:	2002      	movs	r0, #2
 8000bea:	f7ff fcd7 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8000bee:	2301      	movs	r3, #1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f7ff fcd1 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2004      	movs	r0, #4
 8000c02:	f7ff fccb 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 8000c06:	2300      	movs	r3, #0
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	2005      	movs	r0, #5
 8000c0e:	f7ff fcc5 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8000c12:	2301      	movs	r3, #1
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	2006      	movs	r0, #6
 8000c1a:	f7ff fcbf 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8000c1e:	2300      	movs	r3, #0
 8000c20:	2201      	movs	r2, #1
 8000c22:	2100      	movs	r1, #0
 8000c24:	2007      	movs	r0, #7
 8000c26:	f7ff fcb9 	bl	800059c <ws2812SetColor>
				break;
 8000c2a:	e1a2      	b.n	8000f72 <StartTask04+0x406>
			case 2:
				printf("case2\n");
 8000c2c:	48a9      	ldr	r0, [pc, #676]	; (8000ed4 <StartTask04+0x368>)
 8000c2e:	f009 fcc1 	bl	800a5b4 <puts>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8000c32:	2301      	movs	r3, #1
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2007      	movs	r0, #7
 8000c3a:	f7ff fcaf 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8000c3e:	2300      	movs	r3, #0
 8000c40:	2201      	movs	r2, #1
 8000c42:	2100      	movs	r1, #0
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff fca9 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2101      	movs	r1, #1
 8000c50:	2001      	movs	r0, #1
 8000c52:	f7ff fca3 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8000c56:	2301      	movs	r3, #1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	f7ff fc9d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8000c62:	2300      	movs	r3, #0
 8000c64:	2201      	movs	r2, #1
 8000c66:	2100      	movs	r1, #0
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f7ff fc97 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 8000c6e:	2300      	movs	r3, #0
 8000c70:	2200      	movs	r2, #0
 8000c72:	2101      	movs	r1, #1
 8000c74:	2004      	movs	r0, #4
 8000c76:	f7ff fc91 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2005      	movs	r0, #5
 8000c82:	f7ff fc8b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8000c86:	2300      	movs	r3, #0
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2006      	movs	r0, #6
 8000c8e:	f7ff fc85 	bl	800059c <ws2812SetColor>
				break;
 8000c92:	e16e      	b.n	8000f72 <StartTask04+0x406>
			case 3:
				printf("case3\n");
 8000c94:	4890      	ldr	r0, [pc, #576]	; (8000ed8 <StartTask04+0x36c>)
 8000c96:	f009 fc8d 	bl	800a5b4 <puts>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	f7ff fc7b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2100      	movs	r1, #0
 8000cac:	2007      	movs	r0, #7
 8000cae:	f7ff fc75 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff fc6f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff fc69 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8000cca:	2300      	movs	r3, #0
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f7ff fc63 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2101      	movs	r1, #1
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f7ff fc5d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2004      	movs	r0, #4
 8000cea:	f7ff fc57 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2005      	movs	r0, #5
 8000cf6:	f7ff fc51 	bl	800059c <ws2812SetColor>
				break;
 8000cfa:	e13a      	b.n	8000f72 <StartTask04+0x406>
			case 4:
				printf("case4\n");
 8000cfc:	4877      	ldr	r0, [pc, #476]	; (8000edc <StartTask04+0x370>)
 8000cfe:	f009 fc59 	bl	800a5b4 <puts>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8000d02:	2301      	movs	r3, #1
 8000d04:	2200      	movs	r2, #0
 8000d06:	2100      	movs	r1, #0
 8000d08:	2005      	movs	r0, #5
 8000d0a:	f7ff fc47 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8000d0e:	2300      	movs	r3, #0
 8000d10:	2201      	movs	r2, #1
 8000d12:	2100      	movs	r1, #0
 8000d14:	2006      	movs	r0, #6
 8000d16:	f7ff fc41 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2101      	movs	r1, #1
 8000d20:	2007      	movs	r0, #7
 8000d22:	f7ff fc3b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8000d26:	2301      	movs	r3, #1
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff fc35 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8000d32:	2300      	movs	r3, #0
 8000d34:	2201      	movs	r2, #1
 8000d36:	2100      	movs	r1, #0
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff fc2f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,1,0,0);//index, r, g, b
 8000d3e:	2300      	movs	r3, #0
 8000d40:	2200      	movs	r2, #0
 8000d42:	2101      	movs	r1, #1
 8000d44:	2002      	movs	r0, #2
 8000d46:	f7ff fc29 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2003      	movs	r0, #3
 8000d52:	f7ff fc23 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8000d56:	2300      	movs	r3, #0
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2004      	movs	r0, #4
 8000d5e:	f7ff fc1d 	bl	800059c <ws2812SetColor>
				break;
 8000d62:	e106      	b.n	8000f72 <StartTask04+0x406>
			case 5:
				printf("case5\n");
 8000d64:	485e      	ldr	r0, [pc, #376]	; (8000ee0 <StartTask04+0x374>)
 8000d66:	f009 fc25 	bl	800a5b4 <puts>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2004      	movs	r0, #4
 8000d72:	f7ff fc13 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8000d76:	2300      	movs	r3, #0
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2005      	movs	r0, #5
 8000d7e:	f7ff fc0d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 8000d82:	2300      	movs	r3, #0
 8000d84:	2200      	movs	r2, #0
 8000d86:	2101      	movs	r1, #1
 8000d88:	2006      	movs	r0, #6
 8000d8a:	f7ff fc07 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8000d8e:	2301      	movs	r3, #1
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	2007      	movs	r0, #7
 8000d96:	f7ff fc01 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff fbfb 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,1,0,0);//index, r, g, b
 8000da6:	2300      	movs	r3, #0
 8000da8:	2200      	movs	r2, #0
 8000daa:	2101      	movs	r1, #1
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff fbf5 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8000db2:	2301      	movs	r3, #1
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	2002      	movs	r0, #2
 8000dba:	f7ff fbef 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f7ff fbe9 	bl	800059c <ws2812SetColor>
				ws2812SetColor(8,0,0,1);//index, r, g, b
 8000dca:	2301      	movs	r3, #1
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2008      	movs	r0, #8
 8000dd2:	f7ff fbe3 	bl	800059c <ws2812SetColor>
				ws2812SetColor(9,0,1,0);//index, r, g, b
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2009      	movs	r0, #9
 8000dde:	f7ff fbdd 	bl	800059c <ws2812SetColor>

				break;
 8000de2:	e0c6      	b.n	8000f72 <StartTask04+0x406>
			case 6:
				printf("case6\n");
 8000de4:	483f      	ldr	r0, [pc, #252]	; (8000ee4 <StartTask04+0x378>)
 8000de6:	f009 fbe5 	bl	800a5b4 <puts>
				ws2812SetColor(3,0,0,1);//index, r, g, b
 8000dea:	2301      	movs	r3, #1
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2003      	movs	r0, #3
 8000df2:	f7ff fbd3 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,1,0);//index, r, g, b
 8000df6:	2300      	movs	r3, #0
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2004      	movs	r0, #4
 8000dfe:	f7ff fbcd 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,1,0,0);//index, r, g, b
 8000e02:	2300      	movs	r3, #0
 8000e04:	2200      	movs	r2, #0
 8000e06:	2101      	movs	r1, #1
 8000e08:	2005      	movs	r0, #5
 8000e0a:	f7ff fbc7 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,0,1);//index, r, g, b
 8000e0e:	2301      	movs	r3, #1
 8000e10:	2200      	movs	r2, #0
 8000e12:	2100      	movs	r1, #0
 8000e14:	2006      	movs	r0, #6
 8000e16:	f7ff fbc1 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,1,0);//index, r, g, b
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2007      	movs	r0, #7
 8000e22:	f7ff fbbb 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,1,0,0);//index, r, g, b
 8000e26:	2300      	movs	r3, #0
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff fbb5 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8000e32:	2301      	movs	r3, #1
 8000e34:	2200      	movs	r2, #0
 8000e36:	2100      	movs	r1, #0
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f7ff fbaf 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8000e3e:	2300      	movs	r3, #0
 8000e40:	2201      	movs	r2, #1
 8000e42:	2100      	movs	r1, #0
 8000e44:	2002      	movs	r0, #2
 8000e46:	f7ff fba9 	bl	800059c <ws2812SetColor>
				ws2812SetColor(8,0,1,1);//index, r, g, b
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2008      	movs	r0, #8
 8000e52:	f7ff fba3 	bl	800059c <ws2812SetColor>
				ws2812SetColor(9,1,1,0);//index, r, g, b
 8000e56:	2300      	movs	r3, #0
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	2009      	movs	r0, #9
 8000e5e:	f7ff fb9d 	bl	800059c <ws2812SetColor>
				break;
 8000e62:	e086      	b.n	8000f72 <StartTask04+0x406>
			case 7:
				printf("case7\n");
 8000e64:	4820      	ldr	r0, [pc, #128]	; (8000ee8 <StartTask04+0x37c>)
 8000e66:	f009 fba5 	bl	800a5b4 <puts>
				ws2812SetColor(2,0,0,1);//index, r, g, b
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2002      	movs	r0, #2
 8000e72:	f7ff fb93 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,0,1,0);//index, r, g, b
 8000e76:	2300      	movs	r3, #0
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f7ff fb8d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,1,0,0);//index, r, g, b
 8000e82:	2300      	movs	r3, #0
 8000e84:	2200      	movs	r2, #0
 8000e86:	2101      	movs	r1, #1
 8000e88:	2004      	movs	r0, #4
 8000e8a:	f7ff fb87 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,0,1);//index, r, g, b
 8000e8e:	2301      	movs	r3, #1
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2005      	movs	r0, #5
 8000e96:	f7ff fb81 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,0,1,0);//index, r, g, b
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2006      	movs	r0, #6
 8000ea2:	f7ff fb7b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,1,0,0);//index, r, g, b
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2101      	movs	r1, #1
 8000eac:	2007      	movs	r0, #7
 8000eae:	f7ff fb75 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,0,1);//index, r, g, b
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff fb6f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(1,0,1,0);//index, r, g, b
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f7ff fb69 	bl	800059c <ws2812SetColor>
				break;
 8000eca:	e052      	b.n	8000f72 <StartTask04+0x406>
 8000ecc:	20000648 	.word	0x20000648
 8000ed0:	0800b2c4 	.word	0x0800b2c4
 8000ed4:	0800b2cc 	.word	0x0800b2cc
 8000ed8:	0800b2d4 	.word	0x0800b2d4
 8000edc:	0800b2dc 	.word	0x0800b2dc
 8000ee0:	0800b2e4 	.word	0x0800b2e4
 8000ee4:	0800b2ec 	.word	0x0800b2ec
 8000ee8:	0800b2f4 	.word	0x0800b2f4
			case 8:
				printf("case8\n");
 8000eec:	4827      	ldr	r0, [pc, #156]	; (8000f8c <StartTask04+0x420>)
 8000eee:	f009 fb61 	bl	800a5b4 <puts>
				ws2812SetColor(1,0,0,1);//index, r, g, b
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f7ff fb4f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(2,0,1,0);//index, r, g, b
 8000efe:	2300      	movs	r3, #0
 8000f00:	2201      	movs	r2, #1
 8000f02:	2100      	movs	r1, #0
 8000f04:	2002      	movs	r0, #2
 8000f06:	f7ff fb49 	bl	800059c <ws2812SetColor>
				ws2812SetColor(3,1,0,0);//index, r, g, b
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2003      	movs	r0, #3
 8000f12:	f7ff fb43 	bl	800059c <ws2812SetColor>
				ws2812SetColor(4,0,0,1);//index, r, g, b
 8000f16:	2301      	movs	r3, #1
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2004      	movs	r0, #4
 8000f1e:	f7ff fb3d 	bl	800059c <ws2812SetColor>
				ws2812SetColor(5,0,1,0);//index, r, g, b
 8000f22:	2300      	movs	r3, #0
 8000f24:	2201      	movs	r2, #1
 8000f26:	2100      	movs	r1, #0
 8000f28:	2005      	movs	r0, #5
 8000f2a:	f7ff fb37 	bl	800059c <ws2812SetColor>
				ws2812SetColor(6,1,0,0);//index, r, g, b
 8000f2e:	2300      	movs	r3, #0
 8000f30:	2200      	movs	r2, #0
 8000f32:	2101      	movs	r1, #1
 8000f34:	2006      	movs	r0, #6
 8000f36:	f7ff fb31 	bl	800059c <ws2812SetColor>
				ws2812SetColor(7,0,0,1);//index, r, g, b
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2007      	movs	r0, #7
 8000f42:	f7ff fb2b 	bl	800059c <ws2812SetColor>
				ws2812SetColor(0,0,1,0);//index, r, g, b
 8000f46:	2300      	movs	r3, #0
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff fb25 	bl	800059c <ws2812SetColor>
				ws2812SetColor(8,1,1,1);//index, r, g, b
 8000f52:	2301      	movs	r3, #1
 8000f54:	2201      	movs	r2, #1
 8000f56:	2101      	movs	r1, #1
 8000f58:	2008      	movs	r0, #8
 8000f5a:	f7ff fb1f 	bl	800059c <ws2812SetColor>
				ws2812SetColor(9,1,1,1);//index, r, g, b
 8000f5e:	2301      	movs	r3, #1
 8000f60:	2201      	movs	r2, #1
 8000f62:	2101      	movs	r1, #1
 8000f64:	2009      	movs	r0, #9
 8000f66:	f7ff fb19 	bl	800059c <ws2812SetColor>
				temp=1;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <StartTask04+0x424>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
				break;
 8000f70:	bf00      	nop
		}

		ws2812AllColor(0,0,0);//r, g, b
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff fb68 	bl	800064c <ws2812AllColor>
		ws2812NumOn(NUM_NPLED);
 8000f7c:	2018      	movs	r0, #24
 8000f7e:	f7ff faf9 	bl	8000574 <ws2812NumOn>
		printf("task4\n");
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <StartTask04+0x428>)
 8000f84:	f009 fb16 	bl	800a5b4 <puts>
  {
 8000f88:	e5f7      	b.n	8000b7a <StartTask04+0xe>
 8000f8a:	bf00      	nop
 8000f8c:	0800b2fc 	.word	0x0800b2fc
 8000f90:	20000648 	.word	0x20000648
 8000f94:	0800b304 	.word	0x0800b304

08000f98 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	uint32_t lastTime = osKernelGetTickCount();
 8000fa0:	f006 fafe 	bl	80075a0 <osKernelGetTickCount>
 8000fa4:	60f8      	str	r0, [r7, #12]

	fanInit();
 8000fa6:	f7ff fd05 	bl	80009b4 <fanInit>

  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_FAN;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000fb0:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f006 fb9b 	bl	80076ee <osDelayUntil>
	fanOn(30);
 8000fb8:	201e      	movs	r0, #30
 8000fba:	f7ff fd05 	bl	80009c8 <fanOn>
	//htim1.Instance->CCR1 = 50;
	printf("task5\n");
 8000fbe:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <StartTask05+0x30>)
 8000fc0:	f009 faf8 	bl	800a5b4 <puts>
  {
 8000fc4:	e7f1      	b.n	8000faa <StartTask05+0x12>
 8000fc6:	bf00      	nop
 8000fc8:	0800b30c 	.word	0x0800b30c

08000fcc <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
	uint32_t lastTime = osKernelGetTickCount();
 8000fd4:	f006 fae4 	bl	80075a0 <osKernelGetTickCount>
 8000fd8:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_IRQ_PSx;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	330a      	adds	r3, #10
 8000fde:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f006 fb84 	bl	80076ee <osDelayUntil>
	lastTime += PERIOD_IRQ_PSx;
 8000fe6:	e7f8      	b.n	8000fda <StartTask06+0xe>

08000fe8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b57      	ldr	r3, [pc, #348]	; (8001160 <MX_GPIO_Init+0x178>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a56      	ldr	r2, [pc, #344]	; (8001160 <MX_GPIO_Init+0x178>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b54      	ldr	r3, [pc, #336]	; (8001160 <MX_GPIO_Init+0x178>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b50      	ldr	r3, [pc, #320]	; (8001160 <MX_GPIO_Init+0x178>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a4f      	ldr	r2, [pc, #316]	; (8001160 <MX_GPIO_Init+0x178>)
 8001024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b4d      	ldr	r3, [pc, #308]	; (8001160 <MX_GPIO_Init+0x178>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	4b49      	ldr	r3, [pc, #292]	; (8001160 <MX_GPIO_Init+0x178>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a48      	ldr	r2, [pc, #288]	; (8001160 <MX_GPIO_Init+0x178>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b46      	ldr	r3, [pc, #280]	; (8001160 <MX_GPIO_Init+0x178>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b42      	ldr	r3, [pc, #264]	; (8001160 <MX_GPIO_Init+0x178>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a41      	ldr	r2, [pc, #260]	; (8001160 <MX_GPIO_Init+0x178>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <MX_GPIO_Init+0x178>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <MX_GPIO_Init+0x178>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a3a      	ldr	r2, [pc, #232]	; (8001160 <MX_GPIO_Init+0x178>)
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b38      	ldr	r3, [pc, #224]	; (8001160 <MX_GPIO_Init+0x178>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 800108a:	2200      	movs	r2, #0
 800108c:	f64f 413e 	movw	r1, #64574	; 0xfc3e
 8001090:	4834      	ldr	r0, [pc, #208]	; (8001164 <MX_GPIO_Init+0x17c>)
 8001092:	f002 fd2d 	bl	8003af0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_DE_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f244 0110 	movw	r1, #16400	; 0x4010
 800109c:	4832      	ldr	r0, [pc, #200]	; (8001168 <MX_GPIO_Init+0x180>)
 800109e:	f002 fd27 	bl	8003af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2104      	movs	r1, #4
 80010a6:	4831      	ldr	r0, [pc, #196]	; (800116c <MX_GPIO_Init+0x184>)
 80010a8:	f002 fd22 	bl	8003af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC1
                           PC2 PC3 PC4 PC5
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 80010ac:	f64f 433e 	movw	r3, #64574	; 0xfc3e
 80010b0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4827      	ldr	r0, [pc, #156]	; (8001164 <MX_GPIO_Init+0x17c>)
 80010c6:	f002 fb77 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010ca:	2301      	movs	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ce:	2303      	movs	r3, #3
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4821      	ldr	r0, [pc, #132]	; (8001164 <MX_GPIO_Init+0x17c>)
 80010de:	f002 fb6b 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PS_SIG1_Pin|PS_SIG2_Pin|PS_SIG3_Pin|PS_SIG4_Pin;
 80010e2:	23f0      	movs	r3, #240	; 0xf0
 80010e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010e6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	481e      	ldr	r0, [pc, #120]	; (8001170 <MX_GPIO_Init+0x188>)
 80010f8:	f002 fb5e 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 */
  GPIO_InitStruct.Pin = RS485_DE_Pin|GPIO_PIN_4;
 80010fc:	f244 0310 	movw	r3, #16400	; 0x4010
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4814      	ldr	r0, [pc, #80]	; (8001168 <MX_GPIO_Init+0x180>)
 8001116:	f002 fb4f 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800111a:	2304      	movs	r3, #4
 800111c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	480e      	ldr	r0, [pc, #56]	; (800116c <MX_GPIO_Init+0x184>)
 8001132:	f002 fb41 	bl	80037b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2105      	movs	r1, #5
 800113a:	200a      	movs	r0, #10
 800113c:	f001 ff10 	bl	8002f60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001140:	200a      	movs	r0, #10
 8001142:	f001 ff29 	bl	8002f98 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2105      	movs	r1, #5
 800114a:	2017      	movs	r0, #23
 800114c:	f001 ff08 	bl	8002f60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001150:	2017      	movs	r0, #23
 8001152:	f001 ff21 	bl	8002f98 <HAL_NVIC_EnableIRQ>

}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	; 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40020800 	.word	0x40020800
 8001168:	40020400 	.word	0x40020400
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40020000 	.word	0x40020000

08001174 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	80fb      	strh	r3, [r7, #6]
    }

    if(GPIO_Pin == PS_SIG4_Pin) {
    	//printf("GPIO_EXTI_Callback PS_SIG4_Pin.\n");
    }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_I2C1_SMBUS_Init+0x68>)
 8001192:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <MX_I2C1_SMBUS_Init+0x6c>)
 8001194:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.ClockSpeed = 100000;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_I2C1_SMBUS_Init+0x68>)
 8001198:	4a18      	ldr	r2, [pc, #96]	; (80011fc <MX_I2C1_SMBUS_Init+0x70>)
 800119a:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.OwnAddress1 = 0;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_I2C1_SMBUS_Init+0x68>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_I2C1_SMBUS_Init+0x68>)
 80011a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011a8:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_I2C1_SMBUS_Init+0x68>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_I2C1_SMBUS_Init+0x68>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_I2C1_SMBUS_Init+0x68>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <MX_I2C1_SMBUS_Init+0x68>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_I2C1_SMBUS_Init+0x68>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_I2C1_SMBUS_Init+0x68>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 80011ce:	4809      	ldr	r0, [pc, #36]	; (80011f4 <MX_I2C1_SMBUS_Init+0x68>)
 80011d0:	f003 f964 	bl	800449c <HAL_SMBUS_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_I2C1_SMBUS_Init+0x52>
  {
    Error_Handler();
 80011da:	f000 f909 	bl	80013f0 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_I2C1_SMBUS_Init+0x68>)
 80011e0:	f003 fa12 	bl	8004608 <HAL_SMBUS_EnableAlert_IT>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 80011ea:	f000 f901 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000064c 	.word	0x2000064c
 80011f8:	40005400 	.word	0x40005400
 80011fc:	000186a0 	.word	0x000186a0

08001200 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(smbusHandle->Instance==I2C1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a19      	ldr	r2, [pc, #100]	; (8001284 <HAL_SMBUS_MspInit+0x84>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d12b      	bne.n	800127a <HAL_SMBUS_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <HAL_SMBUS_MspInit+0x88>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a17      	ldr	r2, [pc, #92]	; (8001288 <HAL_SMBUS_MspInit+0x88>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_SMBUS_MspInit+0x88>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB5     ------> I2C1_SMBA
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800123e:	23e0      	movs	r3, #224	; 0xe0
 8001240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001242:	2312      	movs	r3, #18
 8001244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800124e:	2304      	movs	r3, #4
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <HAL_SMBUS_MspInit+0x8c>)
 800125a:	f002 faad 	bl	80037b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_SMBUS_MspInit+0x88>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_SMBUS_MspInit+0x88>)
 8001268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_SMBUS_MspInit+0x88>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	; 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40005400 	.word	0x40005400
 8001288:	40023800 	.word	0x40023800
 800128c:	40020400 	.word	0x40020400

08001290 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)//485 task for nuri motor must change uart port
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, (uint16_t)len, 100);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	2364      	movs	r3, #100	; 0x64
 80012a2:	68b9      	ldr	r1, [r7, #8]
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <_write+0x24>)
 80012a6:	f004 ff6c 	bl	8006182 <HAL_UART_Transmit>
	return (len);
 80012aa:	687b      	ldr	r3, [r7, #4]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000830 	.word	0x20000830

080012b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012bc:	f000 febe 	bl	800203c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c0:	f000 f81a 	bl	80012f8 <SystemClock_Config>
  MX_TIM3_Init();
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c4:	f7ff fe90 	bl	8000fe8 <MX_GPIO_Init>
  MX_CAN1_Init();
 80012c8:	f7ff fa0e 	bl	80006e8 <MX_CAN1_Init>

  MX_TIM1_Init();
 80012cc:	f000 fa48 	bl	8001760 <MX_TIM1_Init>
  MX_I2C1_SMBUS_Init();
 80012d0:	f7ff ff5c 	bl	800118c <MX_I2C1_SMBUS_Init>
  MX_DMA_Init();
 80012d4:	f7ff fb38 	bl	8000948 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80012d8:	f000 fd9c 	bl	8001e14 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80012dc:	f000 fd70 	bl	8001dc0 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 80012e0:	f000 fb6c 	bl	80019bc <MX_TIM8_Init>
  MX_TIM3_Init();
 80012e4:	f000 faee 	bl	80018c4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80012e8:	f006 f910 	bl	800750c <osKernelInitialize>
  MX_FREERTOS_Init();
 80012ec:	f7ff fb8a 	bl	8000a04 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012f0:	f006 f930 	bl	8007554 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <main+0x3c>
	...

080012f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b094      	sub	sp, #80	; 0x50
 80012fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	2230      	movs	r2, #48	; 0x30
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f009 f831 	bl	800a36e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <SystemClock_Config+0xcc>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <SystemClock_Config+0xcc>)
 8001326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132a:	6413      	str	r3, [r2, #64]	; 0x40
 800132c:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <SystemClock_Config+0xcc>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <SystemClock_Config+0xd0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <SystemClock_Config+0xd0>)
 8001342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <SystemClock_Config+0xd0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001354:	2301      	movs	r3, #1
 8001356:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	2302      	movs	r3, #2
 8001360:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001362:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001366:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001368:	2306      	movs	r3, #6
 800136a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800136c:	23a8      	movs	r3, #168	; 0xa8
 800136e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001370:	2302      	movs	r3, #2
 8001372:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001374:	2304      	movs	r3, #4
 8001376:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001378:	f107 0320 	add.w	r3, r7, #32
 800137c:	4618      	mov	r0, r3
 800137e:	f002 fc03 	bl	8003b88 <HAL_RCC_OscConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001388:	f000 f832 	bl	80013f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138c:	230f      	movs	r3, #15
 800138e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001390:	2302      	movs	r3, #2
 8001392:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001398:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800139c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800139e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	2105      	movs	r1, #5
 80013aa:	4618      	mov	r0, r3
 80013ac:	f002 fe64 	bl	8004078 <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013b6:	f000 f81b 	bl	80013f0 <Error_Handler>
  }
}
 80013ba:	bf00      	nop
 80013bc:	3750      	adds	r7, #80	; 0x50
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40007000 	.word	0x40007000

080013cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013de:	f000 fe4f 	bl	8002080 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40001000 	.word	0x40001000

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <Error_Handler+0x8>
	...

080013fc <HAL_UART_RxCpltCallback>:
void ServoMotor_init()
{
	HAL_UART_Receive_IT(&huart3, tmp_rx, 12);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {printf("hal_rev irq: %d\n", HAL_UART_Receive_IT(&huart3, tmp_rx, 12));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <HAL_UART_RxCpltCallback+0x3c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d109      	bne.n	8001422 <HAL_UART_RxCpltCallback+0x26>
 800140e:	220c      	movs	r2, #12
 8001410:	490a      	ldr	r1, [pc, #40]	; (800143c <HAL_UART_RxCpltCallback+0x40>)
 8001412:	480b      	ldr	r0, [pc, #44]	; (8001440 <HAL_UART_RxCpltCallback+0x44>)
 8001414:	f004 ff47 	bl	80062a6 <HAL_UART_Receive_IT>
 8001418:	4603      	mov	r3, r0
 800141a:	4619      	mov	r1, r3
 800141c:	4809      	ldr	r0, [pc, #36]	; (8001444 <HAL_UART_RxCpltCallback+0x48>)
 800141e:	f009 f843 	bl	800a4a8 <iprintf>
	}//SET INTERRUPT
	flag_rx = 1;
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_UART_RxCpltCallback+0x4c>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]
	printf("H_URCBf\n");
 8001428:	4808      	ldr	r0, [pc, #32]	; (800144c <HAL_UART_RxCpltCallback+0x50>)
 800142a:	f009 f8c3 	bl	800a5b4 <puts>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40004800 	.word	0x40004800
 800143c:	200006a0 	.word	0x200006a0
 8001440:	20000874 	.word	0x20000874
 8001444:	0800b314 	.word	0x0800b314
 8001448:	2000069c 	.word	0x2000069c
 800144c:	0800b328 	.word	0x0800b328

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_MspInit+0x54>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <HAL_MspInit+0x54>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_MspInit+0x54>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_MspInit+0x54>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_MspInit+0x54>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_MspInit+0x54>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	210f      	movs	r1, #15
 8001492:	f06f 0001 	mvn.w	r0, #1
 8001496:	f001 fd63 	bl	8002f60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	; 0x30
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	2036      	movs	r0, #54	; 0x36
 80014be:	f001 fd4f 	bl	8002f60 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014c2:	2036      	movs	r0, #54	; 0x36
 80014c4:	f001 fd68 	bl	8002f98 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	4b1f      	ldr	r3, [pc, #124]	; (800154c <HAL_InitTick+0xa4>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	4a1e      	ldr	r2, [pc, #120]	; (800154c <HAL_InitTick+0xa4>)
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	6413      	str	r3, [r2, #64]	; 0x40
 80014d8:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_InitTick+0xa4>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014e4:	f107 0210 	add.w	r2, r7, #16
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 ffa2 	bl	8004438 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80014f4:	f002 ff78 	bl	80043e8 <HAL_RCC_GetPCLK1Freq>
 80014f8:	4603      	mov	r3, r0
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001500:	4a13      	ldr	r2, [pc, #76]	; (8001550 <HAL_InitTick+0xa8>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	0c9b      	lsrs	r3, r3, #18
 8001508:	3b01      	subs	r3, #1
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_InitTick+0xac>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <HAL_InitTick+0xb0>)
 8001510:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_InitTick+0xac>)
 8001514:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001518:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_InitTick+0xac>)
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_InitTick+0xac>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_InitTick+0xac>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800152c:	4809      	ldr	r0, [pc, #36]	; (8001554 <HAL_InitTick+0xac>)
 800152e:	f003 f88b 	bl	8004648 <HAL_TIM_Base_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d104      	bne.n	8001542 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001538:	4806      	ldr	r0, [pc, #24]	; (8001554 <HAL_InitTick+0xac>)
 800153a:	f003 f8d5 	bl	80046e8 <HAL_TIM_Base_Start_IT>
 800153e:	4603      	mov	r3, r0
 8001540:	e000      	b.n	8001544 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	3730      	adds	r7, #48	; 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	431bde83 	.word	0x431bde83
 8001554:	200006ac 	.word	0x200006ac
 8001558:	40001000 	.word	0x40001000

0800155c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <NMI_Handler+0x4>

08001562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <HardFault_Handler+0x4>

08001568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <MemManage_Handler+0x4>

0800156e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <BusFault_Handler+0x4>

08001574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <UsageFault_Handler+0x4>

0800157a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG1_Pin);
 800158c:	2010      	movs	r0, #16
 800158e:	f002 fae3 	bl	8003b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <DMA1_Stream3_IRQHandler+0x10>)
 800159e:	f001 fea1 	bl	80032e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200008b8 	.word	0x200008b8

080015ac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <CAN1_RX0_IRQHandler+0x10>)
 80015b2:	f001 f9ed 	bl	8002990 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000608 	.word	0x20000608

080015c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG2_Pin);
 80015c4:	2020      	movs	r0, #32
 80015c6:	f002 fac7 	bl	8003b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG3_Pin);
 80015ca:	2040      	movs	r0, #64	; 0x40
 80015cc:	f002 fac4 	bl	8003b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG4_Pin);
 80015d0:	2080      	movs	r0, #128	; 0x80
 80015d2:	f002 fac1 	bl	8003b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <USART2_IRQHandler+0x10>)
 80015e2:	f004 ff0f 	bl	8006404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000830 	.word	0x20000830

080015f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <USART3_IRQHandler+0x10>)
 80015f6:	f004 ff05 	bl	8006404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000874 	.word	0x20000874

08001604 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <TIM6_DAC_IRQHandler+0x10>)
 800160a:	f003 fc16 	bl	8004e3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200006ac 	.word	0x200006ac

08001618 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <DMA2_Stream2_IRQHandler+0x10>)
 800161e:	f001 fe61 	bl	80032e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200007d0 	.word	0x200007d0

0800162c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e00a      	b.n	8001654 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800163e:	f3af 8000 	nop.w
 8001642:	4601      	mov	r1, r0
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	60ba      	str	r2, [r7, #8]
 800164a:	b2ca      	uxtb	r2, r1
 800164c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	dbf0      	blt.n	800163e <_read+0x12>
	}

return len;
 800165c:	687b      	ldr	r3, [r7, #4]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
	return -1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168e:	605a      	str	r2, [r3, #4]
	return 0;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_isatty>:

int _isatty(int file)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
	return 1;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
	return 0;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f008 fd04 	bl	800a10c <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20020000 	.word	0x20020000
 8001730:	00000400 	.word	0x00000400
 8001734:	200006f4 	.word	0x200006f4
 8001738:	20005340 	.word	0x20005340

0800173c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SystemInit+0x20>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <SystemInit+0x20>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
DMA_HandleTypeDef hdma_tim8_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b096      	sub	sp, #88	; 0x58
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001766:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001770:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	615a      	str	r2, [r3, #20]
 8001782:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2220      	movs	r2, #32
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f008 fde8 	bl	800a36e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800179e:	4b47      	ldr	r3, [pc, #284]	; (80018bc <MX_TIM1_Init+0x15c>)
 80017a0:	4a47      	ldr	r2, [pc, #284]	; (80018c0 <MX_TIM1_Init+0x160>)
 80017a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680-1;
 80017a4:	4b45      	ldr	r3, [pc, #276]	; (80018bc <MX_TIM1_Init+0x15c>)
 80017a6:	f240 628f 	movw	r2, #1679	; 0x68f
 80017aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b43      	ldr	r3, [pc, #268]	; (80018bc <MX_TIM1_Init+0x15c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80017b2:	4b42      	ldr	r3, [pc, #264]	; (80018bc <MX_TIM1_Init+0x15c>)
 80017b4:	2263      	movs	r2, #99	; 0x63
 80017b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b40      	ldr	r3, [pc, #256]	; (80018bc <MX_TIM1_Init+0x15c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017be:	4b3f      	ldr	r3, [pc, #252]	; (80018bc <MX_TIM1_Init+0x15c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c4:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <MX_TIM1_Init+0x15c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ca:	483c      	ldr	r0, [pc, #240]	; (80018bc <MX_TIM1_Init+0x15c>)
 80017cc:	f002 fffc 	bl	80047c8 <HAL_TIM_PWM_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017d6:	f7ff fe0b 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80017da:	4838      	ldr	r0, [pc, #224]	; (80018bc <MX_TIM1_Init+0x15c>)
 80017dc:	f003 fad4 	bl	8004d88 <HAL_TIM_IC_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80017e6:	f7ff fe03 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017f6:	4619      	mov	r1, r3
 80017f8:	4830      	ldr	r0, [pc, #192]	; (80018bc <MX_TIM1_Init+0x15c>)
 80017fa:	f004 fb93 	bl	8005f24 <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001804:	f7ff fdf4 	bl	80013f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001808:	2360      	movs	r3, #96	; 0x60
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001810:	2300      	movs	r3, #0
 8001812:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001814:	2300      	movs	r3, #0
 8001816:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001824:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001828:	2200      	movs	r2, #0
 800182a:	4619      	mov	r1, r3
 800182c:	4823      	ldr	r0, [pc, #140]	; (80018bc <MX_TIM1_Init+0x15c>)
 800182e:	f003 fca9 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001838:	f7ff fdda 	bl	80013f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001840:	2301      	movs	r3, #1
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800184c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001850:	2204      	movs	r2, #4
 8001852:	4619      	mov	r1, r3
 8001854:	4819      	ldr	r0, [pc, #100]	; (80018bc <MX_TIM1_Init+0x15c>)
 8001856:	f003 fbf8 	bl	800504a <HAL_TIM_IC_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8001860:	f7ff fdc6 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	2208      	movs	r2, #8
 800186a:	4619      	mov	r1, r3
 800186c:	4813      	ldr	r0, [pc, #76]	; (80018bc <MX_TIM1_Init+0x15c>)
 800186e:	f003 fbec 	bl	800504a <HAL_TIM_IC_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8001878:	f7ff fdba 	bl	80013f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001894:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	4619      	mov	r1, r3
 800189e:	4807      	ldr	r0, [pc, #28]	; (80018bc <MX_TIM1_Init+0x15c>)
 80018a0:	f004 fbbc 	bl	800601c <HAL_TIMEx_ConfigBreakDeadTime>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80018aa:	f7ff fda1 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018ae:	4803      	ldr	r0, [pc, #12]	; (80018bc <MX_TIM1_Init+0x15c>)
 80018b0:	f000 fa22 	bl	8001cf8 <HAL_TIM_MspPostInit>

}
 80018b4:	bf00      	nop
 80018b6:	3758      	adds	r7, #88	; 0x58
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200006f8 	.word	0x200006f8
 80018c0:	40010000 	.word	0x40010000

080018c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ca:	f107 0318 	add.w	r3, r7, #24
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018e2:	463b      	mov	r3, r7
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018ee:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <MX_TIM3_Init+0xf0>)
 80018f0:	4a31      	ldr	r2, [pc, #196]	; (80019b8 <MX_TIM3_Init+0xf4>)
 80018f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018f4:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <MX_TIM3_Init+0xf0>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fa:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <MX_TIM3_Init+0xf0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001900:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <MX_TIM3_Init+0xf0>)
 8001902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001906:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001908:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <MX_TIM3_Init+0xf0>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190e:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <MX_TIM3_Init+0xf0>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001914:	4827      	ldr	r0, [pc, #156]	; (80019b4 <MX_TIM3_Init+0xf0>)
 8001916:	f002 fe97 	bl	8004648 <HAL_TIM_Base_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001920:	f7ff fd66 	bl	80013f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001928:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800192a:	f107 0318 	add.w	r3, r7, #24
 800192e:	4619      	mov	r1, r3
 8001930:	4820      	ldr	r0, [pc, #128]	; (80019b4 <MX_TIM3_Init+0xf0>)
 8001932:	f003 fce9 	bl	8005308 <HAL_TIM_ConfigClockSource>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800193c:	f7ff fd58 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001940:	481c      	ldr	r0, [pc, #112]	; (80019b4 <MX_TIM3_Init+0xf0>)
 8001942:	f003 fa21 	bl	8004d88 <HAL_TIM_IC_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800194c:	f7ff fd50 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	4619      	mov	r1, r3
 800195e:	4815      	ldr	r0, [pc, #84]	; (80019b4 <MX_TIM3_Init+0xf0>)
 8001960:	f004 fae0 	bl	8005f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800196a:	f7ff fd41 	bl	80013f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800196e:	2300      	movs	r3, #0
 8001970:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001972:	2301      	movs	r3, #1
 8001974:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800197e:	463b      	mov	r3, r7
 8001980:	2208      	movs	r2, #8
 8001982:	4619      	mov	r1, r3
 8001984:	480b      	ldr	r0, [pc, #44]	; (80019b4 <MX_TIM3_Init+0xf0>)
 8001986:	f003 fb60 	bl	800504a <HAL_TIM_IC_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001990:	f7ff fd2e 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	220c      	movs	r2, #12
 8001998:	4619      	mov	r1, r3
 800199a:	4806      	ldr	r0, [pc, #24]	; (80019b4 <MX_TIM3_Init+0xf0>)
 800199c:	f003 fb55 	bl	800504a <HAL_TIM_IC_ConfigChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80019a6:	f7ff fd23 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	; 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000740 	.word	0x20000740
 80019b8:	40000400 	.word	0x40000400

080019bc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b096      	sub	sp, #88	; 0x58
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2220      	movs	r2, #32
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f008 fcba 	bl	800a36e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019fa:	4b50      	ldr	r3, [pc, #320]	; (8001b3c <MX_TIM8_Init+0x180>)
 80019fc:	4a50      	ldr	r2, [pc, #320]	; (8001b40 <MX_TIM8_Init+0x184>)
 80019fe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8001a00:	4b4e      	ldr	r3, [pc, #312]	; (8001b3c <MX_TIM8_Init+0x180>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a06:	4b4d      	ldr	r3, [pc, #308]	; (8001b3c <MX_TIM8_Init+0x180>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 104;
 8001a0c:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <MX_TIM8_Init+0x180>)
 8001a0e:	2268      	movs	r2, #104	; 0x68
 8001a10:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a12:	4b4a      	ldr	r3, [pc, #296]	; (8001b3c <MX_TIM8_Init+0x180>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a18:	4b48      	ldr	r3, [pc, #288]	; (8001b3c <MX_TIM8_Init+0x180>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1e:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <MX_TIM8_Init+0x180>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a24:	4845      	ldr	r0, [pc, #276]	; (8001b3c <MX_TIM8_Init+0x180>)
 8001a26:	f002 fe0f 	bl	8004648 <HAL_TIM_Base_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001a30:	f7ff fcde 	bl	80013f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a3e:	4619      	mov	r1, r3
 8001a40:	483e      	ldr	r0, [pc, #248]	; (8001b3c <MX_TIM8_Init+0x180>)
 8001a42:	f003 fc61 	bl	8005308 <HAL_TIM_ConfigClockSource>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001a4c:	f7ff fcd0 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a50:	483a      	ldr	r0, [pc, #232]	; (8001b3c <MX_TIM8_Init+0x180>)
 8001a52:	f002 feb9 	bl	80047c8 <HAL_TIM_PWM_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001a5c:	f7ff fcc8 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4833      	ldr	r0, [pc, #204]	; (8001b3c <MX_TIM8_Init+0x180>)
 8001a70:	f004 fa58 	bl	8005f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001a7a:	f7ff fcb9 	bl	80013f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a7e:	2360      	movs	r3, #96	; 0x60
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4826      	ldr	r0, [pc, #152]	; (8001b3c <MX_TIM8_Init+0x180>)
 8001aa4:	f003 fb6e 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001aae:	f7ff fc9f 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4820      	ldr	r0, [pc, #128]	; (8001b3c <MX_TIM8_Init+0x180>)
 8001abc:	f003 fb62 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001ac6:	f7ff fc93 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ace:	2208      	movs	r2, #8
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	481a      	ldr	r0, [pc, #104]	; (8001b3c <MX_TIM8_Init+0x180>)
 8001ad4:	f003 fb56 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001ade:	f7ff fc87 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4814      	ldr	r0, [pc, #80]	; (8001b3c <MX_TIM8_Init+0x180>)
 8001aec:	f003 fb4a 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001af6:	f7ff fc7b 	bl	80013f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4807      	ldr	r0, [pc, #28]	; (8001b3c <MX_TIM8_Init+0x180>)
 8001b1e:	f004 fa7d 	bl	800601c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001b28:	f7ff fc62 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001b2c:	4803      	ldr	r0, [pc, #12]	; (8001b3c <MX_TIM8_Init+0x180>)
 8001b2e:	f000 f8e3 	bl	8001cf8 <HAL_TIM_MspPostInit>

}
 8001b32:	bf00      	nop
 8001b34:	3758      	adds	r7, #88	; 0x58
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000788 	.word	0x20000788
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <HAL_TIM_PWM_MspInit+0x84>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d12c      	bne.n	8001bc0 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_TIM_PWM_MspInit+0x88>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <HAL_TIM_PWM_MspInit+0x88>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_TIM_PWM_MspInit+0x88>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_TIM_PWM_MspInit+0x88>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a10      	ldr	r2, [pc, #64]	; (8001bcc <HAL_TIM_PWM_MspInit+0x88>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_TIM_PWM_MspInit+0x88>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <HAL_TIM_PWM_MspInit+0x8c>)
 8001bbc:	f001 fdfc 	bl	80037b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3728      	adds	r7, #40	; 0x28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020000 	.word	0x40020000

08001bd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a3b      	ldr	r2, [pc, #236]	; (8001ce0 <HAL_TIM_Base_MspInit+0x10c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d12c      	bne.n	8001c50 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <HAL_TIM_Base_MspInit+0x110>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a39      	ldr	r2, [pc, #228]	; (8001ce4 <HAL_TIM_Base_MspInit+0x110>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b37      	ldr	r3, [pc, #220]	; (8001ce4 <HAL_TIM_Base_MspInit+0x110>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b33      	ldr	r3, [pc, #204]	; (8001ce4 <HAL_TIM_Base_MspInit+0x110>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a32      	ldr	r2, [pc, #200]	; (8001ce4 <HAL_TIM_Base_MspInit+0x110>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b30      	ldr	r3, [pc, #192]	; (8001ce4 <HAL_TIM_Base_MspInit+0x110>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	4827      	ldr	r0, [pc, #156]	; (8001ce8 <HAL_TIM_Base_MspInit+0x114>)
 8001c4a:	f001 fdb5 	bl	80037b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001c4e:	e042      	b.n	8001cd6 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a25      	ldr	r2, [pc, #148]	; (8001cec <HAL_TIM_Base_MspInit+0x118>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d13d      	bne.n	8001cd6 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <HAL_TIM_Base_MspInit+0x110>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a20      	ldr	r2, [pc, #128]	; (8001ce4 <HAL_TIM_Base_MspInit+0x110>)
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <HAL_TIM_Base_MspInit+0x110>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <HAL_TIM_Base_MspInit+0x11c>)
 8001c78:	4a1e      	ldr	r2, [pc, #120]	; (8001cf4 <HAL_TIM_Base_MspInit+0x120>)
 8001c7a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <HAL_TIM_Base_MspInit+0x11c>)
 8001c7e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001c82:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <HAL_TIM_Base_MspInit+0x11c>)
 8001c86:	2240      	movs	r2, #64	; 0x40
 8001c88:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_TIM_Base_MspInit+0x11c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_TIM_Base_MspInit+0x11c>)
 8001c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c96:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_TIM_Base_MspInit+0x11c>)
 8001c9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c9e:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <HAL_TIM_Base_MspInit+0x11c>)
 8001ca2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ca6:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_TIM_Base_MspInit+0x11c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_TIM_Base_MspInit+0x11c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <HAL_TIM_Base_MspInit+0x11c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8001cba:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <HAL_TIM_Base_MspInit+0x11c>)
 8001cbc:	f001 f97a 	bl	8002fb4 <HAL_DMA_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_TIM_Base_MspInit+0xf6>
      Error_Handler();
 8001cc6:	f7ff fb93 	bl	80013f0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <HAL_TIM_Base_MspInit+0x11c>)
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24
 8001cd0:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <HAL_TIM_Base_MspInit+0x11c>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001cd6:	bf00      	nop
 8001cd8:	3728      	adds	r7, #40	; 0x28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020400 	.word	0x40020400
 8001cec:	40010400 	.word	0x40010400
 8001cf0:	200007d0 	.word	0x200007d0
 8001cf4:	40026440 	.word	0x40026440

08001cf8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a25      	ldr	r2, [pc, #148]	; (8001dac <HAL_TIM_MspPostInit+0xb4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d11f      	bne.n	8001d5a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <HAL_TIM_MspPostInit+0xb8>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a23      	ldr	r2, [pc, #140]	; (8001db0 <HAL_TIM_MspPostInit+0xb8>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <HAL_TIM_MspPostInit+0xb8>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	4818      	ldr	r0, [pc, #96]	; (8001db4 <HAL_TIM_MspPostInit+0xbc>)
 8001d54:	f001 fd30 	bl	80037b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001d58:	e023      	b.n	8001da2 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a16      	ldr	r2, [pc, #88]	; (8001db8 <HAL_TIM_MspPostInit+0xc0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d11e      	bne.n	8001da2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_TIM_MspPostInit+0xb8>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	4a10      	ldr	r2, [pc, #64]	; (8001db0 <HAL_TIM_MspPostInit+0xb8>)
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	6313      	str	r3, [r2, #48]	; 0x30
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_TIM_MspPostInit+0xb8>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d80:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d92:	2303      	movs	r3, #3
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4807      	ldr	r0, [pc, #28]	; (8001dbc <HAL_TIM_MspPostInit+0xc4>)
 8001d9e:	f001 fd0b 	bl	80037b8 <HAL_GPIO_Init>
}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	; 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40010000 	.word	0x40010000
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40010400 	.word	0x40010400
 8001dbc:	40020800 	.word	0x40020800

08001dc0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <MX_USART2_UART_Init+0x50>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_USART2_UART_Init+0x4c>)
 8001df8:	f004 f976 	bl	80060e8 <HAL_UART_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e02:	f7ff faf5 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000830 	.word	0x20000830
 8001e10:	40004400 	.word	0x40004400

08001e14 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	; (8001e64 <MX_USART3_UART_Init+0x50>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_USART3_UART_Init+0x4c>)
 8001e4c:	f004 f94c 	bl	80060e8 <HAL_UART_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e56:	f7ff facb 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000874 	.word	0x20000874
 8001e64:	40004800 	.word	0x40004800

08001e68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	; 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a51      	ldr	r2, [pc, #324]	; (8001fcc <HAL_UART_MspInit+0x164>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d134      	bne.n	8001ef4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <HAL_UART_MspInit+0x168>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a4f      	ldr	r2, [pc, #316]	; (8001fd0 <HAL_UART_MspInit+0x168>)
 8001e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9a:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <HAL_UART_MspInit+0x168>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	4b49      	ldr	r3, [pc, #292]	; (8001fd0 <HAL_UART_MspInit+0x168>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a48      	ldr	r2, [pc, #288]	; (8001fd0 <HAL_UART_MspInit+0x168>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <HAL_UART_MspInit+0x168>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ec2:	230c      	movs	r3, #12
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	483d      	ldr	r0, [pc, #244]	; (8001fd4 <HAL_UART_MspInit+0x16c>)
 8001ede:	f001 fc6b 	bl	80037b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2105      	movs	r1, #5
 8001ee6:	2026      	movs	r0, #38	; 0x26
 8001ee8:	f001 f83a 	bl	8002f60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eec:	2026      	movs	r0, #38	; 0x26
 8001eee:	f001 f853 	bl	8002f98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ef2:	e067      	b.n	8001fc4 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART3)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a37      	ldr	r2, [pc, #220]	; (8001fd8 <HAL_UART_MspInit+0x170>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d162      	bne.n	8001fc4 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	4b33      	ldr	r3, [pc, #204]	; (8001fd0 <HAL_UART_MspInit+0x168>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a32      	ldr	r2, [pc, #200]	; (8001fd0 <HAL_UART_MspInit+0x168>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b30      	ldr	r3, [pc, #192]	; (8001fd0 <HAL_UART_MspInit+0x168>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <HAL_UART_MspInit+0x168>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a2b      	ldr	r2, [pc, #172]	; (8001fd0 <HAL_UART_MspInit+0x168>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <HAL_UART_MspInit+0x168>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f44:	2303      	movs	r3, #3
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f48:	2307      	movs	r3, #7
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4c:	f107 031c 	add.w	r3, r7, #28
 8001f50:	4619      	mov	r1, r3
 8001f52:	4822      	ldr	r0, [pc, #136]	; (8001fdc <HAL_UART_MspInit+0x174>)
 8001f54:	f001 fc30 	bl	80037b8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_UART_MspInit+0x178>)
 8001f5a:	4a22      	ldr	r2, [pc, #136]	; (8001fe4 <HAL_UART_MspInit+0x17c>)
 8001f5c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_UART_MspInit+0x178>)
 8001f60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f64:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_UART_MspInit+0x178>)
 8001f68:	2240      	movs	r2, #64	; 0x40
 8001f6a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f6c:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <HAL_UART_MspInit+0x178>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_UART_MspInit+0x178>)
 8001f74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f78:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f7a:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_UART_MspInit+0x178>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <HAL_UART_MspInit+0x178>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_UART_MspInit+0x178>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_UART_MspInit+0x178>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f92:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <HAL_UART_MspInit+0x178>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001f98:	4811      	ldr	r0, [pc, #68]	; (8001fe0 <HAL_UART_MspInit+0x178>)
 8001f9a:	f001 f80b 	bl	8002fb4 <HAL_DMA_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001fa4:	f7ff fa24 	bl	80013f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <HAL_UART_MspInit+0x178>)
 8001fac:	635a      	str	r2, [r3, #52]	; 0x34
 8001fae:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <HAL_UART_MspInit+0x178>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2105      	movs	r1, #5
 8001fb8:	2027      	movs	r0, #39	; 0x27
 8001fba:	f000 ffd1 	bl	8002f60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fbe:	2027      	movs	r0, #39	; 0x27
 8001fc0:	f000 ffea 	bl	8002f98 <HAL_NVIC_EnableIRQ>
}
 8001fc4:	bf00      	nop
 8001fc6:	3730      	adds	r7, #48	; 0x30
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40004400 	.word	0x40004400
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40004800 	.word	0x40004800
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	200008b8 	.word	0x200008b8
 8001fe4:	40026058 	.word	0x40026058

08001fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002020 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fec:	480d      	ldr	r0, [pc, #52]	; (8002024 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fee:	490e      	ldr	r1, [pc, #56]	; (8002028 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ff0:	4a0e      	ldr	r2, [pc, #56]	; (800202c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff4:	e002      	b.n	8001ffc <LoopCopyDataInit>

08001ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffa:	3304      	adds	r3, #4

08001ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002000:	d3f9      	bcc.n	8001ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002004:	4c0b      	ldr	r4, [pc, #44]	; (8002034 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002008:	e001      	b.n	800200e <LoopFillZerobss>

0800200a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800200c:	3204      	adds	r2, #4

0800200e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800200e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002010:	d3fb      	bcc.n	800200a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002012:	f7ff fb93 	bl	800173c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002016:	f008 f975 	bl	800a304 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800201a:	f7ff f94d 	bl	80012b8 <main>
  bx  lr    
 800201e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002020:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002028:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 800202c:	0800b5bc 	.word	0x0800b5bc
  ldr r2, =_sbss
 8002030:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002034:	2000533c 	.word	0x2000533c

08002038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <ADC_IRQHandler>
	...

0800203c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0d      	ldr	r2, [pc, #52]	; (800207c <HAL_Init+0x40>)
 8002046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_Init+0x40>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0a      	ldr	r2, [pc, #40]	; (800207c <HAL_Init+0x40>)
 8002052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_Init+0x40>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_Init+0x40>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002064:	2003      	movs	r0, #3
 8002066:	f000 ff70 	bl	8002f4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800206a:	200f      	movs	r0, #15
 800206c:	f7ff fa1c 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002070:	f7ff f9ee 	bl	8001450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023c00 	.word	0x40023c00

08002080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_IncTick+0x20>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_IncTick+0x24>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4413      	add	r3, r2
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <HAL_IncTick+0x24>)
 8002092:	6013      	str	r3, [r2, #0]
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000038 	.word	0x20000038
 80020a4:	20000918 	.word	0x20000918

080020a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return uwTick;
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <HAL_GetTick+0x14>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000918 	.word	0x20000918

080020c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e0ed      	b.n	80022ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe fb38 	bl	8000754 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020f4:	f7ff ffd8 	bl	80020a8 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020fa:	e012      	b.n	8002122 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020fc:	f7ff ffd4 	bl	80020a8 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b0a      	cmp	r3, #10
 8002108:	d90b      	bls.n	8002122 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2205      	movs	r2, #5
 800211a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e0c5      	b.n	80022ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0e5      	beq.n	80020fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0202 	bic.w	r2, r2, #2
 800213e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002140:	f7ff ffb2 	bl	80020a8 <HAL_GetTick>
 8002144:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002146:	e012      	b.n	800216e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002148:	f7ff ffae 	bl	80020a8 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b0a      	cmp	r3, #10
 8002154:	d90b      	bls.n	800216e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2205      	movs	r2, #5
 8002166:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e09f      	b.n	80022ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1e5      	bne.n	8002148 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	7e1b      	ldrb	r3, [r3, #24]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d108      	bne.n	8002196 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	e007      	b.n	80021a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7e5b      	ldrb	r3, [r3, #25]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d108      	bne.n	80021c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	e007      	b.n	80021d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	7e9b      	ldrb	r3, [r3, #26]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d108      	bne.n	80021ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0220 	orr.w	r2, r2, #32
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	e007      	b.n	80021fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0220 	bic.w	r2, r2, #32
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	7edb      	ldrb	r3, [r3, #27]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d108      	bne.n	8002214 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0210 	bic.w	r2, r2, #16
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	e007      	b.n	8002224 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0210 	orr.w	r2, r2, #16
 8002222:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	7f1b      	ldrb	r3, [r3, #28]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d108      	bne.n	800223e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0208 	orr.w	r2, r2, #8
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e007      	b.n	800224e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0208 	bic.w	r2, r2, #8
 800224c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	7f5b      	ldrb	r3, [r3, #29]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d108      	bne.n	8002268 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0204 	orr.w	r2, r2, #4
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e007      	b.n	8002278 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0204 	bic.w	r2, r2, #4
 8002276:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	ea42 0103 	orr.w	r1, r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	1e5a      	subs	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d003      	beq.n	80022de <HAL_CAN_ConfigFilter+0x26>
 80022d6:	7cfb      	ldrb	r3, [r7, #19]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	f040 80be 	bne.w	800245a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80022de:	4b65      	ldr	r3, [pc, #404]	; (8002474 <HAL_CAN_ConfigFilter+0x1bc>)
 80022e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022e8:	f043 0201 	orr.w	r2, r3, #1
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	431a      	orrs	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	2201      	movs	r2, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	43db      	mvns	r3, r3
 8002330:	401a      	ands	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d123      	bne.n	8002388 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43db      	mvns	r3, r3
 800234a:	401a      	ands	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002362:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3248      	adds	r2, #72	; 0x48
 8002368:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800237c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800237e:	6979      	ldr	r1, [r7, #20]
 8002380:	3348      	adds	r3, #72	; 0x48
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	440b      	add	r3, r1
 8002386:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d122      	bne.n	80023d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	431a      	orrs	r2, r3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	3248      	adds	r2, #72	; 0x48
 80023b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023cc:	6979      	ldr	r1, [r7, #20]
 80023ce:	3348      	adds	r3, #72	; 0x48
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	440b      	add	r3, r1
 80023d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	401a      	ands	r2, r3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80023f0:	e007      	b.n	8002402 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43db      	mvns	r3, r3
 8002414:	401a      	ands	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800241c:	e007      	b.n	800242e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	431a      	orrs	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d107      	bne.n	8002446 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	431a      	orrs	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800244c:	f023 0201 	bic.w	r2, r3, #1
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	e006      	b.n	8002468 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
  }
}
 8002468:	4618      	mov	r0, r3
 800246a:	371c      	adds	r7, #28
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	40006400 	.word	0x40006400

08002478 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b01      	cmp	r3, #1
 800248a:	d12e      	bne.n	80024ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0201 	bic.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024a4:	f7ff fe00 	bl	80020a8 <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024aa:	e012      	b.n	80024d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024ac:	f7ff fdfc 	bl	80020a8 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b0a      	cmp	r3, #10
 80024b8:	d90b      	bls.n	80024d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2205      	movs	r2, #5
 80024ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e012      	b.n	80024f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1e5      	bne.n	80024ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	e006      	b.n	80024f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
  }
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002514:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800251e:	7ffb      	ldrb	r3, [r7, #31]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d003      	beq.n	800252c <HAL_CAN_AddTxMessage+0x2c>
 8002524:	7ffb      	ldrb	r3, [r7, #31]
 8002526:	2b02      	cmp	r3, #2
 8002528:	f040 80b8 	bne.w	800269c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10a      	bne.n	800254c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 80a0 	beq.w	800268c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	0e1b      	lsrs	r3, r3, #24
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d907      	bls.n	800256c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e09e      	b.n	80026aa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800256c:	2201      	movs	r2, #1
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	409a      	lsls	r2, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10d      	bne.n	800259a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002588:	68f9      	ldr	r1, [r7, #12]
 800258a:	6809      	ldr	r1, [r1, #0]
 800258c:	431a      	orrs	r2, r3
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3318      	adds	r3, #24
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	440b      	add	r3, r1
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	e00f      	b.n	80025ba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025a4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025aa:	68f9      	ldr	r1, [r7, #12]
 80025ac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80025ae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	3318      	adds	r3, #24
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	440b      	add	r3, r1
 80025b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	691a      	ldr	r2, [r3, #16]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3318      	adds	r3, #24
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	440b      	add	r3, r1
 80025ca:	3304      	adds	r3, #4
 80025cc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	7d1b      	ldrb	r3, [r3, #20]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d111      	bne.n	80025fa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3318      	adds	r3, #24
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	4413      	add	r3, r2
 80025e2:	3304      	adds	r3, #4
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	6811      	ldr	r1, [r2, #0]
 80025ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3318      	adds	r3, #24
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	440b      	add	r3, r1
 80025f6:	3304      	adds	r3, #4
 80025f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3307      	adds	r3, #7
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	061a      	lsls	r2, r3, #24
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3306      	adds	r3, #6
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	041b      	lsls	r3, r3, #16
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3305      	adds	r3, #5
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	4313      	orrs	r3, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	3204      	adds	r2, #4
 800261a:	7812      	ldrb	r2, [r2, #0]
 800261c:	4610      	mov	r0, r2
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	6811      	ldr	r1, [r2, #0]
 8002622:	ea43 0200 	orr.w	r2, r3, r0
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	440b      	add	r3, r1
 800262c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002630:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3303      	adds	r3, #3
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	061a      	lsls	r2, r3, #24
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3302      	adds	r3, #2
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	041b      	lsls	r3, r3, #16
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3301      	adds	r3, #1
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	021b      	lsls	r3, r3, #8
 800264c:	4313      	orrs	r3, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	7812      	ldrb	r2, [r2, #0]
 8002652:	4610      	mov	r0, r2
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	6811      	ldr	r1, [r2, #0]
 8002658:	ea43 0200 	orr.w	r2, r3, r0
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	440b      	add	r3, r1
 8002662:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002666:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3318      	adds	r3, #24
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	4413      	add	r3, r2
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	6811      	ldr	r1, [r2, #0]
 800267a:	f043 0201 	orr.w	r2, r3, #1
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	3318      	adds	r3, #24
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	440b      	add	r3, r1
 8002686:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	e00e      	b.n	80026aa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e006      	b.n	80026aa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
  }
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3724      	adds	r7, #36	; 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b085      	sub	sp, #20
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80026ca:	7afb      	ldrb	r3, [r7, #11]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d002      	beq.n	80026d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80026d0:	7afb      	ldrb	r3, [r7, #11]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d11d      	bne.n	8002712 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3301      	adds	r3, #1
 80026e8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3301      	adds	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3301      	adds	r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002712:	68fb      	ldr	r3, [r7, #12]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002734:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002736:	7dfb      	ldrb	r3, [r7, #23]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d003      	beq.n	8002744 <HAL_CAN_GetRxMessage+0x24>
 800273c:	7dfb      	ldrb	r3, [r7, #23]
 800273e:	2b02      	cmp	r3, #2
 8002740:	f040 80f3 	bne.w	800292a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10e      	bne.n	8002768 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d116      	bne.n	8002786 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0e7      	b.n	8002938 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d107      	bne.n	8002786 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0d8      	b.n	8002938 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	331b      	adds	r3, #27
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	4413      	add	r3, r2
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0204 	and.w	r2, r3, #4
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10c      	bne.n	80027be <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	331b      	adds	r3, #27
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	4413      	add	r3, r2
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	0d5b      	lsrs	r3, r3, #21
 80027b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e00b      	b.n	80027d6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	331b      	adds	r3, #27
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	4413      	add	r3, r2
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	08db      	lsrs	r3, r3, #3
 80027ce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	331b      	adds	r3, #27
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	4413      	add	r3, r2
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0202 	and.w	r2, r3, #2
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	331b      	adds	r3, #27
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	4413      	add	r3, r2
 80027f8:	3304      	adds	r3, #4
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 020f 	and.w	r2, r3, #15
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	331b      	adds	r3, #27
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	4413      	add	r3, r2
 8002810:	3304      	adds	r3, #4
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	b2da      	uxtb	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	331b      	adds	r3, #27
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	4413      	add	r3, r2
 8002828:	3304      	adds	r3, #4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	b29a      	uxth	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4413      	add	r3, r2
 800283e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	4413      	add	r3, r2
 8002854:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	0a1a      	lsrs	r2, r3, #8
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	3301      	adds	r3, #1
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	4413      	add	r3, r2
 800286e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	0c1a      	lsrs	r2, r3, #16
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	3302      	adds	r3, #2
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	4413      	add	r3, r2
 8002888:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	0e1a      	lsrs	r2, r3, #24
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	3303      	adds	r3, #3
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	3304      	adds	r3, #4
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0a1a      	lsrs	r2, r3, #8
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	3305      	adds	r3, #5
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	0c1a      	lsrs	r2, r3, #16
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	3306      	adds	r3, #6
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	0e1a      	lsrs	r2, r3, #24
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	3307      	adds	r3, #7
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d108      	bne.n	8002916 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0220 	orr.w	r2, r2, #32
 8002912:	60da      	str	r2, [r3, #12]
 8002914:	e007      	b.n	8002926 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0220 	orr.w	r2, r2, #32
 8002924:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	e006      	b.n	8002938 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
  }
}
 8002938:	4618      	mov	r0, r3
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002954:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d002      	beq.n	8002962 <HAL_CAN_ActivateNotification+0x1e>
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d109      	bne.n	8002976 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6959      	ldr	r1, [r3, #20]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e006      	b.n	8002984 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
  }
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d07c      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d023      	beq.n	8002a28 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2201      	movs	r2, #1
 80029e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f983 	bl	8002cfe <HAL_CAN_TxMailbox0CompleteCallback>
 80029f8:	e016      	b.n	8002a28 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d004      	beq.n	8002a0e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0c:	e00c      	b.n	8002a28 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d004      	beq.n	8002a22 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a20:	e002      	b.n	8002a28 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f989 	bl	8002d3a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d024      	beq.n	8002a7c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f963 	bl	8002d12 <HAL_CAN_TxMailbox1CompleteCallback>
 8002a4c:	e016      	b.n	8002a7c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d004      	beq.n	8002a62 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a60:	e00c      	b.n	8002a7c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
 8002a74:	e002      	b.n	8002a7c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f969 	bl	8002d4e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d024      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f943 	bl	8002d26 <HAL_CAN_TxMailbox2CompleteCallback>
 8002aa0:	e016      	b.n	8002ad0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d004      	beq.n	8002ab6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab4:	e00c      	b.n	8002ad0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d004      	beq.n	8002aca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac8:	e002      	b.n	8002ad0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f949 	bl	8002d62 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00c      	beq.n	8002af4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2210      	movs	r2, #16
 8002af2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00b      	beq.n	8002b16 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d006      	beq.n	8002b16 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f930 	bl	8002d76 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d009      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fd feea 	bl	8000908 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00c      	beq.n	8002b58 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d007      	beq.n	8002b58 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2210      	movs	r2, #16
 8002b56:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d006      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2208      	movs	r2, #8
 8002b72:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f912 	bl	8002d9e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d009      	beq.n	8002b98 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f8f9 	bl	8002d8a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00b      	beq.n	8002bba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d006      	beq.n	8002bba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f8fc 	bl	8002db2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00b      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f8f5 	bl	8002dc6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d07b      	beq.n	8002cde <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d072      	beq.n	8002cd6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	f043 0302 	orr.w	r3, r3, #2
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d043      	beq.n	8002cd6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d03e      	beq.n	8002cd6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c5e:	2b60      	cmp	r3, #96	; 0x60
 8002c60:	d02b      	beq.n	8002cba <HAL_CAN_IRQHandler+0x32a>
 8002c62:	2b60      	cmp	r3, #96	; 0x60
 8002c64:	d82e      	bhi.n	8002cc4 <HAL_CAN_IRQHandler+0x334>
 8002c66:	2b50      	cmp	r3, #80	; 0x50
 8002c68:	d022      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0x320>
 8002c6a:	2b50      	cmp	r3, #80	; 0x50
 8002c6c:	d82a      	bhi.n	8002cc4 <HAL_CAN_IRQHandler+0x334>
 8002c6e:	2b40      	cmp	r3, #64	; 0x40
 8002c70:	d019      	beq.n	8002ca6 <HAL_CAN_IRQHandler+0x316>
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d826      	bhi.n	8002cc4 <HAL_CAN_IRQHandler+0x334>
 8002c76:	2b30      	cmp	r3, #48	; 0x30
 8002c78:	d010      	beq.n	8002c9c <HAL_CAN_IRQHandler+0x30c>
 8002c7a:	2b30      	cmp	r3, #48	; 0x30
 8002c7c:	d822      	bhi.n	8002cc4 <HAL_CAN_IRQHandler+0x334>
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d002      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x2f8>
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d005      	beq.n	8002c92 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002c86:	e01d      	b.n	8002cc4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	f043 0308 	orr.w	r3, r3, #8
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c90:	e019      	b.n	8002cc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	f043 0310 	orr.w	r3, r3, #16
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c9a:	e014      	b.n	8002cc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	f043 0320 	orr.w	r3, r3, #32
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ca4:	e00f      	b.n	8002cc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cae:	e00a      	b.n	8002cc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cb8:	e005      	b.n	8002cc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cc2:	e000      	b.n	8002cc6 <HAL_CAN_IRQHandler+0x336>
            break;
 8002cc4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002cd4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f872 	bl	8002dda <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	3728      	adds	r7, #40	; 0x28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <__NVIC_SetPriorityGrouping+0x44>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e22:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <__NVIC_SetPriorityGrouping+0x44>)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	60d3      	str	r3, [r2, #12]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <__NVIC_GetPriorityGrouping+0x18>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	0a1b      	lsrs	r3, r3, #8
 8002e42:	f003 0307 	and.w	r3, r3, #7
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	db0b      	blt.n	8002e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	4907      	ldr	r1, [pc, #28]	; (8002e8c <__NVIC_EnableIRQ+0x38>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	2001      	movs	r0, #1
 8002e76:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000e100 	.word	0xe000e100

08002e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	6039      	str	r1, [r7, #0]
 8002e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	db0a      	blt.n	8002eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	490c      	ldr	r1, [pc, #48]	; (8002edc <__NVIC_SetPriority+0x4c>)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	0112      	lsls	r2, r2, #4
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb8:	e00a      	b.n	8002ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	4908      	ldr	r1, [pc, #32]	; (8002ee0 <__NVIC_SetPriority+0x50>)
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	3b04      	subs	r3, #4
 8002ec8:	0112      	lsls	r2, r2, #4
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	440b      	add	r3, r1
 8002ece:	761a      	strb	r2, [r3, #24]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000e100 	.word	0xe000e100
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f1c3 0307 	rsb	r3, r3, #7
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	bf28      	it	cs
 8002f02:	2304      	movcs	r3, #4
 8002f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	2b06      	cmp	r3, #6
 8002f0c:	d902      	bls.n	8002f14 <NVIC_EncodePriority+0x30>
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3b03      	subs	r3, #3
 8002f12:	e000      	b.n	8002f16 <NVIC_EncodePriority+0x32>
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	401a      	ands	r2, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	43d9      	mvns	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f3c:	4313      	orrs	r3, r2
         );
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3724      	adds	r7, #36	; 0x24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ff4c 	bl	8002df0 <__NVIC_SetPriorityGrouping>
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f72:	f7ff ff61 	bl	8002e38 <__NVIC_GetPriorityGrouping>
 8002f76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	6978      	ldr	r0, [r7, #20]
 8002f7e:	f7ff ffb1 	bl	8002ee4 <NVIC_EncodePriority>
 8002f82:	4602      	mov	r2, r0
 8002f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ff80 	bl	8002e90 <__NVIC_SetPriority>
}
 8002f90:	bf00      	nop
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff ff54 	bl	8002e54 <__NVIC_EnableIRQ>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fc0:	f7ff f872 	bl	80020a8 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e099      	b.n	8003104 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff0:	e00f      	b.n	8003012 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ff2:	f7ff f859 	bl	80020a8 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b05      	cmp	r3, #5
 8002ffe:	d908      	bls.n	8003012 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2203      	movs	r2, #3
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e078      	b.n	8003104 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e8      	bne.n	8002ff2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4b38      	ldr	r3, [pc, #224]	; (800310c <HAL_DMA_Init+0x158>)
 800302c:	4013      	ands	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800303e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	2b04      	cmp	r3, #4
 800306a:	d107      	bne.n	800307c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	4313      	orrs	r3, r2
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f023 0307 	bic.w	r3, r3, #7
 8003092:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d117      	bne.n	80030d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00e      	beq.n	80030d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fb01 	bl	80036c0 <DMA_CheckFifoParam>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2240      	movs	r2, #64	; 0x40
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030d2:	2301      	movs	r3, #1
 80030d4:	e016      	b.n	8003104 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fab8 	bl	8003654 <DMA_CalcBaseAndBitshift>
 80030e4:	4603      	mov	r3, r0
 80030e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ec:	223f      	movs	r2, #63	; 0x3f
 80030ee:	409a      	lsls	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	f010803f 	.word	0xf010803f

08003110 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_DMA_Start_IT+0x26>
 8003132:	2302      	movs	r3, #2
 8003134:	e040      	b.n	80031b8 <HAL_DMA_Start_IT+0xa8>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b01      	cmp	r3, #1
 8003148:	d12f      	bne.n	80031aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2202      	movs	r2, #2
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fa4a 	bl	80035f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	223f      	movs	r2, #63	; 0x3f
 800316a:	409a      	lsls	r2, r3
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0216 	orr.w	r2, r2, #22
 800317e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	2b00      	cmp	r3, #0
 8003186:	d007      	beq.n	8003198 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0208 	orr.w	r2, r2, #8
 8003196:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	e005      	b.n	80031b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
 80031b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031ce:	f7fe ff6b 	bl	80020a8 <HAL_GetTick>
 80031d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d008      	beq.n	80031f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2280      	movs	r2, #128	; 0x80
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e052      	b.n	8003298 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0216 	bic.w	r2, r2, #22
 8003200:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003210:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d103      	bne.n	8003222 <HAL_DMA_Abort+0x62>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321e:	2b00      	cmp	r3, #0
 8003220:	d007      	beq.n	8003232 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0208 	bic.w	r2, r2, #8
 8003230:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0201 	bic.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003242:	e013      	b.n	800326c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003244:	f7fe ff30 	bl	80020a8 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b05      	cmp	r3, #5
 8003250:	d90c      	bls.n	800326c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2203      	movs	r2, #3
 800325c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e015      	b.n	8003298 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e4      	bne.n	8003244 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327e:	223f      	movs	r2, #63	; 0x3f
 8003280:	409a      	lsls	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d004      	beq.n	80032be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2280      	movs	r2, #128	; 0x80
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00c      	b.n	80032d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2205      	movs	r2, #5
 80032c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032f0:	4b8e      	ldr	r3, [pc, #568]	; (800352c <HAL_DMA_IRQHandler+0x248>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a8e      	ldr	r2, [pc, #568]	; (8003530 <HAL_DMA_IRQHandler+0x24c>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	0a9b      	lsrs	r3, r3, #10
 80032fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330e:	2208      	movs	r2, #8
 8003310:	409a      	lsls	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4013      	ands	r3, r2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01a      	beq.n	8003350 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d013      	beq.n	8003350 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0204 	bic.w	r2, r2, #4
 8003336:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	2208      	movs	r2, #8
 800333e:	409a      	lsls	r2, r3
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003348:	f043 0201 	orr.w	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	2201      	movs	r2, #1
 8003356:	409a      	lsls	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d012      	beq.n	8003386 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	2201      	movs	r2, #1
 8003374:	409a      	lsls	r2, r3
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337e:	f043 0202 	orr.w	r2, r3, #2
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	2204      	movs	r2, #4
 800338c:	409a      	lsls	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d012      	beq.n	80033bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00b      	beq.n	80033bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	2204      	movs	r2, #4
 80033aa:	409a      	lsls	r2, r3
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b4:	f043 0204 	orr.w	r2, r3, #4
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	2210      	movs	r2, #16
 80033c2:	409a      	lsls	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d043      	beq.n	8003454 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d03c      	beq.n	8003454 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	2210      	movs	r2, #16
 80033e0:	409a      	lsls	r2, r3
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d018      	beq.n	8003426 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d108      	bne.n	8003414 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d024      	beq.n	8003454 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4798      	blx	r3
 8003412:	e01f      	b.n	8003454 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01b      	beq.n	8003454 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4798      	blx	r3
 8003424:	e016      	b.n	8003454 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d107      	bne.n	8003444 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0208 	bic.w	r2, r2, #8
 8003442:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003458:	2220      	movs	r2, #32
 800345a:	409a      	lsls	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 808f 	beq.w	8003584 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8087 	beq.w	8003584 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	2220      	movs	r2, #32
 800347c:	409a      	lsls	r2, r3
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b05      	cmp	r3, #5
 800348c:	d136      	bne.n	80034fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0216 	bic.w	r2, r2, #22
 800349c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d103      	bne.n	80034be <HAL_DMA_IRQHandler+0x1da>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d007      	beq.n	80034ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0208 	bic.w	r2, r2, #8
 80034cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d2:	223f      	movs	r2, #63	; 0x3f
 80034d4:	409a      	lsls	r2, r3
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d07e      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4798      	blx	r3
        }
        return;
 80034fa:	e079      	b.n	80035f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01d      	beq.n	8003546 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10d      	bne.n	8003534 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	2b00      	cmp	r3, #0
 800351e:	d031      	beq.n	8003584 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
 8003528:	e02c      	b.n	8003584 <HAL_DMA_IRQHandler+0x2a0>
 800352a:	bf00      	nop
 800352c:	20000030 	.word	0x20000030
 8003530:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d023      	beq.n	8003584 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
 8003544:	e01e      	b.n	8003584 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10f      	bne.n	8003574 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0210 	bic.w	r2, r2, #16
 8003562:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	2b00      	cmp	r3, #0
 800358a:	d032      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d022      	beq.n	80035de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2205      	movs	r2, #5
 800359c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	3301      	adds	r3, #1
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d307      	bcc.n	80035cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f2      	bne.n	80035b0 <HAL_DMA_IRQHandler+0x2cc>
 80035ca:	e000      	b.n	80035ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
 80035ee:	e000      	b.n	80035f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80035f0:	bf00      	nop
    }
  }
}
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003614:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b40      	cmp	r3, #64	; 0x40
 8003624:	d108      	bne.n	8003638 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003636:	e007      	b.n	8003648 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]
}
 8003648:	bf00      	nop
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	3b10      	subs	r3, #16
 8003664:	4a14      	ldr	r2, [pc, #80]	; (80036b8 <DMA_CalcBaseAndBitshift+0x64>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800366e:	4a13      	ldr	r2, [pc, #76]	; (80036bc <DMA_CalcBaseAndBitshift+0x68>)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b03      	cmp	r3, #3
 8003680:	d909      	bls.n	8003696 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800368a:	f023 0303 	bic.w	r3, r3, #3
 800368e:	1d1a      	adds	r2, r3, #4
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	659a      	str	r2, [r3, #88]	; 0x58
 8003694:	e007      	b.n	80036a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800369e:	f023 0303 	bic.w	r3, r3, #3
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	aaaaaaab 	.word	0xaaaaaaab
 80036bc:	0800b50c 	.word	0x0800b50c

080036c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d11f      	bne.n	800371a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d856      	bhi.n	800378e <DMA_CheckFifoParam+0xce>
 80036e0:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <DMA_CheckFifoParam+0x28>)
 80036e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e6:	bf00      	nop
 80036e8:	080036f9 	.word	0x080036f9
 80036ec:	0800370b 	.word	0x0800370b
 80036f0:	080036f9 	.word	0x080036f9
 80036f4:	0800378f 	.word	0x0800378f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d046      	beq.n	8003792 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003708:	e043      	b.n	8003792 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003712:	d140      	bne.n	8003796 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003718:	e03d      	b.n	8003796 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003722:	d121      	bne.n	8003768 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b03      	cmp	r3, #3
 8003728:	d837      	bhi.n	800379a <DMA_CheckFifoParam+0xda>
 800372a:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <DMA_CheckFifoParam+0x70>)
 800372c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003730:	08003741 	.word	0x08003741
 8003734:	08003747 	.word	0x08003747
 8003738:	08003741 	.word	0x08003741
 800373c:	08003759 	.word	0x08003759
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
      break;
 8003744:	e030      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d025      	beq.n	800379e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003756:	e022      	b.n	800379e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003760:	d11f      	bne.n	80037a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003766:	e01c      	b.n	80037a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d903      	bls.n	8003776 <DMA_CheckFifoParam+0xb6>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d003      	beq.n	800377c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003774:	e018      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
      break;
 800377a:	e015      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00e      	beq.n	80037a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      break;
 800378c:	e00b      	b.n	80037a6 <DMA_CheckFifoParam+0xe6>
      break;
 800378e:	bf00      	nop
 8003790:	e00a      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003792:	bf00      	nop
 8003794:	e008      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003796:	bf00      	nop
 8003798:	e006      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
      break;
 800379a:	bf00      	nop
 800379c:	e004      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
      break;
 800379e:	bf00      	nop
 80037a0:	e002      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80037a2:	bf00      	nop
 80037a4:	e000      	b.n	80037a8 <DMA_CheckFifoParam+0xe8>
      break;
 80037a6:	bf00      	nop
    }
  } 
  
  return status; 
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop

080037b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b089      	sub	sp, #36	; 0x24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	e16b      	b.n	8003aac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037d4:	2201      	movs	r2, #1
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4013      	ands	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	f040 815a 	bne.w	8003aa6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d005      	beq.n	800380a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003806:	2b02      	cmp	r3, #2
 8003808:	d130      	bne.n	800386c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	2203      	movs	r2, #3
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4013      	ands	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003840:	2201      	movs	r2, #1
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f003 0201 	and.w	r2, r3, #1
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	2b03      	cmp	r3, #3
 8003876:	d017      	beq.n	80038a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	2203      	movs	r2, #3
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4313      	orrs	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 0303 	and.w	r3, r3, #3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d123      	bne.n	80038fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	08da      	lsrs	r2, r3, #3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3208      	adds	r2, #8
 80038bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	220f      	movs	r2, #15
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	08da      	lsrs	r2, r3, #3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3208      	adds	r2, #8
 80038f6:	69b9      	ldr	r1, [r7, #24]
 80038f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	2203      	movs	r2, #3
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 0203 	and.w	r2, r3, #3
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80b4 	beq.w	8003aa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	4b60      	ldr	r3, [pc, #384]	; (8003ac4 <HAL_GPIO_Init+0x30c>)
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	4a5f      	ldr	r2, [pc, #380]	; (8003ac4 <HAL_GPIO_Init+0x30c>)
 8003948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800394c:	6453      	str	r3, [r2, #68]	; 0x44
 800394e:	4b5d      	ldr	r3, [pc, #372]	; (8003ac4 <HAL_GPIO_Init+0x30c>)
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800395a:	4a5b      	ldr	r2, [pc, #364]	; (8003ac8 <HAL_GPIO_Init+0x310>)
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	089b      	lsrs	r3, r3, #2
 8003960:	3302      	adds	r3, #2
 8003962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	220f      	movs	r2, #15
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a52      	ldr	r2, [pc, #328]	; (8003acc <HAL_GPIO_Init+0x314>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d02b      	beq.n	80039de <HAL_GPIO_Init+0x226>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a51      	ldr	r2, [pc, #324]	; (8003ad0 <HAL_GPIO_Init+0x318>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d025      	beq.n	80039da <HAL_GPIO_Init+0x222>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a50      	ldr	r2, [pc, #320]	; (8003ad4 <HAL_GPIO_Init+0x31c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01f      	beq.n	80039d6 <HAL_GPIO_Init+0x21e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a4f      	ldr	r2, [pc, #316]	; (8003ad8 <HAL_GPIO_Init+0x320>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d019      	beq.n	80039d2 <HAL_GPIO_Init+0x21a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4e      	ldr	r2, [pc, #312]	; (8003adc <HAL_GPIO_Init+0x324>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <HAL_GPIO_Init+0x216>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a4d      	ldr	r2, [pc, #308]	; (8003ae0 <HAL_GPIO_Init+0x328>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00d      	beq.n	80039ca <HAL_GPIO_Init+0x212>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a4c      	ldr	r2, [pc, #304]	; (8003ae4 <HAL_GPIO_Init+0x32c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <HAL_GPIO_Init+0x20e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a4b      	ldr	r2, [pc, #300]	; (8003ae8 <HAL_GPIO_Init+0x330>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d101      	bne.n	80039c2 <HAL_GPIO_Init+0x20a>
 80039be:	2307      	movs	r3, #7
 80039c0:	e00e      	b.n	80039e0 <HAL_GPIO_Init+0x228>
 80039c2:	2308      	movs	r3, #8
 80039c4:	e00c      	b.n	80039e0 <HAL_GPIO_Init+0x228>
 80039c6:	2306      	movs	r3, #6
 80039c8:	e00a      	b.n	80039e0 <HAL_GPIO_Init+0x228>
 80039ca:	2305      	movs	r3, #5
 80039cc:	e008      	b.n	80039e0 <HAL_GPIO_Init+0x228>
 80039ce:	2304      	movs	r3, #4
 80039d0:	e006      	b.n	80039e0 <HAL_GPIO_Init+0x228>
 80039d2:	2303      	movs	r3, #3
 80039d4:	e004      	b.n	80039e0 <HAL_GPIO_Init+0x228>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e002      	b.n	80039e0 <HAL_GPIO_Init+0x228>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_GPIO_Init+0x228>
 80039de:	2300      	movs	r3, #0
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	f002 0203 	and.w	r2, r2, #3
 80039e6:	0092      	lsls	r2, r2, #2
 80039e8:	4093      	lsls	r3, r2
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f0:	4935      	ldr	r1, [pc, #212]	; (8003ac8 <HAL_GPIO_Init+0x310>)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	089b      	lsrs	r3, r3, #2
 80039f6:	3302      	adds	r3, #2
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039fe:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <HAL_GPIO_Init+0x334>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a22:	4a32      	ldr	r2, [pc, #200]	; (8003aec <HAL_GPIO_Init+0x334>)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a28:	4b30      	ldr	r3, [pc, #192]	; (8003aec <HAL_GPIO_Init+0x334>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a4c:	4a27      	ldr	r2, [pc, #156]	; (8003aec <HAL_GPIO_Init+0x334>)
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <HAL_GPIO_Init+0x334>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a76:	4a1d      	ldr	r2, [pc, #116]	; (8003aec <HAL_GPIO_Init+0x334>)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <HAL_GPIO_Init+0x334>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aa0:	4a12      	ldr	r2, [pc, #72]	; (8003aec <HAL_GPIO_Init+0x334>)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b0f      	cmp	r3, #15
 8003ab0:	f67f ae90 	bls.w	80037d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	3724      	adds	r7, #36	; 0x24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40013800 	.word	0x40013800
 8003acc:	40020000 	.word	0x40020000
 8003ad0:	40020400 	.word	0x40020400
 8003ad4:	40020800 	.word	0x40020800
 8003ad8:	40020c00 	.word	0x40020c00
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40021400 	.word	0x40021400
 8003ae4:	40021800 	.word	0x40021800
 8003ae8:	40021c00 	.word	0x40021c00
 8003aec:	40013c00 	.word	0x40013c00

08003af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	807b      	strh	r3, [r7, #2]
 8003afc:	4613      	mov	r3, r2
 8003afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b00:	787b      	ldrb	r3, [r7, #1]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b06:	887a      	ldrh	r2, [r7, #2]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b0c:	e003      	b.n	8003b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b0e:	887b      	ldrh	r3, [r7, #2]
 8003b10:	041a      	lsls	r2, r3, #16
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	619a      	str	r2, [r3, #24]
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b085      	sub	sp, #20
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b34:	887a      	ldrh	r2, [r7, #2]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	041a      	lsls	r2, r3, #16
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	43d9      	mvns	r1, r3
 8003b40:	887b      	ldrh	r3, [r7, #2]
 8003b42:	400b      	ands	r3, r1
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	619a      	str	r2, [r3, #24]
}
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d006      	beq.n	8003b7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b6e:	4a05      	ldr	r2, [pc, #20]	; (8003b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b74:	88fb      	ldrh	r3, [r7, #6]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fd fafc 	bl	8001174 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40013c00 	.word	0x40013c00

08003b88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e267      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d075      	beq.n	8003c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ba6:	4b88      	ldr	r3, [pc, #544]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d00c      	beq.n	8003bcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb2:	4b85      	ldr	r3, [pc, #532]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d112      	bne.n	8003be4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bbe:	4b82      	ldr	r3, [pc, #520]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bca:	d10b      	bne.n	8003be4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bcc:	4b7e      	ldr	r3, [pc, #504]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d05b      	beq.n	8003c90 <HAL_RCC_OscConfig+0x108>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d157      	bne.n	8003c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e242      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bec:	d106      	bne.n	8003bfc <HAL_RCC_OscConfig+0x74>
 8003bee:	4b76      	ldr	r3, [pc, #472]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a75      	ldr	r2, [pc, #468]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e01d      	b.n	8003c38 <HAL_RCC_OscConfig+0xb0>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x98>
 8003c06:	4b70      	ldr	r3, [pc, #448]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a6f      	ldr	r2, [pc, #444]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b6d      	ldr	r3, [pc, #436]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a6c      	ldr	r2, [pc, #432]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCC_OscConfig+0xb0>
 8003c20:	4b69      	ldr	r3, [pc, #420]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a68      	ldr	r2, [pc, #416]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4b66      	ldr	r3, [pc, #408]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a65      	ldr	r2, [pc, #404]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7fe fa32 	bl	80020a8 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fe fa2e 	bl	80020a8 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e207      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5a:	4b5b      	ldr	r3, [pc, #364]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0xc0>
 8003c66:	e014      	b.n	8003c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fe fa1e 	bl	80020a8 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fe fa1a 	bl	80020a8 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e1f3      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c82:	4b51      	ldr	r3, [pc, #324]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0xe8>
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d063      	beq.n	8003d66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c9e:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00b      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003caa:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d11c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb6:	4b44      	ldr	r3, [pc, #272]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d116      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc2:	4b41      	ldr	r3, [pc, #260]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_RCC_OscConfig+0x152>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d001      	beq.n	8003cda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e1c7      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cda:	4b3b      	ldr	r3, [pc, #236]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4937      	ldr	r1, [pc, #220]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cee:	e03a      	b.n	8003d66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf8:	4b34      	ldr	r3, [pc, #208]	; (8003dcc <HAL_RCC_OscConfig+0x244>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfe:	f7fe f9d3 	bl	80020a8 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d06:	f7fe f9cf 	bl	80020a8 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e1a8      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d18:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d24:	4b28      	ldr	r3, [pc, #160]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4925      	ldr	r1, [pc, #148]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	600b      	str	r3, [r1, #0]
 8003d38:	e015      	b.n	8003d66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3a:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <HAL_RCC_OscConfig+0x244>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fe f9b2 	bl	80020a8 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d48:	f7fe f9ae 	bl	80020a8 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e187      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5a:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d036      	beq.n	8003de0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d016      	beq.n	8003da8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <HAL_RCC_OscConfig+0x248>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fe f992 	bl	80020a8 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d88:	f7fe f98e 	bl	80020a8 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e167      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x200>
 8003da6:	e01b      	b.n	8003de0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <HAL_RCC_OscConfig+0x248>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dae:	f7fe f97b 	bl	80020a8 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db4:	e00e      	b.n	8003dd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db6:	f7fe f977 	bl	80020a8 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d907      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e150      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	42470000 	.word	0x42470000
 8003dd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd4:	4b88      	ldr	r3, [pc, #544]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1ea      	bne.n	8003db6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8097 	beq.w	8003f1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df2:	4b81      	ldr	r3, [pc, #516]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10f      	bne.n	8003e1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	4b7d      	ldr	r3, [pc, #500]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	4a7c      	ldr	r2, [pc, #496]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0e:	4b7a      	ldr	r3, [pc, #488]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	4b77      	ldr	r3, [pc, #476]	; (8003ffc <HAL_RCC_OscConfig+0x474>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d118      	bne.n	8003e5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2a:	4b74      	ldr	r3, [pc, #464]	; (8003ffc <HAL_RCC_OscConfig+0x474>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a73      	ldr	r2, [pc, #460]	; (8003ffc <HAL_RCC_OscConfig+0x474>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e36:	f7fe f937 	bl	80020a8 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3e:	f7fe f933 	bl	80020a8 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e10c      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e50:	4b6a      	ldr	r3, [pc, #424]	; (8003ffc <HAL_RCC_OscConfig+0x474>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0x2ea>
 8003e64:	4b64      	ldr	r3, [pc, #400]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	4a63      	ldr	r2, [pc, #396]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e70:	e01c      	b.n	8003eac <HAL_RCC_OscConfig+0x324>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b05      	cmp	r3, #5
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x30c>
 8003e7a:	4b5f      	ldr	r3, [pc, #380]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	4a5e      	ldr	r2, [pc, #376]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003e80:	f043 0304 	orr.w	r3, r3, #4
 8003e84:	6713      	str	r3, [r2, #112]	; 0x70
 8003e86:	4b5c      	ldr	r3, [pc, #368]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	4a5b      	ldr	r2, [pc, #364]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6713      	str	r3, [r2, #112]	; 0x70
 8003e92:	e00b      	b.n	8003eac <HAL_RCC_OscConfig+0x324>
 8003e94:	4b58      	ldr	r3, [pc, #352]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a57      	ldr	r2, [pc, #348]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea0:	4b55      	ldr	r3, [pc, #340]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a54      	ldr	r2, [pc, #336]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003ea6:	f023 0304 	bic.w	r3, r3, #4
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d015      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb4:	f7fe f8f8 	bl	80020a8 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ebc:	f7fe f8f4 	bl	80020a8 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e0cb      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed2:	4b49      	ldr	r3, [pc, #292]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0ee      	beq.n	8003ebc <HAL_RCC_OscConfig+0x334>
 8003ede:	e014      	b.n	8003f0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee0:	f7fe f8e2 	bl	80020a8 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee6:	e00a      	b.n	8003efe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee8:	f7fe f8de 	bl	80020a8 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e0b5      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003efe:	4b3e      	ldr	r3, [pc, #248]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1ee      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d105      	bne.n	8003f1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f10:	4b39      	ldr	r3, [pc, #228]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	4a38      	ldr	r2, [pc, #224]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 80a1 	beq.w	8004068 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f26:	4b34      	ldr	r3, [pc, #208]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d05c      	beq.n	8003fec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d141      	bne.n	8003fbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3a:	4b31      	ldr	r3, [pc, #196]	; (8004000 <HAL_RCC_OscConfig+0x478>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fe f8b2 	bl	80020a8 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f48:	f7fe f8ae 	bl	80020a8 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e087      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5a:	4b27      	ldr	r3, [pc, #156]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69da      	ldr	r2, [r3, #28]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	019b      	lsls	r3, r3, #6
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	041b      	lsls	r3, r3, #16
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	061b      	lsls	r3, r3, #24
 8003f8a:	491b      	ldr	r1, [pc, #108]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f90:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <HAL_RCC_OscConfig+0x478>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f96:	f7fe f887 	bl	80020a8 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9e:	f7fe f883 	bl	80020a8 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e05c      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x416>
 8003fbc:	e054      	b.n	8004068 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fbe:	4b10      	ldr	r3, [pc, #64]	; (8004000 <HAL_RCC_OscConfig+0x478>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7fe f870 	bl	80020a8 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fcc:	f7fe f86c 	bl	80020a8 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e045      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fde:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_RCC_OscConfig+0x470>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0x444>
 8003fea:	e03d      	b.n	8004068 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d107      	bne.n	8004004 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e038      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	40007000 	.word	0x40007000
 8004000:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004004:	4b1b      	ldr	r3, [pc, #108]	; (8004074 <HAL_RCC_OscConfig+0x4ec>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d028      	beq.n	8004064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d121      	bne.n	8004064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402a:	429a      	cmp	r2, r3
 800402c:	d11a      	bne.n	8004064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004034:	4013      	ands	r3, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800403a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800403c:	4293      	cmp	r3, r2
 800403e:	d111      	bne.n	8004064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	085b      	lsrs	r3, r3, #1
 800404c:	3b01      	subs	r3, #1
 800404e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004050:	429a      	cmp	r2, r3
 8004052:	d107      	bne.n	8004064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023800 	.word	0x40023800

08004078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0cc      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800408c:	4b68      	ldr	r3, [pc, #416]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d90c      	bls.n	80040b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409a:	4b65      	ldr	r3, [pc, #404]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a2:	4b63      	ldr	r3, [pc, #396]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0b8      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d020      	beq.n	8004102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040cc:	4b59      	ldr	r3, [pc, #356]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4a58      	ldr	r2, [pc, #352]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e4:	4b53      	ldr	r3, [pc, #332]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4a52      	ldr	r2, [pc, #328]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f0:	4b50      	ldr	r3, [pc, #320]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	494d      	ldr	r1, [pc, #308]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d044      	beq.n	8004198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d107      	bne.n	8004126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004116:	4b47      	ldr	r3, [pc, #284]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d119      	bne.n	8004156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e07f      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d003      	beq.n	8004136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004132:	2b03      	cmp	r3, #3
 8004134:	d107      	bne.n	8004146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004136:	4b3f      	ldr	r3, [pc, #252]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e06f      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004146:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e067      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004156:	4b37      	ldr	r3, [pc, #220]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f023 0203 	bic.w	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	4934      	ldr	r1, [pc, #208]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	4313      	orrs	r3, r2
 8004166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004168:	f7fd ff9e 	bl	80020a8 <HAL_GetTick>
 800416c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416e:	e00a      	b.n	8004186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004170:	f7fd ff9a 	bl	80020a8 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f241 3288 	movw	r2, #5000	; 0x1388
 800417e:	4293      	cmp	r3, r2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e04f      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004186:	4b2b      	ldr	r3, [pc, #172]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 020c 	and.w	r2, r3, #12
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	429a      	cmp	r2, r3
 8004196:	d1eb      	bne.n	8004170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004198:	4b25      	ldr	r3, [pc, #148]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d20c      	bcs.n	80041c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a6:	4b22      	ldr	r3, [pc, #136]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d001      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e032      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041cc:	4b19      	ldr	r3, [pc, #100]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4916      	ldr	r1, [pc, #88]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	490e      	ldr	r1, [pc, #56]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041fe:	f000 f821 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 8004202:	4602      	mov	r2, r0
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	490a      	ldr	r1, [pc, #40]	; (8004238 <HAL_RCC_ClockConfig+0x1c0>)
 8004210:	5ccb      	ldrb	r3, [r1, r3]
 8004212:	fa22 f303 	lsr.w	r3, r2, r3
 8004216:	4a09      	ldr	r2, [pc, #36]	; (800423c <HAL_RCC_ClockConfig+0x1c4>)
 8004218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800421a:	4b09      	ldr	r3, [pc, #36]	; (8004240 <HAL_RCC_ClockConfig+0x1c8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fd f942 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40023c00 	.word	0x40023c00
 8004234:	40023800 	.word	0x40023800
 8004238:	0800b4f4 	.word	0x0800b4f4
 800423c:	20000030 	.word	0x20000030
 8004240:	20000034 	.word	0x20000034

08004244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004248:	b090      	sub	sp, #64	; 0x40
 800424a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	637b      	str	r3, [r7, #52]	; 0x34
 8004250:	2300      	movs	r3, #0
 8004252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004254:	2300      	movs	r3, #0
 8004256:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800425c:	4b59      	ldr	r3, [pc, #356]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	2b08      	cmp	r3, #8
 8004266:	d00d      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0x40>
 8004268:	2b08      	cmp	r3, #8
 800426a:	f200 80a1 	bhi.w	80043b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x34>
 8004272:	2b04      	cmp	r3, #4
 8004274:	d003      	beq.n	800427e <HAL_RCC_GetSysClockFreq+0x3a>
 8004276:	e09b      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004278:	4b53      	ldr	r3, [pc, #332]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800427a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800427c:	e09b      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800427e:	4b53      	ldr	r3, [pc, #332]	; (80043cc <HAL_RCC_GetSysClockFreq+0x188>)
 8004280:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004282:	e098      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004284:	4b4f      	ldr	r3, [pc, #316]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800428c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800428e:	4b4d      	ldr	r3, [pc, #308]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d028      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800429a:	4b4a      	ldr	r3, [pc, #296]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	099b      	lsrs	r3, r3, #6
 80042a0:	2200      	movs	r2, #0
 80042a2:	623b      	str	r3, [r7, #32]
 80042a4:	627a      	str	r2, [r7, #36]	; 0x24
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042ac:	2100      	movs	r1, #0
 80042ae:	4b47      	ldr	r3, [pc, #284]	; (80043cc <HAL_RCC_GetSysClockFreq+0x188>)
 80042b0:	fb03 f201 	mul.w	r2, r3, r1
 80042b4:	2300      	movs	r3, #0
 80042b6:	fb00 f303 	mul.w	r3, r0, r3
 80042ba:	4413      	add	r3, r2
 80042bc:	4a43      	ldr	r2, [pc, #268]	; (80043cc <HAL_RCC_GetSysClockFreq+0x188>)
 80042be:	fba0 1202 	umull	r1, r2, r0, r2
 80042c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c4:	460a      	mov	r2, r1
 80042c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80042c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ca:	4413      	add	r3, r2
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d0:	2200      	movs	r2, #0
 80042d2:	61bb      	str	r3, [r7, #24]
 80042d4:	61fa      	str	r2, [r7, #28]
 80042d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042de:	f7fb ffc7 	bl	8000270 <__aeabi_uldivmod>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4613      	mov	r3, r2
 80042e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042ea:	e053      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ec:	4b35      	ldr	r3, [pc, #212]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	099b      	lsrs	r3, r3, #6
 80042f2:	2200      	movs	r2, #0
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	617a      	str	r2, [r7, #20]
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042fe:	f04f 0b00 	mov.w	fp, #0
 8004302:	4652      	mov	r2, sl
 8004304:	465b      	mov	r3, fp
 8004306:	f04f 0000 	mov.w	r0, #0
 800430a:	f04f 0100 	mov.w	r1, #0
 800430e:	0159      	lsls	r1, r3, #5
 8004310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004314:	0150      	lsls	r0, r2, #5
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	ebb2 080a 	subs.w	r8, r2, sl
 800431e:	eb63 090b 	sbc.w	r9, r3, fp
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800432e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004332:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004336:	ebb2 0408 	subs.w	r4, r2, r8
 800433a:	eb63 0509 	sbc.w	r5, r3, r9
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	00eb      	lsls	r3, r5, #3
 8004348:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800434c:	00e2      	lsls	r2, r4, #3
 800434e:	4614      	mov	r4, r2
 8004350:	461d      	mov	r5, r3
 8004352:	eb14 030a 	adds.w	r3, r4, sl
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	eb45 030b 	adc.w	r3, r5, fp
 800435c:	607b      	str	r3, [r7, #4]
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800436a:	4629      	mov	r1, r5
 800436c:	028b      	lsls	r3, r1, #10
 800436e:	4621      	mov	r1, r4
 8004370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004374:	4621      	mov	r1, r4
 8004376:	028a      	lsls	r2, r1, #10
 8004378:	4610      	mov	r0, r2
 800437a:	4619      	mov	r1, r3
 800437c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437e:	2200      	movs	r2, #0
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	60fa      	str	r2, [r7, #12]
 8004384:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004388:	f7fb ff72 	bl	8000270 <__aeabi_uldivmod>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4613      	mov	r3, r2
 8004392:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	3301      	adds	r3, #1
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80043a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043ae:	e002      	b.n	80043b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80043b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3740      	adds	r7, #64	; 0x40
 80043bc:	46bd      	mov	sp, r7
 80043be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043c2:	bf00      	nop
 80043c4:	40023800 	.word	0x40023800
 80043c8:	00f42400 	.word	0x00f42400
 80043cc:	00b71b00 	.word	0x00b71b00

080043d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043d4:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043d6:	681b      	ldr	r3, [r3, #0]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	20000030 	.word	0x20000030

080043e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043ec:	f7ff fff0 	bl	80043d0 <HAL_RCC_GetHCLKFreq>
 80043f0:	4602      	mov	r2, r0
 80043f2:	4b05      	ldr	r3, [pc, #20]	; (8004408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	0a9b      	lsrs	r3, r3, #10
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	4903      	ldr	r1, [pc, #12]	; (800440c <HAL_RCC_GetPCLK1Freq+0x24>)
 80043fe:	5ccb      	ldrb	r3, [r1, r3]
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004404:	4618      	mov	r0, r3
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40023800 	.word	0x40023800
 800440c:	0800b504 	.word	0x0800b504

08004410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004414:	f7ff ffdc 	bl	80043d0 <HAL_RCC_GetHCLKFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	0b5b      	lsrs	r3, r3, #13
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	4903      	ldr	r1, [pc, #12]	; (8004434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800442c:	4618      	mov	r0, r3
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40023800 	.word	0x40023800
 8004434:	0800b504 	.word	0x0800b504

08004438 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	220f      	movs	r2, #15
 8004446:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004448:	4b12      	ldr	r3, [pc, #72]	; (8004494 <HAL_RCC_GetClockConfig+0x5c>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 0203 	and.w	r2, r3, #3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004454:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <HAL_RCC_GetClockConfig+0x5c>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004460:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <HAL_RCC_GetClockConfig+0x5c>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800446c:	4b09      	ldr	r3, [pc, #36]	; (8004494 <HAL_RCC_GetClockConfig+0x5c>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	08db      	lsrs	r3, r3, #3
 8004472:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800447a:	4b07      	ldr	r3, [pc, #28]	; (8004498 <HAL_RCC_GetClockConfig+0x60>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0207 	and.w	r2, r3, #7
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	601a      	str	r2, [r3, #0]
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40023800 	.word	0x40023800
 8004498:	40023c00 	.word	0x40023c00

0800449c <HAL_SMBUS_Init>:
  * @param  hsmbus pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60bb      	str	r3, [r7, #8]

  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_SMBUS_Init+0x1a>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e0a1      	b.n	80045fa <HAL_SMBUS_Init+0x15e>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_SMBUS_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fc fe98 	bl	8001200 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2224      	movs	r2, #36	; 0x24
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044e8:	f7ff ff7e 	bl	80043e8 <HAL_RCC_GetPCLK1Freq>
 80044ec:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = SMBUS_FREQRANGE(pclk1);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4a44      	ldr	r2, [pc, #272]	; (8004604 <HAL_SMBUS_Init+0x168>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	0c9b      	lsrs	r3, r3, #18
 80044f8:	60fb      	str	r3, [r7, #12]

  /*---------------------------- SMBUSx CR2 Configuration ----------------------*/
  /* Configure SMBUSx: Frequency range */
  MODIFY_REG(hsmbus->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx TRISE Configuration --------------------*/
  /* Configure SMBUSx: Rise Time */
  MODIFY_REG(hsmbus->Instance->TRISE, I2C_TRISE_TRISE, SMBUS_RISE_TIME(freqrange));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	621a      	str	r2, [r3, #32]

  /*---------------------------- SMBUSx CCR Configuration ----------------------*/
  /* Configure SMBUSx: Speed */
  MODIFY_REG(hsmbus->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), SMBUS_SPEED_STANDARD(pclk1, hsmbus->Init.ClockSpeed));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 800452e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6852      	ldr	r2, [r2, #4]
 8004536:	0052      	lsls	r2, r2, #1
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	fbb1 f1f2 	udiv	r1, r1, r2
 800453e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004542:	400a      	ands	r2, r1
 8004544:	2a00      	cmp	r2, #0
 8004546:	d006      	beq.n	8004556 <HAL_SMBUS_Init+0xba>
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6852      	ldr	r2, [r2, #4]
 800454c:	0052      	lsls	r2, r2, #1
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	fbb1 f2f2 	udiv	r2, r1, r2
 8004554:	e000      	b.n	8004558 <HAL_SMBUS_Init+0xbc>
 8004556:	2204      	movs	r2, #4
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	6809      	ldr	r1, [r1, #0]
 800455c:	4313      	orrs	r3, r2
 800455e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- SMBUSx CR1 Configuration ----------------------*/
  /* Configure SMBUSx: Generalcall , PEC , Peripheral mode and  NoStretch mode */
  MODIFY_REG(hsmbus->Instance->CR1, (I2C_CR1_NOSTRETCH | I2C_CR1_ENGC | I2C_CR1_ENPEC | I2C_CR1_ENARP | I2C_CR1_SMBTYPE | I2C_CR1_SMBUS), (hsmbus->Init.NoStretchMode | hsmbus->Init.GeneralCallMode |  hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 01fa 	bic.w	r1, r3, #250	; 0xfa
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1a      	ldr	r2, [r3, #32]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx OAR1 Configuration ---------------------*/
  /* Configure SMBUSx: Own Address1 and addressing mode */
  MODIFY_REG(hsmbus->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hsmbus->Init.AddressingMode | hsmbus->Init.OwnAddress1));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004592:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6911      	ldr	r1, [r2, #16]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68d2      	ldr	r2, [r2, #12]
 800459e:	4311      	orrs	r1, r2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6812      	ldr	r2, [r2, #0]
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- SMBUSx OAR2 Configuration ---------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  MODIFY_REG(hsmbus->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	60da      	str	r2, [r3, #12]
  /* Configure SMBUSx: Analog noise filter */
  SET_BIT(hsmbus->Instance->FLTR, hsmbus->Init.AnalogFilter);
#endif

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hsmbus->PreviousState = SMBUS_STATE_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	639a      	str	r2, [r3, #56]	; 0x38
  hsmbus->Mode = HAL_SMBUS_MODE_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hsmbus->XferPEC = 0x00;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	431bde83 	.word	0x431bde83

08004608 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  SET_BIT(hsmbus->Instance->CR1, I2C_CR1_ALERT);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800461e:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_SMBALERT);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8004628:	615a      	str	r2, [r3, #20]

  /* Enable Alert Interrupt */
  __HAL_SMBUS_ENABLE_IT(hsmbus, SMBUS_IT_ERR);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004638:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e041      	b.n	80046de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fd fab0 	bl	8001bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f001 f812 	bl	80056b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d001      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e04e      	b.n	800479e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a23      	ldr	r2, [pc, #140]	; (80047ac <HAL_TIM_Base_Start_IT+0xc4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d022      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0x80>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472a:	d01d      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0x80>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1f      	ldr	r2, [pc, #124]	; (80047b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d018      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0x80>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a1e      	ldr	r2, [pc, #120]	; (80047b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d013      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0x80>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a1c      	ldr	r2, [pc, #112]	; (80047b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00e      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0x80>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1b      	ldr	r2, [pc, #108]	; (80047bc <HAL_TIM_Base_Start_IT+0xd4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0x80>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a19      	ldr	r2, [pc, #100]	; (80047c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0x80>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a18      	ldr	r2, [pc, #96]	; (80047c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d111      	bne.n	800478c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b06      	cmp	r3, #6
 8004778:	d010      	beq.n	800479c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0201 	orr.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478a:	e007      	b.n	800479c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0201 	orr.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40010000 	.word	0x40010000
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800
 80047b8:	40000c00 	.word	0x40000c00
 80047bc:	40010400 	.word	0x40010400
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40001800 	.word	0x40001800

080047c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e041      	b.n	800485e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fd f9a8 	bl	8001b44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3304      	adds	r3, #4
 8004804:	4619      	mov	r1, r3
 8004806:	4610      	mov	r0, r2
 8004808:	f000 ff52 	bl	80056b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <HAL_TIM_PWM_Start+0x24>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e022      	b.n	80048d2 <HAL_TIM_PWM_Start+0x6a>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b04      	cmp	r3, #4
 8004890:	d109      	bne.n	80048a6 <HAL_TIM_PWM_Start+0x3e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	bf14      	ite	ne
 800489e:	2301      	movne	r3, #1
 80048a0:	2300      	moveq	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	e015      	b.n	80048d2 <HAL_TIM_PWM_Start+0x6a>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d109      	bne.n	80048c0 <HAL_TIM_PWM_Start+0x58>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	bf14      	ite	ne
 80048b8:	2301      	movne	r3, #1
 80048ba:	2300      	moveq	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	e008      	b.n	80048d2 <HAL_TIM_PWM_Start+0x6a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e07c      	b.n	80049d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <HAL_TIM_PWM_Start+0x82>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e8:	e013      	b.n	8004912 <HAL_TIM_PWM_Start+0xaa>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_PWM_Start+0x92>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f8:	e00b      	b.n	8004912 <HAL_TIM_PWM_Start+0xaa>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d104      	bne.n	800490a <HAL_TIM_PWM_Start+0xa2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004908:	e003      	b.n	8004912 <HAL_TIM_PWM_Start+0xaa>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2201      	movs	r2, #1
 8004918:	6839      	ldr	r1, [r7, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f001 fadc 	bl	8005ed8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a2d      	ldr	r2, [pc, #180]	; (80049dc <HAL_TIM_PWM_Start+0x174>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_TIM_PWM_Start+0xcc>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2c      	ldr	r2, [pc, #176]	; (80049e0 <HAL_TIM_PWM_Start+0x178>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d101      	bne.n	8004938 <HAL_TIM_PWM_Start+0xd0>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <HAL_TIM_PWM_Start+0xd2>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800494c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a22      	ldr	r2, [pc, #136]	; (80049dc <HAL_TIM_PWM_Start+0x174>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d022      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004960:	d01d      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <HAL_TIM_PWM_Start+0x17c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d018      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1d      	ldr	r2, [pc, #116]	; (80049e8 <HAL_TIM_PWM_Start+0x180>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d013      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1c      	ldr	r2, [pc, #112]	; (80049ec <HAL_TIM_PWM_Start+0x184>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00e      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <HAL_TIM_PWM_Start+0x178>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d009      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a18      	ldr	r2, [pc, #96]	; (80049f0 <HAL_TIM_PWM_Start+0x188>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d004      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a16      	ldr	r2, [pc, #88]	; (80049f4 <HAL_TIM_PWM_Start+0x18c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d111      	bne.n	80049c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b06      	cmp	r3, #6
 80049ae:	d010      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c0:	e007      	b.n	80049d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0201 	orr.w	r2, r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40010000 	.word	0x40010000
 80049e0:	40010400 	.word	0x40010400
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800
 80049ec:	40000c00 	.word	0x40000c00
 80049f0:	40014000 	.word	0x40014000
 80049f4:	40001800 	.word	0x40001800

080049f8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d109      	bne.n	8004a24 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	bf0c      	ite	eq
 8004a1c:	2301      	moveq	r3, #1
 8004a1e:	2300      	movne	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	e022      	b.n	8004a6a <HAL_TIM_PWM_Start_DMA+0x72>
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d109      	bne.n	8004a3e <HAL_TIM_PWM_Start_DMA+0x46>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	e015      	b.n	8004a6a <HAL_TIM_PWM_Start_DMA+0x72>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d109      	bne.n	8004a58 <HAL_TIM_PWM_Start_DMA+0x60>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	e008      	b.n	8004a6a <HAL_TIM_PWM_Start_DMA+0x72>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	bf0c      	ite	eq
 8004a64:	2301      	moveq	r3, #1
 8004a66:	2300      	movne	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e171      	b.n	8004d56 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d109      	bne.n	8004a8c <HAL_TIM_PWM_Start_DMA+0x94>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	e022      	b.n	8004ad2 <HAL_TIM_PWM_Start_DMA+0xda>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d109      	bne.n	8004aa6 <HAL_TIM_PWM_Start_DMA+0xae>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	bf0c      	ite	eq
 8004a9e:	2301      	moveq	r3, #1
 8004aa0:	2300      	movne	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	e015      	b.n	8004ad2 <HAL_TIM_PWM_Start_DMA+0xda>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d109      	bne.n	8004ac0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	e008      	b.n	8004ad2 <HAL_TIM_PWM_Start_DMA+0xda>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	bf0c      	ite	eq
 8004acc:	2301      	moveq	r3, #1
 8004ace:	2300      	movne	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d024      	beq.n	8004b20 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d104      	bne.n	8004ae6 <HAL_TIM_PWM_Start_DMA+0xee>
 8004adc:	887b      	ldrh	r3, [r7, #2]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e137      	b.n	8004d56 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af4:	e016      	b.n	8004b24 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d104      	bne.n	8004b06 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b04:	e00e      	b.n	8004b24 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d104      	bne.n	8004b16 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b14:	e006      	b.n	8004b24 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b1e:	e001      	b.n	8004b24 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e118      	b.n	8004d56 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b0c      	cmp	r3, #12
 8004b28:	f200 80ae 	bhi.w	8004c88 <HAL_TIM_PWM_Start_DMA+0x290>
 8004b2c:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004b69 	.word	0x08004b69
 8004b38:	08004c89 	.word	0x08004c89
 8004b3c:	08004c89 	.word	0x08004c89
 8004b40:	08004c89 	.word	0x08004c89
 8004b44:	08004bb1 	.word	0x08004bb1
 8004b48:	08004c89 	.word	0x08004c89
 8004b4c:	08004c89 	.word	0x08004c89
 8004b50:	08004c89 	.word	0x08004c89
 8004b54:	08004bf9 	.word	0x08004bf9
 8004b58:	08004c89 	.word	0x08004c89
 8004b5c:	08004c89 	.word	0x08004c89
 8004b60:	08004c89 	.word	0x08004c89
 8004b64:	08004c41 	.word	0x08004c41
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	4a7c      	ldr	r2, [pc, #496]	; (8004d60 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004b6e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	4a7b      	ldr	r2, [pc, #492]	; (8004d64 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004b76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	4a7a      	ldr	r2, [pc, #488]	; (8004d68 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004b7e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3334      	adds	r3, #52	; 0x34
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	887b      	ldrh	r3, [r7, #2]
 8004b90:	f7fe fabe 	bl	8003110 <HAL_DMA_Start_IT>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e0db      	b.n	8004d56 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bac:	60da      	str	r2, [r3, #12]
      break;
 8004bae:	e06e      	b.n	8004c8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	4a6a      	ldr	r2, [pc, #424]	; (8004d60 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004bb6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	4a69      	ldr	r2, [pc, #420]	; (8004d64 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004bbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	4a68      	ldr	r2, [pc, #416]	; (8004d68 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004bc6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3338      	adds	r3, #56	; 0x38
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	887b      	ldrh	r3, [r7, #2]
 8004bd8:	f7fe fa9a 	bl	8003110 <HAL_DMA_Start_IT>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e0b7      	b.n	8004d56 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bf4:	60da      	str	r2, [r3, #12]
      break;
 8004bf6:	e04a      	b.n	8004c8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	4a58      	ldr	r2, [pc, #352]	; (8004d60 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004bfe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	4a57      	ldr	r2, [pc, #348]	; (8004d64 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	4a56      	ldr	r2, [pc, #344]	; (8004d68 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004c0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	333c      	adds	r3, #60	; 0x3c
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	887b      	ldrh	r3, [r7, #2]
 8004c20:	f7fe fa76 	bl	8003110 <HAL_DMA_Start_IT>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e093      	b.n	8004d56 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c3c:	60da      	str	r2, [r3, #12]
      break;
 8004c3e:	e026      	b.n	8004c8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	4a46      	ldr	r2, [pc, #280]	; (8004d60 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004c46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	4a45      	ldr	r2, [pc, #276]	; (8004d64 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004c4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	4a44      	ldr	r2, [pc, #272]	; (8004d68 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004c56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3340      	adds	r3, #64	; 0x40
 8004c64:	461a      	mov	r2, r3
 8004c66:	887b      	ldrh	r3, [r7, #2]
 8004c68:	f7fe fa52 	bl	8003110 <HAL_DMA_Start_IT>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e06f      	b.n	8004d56 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c84:	60da      	str	r2, [r3, #12]
      break;
 8004c86:	e002      	b.n	8004c8e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d15f      	bne.n	8004d54 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	68b9      	ldr	r1, [r7, #8]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f001 f91b 	bl	8005ed8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a31      	ldr	r2, [pc, #196]	; (8004d6c <HAL_TIM_PWM_Start_DMA+0x374>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d004      	beq.n	8004cb6 <HAL_TIM_PWM_Start_DMA+0x2be>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a2f      	ldr	r2, [pc, #188]	; (8004d70 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d101      	bne.n	8004cba <HAL_TIM_PWM_Start_DMA+0x2c2>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a25      	ldr	r2, [pc, #148]	; (8004d6c <HAL_TIM_PWM_Start_DMA+0x374>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d022      	beq.n	8004d20 <HAL_TIM_PWM_Start_DMA+0x328>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce2:	d01d      	beq.n	8004d20 <HAL_TIM_PWM_Start_DMA+0x328>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a22      	ldr	r2, [pc, #136]	; (8004d74 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d018      	beq.n	8004d20 <HAL_TIM_PWM_Start_DMA+0x328>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a21      	ldr	r2, [pc, #132]	; (8004d78 <HAL_TIM_PWM_Start_DMA+0x380>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d013      	beq.n	8004d20 <HAL_TIM_PWM_Start_DMA+0x328>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1f      	ldr	r2, [pc, #124]	; (8004d7c <HAL_TIM_PWM_Start_DMA+0x384>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d00e      	beq.n	8004d20 <HAL_TIM_PWM_Start_DMA+0x328>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1a      	ldr	r2, [pc, #104]	; (8004d70 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d009      	beq.n	8004d20 <HAL_TIM_PWM_Start_DMA+0x328>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1b      	ldr	r2, [pc, #108]	; (8004d80 <HAL_TIM_PWM_Start_DMA+0x388>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d004      	beq.n	8004d20 <HAL_TIM_PWM_Start_DMA+0x328>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1a      	ldr	r2, [pc, #104]	; (8004d84 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d111      	bne.n	8004d44 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	2b06      	cmp	r3, #6
 8004d30:	d010      	beq.n	8004d54 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f042 0201 	orr.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d42:	e007      	b.n	8004d54 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	080055a1 	.word	0x080055a1
 8004d64:	08005649 	.word	0x08005649
 8004d68:	0800550f 	.word	0x0800550f
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40010400 	.word	0x40010400
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40000c00 	.word	0x40000c00
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40001800 	.word	0x40001800

08004d88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e041      	b.n	8004e1e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f839 	bl	8004e26 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f000 fc72 	bl	80056b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b082      	sub	sp, #8
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d122      	bne.n	8004e96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d11b      	bne.n	8004e96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f06f 0202 	mvn.w	r2, #2
 8004e66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fb14 	bl	80054aa <HAL_TIM_IC_CaptureCallback>
 8004e82:	e005      	b.n	8004e90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fb06 	bl	8005496 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fb17 	bl	80054be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d122      	bne.n	8004eea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d11b      	bne.n	8004eea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f06f 0204 	mvn.w	r2, #4
 8004eba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 faea 	bl	80054aa <HAL_TIM_IC_CaptureCallback>
 8004ed6:	e005      	b.n	8004ee4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fadc 	bl	8005496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 faed 	bl	80054be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d122      	bne.n	8004f3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d11b      	bne.n	8004f3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f06f 0208 	mvn.w	r2, #8
 8004f0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2204      	movs	r2, #4
 8004f14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	f003 0303 	and.w	r3, r3, #3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fac0 	bl	80054aa <HAL_TIM_IC_CaptureCallback>
 8004f2a:	e005      	b.n	8004f38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fab2 	bl	8005496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fac3 	bl	80054be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d122      	bne.n	8004f92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d11b      	bne.n	8004f92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f06f 0210 	mvn.w	r2, #16
 8004f62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2208      	movs	r2, #8
 8004f68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fa96 	bl	80054aa <HAL_TIM_IC_CaptureCallback>
 8004f7e:	e005      	b.n	8004f8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fa88 	bl	8005496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fa99 	bl	80054be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d10e      	bne.n	8004fbe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d107      	bne.n	8004fbe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f06f 0201 	mvn.w	r2, #1
 8004fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7fc fa07 	bl	80013cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc8:	2b80      	cmp	r3, #128	; 0x80
 8004fca:	d10e      	bne.n	8004fea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd6:	2b80      	cmp	r3, #128	; 0x80
 8004fd8:	d107      	bne.n	8004fea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f001 f875 	bl	80060d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff4:	2b40      	cmp	r3, #64	; 0x40
 8004ff6:	d10e      	bne.n	8005016 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005002:	2b40      	cmp	r3, #64	; 0x40
 8005004:	d107      	bne.n	8005016 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800500e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fa68 	bl	80054e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b20      	cmp	r3, #32
 8005022:	d10e      	bne.n	8005042 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b20      	cmp	r3, #32
 8005030:	d107      	bne.n	8005042 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f06f 0220 	mvn.w	r2, #32
 800503a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f001 f83f 	bl	80060c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005042:	bf00      	nop
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b086      	sub	sp, #24
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005064:	2302      	movs	r3, #2
 8005066:	e088      	b.n	800517a <HAL_TIM_IC_ConfigChannel+0x130>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d11b      	bne.n	80050ae <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	6819      	ldr	r1, [r3, #0]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f000 fd63 	bl	8005b50 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	699a      	ldr	r2, [r3, #24]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 020c 	bic.w	r2, r2, #12
 8005098:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6999      	ldr	r1, [r3, #24]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	619a      	str	r2, [r3, #24]
 80050ac:	e060      	b.n	8005170 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d11c      	bne.n	80050ee <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6818      	ldr	r0, [r3, #0]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	6819      	ldr	r1, [r3, #0]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f000 fde7 	bl	8005c96 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80050d6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6999      	ldr	r1, [r3, #24]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	021a      	lsls	r2, r3, #8
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	619a      	str	r2, [r3, #24]
 80050ec:	e040      	b.n	8005170 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d11b      	bne.n	800512c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	6819      	ldr	r1, [r3, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f000 fe34 	bl	8005d70 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69da      	ldr	r2, [r3, #28]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 020c 	bic.w	r2, r2, #12
 8005116:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	69d9      	ldr	r1, [r3, #28]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	61da      	str	r2, [r3, #28]
 800512a:	e021      	b.n	8005170 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b0c      	cmp	r3, #12
 8005130:	d11c      	bne.n	800516c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6819      	ldr	r1, [r3, #0]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f000 fe51 	bl	8005de8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69da      	ldr	r2, [r3, #28]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005154:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69d9      	ldr	r1, [r3, #28]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	021a      	lsls	r2, r3, #8
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	61da      	str	r2, [r3, #28]
 800516a:	e001      	b.n	8005170 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005178:	7dfb      	ldrb	r3, [r7, #23]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800519e:	2302      	movs	r3, #2
 80051a0:	e0ae      	b.n	8005300 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b0c      	cmp	r3, #12
 80051ae:	f200 809f 	bhi.w	80052f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051b2:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	080051ed 	.word	0x080051ed
 80051bc:	080052f1 	.word	0x080052f1
 80051c0:	080052f1 	.word	0x080052f1
 80051c4:	080052f1 	.word	0x080052f1
 80051c8:	0800522d 	.word	0x0800522d
 80051cc:	080052f1 	.word	0x080052f1
 80051d0:	080052f1 	.word	0x080052f1
 80051d4:	080052f1 	.word	0x080052f1
 80051d8:	0800526f 	.word	0x0800526f
 80051dc:	080052f1 	.word	0x080052f1
 80051e0:	080052f1 	.word	0x080052f1
 80051e4:	080052f1 	.word	0x080052f1
 80051e8:	080052af 	.word	0x080052af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fafc 	bl	80057f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699a      	ldr	r2, [r3, #24]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0208 	orr.w	r2, r2, #8
 8005206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0204 	bic.w	r2, r2, #4
 8005216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6999      	ldr	r1, [r3, #24]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	619a      	str	r2, [r3, #24]
      break;
 800522a:	e064      	b.n	80052f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fb4c 	bl	80058d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6999      	ldr	r1, [r3, #24]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	021a      	lsls	r2, r3, #8
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	619a      	str	r2, [r3, #24]
      break;
 800526c:	e043      	b.n	80052f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fba1 	bl	80059bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0208 	orr.w	r2, r2, #8
 8005288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0204 	bic.w	r2, r2, #4
 8005298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69d9      	ldr	r1, [r3, #28]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	61da      	str	r2, [r3, #28]
      break;
 80052ac:	e023      	b.n	80052f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fbf5 	bl	8005aa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69da      	ldr	r2, [r3, #28]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69d9      	ldr	r1, [r3, #28]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	021a      	lsls	r2, r3, #8
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	61da      	str	r2, [r3, #28]
      break;
 80052ee:	e002      	b.n	80052f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	75fb      	strb	r3, [r7, #23]
      break;
 80052f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_TIM_ConfigClockSource+0x1c>
 8005320:	2302      	movs	r3, #2
 8005322:	e0b4      	b.n	800548e <HAL_TIM_ConfigClockSource+0x186>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800534a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800535c:	d03e      	beq.n	80053dc <HAL_TIM_ConfigClockSource+0xd4>
 800535e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005362:	f200 8087 	bhi.w	8005474 <HAL_TIM_ConfigClockSource+0x16c>
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536a:	f000 8086 	beq.w	800547a <HAL_TIM_ConfigClockSource+0x172>
 800536e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005372:	d87f      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x16c>
 8005374:	2b70      	cmp	r3, #112	; 0x70
 8005376:	d01a      	beq.n	80053ae <HAL_TIM_ConfigClockSource+0xa6>
 8005378:	2b70      	cmp	r3, #112	; 0x70
 800537a:	d87b      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x16c>
 800537c:	2b60      	cmp	r3, #96	; 0x60
 800537e:	d050      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x11a>
 8005380:	2b60      	cmp	r3, #96	; 0x60
 8005382:	d877      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x16c>
 8005384:	2b50      	cmp	r3, #80	; 0x50
 8005386:	d03c      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0xfa>
 8005388:	2b50      	cmp	r3, #80	; 0x50
 800538a:	d873      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x16c>
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d058      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x13a>
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d86f      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x16c>
 8005394:	2b30      	cmp	r3, #48	; 0x30
 8005396:	d064      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x15a>
 8005398:	2b30      	cmp	r3, #48	; 0x30
 800539a:	d86b      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x16c>
 800539c:	2b20      	cmp	r3, #32
 800539e:	d060      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x15a>
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d867      	bhi.n	8005474 <HAL_TIM_ConfigClockSource+0x16c>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d05c      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x15a>
 80053a8:	2b10      	cmp	r3, #16
 80053aa:	d05a      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x15a>
 80053ac:	e062      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6818      	ldr	r0, [r3, #0]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6899      	ldr	r1, [r3, #8]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f000 fd6b 	bl	8005e98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	609a      	str	r2, [r3, #8]
      break;
 80053da:	e04f      	b.n	800547c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	6899      	ldr	r1, [r3, #8]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f000 fd54 	bl	8005e98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053fe:	609a      	str	r2, [r3, #8]
      break;
 8005400:	e03c      	b.n	800547c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6859      	ldr	r1, [r3, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	461a      	mov	r2, r3
 8005410:	f000 fc12 	bl	8005c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2150      	movs	r1, #80	; 0x50
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fd21 	bl	8005e62 <TIM_ITRx_SetConfig>
      break;
 8005420:	e02c      	b.n	800547c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6859      	ldr	r1, [r3, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	461a      	mov	r2, r3
 8005430:	f000 fc6e 	bl	8005d10 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2160      	movs	r1, #96	; 0x60
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fd11 	bl	8005e62 <TIM_ITRx_SetConfig>
      break;
 8005440:	e01c      	b.n	800547c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6859      	ldr	r1, [r3, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	461a      	mov	r2, r3
 8005450:	f000 fbf2 	bl	8005c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2140      	movs	r1, #64	; 0x40
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fd01 	bl	8005e62 <TIM_ITRx_SetConfig>
      break;
 8005460:	e00c      	b.n	800547c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4619      	mov	r1, r3
 800546c:	4610      	mov	r0, r2
 800546e:	f000 fcf8 	bl	8005e62 <TIM_ITRx_SetConfig>
      break;
 8005472:	e003      	b.n	800547c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	73fb      	strb	r3, [r7, #15]
      break;
 8005478:	e000      	b.n	800547c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800547a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800548c:	7bfb      	ldrb	r3, [r7, #15]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	429a      	cmp	r2, r3
 8005524:	d107      	bne.n	8005536 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2201      	movs	r2, #1
 800552a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005534:	e02a      	b.n	800558c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d107      	bne.n	8005550 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2202      	movs	r2, #2
 8005544:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800554e:	e01d      	b.n	800558c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	429a      	cmp	r2, r3
 8005558:	d107      	bne.n	800556a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2204      	movs	r2, #4
 800555e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005568:	e010      	b.n	800558c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	429a      	cmp	r2, r3
 8005572:	d107      	bne.n	8005584 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2208      	movs	r2, #8
 8005578:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005582:	e003      	b.n	800558c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f7ff ffb4 	bl	80054fa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	771a      	strb	r2, [r3, #28]
}
 8005598:	bf00      	nop
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d10b      	bne.n	80055d0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2201      	movs	r2, #1
 80055bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d136      	bne.n	8005634 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ce:	e031      	b.n	8005634 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d10b      	bne.n	80055f2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2202      	movs	r2, #2
 80055de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d125      	bne.n	8005634 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f0:	e020      	b.n	8005634 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d10b      	bne.n	8005614 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2204      	movs	r2, #4
 8005600:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d114      	bne.n	8005634 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005612:	e00f      	b.n	8005634 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d10a      	bne.n	8005634 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2208      	movs	r2, #8
 8005622:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d103      	bne.n	8005634 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f7ff ff42 	bl	80054be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	771a      	strb	r2, [r3, #28]
}
 8005640:	bf00      	nop
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	429a      	cmp	r2, r3
 800565e:	d103      	bne.n	8005668 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2201      	movs	r2, #1
 8005664:	771a      	strb	r2, [r3, #28]
 8005666:	e019      	b.n	800569c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	429a      	cmp	r2, r3
 8005670:	d103      	bne.n	800567a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2202      	movs	r2, #2
 8005676:	771a      	strb	r2, [r3, #28]
 8005678:	e010      	b.n	800569c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	429a      	cmp	r2, r3
 8005682:	d103      	bne.n	800568c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2204      	movs	r2, #4
 8005688:	771a      	strb	r2, [r3, #28]
 800568a:	e007      	b.n	800569c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	429a      	cmp	r2, r3
 8005694:	d102      	bne.n	800569c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2208      	movs	r2, #8
 800569a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7ff ff18 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	771a      	strb	r2, [r3, #28]
}
 80056a8:	bf00      	nop
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a40      	ldr	r2, [pc, #256]	; (80057c4 <TIM_Base_SetConfig+0x114>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d013      	beq.n	80056f0 <TIM_Base_SetConfig+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ce:	d00f      	beq.n	80056f0 <TIM_Base_SetConfig+0x40>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a3d      	ldr	r2, [pc, #244]	; (80057c8 <TIM_Base_SetConfig+0x118>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00b      	beq.n	80056f0 <TIM_Base_SetConfig+0x40>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a3c      	ldr	r2, [pc, #240]	; (80057cc <TIM_Base_SetConfig+0x11c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d007      	beq.n	80056f0 <TIM_Base_SetConfig+0x40>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a3b      	ldr	r2, [pc, #236]	; (80057d0 <TIM_Base_SetConfig+0x120>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d003      	beq.n	80056f0 <TIM_Base_SetConfig+0x40>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a3a      	ldr	r2, [pc, #232]	; (80057d4 <TIM_Base_SetConfig+0x124>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d108      	bne.n	8005702 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a2f      	ldr	r2, [pc, #188]	; (80057c4 <TIM_Base_SetConfig+0x114>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d02b      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005710:	d027      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2c      	ldr	r2, [pc, #176]	; (80057c8 <TIM_Base_SetConfig+0x118>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d023      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2b      	ldr	r2, [pc, #172]	; (80057cc <TIM_Base_SetConfig+0x11c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d01f      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a2a      	ldr	r2, [pc, #168]	; (80057d0 <TIM_Base_SetConfig+0x120>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01b      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a29      	ldr	r2, [pc, #164]	; (80057d4 <TIM_Base_SetConfig+0x124>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d017      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a28      	ldr	r2, [pc, #160]	; (80057d8 <TIM_Base_SetConfig+0x128>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a27      	ldr	r2, [pc, #156]	; (80057dc <TIM_Base_SetConfig+0x12c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00f      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a26      	ldr	r2, [pc, #152]	; (80057e0 <TIM_Base_SetConfig+0x130>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00b      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a25      	ldr	r2, [pc, #148]	; (80057e4 <TIM_Base_SetConfig+0x134>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d007      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a24      	ldr	r2, [pc, #144]	; (80057e8 <TIM_Base_SetConfig+0x138>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d003      	beq.n	8005762 <TIM_Base_SetConfig+0xb2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a23      	ldr	r2, [pc, #140]	; (80057ec <TIM_Base_SetConfig+0x13c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d108      	bne.n	8005774 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <TIM_Base_SetConfig+0x114>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_Base_SetConfig+0xf8>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a0c      	ldr	r2, [pc, #48]	; (80057d4 <TIM_Base_SetConfig+0x124>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d103      	bne.n	80057b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	615a      	str	r2, [r3, #20]
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40010000 	.word	0x40010000
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40000800 	.word	0x40000800
 80057d0:	40000c00 	.word	0x40000c00
 80057d4:	40010400 	.word	0x40010400
 80057d8:	40014000 	.word	0x40014000
 80057dc:	40014400 	.word	0x40014400
 80057e0:	40014800 	.word	0x40014800
 80057e4:	40001800 	.word	0x40001800
 80057e8:	40001c00 	.word	0x40001c00
 80057ec:	40002000 	.word	0x40002000

080057f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f023 0201 	bic.w	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0303 	bic.w	r3, r3, #3
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f023 0302 	bic.w	r3, r3, #2
 8005838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a20      	ldr	r2, [pc, #128]	; (80058c8 <TIM_OC1_SetConfig+0xd8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_OC1_SetConfig+0x64>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a1f      	ldr	r2, [pc, #124]	; (80058cc <TIM_OC1_SetConfig+0xdc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d10c      	bne.n	800586e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f023 0308 	bic.w	r3, r3, #8
 800585a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f023 0304 	bic.w	r3, r3, #4
 800586c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a15      	ldr	r2, [pc, #84]	; (80058c8 <TIM_OC1_SetConfig+0xd8>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d003      	beq.n	800587e <TIM_OC1_SetConfig+0x8e>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a14      	ldr	r2, [pc, #80]	; (80058cc <TIM_OC1_SetConfig+0xdc>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d111      	bne.n	80058a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800588c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	621a      	str	r2, [r3, #32]
}
 80058bc:	bf00      	nop
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	40010000 	.word	0x40010000
 80058cc:	40010400 	.word	0x40010400

080058d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	f023 0210 	bic.w	r2, r3, #16
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f023 0320 	bic.w	r3, r3, #32
 800591a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a22      	ldr	r2, [pc, #136]	; (80059b4 <TIM_OC2_SetConfig+0xe4>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d003      	beq.n	8005938 <TIM_OC2_SetConfig+0x68>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a21      	ldr	r2, [pc, #132]	; (80059b8 <TIM_OC2_SetConfig+0xe8>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d10d      	bne.n	8005954 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800593e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4313      	orrs	r3, r2
 800594a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005952:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a17      	ldr	r2, [pc, #92]	; (80059b4 <TIM_OC2_SetConfig+0xe4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_OC2_SetConfig+0x94>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a16      	ldr	r2, [pc, #88]	; (80059b8 <TIM_OC2_SetConfig+0xe8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d113      	bne.n	800598c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800596a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	621a      	str	r2, [r3, #32]
}
 80059a6:	bf00      	nop
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40010400 	.word	0x40010400

080059bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0303 	bic.w	r3, r3, #3
 80059f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a21      	ldr	r2, [pc, #132]	; (8005a9c <TIM_OC3_SetConfig+0xe0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_OC3_SetConfig+0x66>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a20      	ldr	r2, [pc, #128]	; (8005aa0 <TIM_OC3_SetConfig+0xe4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d10d      	bne.n	8005a3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	021b      	lsls	r3, r3, #8
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a16      	ldr	r2, [pc, #88]	; (8005a9c <TIM_OC3_SetConfig+0xe0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d003      	beq.n	8005a4e <TIM_OC3_SetConfig+0x92>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a15      	ldr	r2, [pc, #84]	; (8005aa0 <TIM_OC3_SetConfig+0xe4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d113      	bne.n	8005a76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	011b      	lsls	r3, r3, #4
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	621a      	str	r2, [r3, #32]
}
 8005a90:	bf00      	nop
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40010400 	.word	0x40010400

08005aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	021b      	lsls	r3, r3, #8
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	031b      	lsls	r3, r3, #12
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a12      	ldr	r2, [pc, #72]	; (8005b48 <TIM_OC4_SetConfig+0xa4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d003      	beq.n	8005b0c <TIM_OC4_SetConfig+0x68>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a11      	ldr	r2, [pc, #68]	; (8005b4c <TIM_OC4_SetConfig+0xa8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d109      	bne.n	8005b20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	019b      	lsls	r3, r3, #6
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	621a      	str	r2, [r3, #32]
}
 8005b3a:	bf00      	nop
 8005b3c:	371c      	adds	r7, #28
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	40010000 	.word	0x40010000
 8005b4c:	40010400 	.word	0x40010400

08005b50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f023 0201 	bic.w	r2, r3, #1
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4a28      	ldr	r2, [pc, #160]	; (8005c1c <TIM_TI1_SetConfig+0xcc>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d01b      	beq.n	8005bb6 <TIM_TI1_SetConfig+0x66>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b84:	d017      	beq.n	8005bb6 <TIM_TI1_SetConfig+0x66>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4a25      	ldr	r2, [pc, #148]	; (8005c20 <TIM_TI1_SetConfig+0xd0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d013      	beq.n	8005bb6 <TIM_TI1_SetConfig+0x66>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4a24      	ldr	r2, [pc, #144]	; (8005c24 <TIM_TI1_SetConfig+0xd4>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00f      	beq.n	8005bb6 <TIM_TI1_SetConfig+0x66>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4a23      	ldr	r2, [pc, #140]	; (8005c28 <TIM_TI1_SetConfig+0xd8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00b      	beq.n	8005bb6 <TIM_TI1_SetConfig+0x66>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4a22      	ldr	r2, [pc, #136]	; (8005c2c <TIM_TI1_SetConfig+0xdc>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d007      	beq.n	8005bb6 <TIM_TI1_SetConfig+0x66>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a21      	ldr	r2, [pc, #132]	; (8005c30 <TIM_TI1_SetConfig+0xe0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d003      	beq.n	8005bb6 <TIM_TI1_SetConfig+0x66>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4a20      	ldr	r2, [pc, #128]	; (8005c34 <TIM_TI1_SetConfig+0xe4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d101      	bne.n	8005bba <TIM_TI1_SetConfig+0x6a>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <TIM_TI1_SetConfig+0x6c>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f023 0303 	bic.w	r3, r3, #3
 8005bc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	e003      	b.n	8005bda <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f043 0301 	orr.w	r3, r3, #1
 8005bd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005be0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	011b      	lsls	r3, r3, #4
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f023 030a 	bic.w	r3, r3, #10
 8005bf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f003 030a 	and.w	r3, r3, #10
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	621a      	str	r2, [r3, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40010000 	.word	0x40010000
 8005c20:	40000400 	.word	0x40000400
 8005c24:	40000800 	.word	0x40000800
 8005c28:	40000c00 	.word	0x40000c00
 8005c2c:	40010400 	.word	0x40010400
 8005c30:	40014000 	.word	0x40014000
 8005c34:	40001800 	.word	0x40001800

08005c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f023 0201 	bic.w	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f023 030a 	bic.w	r3, r3, #10
 8005c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b087      	sub	sp, #28
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607a      	str	r2, [r7, #4]
 8005ca2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	f023 0210 	bic.w	r2, r3, #16
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	031b      	lsls	r3, r3, #12
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ce8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	621a      	str	r2, [r3, #32]
}
 8005d04:	bf00      	nop
 8005d06:	371c      	adds	r7, #28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	f023 0210 	bic.w	r2, r3, #16
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	031b      	lsls	r3, r3, #12
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	621a      	str	r2, [r3, #32]
}
 8005d64:	bf00      	nop
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f023 0303 	bic.w	r3, r3, #3
 8005d9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005dc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	621a      	str	r2, [r3, #32]
}
 8005ddc:	bf00      	nop
 8005dde:	371c      	adds	r7, #28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	031b      	lsls	r3, r3, #12
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005e3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	031b      	lsls	r3, r3, #12
 8005e40:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	621a      	str	r2, [r3, #32]
}
 8005e56:	bf00      	nop
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f043 0307 	orr.w	r3, r3, #7
 8005e84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	609a      	str	r2, [r3, #8]
}
 8005e8c:	bf00      	nop
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	021a      	lsls	r2, r3, #8
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	609a      	str	r2, [r3, #8]
}
 8005ecc:	bf00      	nop
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f003 031f 	and.w	r3, r3, #31
 8005eea:	2201      	movs	r2, #1
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a1a      	ldr	r2, [r3, #32]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	401a      	ands	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a1a      	ldr	r2, [r3, #32]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f10:	431a      	orrs	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	621a      	str	r2, [r3, #32]
}
 8005f16:	bf00      	nop
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e05a      	b.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a21      	ldr	r2, [pc, #132]	; (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d022      	beq.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f88:	d01d      	beq.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d018      	beq.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1b      	ldr	r2, [pc, #108]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d013      	beq.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1a      	ldr	r2, [pc, #104]	; (800600c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00e      	beq.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a18      	ldr	r2, [pc, #96]	; (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d009      	beq.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a17      	ldr	r2, [pc, #92]	; (8006014 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d004      	beq.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a15      	ldr	r2, [pc, #84]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d10c      	bne.n	8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40010000 	.word	0x40010000
 8006004:	40000400 	.word	0x40000400
 8006008:	40000800 	.word	0x40000800
 800600c:	40000c00 	.word	0x40000c00
 8006010:	40010400 	.word	0x40010400
 8006014:	40014000 	.word	0x40014000
 8006018:	40001800 	.word	0x40001800

0800601c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006030:	2b01      	cmp	r3, #1
 8006032:	d101      	bne.n	8006038 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006034:	2302      	movs	r3, #2
 8006036:	e03d      	b.n	80060b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4313      	orrs	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e03f      	b.n	800617a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d106      	bne.n	8006114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7fb feaa 	bl	8001e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2224      	movs	r2, #36	; 0x24
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800612a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 ff35 	bl	8006f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695a      	ldr	r2, [r3, #20]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b08a      	sub	sp, #40	; 0x28
 8006186:	af02      	add	r7, sp, #8
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	603b      	str	r3, [r7, #0]
 800618e:	4613      	mov	r3, r2
 8006190:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d17c      	bne.n	800629c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <HAL_UART_Transmit+0x2c>
 80061a8:	88fb      	ldrh	r3, [r7, #6]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e075      	b.n	800629e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_UART_Transmit+0x3e>
 80061bc:	2302      	movs	r3, #2
 80061be:	e06e      	b.n	800629e <HAL_UART_Transmit+0x11c>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2221      	movs	r2, #33	; 0x21
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061d6:	f7fb ff67 	bl	80020a8 <HAL_GetTick>
 80061da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	88fa      	ldrh	r2, [r7, #6]
 80061e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f0:	d108      	bne.n	8006204 <HAL_UART_Transmit+0x82>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d104      	bne.n	8006204 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	61bb      	str	r3, [r7, #24]
 8006202:	e003      	b.n	800620c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006208:	2300      	movs	r3, #0
 800620a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006214:	e02a      	b.n	800626c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2200      	movs	r2, #0
 800621e:	2180      	movs	r1, #128	; 0x80
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 fc4c 	bl	8006abe <UART_WaitOnFlagUntilTimeout>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e036      	b.n	800629e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10b      	bne.n	800624e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006244:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	3302      	adds	r3, #2
 800624a:	61bb      	str	r3, [r7, #24]
 800624c:	e007      	b.n	800625e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	781a      	ldrb	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	3301      	adds	r3, #1
 800625c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006262:	b29b      	uxth	r3, r3
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1cf      	bne.n	8006216 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2200      	movs	r2, #0
 800627e:	2140      	movs	r1, #64	; 0x40
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fc1c 	bl	8006abe <UART_WaitOnFlagUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e006      	b.n	800629e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	e000      	b.n	800629e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800629c:	2302      	movs	r3, #2
  }
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	4613      	mov	r3, r2
 80062b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d11d      	bne.n	80062fc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <HAL_UART_Receive_IT+0x26>
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e016      	b.n	80062fe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_UART_Receive_IT+0x38>
 80062da:	2302      	movs	r3, #2
 80062dc:	e00f      	b.n	80062fe <HAL_UART_Receive_IT+0x58>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062ec:	88fb      	ldrh	r3, [r7, #6]
 80062ee:	461a      	mov	r2, r3
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 fc51 	bl	8006b9a <UART_Start_Receive_IT>
 80062f8:	4603      	mov	r3, r0
 80062fa:	e000      	b.n	80062fe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80062fc:	2302      	movs	r3, #2
  }
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08c      	sub	sp, #48	; 0x30
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	4613      	mov	r3, r2
 8006314:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b20      	cmp	r3, #32
 8006320:	d165      	bne.n	80063ee <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <HAL_UART_Transmit_DMA+0x26>
 8006328:	88fb      	ldrh	r3, [r7, #6]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e05e      	b.n	80063f0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_UART_Transmit_DMA+0x38>
 800633c:	2302      	movs	r3, #2
 800633e:	e057      	b.n	80063f0 <HAL_UART_Transmit_DMA+0xe8>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	88fa      	ldrh	r2, [r7, #6]
 8006352:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	88fa      	ldrh	r2, [r7, #6]
 8006358:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2221      	movs	r2, #33	; 0x21
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636c:	4a22      	ldr	r2, [pc, #136]	; (80063f8 <HAL_UART_Transmit_DMA+0xf0>)
 800636e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006374:	4a21      	ldr	r2, [pc, #132]	; (80063fc <HAL_UART_Transmit_DMA+0xf4>)
 8006376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637c:	4a20      	ldr	r2, [pc, #128]	; (8006400 <HAL_UART_Transmit_DMA+0xf8>)
 800637e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006384:	2200      	movs	r2, #0
 8006386:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006388:	f107 0308 	add.w	r3, r7, #8
 800638c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006394:	6819      	ldr	r1, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3304      	adds	r3, #4
 800639c:	461a      	mov	r2, r3
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	f7fc feb6 	bl	8003110 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063ac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3314      	adds	r3, #20
 80063bc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	617b      	str	r3, [r7, #20]
   return(result);
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3314      	adds	r3, #20
 80063d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063d6:	627a      	str	r2, [r7, #36]	; 0x24
 80063d8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	6a39      	ldr	r1, [r7, #32]
 80063dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e5      	bne.n	80063b6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	e000      	b.n	80063f0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80063ee:	2302      	movs	r3, #2
  }
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3730      	adds	r7, #48	; 0x30
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	08006975 	.word	0x08006975
 80063fc:	08006a0f 	.word	0x08006a0f
 8006400:	08006a2b 	.word	0x08006a2b

08006404 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b0ba      	sub	sp, #232	; 0xe8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800642a:	2300      	movs	r3, #0
 800642c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006430:	2300      	movs	r3, #0
 8006432:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800643a:	f003 030f 	and.w	r3, r3, #15
 800643e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006442:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10f      	bne.n	800646a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800644a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	d009      	beq.n	800646a <HAL_UART_IRQHandler+0x66>
 8006456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fcde 	bl	8006e24 <UART_Receive_IT>
      return;
 8006468:	e256      	b.n	8006918 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800646a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 80de 	beq.w	8006630 <HAL_UART_IRQHandler+0x22c>
 8006474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d106      	bne.n	800648e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006484:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 80d1 	beq.w	8006630 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800648e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00b      	beq.n	80064b2 <HAL_UART_IRQHandler+0xae>
 800649a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800649e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d005      	beq.n	80064b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	f043 0201 	orr.w	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <HAL_UART_IRQHandler+0xd2>
 80064be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d005      	beq.n	80064d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	f043 0202 	orr.w	r2, r3, #2
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00b      	beq.n	80064fa <HAL_UART_IRQHandler+0xf6>
 80064e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	f043 0204 	orr.w	r2, r3, #4
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d011      	beq.n	800652a <HAL_UART_IRQHandler+0x126>
 8006506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b00      	cmp	r3, #0
 8006510:	d105      	bne.n	800651e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	f043 0208 	orr.w	r2, r3, #8
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 81ed 	beq.w	800690e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <HAL_UART_IRQHandler+0x14e>
 8006540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fc69 	bl	8006e24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655c:	2b40      	cmp	r3, #64	; 0x40
 800655e:	bf0c      	ite	eq
 8006560:	2301      	moveq	r3, #1
 8006562:	2300      	movne	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d103      	bne.n	800657e <HAL_UART_IRQHandler+0x17a>
 8006576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800657a:	2b00      	cmp	r3, #0
 800657c:	d04f      	beq.n	800661e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fb71 	bl	8006c66 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658e:	2b40      	cmp	r3, #64	; 0x40
 8006590:	d141      	bne.n	8006616 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3314      	adds	r3, #20
 8006598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065a0:	e853 3f00 	ldrex	r3, [r3]
 80065a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3314      	adds	r3, #20
 80065ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1d9      	bne.n	8006592 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d013      	beq.n	800660e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	4a7d      	ldr	r2, [pc, #500]	; (80067e0 <HAL_UART_IRQHandler+0x3dc>)
 80065ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fc fe54 	bl	80032a0 <HAL_DMA_Abort_IT>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d016      	beq.n	800662c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006608:	4610      	mov	r0, r2
 800660a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660c:	e00e      	b.n	800662c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f99a 	bl	8006948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006614:	e00a      	b.n	800662c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f996 	bl	8006948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661c:	e006      	b.n	800662c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f992 	bl	8006948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800662a:	e170      	b.n	800690e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662c:	bf00      	nop
    return;
 800662e:	e16e      	b.n	800690e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	2b01      	cmp	r3, #1
 8006636:	f040 814a 	bne.w	80068ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663e:	f003 0310 	and.w	r3, r3, #16
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 8143 	beq.w	80068ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664c:	f003 0310 	and.w	r3, r3, #16
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 813c 	beq.w	80068ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006656:	2300      	movs	r3, #0
 8006658:	60bb      	str	r3, [r7, #8]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60bb      	str	r3, [r7, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	60bb      	str	r3, [r7, #8]
 800666a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	f040 80b4 	bne.w	80067e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006688:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 8140 	beq.w	8006912 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800669a:	429a      	cmp	r2, r3
 800669c:	f080 8139 	bcs.w	8006912 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b2:	f000 8088 	beq.w	80067c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	330c      	adds	r3, #12
 80066bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	330c      	adds	r3, #12
 80066de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80066e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1d9      	bne.n	80066b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3314      	adds	r3, #20
 8006708:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3314      	adds	r3, #20
 8006722:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006726:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800672a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800672e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006738:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e1      	bne.n	8006702 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3314      	adds	r3, #20
 8006744:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800674e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006754:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3314      	adds	r3, #20
 800675e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006762:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006764:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006768:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e3      	bne.n	800673e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	330c      	adds	r3, #12
 800678a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006796:	f023 0310 	bic.w	r3, r3, #16
 800679a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	330c      	adds	r3, #12
 80067a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80067a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80067aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e3      	bne.n	8006784 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fc fcfd 	bl	80031c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f8c0 	bl	800695c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067dc:	e099      	b.n	8006912 <HAL_UART_IRQHandler+0x50e>
 80067de:	bf00      	nop
 80067e0:	08006d2d 	.word	0x08006d2d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 808b 	beq.w	8006916 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006800:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 8086 	beq.w	8006916 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	330c      	adds	r3, #12
 8006810:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800681a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006820:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800682e:	647a      	str	r2, [r7, #68]	; 0x44
 8006830:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800683c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e3      	bne.n	800680a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3314      	adds	r3, #20
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	623b      	str	r3, [r7, #32]
   return(result);
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	f023 0301 	bic.w	r3, r3, #1
 8006858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3314      	adds	r3, #20
 8006862:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006866:	633a      	str	r2, [r7, #48]	; 0x30
 8006868:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800686c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e3      	bne.n	8006842 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	330c      	adds	r3, #12
 800688e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	60fb      	str	r3, [r7, #12]
   return(result);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 0310 	bic.w	r3, r3, #16
 800689e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	330c      	adds	r3, #12
 80068a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80068ac:	61fa      	str	r2, [r7, #28]
 80068ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	69b9      	ldr	r1, [r7, #24]
 80068b2:	69fa      	ldr	r2, [r7, #28]
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	617b      	str	r3, [r7, #20]
   return(result);
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e3      	bne.n	8006888 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f848 	bl	800695c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068cc:	e023      	b.n	8006916 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d009      	beq.n	80068ee <HAL_UART_IRQHandler+0x4ea>
 80068da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fa34 	bl	8006d54 <UART_Transmit_IT>
    return;
 80068ec:	e014      	b.n	8006918 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00e      	beq.n	8006918 <HAL_UART_IRQHandler+0x514>
 80068fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006902:	2b00      	cmp	r3, #0
 8006904:	d008      	beq.n	8006918 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fa74 	bl	8006df4 <UART_EndTransmit_IT>
    return;
 800690c:	e004      	b.n	8006918 <HAL_UART_IRQHandler+0x514>
    return;
 800690e:	bf00      	nop
 8006910:	e002      	b.n	8006918 <HAL_UART_IRQHandler+0x514>
      return;
 8006912:	bf00      	nop
 8006914:	e000      	b.n	8006918 <HAL_UART_IRQHandler+0x514>
      return;
 8006916:	bf00      	nop
  }
}
 8006918:	37e8      	adds	r7, #232	; 0xe8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop

08006920 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b090      	sub	sp, #64	; 0x40
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006980:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800698c:	2b00      	cmp	r3, #0
 800698e:	d137      	bne.n	8006a00 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006992:	2200      	movs	r2, #0
 8006994:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3314      	adds	r3, #20
 800699c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	623b      	str	r3, [r7, #32]
   return(result);
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80069ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3314      	adds	r3, #20
 80069b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069b6:	633a      	str	r2, [r7, #48]	; 0x30
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e5      	bne.n	8006996 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	330c      	adds	r3, #12
 80069d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069e0:	637b      	str	r3, [r7, #52]	; 0x34
 80069e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	330c      	adds	r3, #12
 80069e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069ea:	61fa      	str	r2, [r7, #28]
 80069ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	69b9      	ldr	r1, [r7, #24]
 80069f0:	69fa      	ldr	r2, [r7, #28]
 80069f2:	e841 2300 	strex	r3, r2, [r1]
 80069f6:	617b      	str	r3, [r7, #20]
   return(result);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1e5      	bne.n	80069ca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069fe:	e002      	b.n	8006a06 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006a00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a02:	f7ff ff8d 	bl	8006920 <HAL_UART_TxCpltCallback>
}
 8006a06:	bf00      	nop
 8006a08:	3740      	adds	r7, #64	; 0x40
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b084      	sub	sp, #16
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f7ff ff89 	bl	8006934 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a22:	bf00      	nop
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a46:	2b80      	cmp	r3, #128	; 0x80
 8006a48:	bf0c      	ite	eq
 8006a4a:	2301      	moveq	r3, #1
 8006a4c:	2300      	movne	r3, #0
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b21      	cmp	r3, #33	; 0x21
 8006a5c:	d108      	bne.n	8006a70 <UART_DMAError+0x46>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2200      	movs	r2, #0
 8006a68:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006a6a:	68b8      	ldr	r0, [r7, #8]
 8006a6c:	f000 f8d3 	bl	8006c16 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7a:	2b40      	cmp	r3, #64	; 0x40
 8006a7c:	bf0c      	ite	eq
 8006a7e:	2301      	moveq	r3, #1
 8006a80:	2300      	movne	r3, #0
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b22      	cmp	r3, #34	; 0x22
 8006a90:	d108      	bne.n	8006aa4 <UART_DMAError+0x7a>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d005      	beq.n	8006aa4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006a9e:	68b8      	ldr	r0, [r7, #8]
 8006aa0:	f000 f8e1 	bl	8006c66 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	f043 0210 	orr.w	r2, r3, #16
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ab0:	68b8      	ldr	r0, [r7, #8]
 8006ab2:	f7ff ff49 	bl	8006948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ab6:	bf00      	nop
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b090      	sub	sp, #64	; 0x40
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	603b      	str	r3, [r7, #0]
 8006aca:	4613      	mov	r3, r2
 8006acc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ace:	e050      	b.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad6:	d04c      	beq.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d007      	beq.n	8006aee <UART_WaitOnFlagUntilTimeout+0x30>
 8006ade:	f7fb fae3 	bl	80020a8 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d241      	bcs.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	330c      	adds	r3, #12
 8006b0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b0e:	637a      	str	r2, [r7, #52]	; 0x34
 8006b10:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e5      	bne.n	8006aee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3314      	adds	r3, #20
 8006b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	613b      	str	r3, [r7, #16]
   return(result);
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f023 0301 	bic.w	r3, r3, #1
 8006b38:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3314      	adds	r3, #20
 8006b40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b42:	623a      	str	r2, [r7, #32]
 8006b44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	69f9      	ldr	r1, [r7, #28]
 8006b48:	6a3a      	ldr	r2, [r7, #32]
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e5      	bne.n	8006b22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e00f      	b.n	8006b92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	bf0c      	ite	eq
 8006b82:	2301      	moveq	r3, #1
 8006b84:	2300      	movne	r3, #0
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d09f      	beq.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3740      	adds	r7, #64	; 0x40
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b085      	sub	sp, #20
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	88fa      	ldrh	r2, [r7, #6]
 8006bb2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	88fa      	ldrh	r2, [r7, #6]
 8006bb8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2222      	movs	r2, #34	; 0x22
 8006bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d007      	beq.n	8006be8 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006be6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695a      	ldr	r2, [r3, #20]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0201 	orr.w	r2, r2, #1
 8006bf6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 0220 	orr.w	r2, r2, #32
 8006c06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b089      	sub	sp, #36	; 0x24
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	330c      	adds	r3, #12
 8006c24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c34:	61fb      	str	r3, [r7, #28]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	330c      	adds	r3, #12
 8006c3c:	69fa      	ldr	r2, [r7, #28]
 8006c3e:	61ba      	str	r2, [r7, #24]
 8006c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6979      	ldr	r1, [r7, #20]
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e5      	bne.n	8006c1e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2220      	movs	r2, #32
 8006c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006c5a:	bf00      	nop
 8006c5c:	3724      	adds	r7, #36	; 0x24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b095      	sub	sp, #84	; 0x54
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	330c      	adds	r3, #12
 8006c74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	330c      	adds	r3, #12
 8006c8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c8e:	643a      	str	r2, [r7, #64]	; 0x40
 8006c90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c96:	e841 2300 	strex	r3, r2, [r1]
 8006c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e5      	bne.n	8006c6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3314      	adds	r3, #20
 8006ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	f023 0301 	bic.w	r3, r3, #1
 8006cb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3314      	adds	r3, #20
 8006cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e5      	bne.n	8006ca2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d119      	bne.n	8006d12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	e853 3f00 	ldrex	r3, [r3]
 8006cec:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f023 0310 	bic.w	r3, r3, #16
 8006cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	330c      	adds	r3, #12
 8006cfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cfe:	61ba      	str	r2, [r7, #24]
 8006d00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d02:	6979      	ldr	r1, [r7, #20]
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	e841 2300 	strex	r3, r2, [r1]
 8006d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e5      	bne.n	8006cde <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d20:	bf00      	nop
 8006d22:	3754      	adds	r7, #84	; 0x54
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f7ff fdfe 	bl	8006948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d4c:	bf00      	nop
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b21      	cmp	r3, #33	; 0x21
 8006d66:	d13e      	bne.n	8006de6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d70:	d114      	bne.n	8006d9c <UART_Transmit_IT+0x48>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d110      	bne.n	8006d9c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	461a      	mov	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	1c9a      	adds	r2, r3, #2
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	621a      	str	r2, [r3, #32]
 8006d9a:	e008      	b.n	8006dae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	1c59      	adds	r1, r3, #1
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	6211      	str	r1, [r2, #32]
 8006da6:	781a      	ldrb	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10f      	bne.n	8006de2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	e000      	b.n	8006de8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006de6:	2302      	movs	r3, #2
  }
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7ff fd83 	bl	8006920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b08c      	sub	sp, #48	; 0x30
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b22      	cmp	r3, #34	; 0x22
 8006e36:	f040 80ab 	bne.w	8006f90 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e42:	d117      	bne.n	8006e74 <UART_Receive_IT+0x50>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d113      	bne.n	8006e74 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e54:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6c:	1c9a      	adds	r2, r3, #2
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	629a      	str	r2, [r3, #40]	; 0x28
 8006e72:	e026      	b.n	8006ec2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e86:	d007      	beq.n	8006e98 <UART_Receive_IT+0x74>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <UART_Receive_IT+0x82>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d106      	bne.n	8006ea6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	701a      	strb	r2, [r3, #0]
 8006ea4:	e008      	b.n	8006eb8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d15a      	bne.n	8006f8c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0220 	bic.w	r2, r2, #32
 8006ee4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ef4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	695a      	ldr	r2, [r3, #20]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0201 	bic.w	r2, r2, #1
 8006f04:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d135      	bne.n	8006f82 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	330c      	adds	r3, #12
 8006f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	e853 3f00 	ldrex	r3, [r3]
 8006f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f023 0310 	bic.w	r3, r3, #16
 8006f32:	627b      	str	r3, [r7, #36]	; 0x24
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	330c      	adds	r3, #12
 8006f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f3c:	623a      	str	r2, [r7, #32]
 8006f3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	69f9      	ldr	r1, [r7, #28]
 8006f42:	6a3a      	ldr	r2, [r7, #32]
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e5      	bne.n	8006f1c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0310 	and.w	r3, r3, #16
 8006f5a:	2b10      	cmp	r3, #16
 8006f5c:	d10a      	bne.n	8006f74 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60fb      	str	r3, [r7, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff fcee 	bl	800695c <HAL_UARTEx_RxEventCallback>
 8006f80:	e002      	b.n	8006f88 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7fa fa3a 	bl	80013fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e002      	b.n	8006f92 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	e000      	b.n	8006f92 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006f90:	2302      	movs	r3, #2
  }
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3730      	adds	r7, #48	; 0x30
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fa0:	b0c0      	sub	sp, #256	; 0x100
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb8:	68d9      	ldr	r1, [r3, #12]
 8006fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	ea40 0301 	orr.w	r3, r0, r1
 8006fc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ff4:	f021 010c 	bic.w	r1, r1, #12
 8006ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007002:	430b      	orrs	r3, r1
 8007004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007016:	6999      	ldr	r1, [r3, #24]
 8007018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	ea40 0301 	orr.w	r3, r0, r1
 8007022:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	4b8f      	ldr	r3, [pc, #572]	; (8007268 <UART_SetConfig+0x2cc>)
 800702c:	429a      	cmp	r2, r3
 800702e:	d005      	beq.n	800703c <UART_SetConfig+0xa0>
 8007030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	4b8d      	ldr	r3, [pc, #564]	; (800726c <UART_SetConfig+0x2d0>)
 8007038:	429a      	cmp	r2, r3
 800703a:	d104      	bne.n	8007046 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800703c:	f7fd f9e8 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 8007040:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007044:	e003      	b.n	800704e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007046:	f7fd f9cf 	bl	80043e8 <HAL_RCC_GetPCLK1Freq>
 800704a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800704e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007058:	f040 810c 	bne.w	8007274 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800705c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007060:	2200      	movs	r2, #0
 8007062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007066:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800706a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800706e:	4622      	mov	r2, r4
 8007070:	462b      	mov	r3, r5
 8007072:	1891      	adds	r1, r2, r2
 8007074:	65b9      	str	r1, [r7, #88]	; 0x58
 8007076:	415b      	adcs	r3, r3
 8007078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800707a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800707e:	4621      	mov	r1, r4
 8007080:	eb12 0801 	adds.w	r8, r2, r1
 8007084:	4629      	mov	r1, r5
 8007086:	eb43 0901 	adc.w	r9, r3, r1
 800708a:	f04f 0200 	mov.w	r2, #0
 800708e:	f04f 0300 	mov.w	r3, #0
 8007092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800709a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800709e:	4690      	mov	r8, r2
 80070a0:	4699      	mov	r9, r3
 80070a2:	4623      	mov	r3, r4
 80070a4:	eb18 0303 	adds.w	r3, r8, r3
 80070a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070ac:	462b      	mov	r3, r5
 80070ae:	eb49 0303 	adc.w	r3, r9, r3
 80070b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80070c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80070ca:	460b      	mov	r3, r1
 80070cc:	18db      	adds	r3, r3, r3
 80070ce:	653b      	str	r3, [r7, #80]	; 0x50
 80070d0:	4613      	mov	r3, r2
 80070d2:	eb42 0303 	adc.w	r3, r2, r3
 80070d6:	657b      	str	r3, [r7, #84]	; 0x54
 80070d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80070e0:	f7f9 f8c6 	bl	8000270 <__aeabi_uldivmod>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4b61      	ldr	r3, [pc, #388]	; (8007270 <UART_SetConfig+0x2d4>)
 80070ea:	fba3 2302 	umull	r2, r3, r3, r2
 80070ee:	095b      	lsrs	r3, r3, #5
 80070f0:	011c      	lsls	r4, r3, #4
 80070f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007100:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007104:	4642      	mov	r2, r8
 8007106:	464b      	mov	r3, r9
 8007108:	1891      	adds	r1, r2, r2
 800710a:	64b9      	str	r1, [r7, #72]	; 0x48
 800710c:	415b      	adcs	r3, r3
 800710e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007110:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007114:	4641      	mov	r1, r8
 8007116:	eb12 0a01 	adds.w	sl, r2, r1
 800711a:	4649      	mov	r1, r9
 800711c:	eb43 0b01 	adc.w	fp, r3, r1
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800712c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007134:	4692      	mov	sl, r2
 8007136:	469b      	mov	fp, r3
 8007138:	4643      	mov	r3, r8
 800713a:	eb1a 0303 	adds.w	r3, sl, r3
 800713e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007142:	464b      	mov	r3, r9
 8007144:	eb4b 0303 	adc.w	r3, fp, r3
 8007148:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800714c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007158:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800715c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007160:	460b      	mov	r3, r1
 8007162:	18db      	adds	r3, r3, r3
 8007164:	643b      	str	r3, [r7, #64]	; 0x40
 8007166:	4613      	mov	r3, r2
 8007168:	eb42 0303 	adc.w	r3, r2, r3
 800716c:	647b      	str	r3, [r7, #68]	; 0x44
 800716e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007172:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007176:	f7f9 f87b 	bl	8000270 <__aeabi_uldivmod>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4611      	mov	r1, r2
 8007180:	4b3b      	ldr	r3, [pc, #236]	; (8007270 <UART_SetConfig+0x2d4>)
 8007182:	fba3 2301 	umull	r2, r3, r3, r1
 8007186:	095b      	lsrs	r3, r3, #5
 8007188:	2264      	movs	r2, #100	; 0x64
 800718a:	fb02 f303 	mul.w	r3, r2, r3
 800718e:	1acb      	subs	r3, r1, r3
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007196:	4b36      	ldr	r3, [pc, #216]	; (8007270 <UART_SetConfig+0x2d4>)
 8007198:	fba3 2302 	umull	r2, r3, r3, r2
 800719c:	095b      	lsrs	r3, r3, #5
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071a4:	441c      	add	r4, r3
 80071a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80071b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80071b8:	4642      	mov	r2, r8
 80071ba:	464b      	mov	r3, r9
 80071bc:	1891      	adds	r1, r2, r2
 80071be:	63b9      	str	r1, [r7, #56]	; 0x38
 80071c0:	415b      	adcs	r3, r3
 80071c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071c8:	4641      	mov	r1, r8
 80071ca:	1851      	adds	r1, r2, r1
 80071cc:	6339      	str	r1, [r7, #48]	; 0x30
 80071ce:	4649      	mov	r1, r9
 80071d0:	414b      	adcs	r3, r1
 80071d2:	637b      	str	r3, [r7, #52]	; 0x34
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	f04f 0300 	mov.w	r3, #0
 80071dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80071e0:	4659      	mov	r1, fp
 80071e2:	00cb      	lsls	r3, r1, #3
 80071e4:	4651      	mov	r1, sl
 80071e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071ea:	4651      	mov	r1, sl
 80071ec:	00ca      	lsls	r2, r1, #3
 80071ee:	4610      	mov	r0, r2
 80071f0:	4619      	mov	r1, r3
 80071f2:	4603      	mov	r3, r0
 80071f4:	4642      	mov	r2, r8
 80071f6:	189b      	adds	r3, r3, r2
 80071f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071fc:	464b      	mov	r3, r9
 80071fe:	460a      	mov	r2, r1
 8007200:	eb42 0303 	adc.w	r3, r2, r3
 8007204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007214:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007218:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800721c:	460b      	mov	r3, r1
 800721e:	18db      	adds	r3, r3, r3
 8007220:	62bb      	str	r3, [r7, #40]	; 0x28
 8007222:	4613      	mov	r3, r2
 8007224:	eb42 0303 	adc.w	r3, r2, r3
 8007228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800722a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800722e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007232:	f7f9 f81d 	bl	8000270 <__aeabi_uldivmod>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4b0d      	ldr	r3, [pc, #52]	; (8007270 <UART_SetConfig+0x2d4>)
 800723c:	fba3 1302 	umull	r1, r3, r3, r2
 8007240:	095b      	lsrs	r3, r3, #5
 8007242:	2164      	movs	r1, #100	; 0x64
 8007244:	fb01 f303 	mul.w	r3, r1, r3
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	3332      	adds	r3, #50	; 0x32
 800724e:	4a08      	ldr	r2, [pc, #32]	; (8007270 <UART_SetConfig+0x2d4>)
 8007250:	fba2 2303 	umull	r2, r3, r2, r3
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	f003 0207 	and.w	r2, r3, #7
 800725a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4422      	add	r2, r4
 8007262:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007264:	e105      	b.n	8007472 <UART_SetConfig+0x4d6>
 8007266:	bf00      	nop
 8007268:	40011000 	.word	0x40011000
 800726c:	40011400 	.word	0x40011400
 8007270:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007278:	2200      	movs	r2, #0
 800727a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800727e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007282:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007286:	4642      	mov	r2, r8
 8007288:	464b      	mov	r3, r9
 800728a:	1891      	adds	r1, r2, r2
 800728c:	6239      	str	r1, [r7, #32]
 800728e:	415b      	adcs	r3, r3
 8007290:	627b      	str	r3, [r7, #36]	; 0x24
 8007292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007296:	4641      	mov	r1, r8
 8007298:	1854      	adds	r4, r2, r1
 800729a:	4649      	mov	r1, r9
 800729c:	eb43 0501 	adc.w	r5, r3, r1
 80072a0:	f04f 0200 	mov.w	r2, #0
 80072a4:	f04f 0300 	mov.w	r3, #0
 80072a8:	00eb      	lsls	r3, r5, #3
 80072aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072ae:	00e2      	lsls	r2, r4, #3
 80072b0:	4614      	mov	r4, r2
 80072b2:	461d      	mov	r5, r3
 80072b4:	4643      	mov	r3, r8
 80072b6:	18e3      	adds	r3, r4, r3
 80072b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072bc:	464b      	mov	r3, r9
 80072be:	eb45 0303 	adc.w	r3, r5, r3
 80072c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80072c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072d6:	f04f 0200 	mov.w	r2, #0
 80072da:	f04f 0300 	mov.w	r3, #0
 80072de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80072e2:	4629      	mov	r1, r5
 80072e4:	008b      	lsls	r3, r1, #2
 80072e6:	4621      	mov	r1, r4
 80072e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072ec:	4621      	mov	r1, r4
 80072ee:	008a      	lsls	r2, r1, #2
 80072f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80072f4:	f7f8 ffbc 	bl	8000270 <__aeabi_uldivmod>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4b60      	ldr	r3, [pc, #384]	; (8007480 <UART_SetConfig+0x4e4>)
 80072fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007302:	095b      	lsrs	r3, r3, #5
 8007304:	011c      	lsls	r4, r3, #4
 8007306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800730a:	2200      	movs	r2, #0
 800730c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007310:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007314:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007318:	4642      	mov	r2, r8
 800731a:	464b      	mov	r3, r9
 800731c:	1891      	adds	r1, r2, r2
 800731e:	61b9      	str	r1, [r7, #24]
 8007320:	415b      	adcs	r3, r3
 8007322:	61fb      	str	r3, [r7, #28]
 8007324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007328:	4641      	mov	r1, r8
 800732a:	1851      	adds	r1, r2, r1
 800732c:	6139      	str	r1, [r7, #16]
 800732e:	4649      	mov	r1, r9
 8007330:	414b      	adcs	r3, r1
 8007332:	617b      	str	r3, [r7, #20]
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	f04f 0300 	mov.w	r3, #0
 800733c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007340:	4659      	mov	r1, fp
 8007342:	00cb      	lsls	r3, r1, #3
 8007344:	4651      	mov	r1, sl
 8007346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800734a:	4651      	mov	r1, sl
 800734c:	00ca      	lsls	r2, r1, #3
 800734e:	4610      	mov	r0, r2
 8007350:	4619      	mov	r1, r3
 8007352:	4603      	mov	r3, r0
 8007354:	4642      	mov	r2, r8
 8007356:	189b      	adds	r3, r3, r2
 8007358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800735c:	464b      	mov	r3, r9
 800735e:	460a      	mov	r2, r1
 8007360:	eb42 0303 	adc.w	r3, r2, r3
 8007364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	67bb      	str	r3, [r7, #120]	; 0x78
 8007372:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	f04f 0300 	mov.w	r3, #0
 800737c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007380:	4649      	mov	r1, r9
 8007382:	008b      	lsls	r3, r1, #2
 8007384:	4641      	mov	r1, r8
 8007386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800738a:	4641      	mov	r1, r8
 800738c:	008a      	lsls	r2, r1, #2
 800738e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007392:	f7f8 ff6d 	bl	8000270 <__aeabi_uldivmod>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	4b39      	ldr	r3, [pc, #228]	; (8007480 <UART_SetConfig+0x4e4>)
 800739c:	fba3 1302 	umull	r1, r3, r3, r2
 80073a0:	095b      	lsrs	r3, r3, #5
 80073a2:	2164      	movs	r1, #100	; 0x64
 80073a4:	fb01 f303 	mul.w	r3, r1, r3
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	3332      	adds	r3, #50	; 0x32
 80073ae:	4a34      	ldr	r2, [pc, #208]	; (8007480 <UART_SetConfig+0x4e4>)
 80073b0:	fba2 2303 	umull	r2, r3, r2, r3
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ba:	441c      	add	r4, r3
 80073bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073c0:	2200      	movs	r2, #0
 80073c2:	673b      	str	r3, [r7, #112]	; 0x70
 80073c4:	677a      	str	r2, [r7, #116]	; 0x74
 80073c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80073ca:	4642      	mov	r2, r8
 80073cc:	464b      	mov	r3, r9
 80073ce:	1891      	adds	r1, r2, r2
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	415b      	adcs	r3, r3
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073da:	4641      	mov	r1, r8
 80073dc:	1851      	adds	r1, r2, r1
 80073de:	6039      	str	r1, [r7, #0]
 80073e0:	4649      	mov	r1, r9
 80073e2:	414b      	adcs	r3, r1
 80073e4:	607b      	str	r3, [r7, #4]
 80073e6:	f04f 0200 	mov.w	r2, #0
 80073ea:	f04f 0300 	mov.w	r3, #0
 80073ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073f2:	4659      	mov	r1, fp
 80073f4:	00cb      	lsls	r3, r1, #3
 80073f6:	4651      	mov	r1, sl
 80073f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073fc:	4651      	mov	r1, sl
 80073fe:	00ca      	lsls	r2, r1, #3
 8007400:	4610      	mov	r0, r2
 8007402:	4619      	mov	r1, r3
 8007404:	4603      	mov	r3, r0
 8007406:	4642      	mov	r2, r8
 8007408:	189b      	adds	r3, r3, r2
 800740a:	66bb      	str	r3, [r7, #104]	; 0x68
 800740c:	464b      	mov	r3, r9
 800740e:	460a      	mov	r2, r1
 8007410:	eb42 0303 	adc.w	r3, r2, r3
 8007414:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	663b      	str	r3, [r7, #96]	; 0x60
 8007420:	667a      	str	r2, [r7, #100]	; 0x64
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	f04f 0300 	mov.w	r3, #0
 800742a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800742e:	4649      	mov	r1, r9
 8007430:	008b      	lsls	r3, r1, #2
 8007432:	4641      	mov	r1, r8
 8007434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007438:	4641      	mov	r1, r8
 800743a:	008a      	lsls	r2, r1, #2
 800743c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007440:	f7f8 ff16 	bl	8000270 <__aeabi_uldivmod>
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	4b0d      	ldr	r3, [pc, #52]	; (8007480 <UART_SetConfig+0x4e4>)
 800744a:	fba3 1302 	umull	r1, r3, r3, r2
 800744e:	095b      	lsrs	r3, r3, #5
 8007450:	2164      	movs	r1, #100	; 0x64
 8007452:	fb01 f303 	mul.w	r3, r1, r3
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	011b      	lsls	r3, r3, #4
 800745a:	3332      	adds	r3, #50	; 0x32
 800745c:	4a08      	ldr	r2, [pc, #32]	; (8007480 <UART_SetConfig+0x4e4>)
 800745e:	fba2 2303 	umull	r2, r3, r2, r3
 8007462:	095b      	lsrs	r3, r3, #5
 8007464:	f003 020f 	and.w	r2, r3, #15
 8007468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4422      	add	r2, r4
 8007470:	609a      	str	r2, [r3, #8]
}
 8007472:	bf00      	nop
 8007474:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007478:	46bd      	mov	sp, r7
 800747a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800747e:	bf00      	nop
 8007480:	51eb851f 	.word	0x51eb851f

08007484 <__NVIC_SetPriority>:
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	6039      	str	r1, [r7, #0]
 800748e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007494:	2b00      	cmp	r3, #0
 8007496:	db0a      	blt.n	80074ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	b2da      	uxtb	r2, r3
 800749c:	490c      	ldr	r1, [pc, #48]	; (80074d0 <__NVIC_SetPriority+0x4c>)
 800749e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074a2:	0112      	lsls	r2, r2, #4
 80074a4:	b2d2      	uxtb	r2, r2
 80074a6:	440b      	add	r3, r1
 80074a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80074ac:	e00a      	b.n	80074c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	4908      	ldr	r1, [pc, #32]	; (80074d4 <__NVIC_SetPriority+0x50>)
 80074b4:	79fb      	ldrb	r3, [r7, #7]
 80074b6:	f003 030f 	and.w	r3, r3, #15
 80074ba:	3b04      	subs	r3, #4
 80074bc:	0112      	lsls	r2, r2, #4
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	440b      	add	r3, r1
 80074c2:	761a      	strb	r2, [r3, #24]
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	e000e100 	.word	0xe000e100
 80074d4:	e000ed00 	.word	0xe000ed00

080074d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80074dc:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <SysTick_Handler+0x1c>)
 80074de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80074e0:	f001 fdaa 	bl	8009038 <xTaskGetSchedulerState>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d001      	beq.n	80074ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80074ea:	f002 fb95 	bl	8009c18 <xPortSysTickHandler>
  }
}
 80074ee:	bf00      	nop
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	e000e010 	.word	0xe000e010

080074f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80074fc:	2100      	movs	r1, #0
 80074fe:	f06f 0004 	mvn.w	r0, #4
 8007502:	f7ff ffbf 	bl	8007484 <__NVIC_SetPriority>
#endif
}
 8007506:	bf00      	nop
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007512:	f3ef 8305 	mrs	r3, IPSR
 8007516:	603b      	str	r3, [r7, #0]
  return(result);
 8007518:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800751e:	f06f 0305 	mvn.w	r3, #5
 8007522:	607b      	str	r3, [r7, #4]
 8007524:	e00c      	b.n	8007540 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007526:	4b0a      	ldr	r3, [pc, #40]	; (8007550 <osKernelInitialize+0x44>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d105      	bne.n	800753a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800752e:	4b08      	ldr	r3, [pc, #32]	; (8007550 <osKernelInitialize+0x44>)
 8007530:	2201      	movs	r2, #1
 8007532:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007534:	2300      	movs	r3, #0
 8007536:	607b      	str	r3, [r7, #4]
 8007538:	e002      	b.n	8007540 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800753a:	f04f 33ff 	mov.w	r3, #4294967295
 800753e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007540:	687b      	ldr	r3, [r7, #4]
}
 8007542:	4618      	mov	r0, r3
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	2000091c 	.word	0x2000091c

08007554 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800755a:	f3ef 8305 	mrs	r3, IPSR
 800755e:	603b      	str	r3, [r7, #0]
  return(result);
 8007560:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007566:	f06f 0305 	mvn.w	r3, #5
 800756a:	607b      	str	r3, [r7, #4]
 800756c:	e010      	b.n	8007590 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800756e:	4b0b      	ldr	r3, [pc, #44]	; (800759c <osKernelStart+0x48>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d109      	bne.n	800758a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007576:	f7ff ffbf 	bl	80074f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800757a:	4b08      	ldr	r3, [pc, #32]	; (800759c <osKernelStart+0x48>)
 800757c:	2202      	movs	r2, #2
 800757e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007580:	f001 f8ec 	bl	800875c <vTaskStartScheduler>
      stat = osOK;
 8007584:	2300      	movs	r3, #0
 8007586:	607b      	str	r3, [r7, #4]
 8007588:	e002      	b.n	8007590 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800758a:	f04f 33ff 	mov.w	r3, #4294967295
 800758e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007590:	687b      	ldr	r3, [r7, #4]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	2000091c 	.word	0x2000091c

080075a0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075a6:	f3ef 8305 	mrs	r3, IPSR
 80075aa:	603b      	str	r3, [r7, #0]
  return(result);
 80075ac:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80075b2:	f001 f9ff 	bl	80089b4 <xTaskGetTickCountFromISR>
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	e002      	b.n	80075c0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80075ba:	f001 f9eb 	bl	8008994 <xTaskGetTickCount>
 80075be:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80075c0:	687b      	ldr	r3, [r7, #4]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b08e      	sub	sp, #56	; 0x38
 80075ce:	af04      	add	r7, sp, #16
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075da:	f3ef 8305 	mrs	r3, IPSR
 80075de:	617b      	str	r3, [r7, #20]
  return(result);
 80075e0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d17e      	bne.n	80076e4 <osThreadNew+0x11a>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d07b      	beq.n	80076e4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80075ec:	2380      	movs	r3, #128	; 0x80
 80075ee:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80075f0:	2318      	movs	r3, #24
 80075f2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80075f4:	2300      	movs	r3, #0
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80075f8:	f04f 33ff 	mov.w	r3, #4294967295
 80075fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d045      	beq.n	8007690 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <osThreadNew+0x48>
        name = attr->name;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d008      	beq.n	8007638 <osThreadNew+0x6e>
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	2b38      	cmp	r3, #56	; 0x38
 800762a:	d805      	bhi.n	8007638 <osThreadNew+0x6e>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <osThreadNew+0x72>
        return (NULL);
 8007638:	2300      	movs	r3, #0
 800763a:	e054      	b.n	80076e6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	089b      	lsrs	r3, r3, #2
 800764a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00e      	beq.n	8007672 <osThreadNew+0xa8>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	2bbb      	cmp	r3, #187	; 0xbb
 800765a:	d90a      	bls.n	8007672 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007660:	2b00      	cmp	r3, #0
 8007662:	d006      	beq.n	8007672 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <osThreadNew+0xa8>
        mem = 1;
 800766c:	2301      	movs	r3, #1
 800766e:	61bb      	str	r3, [r7, #24]
 8007670:	e010      	b.n	8007694 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10c      	bne.n	8007694 <osThreadNew+0xca>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d108      	bne.n	8007694 <osThreadNew+0xca>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d104      	bne.n	8007694 <osThreadNew+0xca>
          mem = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	61bb      	str	r3, [r7, #24]
 800768e:	e001      	b.n	8007694 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d110      	bne.n	80076bc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076a2:	9202      	str	r2, [sp, #8]
 80076a4:	9301      	str	r3, [sp, #4]
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	6a3a      	ldr	r2, [r7, #32]
 80076ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 fe1d 	bl	80082f0 <xTaskCreateStatic>
 80076b6:	4603      	mov	r3, r0
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	e013      	b.n	80076e4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d110      	bne.n	80076e4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	f107 0310 	add.w	r3, r7, #16
 80076ca:	9301      	str	r3, [sp, #4]
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 fe68 	bl	80083aa <xTaskCreate>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d001      	beq.n	80076e4 <osThreadNew+0x11a>
            hTask = NULL;
 80076e0:	2300      	movs	r3, #0
 80076e2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076e4:	693b      	ldr	r3, [r7, #16]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3728      	adds	r7, #40	; 0x28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b086      	sub	sp, #24
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076f6:	f3ef 8305 	mrs	r3, IPSR
 80076fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80076fc:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <osDelayUntil+0x1c>
    stat = osErrorISR;
 8007702:	f06f 0305 	mvn.w	r3, #5
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	e019      	b.n	800773e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800770a:	2300      	movs	r3, #0
 800770c:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800770e:	f001 f941 	bl	8008994 <xTaskGetTickCount>
 8007712:	4603      	mov	r3, r0
 8007714:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d009      	beq.n	8007738 <osDelayUntil+0x4a>
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	db06      	blt.n	8007738 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800772a:	f107 0308 	add.w	r3, r7, #8
 800772e:	6939      	ldr	r1, [r7, #16]
 8007730:	4618      	mov	r0, r3
 8007732:	f000 ff95 	bl	8008660 <vTaskDelayUntil>
 8007736:	e002      	b.n	800773e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8007738:	f06f 0303 	mvn.w	r3, #3
 800773c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800773e:	697b      	ldr	r3, [r7, #20]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4a07      	ldr	r2, [pc, #28]	; (8007774 <vApplicationGetIdleTaskMemory+0x2c>)
 8007758:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	4a06      	ldr	r2, [pc, #24]	; (8007778 <vApplicationGetIdleTaskMemory+0x30>)
 800775e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2280      	movs	r2, #128	; 0x80
 8007764:	601a      	str	r2, [r3, #0]
}
 8007766:	bf00      	nop
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	20000920 	.word	0x20000920
 8007778:	200009dc 	.word	0x200009dc

0800777c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4a07      	ldr	r2, [pc, #28]	; (80077a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800778c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	4a06      	ldr	r2, [pc, #24]	; (80077ac <vApplicationGetTimerTaskMemory+0x30>)
 8007792:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800779a:	601a      	str	r2, [r3, #0]
}
 800779c:	bf00      	nop
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	20000bdc 	.word	0x20000bdc
 80077ac:	20000c98 	.word	0x20000c98

080077b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f103 0208 	add.w	r2, r3, #8
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f04f 32ff 	mov.w	r2, #4294967295
 80077c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f103 0208 	add.w	r2, r3, #8
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f103 0208 	add.w	r2, r3, #8
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800780a:	b480      	push	{r7}
 800780c:	b085      	sub	sp, #20
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	601a      	str	r2, [r3, #0]
}
 8007846:	bf00      	nop
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007852:	b480      	push	{r7}
 8007854:	b085      	sub	sp, #20
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007868:	d103      	bne.n	8007872 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	e00c      	b.n	800788c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3308      	adds	r3, #8
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	e002      	b.n	8007880 <vListInsert+0x2e>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	429a      	cmp	r2, r3
 800788a:	d2f6      	bcs.n	800787a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	1c5a      	adds	r2, r3, #1
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	601a      	str	r2, [r3, #0]
}
 80078b8:	bf00      	nop
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6892      	ldr	r2, [r2, #8]
 80078da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	6852      	ldr	r2, [r2, #4]
 80078e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d103      	bne.n	80078f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689a      	ldr	r2, [r3, #8]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	1e5a      	subs	r2, r3, #1
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10a      	bne.n	8007942 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800793e:	bf00      	nop
 8007940:	e7fe      	b.n	8007940 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007942:	f002 f8d7 	bl	8009af4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794e:	68f9      	ldr	r1, [r7, #12]
 8007950:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007952:	fb01 f303 	mul.w	r3, r1, r3
 8007956:	441a      	add	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007972:	3b01      	subs	r3, #1
 8007974:	68f9      	ldr	r1, [r7, #12]
 8007976:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007978:	fb01 f303 	mul.w	r3, r1, r3
 800797c:	441a      	add	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	22ff      	movs	r2, #255	; 0xff
 8007986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	22ff      	movs	r2, #255	; 0xff
 800798e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d114      	bne.n	80079c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d01a      	beq.n	80079d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3310      	adds	r3, #16
 80079a4:	4618      	mov	r0, r3
 80079a6:	f001 f985 	bl	8008cb4 <xTaskRemoveFromEventList>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d012      	beq.n	80079d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079b0:	4b0c      	ldr	r3, [pc, #48]	; (80079e4 <xQueueGenericReset+0xcc>)
 80079b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	e009      	b.n	80079d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3310      	adds	r3, #16
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff fef2 	bl	80077b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	3324      	adds	r3, #36	; 0x24
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7ff feed 	bl	80077b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079d6:	f002 f8bd 	bl	8009b54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079da:	2301      	movs	r3, #1
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	e000ed04 	.word	0xe000ed04

080079e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08e      	sub	sp, #56	; 0x38
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10a      	bne.n	8007a2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a2a:	bf00      	nop
 8007a2c:	e7fe      	b.n	8007a2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <xQueueGenericCreateStatic+0x52>
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <xQueueGenericCreateStatic+0x56>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e000      	b.n	8007a40 <xQueueGenericCreateStatic+0x58>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10a      	bne.n	8007a5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	623b      	str	r3, [r7, #32]
}
 8007a56:	bf00      	nop
 8007a58:	e7fe      	b.n	8007a58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d102      	bne.n	8007a66 <xQueueGenericCreateStatic+0x7e>
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <xQueueGenericCreateStatic+0x82>
 8007a66:	2301      	movs	r3, #1
 8007a68:	e000      	b.n	8007a6c <xQueueGenericCreateStatic+0x84>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10a      	bne.n	8007a86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	61fb      	str	r3, [r7, #28]
}
 8007a82:	bf00      	nop
 8007a84:	e7fe      	b.n	8007a84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a86:	2350      	movs	r3, #80	; 0x50
 8007a88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b50      	cmp	r3, #80	; 0x50
 8007a8e:	d00a      	beq.n	8007aa6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	61bb      	str	r3, [r7, #24]
}
 8007aa2:	bf00      	nop
 8007aa4:	e7fe      	b.n	8007aa4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007aa6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00d      	beq.n	8007ace <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007aba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	68b9      	ldr	r1, [r7, #8]
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 f805 	bl	8007ad8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3730      	adds	r7, #48	; 0x30
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d103      	bne.n	8007af4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	e002      	b.n	8007afa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b06:	2101      	movs	r1, #1
 8007b08:	69b8      	ldr	r0, [r7, #24]
 8007b0a:	f7ff ff05 	bl	8007918 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	78fa      	ldrb	r2, [r7, #3]
 8007b12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b16:	bf00      	nop
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08e      	sub	sp, #56	; 0x38
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10a      	bne.n	8007b52 <xQueueGenericSend+0x32>
	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b4e:	bf00      	nop
 8007b50:	e7fe      	b.n	8007b50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d103      	bne.n	8007b60 <xQueueGenericSend+0x40>
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <xQueueGenericSend+0x44>
 8007b60:	2301      	movs	r3, #1
 8007b62:	e000      	b.n	8007b66 <xQueueGenericSend+0x46>
 8007b64:	2300      	movs	r3, #0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10a      	bne.n	8007b80 <xQueueGenericSend+0x60>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b7c:	bf00      	nop
 8007b7e:	e7fe      	b.n	8007b7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d103      	bne.n	8007b8e <xQueueGenericSend+0x6e>
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d101      	bne.n	8007b92 <xQueueGenericSend+0x72>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <xQueueGenericSend+0x74>
 8007b92:	2300      	movs	r3, #0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10a      	bne.n	8007bae <xQueueGenericSend+0x8e>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	623b      	str	r3, [r7, #32]
}
 8007baa:	bf00      	nop
 8007bac:	e7fe      	b.n	8007bac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bae:	f001 fa43 	bl	8009038 <xTaskGetSchedulerState>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d102      	bne.n	8007bbe <xQueueGenericSend+0x9e>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <xQueueGenericSend+0xa2>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e000      	b.n	8007bc4 <xQueueGenericSend+0xa4>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10a      	bne.n	8007bde <xQueueGenericSend+0xbe>
	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	61fb      	str	r3, [r7, #28]
}
 8007bda:	bf00      	nop
 8007bdc:	e7fe      	b.n	8007bdc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bde:	f001 ff89 	bl	8009af4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d302      	bcc.n	8007bf4 <xQueueGenericSend+0xd4>
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d129      	bne.n	8007c48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	68b9      	ldr	r1, [r7, #8]
 8007bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bfa:	f000 fa0b 	bl	8008014 <prvCopyDataToQueue>
 8007bfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d010      	beq.n	8007c2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0a:	3324      	adds	r3, #36	; 0x24
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f001 f851 	bl	8008cb4 <xTaskRemoveFromEventList>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d013      	beq.n	8007c40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c18:	4b3f      	ldr	r3, [pc, #252]	; (8007d18 <xQueueGenericSend+0x1f8>)
 8007c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	e00a      	b.n	8007c40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d007      	beq.n	8007c40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c30:	4b39      	ldr	r3, [pc, #228]	; (8007d18 <xQueueGenericSend+0x1f8>)
 8007c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007c40:	f001 ff88 	bl	8009b54 <vPortExitCritical>
				return pdPASS;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e063      	b.n	8007d10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d103      	bne.n	8007c56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c4e:	f001 ff81 	bl	8009b54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c52:	2300      	movs	r3, #0
 8007c54:	e05c      	b.n	8007d10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d106      	bne.n	8007c6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c5c:	f107 0314 	add.w	r3, r7, #20
 8007c60:	4618      	mov	r0, r3
 8007c62:	f001 f88b 	bl	8008d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c66:	2301      	movs	r3, #1
 8007c68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c6a:	f001 ff73 	bl	8009b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c6e:	f000 fde5 	bl	800883c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c72:	f001 ff3f 	bl	8009af4 <vPortEnterCritical>
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c7c:	b25b      	sxtb	r3, r3
 8007c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c82:	d103      	bne.n	8007c8c <xQueueGenericSend+0x16c>
 8007c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c92:	b25b      	sxtb	r3, r3
 8007c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c98:	d103      	bne.n	8007ca2 <xQueueGenericSend+0x182>
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ca2:	f001 ff57 	bl	8009b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ca6:	1d3a      	adds	r2, r7, #4
 8007ca8:	f107 0314 	add.w	r3, r7, #20
 8007cac:	4611      	mov	r1, r2
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f001 f87a 	bl	8008da8 <xTaskCheckForTimeOut>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d124      	bne.n	8007d04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007cba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cbc:	f000 faa2 	bl	8008204 <prvIsQueueFull>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d018      	beq.n	8007cf8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	3310      	adds	r3, #16
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	4611      	mov	r1, r2
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 ffa0 	bl	8008c14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cd6:	f000 fa2d 	bl	8008134 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007cda:	f000 fdbd 	bl	8008858 <xTaskResumeAll>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f47f af7c 	bne.w	8007bde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007ce6:	4b0c      	ldr	r3, [pc, #48]	; (8007d18 <xQueueGenericSend+0x1f8>)
 8007ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	e772      	b.n	8007bde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cfa:	f000 fa1b 	bl	8008134 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cfe:	f000 fdab 	bl	8008858 <xTaskResumeAll>
 8007d02:	e76c      	b.n	8007bde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d06:	f000 fa15 	bl	8008134 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d0a:	f000 fda5 	bl	8008858 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3738      	adds	r7, #56	; 0x38
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	e000ed04 	.word	0xe000ed04

08007d1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b090      	sub	sp, #64	; 0x40
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10a      	bne.n	8007d4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d46:	bf00      	nop
 8007d48:	e7fe      	b.n	8007d48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d103      	bne.n	8007d58 <xQueueGenericSendFromISR+0x3c>
 8007d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <xQueueGenericSendFromISR+0x40>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e000      	b.n	8007d5e <xQueueGenericSendFromISR+0x42>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10a      	bne.n	8007d78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d74:	bf00      	nop
 8007d76:	e7fe      	b.n	8007d76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d103      	bne.n	8007d86 <xQueueGenericSendFromISR+0x6a>
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d101      	bne.n	8007d8a <xQueueGenericSendFromISR+0x6e>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e000      	b.n	8007d8c <xQueueGenericSendFromISR+0x70>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10a      	bne.n	8007da6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	623b      	str	r3, [r7, #32]
}
 8007da2:	bf00      	nop
 8007da4:	e7fe      	b.n	8007da4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007da6:	f001 ff87 	bl	8009cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007daa:	f3ef 8211 	mrs	r2, BASEPRI
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	61fa      	str	r2, [r7, #28]
 8007dc0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007dc2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007dc4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d302      	bcc.n	8007dd8 <xQueueGenericSendFromISR+0xbc>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d12f      	bne.n	8007e38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	68b9      	ldr	r1, [r7, #8]
 8007dec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007dee:	f000 f911 	bl	8008014 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007df2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfa:	d112      	bne.n	8007e22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d016      	beq.n	8007e32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e06:	3324      	adds	r3, #36	; 0x24
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 ff53 	bl	8008cb4 <xTaskRemoveFromEventList>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00e      	beq.n	8007e32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00b      	beq.n	8007e32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	e007      	b.n	8007e32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007e26:	3301      	adds	r3, #1
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	b25a      	sxtb	r2, r3
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007e32:	2301      	movs	r3, #1
 8007e34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007e36:	e001      	b.n	8007e3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e3e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3740      	adds	r7, #64	; 0x40
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
	...

08007e54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b08c      	sub	sp, #48	; 0x30
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e60:	2300      	movs	r3, #0
 8007e62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10a      	bne.n	8007e84 <xQueueReceive+0x30>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	623b      	str	r3, [r7, #32]
}
 8007e80:	bf00      	nop
 8007e82:	e7fe      	b.n	8007e82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d103      	bne.n	8007e92 <xQueueReceive+0x3e>
 8007e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <xQueueReceive+0x42>
 8007e92:	2301      	movs	r3, #1
 8007e94:	e000      	b.n	8007e98 <xQueueReceive+0x44>
 8007e96:	2300      	movs	r3, #0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10a      	bne.n	8007eb2 <xQueueReceive+0x5e>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	61fb      	str	r3, [r7, #28]
}
 8007eae:	bf00      	nop
 8007eb0:	e7fe      	b.n	8007eb0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007eb2:	f001 f8c1 	bl	8009038 <xTaskGetSchedulerState>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d102      	bne.n	8007ec2 <xQueueReceive+0x6e>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <xQueueReceive+0x72>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e000      	b.n	8007ec8 <xQueueReceive+0x74>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10a      	bne.n	8007ee2 <xQueueReceive+0x8e>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	61bb      	str	r3, [r7, #24]
}
 8007ede:	bf00      	nop
 8007ee0:	e7fe      	b.n	8007ee0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ee2:	f001 fe07 	bl	8009af4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d01f      	beq.n	8007f32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef6:	f000 f8f7 	bl	80080e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	1e5a      	subs	r2, r3, #1
 8007efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00f      	beq.n	8007f2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0c:	3310      	adds	r3, #16
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 fed0 	bl	8008cb4 <xTaskRemoveFromEventList>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d007      	beq.n	8007f2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f1a:	4b3d      	ldr	r3, [pc, #244]	; (8008010 <xQueueReceive+0x1bc>)
 8007f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f2a:	f001 fe13 	bl	8009b54 <vPortExitCritical>
				return pdPASS;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e069      	b.n	8008006 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d103      	bne.n	8007f40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f38:	f001 fe0c 	bl	8009b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e062      	b.n	8008006 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d106      	bne.n	8007f54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f46:	f107 0310 	add.w	r3, r7, #16
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 ff16 	bl	8008d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f50:	2301      	movs	r3, #1
 8007f52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f54:	f001 fdfe 	bl	8009b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f58:	f000 fc70 	bl	800883c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f5c:	f001 fdca 	bl	8009af4 <vPortEnterCritical>
 8007f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f66:	b25b      	sxtb	r3, r3
 8007f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6c:	d103      	bne.n	8007f76 <xQueueReceive+0x122>
 8007f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f7c:	b25b      	sxtb	r3, r3
 8007f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f82:	d103      	bne.n	8007f8c <xQueueReceive+0x138>
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f8c:	f001 fde2 	bl	8009b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f90:	1d3a      	adds	r2, r7, #4
 8007f92:	f107 0310 	add.w	r3, r7, #16
 8007f96:	4611      	mov	r1, r2
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 ff05 	bl	8008da8 <xTaskCheckForTimeOut>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d123      	bne.n	8007fec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fa6:	f000 f917 	bl	80081d8 <prvIsQueueEmpty>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d017      	beq.n	8007fe0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb2:	3324      	adds	r3, #36	; 0x24
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 fe2b 	bl	8008c14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fc0:	f000 f8b8 	bl	8008134 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fc4:	f000 fc48 	bl	8008858 <xTaskResumeAll>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d189      	bne.n	8007ee2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007fce:	4b10      	ldr	r3, [pc, #64]	; (8008010 <xQueueReceive+0x1bc>)
 8007fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	e780      	b.n	8007ee2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fe2:	f000 f8a7 	bl	8008134 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fe6:	f000 fc37 	bl	8008858 <xTaskResumeAll>
 8007fea:	e77a      	b.n	8007ee2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fee:	f000 f8a1 	bl	8008134 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ff2:	f000 fc31 	bl	8008858 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ff8:	f000 f8ee 	bl	80081d8 <prvIsQueueEmpty>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f43f af6f 	beq.w	8007ee2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008004:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008006:	4618      	mov	r0, r3
 8008008:	3730      	adds	r7, #48	; 0x30
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	e000ed04 	.word	0xe000ed04

08008014 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008020:	2300      	movs	r3, #0
 8008022:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008028:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10d      	bne.n	800804e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d14d      	bne.n	80080d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	4618      	mov	r0, r3
 8008040:	f001 f818 	bl	8009074 <xTaskPriorityDisinherit>
 8008044:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	609a      	str	r2, [r3, #8]
 800804c:	e043      	b.n	80080d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d119      	bne.n	8008088 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6858      	ldr	r0, [r3, #4]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805c:	461a      	mov	r2, r3
 800805e:	68b9      	ldr	r1, [r7, #8]
 8008060:	f002 f977 	bl	800a352 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806c:	441a      	add	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	429a      	cmp	r2, r3
 800807c:	d32b      	bcc.n	80080d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	605a      	str	r2, [r3, #4]
 8008086:	e026      	b.n	80080d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	68d8      	ldr	r0, [r3, #12]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008090:	461a      	mov	r2, r3
 8008092:	68b9      	ldr	r1, [r7, #8]
 8008094:	f002 f95d 	bl	800a352 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a0:	425b      	negs	r3, r3
 80080a2:	441a      	add	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	68da      	ldr	r2, [r3, #12]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d207      	bcs.n	80080c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	689a      	ldr	r2, [r3, #8]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080bc:	425b      	negs	r3, r3
 80080be:	441a      	add	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d105      	bne.n	80080d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80080de:	697b      	ldr	r3, [r7, #20]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3718      	adds	r7, #24
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d018      	beq.n	800812c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68da      	ldr	r2, [r3, #12]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	441a      	add	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	429a      	cmp	r2, r3
 8008112:	d303      	bcc.n	800811c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68d9      	ldr	r1, [r3, #12]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008124:	461a      	mov	r2, r3
 8008126:	6838      	ldr	r0, [r7, #0]
 8008128:	f002 f913 	bl	800a352 <memcpy>
	}
}
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800813c:	f001 fcda 	bl	8009af4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008146:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008148:	e011      	b.n	800816e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	2b00      	cmp	r3, #0
 8008150:	d012      	beq.n	8008178 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3324      	adds	r3, #36	; 0x24
 8008156:	4618      	mov	r0, r3
 8008158:	f000 fdac 	bl	8008cb4 <xTaskRemoveFromEventList>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008162:	f000 fe83 	bl	8008e6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	3b01      	subs	r3, #1
 800816a:	b2db      	uxtb	r3, r3
 800816c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800816e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008172:	2b00      	cmp	r3, #0
 8008174:	dce9      	bgt.n	800814a <prvUnlockQueue+0x16>
 8008176:	e000      	b.n	800817a <prvUnlockQueue+0x46>
					break;
 8008178:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	22ff      	movs	r2, #255	; 0xff
 800817e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008182:	f001 fce7 	bl	8009b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008186:	f001 fcb5 	bl	8009af4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008190:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008192:	e011      	b.n	80081b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d012      	beq.n	80081c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3310      	adds	r3, #16
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 fd87 	bl	8008cb4 <xTaskRemoveFromEventList>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081ac:	f000 fe5e 	bl	8008e6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	dce9      	bgt.n	8008194 <prvUnlockQueue+0x60>
 80081c0:	e000      	b.n	80081c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80081c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	22ff      	movs	r2, #255	; 0xff
 80081c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80081cc:	f001 fcc2 	bl	8009b54 <vPortExitCritical>
}
 80081d0:	bf00      	nop
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081e0:	f001 fc88 	bl	8009af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d102      	bne.n	80081f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80081ec:	2301      	movs	r3, #1
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	e001      	b.n	80081f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80081f2:	2300      	movs	r3, #0
 80081f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081f6:	f001 fcad 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 80081fa:	68fb      	ldr	r3, [r7, #12]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800820c:	f001 fc72 	bl	8009af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008218:	429a      	cmp	r2, r3
 800821a:	d102      	bne.n	8008222 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800821c:	2301      	movs	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	e001      	b.n	8008226 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008222:	2300      	movs	r3, #0
 8008224:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008226:	f001 fc95 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 800822a:	68fb      	ldr	r3, [r7, #12]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800823e:	2300      	movs	r3, #0
 8008240:	60fb      	str	r3, [r7, #12]
 8008242:	e014      	b.n	800826e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008244:	4a0f      	ldr	r2, [pc, #60]	; (8008284 <vQueueAddToRegistry+0x50>)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10b      	bne.n	8008268 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008250:	490c      	ldr	r1, [pc, #48]	; (8008284 <vQueueAddToRegistry+0x50>)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800825a:	4a0a      	ldr	r2, [pc, #40]	; (8008284 <vQueueAddToRegistry+0x50>)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	00db      	lsls	r3, r3, #3
 8008260:	4413      	add	r3, r2
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008266:	e006      	b.n	8008276 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	3301      	adds	r3, #1
 800826c:	60fb      	str	r3, [r7, #12]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2b07      	cmp	r3, #7
 8008272:	d9e7      	bls.n	8008244 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008274:	bf00      	nop
 8008276:	bf00      	nop
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	20001098 	.word	0x20001098

08008288 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008298:	f001 fc2c 	bl	8009af4 <vPortEnterCritical>
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082a2:	b25b      	sxtb	r3, r3
 80082a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a8:	d103      	bne.n	80082b2 <vQueueWaitForMessageRestricted+0x2a>
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082b8:	b25b      	sxtb	r3, r3
 80082ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082be:	d103      	bne.n	80082c8 <vQueueWaitForMessageRestricted+0x40>
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082c8:	f001 fc44 	bl	8009b54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d106      	bne.n	80082e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	3324      	adds	r3, #36	; 0x24
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	68b9      	ldr	r1, [r7, #8]
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 fcbd 	bl	8008c5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80082e2:	6978      	ldr	r0, [r7, #20]
 80082e4:	f7ff ff26 	bl	8008134 <prvUnlockQueue>
	}
 80082e8:	bf00      	nop
 80082ea:	3718      	adds	r7, #24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08e      	sub	sp, #56	; 0x38
 80082f4:	af04      	add	r7, sp, #16
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
 80082fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80082fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10a      	bne.n	800831a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	623b      	str	r3, [r7, #32]
}
 8008316:	bf00      	nop
 8008318:	e7fe      	b.n	8008318 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10a      	bne.n	8008336 <xTaskCreateStatic+0x46>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	61fb      	str	r3, [r7, #28]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008336:	23bc      	movs	r3, #188	; 0xbc
 8008338:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2bbc      	cmp	r3, #188	; 0xbc
 800833e:	d00a      	beq.n	8008356 <xTaskCreateStatic+0x66>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	61bb      	str	r3, [r7, #24]
}
 8008352:	bf00      	nop
 8008354:	e7fe      	b.n	8008354 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008356:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835a:	2b00      	cmp	r3, #0
 800835c:	d01e      	beq.n	800839c <xTaskCreateStatic+0xac>
 800835e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008360:	2b00      	cmp	r3, #0
 8008362:	d01b      	beq.n	800839c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800836c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	2202      	movs	r2, #2
 8008372:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008376:	2300      	movs	r3, #0
 8008378:	9303      	str	r3, [sp, #12]
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	9302      	str	r3, [sp, #8]
 800837e:	f107 0314 	add.w	r3, r7, #20
 8008382:	9301      	str	r3, [sp, #4]
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	68b9      	ldr	r1, [r7, #8]
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 f850 	bl	8008434 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008394:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008396:	f000 f8f3 	bl	8008580 <prvAddNewTaskToReadyList>
 800839a:	e001      	b.n	80083a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800839c:	2300      	movs	r3, #0
 800839e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80083a0:	697b      	ldr	r3, [r7, #20]
	}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3728      	adds	r7, #40	; 0x28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b08c      	sub	sp, #48	; 0x30
 80083ae:	af04      	add	r7, sp, #16
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	603b      	str	r3, [r7, #0]
 80083b6:	4613      	mov	r3, r2
 80083b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80083ba:	88fb      	ldrh	r3, [r7, #6]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4618      	mov	r0, r3
 80083c0:	f001 fcba 	bl	8009d38 <pvPortMalloc>
 80083c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00e      	beq.n	80083ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80083cc:	20bc      	movs	r0, #188	; 0xbc
 80083ce:	f001 fcb3 	bl	8009d38 <pvPortMalloc>
 80083d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d003      	beq.n	80083e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	631a      	str	r2, [r3, #48]	; 0x30
 80083e0:	e005      	b.n	80083ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80083e2:	6978      	ldr	r0, [r7, #20]
 80083e4:	f001 fd74 	bl	8009ed0 <vPortFree>
 80083e8:	e001      	b.n	80083ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80083ea:	2300      	movs	r3, #0
 80083ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d017      	beq.n	8008424 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083fc:	88fa      	ldrh	r2, [r7, #6]
 80083fe:	2300      	movs	r3, #0
 8008400:	9303      	str	r3, [sp, #12]
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	9302      	str	r3, [sp, #8]
 8008406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008408:	9301      	str	r3, [sp, #4]
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	68b9      	ldr	r1, [r7, #8]
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f000 f80e 	bl	8008434 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008418:	69f8      	ldr	r0, [r7, #28]
 800841a:	f000 f8b1 	bl	8008580 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800841e:	2301      	movs	r3, #1
 8008420:	61bb      	str	r3, [r7, #24]
 8008422:	e002      	b.n	800842a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008424:	f04f 33ff 	mov.w	r3, #4294967295
 8008428:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800842a:	69bb      	ldr	r3, [r7, #24]
	}
 800842c:	4618      	mov	r0, r3
 800842e:	3720      	adds	r7, #32
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b088      	sub	sp, #32
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008444:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	461a      	mov	r2, r3
 800844c:	21a5      	movs	r1, #165	; 0xa5
 800844e:	f001 ff8e 	bl	800a36e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800845c:	3b01      	subs	r3, #1
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	f023 0307 	bic.w	r3, r3, #7
 800846a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	f003 0307 	and.w	r3, r3, #7
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00a      	beq.n	800848c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	617b      	str	r3, [r7, #20]
}
 8008488:	bf00      	nop
 800848a:	e7fe      	b.n	800848a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d01f      	beq.n	80084d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008492:	2300      	movs	r3, #0
 8008494:	61fb      	str	r3, [r7, #28]
 8008496:	e012      	b.n	80084be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	4413      	add	r3, r2
 800849e:	7819      	ldrb	r1, [r3, #0]
 80084a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	4413      	add	r3, r2
 80084a6:	3334      	adds	r3, #52	; 0x34
 80084a8:	460a      	mov	r2, r1
 80084aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	4413      	add	r3, r2
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d006      	beq.n	80084c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	3301      	adds	r3, #1
 80084bc:	61fb      	str	r3, [r7, #28]
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	2b0f      	cmp	r3, #15
 80084c2:	d9e9      	bls.n	8008498 <prvInitialiseNewTask+0x64>
 80084c4:	e000      	b.n	80084c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80084c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084d0:	e003      	b.n	80084da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084dc:	2b37      	cmp	r3, #55	; 0x37
 80084de:	d901      	bls.n	80084e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084e0:	2337      	movs	r3, #55	; 0x37
 80084e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80084f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f2:	2200      	movs	r2, #0
 80084f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	3304      	adds	r3, #4
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7ff f978 	bl	80077f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008502:	3318      	adds	r3, #24
 8008504:	4618      	mov	r0, r3
 8008506:	f7ff f973 	bl	80077f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800850e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800851e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008522:	2200      	movs	r2, #0
 8008524:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852a:	2200      	movs	r2, #0
 800852c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	3354      	adds	r3, #84	; 0x54
 8008534:	2260      	movs	r2, #96	; 0x60
 8008536:	2100      	movs	r1, #0
 8008538:	4618      	mov	r0, r3
 800853a:	f001 ff18 	bl	800a36e <memset>
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	4a0c      	ldr	r2, [pc, #48]	; (8008574 <prvInitialiseNewTask+0x140>)
 8008542:	659a      	str	r2, [r3, #88]	; 0x58
 8008544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008546:	4a0c      	ldr	r2, [pc, #48]	; (8008578 <prvInitialiseNewTask+0x144>)
 8008548:	65da      	str	r2, [r3, #92]	; 0x5c
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	4a0b      	ldr	r2, [pc, #44]	; (800857c <prvInitialiseNewTask+0x148>)
 800854e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	68f9      	ldr	r1, [r7, #12]
 8008554:	69b8      	ldr	r0, [r7, #24]
 8008556:	f001 f99d 	bl	8009894 <pxPortInitialiseStack>
 800855a:	4602      	mov	r2, r0
 800855c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008562:	2b00      	cmp	r3, #0
 8008564:	d002      	beq.n	800856c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800856a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800856c:	bf00      	nop
 800856e:	3720      	adds	r7, #32
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	0800b534 	.word	0x0800b534
 8008578:	0800b554 	.word	0x0800b554
 800857c:	0800b514 	.word	0x0800b514

08008580 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008588:	f001 fab4 	bl	8009af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800858c:	4b2d      	ldr	r3, [pc, #180]	; (8008644 <prvAddNewTaskToReadyList+0xc4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3301      	adds	r3, #1
 8008592:	4a2c      	ldr	r2, [pc, #176]	; (8008644 <prvAddNewTaskToReadyList+0xc4>)
 8008594:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008596:	4b2c      	ldr	r3, [pc, #176]	; (8008648 <prvAddNewTaskToReadyList+0xc8>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d109      	bne.n	80085b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800859e:	4a2a      	ldr	r2, [pc, #168]	; (8008648 <prvAddNewTaskToReadyList+0xc8>)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085a4:	4b27      	ldr	r3, [pc, #156]	; (8008644 <prvAddNewTaskToReadyList+0xc4>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d110      	bne.n	80085ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085ac:	f000 fc82 	bl	8008eb4 <prvInitialiseTaskLists>
 80085b0:	e00d      	b.n	80085ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085b2:	4b26      	ldr	r3, [pc, #152]	; (800864c <prvAddNewTaskToReadyList+0xcc>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d109      	bne.n	80085ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085ba:	4b23      	ldr	r3, [pc, #140]	; (8008648 <prvAddNewTaskToReadyList+0xc8>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d802      	bhi.n	80085ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085c8:	4a1f      	ldr	r2, [pc, #124]	; (8008648 <prvAddNewTaskToReadyList+0xc8>)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085ce:	4b20      	ldr	r3, [pc, #128]	; (8008650 <prvAddNewTaskToReadyList+0xd0>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3301      	adds	r3, #1
 80085d4:	4a1e      	ldr	r2, [pc, #120]	; (8008650 <prvAddNewTaskToReadyList+0xd0>)
 80085d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80085d8:	4b1d      	ldr	r3, [pc, #116]	; (8008650 <prvAddNewTaskToReadyList+0xd0>)
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e4:	4b1b      	ldr	r3, [pc, #108]	; (8008654 <prvAddNewTaskToReadyList+0xd4>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d903      	bls.n	80085f4 <prvAddNewTaskToReadyList+0x74>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f0:	4a18      	ldr	r2, [pc, #96]	; (8008654 <prvAddNewTaskToReadyList+0xd4>)
 80085f2:	6013      	str	r3, [r2, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4a15      	ldr	r2, [pc, #84]	; (8008658 <prvAddNewTaskToReadyList+0xd8>)
 8008602:	441a      	add	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	3304      	adds	r3, #4
 8008608:	4619      	mov	r1, r3
 800860a:	4610      	mov	r0, r2
 800860c:	f7ff f8fd 	bl	800780a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008610:	f001 faa0 	bl	8009b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008614:	4b0d      	ldr	r3, [pc, #52]	; (800864c <prvAddNewTaskToReadyList+0xcc>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00e      	beq.n	800863a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800861c:	4b0a      	ldr	r3, [pc, #40]	; (8008648 <prvAddNewTaskToReadyList+0xc8>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008626:	429a      	cmp	r2, r3
 8008628:	d207      	bcs.n	800863a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800862a:	4b0c      	ldr	r3, [pc, #48]	; (800865c <prvAddNewTaskToReadyList+0xdc>)
 800862c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008630:	601a      	str	r2, [r3, #0]
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800863a:	bf00      	nop
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	200015ac 	.word	0x200015ac
 8008648:	200010d8 	.word	0x200010d8
 800864c:	200015b8 	.word	0x200015b8
 8008650:	200015c8 	.word	0x200015c8
 8008654:	200015b4 	.word	0x200015b4
 8008658:	200010dc 	.word	0x200010dc
 800865c:	e000ed04 	.word	0xe000ed04

08008660 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08a      	sub	sp, #40	; 0x28
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800866a:	2300      	movs	r3, #0
 800866c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10a      	bne.n	800868a <vTaskDelayUntil+0x2a>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	617b      	str	r3, [r7, #20]
}
 8008686:	bf00      	nop
 8008688:	e7fe      	b.n	8008688 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10a      	bne.n	80086a6 <vTaskDelayUntil+0x46>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	613b      	str	r3, [r7, #16]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80086a6:	4b2a      	ldr	r3, [pc, #168]	; (8008750 <vTaskDelayUntil+0xf0>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00a      	beq.n	80086c4 <vTaskDelayUntil+0x64>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	60fb      	str	r3, [r7, #12]
}
 80086c0:	bf00      	nop
 80086c2:	e7fe      	b.n	80086c2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80086c4:	f000 f8ba 	bl	800883c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80086c8:	4b22      	ldr	r3, [pc, #136]	; (8008754 <vTaskDelayUntil+0xf4>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	4413      	add	r3, r2
 80086d6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6a3a      	ldr	r2, [r7, #32]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d20b      	bcs.n	80086fa <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	69fa      	ldr	r2, [r7, #28]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d211      	bcs.n	8008710 <vTaskDelayUntil+0xb0>
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d90d      	bls.n	8008710 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80086f4:	2301      	movs	r3, #1
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24
 80086f8:	e00a      	b.n	8008710 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	69fa      	ldr	r2, [r7, #28]
 8008700:	429a      	cmp	r2, r3
 8008702:	d303      	bcc.n	800870c <vTaskDelayUntil+0xac>
 8008704:	69fa      	ldr	r2, [r7, #28]
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	429a      	cmp	r2, r3
 800870a:	d901      	bls.n	8008710 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800870c:	2301      	movs	r3, #1
 800870e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	69fa      	ldr	r2, [r7, #28]
 8008714:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	2b00      	cmp	r3, #0
 800871a:	d006      	beq.n	800872a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800871c:	69fa      	ldr	r2, [r7, #28]
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2100      	movs	r1, #0
 8008724:	4618      	mov	r0, r3
 8008726:	f000 fd13 	bl	8009150 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800872a:	f000 f895 	bl	8008858 <xTaskResumeAll>
 800872e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d107      	bne.n	8008746 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008736:	4b08      	ldr	r3, [pc, #32]	; (8008758 <vTaskDelayUntil+0xf8>)
 8008738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008746:	bf00      	nop
 8008748:	3728      	adds	r7, #40	; 0x28
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	200015d4 	.word	0x200015d4
 8008754:	200015b0 	.word	0x200015b0
 8008758:	e000ed04 	.word	0xe000ed04

0800875c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08a      	sub	sp, #40	; 0x28
 8008760:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008762:	2300      	movs	r3, #0
 8008764:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008766:	2300      	movs	r3, #0
 8008768:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800876a:	463a      	mov	r2, r7
 800876c:	1d39      	adds	r1, r7, #4
 800876e:	f107 0308 	add.w	r3, r7, #8
 8008772:	4618      	mov	r0, r3
 8008774:	f7fe ffe8 	bl	8007748 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	9202      	str	r2, [sp, #8]
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	2300      	movs	r3, #0
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	2300      	movs	r3, #0
 8008788:	460a      	mov	r2, r1
 800878a:	4924      	ldr	r1, [pc, #144]	; (800881c <vTaskStartScheduler+0xc0>)
 800878c:	4824      	ldr	r0, [pc, #144]	; (8008820 <vTaskStartScheduler+0xc4>)
 800878e:	f7ff fdaf 	bl	80082f0 <xTaskCreateStatic>
 8008792:	4603      	mov	r3, r0
 8008794:	4a23      	ldr	r2, [pc, #140]	; (8008824 <vTaskStartScheduler+0xc8>)
 8008796:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008798:	4b22      	ldr	r3, [pc, #136]	; (8008824 <vTaskStartScheduler+0xc8>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087a0:	2301      	movs	r3, #1
 80087a2:	617b      	str	r3, [r7, #20]
 80087a4:	e001      	b.n	80087aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d102      	bne.n	80087b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80087b0:	f000 fd22 	bl	80091f8 <xTimerCreateTimerTask>
 80087b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d11b      	bne.n	80087f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	613b      	str	r3, [r7, #16]
}
 80087ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087d0:	4b15      	ldr	r3, [pc, #84]	; (8008828 <vTaskStartScheduler+0xcc>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3354      	adds	r3, #84	; 0x54
 80087d6:	4a15      	ldr	r2, [pc, #84]	; (800882c <vTaskStartScheduler+0xd0>)
 80087d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80087da:	4b15      	ldr	r3, [pc, #84]	; (8008830 <vTaskStartScheduler+0xd4>)
 80087dc:	f04f 32ff 	mov.w	r2, #4294967295
 80087e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087e2:	4b14      	ldr	r3, [pc, #80]	; (8008834 <vTaskStartScheduler+0xd8>)
 80087e4:	2201      	movs	r2, #1
 80087e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087e8:	4b13      	ldr	r3, [pc, #76]	; (8008838 <vTaskStartScheduler+0xdc>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087ee:	f001 f8df 	bl	80099b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087f2:	e00e      	b.n	8008812 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fa:	d10a      	bne.n	8008812 <vTaskStartScheduler+0xb6>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	60fb      	str	r3, [r7, #12]
}
 800880e:	bf00      	nop
 8008810:	e7fe      	b.n	8008810 <vTaskStartScheduler+0xb4>
}
 8008812:	bf00      	nop
 8008814:	3718      	adds	r7, #24
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	0800b404 	.word	0x0800b404
 8008820:	08008e85 	.word	0x08008e85
 8008824:	200015d0 	.word	0x200015d0
 8008828:	200010d8 	.word	0x200010d8
 800882c:	20000040 	.word	0x20000040
 8008830:	200015cc 	.word	0x200015cc
 8008834:	200015b8 	.word	0x200015b8
 8008838:	200015b0 	.word	0x200015b0

0800883c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008840:	4b04      	ldr	r3, [pc, #16]	; (8008854 <vTaskSuspendAll+0x18>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3301      	adds	r3, #1
 8008846:	4a03      	ldr	r2, [pc, #12]	; (8008854 <vTaskSuspendAll+0x18>)
 8008848:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800884a:	bf00      	nop
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	200015d4 	.word	0x200015d4

08008858 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800885e:	2300      	movs	r3, #0
 8008860:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008862:	2300      	movs	r3, #0
 8008864:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008866:	4b42      	ldr	r3, [pc, #264]	; (8008970 <xTaskResumeAll+0x118>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <xTaskResumeAll+0x2c>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	603b      	str	r3, [r7, #0]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008884:	f001 f936 	bl	8009af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008888:	4b39      	ldr	r3, [pc, #228]	; (8008970 <xTaskResumeAll+0x118>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	3b01      	subs	r3, #1
 800888e:	4a38      	ldr	r2, [pc, #224]	; (8008970 <xTaskResumeAll+0x118>)
 8008890:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008892:	4b37      	ldr	r3, [pc, #220]	; (8008970 <xTaskResumeAll+0x118>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d162      	bne.n	8008960 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800889a:	4b36      	ldr	r3, [pc, #216]	; (8008974 <xTaskResumeAll+0x11c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d05e      	beq.n	8008960 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088a2:	e02f      	b.n	8008904 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088a4:	4b34      	ldr	r3, [pc, #208]	; (8008978 <xTaskResumeAll+0x120>)
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3318      	adds	r3, #24
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7ff f807 	bl	80078c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3304      	adds	r3, #4
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7ff f802 	bl	80078c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c4:	4b2d      	ldr	r3, [pc, #180]	; (800897c <xTaskResumeAll+0x124>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d903      	bls.n	80088d4 <xTaskResumeAll+0x7c>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d0:	4a2a      	ldr	r2, [pc, #168]	; (800897c <xTaskResumeAll+0x124>)
 80088d2:	6013      	str	r3, [r2, #0]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d8:	4613      	mov	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4a27      	ldr	r2, [pc, #156]	; (8008980 <xTaskResumeAll+0x128>)
 80088e2:	441a      	add	r2, r3
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	3304      	adds	r3, #4
 80088e8:	4619      	mov	r1, r3
 80088ea:	4610      	mov	r0, r2
 80088ec:	f7fe ff8d 	bl	800780a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f4:	4b23      	ldr	r3, [pc, #140]	; (8008984 <xTaskResumeAll+0x12c>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d302      	bcc.n	8008904 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80088fe:	4b22      	ldr	r3, [pc, #136]	; (8008988 <xTaskResumeAll+0x130>)
 8008900:	2201      	movs	r2, #1
 8008902:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008904:	4b1c      	ldr	r3, [pc, #112]	; (8008978 <xTaskResumeAll+0x120>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1cb      	bne.n	80088a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008912:	f000 fb71 	bl	8008ff8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008916:	4b1d      	ldr	r3, [pc, #116]	; (800898c <xTaskResumeAll+0x134>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d010      	beq.n	8008944 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008922:	f000 f859 	bl	80089d8 <xTaskIncrementTick>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800892c:	4b16      	ldr	r3, [pc, #88]	; (8008988 <xTaskResumeAll+0x130>)
 800892e:	2201      	movs	r2, #1
 8008930:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	3b01      	subs	r3, #1
 8008936:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1f1      	bne.n	8008922 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800893e:	4b13      	ldr	r3, [pc, #76]	; (800898c <xTaskResumeAll+0x134>)
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008944:	4b10      	ldr	r3, [pc, #64]	; (8008988 <xTaskResumeAll+0x130>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d009      	beq.n	8008960 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800894c:	2301      	movs	r3, #1
 800894e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008950:	4b0f      	ldr	r3, [pc, #60]	; (8008990 <xTaskResumeAll+0x138>)
 8008952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008960:	f001 f8f8 	bl	8009b54 <vPortExitCritical>

	return xAlreadyYielded;
 8008964:	68bb      	ldr	r3, [r7, #8]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	200015d4 	.word	0x200015d4
 8008974:	200015ac 	.word	0x200015ac
 8008978:	2000156c 	.word	0x2000156c
 800897c:	200015b4 	.word	0x200015b4
 8008980:	200010dc 	.word	0x200010dc
 8008984:	200010d8 	.word	0x200010d8
 8008988:	200015c0 	.word	0x200015c0
 800898c:	200015bc 	.word	0x200015bc
 8008990:	e000ed04 	.word	0xe000ed04

08008994 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800899a:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <xTaskGetTickCount+0x1c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80089a0:	687b      	ldr	r3, [r7, #4]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	200015b0 	.word	0x200015b0

080089b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089ba:	f001 f97d 	bl	8009cb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80089be:	2300      	movs	r3, #0
 80089c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80089c2:	4b04      	ldr	r3, [pc, #16]	; (80089d4 <xTaskGetTickCountFromISR+0x20>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089c8:	683b      	ldr	r3, [r7, #0]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	200015b0 	.word	0x200015b0

080089d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089de:	2300      	movs	r3, #0
 80089e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089e2:	4b4f      	ldr	r3, [pc, #316]	; (8008b20 <xTaskIncrementTick+0x148>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f040 808f 	bne.w	8008b0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089ec:	4b4d      	ldr	r3, [pc, #308]	; (8008b24 <xTaskIncrementTick+0x14c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	3301      	adds	r3, #1
 80089f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80089f4:	4a4b      	ldr	r2, [pc, #300]	; (8008b24 <xTaskIncrementTick+0x14c>)
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d120      	bne.n	8008a42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a00:	4b49      	ldr	r3, [pc, #292]	; (8008b28 <xTaskIncrementTick+0x150>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00a      	beq.n	8008a20 <xTaskIncrementTick+0x48>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	603b      	str	r3, [r7, #0]
}
 8008a1c:	bf00      	nop
 8008a1e:	e7fe      	b.n	8008a1e <xTaskIncrementTick+0x46>
 8008a20:	4b41      	ldr	r3, [pc, #260]	; (8008b28 <xTaskIncrementTick+0x150>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	60fb      	str	r3, [r7, #12]
 8008a26:	4b41      	ldr	r3, [pc, #260]	; (8008b2c <xTaskIncrementTick+0x154>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a3f      	ldr	r2, [pc, #252]	; (8008b28 <xTaskIncrementTick+0x150>)
 8008a2c:	6013      	str	r3, [r2, #0]
 8008a2e:	4a3f      	ldr	r2, [pc, #252]	; (8008b2c <xTaskIncrementTick+0x154>)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6013      	str	r3, [r2, #0]
 8008a34:	4b3e      	ldr	r3, [pc, #248]	; (8008b30 <xTaskIncrementTick+0x158>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	4a3d      	ldr	r2, [pc, #244]	; (8008b30 <xTaskIncrementTick+0x158>)
 8008a3c:	6013      	str	r3, [r2, #0]
 8008a3e:	f000 fadb 	bl	8008ff8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a42:	4b3c      	ldr	r3, [pc, #240]	; (8008b34 <xTaskIncrementTick+0x15c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d349      	bcc.n	8008ae0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a4c:	4b36      	ldr	r3, [pc, #216]	; (8008b28 <xTaskIncrementTick+0x150>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d104      	bne.n	8008a60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a56:	4b37      	ldr	r3, [pc, #220]	; (8008b34 <xTaskIncrementTick+0x15c>)
 8008a58:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5c:	601a      	str	r2, [r3, #0]
					break;
 8008a5e:	e03f      	b.n	8008ae0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a60:	4b31      	ldr	r3, [pc, #196]	; (8008b28 <xTaskIncrementTick+0x150>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d203      	bcs.n	8008a80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a78:	4a2e      	ldr	r2, [pc, #184]	; (8008b34 <xTaskIncrementTick+0x15c>)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a7e:	e02f      	b.n	8008ae0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	3304      	adds	r3, #4
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fe ff1d 	bl	80078c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d004      	beq.n	8008a9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	3318      	adds	r3, #24
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fe ff14 	bl	80078c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa0:	4b25      	ldr	r3, [pc, #148]	; (8008b38 <xTaskIncrementTick+0x160>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d903      	bls.n	8008ab0 <xTaskIncrementTick+0xd8>
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	4a22      	ldr	r2, [pc, #136]	; (8008b38 <xTaskIncrementTick+0x160>)
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4a1f      	ldr	r2, [pc, #124]	; (8008b3c <xTaskIncrementTick+0x164>)
 8008abe:	441a      	add	r2, r3
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	f7fe fe9f 	bl	800780a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad0:	4b1b      	ldr	r3, [pc, #108]	; (8008b40 <xTaskIncrementTick+0x168>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d3b8      	bcc.n	8008a4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ada:	2301      	movs	r3, #1
 8008adc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ade:	e7b5      	b.n	8008a4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ae0:	4b17      	ldr	r3, [pc, #92]	; (8008b40 <xTaskIncrementTick+0x168>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae6:	4915      	ldr	r1, [pc, #84]	; (8008b3c <xTaskIncrementTick+0x164>)
 8008ae8:	4613      	mov	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	440b      	add	r3, r1
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d901      	bls.n	8008afc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008af8:	2301      	movs	r3, #1
 8008afa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008afc:	4b11      	ldr	r3, [pc, #68]	; (8008b44 <xTaskIncrementTick+0x16c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d007      	beq.n	8008b14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b04:	2301      	movs	r3, #1
 8008b06:	617b      	str	r3, [r7, #20]
 8008b08:	e004      	b.n	8008b14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b0a:	4b0f      	ldr	r3, [pc, #60]	; (8008b48 <xTaskIncrementTick+0x170>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	4a0d      	ldr	r2, [pc, #52]	; (8008b48 <xTaskIncrementTick+0x170>)
 8008b12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b14:	697b      	ldr	r3, [r7, #20]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	200015d4 	.word	0x200015d4
 8008b24:	200015b0 	.word	0x200015b0
 8008b28:	20001564 	.word	0x20001564
 8008b2c:	20001568 	.word	0x20001568
 8008b30:	200015c4 	.word	0x200015c4
 8008b34:	200015cc 	.word	0x200015cc
 8008b38:	200015b4 	.word	0x200015b4
 8008b3c:	200010dc 	.word	0x200010dc
 8008b40:	200010d8 	.word	0x200010d8
 8008b44:	200015c0 	.word	0x200015c0
 8008b48:	200015bc 	.word	0x200015bc

08008b4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b52:	4b2a      	ldr	r3, [pc, #168]	; (8008bfc <vTaskSwitchContext+0xb0>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b5a:	4b29      	ldr	r3, [pc, #164]	; (8008c00 <vTaskSwitchContext+0xb4>)
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b60:	e046      	b.n	8008bf0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008b62:	4b27      	ldr	r3, [pc, #156]	; (8008c00 <vTaskSwitchContext+0xb4>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b68:	4b26      	ldr	r3, [pc, #152]	; (8008c04 <vTaskSwitchContext+0xb8>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	60fb      	str	r3, [r7, #12]
 8008b6e:	e010      	b.n	8008b92 <vTaskSwitchContext+0x46>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10a      	bne.n	8008b8c <vTaskSwitchContext+0x40>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	607b      	str	r3, [r7, #4]
}
 8008b88:	bf00      	nop
 8008b8a:	e7fe      	b.n	8008b8a <vTaskSwitchContext+0x3e>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	60fb      	str	r3, [r7, #12]
 8008b92:	491d      	ldr	r1, [pc, #116]	; (8008c08 <vTaskSwitchContext+0xbc>)
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	4613      	mov	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	440b      	add	r3, r1
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0e4      	beq.n	8008b70 <vTaskSwitchContext+0x24>
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4a15      	ldr	r2, [pc, #84]	; (8008c08 <vTaskSwitchContext+0xbc>)
 8008bb2:	4413      	add	r3, r2
 8008bb4:	60bb      	str	r3, [r7, #8]
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	605a      	str	r2, [r3, #4]
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d104      	bne.n	8008bd6 <vTaskSwitchContext+0x8a>
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	605a      	str	r2, [r3, #4]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	4a0b      	ldr	r2, [pc, #44]	; (8008c0c <vTaskSwitchContext+0xc0>)
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	4a08      	ldr	r2, [pc, #32]	; (8008c04 <vTaskSwitchContext+0xb8>)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008be6:	4b09      	ldr	r3, [pc, #36]	; (8008c0c <vTaskSwitchContext+0xc0>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3354      	adds	r3, #84	; 0x54
 8008bec:	4a08      	ldr	r2, [pc, #32]	; (8008c10 <vTaskSwitchContext+0xc4>)
 8008bee:	6013      	str	r3, [r2, #0]
}
 8008bf0:	bf00      	nop
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	200015d4 	.word	0x200015d4
 8008c00:	200015c0 	.word	0x200015c0
 8008c04:	200015b4 	.word	0x200015b4
 8008c08:	200010dc 	.word	0x200010dc
 8008c0c:	200010d8 	.word	0x200010d8
 8008c10:	20000040 	.word	0x20000040

08008c14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10a      	bne.n	8008c3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	60fb      	str	r3, [r7, #12]
}
 8008c36:	bf00      	nop
 8008c38:	e7fe      	b.n	8008c38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c3a:	4b07      	ldr	r3, [pc, #28]	; (8008c58 <vTaskPlaceOnEventList+0x44>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3318      	adds	r3, #24
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7fe fe05 	bl	8007852 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c48:	2101      	movs	r1, #1
 8008c4a:	6838      	ldr	r0, [r7, #0]
 8008c4c:	f000 fa80 	bl	8009150 <prvAddCurrentTaskToDelayedList>
}
 8008c50:	bf00      	nop
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	200010d8 	.word	0x200010d8

08008c5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10a      	bne.n	8008c84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	617b      	str	r3, [r7, #20]
}
 8008c80:	bf00      	nop
 8008c82:	e7fe      	b.n	8008c82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c84:	4b0a      	ldr	r3, [pc, #40]	; (8008cb0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3318      	adds	r3, #24
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f7fe fdbc 	bl	800780a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008c98:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c9e:	6879      	ldr	r1, [r7, #4]
 8008ca0:	68b8      	ldr	r0, [r7, #8]
 8008ca2:	f000 fa55 	bl	8009150 <prvAddCurrentTaskToDelayedList>
	}
 8008ca6:	bf00      	nop
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	200010d8 	.word	0x200010d8

08008cb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10a      	bne.n	8008ce0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	60fb      	str	r3, [r7, #12]
}
 8008cdc:	bf00      	nop
 8008cde:	e7fe      	b.n	8008cde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	3318      	adds	r3, #24
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7fe fded 	bl	80078c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cea:	4b1e      	ldr	r3, [pc, #120]	; (8008d64 <xTaskRemoveFromEventList+0xb0>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d11d      	bne.n	8008d2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fe fde4 	bl	80078c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d00:	4b19      	ldr	r3, [pc, #100]	; (8008d68 <xTaskRemoveFromEventList+0xb4>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d903      	bls.n	8008d10 <xTaskRemoveFromEventList+0x5c>
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0c:	4a16      	ldr	r2, [pc, #88]	; (8008d68 <xTaskRemoveFromEventList+0xb4>)
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d14:	4613      	mov	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4a13      	ldr	r2, [pc, #76]	; (8008d6c <xTaskRemoveFromEventList+0xb8>)
 8008d1e:	441a      	add	r2, r3
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4619      	mov	r1, r3
 8008d26:	4610      	mov	r0, r2
 8008d28:	f7fe fd6f 	bl	800780a <vListInsertEnd>
 8008d2c:	e005      	b.n	8008d3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	3318      	adds	r3, #24
 8008d32:	4619      	mov	r1, r3
 8008d34:	480e      	ldr	r0, [pc, #56]	; (8008d70 <xTaskRemoveFromEventList+0xbc>)
 8008d36:	f7fe fd68 	bl	800780a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3e:	4b0d      	ldr	r3, [pc, #52]	; (8008d74 <xTaskRemoveFromEventList+0xc0>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d905      	bls.n	8008d54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d4c:	4b0a      	ldr	r3, [pc, #40]	; (8008d78 <xTaskRemoveFromEventList+0xc4>)
 8008d4e:	2201      	movs	r2, #1
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	e001      	b.n	8008d58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008d54:	2300      	movs	r3, #0
 8008d56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d58:	697b      	ldr	r3, [r7, #20]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	200015d4 	.word	0x200015d4
 8008d68:	200015b4 	.word	0x200015b4
 8008d6c:	200010dc 	.word	0x200010dc
 8008d70:	2000156c 	.word	0x2000156c
 8008d74:	200010d8 	.word	0x200010d8
 8008d78:	200015c0 	.word	0x200015c0

08008d7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d84:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <vTaskInternalSetTimeOutState+0x24>)
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d8c:	4b05      	ldr	r3, [pc, #20]	; (8008da4 <vTaskInternalSetTimeOutState+0x28>)
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	605a      	str	r2, [r3, #4]
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	200015c4 	.word	0x200015c4
 8008da4:	200015b0 	.word	0x200015b0

08008da8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b088      	sub	sp, #32
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10a      	bne.n	8008dce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	613b      	str	r3, [r7, #16]
}
 8008dca:	bf00      	nop
 8008dcc:	e7fe      	b.n	8008dcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10a      	bne.n	8008dea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	60fb      	str	r3, [r7, #12]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008dea:	f000 fe83 	bl	8009af4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008dee:	4b1d      	ldr	r3, [pc, #116]	; (8008e64 <xTaskCheckForTimeOut+0xbc>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e06:	d102      	bne.n	8008e0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	61fb      	str	r3, [r7, #28]
 8008e0c:	e023      	b.n	8008e56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	4b15      	ldr	r3, [pc, #84]	; (8008e68 <xTaskCheckForTimeOut+0xc0>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d007      	beq.n	8008e2a <xTaskCheckForTimeOut+0x82>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	69ba      	ldr	r2, [r7, #24]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d302      	bcc.n	8008e2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e24:	2301      	movs	r3, #1
 8008e26:	61fb      	str	r3, [r7, #28]
 8008e28:	e015      	b.n	8008e56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d20b      	bcs.n	8008e4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	1ad2      	subs	r2, r2, r3
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7ff ff9b 	bl	8008d7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e46:	2300      	movs	r3, #0
 8008e48:	61fb      	str	r3, [r7, #28]
 8008e4a:	e004      	b.n	8008e56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e52:	2301      	movs	r3, #1
 8008e54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e56:	f000 fe7d 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 8008e5a:	69fb      	ldr	r3, [r7, #28]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3720      	adds	r7, #32
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	200015b0 	.word	0x200015b0
 8008e68:	200015c4 	.word	0x200015c4

08008e6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e70:	4b03      	ldr	r3, [pc, #12]	; (8008e80 <vTaskMissedYield+0x14>)
 8008e72:	2201      	movs	r2, #1
 8008e74:	601a      	str	r2, [r3, #0]
}
 8008e76:	bf00      	nop
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	200015c0 	.word	0x200015c0

08008e84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e8c:	f000 f852 	bl	8008f34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e90:	4b06      	ldr	r3, [pc, #24]	; (8008eac <prvIdleTask+0x28>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d9f9      	bls.n	8008e8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e98:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <prvIdleTask+0x2c>)
 8008e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ea8:	e7f0      	b.n	8008e8c <prvIdleTask+0x8>
 8008eaa:	bf00      	nop
 8008eac:	200010dc 	.word	0x200010dc
 8008eb0:	e000ed04 	.word	0xe000ed04

08008eb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008eba:	2300      	movs	r3, #0
 8008ebc:	607b      	str	r3, [r7, #4]
 8008ebe:	e00c      	b.n	8008eda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4a12      	ldr	r2, [pc, #72]	; (8008f14 <prvInitialiseTaskLists+0x60>)
 8008ecc:	4413      	add	r3, r2
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe fc6e 	bl	80077b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	607b      	str	r3, [r7, #4]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b37      	cmp	r3, #55	; 0x37
 8008ede:	d9ef      	bls.n	8008ec0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ee0:	480d      	ldr	r0, [pc, #52]	; (8008f18 <prvInitialiseTaskLists+0x64>)
 8008ee2:	f7fe fc65 	bl	80077b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ee6:	480d      	ldr	r0, [pc, #52]	; (8008f1c <prvInitialiseTaskLists+0x68>)
 8008ee8:	f7fe fc62 	bl	80077b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008eec:	480c      	ldr	r0, [pc, #48]	; (8008f20 <prvInitialiseTaskLists+0x6c>)
 8008eee:	f7fe fc5f 	bl	80077b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ef2:	480c      	ldr	r0, [pc, #48]	; (8008f24 <prvInitialiseTaskLists+0x70>)
 8008ef4:	f7fe fc5c 	bl	80077b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ef8:	480b      	ldr	r0, [pc, #44]	; (8008f28 <prvInitialiseTaskLists+0x74>)
 8008efa:	f7fe fc59 	bl	80077b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008efe:	4b0b      	ldr	r3, [pc, #44]	; (8008f2c <prvInitialiseTaskLists+0x78>)
 8008f00:	4a05      	ldr	r2, [pc, #20]	; (8008f18 <prvInitialiseTaskLists+0x64>)
 8008f02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f04:	4b0a      	ldr	r3, [pc, #40]	; (8008f30 <prvInitialiseTaskLists+0x7c>)
 8008f06:	4a05      	ldr	r2, [pc, #20]	; (8008f1c <prvInitialiseTaskLists+0x68>)
 8008f08:	601a      	str	r2, [r3, #0]
}
 8008f0a:	bf00      	nop
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	200010dc 	.word	0x200010dc
 8008f18:	2000153c 	.word	0x2000153c
 8008f1c:	20001550 	.word	0x20001550
 8008f20:	2000156c 	.word	0x2000156c
 8008f24:	20001580 	.word	0x20001580
 8008f28:	20001598 	.word	0x20001598
 8008f2c:	20001564 	.word	0x20001564
 8008f30:	20001568 	.word	0x20001568

08008f34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f3a:	e019      	b.n	8008f70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f3c:	f000 fdda 	bl	8009af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f40:	4b10      	ldr	r3, [pc, #64]	; (8008f84 <prvCheckTasksWaitingTermination+0x50>)
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fe fcb9 	bl	80078c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f52:	4b0d      	ldr	r3, [pc, #52]	; (8008f88 <prvCheckTasksWaitingTermination+0x54>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3b01      	subs	r3, #1
 8008f58:	4a0b      	ldr	r2, [pc, #44]	; (8008f88 <prvCheckTasksWaitingTermination+0x54>)
 8008f5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f5c:	4b0b      	ldr	r3, [pc, #44]	; (8008f8c <prvCheckTasksWaitingTermination+0x58>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3b01      	subs	r3, #1
 8008f62:	4a0a      	ldr	r2, [pc, #40]	; (8008f8c <prvCheckTasksWaitingTermination+0x58>)
 8008f64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f66:	f000 fdf5 	bl	8009b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f810 	bl	8008f90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f70:	4b06      	ldr	r3, [pc, #24]	; (8008f8c <prvCheckTasksWaitingTermination+0x58>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1e1      	bne.n	8008f3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f78:	bf00      	nop
 8008f7a:	bf00      	nop
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	20001580 	.word	0x20001580
 8008f88:	200015ac 	.word	0x200015ac
 8008f8c:	20001594 	.word	0x20001594

08008f90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3354      	adds	r3, #84	; 0x54
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f001 fb1f 	bl	800a5e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d108      	bne.n	8008fbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 ff8d 	bl	8009ed0 <vPortFree>
				vPortFree( pxTCB );
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 ff8a 	bl	8009ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fbc:	e018      	b.n	8008ff0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d103      	bne.n	8008fd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 ff81 	bl	8009ed0 <vPortFree>
	}
 8008fce:	e00f      	b.n	8008ff0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d00a      	beq.n	8008ff0 <prvDeleteTCB+0x60>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	60fb      	str	r3, [r7, #12]
}
 8008fec:	bf00      	nop
 8008fee:	e7fe      	b.n	8008fee <prvDeleteTCB+0x5e>
	}
 8008ff0:	bf00      	nop
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ffe:	4b0c      	ldr	r3, [pc, #48]	; (8009030 <prvResetNextTaskUnblockTime+0x38>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d104      	bne.n	8009012 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009008:	4b0a      	ldr	r3, [pc, #40]	; (8009034 <prvResetNextTaskUnblockTime+0x3c>)
 800900a:	f04f 32ff 	mov.w	r2, #4294967295
 800900e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009010:	e008      	b.n	8009024 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009012:	4b07      	ldr	r3, [pc, #28]	; (8009030 <prvResetNextTaskUnblockTime+0x38>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	4a04      	ldr	r2, [pc, #16]	; (8009034 <prvResetNextTaskUnblockTime+0x3c>)
 8009022:	6013      	str	r3, [r2, #0]
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	20001564 	.word	0x20001564
 8009034:	200015cc 	.word	0x200015cc

08009038 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800903e:	4b0b      	ldr	r3, [pc, #44]	; (800906c <xTaskGetSchedulerState+0x34>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d102      	bne.n	800904c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009046:	2301      	movs	r3, #1
 8009048:	607b      	str	r3, [r7, #4]
 800904a:	e008      	b.n	800905e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800904c:	4b08      	ldr	r3, [pc, #32]	; (8009070 <xTaskGetSchedulerState+0x38>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d102      	bne.n	800905a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009054:	2302      	movs	r3, #2
 8009056:	607b      	str	r3, [r7, #4]
 8009058:	e001      	b.n	800905e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800905a:	2300      	movs	r3, #0
 800905c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800905e:	687b      	ldr	r3, [r7, #4]
	}
 8009060:	4618      	mov	r0, r3
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	200015b8 	.word	0x200015b8
 8009070:	200015d4 	.word	0x200015d4

08009074 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d056      	beq.n	8009138 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800908a:	4b2e      	ldr	r3, [pc, #184]	; (8009144 <xTaskPriorityDisinherit+0xd0>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	429a      	cmp	r2, r3
 8009092:	d00a      	beq.n	80090aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009098:	f383 8811 	msr	BASEPRI, r3
 800909c:	f3bf 8f6f 	isb	sy
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	60fb      	str	r3, [r7, #12]
}
 80090a6:	bf00      	nop
 80090a8:	e7fe      	b.n	80090a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10a      	bne.n	80090c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	60bb      	str	r3, [r7, #8]
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090cc:	1e5a      	subs	r2, r3, #1
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090da:	429a      	cmp	r2, r3
 80090dc:	d02c      	beq.n	8009138 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d128      	bne.n	8009138 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	3304      	adds	r3, #4
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fe fbea 	bl	80078c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009108:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <xTaskPriorityDisinherit+0xd4>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	429a      	cmp	r2, r3
 800910e:	d903      	bls.n	8009118 <xTaskPriorityDisinherit+0xa4>
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	4a0c      	ldr	r2, [pc, #48]	; (8009148 <xTaskPriorityDisinherit+0xd4>)
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911c:	4613      	mov	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4a09      	ldr	r2, [pc, #36]	; (800914c <xTaskPriorityDisinherit+0xd8>)
 8009126:	441a      	add	r2, r3
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	3304      	adds	r3, #4
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	f7fe fb6b 	bl	800780a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009134:	2301      	movs	r3, #1
 8009136:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009138:	697b      	ldr	r3, [r7, #20]
	}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	200010d8 	.word	0x200010d8
 8009148:	200015b4 	.word	0x200015b4
 800914c:	200010dc 	.word	0x200010dc

08009150 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800915a:	4b21      	ldr	r3, [pc, #132]	; (80091e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009160:	4b20      	ldr	r3, [pc, #128]	; (80091e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3304      	adds	r3, #4
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe fbac 	bl	80078c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009172:	d10a      	bne.n	800918a <prvAddCurrentTaskToDelayedList+0x3a>
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d007      	beq.n	800918a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800917a:	4b1a      	ldr	r3, [pc, #104]	; (80091e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3304      	adds	r3, #4
 8009180:	4619      	mov	r1, r3
 8009182:	4819      	ldr	r0, [pc, #100]	; (80091e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009184:	f7fe fb41 	bl	800780a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009188:	e026      	b.n	80091d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4413      	add	r3, r2
 8009190:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009192:	4b14      	ldr	r3, [pc, #80]	; (80091e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d209      	bcs.n	80091b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091a2:	4b12      	ldr	r3, [pc, #72]	; (80091ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	4b0f      	ldr	r3, [pc, #60]	; (80091e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3304      	adds	r3, #4
 80091ac:	4619      	mov	r1, r3
 80091ae:	4610      	mov	r0, r2
 80091b0:	f7fe fb4f 	bl	8007852 <vListInsert>
}
 80091b4:	e010      	b.n	80091d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091b6:	4b0e      	ldr	r3, [pc, #56]	; (80091f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	4b0a      	ldr	r3, [pc, #40]	; (80091e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3304      	adds	r3, #4
 80091c0:	4619      	mov	r1, r3
 80091c2:	4610      	mov	r0, r2
 80091c4:	f7fe fb45 	bl	8007852 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091c8:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d202      	bcs.n	80091d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80091d2:	4a08      	ldr	r2, [pc, #32]	; (80091f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	6013      	str	r3, [r2, #0]
}
 80091d8:	bf00      	nop
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	200015b0 	.word	0x200015b0
 80091e4:	200010d8 	.word	0x200010d8
 80091e8:	20001598 	.word	0x20001598
 80091ec:	20001568 	.word	0x20001568
 80091f0:	20001564 	.word	0x20001564
 80091f4:	200015cc 	.word	0x200015cc

080091f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b08a      	sub	sp, #40	; 0x28
 80091fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80091fe:	2300      	movs	r3, #0
 8009200:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009202:	f000 fb07 	bl	8009814 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009206:	4b1c      	ldr	r3, [pc, #112]	; (8009278 <xTimerCreateTimerTask+0x80>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d021      	beq.n	8009252 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800920e:	2300      	movs	r3, #0
 8009210:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009212:	2300      	movs	r3, #0
 8009214:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009216:	1d3a      	adds	r2, r7, #4
 8009218:	f107 0108 	add.w	r1, r7, #8
 800921c:	f107 030c 	add.w	r3, r7, #12
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe faab 	bl	800777c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009226:	6879      	ldr	r1, [r7, #4]
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	9202      	str	r2, [sp, #8]
 800922e:	9301      	str	r3, [sp, #4]
 8009230:	2302      	movs	r3, #2
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	2300      	movs	r3, #0
 8009236:	460a      	mov	r2, r1
 8009238:	4910      	ldr	r1, [pc, #64]	; (800927c <xTimerCreateTimerTask+0x84>)
 800923a:	4811      	ldr	r0, [pc, #68]	; (8009280 <xTimerCreateTimerTask+0x88>)
 800923c:	f7ff f858 	bl	80082f0 <xTaskCreateStatic>
 8009240:	4603      	mov	r3, r0
 8009242:	4a10      	ldr	r2, [pc, #64]	; (8009284 <xTimerCreateTimerTask+0x8c>)
 8009244:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009246:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <xTimerCreateTimerTask+0x8c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800924e:	2301      	movs	r3, #1
 8009250:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	613b      	str	r3, [r7, #16]
}
 800926a:	bf00      	nop
 800926c:	e7fe      	b.n	800926c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800926e:	697b      	ldr	r3, [r7, #20]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3718      	adds	r7, #24
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	20001608 	.word	0x20001608
 800927c:	0800b40c 	.word	0x0800b40c
 8009280:	080093bd 	.word	0x080093bd
 8009284:	2000160c 	.word	0x2000160c

08009288 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08a      	sub	sp, #40	; 0x28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
 8009294:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009296:	2300      	movs	r3, #0
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10a      	bne.n	80092b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80092a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	623b      	str	r3, [r7, #32]
}
 80092b2:	bf00      	nop
 80092b4:	e7fe      	b.n	80092b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092b6:	4b1a      	ldr	r3, [pc, #104]	; (8009320 <xTimerGenericCommand+0x98>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d02a      	beq.n	8009314 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	2b05      	cmp	r3, #5
 80092ce:	dc18      	bgt.n	8009302 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092d0:	f7ff feb2 	bl	8009038 <xTaskGetSchedulerState>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d109      	bne.n	80092ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092da:	4b11      	ldr	r3, [pc, #68]	; (8009320 <xTimerGenericCommand+0x98>)
 80092dc:	6818      	ldr	r0, [r3, #0]
 80092de:	f107 0110 	add.w	r1, r7, #16
 80092e2:	2300      	movs	r3, #0
 80092e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092e6:	f7fe fc1b 	bl	8007b20 <xQueueGenericSend>
 80092ea:	6278      	str	r0, [r7, #36]	; 0x24
 80092ec:	e012      	b.n	8009314 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092ee:	4b0c      	ldr	r3, [pc, #48]	; (8009320 <xTimerGenericCommand+0x98>)
 80092f0:	6818      	ldr	r0, [r3, #0]
 80092f2:	f107 0110 	add.w	r1, r7, #16
 80092f6:	2300      	movs	r3, #0
 80092f8:	2200      	movs	r2, #0
 80092fa:	f7fe fc11 	bl	8007b20 <xQueueGenericSend>
 80092fe:	6278      	str	r0, [r7, #36]	; 0x24
 8009300:	e008      	b.n	8009314 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009302:	4b07      	ldr	r3, [pc, #28]	; (8009320 <xTimerGenericCommand+0x98>)
 8009304:	6818      	ldr	r0, [r3, #0]
 8009306:	f107 0110 	add.w	r1, r7, #16
 800930a:	2300      	movs	r3, #0
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	f7fe fd05 	bl	8007d1c <xQueueGenericSendFromISR>
 8009312:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009316:	4618      	mov	r0, r3
 8009318:	3728      	adds	r7, #40	; 0x28
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	20001608 	.word	0x20001608

08009324 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b088      	sub	sp, #32
 8009328:	af02      	add	r7, sp, #8
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800932e:	4b22      	ldr	r3, [pc, #136]	; (80093b8 <prvProcessExpiredTimer+0x94>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	3304      	adds	r3, #4
 800933c:	4618      	mov	r0, r3
 800933e:	f7fe fac1 	bl	80078c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b00      	cmp	r3, #0
 800934e:	d022      	beq.n	8009396 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	699a      	ldr	r2, [r3, #24]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	18d1      	adds	r1, r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	6978      	ldr	r0, [r7, #20]
 800935e:	f000 f8d1 	bl	8009504 <prvInsertTimerInActiveList>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d01f      	beq.n	80093a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009368:	2300      	movs	r3, #0
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	2300      	movs	r3, #0
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	2100      	movs	r1, #0
 8009372:	6978      	ldr	r0, [r7, #20]
 8009374:	f7ff ff88 	bl	8009288 <xTimerGenericCommand>
 8009378:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d113      	bne.n	80093a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	60fb      	str	r3, [r7, #12]
}
 8009392:	bf00      	nop
 8009394:	e7fe      	b.n	8009394 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800939c:	f023 0301 	bic.w	r3, r3, #1
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	6a1b      	ldr	r3, [r3, #32]
 80093ac:	6978      	ldr	r0, [r7, #20]
 80093ae:	4798      	blx	r3
}
 80093b0:	bf00      	nop
 80093b2:	3718      	adds	r7, #24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20001600 	.word	0x20001600

080093bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093c4:	f107 0308 	add.w	r3, r7, #8
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 f857 	bl	800947c <prvGetNextExpireTime>
 80093ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	4619      	mov	r1, r3
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f000 f803 	bl	80093e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093da:	f000 f8d5 	bl	8009588 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093de:	e7f1      	b.n	80093c4 <prvTimerTask+0x8>

080093e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80093ea:	f7ff fa27 	bl	800883c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093ee:	f107 0308 	add.w	r3, r7, #8
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 f866 	bl	80094c4 <prvSampleTimeNow>
 80093f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d130      	bne.n	8009462 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10a      	bne.n	800941c <prvProcessTimerOrBlockTask+0x3c>
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	429a      	cmp	r2, r3
 800940c:	d806      	bhi.n	800941c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800940e:	f7ff fa23 	bl	8008858 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009412:	68f9      	ldr	r1, [r7, #12]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f7ff ff85 	bl	8009324 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800941a:	e024      	b.n	8009466 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d008      	beq.n	8009434 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009422:	4b13      	ldr	r3, [pc, #76]	; (8009470 <prvProcessTimerOrBlockTask+0x90>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <prvProcessTimerOrBlockTask+0x50>
 800942c:	2301      	movs	r3, #1
 800942e:	e000      	b.n	8009432 <prvProcessTimerOrBlockTask+0x52>
 8009430:	2300      	movs	r3, #0
 8009432:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009434:	4b0f      	ldr	r3, [pc, #60]	; (8009474 <prvProcessTimerOrBlockTask+0x94>)
 8009436:	6818      	ldr	r0, [r3, #0]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	4619      	mov	r1, r3
 8009442:	f7fe ff21 	bl	8008288 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009446:	f7ff fa07 	bl	8008858 <xTaskResumeAll>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10a      	bne.n	8009466 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009450:	4b09      	ldr	r3, [pc, #36]	; (8009478 <prvProcessTimerOrBlockTask+0x98>)
 8009452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009456:	601a      	str	r2, [r3, #0]
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	f3bf 8f6f 	isb	sy
}
 8009460:	e001      	b.n	8009466 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009462:	f7ff f9f9 	bl	8008858 <xTaskResumeAll>
}
 8009466:	bf00      	nop
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	20001604 	.word	0x20001604
 8009474:	20001608 	.word	0x20001608
 8009478:	e000ed04 	.word	0xe000ed04

0800947c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009484:	4b0e      	ldr	r3, [pc, #56]	; (80094c0 <prvGetNextExpireTime+0x44>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d101      	bne.n	8009492 <prvGetNextExpireTime+0x16>
 800948e:	2201      	movs	r2, #1
 8009490:	e000      	b.n	8009494 <prvGetNextExpireTime+0x18>
 8009492:	2200      	movs	r2, #0
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d105      	bne.n	80094ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094a0:	4b07      	ldr	r3, [pc, #28]	; (80094c0 <prvGetNextExpireTime+0x44>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	60fb      	str	r3, [r7, #12]
 80094aa:	e001      	b.n	80094b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094b0:	68fb      	ldr	r3, [r7, #12]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	20001600 	.word	0x20001600

080094c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80094cc:	f7ff fa62 	bl	8008994 <xTaskGetTickCount>
 80094d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094d2:	4b0b      	ldr	r3, [pc, #44]	; (8009500 <prvSampleTimeNow+0x3c>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d205      	bcs.n	80094e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094dc:	f000 f936 	bl	800974c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	601a      	str	r2, [r3, #0]
 80094e6:	e002      	b.n	80094ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094ee:	4a04      	ldr	r2, [pc, #16]	; (8009500 <prvSampleTimeNow+0x3c>)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80094f4:	68fb      	ldr	r3, [r7, #12]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	20001610 	.word	0x20001610

08009504 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009512:	2300      	movs	r3, #0
 8009514:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	429a      	cmp	r2, r3
 8009528:	d812      	bhi.n	8009550 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	1ad2      	subs	r2, r2, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	429a      	cmp	r2, r3
 8009536:	d302      	bcc.n	800953e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009538:	2301      	movs	r3, #1
 800953a:	617b      	str	r3, [r7, #20]
 800953c:	e01b      	b.n	8009576 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800953e:	4b10      	ldr	r3, [pc, #64]	; (8009580 <prvInsertTimerInActiveList+0x7c>)
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	3304      	adds	r3, #4
 8009546:	4619      	mov	r1, r3
 8009548:	4610      	mov	r0, r2
 800954a:	f7fe f982 	bl	8007852 <vListInsert>
 800954e:	e012      	b.n	8009576 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	429a      	cmp	r2, r3
 8009556:	d206      	bcs.n	8009566 <prvInsertTimerInActiveList+0x62>
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	429a      	cmp	r2, r3
 800955e:	d302      	bcc.n	8009566 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009560:	2301      	movs	r3, #1
 8009562:	617b      	str	r3, [r7, #20]
 8009564:	e007      	b.n	8009576 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009566:	4b07      	ldr	r3, [pc, #28]	; (8009584 <prvInsertTimerInActiveList+0x80>)
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3304      	adds	r3, #4
 800956e:	4619      	mov	r1, r3
 8009570:	4610      	mov	r0, r2
 8009572:	f7fe f96e 	bl	8007852 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009576:	697b      	ldr	r3, [r7, #20]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3718      	adds	r7, #24
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	20001604 	.word	0x20001604
 8009584:	20001600 	.word	0x20001600

08009588 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b08e      	sub	sp, #56	; 0x38
 800958c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800958e:	e0ca      	b.n	8009726 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	da18      	bge.n	80095c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009596:	1d3b      	adds	r3, r7, #4
 8009598:	3304      	adds	r3, #4
 800959a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800959c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10a      	bne.n	80095b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	61fb      	str	r3, [r7, #28]
}
 80095b4:	bf00      	nop
 80095b6:	e7fe      	b.n	80095b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095be:	6850      	ldr	r0, [r2, #4]
 80095c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095c2:	6892      	ldr	r2, [r2, #8]
 80095c4:	4611      	mov	r1, r2
 80095c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f2c0 80aa 	blt.w	8009724 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d004      	beq.n	80095e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095de:	3304      	adds	r3, #4
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe f96f 	bl	80078c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095e6:	463b      	mov	r3, r7
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7ff ff6b 	bl	80094c4 <prvSampleTimeNow>
 80095ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b09      	cmp	r3, #9
 80095f4:	f200 8097 	bhi.w	8009726 <prvProcessReceivedCommands+0x19e>
 80095f8:	a201      	add	r2, pc, #4	; (adr r2, 8009600 <prvProcessReceivedCommands+0x78>)
 80095fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fe:	bf00      	nop
 8009600:	08009629 	.word	0x08009629
 8009604:	08009629 	.word	0x08009629
 8009608:	08009629 	.word	0x08009629
 800960c:	0800969d 	.word	0x0800969d
 8009610:	080096b1 	.word	0x080096b1
 8009614:	080096fb 	.word	0x080096fb
 8009618:	08009629 	.word	0x08009629
 800961c:	08009629 	.word	0x08009629
 8009620:	0800969d 	.word	0x0800969d
 8009624:	080096b1 	.word	0x080096b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800962e:	f043 0301 	orr.w	r3, r3, #1
 8009632:	b2da      	uxtb	r2, r3
 8009634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	18d1      	adds	r1, r2, r3
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009648:	f7ff ff5c 	bl	8009504 <prvInsertTimerInActiveList>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d069      	beq.n	8009726 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009654:	6a1b      	ldr	r3, [r3, #32]
 8009656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009658:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009660:	f003 0304 	and.w	r3, r3, #4
 8009664:	2b00      	cmp	r3, #0
 8009666:	d05e      	beq.n	8009726 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	441a      	add	r2, r3
 8009670:	2300      	movs	r3, #0
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	2300      	movs	r3, #0
 8009676:	2100      	movs	r1, #0
 8009678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800967a:	f7ff fe05 	bl	8009288 <xTimerGenericCommand>
 800967e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d14f      	bne.n	8009726 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	61bb      	str	r3, [r7, #24]
}
 8009698:	bf00      	nop
 800969a:	e7fe      	b.n	800969a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096a2:	f023 0301 	bic.w	r3, r3, #1
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80096ae:	e03a      	b.n	8009726 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096b6:	f043 0301 	orr.w	r3, r3, #1
 80096ba:	b2da      	uxtb	r2, r3
 80096bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10a      	bne.n	80096e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	617b      	str	r3, [r7, #20]
}
 80096e2:	bf00      	nop
 80096e4:	e7fe      	b.n	80096e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e8:	699a      	ldr	r2, [r3, #24]
 80096ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ec:	18d1      	adds	r1, r2, r3
 80096ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096f4:	f7ff ff06 	bl	8009504 <prvInsertTimerInActiveList>
					break;
 80096f8:	e015      	b.n	8009726 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80096fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009700:	f003 0302 	and.w	r3, r3, #2
 8009704:	2b00      	cmp	r3, #0
 8009706:	d103      	bne.n	8009710 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800970a:	f000 fbe1 	bl	8009ed0 <vPortFree>
 800970e:	e00a      	b.n	8009726 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009716:	f023 0301 	bic.w	r3, r3, #1
 800971a:	b2da      	uxtb	r2, r3
 800971c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009722:	e000      	b.n	8009726 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009724:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009726:	4b08      	ldr	r3, [pc, #32]	; (8009748 <prvProcessReceivedCommands+0x1c0>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	1d39      	adds	r1, r7, #4
 800972c:	2200      	movs	r2, #0
 800972e:	4618      	mov	r0, r3
 8009730:	f7fe fb90 	bl	8007e54 <xQueueReceive>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	f47f af2a 	bne.w	8009590 <prvProcessReceivedCommands+0x8>
	}
}
 800973c:	bf00      	nop
 800973e:	bf00      	nop
 8009740:	3730      	adds	r7, #48	; 0x30
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	20001608 	.word	0x20001608

0800974c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b088      	sub	sp, #32
 8009750:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009752:	e048      	b.n	80097e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009754:	4b2d      	ldr	r3, [pc, #180]	; (800980c <prvSwitchTimerLists+0xc0>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800975e:	4b2b      	ldr	r3, [pc, #172]	; (800980c <prvSwitchTimerLists+0xc0>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	3304      	adds	r3, #4
 800976c:	4618      	mov	r0, r3
 800976e:	f7fe f8a9 	bl	80078c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009780:	f003 0304 	and.w	r3, r3, #4
 8009784:	2b00      	cmp	r3, #0
 8009786:	d02e      	beq.n	80097e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	4413      	add	r3, r2
 8009790:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	429a      	cmp	r2, r3
 8009798:	d90e      	bls.n	80097b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097a6:	4b19      	ldr	r3, [pc, #100]	; (800980c <prvSwitchTimerLists+0xc0>)
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	3304      	adds	r3, #4
 80097ae:	4619      	mov	r1, r3
 80097b0:	4610      	mov	r0, r2
 80097b2:	f7fe f84e 	bl	8007852 <vListInsert>
 80097b6:	e016      	b.n	80097e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097b8:	2300      	movs	r3, #0
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	2300      	movs	r3, #0
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	2100      	movs	r1, #0
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f7ff fd60 	bl	8009288 <xTimerGenericCommand>
 80097c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10a      	bne.n	80097e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80097d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	603b      	str	r3, [r7, #0]
}
 80097e2:	bf00      	nop
 80097e4:	e7fe      	b.n	80097e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097e6:	4b09      	ldr	r3, [pc, #36]	; (800980c <prvSwitchTimerLists+0xc0>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1b1      	bne.n	8009754 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80097f0:	4b06      	ldr	r3, [pc, #24]	; (800980c <prvSwitchTimerLists+0xc0>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097f6:	4b06      	ldr	r3, [pc, #24]	; (8009810 <prvSwitchTimerLists+0xc4>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a04      	ldr	r2, [pc, #16]	; (800980c <prvSwitchTimerLists+0xc0>)
 80097fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097fe:	4a04      	ldr	r2, [pc, #16]	; (8009810 <prvSwitchTimerLists+0xc4>)
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	6013      	str	r3, [r2, #0]
}
 8009804:	bf00      	nop
 8009806:	3718      	adds	r7, #24
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	20001600 	.word	0x20001600
 8009810:	20001604 	.word	0x20001604

08009814 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800981a:	f000 f96b 	bl	8009af4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800981e:	4b15      	ldr	r3, [pc, #84]	; (8009874 <prvCheckForValidListAndQueue+0x60>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d120      	bne.n	8009868 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009826:	4814      	ldr	r0, [pc, #80]	; (8009878 <prvCheckForValidListAndQueue+0x64>)
 8009828:	f7fd ffc2 	bl	80077b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800982c:	4813      	ldr	r0, [pc, #76]	; (800987c <prvCheckForValidListAndQueue+0x68>)
 800982e:	f7fd ffbf 	bl	80077b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009832:	4b13      	ldr	r3, [pc, #76]	; (8009880 <prvCheckForValidListAndQueue+0x6c>)
 8009834:	4a10      	ldr	r2, [pc, #64]	; (8009878 <prvCheckForValidListAndQueue+0x64>)
 8009836:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009838:	4b12      	ldr	r3, [pc, #72]	; (8009884 <prvCheckForValidListAndQueue+0x70>)
 800983a:	4a10      	ldr	r2, [pc, #64]	; (800987c <prvCheckForValidListAndQueue+0x68>)
 800983c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800983e:	2300      	movs	r3, #0
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	4b11      	ldr	r3, [pc, #68]	; (8009888 <prvCheckForValidListAndQueue+0x74>)
 8009844:	4a11      	ldr	r2, [pc, #68]	; (800988c <prvCheckForValidListAndQueue+0x78>)
 8009846:	2110      	movs	r1, #16
 8009848:	200a      	movs	r0, #10
 800984a:	f7fe f8cd 	bl	80079e8 <xQueueGenericCreateStatic>
 800984e:	4603      	mov	r3, r0
 8009850:	4a08      	ldr	r2, [pc, #32]	; (8009874 <prvCheckForValidListAndQueue+0x60>)
 8009852:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009854:	4b07      	ldr	r3, [pc, #28]	; (8009874 <prvCheckForValidListAndQueue+0x60>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d005      	beq.n	8009868 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800985c:	4b05      	ldr	r3, [pc, #20]	; (8009874 <prvCheckForValidListAndQueue+0x60>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	490b      	ldr	r1, [pc, #44]	; (8009890 <prvCheckForValidListAndQueue+0x7c>)
 8009862:	4618      	mov	r0, r3
 8009864:	f7fe fce6 	bl	8008234 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009868:	f000 f974 	bl	8009b54 <vPortExitCritical>
}
 800986c:	bf00      	nop
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	20001608 	.word	0x20001608
 8009878:	200015d8 	.word	0x200015d8
 800987c:	200015ec 	.word	0x200015ec
 8009880:	20001600 	.word	0x20001600
 8009884:	20001604 	.word	0x20001604
 8009888:	200016b4 	.word	0x200016b4
 800988c:	20001614 	.word	0x20001614
 8009890:	0800b414 	.word	0x0800b414

08009894 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	3b04      	subs	r3, #4
 80098a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3b04      	subs	r3, #4
 80098b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	f023 0201 	bic.w	r2, r3, #1
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	3b04      	subs	r3, #4
 80098c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098c4:	4a0c      	ldr	r2, [pc, #48]	; (80098f8 <pxPortInitialiseStack+0x64>)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3b14      	subs	r3, #20
 80098ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3b04      	subs	r3, #4
 80098da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f06f 0202 	mvn.w	r2, #2
 80098e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	3b20      	subs	r3, #32
 80098e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098ea:	68fb      	ldr	r3, [r7, #12]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	080098fd 	.word	0x080098fd

080098fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009906:	4b12      	ldr	r3, [pc, #72]	; (8009950 <prvTaskExitError+0x54>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990e:	d00a      	beq.n	8009926 <prvTaskExitError+0x2a>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	60fb      	str	r3, [r7, #12]
}
 8009922:	bf00      	nop
 8009924:	e7fe      	b.n	8009924 <prvTaskExitError+0x28>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	60bb      	str	r3, [r7, #8]
}
 8009938:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800993a:	bf00      	nop
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d0fc      	beq.n	800993c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009942:	bf00      	nop
 8009944:	bf00      	nop
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	2000003c 	.word	0x2000003c
	...

08009960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <pxCurrentTCBConst2>)
 8009962:	6819      	ldr	r1, [r3, #0]
 8009964:	6808      	ldr	r0, [r1, #0]
 8009966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996a:	f380 8809 	msr	PSP, r0
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f04f 0000 	mov.w	r0, #0
 8009976:	f380 8811 	msr	BASEPRI, r0
 800997a:	4770      	bx	lr
 800997c:	f3af 8000 	nop.w

08009980 <pxCurrentTCBConst2>:
 8009980:	200010d8 	.word	0x200010d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop

08009988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009988:	4808      	ldr	r0, [pc, #32]	; (80099ac <prvPortStartFirstTask+0x24>)
 800998a:	6800      	ldr	r0, [r0, #0]
 800998c:	6800      	ldr	r0, [r0, #0]
 800998e:	f380 8808 	msr	MSP, r0
 8009992:	f04f 0000 	mov.w	r0, #0
 8009996:	f380 8814 	msr	CONTROL, r0
 800999a:	b662      	cpsie	i
 800999c:	b661      	cpsie	f
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	df00      	svc	0
 80099a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099aa:	bf00      	nop
 80099ac:	e000ed08 	.word	0xe000ed08

080099b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099b6:	4b46      	ldr	r3, [pc, #280]	; (8009ad0 <xPortStartScheduler+0x120>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a46      	ldr	r2, [pc, #280]	; (8009ad4 <xPortStartScheduler+0x124>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d10a      	bne.n	80099d6 <xPortStartScheduler+0x26>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	613b      	str	r3, [r7, #16]
}
 80099d2:	bf00      	nop
 80099d4:	e7fe      	b.n	80099d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099d6:	4b3e      	ldr	r3, [pc, #248]	; (8009ad0 <xPortStartScheduler+0x120>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a3f      	ldr	r2, [pc, #252]	; (8009ad8 <xPortStartScheduler+0x128>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d10a      	bne.n	80099f6 <xPortStartScheduler+0x46>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60fb      	str	r3, [r7, #12]
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099f6:	4b39      	ldr	r3, [pc, #228]	; (8009adc <xPortStartScheduler+0x12c>)
 80099f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	22ff      	movs	r2, #255	; 0xff
 8009a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	4b31      	ldr	r3, [pc, #196]	; (8009ae0 <xPortStartScheduler+0x130>)
 8009a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a1e:	4b31      	ldr	r3, [pc, #196]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a20:	2207      	movs	r2, #7
 8009a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a24:	e009      	b.n	8009a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a26:	4b2f      	ldr	r3, [pc, #188]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	4a2d      	ldr	r2, [pc, #180]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a3a:	78fb      	ldrb	r3, [r7, #3]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a42:	2b80      	cmp	r3, #128	; 0x80
 8009a44:	d0ef      	beq.n	8009a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a46:	4b27      	ldr	r3, [pc, #156]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f1c3 0307 	rsb	r3, r3, #7
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d00a      	beq.n	8009a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	60bb      	str	r3, [r7, #8]
}
 8009a64:	bf00      	nop
 8009a66:	e7fe      	b.n	8009a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a68:	4b1e      	ldr	r3, [pc, #120]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	021b      	lsls	r3, r3, #8
 8009a6e:	4a1d      	ldr	r2, [pc, #116]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a72:	4b1c      	ldr	r3, [pc, #112]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a7a:	4a1a      	ldr	r2, [pc, #104]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a86:	4b18      	ldr	r3, [pc, #96]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a17      	ldr	r2, [pc, #92]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a92:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a14      	ldr	r2, [pc, #80]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a9e:	f000 f8dd 	bl	8009c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009aa2:	4b12      	ldr	r3, [pc, #72]	; (8009aec <xPortStartScheduler+0x13c>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009aa8:	f000 f8fc 	bl	8009ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009aac:	4b10      	ldr	r3, [pc, #64]	; (8009af0 <xPortStartScheduler+0x140>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a0f      	ldr	r2, [pc, #60]	; (8009af0 <xPortStartScheduler+0x140>)
 8009ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ab8:	f7ff ff66 	bl	8009988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009abc:	f7ff f846 	bl	8008b4c <vTaskSwitchContext>
	prvTaskExitError();
 8009ac0:	f7ff ff1c 	bl	80098fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	e000ed00 	.word	0xe000ed00
 8009ad4:	410fc271 	.word	0x410fc271
 8009ad8:	410fc270 	.word	0x410fc270
 8009adc:	e000e400 	.word	0xe000e400
 8009ae0:	20001704 	.word	0x20001704
 8009ae4:	20001708 	.word	0x20001708
 8009ae8:	e000ed20 	.word	0xe000ed20
 8009aec:	2000003c 	.word	0x2000003c
 8009af0:	e000ef34 	.word	0xe000ef34

08009af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
	__asm volatile
 8009afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afe:	f383 8811 	msr	BASEPRI, r3
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	f3bf 8f4f 	dsb	sy
 8009b0a:	607b      	str	r3, [r7, #4]
}
 8009b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3301      	adds	r3, #1
 8009b14:	4a0d      	ldr	r2, [pc, #52]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b18:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d10f      	bne.n	8009b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b20:	4b0b      	ldr	r3, [pc, #44]	; (8009b50 <vPortEnterCritical+0x5c>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	603b      	str	r3, [r7, #0]
}
 8009b3c:	bf00      	nop
 8009b3e:	e7fe      	b.n	8009b3e <vPortEnterCritical+0x4a>
	}
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	2000003c 	.word	0x2000003c
 8009b50:	e000ed04 	.word	0xe000ed04

08009b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b5a:	4b12      	ldr	r3, [pc, #72]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <vPortExitCritical+0x24>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	607b      	str	r3, [r7, #4]
}
 8009b74:	bf00      	nop
 8009b76:	e7fe      	b.n	8009b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b78:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	4a09      	ldr	r2, [pc, #36]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b82:	4b08      	ldr	r3, [pc, #32]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d105      	bne.n	8009b96 <vPortExitCritical+0x42>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	f383 8811 	msr	BASEPRI, r3
}
 8009b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b96:	bf00      	nop
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	2000003c 	.word	0x2000003c
	...

08009bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bb0:	f3ef 8009 	mrs	r0, PSP
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	4b15      	ldr	r3, [pc, #84]	; (8009c10 <pxCurrentTCBConst>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	f01e 0f10 	tst.w	lr, #16
 8009bc0:	bf08      	it	eq
 8009bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bca:	6010      	str	r0, [r2, #0]
 8009bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009bd4:	f380 8811 	msr	BASEPRI, r0
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f7fe ffb4 	bl	8008b4c <vTaskSwitchContext>
 8009be4:	f04f 0000 	mov.w	r0, #0
 8009be8:	f380 8811 	msr	BASEPRI, r0
 8009bec:	bc09      	pop	{r0, r3}
 8009bee:	6819      	ldr	r1, [r3, #0]
 8009bf0:	6808      	ldr	r0, [r1, #0]
 8009bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf6:	f01e 0f10 	tst.w	lr, #16
 8009bfa:	bf08      	it	eq
 8009bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c00:	f380 8809 	msr	PSP, r0
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	f3af 8000 	nop.w

08009c10 <pxCurrentTCBConst>:
 8009c10:	200010d8 	.word	0x200010d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop

08009c18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	607b      	str	r3, [r7, #4]
}
 8009c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c32:	f7fe fed1 	bl	80089d8 <xTaskIncrementTick>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d003      	beq.n	8009c44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c3c:	4b06      	ldr	r3, [pc, #24]	; (8009c58 <xPortSysTickHandler+0x40>)
 8009c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	2300      	movs	r3, #0
 8009c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	f383 8811 	msr	BASEPRI, r3
}
 8009c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c50:	bf00      	nop
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	e000ed04 	.word	0xe000ed04

08009c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c60:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <vPortSetupTimerInterrupt+0x34>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c66:	4b0b      	ldr	r3, [pc, #44]	; (8009c94 <vPortSetupTimerInterrupt+0x38>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <vPortSetupTimerInterrupt+0x3c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a0a      	ldr	r2, [pc, #40]	; (8009c9c <vPortSetupTimerInterrupt+0x40>)
 8009c72:	fba2 2303 	umull	r2, r3, r2, r3
 8009c76:	099b      	lsrs	r3, r3, #6
 8009c78:	4a09      	ldr	r2, [pc, #36]	; (8009ca0 <vPortSetupTimerInterrupt+0x44>)
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c7e:	4b04      	ldr	r3, [pc, #16]	; (8009c90 <vPortSetupTimerInterrupt+0x34>)
 8009c80:	2207      	movs	r2, #7
 8009c82:	601a      	str	r2, [r3, #0]
}
 8009c84:	bf00      	nop
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	e000e010 	.word	0xe000e010
 8009c94:	e000e018 	.word	0xe000e018
 8009c98:	20000030 	.word	0x20000030
 8009c9c:	10624dd3 	.word	0x10624dd3
 8009ca0:	e000e014 	.word	0xe000e014

08009ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009cb4 <vPortEnableVFP+0x10>
 8009ca8:	6801      	ldr	r1, [r0, #0]
 8009caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cae:	6001      	str	r1, [r0, #0]
 8009cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cb2:	bf00      	nop
 8009cb4:	e000ed88 	.word	0xe000ed88

08009cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cbe:	f3ef 8305 	mrs	r3, IPSR
 8009cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b0f      	cmp	r3, #15
 8009cc8:	d914      	bls.n	8009cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cca:	4a17      	ldr	r2, [pc, #92]	; (8009d28 <vPortValidateInterruptPriority+0x70>)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4413      	add	r3, r2
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cd4:	4b15      	ldr	r3, [pc, #84]	; (8009d2c <vPortValidateInterruptPriority+0x74>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	7afa      	ldrb	r2, [r7, #11]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d20a      	bcs.n	8009cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	607b      	str	r3, [r7, #4]
}
 8009cf0:	bf00      	nop
 8009cf2:	e7fe      	b.n	8009cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cf4:	4b0e      	ldr	r3, [pc, #56]	; (8009d30 <vPortValidateInterruptPriority+0x78>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009cfc:	4b0d      	ldr	r3, [pc, #52]	; (8009d34 <vPortValidateInterruptPriority+0x7c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d90a      	bls.n	8009d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	603b      	str	r3, [r7, #0]
}
 8009d16:	bf00      	nop
 8009d18:	e7fe      	b.n	8009d18 <vPortValidateInterruptPriority+0x60>
	}
 8009d1a:	bf00      	nop
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	e000e3f0 	.word	0xe000e3f0
 8009d2c:	20001704 	.word	0x20001704
 8009d30:	e000ed0c 	.word	0xe000ed0c
 8009d34:	20001708 	.word	0x20001708

08009d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08a      	sub	sp, #40	; 0x28
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d40:	2300      	movs	r3, #0
 8009d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d44:	f7fe fd7a 	bl	800883c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d48:	4b5b      	ldr	r3, [pc, #364]	; (8009eb8 <pvPortMalloc+0x180>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d50:	f000 f920 	bl	8009f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d54:	4b59      	ldr	r3, [pc, #356]	; (8009ebc <pvPortMalloc+0x184>)
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f040 8093 	bne.w	8009e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01d      	beq.n	8009da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009d68:	2208      	movs	r2, #8
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f003 0307 	and.w	r3, r3, #7
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d014      	beq.n	8009da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f023 0307 	bic.w	r3, r3, #7
 8009d80:	3308      	adds	r3, #8
 8009d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f003 0307 	and.w	r3, r3, #7
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <pvPortMalloc+0x6c>
	__asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	617b      	str	r3, [r7, #20]
}
 8009da0:	bf00      	nop
 8009da2:	e7fe      	b.n	8009da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d06e      	beq.n	8009e88 <pvPortMalloc+0x150>
 8009daa:	4b45      	ldr	r3, [pc, #276]	; (8009ec0 <pvPortMalloc+0x188>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d869      	bhi.n	8009e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009db4:	4b43      	ldr	r3, [pc, #268]	; (8009ec4 <pvPortMalloc+0x18c>)
 8009db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009db8:	4b42      	ldr	r3, [pc, #264]	; (8009ec4 <pvPortMalloc+0x18c>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dbe:	e004      	b.n	8009dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d903      	bls.n	8009ddc <pvPortMalloc+0xa4>
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1f1      	bne.n	8009dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ddc:	4b36      	ldr	r3, [pc, #216]	; (8009eb8 <pvPortMalloc+0x180>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d050      	beq.n	8009e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2208      	movs	r2, #8
 8009dec:	4413      	add	r3, r2
 8009dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	1ad2      	subs	r2, r2, r3
 8009e00:	2308      	movs	r3, #8
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d91f      	bls.n	8009e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <pvPortMalloc+0xf8>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	613b      	str	r3, [r7, #16]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	685a      	ldr	r2, [r3, #4]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	1ad2      	subs	r2, r2, r3
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e42:	69b8      	ldr	r0, [r7, #24]
 8009e44:	f000 f908 	bl	800a058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e48:	4b1d      	ldr	r3, [pc, #116]	; (8009ec0 <pvPortMalloc+0x188>)
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	4a1b      	ldr	r2, [pc, #108]	; (8009ec0 <pvPortMalloc+0x188>)
 8009e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e56:	4b1a      	ldr	r3, [pc, #104]	; (8009ec0 <pvPortMalloc+0x188>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	4b1b      	ldr	r3, [pc, #108]	; (8009ec8 <pvPortMalloc+0x190>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d203      	bcs.n	8009e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e62:	4b17      	ldr	r3, [pc, #92]	; (8009ec0 <pvPortMalloc+0x188>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a18      	ldr	r2, [pc, #96]	; (8009ec8 <pvPortMalloc+0x190>)
 8009e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	4b13      	ldr	r3, [pc, #76]	; (8009ebc <pvPortMalloc+0x184>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	431a      	orrs	r2, r3
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009e7e:	4b13      	ldr	r3, [pc, #76]	; (8009ecc <pvPortMalloc+0x194>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	3301      	adds	r3, #1
 8009e84:	4a11      	ldr	r2, [pc, #68]	; (8009ecc <pvPortMalloc+0x194>)
 8009e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e88:	f7fe fce6 	bl	8008858 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	f003 0307 	and.w	r3, r3, #7
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00a      	beq.n	8009eac <pvPortMalloc+0x174>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	60fb      	str	r3, [r7, #12]
}
 8009ea8:	bf00      	nop
 8009eaa:	e7fe      	b.n	8009eaa <pvPortMalloc+0x172>
	return pvReturn;
 8009eac:	69fb      	ldr	r3, [r7, #28]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3728      	adds	r7, #40	; 0x28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	20005314 	.word	0x20005314
 8009ebc:	20005328 	.word	0x20005328
 8009ec0:	20005318 	.word	0x20005318
 8009ec4:	2000530c 	.word	0x2000530c
 8009ec8:	2000531c 	.word	0x2000531c
 8009ecc:	20005320 	.word	0x20005320

08009ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d04d      	beq.n	8009f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ee2:	2308      	movs	r3, #8
 8009ee4:	425b      	negs	r3, r3
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	4413      	add	r3, r2
 8009eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	4b24      	ldr	r3, [pc, #144]	; (8009f88 <vPortFree+0xb8>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4013      	ands	r3, r2
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10a      	bne.n	8009f14 <vPortFree+0x44>
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	60fb      	str	r3, [r7, #12]
}
 8009f10:	bf00      	nop
 8009f12:	e7fe      	b.n	8009f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00a      	beq.n	8009f32 <vPortFree+0x62>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	60bb      	str	r3, [r7, #8]
}
 8009f2e:	bf00      	nop
 8009f30:	e7fe      	b.n	8009f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	4b14      	ldr	r3, [pc, #80]	; (8009f88 <vPortFree+0xb8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d01e      	beq.n	8009f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d11a      	bne.n	8009f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	4b0e      	ldr	r3, [pc, #56]	; (8009f88 <vPortFree+0xb8>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	43db      	mvns	r3, r3
 8009f52:	401a      	ands	r2, r3
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f58:	f7fe fc70 	bl	800883c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	4b0a      	ldr	r3, [pc, #40]	; (8009f8c <vPortFree+0xbc>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4413      	add	r3, r2
 8009f66:	4a09      	ldr	r2, [pc, #36]	; (8009f8c <vPortFree+0xbc>)
 8009f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f6a:	6938      	ldr	r0, [r7, #16]
 8009f6c:	f000 f874 	bl	800a058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <vPortFree+0xc0>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	3301      	adds	r3, #1
 8009f76:	4a06      	ldr	r2, [pc, #24]	; (8009f90 <vPortFree+0xc0>)
 8009f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f7a:	f7fe fc6d 	bl	8008858 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f7e:	bf00      	nop
 8009f80:	3718      	adds	r7, #24
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	20005328 	.word	0x20005328
 8009f8c:	20005318 	.word	0x20005318
 8009f90:	20005324 	.word	0x20005324

08009f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fa0:	4b27      	ldr	r3, [pc, #156]	; (800a040 <prvHeapInit+0xac>)
 8009fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f003 0307 	and.w	r3, r3, #7
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00c      	beq.n	8009fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	3307      	adds	r3, #7
 8009fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f023 0307 	bic.w	r3, r3, #7
 8009fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	4a1f      	ldr	r2, [pc, #124]	; (800a040 <prvHeapInit+0xac>)
 8009fc4:	4413      	add	r3, r2
 8009fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fcc:	4a1d      	ldr	r2, [pc, #116]	; (800a044 <prvHeapInit+0xb0>)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fd2:	4b1c      	ldr	r3, [pc, #112]	; (800a044 <prvHeapInit+0xb0>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	4413      	add	r3, r2
 8009fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009fe0:	2208      	movs	r2, #8
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	1a9b      	subs	r3, r3, r2
 8009fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f023 0307 	bic.w	r3, r3, #7
 8009fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4a15      	ldr	r2, [pc, #84]	; (800a048 <prvHeapInit+0xb4>)
 8009ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ff6:	4b14      	ldr	r3, [pc, #80]	; (800a048 <prvHeapInit+0xb4>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ffe:	4b12      	ldr	r3, [pc, #72]	; (800a048 <prvHeapInit+0xb4>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2200      	movs	r2, #0
 800a004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	1ad2      	subs	r2, r2, r3
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a014:	4b0c      	ldr	r3, [pc, #48]	; (800a048 <prvHeapInit+0xb4>)
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	4a0a      	ldr	r2, [pc, #40]	; (800a04c <prvHeapInit+0xb8>)
 800a022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	4a09      	ldr	r2, [pc, #36]	; (800a050 <prvHeapInit+0xbc>)
 800a02a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a02c:	4b09      	ldr	r3, [pc, #36]	; (800a054 <prvHeapInit+0xc0>)
 800a02e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a032:	601a      	str	r2, [r3, #0]
}
 800a034:	bf00      	nop
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	2000170c 	.word	0x2000170c
 800a044:	2000530c 	.word	0x2000530c
 800a048:	20005314 	.word	0x20005314
 800a04c:	2000531c 	.word	0x2000531c
 800a050:	20005318 	.word	0x20005318
 800a054:	20005328 	.word	0x20005328

0800a058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a060:	4b28      	ldr	r3, [pc, #160]	; (800a104 <prvInsertBlockIntoFreeList+0xac>)
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	e002      	b.n	800a06c <prvInsertBlockIntoFreeList+0x14>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	60fb      	str	r3, [r7, #12]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	429a      	cmp	r2, r3
 800a074:	d8f7      	bhi.n	800a066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	4413      	add	r3, r2
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	429a      	cmp	r2, r3
 800a086:	d108      	bne.n	800a09a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	441a      	add	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	68ba      	ldr	r2, [r7, #8]
 800a0a4:	441a      	add	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d118      	bne.n	800a0e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	4b15      	ldr	r3, [pc, #84]	; (800a108 <prvInsertBlockIntoFreeList+0xb0>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d00d      	beq.n	800a0d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	685a      	ldr	r2, [r3, #4]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	441a      	add	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	e008      	b.n	800a0e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0d6:	4b0c      	ldr	r3, [pc, #48]	; (800a108 <prvInsertBlockIntoFreeList+0xb0>)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	e003      	b.n	800a0e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d002      	beq.n	800a0f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0f6:	bf00      	nop
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	2000530c 	.word	0x2000530c
 800a108:	20005314 	.word	0x20005314

0800a10c <__errno>:
 800a10c:	4b01      	ldr	r3, [pc, #4]	; (800a114 <__errno+0x8>)
 800a10e:	6818      	ldr	r0, [r3, #0]
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	20000040 	.word	0x20000040

0800a118 <std>:
 800a118:	2300      	movs	r3, #0
 800a11a:	b510      	push	{r4, lr}
 800a11c:	4604      	mov	r4, r0
 800a11e:	e9c0 3300 	strd	r3, r3, [r0]
 800a122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a126:	6083      	str	r3, [r0, #8]
 800a128:	8181      	strh	r1, [r0, #12]
 800a12a:	6643      	str	r3, [r0, #100]	; 0x64
 800a12c:	81c2      	strh	r2, [r0, #14]
 800a12e:	6183      	str	r3, [r0, #24]
 800a130:	4619      	mov	r1, r3
 800a132:	2208      	movs	r2, #8
 800a134:	305c      	adds	r0, #92	; 0x5c
 800a136:	f000 f91a 	bl	800a36e <memset>
 800a13a:	4b05      	ldr	r3, [pc, #20]	; (800a150 <std+0x38>)
 800a13c:	6263      	str	r3, [r4, #36]	; 0x24
 800a13e:	4b05      	ldr	r3, [pc, #20]	; (800a154 <std+0x3c>)
 800a140:	62a3      	str	r3, [r4, #40]	; 0x28
 800a142:	4b05      	ldr	r3, [pc, #20]	; (800a158 <std+0x40>)
 800a144:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a146:	4b05      	ldr	r3, [pc, #20]	; (800a15c <std+0x44>)
 800a148:	6224      	str	r4, [r4, #32]
 800a14a:	6323      	str	r3, [r4, #48]	; 0x30
 800a14c:	bd10      	pop	{r4, pc}
 800a14e:	bf00      	nop
 800a150:	0800a6b9 	.word	0x0800a6b9
 800a154:	0800a6db 	.word	0x0800a6db
 800a158:	0800a713 	.word	0x0800a713
 800a15c:	0800a737 	.word	0x0800a737

0800a160 <_cleanup_r>:
 800a160:	4901      	ldr	r1, [pc, #4]	; (800a168 <_cleanup_r+0x8>)
 800a162:	f000 b8af 	b.w	800a2c4 <_fwalk_reent>
 800a166:	bf00      	nop
 800a168:	0800aa11 	.word	0x0800aa11

0800a16c <__sfmoreglue>:
 800a16c:	b570      	push	{r4, r5, r6, lr}
 800a16e:	2268      	movs	r2, #104	; 0x68
 800a170:	1e4d      	subs	r5, r1, #1
 800a172:	4355      	muls	r5, r2
 800a174:	460e      	mov	r6, r1
 800a176:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a17a:	f000 f921 	bl	800a3c0 <_malloc_r>
 800a17e:	4604      	mov	r4, r0
 800a180:	b140      	cbz	r0, 800a194 <__sfmoreglue+0x28>
 800a182:	2100      	movs	r1, #0
 800a184:	e9c0 1600 	strd	r1, r6, [r0]
 800a188:	300c      	adds	r0, #12
 800a18a:	60a0      	str	r0, [r4, #8]
 800a18c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a190:	f000 f8ed 	bl	800a36e <memset>
 800a194:	4620      	mov	r0, r4
 800a196:	bd70      	pop	{r4, r5, r6, pc}

0800a198 <__sfp_lock_acquire>:
 800a198:	4801      	ldr	r0, [pc, #4]	; (800a1a0 <__sfp_lock_acquire+0x8>)
 800a19a:	f000 b8d8 	b.w	800a34e <__retarget_lock_acquire_recursive>
 800a19e:	bf00      	nop
 800a1a0:	2000532d 	.word	0x2000532d

0800a1a4 <__sfp_lock_release>:
 800a1a4:	4801      	ldr	r0, [pc, #4]	; (800a1ac <__sfp_lock_release+0x8>)
 800a1a6:	f000 b8d3 	b.w	800a350 <__retarget_lock_release_recursive>
 800a1aa:	bf00      	nop
 800a1ac:	2000532d 	.word	0x2000532d

0800a1b0 <__sinit_lock_acquire>:
 800a1b0:	4801      	ldr	r0, [pc, #4]	; (800a1b8 <__sinit_lock_acquire+0x8>)
 800a1b2:	f000 b8cc 	b.w	800a34e <__retarget_lock_acquire_recursive>
 800a1b6:	bf00      	nop
 800a1b8:	2000532e 	.word	0x2000532e

0800a1bc <__sinit_lock_release>:
 800a1bc:	4801      	ldr	r0, [pc, #4]	; (800a1c4 <__sinit_lock_release+0x8>)
 800a1be:	f000 b8c7 	b.w	800a350 <__retarget_lock_release_recursive>
 800a1c2:	bf00      	nop
 800a1c4:	2000532e 	.word	0x2000532e

0800a1c8 <__sinit>:
 800a1c8:	b510      	push	{r4, lr}
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	f7ff fff0 	bl	800a1b0 <__sinit_lock_acquire>
 800a1d0:	69a3      	ldr	r3, [r4, #24]
 800a1d2:	b11b      	cbz	r3, 800a1dc <__sinit+0x14>
 800a1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1d8:	f7ff bff0 	b.w	800a1bc <__sinit_lock_release>
 800a1dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a1e0:	6523      	str	r3, [r4, #80]	; 0x50
 800a1e2:	4b13      	ldr	r3, [pc, #76]	; (800a230 <__sinit+0x68>)
 800a1e4:	4a13      	ldr	r2, [pc, #76]	; (800a234 <__sinit+0x6c>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a1ea:	42a3      	cmp	r3, r4
 800a1ec:	bf04      	itt	eq
 800a1ee:	2301      	moveq	r3, #1
 800a1f0:	61a3      	streq	r3, [r4, #24]
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f000 f820 	bl	800a238 <__sfp>
 800a1f8:	6060      	str	r0, [r4, #4]
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f000 f81c 	bl	800a238 <__sfp>
 800a200:	60a0      	str	r0, [r4, #8]
 800a202:	4620      	mov	r0, r4
 800a204:	f000 f818 	bl	800a238 <__sfp>
 800a208:	2200      	movs	r2, #0
 800a20a:	60e0      	str	r0, [r4, #12]
 800a20c:	2104      	movs	r1, #4
 800a20e:	6860      	ldr	r0, [r4, #4]
 800a210:	f7ff ff82 	bl	800a118 <std>
 800a214:	68a0      	ldr	r0, [r4, #8]
 800a216:	2201      	movs	r2, #1
 800a218:	2109      	movs	r1, #9
 800a21a:	f7ff ff7d 	bl	800a118 <std>
 800a21e:	68e0      	ldr	r0, [r4, #12]
 800a220:	2202      	movs	r2, #2
 800a222:	2112      	movs	r1, #18
 800a224:	f7ff ff78 	bl	800a118 <std>
 800a228:	2301      	movs	r3, #1
 800a22a:	61a3      	str	r3, [r4, #24]
 800a22c:	e7d2      	b.n	800a1d4 <__sinit+0xc>
 800a22e:	bf00      	nop
 800a230:	0800b574 	.word	0x0800b574
 800a234:	0800a161 	.word	0x0800a161

0800a238 <__sfp>:
 800a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23a:	4607      	mov	r7, r0
 800a23c:	f7ff ffac 	bl	800a198 <__sfp_lock_acquire>
 800a240:	4b1e      	ldr	r3, [pc, #120]	; (800a2bc <__sfp+0x84>)
 800a242:	681e      	ldr	r6, [r3, #0]
 800a244:	69b3      	ldr	r3, [r6, #24]
 800a246:	b913      	cbnz	r3, 800a24e <__sfp+0x16>
 800a248:	4630      	mov	r0, r6
 800a24a:	f7ff ffbd 	bl	800a1c8 <__sinit>
 800a24e:	3648      	adds	r6, #72	; 0x48
 800a250:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a254:	3b01      	subs	r3, #1
 800a256:	d503      	bpl.n	800a260 <__sfp+0x28>
 800a258:	6833      	ldr	r3, [r6, #0]
 800a25a:	b30b      	cbz	r3, 800a2a0 <__sfp+0x68>
 800a25c:	6836      	ldr	r6, [r6, #0]
 800a25e:	e7f7      	b.n	800a250 <__sfp+0x18>
 800a260:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a264:	b9d5      	cbnz	r5, 800a29c <__sfp+0x64>
 800a266:	4b16      	ldr	r3, [pc, #88]	; (800a2c0 <__sfp+0x88>)
 800a268:	60e3      	str	r3, [r4, #12]
 800a26a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a26e:	6665      	str	r5, [r4, #100]	; 0x64
 800a270:	f000 f86c 	bl	800a34c <__retarget_lock_init_recursive>
 800a274:	f7ff ff96 	bl	800a1a4 <__sfp_lock_release>
 800a278:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a27c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a280:	6025      	str	r5, [r4, #0]
 800a282:	61a5      	str	r5, [r4, #24]
 800a284:	2208      	movs	r2, #8
 800a286:	4629      	mov	r1, r5
 800a288:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a28c:	f000 f86f 	bl	800a36e <memset>
 800a290:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a294:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a298:	4620      	mov	r0, r4
 800a29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a29c:	3468      	adds	r4, #104	; 0x68
 800a29e:	e7d9      	b.n	800a254 <__sfp+0x1c>
 800a2a0:	2104      	movs	r1, #4
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	f7ff ff62 	bl	800a16c <__sfmoreglue>
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	6030      	str	r0, [r6, #0]
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d1d5      	bne.n	800a25c <__sfp+0x24>
 800a2b0:	f7ff ff78 	bl	800a1a4 <__sfp_lock_release>
 800a2b4:	230c      	movs	r3, #12
 800a2b6:	603b      	str	r3, [r7, #0]
 800a2b8:	e7ee      	b.n	800a298 <__sfp+0x60>
 800a2ba:	bf00      	nop
 800a2bc:	0800b574 	.word	0x0800b574
 800a2c0:	ffff0001 	.word	0xffff0001

0800a2c4 <_fwalk_reent>:
 800a2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c8:	4606      	mov	r6, r0
 800a2ca:	4688      	mov	r8, r1
 800a2cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a2d0:	2700      	movs	r7, #0
 800a2d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2d6:	f1b9 0901 	subs.w	r9, r9, #1
 800a2da:	d505      	bpl.n	800a2e8 <_fwalk_reent+0x24>
 800a2dc:	6824      	ldr	r4, [r4, #0]
 800a2de:	2c00      	cmp	r4, #0
 800a2e0:	d1f7      	bne.n	800a2d2 <_fwalk_reent+0xe>
 800a2e2:	4638      	mov	r0, r7
 800a2e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2e8:	89ab      	ldrh	r3, [r5, #12]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d907      	bls.n	800a2fe <_fwalk_reent+0x3a>
 800a2ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	d003      	beq.n	800a2fe <_fwalk_reent+0x3a>
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	47c0      	blx	r8
 800a2fc:	4307      	orrs	r7, r0
 800a2fe:	3568      	adds	r5, #104	; 0x68
 800a300:	e7e9      	b.n	800a2d6 <_fwalk_reent+0x12>
	...

0800a304 <__libc_init_array>:
 800a304:	b570      	push	{r4, r5, r6, lr}
 800a306:	4d0d      	ldr	r5, [pc, #52]	; (800a33c <__libc_init_array+0x38>)
 800a308:	4c0d      	ldr	r4, [pc, #52]	; (800a340 <__libc_init_array+0x3c>)
 800a30a:	1b64      	subs	r4, r4, r5
 800a30c:	10a4      	asrs	r4, r4, #2
 800a30e:	2600      	movs	r6, #0
 800a310:	42a6      	cmp	r6, r4
 800a312:	d109      	bne.n	800a328 <__libc_init_array+0x24>
 800a314:	4d0b      	ldr	r5, [pc, #44]	; (800a344 <__libc_init_array+0x40>)
 800a316:	4c0c      	ldr	r4, [pc, #48]	; (800a348 <__libc_init_array+0x44>)
 800a318:	f000 ffa8 	bl	800b26c <_init>
 800a31c:	1b64      	subs	r4, r4, r5
 800a31e:	10a4      	asrs	r4, r4, #2
 800a320:	2600      	movs	r6, #0
 800a322:	42a6      	cmp	r6, r4
 800a324:	d105      	bne.n	800a332 <__libc_init_array+0x2e>
 800a326:	bd70      	pop	{r4, r5, r6, pc}
 800a328:	f855 3b04 	ldr.w	r3, [r5], #4
 800a32c:	4798      	blx	r3
 800a32e:	3601      	adds	r6, #1
 800a330:	e7ee      	b.n	800a310 <__libc_init_array+0xc>
 800a332:	f855 3b04 	ldr.w	r3, [r5], #4
 800a336:	4798      	blx	r3
 800a338:	3601      	adds	r6, #1
 800a33a:	e7f2      	b.n	800a322 <__libc_init_array+0x1e>
 800a33c:	0800b5b4 	.word	0x0800b5b4
 800a340:	0800b5b4 	.word	0x0800b5b4
 800a344:	0800b5b4 	.word	0x0800b5b4
 800a348:	0800b5b8 	.word	0x0800b5b8

0800a34c <__retarget_lock_init_recursive>:
 800a34c:	4770      	bx	lr

0800a34e <__retarget_lock_acquire_recursive>:
 800a34e:	4770      	bx	lr

0800a350 <__retarget_lock_release_recursive>:
 800a350:	4770      	bx	lr

0800a352 <memcpy>:
 800a352:	440a      	add	r2, r1
 800a354:	4291      	cmp	r1, r2
 800a356:	f100 33ff 	add.w	r3, r0, #4294967295
 800a35a:	d100      	bne.n	800a35e <memcpy+0xc>
 800a35c:	4770      	bx	lr
 800a35e:	b510      	push	{r4, lr}
 800a360:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a364:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a368:	4291      	cmp	r1, r2
 800a36a:	d1f9      	bne.n	800a360 <memcpy+0xe>
 800a36c:	bd10      	pop	{r4, pc}

0800a36e <memset>:
 800a36e:	4402      	add	r2, r0
 800a370:	4603      	mov	r3, r0
 800a372:	4293      	cmp	r3, r2
 800a374:	d100      	bne.n	800a378 <memset+0xa>
 800a376:	4770      	bx	lr
 800a378:	f803 1b01 	strb.w	r1, [r3], #1
 800a37c:	e7f9      	b.n	800a372 <memset+0x4>
	...

0800a380 <sbrk_aligned>:
 800a380:	b570      	push	{r4, r5, r6, lr}
 800a382:	4e0e      	ldr	r6, [pc, #56]	; (800a3bc <sbrk_aligned+0x3c>)
 800a384:	460c      	mov	r4, r1
 800a386:	6831      	ldr	r1, [r6, #0]
 800a388:	4605      	mov	r5, r0
 800a38a:	b911      	cbnz	r1, 800a392 <sbrk_aligned+0x12>
 800a38c:	f000 f984 	bl	800a698 <_sbrk_r>
 800a390:	6030      	str	r0, [r6, #0]
 800a392:	4621      	mov	r1, r4
 800a394:	4628      	mov	r0, r5
 800a396:	f000 f97f 	bl	800a698 <_sbrk_r>
 800a39a:	1c43      	adds	r3, r0, #1
 800a39c:	d00a      	beq.n	800a3b4 <sbrk_aligned+0x34>
 800a39e:	1cc4      	adds	r4, r0, #3
 800a3a0:	f024 0403 	bic.w	r4, r4, #3
 800a3a4:	42a0      	cmp	r0, r4
 800a3a6:	d007      	beq.n	800a3b8 <sbrk_aligned+0x38>
 800a3a8:	1a21      	subs	r1, r4, r0
 800a3aa:	4628      	mov	r0, r5
 800a3ac:	f000 f974 	bl	800a698 <_sbrk_r>
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	d101      	bne.n	800a3b8 <sbrk_aligned+0x38>
 800a3b4:	f04f 34ff 	mov.w	r4, #4294967295
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	bd70      	pop	{r4, r5, r6, pc}
 800a3bc:	20005334 	.word	0x20005334

0800a3c0 <_malloc_r>:
 800a3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c4:	1ccd      	adds	r5, r1, #3
 800a3c6:	f025 0503 	bic.w	r5, r5, #3
 800a3ca:	3508      	adds	r5, #8
 800a3cc:	2d0c      	cmp	r5, #12
 800a3ce:	bf38      	it	cc
 800a3d0:	250c      	movcc	r5, #12
 800a3d2:	2d00      	cmp	r5, #0
 800a3d4:	4607      	mov	r7, r0
 800a3d6:	db01      	blt.n	800a3dc <_malloc_r+0x1c>
 800a3d8:	42a9      	cmp	r1, r5
 800a3da:	d905      	bls.n	800a3e8 <_malloc_r+0x28>
 800a3dc:	230c      	movs	r3, #12
 800a3de:	603b      	str	r3, [r7, #0]
 800a3e0:	2600      	movs	r6, #0
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e8:	4e2e      	ldr	r6, [pc, #184]	; (800a4a4 <_malloc_r+0xe4>)
 800a3ea:	f000 fbc5 	bl	800ab78 <__malloc_lock>
 800a3ee:	6833      	ldr	r3, [r6, #0]
 800a3f0:	461c      	mov	r4, r3
 800a3f2:	bb34      	cbnz	r4, 800a442 <_malloc_r+0x82>
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	4638      	mov	r0, r7
 800a3f8:	f7ff ffc2 	bl	800a380 <sbrk_aligned>
 800a3fc:	1c43      	adds	r3, r0, #1
 800a3fe:	4604      	mov	r4, r0
 800a400:	d14d      	bne.n	800a49e <_malloc_r+0xde>
 800a402:	6834      	ldr	r4, [r6, #0]
 800a404:	4626      	mov	r6, r4
 800a406:	2e00      	cmp	r6, #0
 800a408:	d140      	bne.n	800a48c <_malloc_r+0xcc>
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	4631      	mov	r1, r6
 800a40e:	4638      	mov	r0, r7
 800a410:	eb04 0803 	add.w	r8, r4, r3
 800a414:	f000 f940 	bl	800a698 <_sbrk_r>
 800a418:	4580      	cmp	r8, r0
 800a41a:	d13a      	bne.n	800a492 <_malloc_r+0xd2>
 800a41c:	6821      	ldr	r1, [r4, #0]
 800a41e:	3503      	adds	r5, #3
 800a420:	1a6d      	subs	r5, r5, r1
 800a422:	f025 0503 	bic.w	r5, r5, #3
 800a426:	3508      	adds	r5, #8
 800a428:	2d0c      	cmp	r5, #12
 800a42a:	bf38      	it	cc
 800a42c:	250c      	movcc	r5, #12
 800a42e:	4629      	mov	r1, r5
 800a430:	4638      	mov	r0, r7
 800a432:	f7ff ffa5 	bl	800a380 <sbrk_aligned>
 800a436:	3001      	adds	r0, #1
 800a438:	d02b      	beq.n	800a492 <_malloc_r+0xd2>
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	442b      	add	r3, r5
 800a43e:	6023      	str	r3, [r4, #0]
 800a440:	e00e      	b.n	800a460 <_malloc_r+0xa0>
 800a442:	6822      	ldr	r2, [r4, #0]
 800a444:	1b52      	subs	r2, r2, r5
 800a446:	d41e      	bmi.n	800a486 <_malloc_r+0xc6>
 800a448:	2a0b      	cmp	r2, #11
 800a44a:	d916      	bls.n	800a47a <_malloc_r+0xba>
 800a44c:	1961      	adds	r1, r4, r5
 800a44e:	42a3      	cmp	r3, r4
 800a450:	6025      	str	r5, [r4, #0]
 800a452:	bf18      	it	ne
 800a454:	6059      	strne	r1, [r3, #4]
 800a456:	6863      	ldr	r3, [r4, #4]
 800a458:	bf08      	it	eq
 800a45a:	6031      	streq	r1, [r6, #0]
 800a45c:	5162      	str	r2, [r4, r5]
 800a45e:	604b      	str	r3, [r1, #4]
 800a460:	4638      	mov	r0, r7
 800a462:	f104 060b 	add.w	r6, r4, #11
 800a466:	f000 fb8d 	bl	800ab84 <__malloc_unlock>
 800a46a:	f026 0607 	bic.w	r6, r6, #7
 800a46e:	1d23      	adds	r3, r4, #4
 800a470:	1af2      	subs	r2, r6, r3
 800a472:	d0b6      	beq.n	800a3e2 <_malloc_r+0x22>
 800a474:	1b9b      	subs	r3, r3, r6
 800a476:	50a3      	str	r3, [r4, r2]
 800a478:	e7b3      	b.n	800a3e2 <_malloc_r+0x22>
 800a47a:	6862      	ldr	r2, [r4, #4]
 800a47c:	42a3      	cmp	r3, r4
 800a47e:	bf0c      	ite	eq
 800a480:	6032      	streq	r2, [r6, #0]
 800a482:	605a      	strne	r2, [r3, #4]
 800a484:	e7ec      	b.n	800a460 <_malloc_r+0xa0>
 800a486:	4623      	mov	r3, r4
 800a488:	6864      	ldr	r4, [r4, #4]
 800a48a:	e7b2      	b.n	800a3f2 <_malloc_r+0x32>
 800a48c:	4634      	mov	r4, r6
 800a48e:	6876      	ldr	r6, [r6, #4]
 800a490:	e7b9      	b.n	800a406 <_malloc_r+0x46>
 800a492:	230c      	movs	r3, #12
 800a494:	603b      	str	r3, [r7, #0]
 800a496:	4638      	mov	r0, r7
 800a498:	f000 fb74 	bl	800ab84 <__malloc_unlock>
 800a49c:	e7a1      	b.n	800a3e2 <_malloc_r+0x22>
 800a49e:	6025      	str	r5, [r4, #0]
 800a4a0:	e7de      	b.n	800a460 <_malloc_r+0xa0>
 800a4a2:	bf00      	nop
 800a4a4:	20005330 	.word	0x20005330

0800a4a8 <iprintf>:
 800a4a8:	b40f      	push	{r0, r1, r2, r3}
 800a4aa:	4b0a      	ldr	r3, [pc, #40]	; (800a4d4 <iprintf+0x2c>)
 800a4ac:	b513      	push	{r0, r1, r4, lr}
 800a4ae:	681c      	ldr	r4, [r3, #0]
 800a4b0:	b124      	cbz	r4, 800a4bc <iprintf+0x14>
 800a4b2:	69a3      	ldr	r3, [r4, #24]
 800a4b4:	b913      	cbnz	r3, 800a4bc <iprintf+0x14>
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f7ff fe86 	bl	800a1c8 <__sinit>
 800a4bc:	ab05      	add	r3, sp, #20
 800a4be:	9a04      	ldr	r2, [sp, #16]
 800a4c0:	68a1      	ldr	r1, [r4, #8]
 800a4c2:	9301      	str	r3, [sp, #4]
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f000 fbd9 	bl	800ac7c <_vfiprintf_r>
 800a4ca:	b002      	add	sp, #8
 800a4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4d0:	b004      	add	sp, #16
 800a4d2:	4770      	bx	lr
 800a4d4:	20000040 	.word	0x20000040

0800a4d8 <_puts_r>:
 800a4d8:	b570      	push	{r4, r5, r6, lr}
 800a4da:	460e      	mov	r6, r1
 800a4dc:	4605      	mov	r5, r0
 800a4de:	b118      	cbz	r0, 800a4e8 <_puts_r+0x10>
 800a4e0:	6983      	ldr	r3, [r0, #24]
 800a4e2:	b90b      	cbnz	r3, 800a4e8 <_puts_r+0x10>
 800a4e4:	f7ff fe70 	bl	800a1c8 <__sinit>
 800a4e8:	69ab      	ldr	r3, [r5, #24]
 800a4ea:	68ac      	ldr	r4, [r5, #8]
 800a4ec:	b913      	cbnz	r3, 800a4f4 <_puts_r+0x1c>
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	f7ff fe6a 	bl	800a1c8 <__sinit>
 800a4f4:	4b2c      	ldr	r3, [pc, #176]	; (800a5a8 <_puts_r+0xd0>)
 800a4f6:	429c      	cmp	r4, r3
 800a4f8:	d120      	bne.n	800a53c <_puts_r+0x64>
 800a4fa:	686c      	ldr	r4, [r5, #4]
 800a4fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4fe:	07db      	lsls	r3, r3, #31
 800a500:	d405      	bmi.n	800a50e <_puts_r+0x36>
 800a502:	89a3      	ldrh	r3, [r4, #12]
 800a504:	0598      	lsls	r0, r3, #22
 800a506:	d402      	bmi.n	800a50e <_puts_r+0x36>
 800a508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a50a:	f7ff ff20 	bl	800a34e <__retarget_lock_acquire_recursive>
 800a50e:	89a3      	ldrh	r3, [r4, #12]
 800a510:	0719      	lsls	r1, r3, #28
 800a512:	d51d      	bpl.n	800a550 <_puts_r+0x78>
 800a514:	6923      	ldr	r3, [r4, #16]
 800a516:	b1db      	cbz	r3, 800a550 <_puts_r+0x78>
 800a518:	3e01      	subs	r6, #1
 800a51a:	68a3      	ldr	r3, [r4, #8]
 800a51c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a520:	3b01      	subs	r3, #1
 800a522:	60a3      	str	r3, [r4, #8]
 800a524:	bb39      	cbnz	r1, 800a576 <_puts_r+0x9e>
 800a526:	2b00      	cmp	r3, #0
 800a528:	da38      	bge.n	800a59c <_puts_r+0xc4>
 800a52a:	4622      	mov	r2, r4
 800a52c:	210a      	movs	r1, #10
 800a52e:	4628      	mov	r0, r5
 800a530:	f000 f906 	bl	800a740 <__swbuf_r>
 800a534:	3001      	adds	r0, #1
 800a536:	d011      	beq.n	800a55c <_puts_r+0x84>
 800a538:	250a      	movs	r5, #10
 800a53a:	e011      	b.n	800a560 <_puts_r+0x88>
 800a53c:	4b1b      	ldr	r3, [pc, #108]	; (800a5ac <_puts_r+0xd4>)
 800a53e:	429c      	cmp	r4, r3
 800a540:	d101      	bne.n	800a546 <_puts_r+0x6e>
 800a542:	68ac      	ldr	r4, [r5, #8]
 800a544:	e7da      	b.n	800a4fc <_puts_r+0x24>
 800a546:	4b1a      	ldr	r3, [pc, #104]	; (800a5b0 <_puts_r+0xd8>)
 800a548:	429c      	cmp	r4, r3
 800a54a:	bf08      	it	eq
 800a54c:	68ec      	ldreq	r4, [r5, #12]
 800a54e:	e7d5      	b.n	800a4fc <_puts_r+0x24>
 800a550:	4621      	mov	r1, r4
 800a552:	4628      	mov	r0, r5
 800a554:	f000 f958 	bl	800a808 <__swsetup_r>
 800a558:	2800      	cmp	r0, #0
 800a55a:	d0dd      	beq.n	800a518 <_puts_r+0x40>
 800a55c:	f04f 35ff 	mov.w	r5, #4294967295
 800a560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a562:	07da      	lsls	r2, r3, #31
 800a564:	d405      	bmi.n	800a572 <_puts_r+0x9a>
 800a566:	89a3      	ldrh	r3, [r4, #12]
 800a568:	059b      	lsls	r3, r3, #22
 800a56a:	d402      	bmi.n	800a572 <_puts_r+0x9a>
 800a56c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a56e:	f7ff feef 	bl	800a350 <__retarget_lock_release_recursive>
 800a572:	4628      	mov	r0, r5
 800a574:	bd70      	pop	{r4, r5, r6, pc}
 800a576:	2b00      	cmp	r3, #0
 800a578:	da04      	bge.n	800a584 <_puts_r+0xac>
 800a57a:	69a2      	ldr	r2, [r4, #24]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	dc06      	bgt.n	800a58e <_puts_r+0xb6>
 800a580:	290a      	cmp	r1, #10
 800a582:	d004      	beq.n	800a58e <_puts_r+0xb6>
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	1c5a      	adds	r2, r3, #1
 800a588:	6022      	str	r2, [r4, #0]
 800a58a:	7019      	strb	r1, [r3, #0]
 800a58c:	e7c5      	b.n	800a51a <_puts_r+0x42>
 800a58e:	4622      	mov	r2, r4
 800a590:	4628      	mov	r0, r5
 800a592:	f000 f8d5 	bl	800a740 <__swbuf_r>
 800a596:	3001      	adds	r0, #1
 800a598:	d1bf      	bne.n	800a51a <_puts_r+0x42>
 800a59a:	e7df      	b.n	800a55c <_puts_r+0x84>
 800a59c:	6823      	ldr	r3, [r4, #0]
 800a59e:	250a      	movs	r5, #10
 800a5a0:	1c5a      	adds	r2, r3, #1
 800a5a2:	6022      	str	r2, [r4, #0]
 800a5a4:	701d      	strb	r5, [r3, #0]
 800a5a6:	e7db      	b.n	800a560 <_puts_r+0x88>
 800a5a8:	0800b534 	.word	0x0800b534
 800a5ac:	0800b554 	.word	0x0800b554
 800a5b0:	0800b514 	.word	0x0800b514

0800a5b4 <puts>:
 800a5b4:	4b02      	ldr	r3, [pc, #8]	; (800a5c0 <puts+0xc>)
 800a5b6:	4601      	mov	r1, r0
 800a5b8:	6818      	ldr	r0, [r3, #0]
 800a5ba:	f7ff bf8d 	b.w	800a4d8 <_puts_r>
 800a5be:	bf00      	nop
 800a5c0:	20000040 	.word	0x20000040

0800a5c4 <cleanup_glue>:
 800a5c4:	b538      	push	{r3, r4, r5, lr}
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	6809      	ldr	r1, [r1, #0]
 800a5ca:	4605      	mov	r5, r0
 800a5cc:	b109      	cbz	r1, 800a5d2 <cleanup_glue+0xe>
 800a5ce:	f7ff fff9 	bl	800a5c4 <cleanup_glue>
 800a5d2:	4621      	mov	r1, r4
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5da:	f000 bad9 	b.w	800ab90 <_free_r>
	...

0800a5e0 <_reclaim_reent>:
 800a5e0:	4b2c      	ldr	r3, [pc, #176]	; (800a694 <_reclaim_reent+0xb4>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4283      	cmp	r3, r0
 800a5e6:	b570      	push	{r4, r5, r6, lr}
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	d051      	beq.n	800a690 <_reclaim_reent+0xb0>
 800a5ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a5ee:	b143      	cbz	r3, 800a602 <_reclaim_reent+0x22>
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d14a      	bne.n	800a68c <_reclaim_reent+0xac>
 800a5f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5f8:	6819      	ldr	r1, [r3, #0]
 800a5fa:	b111      	cbz	r1, 800a602 <_reclaim_reent+0x22>
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f000 fac7 	bl	800ab90 <_free_r>
 800a602:	6961      	ldr	r1, [r4, #20]
 800a604:	b111      	cbz	r1, 800a60c <_reclaim_reent+0x2c>
 800a606:	4620      	mov	r0, r4
 800a608:	f000 fac2 	bl	800ab90 <_free_r>
 800a60c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a60e:	b111      	cbz	r1, 800a616 <_reclaim_reent+0x36>
 800a610:	4620      	mov	r0, r4
 800a612:	f000 fabd 	bl	800ab90 <_free_r>
 800a616:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a618:	b111      	cbz	r1, 800a620 <_reclaim_reent+0x40>
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 fab8 	bl	800ab90 <_free_r>
 800a620:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a622:	b111      	cbz	r1, 800a62a <_reclaim_reent+0x4a>
 800a624:	4620      	mov	r0, r4
 800a626:	f000 fab3 	bl	800ab90 <_free_r>
 800a62a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a62c:	b111      	cbz	r1, 800a634 <_reclaim_reent+0x54>
 800a62e:	4620      	mov	r0, r4
 800a630:	f000 faae 	bl	800ab90 <_free_r>
 800a634:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a636:	b111      	cbz	r1, 800a63e <_reclaim_reent+0x5e>
 800a638:	4620      	mov	r0, r4
 800a63a:	f000 faa9 	bl	800ab90 <_free_r>
 800a63e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a640:	b111      	cbz	r1, 800a648 <_reclaim_reent+0x68>
 800a642:	4620      	mov	r0, r4
 800a644:	f000 faa4 	bl	800ab90 <_free_r>
 800a648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a64a:	b111      	cbz	r1, 800a652 <_reclaim_reent+0x72>
 800a64c:	4620      	mov	r0, r4
 800a64e:	f000 fa9f 	bl	800ab90 <_free_r>
 800a652:	69a3      	ldr	r3, [r4, #24]
 800a654:	b1e3      	cbz	r3, 800a690 <_reclaim_reent+0xb0>
 800a656:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a658:	4620      	mov	r0, r4
 800a65a:	4798      	blx	r3
 800a65c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a65e:	b1b9      	cbz	r1, 800a690 <_reclaim_reent+0xb0>
 800a660:	4620      	mov	r0, r4
 800a662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a666:	f7ff bfad 	b.w	800a5c4 <cleanup_glue>
 800a66a:	5949      	ldr	r1, [r1, r5]
 800a66c:	b941      	cbnz	r1, 800a680 <_reclaim_reent+0xa0>
 800a66e:	3504      	adds	r5, #4
 800a670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a672:	2d80      	cmp	r5, #128	; 0x80
 800a674:	68d9      	ldr	r1, [r3, #12]
 800a676:	d1f8      	bne.n	800a66a <_reclaim_reent+0x8a>
 800a678:	4620      	mov	r0, r4
 800a67a:	f000 fa89 	bl	800ab90 <_free_r>
 800a67e:	e7ba      	b.n	800a5f6 <_reclaim_reent+0x16>
 800a680:	680e      	ldr	r6, [r1, #0]
 800a682:	4620      	mov	r0, r4
 800a684:	f000 fa84 	bl	800ab90 <_free_r>
 800a688:	4631      	mov	r1, r6
 800a68a:	e7ef      	b.n	800a66c <_reclaim_reent+0x8c>
 800a68c:	2500      	movs	r5, #0
 800a68e:	e7ef      	b.n	800a670 <_reclaim_reent+0x90>
 800a690:	bd70      	pop	{r4, r5, r6, pc}
 800a692:	bf00      	nop
 800a694:	20000040 	.word	0x20000040

0800a698 <_sbrk_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4d06      	ldr	r5, [pc, #24]	; (800a6b4 <_sbrk_r+0x1c>)
 800a69c:	2300      	movs	r3, #0
 800a69e:	4604      	mov	r4, r0
 800a6a0:	4608      	mov	r0, r1
 800a6a2:	602b      	str	r3, [r5, #0]
 800a6a4:	f7f7 f814 	bl	80016d0 <_sbrk>
 800a6a8:	1c43      	adds	r3, r0, #1
 800a6aa:	d102      	bne.n	800a6b2 <_sbrk_r+0x1a>
 800a6ac:	682b      	ldr	r3, [r5, #0]
 800a6ae:	b103      	cbz	r3, 800a6b2 <_sbrk_r+0x1a>
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	bd38      	pop	{r3, r4, r5, pc}
 800a6b4:	20005338 	.word	0x20005338

0800a6b8 <__sread>:
 800a6b8:	b510      	push	{r4, lr}
 800a6ba:	460c      	mov	r4, r1
 800a6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6c0:	f000 fda0 	bl	800b204 <_read_r>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	bfab      	itete	ge
 800a6c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a6ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a6cc:	181b      	addge	r3, r3, r0
 800a6ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a6d2:	bfac      	ite	ge
 800a6d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a6d6:	81a3      	strhlt	r3, [r4, #12]
 800a6d8:	bd10      	pop	{r4, pc}

0800a6da <__swrite>:
 800a6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6de:	461f      	mov	r7, r3
 800a6e0:	898b      	ldrh	r3, [r1, #12]
 800a6e2:	05db      	lsls	r3, r3, #23
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	460c      	mov	r4, r1
 800a6e8:	4616      	mov	r6, r2
 800a6ea:	d505      	bpl.n	800a6f8 <__swrite+0x1e>
 800a6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f0:	2302      	movs	r3, #2
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f000 f9c8 	bl	800aa88 <_lseek_r>
 800a6f8:	89a3      	ldrh	r3, [r4, #12]
 800a6fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a702:	81a3      	strh	r3, [r4, #12]
 800a704:	4632      	mov	r2, r6
 800a706:	463b      	mov	r3, r7
 800a708:	4628      	mov	r0, r5
 800a70a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a70e:	f000 b869 	b.w	800a7e4 <_write_r>

0800a712 <__sseek>:
 800a712:	b510      	push	{r4, lr}
 800a714:	460c      	mov	r4, r1
 800a716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a71a:	f000 f9b5 	bl	800aa88 <_lseek_r>
 800a71e:	1c43      	adds	r3, r0, #1
 800a720:	89a3      	ldrh	r3, [r4, #12]
 800a722:	bf15      	itete	ne
 800a724:	6560      	strne	r0, [r4, #84]	; 0x54
 800a726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a72a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a72e:	81a3      	strheq	r3, [r4, #12]
 800a730:	bf18      	it	ne
 800a732:	81a3      	strhne	r3, [r4, #12]
 800a734:	bd10      	pop	{r4, pc}

0800a736 <__sclose>:
 800a736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a73a:	f000 b8d3 	b.w	800a8e4 <_close_r>
	...

0800a740 <__swbuf_r>:
 800a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a742:	460e      	mov	r6, r1
 800a744:	4614      	mov	r4, r2
 800a746:	4605      	mov	r5, r0
 800a748:	b118      	cbz	r0, 800a752 <__swbuf_r+0x12>
 800a74a:	6983      	ldr	r3, [r0, #24]
 800a74c:	b90b      	cbnz	r3, 800a752 <__swbuf_r+0x12>
 800a74e:	f7ff fd3b 	bl	800a1c8 <__sinit>
 800a752:	4b21      	ldr	r3, [pc, #132]	; (800a7d8 <__swbuf_r+0x98>)
 800a754:	429c      	cmp	r4, r3
 800a756:	d12b      	bne.n	800a7b0 <__swbuf_r+0x70>
 800a758:	686c      	ldr	r4, [r5, #4]
 800a75a:	69a3      	ldr	r3, [r4, #24]
 800a75c:	60a3      	str	r3, [r4, #8]
 800a75e:	89a3      	ldrh	r3, [r4, #12]
 800a760:	071a      	lsls	r2, r3, #28
 800a762:	d52f      	bpl.n	800a7c4 <__swbuf_r+0x84>
 800a764:	6923      	ldr	r3, [r4, #16]
 800a766:	b36b      	cbz	r3, 800a7c4 <__swbuf_r+0x84>
 800a768:	6923      	ldr	r3, [r4, #16]
 800a76a:	6820      	ldr	r0, [r4, #0]
 800a76c:	1ac0      	subs	r0, r0, r3
 800a76e:	6963      	ldr	r3, [r4, #20]
 800a770:	b2f6      	uxtb	r6, r6
 800a772:	4283      	cmp	r3, r0
 800a774:	4637      	mov	r7, r6
 800a776:	dc04      	bgt.n	800a782 <__swbuf_r+0x42>
 800a778:	4621      	mov	r1, r4
 800a77a:	4628      	mov	r0, r5
 800a77c:	f000 f948 	bl	800aa10 <_fflush_r>
 800a780:	bb30      	cbnz	r0, 800a7d0 <__swbuf_r+0x90>
 800a782:	68a3      	ldr	r3, [r4, #8]
 800a784:	3b01      	subs	r3, #1
 800a786:	60a3      	str	r3, [r4, #8]
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	1c5a      	adds	r2, r3, #1
 800a78c:	6022      	str	r2, [r4, #0]
 800a78e:	701e      	strb	r6, [r3, #0]
 800a790:	6963      	ldr	r3, [r4, #20]
 800a792:	3001      	adds	r0, #1
 800a794:	4283      	cmp	r3, r0
 800a796:	d004      	beq.n	800a7a2 <__swbuf_r+0x62>
 800a798:	89a3      	ldrh	r3, [r4, #12]
 800a79a:	07db      	lsls	r3, r3, #31
 800a79c:	d506      	bpl.n	800a7ac <__swbuf_r+0x6c>
 800a79e:	2e0a      	cmp	r6, #10
 800a7a0:	d104      	bne.n	800a7ac <__swbuf_r+0x6c>
 800a7a2:	4621      	mov	r1, r4
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	f000 f933 	bl	800aa10 <_fflush_r>
 800a7aa:	b988      	cbnz	r0, 800a7d0 <__swbuf_r+0x90>
 800a7ac:	4638      	mov	r0, r7
 800a7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7b0:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <__swbuf_r+0x9c>)
 800a7b2:	429c      	cmp	r4, r3
 800a7b4:	d101      	bne.n	800a7ba <__swbuf_r+0x7a>
 800a7b6:	68ac      	ldr	r4, [r5, #8]
 800a7b8:	e7cf      	b.n	800a75a <__swbuf_r+0x1a>
 800a7ba:	4b09      	ldr	r3, [pc, #36]	; (800a7e0 <__swbuf_r+0xa0>)
 800a7bc:	429c      	cmp	r4, r3
 800a7be:	bf08      	it	eq
 800a7c0:	68ec      	ldreq	r4, [r5, #12]
 800a7c2:	e7ca      	b.n	800a75a <__swbuf_r+0x1a>
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f000 f81e 	bl	800a808 <__swsetup_r>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d0cb      	beq.n	800a768 <__swbuf_r+0x28>
 800a7d0:	f04f 37ff 	mov.w	r7, #4294967295
 800a7d4:	e7ea      	b.n	800a7ac <__swbuf_r+0x6c>
 800a7d6:	bf00      	nop
 800a7d8:	0800b534 	.word	0x0800b534
 800a7dc:	0800b554 	.word	0x0800b554
 800a7e0:	0800b514 	.word	0x0800b514

0800a7e4 <_write_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	4d07      	ldr	r5, [pc, #28]	; (800a804 <_write_r+0x20>)
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	4608      	mov	r0, r1
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	602a      	str	r2, [r5, #0]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	f7f6 fd4c 	bl	8001290 <_write>
 800a7f8:	1c43      	adds	r3, r0, #1
 800a7fa:	d102      	bne.n	800a802 <_write_r+0x1e>
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	b103      	cbz	r3, 800a802 <_write_r+0x1e>
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	20005338 	.word	0x20005338

0800a808 <__swsetup_r>:
 800a808:	4b32      	ldr	r3, [pc, #200]	; (800a8d4 <__swsetup_r+0xcc>)
 800a80a:	b570      	push	{r4, r5, r6, lr}
 800a80c:	681d      	ldr	r5, [r3, #0]
 800a80e:	4606      	mov	r6, r0
 800a810:	460c      	mov	r4, r1
 800a812:	b125      	cbz	r5, 800a81e <__swsetup_r+0x16>
 800a814:	69ab      	ldr	r3, [r5, #24]
 800a816:	b913      	cbnz	r3, 800a81e <__swsetup_r+0x16>
 800a818:	4628      	mov	r0, r5
 800a81a:	f7ff fcd5 	bl	800a1c8 <__sinit>
 800a81e:	4b2e      	ldr	r3, [pc, #184]	; (800a8d8 <__swsetup_r+0xd0>)
 800a820:	429c      	cmp	r4, r3
 800a822:	d10f      	bne.n	800a844 <__swsetup_r+0x3c>
 800a824:	686c      	ldr	r4, [r5, #4]
 800a826:	89a3      	ldrh	r3, [r4, #12]
 800a828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a82c:	0719      	lsls	r1, r3, #28
 800a82e:	d42c      	bmi.n	800a88a <__swsetup_r+0x82>
 800a830:	06dd      	lsls	r5, r3, #27
 800a832:	d411      	bmi.n	800a858 <__swsetup_r+0x50>
 800a834:	2309      	movs	r3, #9
 800a836:	6033      	str	r3, [r6, #0]
 800a838:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a83c:	81a3      	strh	r3, [r4, #12]
 800a83e:	f04f 30ff 	mov.w	r0, #4294967295
 800a842:	e03e      	b.n	800a8c2 <__swsetup_r+0xba>
 800a844:	4b25      	ldr	r3, [pc, #148]	; (800a8dc <__swsetup_r+0xd4>)
 800a846:	429c      	cmp	r4, r3
 800a848:	d101      	bne.n	800a84e <__swsetup_r+0x46>
 800a84a:	68ac      	ldr	r4, [r5, #8]
 800a84c:	e7eb      	b.n	800a826 <__swsetup_r+0x1e>
 800a84e:	4b24      	ldr	r3, [pc, #144]	; (800a8e0 <__swsetup_r+0xd8>)
 800a850:	429c      	cmp	r4, r3
 800a852:	bf08      	it	eq
 800a854:	68ec      	ldreq	r4, [r5, #12]
 800a856:	e7e6      	b.n	800a826 <__swsetup_r+0x1e>
 800a858:	0758      	lsls	r0, r3, #29
 800a85a:	d512      	bpl.n	800a882 <__swsetup_r+0x7a>
 800a85c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a85e:	b141      	cbz	r1, 800a872 <__swsetup_r+0x6a>
 800a860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a864:	4299      	cmp	r1, r3
 800a866:	d002      	beq.n	800a86e <__swsetup_r+0x66>
 800a868:	4630      	mov	r0, r6
 800a86a:	f000 f991 	bl	800ab90 <_free_r>
 800a86e:	2300      	movs	r3, #0
 800a870:	6363      	str	r3, [r4, #52]	; 0x34
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a878:	81a3      	strh	r3, [r4, #12]
 800a87a:	2300      	movs	r3, #0
 800a87c:	6063      	str	r3, [r4, #4]
 800a87e:	6923      	ldr	r3, [r4, #16]
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	f043 0308 	orr.w	r3, r3, #8
 800a888:	81a3      	strh	r3, [r4, #12]
 800a88a:	6923      	ldr	r3, [r4, #16]
 800a88c:	b94b      	cbnz	r3, 800a8a2 <__swsetup_r+0x9a>
 800a88e:	89a3      	ldrh	r3, [r4, #12]
 800a890:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a898:	d003      	beq.n	800a8a2 <__swsetup_r+0x9a>
 800a89a:	4621      	mov	r1, r4
 800a89c:	4630      	mov	r0, r6
 800a89e:	f000 f92b 	bl	800aaf8 <__smakebuf_r>
 800a8a2:	89a0      	ldrh	r0, [r4, #12]
 800a8a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8a8:	f010 0301 	ands.w	r3, r0, #1
 800a8ac:	d00a      	beq.n	800a8c4 <__swsetup_r+0xbc>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60a3      	str	r3, [r4, #8]
 800a8b2:	6963      	ldr	r3, [r4, #20]
 800a8b4:	425b      	negs	r3, r3
 800a8b6:	61a3      	str	r3, [r4, #24]
 800a8b8:	6923      	ldr	r3, [r4, #16]
 800a8ba:	b943      	cbnz	r3, 800a8ce <__swsetup_r+0xc6>
 800a8bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8c0:	d1ba      	bne.n	800a838 <__swsetup_r+0x30>
 800a8c2:	bd70      	pop	{r4, r5, r6, pc}
 800a8c4:	0781      	lsls	r1, r0, #30
 800a8c6:	bf58      	it	pl
 800a8c8:	6963      	ldrpl	r3, [r4, #20]
 800a8ca:	60a3      	str	r3, [r4, #8]
 800a8cc:	e7f4      	b.n	800a8b8 <__swsetup_r+0xb0>
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	e7f7      	b.n	800a8c2 <__swsetup_r+0xba>
 800a8d2:	bf00      	nop
 800a8d4:	20000040 	.word	0x20000040
 800a8d8:	0800b534 	.word	0x0800b534
 800a8dc:	0800b554 	.word	0x0800b554
 800a8e0:	0800b514 	.word	0x0800b514

0800a8e4 <_close_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4d06      	ldr	r5, [pc, #24]	; (800a900 <_close_r+0x1c>)
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	4608      	mov	r0, r1
 800a8ee:	602b      	str	r3, [r5, #0]
 800a8f0:	f7f6 feb9 	bl	8001666 <_close>
 800a8f4:	1c43      	adds	r3, r0, #1
 800a8f6:	d102      	bne.n	800a8fe <_close_r+0x1a>
 800a8f8:	682b      	ldr	r3, [r5, #0]
 800a8fa:	b103      	cbz	r3, 800a8fe <_close_r+0x1a>
 800a8fc:	6023      	str	r3, [r4, #0]
 800a8fe:	bd38      	pop	{r3, r4, r5, pc}
 800a900:	20005338 	.word	0x20005338

0800a904 <__sflush_r>:
 800a904:	898a      	ldrh	r2, [r1, #12]
 800a906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a90a:	4605      	mov	r5, r0
 800a90c:	0710      	lsls	r0, r2, #28
 800a90e:	460c      	mov	r4, r1
 800a910:	d458      	bmi.n	800a9c4 <__sflush_r+0xc0>
 800a912:	684b      	ldr	r3, [r1, #4]
 800a914:	2b00      	cmp	r3, #0
 800a916:	dc05      	bgt.n	800a924 <__sflush_r+0x20>
 800a918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	dc02      	bgt.n	800a924 <__sflush_r+0x20>
 800a91e:	2000      	movs	r0, #0
 800a920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a926:	2e00      	cmp	r6, #0
 800a928:	d0f9      	beq.n	800a91e <__sflush_r+0x1a>
 800a92a:	2300      	movs	r3, #0
 800a92c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a930:	682f      	ldr	r7, [r5, #0]
 800a932:	602b      	str	r3, [r5, #0]
 800a934:	d032      	beq.n	800a99c <__sflush_r+0x98>
 800a936:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	075a      	lsls	r2, r3, #29
 800a93c:	d505      	bpl.n	800a94a <__sflush_r+0x46>
 800a93e:	6863      	ldr	r3, [r4, #4]
 800a940:	1ac0      	subs	r0, r0, r3
 800a942:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a944:	b10b      	cbz	r3, 800a94a <__sflush_r+0x46>
 800a946:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a948:	1ac0      	subs	r0, r0, r3
 800a94a:	2300      	movs	r3, #0
 800a94c:	4602      	mov	r2, r0
 800a94e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a950:	6a21      	ldr	r1, [r4, #32]
 800a952:	4628      	mov	r0, r5
 800a954:	47b0      	blx	r6
 800a956:	1c43      	adds	r3, r0, #1
 800a958:	89a3      	ldrh	r3, [r4, #12]
 800a95a:	d106      	bne.n	800a96a <__sflush_r+0x66>
 800a95c:	6829      	ldr	r1, [r5, #0]
 800a95e:	291d      	cmp	r1, #29
 800a960:	d82c      	bhi.n	800a9bc <__sflush_r+0xb8>
 800a962:	4a2a      	ldr	r2, [pc, #168]	; (800aa0c <__sflush_r+0x108>)
 800a964:	40ca      	lsrs	r2, r1
 800a966:	07d6      	lsls	r6, r2, #31
 800a968:	d528      	bpl.n	800a9bc <__sflush_r+0xb8>
 800a96a:	2200      	movs	r2, #0
 800a96c:	6062      	str	r2, [r4, #4]
 800a96e:	04d9      	lsls	r1, r3, #19
 800a970:	6922      	ldr	r2, [r4, #16]
 800a972:	6022      	str	r2, [r4, #0]
 800a974:	d504      	bpl.n	800a980 <__sflush_r+0x7c>
 800a976:	1c42      	adds	r2, r0, #1
 800a978:	d101      	bne.n	800a97e <__sflush_r+0x7a>
 800a97a:	682b      	ldr	r3, [r5, #0]
 800a97c:	b903      	cbnz	r3, 800a980 <__sflush_r+0x7c>
 800a97e:	6560      	str	r0, [r4, #84]	; 0x54
 800a980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a982:	602f      	str	r7, [r5, #0]
 800a984:	2900      	cmp	r1, #0
 800a986:	d0ca      	beq.n	800a91e <__sflush_r+0x1a>
 800a988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a98c:	4299      	cmp	r1, r3
 800a98e:	d002      	beq.n	800a996 <__sflush_r+0x92>
 800a990:	4628      	mov	r0, r5
 800a992:	f000 f8fd 	bl	800ab90 <_free_r>
 800a996:	2000      	movs	r0, #0
 800a998:	6360      	str	r0, [r4, #52]	; 0x34
 800a99a:	e7c1      	b.n	800a920 <__sflush_r+0x1c>
 800a99c:	6a21      	ldr	r1, [r4, #32]
 800a99e:	2301      	movs	r3, #1
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	47b0      	blx	r6
 800a9a4:	1c41      	adds	r1, r0, #1
 800a9a6:	d1c7      	bne.n	800a938 <__sflush_r+0x34>
 800a9a8:	682b      	ldr	r3, [r5, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d0c4      	beq.n	800a938 <__sflush_r+0x34>
 800a9ae:	2b1d      	cmp	r3, #29
 800a9b0:	d001      	beq.n	800a9b6 <__sflush_r+0xb2>
 800a9b2:	2b16      	cmp	r3, #22
 800a9b4:	d101      	bne.n	800a9ba <__sflush_r+0xb6>
 800a9b6:	602f      	str	r7, [r5, #0]
 800a9b8:	e7b1      	b.n	800a91e <__sflush_r+0x1a>
 800a9ba:	89a3      	ldrh	r3, [r4, #12]
 800a9bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9c0:	81a3      	strh	r3, [r4, #12]
 800a9c2:	e7ad      	b.n	800a920 <__sflush_r+0x1c>
 800a9c4:	690f      	ldr	r7, [r1, #16]
 800a9c6:	2f00      	cmp	r7, #0
 800a9c8:	d0a9      	beq.n	800a91e <__sflush_r+0x1a>
 800a9ca:	0793      	lsls	r3, r2, #30
 800a9cc:	680e      	ldr	r6, [r1, #0]
 800a9ce:	bf08      	it	eq
 800a9d0:	694b      	ldreq	r3, [r1, #20]
 800a9d2:	600f      	str	r7, [r1, #0]
 800a9d4:	bf18      	it	ne
 800a9d6:	2300      	movne	r3, #0
 800a9d8:	eba6 0807 	sub.w	r8, r6, r7
 800a9dc:	608b      	str	r3, [r1, #8]
 800a9de:	f1b8 0f00 	cmp.w	r8, #0
 800a9e2:	dd9c      	ble.n	800a91e <__sflush_r+0x1a>
 800a9e4:	6a21      	ldr	r1, [r4, #32]
 800a9e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9e8:	4643      	mov	r3, r8
 800a9ea:	463a      	mov	r2, r7
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	47b0      	blx	r6
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	dc06      	bgt.n	800aa02 <__sflush_r+0xfe>
 800a9f4:	89a3      	ldrh	r3, [r4, #12]
 800a9f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9fa:	81a3      	strh	r3, [r4, #12]
 800a9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800aa00:	e78e      	b.n	800a920 <__sflush_r+0x1c>
 800aa02:	4407      	add	r7, r0
 800aa04:	eba8 0800 	sub.w	r8, r8, r0
 800aa08:	e7e9      	b.n	800a9de <__sflush_r+0xda>
 800aa0a:	bf00      	nop
 800aa0c:	20400001 	.word	0x20400001

0800aa10 <_fflush_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	690b      	ldr	r3, [r1, #16]
 800aa14:	4605      	mov	r5, r0
 800aa16:	460c      	mov	r4, r1
 800aa18:	b913      	cbnz	r3, 800aa20 <_fflush_r+0x10>
 800aa1a:	2500      	movs	r5, #0
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	bd38      	pop	{r3, r4, r5, pc}
 800aa20:	b118      	cbz	r0, 800aa2a <_fflush_r+0x1a>
 800aa22:	6983      	ldr	r3, [r0, #24]
 800aa24:	b90b      	cbnz	r3, 800aa2a <_fflush_r+0x1a>
 800aa26:	f7ff fbcf 	bl	800a1c8 <__sinit>
 800aa2a:	4b14      	ldr	r3, [pc, #80]	; (800aa7c <_fflush_r+0x6c>)
 800aa2c:	429c      	cmp	r4, r3
 800aa2e:	d11b      	bne.n	800aa68 <_fflush_r+0x58>
 800aa30:	686c      	ldr	r4, [r5, #4]
 800aa32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d0ef      	beq.n	800aa1a <_fflush_r+0xa>
 800aa3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa3c:	07d0      	lsls	r0, r2, #31
 800aa3e:	d404      	bmi.n	800aa4a <_fflush_r+0x3a>
 800aa40:	0599      	lsls	r1, r3, #22
 800aa42:	d402      	bmi.n	800aa4a <_fflush_r+0x3a>
 800aa44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa46:	f7ff fc82 	bl	800a34e <__retarget_lock_acquire_recursive>
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	4621      	mov	r1, r4
 800aa4e:	f7ff ff59 	bl	800a904 <__sflush_r>
 800aa52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa54:	07da      	lsls	r2, r3, #31
 800aa56:	4605      	mov	r5, r0
 800aa58:	d4e0      	bmi.n	800aa1c <_fflush_r+0xc>
 800aa5a:	89a3      	ldrh	r3, [r4, #12]
 800aa5c:	059b      	lsls	r3, r3, #22
 800aa5e:	d4dd      	bmi.n	800aa1c <_fflush_r+0xc>
 800aa60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa62:	f7ff fc75 	bl	800a350 <__retarget_lock_release_recursive>
 800aa66:	e7d9      	b.n	800aa1c <_fflush_r+0xc>
 800aa68:	4b05      	ldr	r3, [pc, #20]	; (800aa80 <_fflush_r+0x70>)
 800aa6a:	429c      	cmp	r4, r3
 800aa6c:	d101      	bne.n	800aa72 <_fflush_r+0x62>
 800aa6e:	68ac      	ldr	r4, [r5, #8]
 800aa70:	e7df      	b.n	800aa32 <_fflush_r+0x22>
 800aa72:	4b04      	ldr	r3, [pc, #16]	; (800aa84 <_fflush_r+0x74>)
 800aa74:	429c      	cmp	r4, r3
 800aa76:	bf08      	it	eq
 800aa78:	68ec      	ldreq	r4, [r5, #12]
 800aa7a:	e7da      	b.n	800aa32 <_fflush_r+0x22>
 800aa7c:	0800b534 	.word	0x0800b534
 800aa80:	0800b554 	.word	0x0800b554
 800aa84:	0800b514 	.word	0x0800b514

0800aa88 <_lseek_r>:
 800aa88:	b538      	push	{r3, r4, r5, lr}
 800aa8a:	4d07      	ldr	r5, [pc, #28]	; (800aaa8 <_lseek_r+0x20>)
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	4608      	mov	r0, r1
 800aa90:	4611      	mov	r1, r2
 800aa92:	2200      	movs	r2, #0
 800aa94:	602a      	str	r2, [r5, #0]
 800aa96:	461a      	mov	r2, r3
 800aa98:	f7f6 fe0c 	bl	80016b4 <_lseek>
 800aa9c:	1c43      	adds	r3, r0, #1
 800aa9e:	d102      	bne.n	800aaa6 <_lseek_r+0x1e>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	b103      	cbz	r3, 800aaa6 <_lseek_r+0x1e>
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	20005338 	.word	0x20005338

0800aaac <__swhatbuf_r>:
 800aaac:	b570      	push	{r4, r5, r6, lr}
 800aaae:	460e      	mov	r6, r1
 800aab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab4:	2900      	cmp	r1, #0
 800aab6:	b096      	sub	sp, #88	; 0x58
 800aab8:	4614      	mov	r4, r2
 800aaba:	461d      	mov	r5, r3
 800aabc:	da08      	bge.n	800aad0 <__swhatbuf_r+0x24>
 800aabe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	602a      	str	r2, [r5, #0]
 800aac6:	061a      	lsls	r2, r3, #24
 800aac8:	d410      	bmi.n	800aaec <__swhatbuf_r+0x40>
 800aaca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aace:	e00e      	b.n	800aaee <__swhatbuf_r+0x42>
 800aad0:	466a      	mov	r2, sp
 800aad2:	f000 fba9 	bl	800b228 <_fstat_r>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	dbf1      	blt.n	800aabe <__swhatbuf_r+0x12>
 800aada:	9a01      	ldr	r2, [sp, #4]
 800aadc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aae0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aae4:	425a      	negs	r2, r3
 800aae6:	415a      	adcs	r2, r3
 800aae8:	602a      	str	r2, [r5, #0]
 800aaea:	e7ee      	b.n	800aaca <__swhatbuf_r+0x1e>
 800aaec:	2340      	movs	r3, #64	; 0x40
 800aaee:	2000      	movs	r0, #0
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	b016      	add	sp, #88	; 0x58
 800aaf4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aaf8 <__smakebuf_r>:
 800aaf8:	898b      	ldrh	r3, [r1, #12]
 800aafa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aafc:	079d      	lsls	r5, r3, #30
 800aafe:	4606      	mov	r6, r0
 800ab00:	460c      	mov	r4, r1
 800ab02:	d507      	bpl.n	800ab14 <__smakebuf_r+0x1c>
 800ab04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	6123      	str	r3, [r4, #16]
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	6163      	str	r3, [r4, #20]
 800ab10:	b002      	add	sp, #8
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	ab01      	add	r3, sp, #4
 800ab16:	466a      	mov	r2, sp
 800ab18:	f7ff ffc8 	bl	800aaac <__swhatbuf_r>
 800ab1c:	9900      	ldr	r1, [sp, #0]
 800ab1e:	4605      	mov	r5, r0
 800ab20:	4630      	mov	r0, r6
 800ab22:	f7ff fc4d 	bl	800a3c0 <_malloc_r>
 800ab26:	b948      	cbnz	r0, 800ab3c <__smakebuf_r+0x44>
 800ab28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab2c:	059a      	lsls	r2, r3, #22
 800ab2e:	d4ef      	bmi.n	800ab10 <__smakebuf_r+0x18>
 800ab30:	f023 0303 	bic.w	r3, r3, #3
 800ab34:	f043 0302 	orr.w	r3, r3, #2
 800ab38:	81a3      	strh	r3, [r4, #12]
 800ab3a:	e7e3      	b.n	800ab04 <__smakebuf_r+0xc>
 800ab3c:	4b0d      	ldr	r3, [pc, #52]	; (800ab74 <__smakebuf_r+0x7c>)
 800ab3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab40:	89a3      	ldrh	r3, [r4, #12]
 800ab42:	6020      	str	r0, [r4, #0]
 800ab44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab48:	81a3      	strh	r3, [r4, #12]
 800ab4a:	9b00      	ldr	r3, [sp, #0]
 800ab4c:	6163      	str	r3, [r4, #20]
 800ab4e:	9b01      	ldr	r3, [sp, #4]
 800ab50:	6120      	str	r0, [r4, #16]
 800ab52:	b15b      	cbz	r3, 800ab6c <__smakebuf_r+0x74>
 800ab54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f000 fb77 	bl	800b24c <_isatty_r>
 800ab5e:	b128      	cbz	r0, 800ab6c <__smakebuf_r+0x74>
 800ab60:	89a3      	ldrh	r3, [r4, #12]
 800ab62:	f023 0303 	bic.w	r3, r3, #3
 800ab66:	f043 0301 	orr.w	r3, r3, #1
 800ab6a:	81a3      	strh	r3, [r4, #12]
 800ab6c:	89a0      	ldrh	r0, [r4, #12]
 800ab6e:	4305      	orrs	r5, r0
 800ab70:	81a5      	strh	r5, [r4, #12]
 800ab72:	e7cd      	b.n	800ab10 <__smakebuf_r+0x18>
 800ab74:	0800a161 	.word	0x0800a161

0800ab78 <__malloc_lock>:
 800ab78:	4801      	ldr	r0, [pc, #4]	; (800ab80 <__malloc_lock+0x8>)
 800ab7a:	f7ff bbe8 	b.w	800a34e <__retarget_lock_acquire_recursive>
 800ab7e:	bf00      	nop
 800ab80:	2000532c 	.word	0x2000532c

0800ab84 <__malloc_unlock>:
 800ab84:	4801      	ldr	r0, [pc, #4]	; (800ab8c <__malloc_unlock+0x8>)
 800ab86:	f7ff bbe3 	b.w	800a350 <__retarget_lock_release_recursive>
 800ab8a:	bf00      	nop
 800ab8c:	2000532c 	.word	0x2000532c

0800ab90 <_free_r>:
 800ab90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab92:	2900      	cmp	r1, #0
 800ab94:	d044      	beq.n	800ac20 <_free_r+0x90>
 800ab96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab9a:	9001      	str	r0, [sp, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f1a1 0404 	sub.w	r4, r1, #4
 800aba2:	bfb8      	it	lt
 800aba4:	18e4      	addlt	r4, r4, r3
 800aba6:	f7ff ffe7 	bl	800ab78 <__malloc_lock>
 800abaa:	4a1e      	ldr	r2, [pc, #120]	; (800ac24 <_free_r+0x94>)
 800abac:	9801      	ldr	r0, [sp, #4]
 800abae:	6813      	ldr	r3, [r2, #0]
 800abb0:	b933      	cbnz	r3, 800abc0 <_free_r+0x30>
 800abb2:	6063      	str	r3, [r4, #4]
 800abb4:	6014      	str	r4, [r2, #0]
 800abb6:	b003      	add	sp, #12
 800abb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abbc:	f7ff bfe2 	b.w	800ab84 <__malloc_unlock>
 800abc0:	42a3      	cmp	r3, r4
 800abc2:	d908      	bls.n	800abd6 <_free_r+0x46>
 800abc4:	6825      	ldr	r5, [r4, #0]
 800abc6:	1961      	adds	r1, r4, r5
 800abc8:	428b      	cmp	r3, r1
 800abca:	bf01      	itttt	eq
 800abcc:	6819      	ldreq	r1, [r3, #0]
 800abce:	685b      	ldreq	r3, [r3, #4]
 800abd0:	1949      	addeq	r1, r1, r5
 800abd2:	6021      	streq	r1, [r4, #0]
 800abd4:	e7ed      	b.n	800abb2 <_free_r+0x22>
 800abd6:	461a      	mov	r2, r3
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	b10b      	cbz	r3, 800abe0 <_free_r+0x50>
 800abdc:	42a3      	cmp	r3, r4
 800abde:	d9fa      	bls.n	800abd6 <_free_r+0x46>
 800abe0:	6811      	ldr	r1, [r2, #0]
 800abe2:	1855      	adds	r5, r2, r1
 800abe4:	42a5      	cmp	r5, r4
 800abe6:	d10b      	bne.n	800ac00 <_free_r+0x70>
 800abe8:	6824      	ldr	r4, [r4, #0]
 800abea:	4421      	add	r1, r4
 800abec:	1854      	adds	r4, r2, r1
 800abee:	42a3      	cmp	r3, r4
 800abf0:	6011      	str	r1, [r2, #0]
 800abf2:	d1e0      	bne.n	800abb6 <_free_r+0x26>
 800abf4:	681c      	ldr	r4, [r3, #0]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	6053      	str	r3, [r2, #4]
 800abfa:	4421      	add	r1, r4
 800abfc:	6011      	str	r1, [r2, #0]
 800abfe:	e7da      	b.n	800abb6 <_free_r+0x26>
 800ac00:	d902      	bls.n	800ac08 <_free_r+0x78>
 800ac02:	230c      	movs	r3, #12
 800ac04:	6003      	str	r3, [r0, #0]
 800ac06:	e7d6      	b.n	800abb6 <_free_r+0x26>
 800ac08:	6825      	ldr	r5, [r4, #0]
 800ac0a:	1961      	adds	r1, r4, r5
 800ac0c:	428b      	cmp	r3, r1
 800ac0e:	bf04      	itt	eq
 800ac10:	6819      	ldreq	r1, [r3, #0]
 800ac12:	685b      	ldreq	r3, [r3, #4]
 800ac14:	6063      	str	r3, [r4, #4]
 800ac16:	bf04      	itt	eq
 800ac18:	1949      	addeq	r1, r1, r5
 800ac1a:	6021      	streq	r1, [r4, #0]
 800ac1c:	6054      	str	r4, [r2, #4]
 800ac1e:	e7ca      	b.n	800abb6 <_free_r+0x26>
 800ac20:	b003      	add	sp, #12
 800ac22:	bd30      	pop	{r4, r5, pc}
 800ac24:	20005330 	.word	0x20005330

0800ac28 <__sfputc_r>:
 800ac28:	6893      	ldr	r3, [r2, #8]
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	b410      	push	{r4}
 800ac30:	6093      	str	r3, [r2, #8]
 800ac32:	da08      	bge.n	800ac46 <__sfputc_r+0x1e>
 800ac34:	6994      	ldr	r4, [r2, #24]
 800ac36:	42a3      	cmp	r3, r4
 800ac38:	db01      	blt.n	800ac3e <__sfputc_r+0x16>
 800ac3a:	290a      	cmp	r1, #10
 800ac3c:	d103      	bne.n	800ac46 <__sfputc_r+0x1e>
 800ac3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac42:	f7ff bd7d 	b.w	800a740 <__swbuf_r>
 800ac46:	6813      	ldr	r3, [r2, #0]
 800ac48:	1c58      	adds	r0, r3, #1
 800ac4a:	6010      	str	r0, [r2, #0]
 800ac4c:	7019      	strb	r1, [r3, #0]
 800ac4e:	4608      	mov	r0, r1
 800ac50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <__sfputs_r>:
 800ac56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac58:	4606      	mov	r6, r0
 800ac5a:	460f      	mov	r7, r1
 800ac5c:	4614      	mov	r4, r2
 800ac5e:	18d5      	adds	r5, r2, r3
 800ac60:	42ac      	cmp	r4, r5
 800ac62:	d101      	bne.n	800ac68 <__sfputs_r+0x12>
 800ac64:	2000      	movs	r0, #0
 800ac66:	e007      	b.n	800ac78 <__sfputs_r+0x22>
 800ac68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac6c:	463a      	mov	r2, r7
 800ac6e:	4630      	mov	r0, r6
 800ac70:	f7ff ffda 	bl	800ac28 <__sfputc_r>
 800ac74:	1c43      	adds	r3, r0, #1
 800ac76:	d1f3      	bne.n	800ac60 <__sfputs_r+0xa>
 800ac78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac7c <_vfiprintf_r>:
 800ac7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac80:	460d      	mov	r5, r1
 800ac82:	b09d      	sub	sp, #116	; 0x74
 800ac84:	4614      	mov	r4, r2
 800ac86:	4698      	mov	r8, r3
 800ac88:	4606      	mov	r6, r0
 800ac8a:	b118      	cbz	r0, 800ac94 <_vfiprintf_r+0x18>
 800ac8c:	6983      	ldr	r3, [r0, #24]
 800ac8e:	b90b      	cbnz	r3, 800ac94 <_vfiprintf_r+0x18>
 800ac90:	f7ff fa9a 	bl	800a1c8 <__sinit>
 800ac94:	4b89      	ldr	r3, [pc, #548]	; (800aebc <_vfiprintf_r+0x240>)
 800ac96:	429d      	cmp	r5, r3
 800ac98:	d11b      	bne.n	800acd2 <_vfiprintf_r+0x56>
 800ac9a:	6875      	ldr	r5, [r6, #4]
 800ac9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac9e:	07d9      	lsls	r1, r3, #31
 800aca0:	d405      	bmi.n	800acae <_vfiprintf_r+0x32>
 800aca2:	89ab      	ldrh	r3, [r5, #12]
 800aca4:	059a      	lsls	r2, r3, #22
 800aca6:	d402      	bmi.n	800acae <_vfiprintf_r+0x32>
 800aca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acaa:	f7ff fb50 	bl	800a34e <__retarget_lock_acquire_recursive>
 800acae:	89ab      	ldrh	r3, [r5, #12]
 800acb0:	071b      	lsls	r3, r3, #28
 800acb2:	d501      	bpl.n	800acb8 <_vfiprintf_r+0x3c>
 800acb4:	692b      	ldr	r3, [r5, #16]
 800acb6:	b9eb      	cbnz	r3, 800acf4 <_vfiprintf_r+0x78>
 800acb8:	4629      	mov	r1, r5
 800acba:	4630      	mov	r0, r6
 800acbc:	f7ff fda4 	bl	800a808 <__swsetup_r>
 800acc0:	b1c0      	cbz	r0, 800acf4 <_vfiprintf_r+0x78>
 800acc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acc4:	07dc      	lsls	r4, r3, #31
 800acc6:	d50e      	bpl.n	800ace6 <_vfiprintf_r+0x6a>
 800acc8:	f04f 30ff 	mov.w	r0, #4294967295
 800accc:	b01d      	add	sp, #116	; 0x74
 800acce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd2:	4b7b      	ldr	r3, [pc, #492]	; (800aec0 <_vfiprintf_r+0x244>)
 800acd4:	429d      	cmp	r5, r3
 800acd6:	d101      	bne.n	800acdc <_vfiprintf_r+0x60>
 800acd8:	68b5      	ldr	r5, [r6, #8]
 800acda:	e7df      	b.n	800ac9c <_vfiprintf_r+0x20>
 800acdc:	4b79      	ldr	r3, [pc, #484]	; (800aec4 <_vfiprintf_r+0x248>)
 800acde:	429d      	cmp	r5, r3
 800ace0:	bf08      	it	eq
 800ace2:	68f5      	ldreq	r5, [r6, #12]
 800ace4:	e7da      	b.n	800ac9c <_vfiprintf_r+0x20>
 800ace6:	89ab      	ldrh	r3, [r5, #12]
 800ace8:	0598      	lsls	r0, r3, #22
 800acea:	d4ed      	bmi.n	800acc8 <_vfiprintf_r+0x4c>
 800acec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acee:	f7ff fb2f 	bl	800a350 <__retarget_lock_release_recursive>
 800acf2:	e7e9      	b.n	800acc8 <_vfiprintf_r+0x4c>
 800acf4:	2300      	movs	r3, #0
 800acf6:	9309      	str	r3, [sp, #36]	; 0x24
 800acf8:	2320      	movs	r3, #32
 800acfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acfe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad02:	2330      	movs	r3, #48	; 0x30
 800ad04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aec8 <_vfiprintf_r+0x24c>
 800ad08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad0c:	f04f 0901 	mov.w	r9, #1
 800ad10:	4623      	mov	r3, r4
 800ad12:	469a      	mov	sl, r3
 800ad14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad18:	b10a      	cbz	r2, 800ad1e <_vfiprintf_r+0xa2>
 800ad1a:	2a25      	cmp	r2, #37	; 0x25
 800ad1c:	d1f9      	bne.n	800ad12 <_vfiprintf_r+0x96>
 800ad1e:	ebba 0b04 	subs.w	fp, sl, r4
 800ad22:	d00b      	beq.n	800ad3c <_vfiprintf_r+0xc0>
 800ad24:	465b      	mov	r3, fp
 800ad26:	4622      	mov	r2, r4
 800ad28:	4629      	mov	r1, r5
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	f7ff ff93 	bl	800ac56 <__sfputs_r>
 800ad30:	3001      	adds	r0, #1
 800ad32:	f000 80aa 	beq.w	800ae8a <_vfiprintf_r+0x20e>
 800ad36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad38:	445a      	add	r2, fp
 800ad3a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f000 80a2 	beq.w	800ae8a <_vfiprintf_r+0x20e>
 800ad46:	2300      	movs	r3, #0
 800ad48:	f04f 32ff 	mov.w	r2, #4294967295
 800ad4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad50:	f10a 0a01 	add.w	sl, sl, #1
 800ad54:	9304      	str	r3, [sp, #16]
 800ad56:	9307      	str	r3, [sp, #28]
 800ad58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad5c:	931a      	str	r3, [sp, #104]	; 0x68
 800ad5e:	4654      	mov	r4, sl
 800ad60:	2205      	movs	r2, #5
 800ad62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad66:	4858      	ldr	r0, [pc, #352]	; (800aec8 <_vfiprintf_r+0x24c>)
 800ad68:	f7f5 fa32 	bl	80001d0 <memchr>
 800ad6c:	9a04      	ldr	r2, [sp, #16]
 800ad6e:	b9d8      	cbnz	r0, 800ada8 <_vfiprintf_r+0x12c>
 800ad70:	06d1      	lsls	r1, r2, #27
 800ad72:	bf44      	itt	mi
 800ad74:	2320      	movmi	r3, #32
 800ad76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad7a:	0713      	lsls	r3, r2, #28
 800ad7c:	bf44      	itt	mi
 800ad7e:	232b      	movmi	r3, #43	; 0x2b
 800ad80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad84:	f89a 3000 	ldrb.w	r3, [sl]
 800ad88:	2b2a      	cmp	r3, #42	; 0x2a
 800ad8a:	d015      	beq.n	800adb8 <_vfiprintf_r+0x13c>
 800ad8c:	9a07      	ldr	r2, [sp, #28]
 800ad8e:	4654      	mov	r4, sl
 800ad90:	2000      	movs	r0, #0
 800ad92:	f04f 0c0a 	mov.w	ip, #10
 800ad96:	4621      	mov	r1, r4
 800ad98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad9c:	3b30      	subs	r3, #48	; 0x30
 800ad9e:	2b09      	cmp	r3, #9
 800ada0:	d94e      	bls.n	800ae40 <_vfiprintf_r+0x1c4>
 800ada2:	b1b0      	cbz	r0, 800add2 <_vfiprintf_r+0x156>
 800ada4:	9207      	str	r2, [sp, #28]
 800ada6:	e014      	b.n	800add2 <_vfiprintf_r+0x156>
 800ada8:	eba0 0308 	sub.w	r3, r0, r8
 800adac:	fa09 f303 	lsl.w	r3, r9, r3
 800adb0:	4313      	orrs	r3, r2
 800adb2:	9304      	str	r3, [sp, #16]
 800adb4:	46a2      	mov	sl, r4
 800adb6:	e7d2      	b.n	800ad5e <_vfiprintf_r+0xe2>
 800adb8:	9b03      	ldr	r3, [sp, #12]
 800adba:	1d19      	adds	r1, r3, #4
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	9103      	str	r1, [sp, #12]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	bfbb      	ittet	lt
 800adc4:	425b      	neglt	r3, r3
 800adc6:	f042 0202 	orrlt.w	r2, r2, #2
 800adca:	9307      	strge	r3, [sp, #28]
 800adcc:	9307      	strlt	r3, [sp, #28]
 800adce:	bfb8      	it	lt
 800add0:	9204      	strlt	r2, [sp, #16]
 800add2:	7823      	ldrb	r3, [r4, #0]
 800add4:	2b2e      	cmp	r3, #46	; 0x2e
 800add6:	d10c      	bne.n	800adf2 <_vfiprintf_r+0x176>
 800add8:	7863      	ldrb	r3, [r4, #1]
 800adda:	2b2a      	cmp	r3, #42	; 0x2a
 800addc:	d135      	bne.n	800ae4a <_vfiprintf_r+0x1ce>
 800adde:	9b03      	ldr	r3, [sp, #12]
 800ade0:	1d1a      	adds	r2, r3, #4
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	9203      	str	r2, [sp, #12]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	bfb8      	it	lt
 800adea:	f04f 33ff 	movlt.w	r3, #4294967295
 800adee:	3402      	adds	r4, #2
 800adf0:	9305      	str	r3, [sp, #20]
 800adf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aed8 <_vfiprintf_r+0x25c>
 800adf6:	7821      	ldrb	r1, [r4, #0]
 800adf8:	2203      	movs	r2, #3
 800adfa:	4650      	mov	r0, sl
 800adfc:	f7f5 f9e8 	bl	80001d0 <memchr>
 800ae00:	b140      	cbz	r0, 800ae14 <_vfiprintf_r+0x198>
 800ae02:	2340      	movs	r3, #64	; 0x40
 800ae04:	eba0 000a 	sub.w	r0, r0, sl
 800ae08:	fa03 f000 	lsl.w	r0, r3, r0
 800ae0c:	9b04      	ldr	r3, [sp, #16]
 800ae0e:	4303      	orrs	r3, r0
 800ae10:	3401      	adds	r4, #1
 800ae12:	9304      	str	r3, [sp, #16]
 800ae14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae18:	482c      	ldr	r0, [pc, #176]	; (800aecc <_vfiprintf_r+0x250>)
 800ae1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae1e:	2206      	movs	r2, #6
 800ae20:	f7f5 f9d6 	bl	80001d0 <memchr>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	d03f      	beq.n	800aea8 <_vfiprintf_r+0x22c>
 800ae28:	4b29      	ldr	r3, [pc, #164]	; (800aed0 <_vfiprintf_r+0x254>)
 800ae2a:	bb1b      	cbnz	r3, 800ae74 <_vfiprintf_r+0x1f8>
 800ae2c:	9b03      	ldr	r3, [sp, #12]
 800ae2e:	3307      	adds	r3, #7
 800ae30:	f023 0307 	bic.w	r3, r3, #7
 800ae34:	3308      	adds	r3, #8
 800ae36:	9303      	str	r3, [sp, #12]
 800ae38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae3a:	443b      	add	r3, r7
 800ae3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae3e:	e767      	b.n	800ad10 <_vfiprintf_r+0x94>
 800ae40:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae44:	460c      	mov	r4, r1
 800ae46:	2001      	movs	r0, #1
 800ae48:	e7a5      	b.n	800ad96 <_vfiprintf_r+0x11a>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	3401      	adds	r4, #1
 800ae4e:	9305      	str	r3, [sp, #20]
 800ae50:	4619      	mov	r1, r3
 800ae52:	f04f 0c0a 	mov.w	ip, #10
 800ae56:	4620      	mov	r0, r4
 800ae58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae5c:	3a30      	subs	r2, #48	; 0x30
 800ae5e:	2a09      	cmp	r2, #9
 800ae60:	d903      	bls.n	800ae6a <_vfiprintf_r+0x1ee>
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d0c5      	beq.n	800adf2 <_vfiprintf_r+0x176>
 800ae66:	9105      	str	r1, [sp, #20]
 800ae68:	e7c3      	b.n	800adf2 <_vfiprintf_r+0x176>
 800ae6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae6e:	4604      	mov	r4, r0
 800ae70:	2301      	movs	r3, #1
 800ae72:	e7f0      	b.n	800ae56 <_vfiprintf_r+0x1da>
 800ae74:	ab03      	add	r3, sp, #12
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	462a      	mov	r2, r5
 800ae7a:	4b16      	ldr	r3, [pc, #88]	; (800aed4 <_vfiprintf_r+0x258>)
 800ae7c:	a904      	add	r1, sp, #16
 800ae7e:	4630      	mov	r0, r6
 800ae80:	f3af 8000 	nop.w
 800ae84:	4607      	mov	r7, r0
 800ae86:	1c78      	adds	r0, r7, #1
 800ae88:	d1d6      	bne.n	800ae38 <_vfiprintf_r+0x1bc>
 800ae8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae8c:	07d9      	lsls	r1, r3, #31
 800ae8e:	d405      	bmi.n	800ae9c <_vfiprintf_r+0x220>
 800ae90:	89ab      	ldrh	r3, [r5, #12]
 800ae92:	059a      	lsls	r2, r3, #22
 800ae94:	d402      	bmi.n	800ae9c <_vfiprintf_r+0x220>
 800ae96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae98:	f7ff fa5a 	bl	800a350 <__retarget_lock_release_recursive>
 800ae9c:	89ab      	ldrh	r3, [r5, #12]
 800ae9e:	065b      	lsls	r3, r3, #25
 800aea0:	f53f af12 	bmi.w	800acc8 <_vfiprintf_r+0x4c>
 800aea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aea6:	e711      	b.n	800accc <_vfiprintf_r+0x50>
 800aea8:	ab03      	add	r3, sp, #12
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	462a      	mov	r2, r5
 800aeae:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <_vfiprintf_r+0x258>)
 800aeb0:	a904      	add	r1, sp, #16
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f000 f880 	bl	800afb8 <_printf_i>
 800aeb8:	e7e4      	b.n	800ae84 <_vfiprintf_r+0x208>
 800aeba:	bf00      	nop
 800aebc:	0800b534 	.word	0x0800b534
 800aec0:	0800b554 	.word	0x0800b554
 800aec4:	0800b514 	.word	0x0800b514
 800aec8:	0800b578 	.word	0x0800b578
 800aecc:	0800b582 	.word	0x0800b582
 800aed0:	00000000 	.word	0x00000000
 800aed4:	0800ac57 	.word	0x0800ac57
 800aed8:	0800b57e 	.word	0x0800b57e

0800aedc <_printf_common>:
 800aedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee0:	4616      	mov	r6, r2
 800aee2:	4699      	mov	r9, r3
 800aee4:	688a      	ldr	r2, [r1, #8]
 800aee6:	690b      	ldr	r3, [r1, #16]
 800aee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aeec:	4293      	cmp	r3, r2
 800aeee:	bfb8      	it	lt
 800aef0:	4613      	movlt	r3, r2
 800aef2:	6033      	str	r3, [r6, #0]
 800aef4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aef8:	4607      	mov	r7, r0
 800aefa:	460c      	mov	r4, r1
 800aefc:	b10a      	cbz	r2, 800af02 <_printf_common+0x26>
 800aefe:	3301      	adds	r3, #1
 800af00:	6033      	str	r3, [r6, #0]
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	0699      	lsls	r1, r3, #26
 800af06:	bf42      	ittt	mi
 800af08:	6833      	ldrmi	r3, [r6, #0]
 800af0a:	3302      	addmi	r3, #2
 800af0c:	6033      	strmi	r3, [r6, #0]
 800af0e:	6825      	ldr	r5, [r4, #0]
 800af10:	f015 0506 	ands.w	r5, r5, #6
 800af14:	d106      	bne.n	800af24 <_printf_common+0x48>
 800af16:	f104 0a19 	add.w	sl, r4, #25
 800af1a:	68e3      	ldr	r3, [r4, #12]
 800af1c:	6832      	ldr	r2, [r6, #0]
 800af1e:	1a9b      	subs	r3, r3, r2
 800af20:	42ab      	cmp	r3, r5
 800af22:	dc26      	bgt.n	800af72 <_printf_common+0x96>
 800af24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af28:	1e13      	subs	r3, r2, #0
 800af2a:	6822      	ldr	r2, [r4, #0]
 800af2c:	bf18      	it	ne
 800af2e:	2301      	movne	r3, #1
 800af30:	0692      	lsls	r2, r2, #26
 800af32:	d42b      	bmi.n	800af8c <_printf_common+0xb0>
 800af34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af38:	4649      	mov	r1, r9
 800af3a:	4638      	mov	r0, r7
 800af3c:	47c0      	blx	r8
 800af3e:	3001      	adds	r0, #1
 800af40:	d01e      	beq.n	800af80 <_printf_common+0xa4>
 800af42:	6823      	ldr	r3, [r4, #0]
 800af44:	68e5      	ldr	r5, [r4, #12]
 800af46:	6832      	ldr	r2, [r6, #0]
 800af48:	f003 0306 	and.w	r3, r3, #6
 800af4c:	2b04      	cmp	r3, #4
 800af4e:	bf08      	it	eq
 800af50:	1aad      	subeq	r5, r5, r2
 800af52:	68a3      	ldr	r3, [r4, #8]
 800af54:	6922      	ldr	r2, [r4, #16]
 800af56:	bf0c      	ite	eq
 800af58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af5c:	2500      	movne	r5, #0
 800af5e:	4293      	cmp	r3, r2
 800af60:	bfc4      	itt	gt
 800af62:	1a9b      	subgt	r3, r3, r2
 800af64:	18ed      	addgt	r5, r5, r3
 800af66:	2600      	movs	r6, #0
 800af68:	341a      	adds	r4, #26
 800af6a:	42b5      	cmp	r5, r6
 800af6c:	d11a      	bne.n	800afa4 <_printf_common+0xc8>
 800af6e:	2000      	movs	r0, #0
 800af70:	e008      	b.n	800af84 <_printf_common+0xa8>
 800af72:	2301      	movs	r3, #1
 800af74:	4652      	mov	r2, sl
 800af76:	4649      	mov	r1, r9
 800af78:	4638      	mov	r0, r7
 800af7a:	47c0      	blx	r8
 800af7c:	3001      	adds	r0, #1
 800af7e:	d103      	bne.n	800af88 <_printf_common+0xac>
 800af80:	f04f 30ff 	mov.w	r0, #4294967295
 800af84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af88:	3501      	adds	r5, #1
 800af8a:	e7c6      	b.n	800af1a <_printf_common+0x3e>
 800af8c:	18e1      	adds	r1, r4, r3
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	2030      	movs	r0, #48	; 0x30
 800af92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af96:	4422      	add	r2, r4
 800af98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afa0:	3302      	adds	r3, #2
 800afa2:	e7c7      	b.n	800af34 <_printf_common+0x58>
 800afa4:	2301      	movs	r3, #1
 800afa6:	4622      	mov	r2, r4
 800afa8:	4649      	mov	r1, r9
 800afaa:	4638      	mov	r0, r7
 800afac:	47c0      	blx	r8
 800afae:	3001      	adds	r0, #1
 800afb0:	d0e6      	beq.n	800af80 <_printf_common+0xa4>
 800afb2:	3601      	adds	r6, #1
 800afb4:	e7d9      	b.n	800af6a <_printf_common+0x8e>
	...

0800afb8 <_printf_i>:
 800afb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afbc:	7e0f      	ldrb	r7, [r1, #24]
 800afbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800afc0:	2f78      	cmp	r7, #120	; 0x78
 800afc2:	4691      	mov	r9, r2
 800afc4:	4680      	mov	r8, r0
 800afc6:	460c      	mov	r4, r1
 800afc8:	469a      	mov	sl, r3
 800afca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800afce:	d807      	bhi.n	800afe0 <_printf_i+0x28>
 800afd0:	2f62      	cmp	r7, #98	; 0x62
 800afd2:	d80a      	bhi.n	800afea <_printf_i+0x32>
 800afd4:	2f00      	cmp	r7, #0
 800afd6:	f000 80d8 	beq.w	800b18a <_printf_i+0x1d2>
 800afda:	2f58      	cmp	r7, #88	; 0x58
 800afdc:	f000 80a3 	beq.w	800b126 <_printf_i+0x16e>
 800afe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800afe8:	e03a      	b.n	800b060 <_printf_i+0xa8>
 800afea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800afee:	2b15      	cmp	r3, #21
 800aff0:	d8f6      	bhi.n	800afe0 <_printf_i+0x28>
 800aff2:	a101      	add	r1, pc, #4	; (adr r1, 800aff8 <_printf_i+0x40>)
 800aff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aff8:	0800b051 	.word	0x0800b051
 800affc:	0800b065 	.word	0x0800b065
 800b000:	0800afe1 	.word	0x0800afe1
 800b004:	0800afe1 	.word	0x0800afe1
 800b008:	0800afe1 	.word	0x0800afe1
 800b00c:	0800afe1 	.word	0x0800afe1
 800b010:	0800b065 	.word	0x0800b065
 800b014:	0800afe1 	.word	0x0800afe1
 800b018:	0800afe1 	.word	0x0800afe1
 800b01c:	0800afe1 	.word	0x0800afe1
 800b020:	0800afe1 	.word	0x0800afe1
 800b024:	0800b171 	.word	0x0800b171
 800b028:	0800b095 	.word	0x0800b095
 800b02c:	0800b153 	.word	0x0800b153
 800b030:	0800afe1 	.word	0x0800afe1
 800b034:	0800afe1 	.word	0x0800afe1
 800b038:	0800b193 	.word	0x0800b193
 800b03c:	0800afe1 	.word	0x0800afe1
 800b040:	0800b095 	.word	0x0800b095
 800b044:	0800afe1 	.word	0x0800afe1
 800b048:	0800afe1 	.word	0x0800afe1
 800b04c:	0800b15b 	.word	0x0800b15b
 800b050:	682b      	ldr	r3, [r5, #0]
 800b052:	1d1a      	adds	r2, r3, #4
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	602a      	str	r2, [r5, #0]
 800b058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b05c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b060:	2301      	movs	r3, #1
 800b062:	e0a3      	b.n	800b1ac <_printf_i+0x1f4>
 800b064:	6820      	ldr	r0, [r4, #0]
 800b066:	6829      	ldr	r1, [r5, #0]
 800b068:	0606      	lsls	r6, r0, #24
 800b06a:	f101 0304 	add.w	r3, r1, #4
 800b06e:	d50a      	bpl.n	800b086 <_printf_i+0xce>
 800b070:	680e      	ldr	r6, [r1, #0]
 800b072:	602b      	str	r3, [r5, #0]
 800b074:	2e00      	cmp	r6, #0
 800b076:	da03      	bge.n	800b080 <_printf_i+0xc8>
 800b078:	232d      	movs	r3, #45	; 0x2d
 800b07a:	4276      	negs	r6, r6
 800b07c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b080:	485e      	ldr	r0, [pc, #376]	; (800b1fc <_printf_i+0x244>)
 800b082:	230a      	movs	r3, #10
 800b084:	e019      	b.n	800b0ba <_printf_i+0x102>
 800b086:	680e      	ldr	r6, [r1, #0]
 800b088:	602b      	str	r3, [r5, #0]
 800b08a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b08e:	bf18      	it	ne
 800b090:	b236      	sxthne	r6, r6
 800b092:	e7ef      	b.n	800b074 <_printf_i+0xbc>
 800b094:	682b      	ldr	r3, [r5, #0]
 800b096:	6820      	ldr	r0, [r4, #0]
 800b098:	1d19      	adds	r1, r3, #4
 800b09a:	6029      	str	r1, [r5, #0]
 800b09c:	0601      	lsls	r1, r0, #24
 800b09e:	d501      	bpl.n	800b0a4 <_printf_i+0xec>
 800b0a0:	681e      	ldr	r6, [r3, #0]
 800b0a2:	e002      	b.n	800b0aa <_printf_i+0xf2>
 800b0a4:	0646      	lsls	r6, r0, #25
 800b0a6:	d5fb      	bpl.n	800b0a0 <_printf_i+0xe8>
 800b0a8:	881e      	ldrh	r6, [r3, #0]
 800b0aa:	4854      	ldr	r0, [pc, #336]	; (800b1fc <_printf_i+0x244>)
 800b0ac:	2f6f      	cmp	r7, #111	; 0x6f
 800b0ae:	bf0c      	ite	eq
 800b0b0:	2308      	moveq	r3, #8
 800b0b2:	230a      	movne	r3, #10
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0ba:	6865      	ldr	r5, [r4, #4]
 800b0bc:	60a5      	str	r5, [r4, #8]
 800b0be:	2d00      	cmp	r5, #0
 800b0c0:	bfa2      	ittt	ge
 800b0c2:	6821      	ldrge	r1, [r4, #0]
 800b0c4:	f021 0104 	bicge.w	r1, r1, #4
 800b0c8:	6021      	strge	r1, [r4, #0]
 800b0ca:	b90e      	cbnz	r6, 800b0d0 <_printf_i+0x118>
 800b0cc:	2d00      	cmp	r5, #0
 800b0ce:	d04d      	beq.n	800b16c <_printf_i+0x1b4>
 800b0d0:	4615      	mov	r5, r2
 800b0d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b0d6:	fb03 6711 	mls	r7, r3, r1, r6
 800b0da:	5dc7      	ldrb	r7, [r0, r7]
 800b0dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b0e0:	4637      	mov	r7, r6
 800b0e2:	42bb      	cmp	r3, r7
 800b0e4:	460e      	mov	r6, r1
 800b0e6:	d9f4      	bls.n	800b0d2 <_printf_i+0x11a>
 800b0e8:	2b08      	cmp	r3, #8
 800b0ea:	d10b      	bne.n	800b104 <_printf_i+0x14c>
 800b0ec:	6823      	ldr	r3, [r4, #0]
 800b0ee:	07de      	lsls	r6, r3, #31
 800b0f0:	d508      	bpl.n	800b104 <_printf_i+0x14c>
 800b0f2:	6923      	ldr	r3, [r4, #16]
 800b0f4:	6861      	ldr	r1, [r4, #4]
 800b0f6:	4299      	cmp	r1, r3
 800b0f8:	bfde      	ittt	le
 800b0fa:	2330      	movle	r3, #48	; 0x30
 800b0fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b100:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b104:	1b52      	subs	r2, r2, r5
 800b106:	6122      	str	r2, [r4, #16]
 800b108:	f8cd a000 	str.w	sl, [sp]
 800b10c:	464b      	mov	r3, r9
 800b10e:	aa03      	add	r2, sp, #12
 800b110:	4621      	mov	r1, r4
 800b112:	4640      	mov	r0, r8
 800b114:	f7ff fee2 	bl	800aedc <_printf_common>
 800b118:	3001      	adds	r0, #1
 800b11a:	d14c      	bne.n	800b1b6 <_printf_i+0x1fe>
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295
 800b120:	b004      	add	sp, #16
 800b122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b126:	4835      	ldr	r0, [pc, #212]	; (800b1fc <_printf_i+0x244>)
 800b128:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b12c:	6829      	ldr	r1, [r5, #0]
 800b12e:	6823      	ldr	r3, [r4, #0]
 800b130:	f851 6b04 	ldr.w	r6, [r1], #4
 800b134:	6029      	str	r1, [r5, #0]
 800b136:	061d      	lsls	r5, r3, #24
 800b138:	d514      	bpl.n	800b164 <_printf_i+0x1ac>
 800b13a:	07df      	lsls	r7, r3, #31
 800b13c:	bf44      	itt	mi
 800b13e:	f043 0320 	orrmi.w	r3, r3, #32
 800b142:	6023      	strmi	r3, [r4, #0]
 800b144:	b91e      	cbnz	r6, 800b14e <_printf_i+0x196>
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	f023 0320 	bic.w	r3, r3, #32
 800b14c:	6023      	str	r3, [r4, #0]
 800b14e:	2310      	movs	r3, #16
 800b150:	e7b0      	b.n	800b0b4 <_printf_i+0xfc>
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	f043 0320 	orr.w	r3, r3, #32
 800b158:	6023      	str	r3, [r4, #0]
 800b15a:	2378      	movs	r3, #120	; 0x78
 800b15c:	4828      	ldr	r0, [pc, #160]	; (800b200 <_printf_i+0x248>)
 800b15e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b162:	e7e3      	b.n	800b12c <_printf_i+0x174>
 800b164:	0659      	lsls	r1, r3, #25
 800b166:	bf48      	it	mi
 800b168:	b2b6      	uxthmi	r6, r6
 800b16a:	e7e6      	b.n	800b13a <_printf_i+0x182>
 800b16c:	4615      	mov	r5, r2
 800b16e:	e7bb      	b.n	800b0e8 <_printf_i+0x130>
 800b170:	682b      	ldr	r3, [r5, #0]
 800b172:	6826      	ldr	r6, [r4, #0]
 800b174:	6961      	ldr	r1, [r4, #20]
 800b176:	1d18      	adds	r0, r3, #4
 800b178:	6028      	str	r0, [r5, #0]
 800b17a:	0635      	lsls	r5, r6, #24
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	d501      	bpl.n	800b184 <_printf_i+0x1cc>
 800b180:	6019      	str	r1, [r3, #0]
 800b182:	e002      	b.n	800b18a <_printf_i+0x1d2>
 800b184:	0670      	lsls	r0, r6, #25
 800b186:	d5fb      	bpl.n	800b180 <_printf_i+0x1c8>
 800b188:	8019      	strh	r1, [r3, #0]
 800b18a:	2300      	movs	r3, #0
 800b18c:	6123      	str	r3, [r4, #16]
 800b18e:	4615      	mov	r5, r2
 800b190:	e7ba      	b.n	800b108 <_printf_i+0x150>
 800b192:	682b      	ldr	r3, [r5, #0]
 800b194:	1d1a      	adds	r2, r3, #4
 800b196:	602a      	str	r2, [r5, #0]
 800b198:	681d      	ldr	r5, [r3, #0]
 800b19a:	6862      	ldr	r2, [r4, #4]
 800b19c:	2100      	movs	r1, #0
 800b19e:	4628      	mov	r0, r5
 800b1a0:	f7f5 f816 	bl	80001d0 <memchr>
 800b1a4:	b108      	cbz	r0, 800b1aa <_printf_i+0x1f2>
 800b1a6:	1b40      	subs	r0, r0, r5
 800b1a8:	6060      	str	r0, [r4, #4]
 800b1aa:	6863      	ldr	r3, [r4, #4]
 800b1ac:	6123      	str	r3, [r4, #16]
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1b4:	e7a8      	b.n	800b108 <_printf_i+0x150>
 800b1b6:	6923      	ldr	r3, [r4, #16]
 800b1b8:	462a      	mov	r2, r5
 800b1ba:	4649      	mov	r1, r9
 800b1bc:	4640      	mov	r0, r8
 800b1be:	47d0      	blx	sl
 800b1c0:	3001      	adds	r0, #1
 800b1c2:	d0ab      	beq.n	800b11c <_printf_i+0x164>
 800b1c4:	6823      	ldr	r3, [r4, #0]
 800b1c6:	079b      	lsls	r3, r3, #30
 800b1c8:	d413      	bmi.n	800b1f2 <_printf_i+0x23a>
 800b1ca:	68e0      	ldr	r0, [r4, #12]
 800b1cc:	9b03      	ldr	r3, [sp, #12]
 800b1ce:	4298      	cmp	r0, r3
 800b1d0:	bfb8      	it	lt
 800b1d2:	4618      	movlt	r0, r3
 800b1d4:	e7a4      	b.n	800b120 <_printf_i+0x168>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	4632      	mov	r2, r6
 800b1da:	4649      	mov	r1, r9
 800b1dc:	4640      	mov	r0, r8
 800b1de:	47d0      	blx	sl
 800b1e0:	3001      	adds	r0, #1
 800b1e2:	d09b      	beq.n	800b11c <_printf_i+0x164>
 800b1e4:	3501      	adds	r5, #1
 800b1e6:	68e3      	ldr	r3, [r4, #12]
 800b1e8:	9903      	ldr	r1, [sp, #12]
 800b1ea:	1a5b      	subs	r3, r3, r1
 800b1ec:	42ab      	cmp	r3, r5
 800b1ee:	dcf2      	bgt.n	800b1d6 <_printf_i+0x21e>
 800b1f0:	e7eb      	b.n	800b1ca <_printf_i+0x212>
 800b1f2:	2500      	movs	r5, #0
 800b1f4:	f104 0619 	add.w	r6, r4, #25
 800b1f8:	e7f5      	b.n	800b1e6 <_printf_i+0x22e>
 800b1fa:	bf00      	nop
 800b1fc:	0800b589 	.word	0x0800b589
 800b200:	0800b59a 	.word	0x0800b59a

0800b204 <_read_r>:
 800b204:	b538      	push	{r3, r4, r5, lr}
 800b206:	4d07      	ldr	r5, [pc, #28]	; (800b224 <_read_r+0x20>)
 800b208:	4604      	mov	r4, r0
 800b20a:	4608      	mov	r0, r1
 800b20c:	4611      	mov	r1, r2
 800b20e:	2200      	movs	r2, #0
 800b210:	602a      	str	r2, [r5, #0]
 800b212:	461a      	mov	r2, r3
 800b214:	f7f6 fa0a 	bl	800162c <_read>
 800b218:	1c43      	adds	r3, r0, #1
 800b21a:	d102      	bne.n	800b222 <_read_r+0x1e>
 800b21c:	682b      	ldr	r3, [r5, #0]
 800b21e:	b103      	cbz	r3, 800b222 <_read_r+0x1e>
 800b220:	6023      	str	r3, [r4, #0]
 800b222:	bd38      	pop	{r3, r4, r5, pc}
 800b224:	20005338 	.word	0x20005338

0800b228 <_fstat_r>:
 800b228:	b538      	push	{r3, r4, r5, lr}
 800b22a:	4d07      	ldr	r5, [pc, #28]	; (800b248 <_fstat_r+0x20>)
 800b22c:	2300      	movs	r3, #0
 800b22e:	4604      	mov	r4, r0
 800b230:	4608      	mov	r0, r1
 800b232:	4611      	mov	r1, r2
 800b234:	602b      	str	r3, [r5, #0]
 800b236:	f7f6 fa22 	bl	800167e <_fstat>
 800b23a:	1c43      	adds	r3, r0, #1
 800b23c:	d102      	bne.n	800b244 <_fstat_r+0x1c>
 800b23e:	682b      	ldr	r3, [r5, #0]
 800b240:	b103      	cbz	r3, 800b244 <_fstat_r+0x1c>
 800b242:	6023      	str	r3, [r4, #0]
 800b244:	bd38      	pop	{r3, r4, r5, pc}
 800b246:	bf00      	nop
 800b248:	20005338 	.word	0x20005338

0800b24c <_isatty_r>:
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	4d06      	ldr	r5, [pc, #24]	; (800b268 <_isatty_r+0x1c>)
 800b250:	2300      	movs	r3, #0
 800b252:	4604      	mov	r4, r0
 800b254:	4608      	mov	r0, r1
 800b256:	602b      	str	r3, [r5, #0]
 800b258:	f7f6 fa21 	bl	800169e <_isatty>
 800b25c:	1c43      	adds	r3, r0, #1
 800b25e:	d102      	bne.n	800b266 <_isatty_r+0x1a>
 800b260:	682b      	ldr	r3, [r5, #0]
 800b262:	b103      	cbz	r3, 800b266 <_isatty_r+0x1a>
 800b264:	6023      	str	r3, [r4, #0]
 800b266:	bd38      	pop	{r3, r4, r5, pc}
 800b268:	20005338 	.word	0x20005338

0800b26c <_init>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	bf00      	nop
 800b270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b272:	bc08      	pop	{r3}
 800b274:	469e      	mov	lr, r3
 800b276:	4770      	bx	lr

0800b278 <_fini>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	bf00      	nop
 800b27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b27e:	bc08      	pop	{r3}
 800b280:	469e      	mov	lr, r3
 800b282:	4770      	bx	lr
