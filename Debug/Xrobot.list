
Xrobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc0  08011c20  08011c20  00021c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080127e0  080127e0  00030270  2**0
                  CONTENTS
  4 .ARM          00000008  080127e0  080127e0  000227e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080127e8  080127e8  00030270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080127e8  080127e8  000227e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080127ec  080127ec  000227ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  080127f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030270  2**0
                  CONTENTS
 10 .bss          00005840  20000270  20000270  00030270  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005ab0  20005ab0  00030270  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022dcd  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f2c  00000000  00000000  0005306d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab8  00000000  00000000  00057fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018c0  00000000  00000000  00059a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000738c  00000000  00000000  0005b318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f8e4  00000000  00000000  000626a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d248b  00000000  00000000  00081f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00154413  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008214  00000000  00000000  00154464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011c04 	.word	0x08011c04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	08011c04 	.word	0x08011c04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ws2812NumOn>:

uint16_t g_led_data[(TOTALNUM*32)+CYCLE_RESET]={0,};//CYCLE_RESET of data = 0, not BIT_HIGH or BIT_LOW


void ws2812NumOn(uint32_t led_cnt)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint16_t *)g_led_data, (TOTALNUM*32)+CYCLE_RESET);
 8000eb4:	f240 4304 	movw	r3, #1028	; 0x404
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <ws2812NumOn+0x48>)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	480e      	ldr	r0, [pc, #56]	; (8000ef8 <ws2812NumOn+0x4c>)
 8000ebe:	f006 f895 	bl	8006fec <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_2, (uint16_t *)g_led_data, (TOTALNUM*32)+CYCLE_RESET);
 8000ec2:	f240 4304 	movw	r3, #1028	; 0x404
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <ws2812NumOn+0x48>)
 8000ec8:	2104      	movs	r1, #4
 8000eca:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <ws2812NumOn+0x4c>)
 8000ecc:	f006 f88e 	bl	8006fec <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_3, (uint16_t *)g_led_data, (TOTALNUM*32)+CYCLE_RESET);
 8000ed0:	f240 4304 	movw	r3, #1028	; 0x404
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <ws2812NumOn+0x48>)
 8000ed6:	2108      	movs	r1, #8
 8000ed8:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <ws2812NumOn+0x4c>)
 8000eda:	f006 f887 	bl	8006fec <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_4, (uint16_t *)g_led_data, (TOTALNUM*32)+CYCLE_RESET);
 8000ede:	f240 4304 	movw	r3, #1028	; 0x404
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <ws2812NumOn+0x48>)
 8000ee4:	210c      	movs	r1, #12
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <ws2812NumOn+0x4c>)
 8000ee8:	f006 f880 	bl	8006fec <HAL_TIM_PWM_Start_DMA>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000028c 	.word	0x2000028c
 8000ef8:	20000d7c 	.word	0x20000d7c

08000efc <ws2812AllColor>:
	}
}


void ws2812AllColor(uint8_t red, uint8_t green, uint8_t blue)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	460b      	mov	r3, r1
 8000f08:	71bb      	strb	r3, [r7, #6]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	717b      	strb	r3, [r7, #5]
	uint32_t buf=0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]

	buf = green*0x1000000 + red*0x10000 + blue*0x100;	//8bit+8bit+8bit=24bit
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	021a      	lsls	r2, r3, #8
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4413      	add	r3, r2
 8000f1a:	021a      	lsls	r2, r3, #8
 8000f1c:	797b      	ldrb	r3, [r7, #5]
 8000f1e:	4413      	add	r3, r2
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	60fb      	str	r3, [r7, #12]

	for(int j=TOTALNUM;j>0;j--)
 8000f24:	231d      	movs	r3, #29
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	e025      	b.n	8000f76 <ws2812AllColor+0x7a>
	{
		for(int i=0;i<32;i++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	e01c      	b.n	8000f6a <ws2812AllColor+0x6e>
		{
			if(buf&(1<<i)) {g_led_data[(j*32)-i] = BIT_HIGH;}
 8000f30:	2201      	movs	r2, #1
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d008      	beq.n	8000f54 <ws2812AllColor+0x58>
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	015a      	lsls	r2, r3, #5
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <ws2812AllColor+0x90>)
 8000f4c:	2134      	movs	r1, #52	; 0x34
 8000f4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f52:	e007      	b.n	8000f64 <ws2812AllColor+0x68>
			else {g_led_data[(j*32)-i] = BIT_LOW;}
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	015a      	lsls	r2, r3, #5
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <ws2812AllColor+0x90>)
 8000f5e:	2123      	movs	r1, #35	; 0x23
 8000f60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0;i<32;i++)
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	3301      	adds	r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	2b1f      	cmp	r3, #31
 8000f6e:	dddf      	ble.n	8000f30 <ws2812AllColor+0x34>
	for(int j=TOTALNUM;j>0;j--)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	dcd6      	bgt.n	8000f2a <ws2812AllColor+0x2e>
		}
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	371c      	adds	r7, #28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000028c 	.word	0x2000028c

08000f90 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000f96:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <MX_CAN1_Init+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000f9c:	2206      	movs	r2, #6
 8000f9e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fae:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000fb2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fb6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000fba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <MX_CAN1_Init+0x64>)
 8000fe2:	f003 fb1d 	bl	8004620 <HAL_CAN_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000fec:	f002 fab6 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000b98 	.word	0x20000b98
 8000ff8:	40006400 	.word	0x40006400

08000ffc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <HAL_CAN_MspInit+0x94>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d134      	bne.n	8001088 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_CAN_MspInit+0x98>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <HAL_CAN_MspInit+0x98>)
 8001028:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_CAN_MspInit+0x98>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_CAN_MspInit+0x98>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a14      	ldr	r2, [pc, #80]	; (8001094 <HAL_CAN_MspInit+0x98>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_CAN_MspInit+0x98>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001056:	f44f 7340 	mov.w	r3, #768	; 0x300
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001068:	2309      	movs	r3, #9
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4809      	ldr	r0, [pc, #36]	; (8001098 <HAL_CAN_MspInit+0x9c>)
 8001074:	f004 fe82 	bl	8005d7c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2105      	movs	r1, #5
 800107c:	2014      	movs	r0, #20
 800107e:	f004 fa43 	bl	8005508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001082:	2014      	movs	r0, #20
 8001084:	f004 fa5c 	bl	8005540 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	; 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40006400 	.word	0x40006400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400

0800109c <CAN_disableirq>:
  }
}

/* USER CODE BEGIN 1 */

void CAN_disableirq(void){HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);}
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
 80010a0:	2014      	movs	r0, #20
 80010a2:	f004 fa5b 	bl	800555c <HAL_NVIC_DisableIRQ>
 80010a6:	2015      	movs	r0, #21
 80010a8:	f004 fa58 	bl	800555c <HAL_NVIC_DisableIRQ>
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <CAN_enableirq>:
void CAN_enableirq(void){HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);/*HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);*/}
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	2014      	movs	r0, #20
 80010b6:	f004 fa43 	bl	8005540 <HAL_NVIC_EnableIRQ>
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <CanInit>:

void CanInit(uint32_t id, uint32_t mask, uint8_t EXT_Select)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	4613      	mov	r3, r2
 80010cc:	71fb      	strb	r3, [r7, #7]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <CanInit+0x88>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <CanInit+0x88>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <CanInit+0x88>)
 80010dc:	2201      	movs	r2, #1
 80010de:	61da      	str	r2, [r3, #28]
//    sFilterConfig.FilterIdHigh = (id<<3)>>16;
//    sFilterConfig.FilterIdLow = ((id<<3)&0xffff)|(EXT_Select<<2);//(0x1<<2) is extended id check register
//    sFilterConfig.FilterMaskIdHigh = (mask<<3)>>16;
//    sFilterConfig.FilterMaskIdLow = ((mask<<3)&0xffff)|(EXT_Select<<2);
    sFilterConfig.FilterIdHigh = (id<<5);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	015b      	lsls	r3, r3, #5
 80010e4:	4a18      	ldr	r2, [pc, #96]	; (8001148 <CanInit+0x88>)
 80010e6:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = 0;//(0x1<<2) is extended id check register
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <CanInit+0x88>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh = (mask<<5);
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	015b      	lsls	r3, r3, #5
 80010f2:	4a15      	ldr	r2, [pc, #84]	; (8001148 <CanInit+0x88>)
 80010f4:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = 0;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <CanInit+0x88>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <CanInit+0x88>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <CanInit+0x88>)
 8001104:	2201      	movs	r2, #1
 8001106:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <CanInit+0x88>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
    #endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 800110e:	480f      	ldr	r0, [pc, #60]	; (800114c <CanInit+0x8c>)
 8001110:	f003 fc62 	bl	80049d8 <HAL_CAN_Start>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <CanInit+0x5e>
 800111a:	f002 fa1f 	bl	800355c <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 800111e:	2102      	movs	r1, #2
 8001120:	480a      	ldr	r0, [pc, #40]	; (800114c <CanInit+0x8c>)
 8001122:	f003 febf 	bl	8004ea4 <HAL_CAN_ActivateNotification>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d000      	beq.n	800112e <CanInit+0x6e>
 800112c:	e7fe      	b.n	800112c <CanInit+0x6c>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800112e:	4906      	ldr	r1, [pc, #24]	; (8001148 <CanInit+0x88>)
 8001130:	4806      	ldr	r0, [pc, #24]	; (800114c <CanInit+0x8c>)
 8001132:	f003 fb71 	bl	8004818 <HAL_CAN_ConfigFilter>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <CanInit+0x80>
    {
		/* Filter configuration Error */
		Error_Handler();
 800113c:	f002 fa0e 	bl	800355c <Error_Handler>
    }
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000b70 	.word	0x20000b70
 800114c:	20000b98 	.word	0x20000b98

08001150 <sendCan>:
		Error_Handler();
    }
}

void sendCan(uint32_t ID, int8_t *buf, uint8_t len, uint8_t ext)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	4611      	mov	r1, r2
 800115c:	461a      	mov	r2, r3
 800115e:	460b      	mov	r3, r1
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	4613      	mov	r3, r2
 8001164:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <sendCan+0x2c>
 8001178:	2304      	movs	r3, #4
 800117a:	e000      	b.n	800117e <sendCan+0x2e>
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <sendCan+0x74>)
 800118c:	f003 fd43 	bl	8004c16 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001190:	4603      	mov	r3, r0
 8001192:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00d      	beq.n	80011b6 <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	f107 0114 	add.w	r1, r7, #20
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <sendCan+0x74>)
 80011a6:	f003 fc5b 	bl	8004a60 <HAL_CAN_AddTxMessage>
 80011aa:	4603      	mov	r3, r0
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 80011ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d000      	beq.n	80011b6 <sendCan+0x66>
 80011b4:	e7fe      	b.n	80011b4 <sendCan+0x64>
    }
    osDelay(1);//must be
 80011b6:	2001      	movs	r0, #1
 80011b8:	f008 fd84 	bl	8009cc4 <osDelay>
}
 80011bc:	bf00      	nop
 80011be:	3730      	adds	r7, #48	; 0x30
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000b98 	.word	0x20000b98

080011c8 <SDOMsg>:

void SDOMsg(uint8_t Node_id,uint16_t index, uint8_t subindex, uint32_t msg, uint8_t len)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	460b      	mov	r3, r1
 80011d6:	80bb      	strh	r3, [r7, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[8]={0,};
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]

	switch (len) {
 80011e4:	7e3b      	ldrb	r3, [r7, #24]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d817      	bhi.n	800121c <SDOMsg+0x54>
 80011ec:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <SDOMsg+0x2c>)
 80011ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f2:	bf00      	nop
 80011f4:	08001205 	.word	0x08001205
 80011f8:	0800120b 	.word	0x0800120b
 80011fc:	08001211 	.word	0x08001211
 8001200:	08001217 	.word	0x08001217
		case 1:
			buf[0]=0x2f;	break;	//1byte
 8001204:	232f      	movs	r3, #47	; 0x2f
 8001206:	723b      	strb	r3, [r7, #8]
 8001208:	e008      	b.n	800121c <SDOMsg+0x54>
		case 2:
			buf[0]=0x2b;	break;	//2byte
 800120a:	232b      	movs	r3, #43	; 0x2b
 800120c:	723b      	strb	r3, [r7, #8]
 800120e:	e005      	b.n	800121c <SDOMsg+0x54>
		case 3:
			buf[0]=0x27;	break;	//3byte
 8001210:	2327      	movs	r3, #39	; 0x27
 8001212:	723b      	strb	r3, [r7, #8]
 8001214:	e002      	b.n	800121c <SDOMsg+0x54>
		case 4:
			buf[0]=0x23;	break;	//4byte
 8001216:	2323      	movs	r3, #35	; 0x23
 8001218:	723b      	strb	r3, [r7, #8]
 800121a:	bf00      	nop
	}

	memcpy(buf+1,&index,2);	//index
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	3301      	adds	r3, #1
 8001222:	88ba      	ldrh	r2, [r7, #4]
 8001224:	801a      	strh	r2, [r3, #0]
	buf[3]=subindex;		//subindex
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	72fb      	strb	r3, [r7, #11]
	memcpy(buf+4,&msg,len);	//data
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	3304      	adds	r3, #4
 8001230:	7e3a      	ldrb	r2, [r7, #24]
 8001232:	4639      	mov	r1, r7
 8001234:	4618      	mov	r0, r3
 8001236:	f00c fcb4 	bl	800dba2 <memcpy>

	sendCan(0x600+Node_id,buf,8,0);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001240:	4618      	mov	r0, r3
 8001242:	f107 0108 	add.w	r1, r7, #8
 8001246:	2300      	movs	r3, #0
 8001248:	2208      	movs	r2, #8
 800124a:	f7ff ff81 	bl	8001150 <sendCan>
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop

08001258 <NMT_Mode>:

void NMT_Mode(uint8_t command, uint8_t Node_id)// command 1= pre-operation, 2=operation
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	71fb      	strb	r3, [r7, #7]
 8001264:	4613      	mov	r3, r2
 8001266:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[8]={0,};
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]


	if(command == 1){buf[0]=0x80;}//enter nmt pre-operational command
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d102      	bne.n	800127c <NMT_Mode+0x24>
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	723b      	strb	r3, [r7, #8]
 800127a:	e001      	b.n	8001280 <NMT_Mode+0x28>
	else{buf[0]=0x01;}//enter nmt operational command for PDO operation
 800127c:	2301      	movs	r3, #1
 800127e:	723b      	strb	r3, [r7, #8]
	buf[1]=Node_id;//node id
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	727b      	strb	r3, [r7, #9]

	sendCan(0, buf, 8, 0);
 8001284:	f107 0108 	add.w	r1, r7, #8
 8001288:	2300      	movs	r3, #0
 800128a:	2208      	movs	r2, #8
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff ff5f 	bl	8001150 <sendCan>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <PDOMapping>:


int PDOMapping(uint8_t Node_id, uint16_t PDO_index, MappingPar Param, uint8_t Num_entry)//entry rr
{
 800129c:	b082      	sub	sp, #8
 800129e:	b590      	push	{r4, r7, lr}
 80012a0:	b089      	sub	sp, #36	; 0x24
 80012a2:	af02      	add	r7, sp, #8
 80012a4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80012a8:	e884 000c 	stmia.w	r4, {r2, r3}
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
 80012b0:	460b      	mov	r3, r1
 80012b2:	80bb      	strh	r3, [r7, #4]
	uint32_t tmp = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
	uint16_t tmp_TxRx = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	82fb      	strh	r3, [r7, #22]
	uint8_t type = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	757b      	strb	r3, [r7, #21]

	if(Num_entry>=5){printf("Num_entry error: %d\n", Num_entry); return 0;}
 80012c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d907      	bls.n	80012d8 <PDOMapping+0x3c>
 80012c8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80012cc:	4619      	mov	r1, r3
 80012ce:	4858      	ldr	r0, [pc, #352]	; (8001430 <PDOMapping+0x194>)
 80012d0:	f00d f97c 	bl	800e5cc <iprintf>
 80012d4:	2300      	movs	r3, #0
 80012d6:	e0a4      	b.n	8001422 <PDOMapping+0x186>

	if(PDO_index>=0x1600&&PDO_index<=0x17ff){tmp_TxRx=0x200+0x100*(PDO_index-0x1600); type=0xff;}
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 80012de:	d30d      	bcc.n	80012fc <PDOMapping+0x60>
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80012e6:	d209      	bcs.n	80012fc <PDOMapping+0x60>
 80012e8:	88bb      	ldrh	r3, [r7, #4]
 80012ea:	f5a3 53af 	sub.w	r3, r3, #5600	; 0x15e0
 80012ee:	3b1e      	subs	r3, #30
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	82fb      	strh	r3, [r7, #22]
 80012f6:	23ff      	movs	r3, #255	; 0xff
 80012f8:	757b      	strb	r3, [r7, #21]
 80012fa:	e021      	b.n	8001340 <PDOMapping+0xa4>
	else if(PDO_index>=0x1a00&&PDO_index<=0x1bff) {
 80012fc:	88bb      	ldrh	r3, [r7, #4]
 80012fe:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8001302:	d316      	bcc.n	8001332 <PDOMapping+0x96>
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800130a:	d212      	bcs.n	8001332 <PDOMapping+0x96>
		tmp_TxRx=0x180+0x100*(PDO_index-0x1a00);
 800130c:	88bb      	ldrh	r3, [r7, #4]
 800130e:	f5a3 53d0 	sub.w	r3, r3, #6656	; 0x1a00
 8001312:	b29b      	uxth	r3, r3
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b29b      	uxth	r3, r3
 8001318:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800131c:	82fb      	strh	r3, [r7, #22]
		if(Param.option==0){type=0xfe;}
 800131e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <PDOMapping+0x90>
 8001326:	23fe      	movs	r3, #254	; 0xfe
 8001328:	757b      	strb	r3, [r7, #21]
 800132a:	e009      	b.n	8001340 <PDOMapping+0xa4>
		else {type=0xff;}
 800132c:	23ff      	movs	r3, #255	; 0xff
 800132e:	757b      	strb	r3, [r7, #21]
		if(Param.option==0){type=0xfe;}
 8001330:	e006      	b.n	8001340 <PDOMapping+0xa4>
		}
	else {printf("PDO_index error: %d\n", PDO_index); return 0;}
 8001332:	88bb      	ldrh	r3, [r7, #4]
 8001334:	4619      	mov	r1, r3
 8001336:	483f      	ldr	r0, [pc, #252]	; (8001434 <PDOMapping+0x198>)
 8001338:	f00d f948 	bl	800e5cc <iprintf>
 800133c:	2300      	movs	r3, #0
 800133e:	e070      	b.n	8001422 <PDOMapping+0x186>

	NMT_Mode(PRE_OPERATION, Node_id);//pre-operation mode
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	4619      	mov	r1, r3
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff ff87 	bl	8001258 <NMT_Mode>

	for(int i=0;i<Num_entry;i++) {//clear rpdo0 mapping, 0x60ff(index) 03(subindex) 20(length)
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	e05d      	b.n	800140c <PDOMapping+0x170>
		SDOMsg(Node_id, PDO_index, 0, 0, 1);//clear rpdo0 mapping
 8001350:	88b9      	ldrh	r1, [r7, #4]
 8001352:	79f8      	ldrb	r0, [r7, #7]
 8001354:	2301      	movs	r3, #1
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2300      	movs	r3, #0
 800135a:	2200      	movs	r2, #0
 800135c:	f7ff ff34 	bl	80011c8 <SDOMsg>
		tmp=(0x10000*Param.index[i])+(0x100* Param.subindex[i])+(Param.length[i]);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	440a      	add	r2, r1
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	4413      	add	r3, r2
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	440a      	add	r2, r1
 8001382:	7812      	ldrb	r2, [r2, #0]
 8001384:	4413      	add	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
		SDOMsg(Node_id, PDO_index, i+1, tmp, 4);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	3301      	adds	r3, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	88b9      	ldrh	r1, [r7, #4]
 8001392:	79f8      	ldrb	r0, [r7, #7]
 8001394:	2304      	movs	r3, #4
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f7ff ff15 	bl	80011c8 <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 1, tmp_TxRx+Node_id, 4);//cob-id??
 800139e:	88bb      	ldrh	r3, [r7, #4]
 80013a0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80013a4:	b299      	uxth	r1, r3
 80013a6:	8afa      	ldrh	r2, [r7, #22]
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	4413      	add	r3, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	79f8      	ldrb	r0, [r7, #7]
 80013b0:	2304      	movs	r3, #4
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	4613      	mov	r3, r2
 80013b6:	2201      	movs	r2, #1
 80013b8:	f7ff ff06 	bl	80011c8 <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 2, type, 1);//transmission type, fix asynchronous with 0xff
 80013bc:	88bb      	ldrh	r3, [r7, #4]
 80013be:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80013c2:	b299      	uxth	r1, r3
 80013c4:	7d7b      	ldrb	r3, [r7, #21]
 80013c6:	79f8      	ldrb	r0, [r7, #7]
 80013c8:	2201      	movs	r2, #1
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	2202      	movs	r2, #2
 80013ce:	f7ff fefb 	bl	80011c8 <SDOMsg>
		SDOMsg(Node_id, PDO_index-0x200, 3+(Param.option*2), Param.option_time, 2);//not necessary 3= inhibit mode, 5=event timer mode
 80013d2:	88bb      	ldrh	r3, [r7, #4]
 80013d4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80013d8:	b299      	uxth	r1, r3
 80013da:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	3303      	adds	r3, #3
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80013e8:	461c      	mov	r4, r3
 80013ea:	79f8      	ldrb	r0, [r7, #7]
 80013ec:	2302      	movs	r3, #2
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	4623      	mov	r3, r4
 80013f2:	f7ff fee9 	bl	80011c8 <SDOMsg>
		SDOMsg(Node_id, PDO_index, 0, 0x01, 1);//set rpdo0 mapping
 80013f6:	88b9      	ldrh	r1, [r7, #4]
 80013f8:	79f8      	ldrb	r0, [r7, #7]
 80013fa:	2301      	movs	r3, #1
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	2200      	movs	r2, #0
 8001402:	f7ff fee1 	bl	80011c8 <SDOMsg>
	for(int i=0;i<Num_entry;i++) {//clear rpdo0 mapping, 0x60ff(index) 03(subindex) 20(length)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	3301      	adds	r3, #1
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	429a      	cmp	r2, r3
 8001414:	db9c      	blt.n	8001350 <PDOMapping+0xb4>
	}

	NMT_Mode(OPERATION, Node_id);//operation mode
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4619      	mov	r1, r3
 800141a:	2002      	movs	r0, #2
 800141c:	f7ff ff1c 	bl	8001258 <NMT_Mode>

	return 1;
 8001420:	2301      	movs	r3, #1
}
 8001422:	4618      	mov	r0, r3
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800142c:	b002      	add	sp, #8
 800142e:	4770      	bx	lr
 8001430:	08011c20 	.word	0x08011c20
 8001434:	08011c38 	.word	0x08011c38

08001438 <PDOMsg>:

void PDOMsg(uint8_t Node_id, uint16_t PDO_index, uint8_t *buf, uint8_t length)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	603a      	str	r2, [r7, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
 8001446:	460b      	mov	r3, r1
 8001448:	80bb      	strh	r3, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	71bb      	strb	r3, [r7, #6]
	sendCan((PDO_index-0x1800)+Node_id,buf,length,0);
 800144e:	88bb      	ldrh	r3, [r7, #4]
 8001450:	f5a3 52c0 	sub.w	r2, r3, #6144	; 0x1800
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4413      	add	r3, r2
 8001458:	4618      	mov	r0, r3
 800145a:	79ba      	ldrb	r2, [r7, #6]
 800145c:	2300      	movs	r3, #0
 800145e:	6839      	ldr	r1, [r7, #0]
 8001460:	f7ff fe76 	bl	8001150 <sendCan>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <Vel_PDOMsg>:

void Vel_PDOMsg(uint8_t Node_id, uint16_t PDO_index, uint16_t vel_left, uint16_t vel_right)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	4604      	mov	r4, r0
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4623      	mov	r3, r4
 800147c:	71fb      	strb	r3, [r7, #7]
 800147e:	4603      	mov	r3, r0
 8001480:	80bb      	strh	r3, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	807b      	strh	r3, [r7, #2]
 8001486:	4613      	mov	r3, r2
 8001488:	803b      	strh	r3, [r7, #0]
	uint8_t buf[8];

	buf[0]=(uint8_t)vel_left;
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	723b      	strb	r3, [r7, #8]
	buf[1]=(uint8_t)(vel_left>>8);
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	0a1b      	lsrs	r3, r3, #8
 8001494:	b29b      	uxth	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	727b      	strb	r3, [r7, #9]
	buf[2]=(uint8_t)vel_right;
 800149a:	883b      	ldrh	r3, [r7, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	72bb      	strb	r3, [r7, #10]
	buf[3]=(uint8_t)(vel_right>>8);
 80014a0:	883b      	ldrh	r3, [r7, #0]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	72fb      	strb	r3, [r7, #11]

	PDOMsg(Node_id, PDO_index, buf, 4);
 80014aa:	f107 0208 	add.w	r2, r7, #8
 80014ae:	88b9      	ldrh	r1, [r7, #4]
 80014b0:	79f8      	ldrb	r0, [r7, #7]
 80014b2:	2304      	movs	r3, #4
 80014b4:	f7ff ffc0 	bl	8001438 <PDOMsg>
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd90      	pop	{r4, r7, pc}

080014c0 <Tor_OnOff>:


void Tor_OnOff(uint8_t OnOff)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
	if(OnOff==1){
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d139      	bne.n	8001544 <Tor_OnOff+0x84>
		for(int i=0;i<2;i++){
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e032      	b.n	800153c <Tor_OnOff+0x7c>
			SDOMsg(i+1,0x6040, 0x0, 0x00, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	3301      	adds	r3, #1
 80014dc:	b2d8      	uxtb	r0, r3
 80014de:	2302      	movs	r3, #2
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2300      	movs	r3, #0
 80014e4:	2200      	movs	r2, #0
 80014e6:	f246 0140 	movw	r1, #24640	; 0x6040
 80014ea:	f7ff fe6d 	bl	80011c8 <SDOMsg>
			SDOMsg(i+1,0x6040, 0x0, 0x06, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 1: At this time, the low 4-bit status of 6041 is 0001, motor is released;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	3301      	adds	r3, #1
 80014f4:	b2d8      	uxtb	r0, r3
 80014f6:	2302      	movs	r3, #2
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2306      	movs	r3, #6
 80014fc:	2200      	movs	r2, #0
 80014fe:	f246 0140 	movw	r1, #24640	; 0x6040
 8001502:	f7ff fe61 	bl	80011c8 <SDOMsg>
			SDOMsg(i+1,0x6040, 0x0, 0x07, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 2: At this time, the low 4-bit status of 6041 is 0011, motor is enabled;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	3301      	adds	r3, #1
 800150c:	b2d8      	uxtb	r0, r3
 800150e:	2302      	movs	r3, #2
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2307      	movs	r3, #7
 8001514:	2200      	movs	r2, #0
 8001516:	f246 0140 	movw	r1, #24640	; 0x6040
 800151a:	f7ff fe55 	bl	80011c8 <SDOMsg>
			SDOMsg(i+1,0x6040, 0x0, 0x0f, 2);//Node_id, index,  subindex,  msg,  len//Initialization step 3: At this time, the low 4-bit status of 6041 is 0111, motor is enabled;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	3301      	adds	r3, #1
 8001524:	b2d8      	uxtb	r0, r3
 8001526:	2302      	movs	r3, #2
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	230f      	movs	r3, #15
 800152c:	2200      	movs	r2, #0
 800152e:	f246 0140 	movw	r1, #24640	; 0x6040
 8001532:	f7ff fe49 	bl	80011c8 <SDOMsg>
		for(int i=0;i<2;i++){
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	3301      	adds	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b01      	cmp	r3, #1
 8001540:	ddc9      	ble.n	80014d6 <Tor_OnOff+0x16>
		}
	}
	else{for(int i=0;i<2;i++){SDOMsg(i+1,0x6040, 0x0, 0x00, 2);}}//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
}
 8001542:	e014      	b.n	800156e <Tor_OnOff+0xae>
	else{for(int i=0;i<2;i++){SDOMsg(i+1,0x6040, 0x0, 0x00, 2);}}//Node_id, index,  subindex,  msg,  len//Initialization step 0: At this time, the low 4-bit status of 6041 is 0000, motor is released;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	e00e      	b.n	8001568 <Tor_OnOff+0xa8>
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	3301      	adds	r3, #1
 8001550:	b2d8      	uxtb	r0, r3
 8001552:	2302      	movs	r3, #2
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2300      	movs	r3, #0
 8001558:	2200      	movs	r2, #0
 800155a:	f246 0140 	movw	r1, #24640	; 0x6040
 800155e:	f7ff fe33 	bl	80011c8 <SDOMsg>
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	3301      	adds	r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b01      	cmp	r3, #1
 800156c:	dded      	ble.n	800154a <Tor_OnOff+0x8a>
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af02      	add	r7, sp, #8
 800157e:	6078      	str	r0, [r7, #4]
  /* Get RX message */
	if(FLAG_RxCplt<5)
 8001580:	4b3d      	ldr	r3, [pc, #244]	; (8001678 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b04      	cmp	r3, #4
 8001586:	d841      	bhi.n	800160c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
	{
		if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header[FLAG_RxCplt], g_uCAN_Rx_Data[FLAG_RxCplt]) != HAL_OK){while(1){;}}
 8001588:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4a39      	ldr	r2, [pc, #228]	; (800167c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 8001596:	441a      	add	r2, r3
 8001598:	4b37      	ldr	r3, [pc, #220]	; (8001678 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4938      	ldr	r1, [pc, #224]	; (8001680 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80015a0:	440b      	add	r3, r1
 80015a2:	2100      	movs	r1, #0
 80015a4:	4837      	ldr	r0, [pc, #220]	; (8001684 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80015a6:	f003 fb6b 	bl	8004c80 <HAL_CAN_GetRxMessage>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d000      	beq.n	80015b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
 80015b0:	e7fe      	b.n	80015b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
		printf("%d: RF %d %d %d\n", osKernelGetTickCount(),
 80015b2:	f008 f9ef 	bl	8009994 <osKernelGetTickCount>
 80015b6:	4604      	mov	r4, r0
 80015b8:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	492f      	ldr	r1, [pc, #188]	; (800167c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	1a9b      	subs	r3, r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	6819      	ldr	r1, [r3, #0]
 80015ca:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	482b      	ldr	r0, [pc, #172]	; (800167c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4403      	add	r3, r0
 80015da:	3304      	adds	r3, #4
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	4b26      	ldr	r3, [pc, #152]	; (8001678 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4d26      	ldr	r5, [pc, #152]	; (800167c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	1a9b      	subs	r3, r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	442b      	add	r3, r5
 80015ee:	3308      	adds	r3, #8
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	4603      	mov	r3, r0
 80015f6:	460a      	mov	r2, r1
 80015f8:	4621      	mov	r1, r4
 80015fa:	4823      	ldr	r0, [pc, #140]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80015fc:	f00c ffe6 	bl	800e5cc <iprintf>
				g_tCan_Rx_Header[FLAG_RxCplt].StdId, g_tCan_Rx_Header[FLAG_RxCplt].ExtId, g_tCan_Rx_Header[FLAG_RxCplt].IDE);
		FLAG_RxCplt++;
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8001608:	6013      	str	r3, [r2, #0]
		printf("%d: RF_TC %d %d %d\n", osKernelGetTickCount(),
						g_tCan_Rx_Header[FLAG_RxCplt].StdId, g_tCan_Rx_Header[FLAG_RxCplt].ExtId, g_tCan_Rx_Header[FLAG_RxCplt].IDE);
	}


}
 800160a:	e030      	b.n	800166e <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
		if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header[6], g_uCAN_Rx_Data[6]) != HAL_OK){while(1){;}}
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800160e:	4a20      	ldr	r2, [pc, #128]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8001610:	2100      	movs	r1, #0
 8001612:	481c      	ldr	r0, [pc, #112]	; (8001684 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8001614:	f003 fb34 	bl	8004c80 <HAL_CAN_GetRxMessage>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d000      	beq.n	8001620 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 800161e:	e7fe      	b.n	800161e <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
		printf("%d: RF_TC %d %d %d\n", osKernelGetTickCount(),
 8001620:	f008 f9b8 	bl	8009994 <osKernelGetTickCount>
 8001624:	4604      	mov	r4, r0
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4914      	ldr	r1, [pc, #80]	; (800167c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 800162c:	4613      	mov	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	1a9b      	subs	r3, r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	6819      	ldr	r1, [r3, #0]
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	480f      	ldr	r0, [pc, #60]	; (800167c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 800163e:	4613      	mov	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	1a9b      	subs	r3, r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4403      	add	r3, r0
 8001648:	3304      	adds	r3, #4
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4d0a      	ldr	r5, [pc, #40]	; (800167c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 8001652:	4613      	mov	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	1a9b      	subs	r3, r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	442b      	add	r3, r5
 800165c:	3308      	adds	r3, #8
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	4603      	mov	r3, r0
 8001664:	460a      	mov	r2, r1
 8001666:	4621      	mov	r1, r4
 8001668:	480a      	ldr	r0, [pc, #40]	; (8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800166a:	f00c ffaf 	bl	800e5cc <iprintf>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bdb0      	pop	{r4, r5, r7, pc}
 8001676:	bf00      	nop
 8001678:	20000a94 	.word	0x20000a94
 800167c:	20000ac8 	.word	0x20000ac8
 8001680:	20000a98 	.word	0x20000a98
 8001684:	20000b98 	.word	0x20000b98
 8001688:	08011c50 	.word	0x08011c50
 800168c:	20000ac8 	.word	0x20000ac8
 8001690:	20000b70 	.word	0x20000b70
 8001694:	08011c64 	.word	0x08011c64

08001698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <MX_DMA_Init+0xa8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a26      	ldr	r2, [pc, #152]	; (8001740 <MX_DMA_Init+0xa8>)
 80016a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b24      	ldr	r3, [pc, #144]	; (8001740 <MX_DMA_Init+0xa8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <MX_DMA_Init+0xa8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a1f      	ldr	r2, [pc, #124]	; (8001740 <MX_DMA_Init+0xa8>)
 80016c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_DMA_Init+0xa8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2105      	movs	r1, #5
 80016da:	200e      	movs	r0, #14
 80016dc:	f003 ff14 	bl	8005508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80016e0:	200e      	movs	r0, #14
 80016e2:	f003 ff2d 	bl	8005540 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2105      	movs	r1, #5
 80016ea:	2011      	movs	r0, #17
 80016ec:	f003 ff0c 	bl	8005508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016f0:	2011      	movs	r0, #17
 80016f2:	f003 ff25 	bl	8005540 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2105      	movs	r1, #5
 80016fa:	203a      	movs	r0, #58	; 0x3a
 80016fc:	f003 ff04 	bl	8005508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001700:	203a      	movs	r0, #58	; 0x3a
 8001702:	f003 ff1d 	bl	8005540 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2105      	movs	r1, #5
 800170a:	203b      	movs	r0, #59	; 0x3b
 800170c:	f003 fefc 	bl	8005508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001710:	203b      	movs	r0, #59	; 0x3b
 8001712:	f003 ff15 	bl	8005540 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2105      	movs	r1, #5
 800171a:	203c      	movs	r0, #60	; 0x3c
 800171c:	f003 fef4 	bl	8005508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001720:	203c      	movs	r0, #60	; 0x3c
 8001722:	f003 ff0d 	bl	8005540 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2105      	movs	r1, #5
 800172a:	2046      	movs	r0, #70	; 0x46
 800172c:	f003 feec 	bl	8005508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001730:	2046      	movs	r0, #70	; 0x46
 8001732:	f003 ff05 	bl	8005540 <HAL_NVIC_EnableIRQ>

}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <fanInit>:

#include <fan.h>


void fanInit(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
    //HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_1);//stm32f103
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001748:	2100      	movs	r1, #0
 800174a:	4802      	ldr	r0, [pc, #8]	; (8001754 <fanInit+0x10>)
 800174c:	f005 fb86 	bl	8006e5c <HAL_TIM_PWM_Start>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000cec 	.word	0x20000cec

08001758 <fanOn>:

void fanOn(uint8_t duty)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
	if(duty>=100){duty = 100;}
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b63      	cmp	r3, #99	; 0x63
 8001766:	d901      	bls.n	800176c <fanOn+0x14>
 8001768:	2364      	movs	r3, #100	; 0x64
 800176a:	71fb      	strb	r3, [r7, #7]

	if(duty==0){htim1.Instance->CCR1 = 0;}
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d104      	bne.n	800177c <fanOn+0x24>
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <fanOn+0x38>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	635a      	str	r2, [r3, #52]	; 0x34
	else {htim1.Instance->CCR1 = duty;}//write gogo
}
 800177a:	e003      	b.n	8001784 <fanOn+0x2c>
	else {htim1.Instance->CCR1 = duty;}//write gogo
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <fanOn+0x38>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	79fa      	ldrb	r2, [r7, #7]
 8001782:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	20000cec 	.word	0x20000cec

08001794 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001798:	f3bf 8f4f 	dsb	sy
}
 800179c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <__NVIC_SystemReset+0x24>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80017a6:	4904      	ldr	r1, [pc, #16]	; (80017b8 <__NVIC_SystemReset+0x24>)
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_SystemReset+0x28>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80017ae:	f3bf 8f4f 	dsb	sy
}
 80017b2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <__NVIC_SystemReset+0x20>
 80017b8:	e000ed00 	.word	0xe000ed00
 80017bc:	05fa0004 	.word	0x05fa0004

080017c0 <Cal_Real_cmd>:
/* USER CODE BEGIN FunctionPrototypes */



void Cal_Real_cmd(void)
{
 80017c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c4:	ed2d 8b02 	vpush	{d8}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
	Real_cmd_v_x = CONSTANT_VEL2*((Tmp_cmd_FL+Tmp_cmd_RL-Tmp_cmd_FR-Tmp_cmd_RR)/4)/10*fabs(cos(ANGLE_RAD));
 80017cc:	4b80      	ldr	r3, [pc, #512]	; (80019d0 <Cal_Real_cmd+0x210>)
 80017ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b7f      	ldr	r3, [pc, #508]	; (80019d4 <Cal_Real_cmd+0x214>)
 80017d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017da:	4413      	add	r3, r2
 80017dc:	4a7e      	ldr	r2, [pc, #504]	; (80019d8 <Cal_Real_cmd+0x218>)
 80017de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017e2:	1a9b      	subs	r3, r3, r2
 80017e4:	4a7d      	ldr	r2, [pc, #500]	; (80019dc <Cal_Real_cmd+0x21c>)
 80017e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017ea:	1a9b      	subs	r3, r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	da00      	bge.n	80017f2 <Cal_Real_cmd+0x32>
 80017f0:	3303      	adds	r3, #3
 80017f2:	109b      	asrs	r3, r3, #2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fe95 	bl	8000524 <__aeabi_i2d>
 80017fa:	a371      	add	r3, pc, #452	; (adr r3, 80019c0 <Cal_Real_cmd+0x200>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	f7fe fefa 	bl	80005f8 <__aeabi_dmul>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	4b73      	ldr	r3, [pc, #460]	; (80019e0 <Cal_Real_cmd+0x220>)
 8001812:	f7ff f81b 	bl	800084c <__aeabi_ddiv>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	e9c7 2300 	strd	r2, r3, [r7]
 800181e:	4b71      	ldr	r3, [pc, #452]	; (80019e4 <Cal_Real_cmd+0x224>)
 8001820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fe7d 	bl	8000524 <__aeabi_i2d>
 800182a:	ec41 0b18 	vmov	d8, r0, r1
 800182e:	4b6e      	ldr	r3, [pc, #440]	; (80019e8 <Cal_Real_cmd+0x228>)
 8001830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe75 	bl	8000524 <__aeabi_i2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	ec43 2b11 	vmov	d1, r2, r3
 8001842:	eeb0 0a48 	vmov.f32	s0, s16
 8001846:	eef0 0a68 	vmov.f32	s1, s17
 800184a:	f00e ff75 	bl	8010738 <atan2>
 800184e:	eeb0 7a40 	vmov.f32	s14, s0
 8001852:	eef0 7a60 	vmov.f32	s15, s1
 8001856:	eeb0 0a47 	vmov.f32	s0, s14
 800185a:	eef0 0a67 	vmov.f32	s1, s15
 800185e:	f00e febf 	bl	80105e0 <cos>
 8001862:	ec53 2b10 	vmov	r2, r3, d0
 8001866:	4692      	mov	sl, r2
 8001868:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800186c:	4652      	mov	r2, sl
 800186e:	465b      	mov	r3, fp
 8001870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001874:	f7fe fec0 	bl	80005f8 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff f96a 	bl	8000b58 <__aeabi_d2iz>
 8001884:	4603      	mov	r3, r0
 8001886:	b21a      	sxth	r2, r3
 8001888:	4b58      	ldr	r3, [pc, #352]	; (80019ec <Cal_Real_cmd+0x22c>)
 800188a:	801a      	strh	r2, [r3, #0]
	Real_cmd_v_y = CONSTANT_VEL2*((Tmp_cmd_FL+Tmp_cmd_RL-Tmp_cmd_FR-Tmp_cmd_RR)/4)/10*fabs(sin(ANGLE_RAD));
 800188c:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <Cal_Real_cmd+0x210>)
 800188e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001892:	461a      	mov	r2, r3
 8001894:	4b4f      	ldr	r3, [pc, #316]	; (80019d4 <Cal_Real_cmd+0x214>)
 8001896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189a:	4413      	add	r3, r2
 800189c:	4a4e      	ldr	r2, [pc, #312]	; (80019d8 <Cal_Real_cmd+0x218>)
 800189e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	4a4d      	ldr	r2, [pc, #308]	; (80019dc <Cal_Real_cmd+0x21c>)
 80018a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80018aa:	1a9b      	subs	r3, r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	da00      	bge.n	80018b2 <Cal_Real_cmd+0xf2>
 80018b0:	3303      	adds	r3, #3
 80018b2:	109b      	asrs	r3, r3, #2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fe35 	bl	8000524 <__aeabi_i2d>
 80018ba:	a341      	add	r3, pc, #260	; (adr r3, 80019c0 <Cal_Real_cmd+0x200>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	f7fe fe9a 	bl	80005f8 <__aeabi_dmul>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <Cal_Real_cmd+0x220>)
 80018d2:	f7fe ffbb 	bl	800084c <__aeabi_ddiv>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4692      	mov	sl, r2
 80018dc:	469b      	mov	fp, r3
 80018de:	4b41      	ldr	r3, [pc, #260]	; (80019e4 <Cal_Real_cmd+0x224>)
 80018e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fe1d 	bl	8000524 <__aeabi_i2d>
 80018ea:	ec41 0b18 	vmov	d8, r0, r1
 80018ee:	4b3e      	ldr	r3, [pc, #248]	; (80019e8 <Cal_Real_cmd+0x228>)
 80018f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe15 	bl	8000524 <__aeabi_i2d>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	ec43 2b11 	vmov	d1, r2, r3
 8001902:	eeb0 0a48 	vmov.f32	s0, s16
 8001906:	eef0 0a68 	vmov.f32	s1, s17
 800190a:	f00e ff15 	bl	8010738 <atan2>
 800190e:	eeb0 7a40 	vmov.f32	s14, s0
 8001912:	eef0 7a60 	vmov.f32	s15, s1
 8001916:	eeb0 0a47 	vmov.f32	s0, s14
 800191a:	eef0 0a67 	vmov.f32	s1, s15
 800191e:	f00e feb3 	bl	8010688 <sin>
 8001922:	ec53 2b10 	vmov	r2, r3, d0
 8001926:	4690      	mov	r8, r2
 8001928:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800192c:	4642      	mov	r2, r8
 800192e:	464b      	mov	r3, r9
 8001930:	4650      	mov	r0, sl
 8001932:	4659      	mov	r1, fp
 8001934:	f7fe fe60 	bl	80005f8 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f90a 	bl	8000b58 <__aeabi_d2iz>
 8001944:	4603      	mov	r3, r0
 8001946:	b21a      	sxth	r2, r3
 8001948:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <Cal_Real_cmd+0x230>)
 800194a:	801a      	strh	r2, [r3, #0]
	Real_cmd_w = -(CONSTANT_C_AxC_V*((Tmp_cmd_FL+Tmp_cmd_RL+Tmp_cmd_FR+Tmp_cmd_RR)/4))/10;
 800194c:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <Cal_Real_cmd+0x210>)
 800194e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001952:	461a      	mov	r2, r3
 8001954:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <Cal_Real_cmd+0x214>)
 8001956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195a:	4413      	add	r3, r2
 800195c:	4a1e      	ldr	r2, [pc, #120]	; (80019d8 <Cal_Real_cmd+0x218>)
 800195e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001962:	4413      	add	r3, r2
 8001964:	4a1d      	ldr	r2, [pc, #116]	; (80019dc <Cal_Real_cmd+0x21c>)
 8001966:	f9b2 2000 	ldrsh.w	r2, [r2]
 800196a:	4413      	add	r3, r2
 800196c:	2b00      	cmp	r3, #0
 800196e:	da00      	bge.n	8001972 <Cal_Real_cmd+0x1b2>
 8001970:	3303      	adds	r3, #3
 8001972:	109b      	asrs	r3, r3, #2
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fdd5 	bl	8000524 <__aeabi_i2d>
 800197a:	a313      	add	r3, pc, #76	; (adr r3, 80019c8 <Cal_Real_cmd+0x208>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe fe3a 	bl	80005f8 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4614      	mov	r4, r2
 800198a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <Cal_Real_cmd+0x220>)
 8001994:	4620      	mov	r0, r4
 8001996:	4629      	mov	r1, r5
 8001998:	f7fe ff58 	bl	800084c <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f8d8 	bl	8000b58 <__aeabi_d2iz>
 80019a8:	4603      	mov	r3, r0
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <Cal_Real_cmd+0x234>)
 80019ae:	801a      	strh	r2, [r3, #0]
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	ecbd 8b02 	vpop	{d8}
 80019ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019be:	bf00      	nop
 80019c0:	198abd1e 	.word	0x198abd1e
 80019c4:	40221dd4 	.word	0x40221dd4
 80019c8:	8ccd1fe0 	.word	0x8ccd1fe0
 80019cc:	40412c3c 	.word	0x40412c3c
 80019d0:	20000bdc 	.word	0x20000bdc
 80019d4:	20000be0 	.word	0x20000be0
 80019d8:	20000bde 	.word	0x20000bde
 80019dc:	20000be2 	.word	0x20000be2
 80019e0:	40240000 	.word	0x40240000
 80019e4:	20000bd2 	.word	0x20000bd2
 80019e8:	20000bd0 	.word	0x20000bd0
 80019ec:	20000bd6 	.word	0x20000bd6
 80019f0:	20000bd8 	.word	0x20000bd8
 80019f4:	20000bda 	.word	0x20000bda

080019f8 <Stopflagcheck>:

int32_t Stopflagcheck(uint8_t RW, uint8_t value)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	460a      	mov	r2, r1
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	4613      	mov	r3, r2
 8001a06:	71bb      	strb	r3, [r7, #6]
	if(osMutexWait(Stop_flagHandle, osWaitForever)==osOK)
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <Stopflagcheck+0x78>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a10:	4618      	mov	r0, r3
 8001a12:	f008 fae5 	bl	8009fe0 <osMutexAcquire>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d124      	bne.n	8001a66 <Stopflagcheck+0x6e>
	{
		if(RW){
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d019      	beq.n	8001a56 <Stopflagcheck+0x5e>
			if(value == 0){Stop_flag = 0;}
 8001a22:	79bb      	ldrb	r3, [r7, #6]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d103      	bne.n	8001a30 <Stopflagcheck+0x38>
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <Stopflagcheck+0x7c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e004      	b.n	8001a3a <Stopflagcheck+0x42>
			else {Stop_flag++;}
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <Stopflagcheck+0x7c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <Stopflagcheck+0x7c>)
 8001a38:	6013      	str	r3, [r2, #0]
			if(Stop_flag>0xfffffff0){Stop_flag = 1;}
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <Stopflagcheck+0x7c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f113 0f10 	cmn.w	r3, #16
 8001a42:	d902      	bls.n	8001a4a <Stopflagcheck+0x52>
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <Stopflagcheck+0x7c>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
			osMutexRelease(Stop_flagHandle);
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <Stopflagcheck+0x78>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f008 fb11 	bl	800a076 <osMutexRelease>
 8001a54:	e007      	b.n	8001a66 <Stopflagcheck+0x6e>
		}
		else {
			osMutexRelease(Stop_flagHandle);
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <Stopflagcheck+0x78>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f008 fb0b 	bl	800a076 <osMutexRelease>
			return Stop_flag;
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <Stopflagcheck+0x7c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	e7ff      	b.n	8001a66 <Stopflagcheck+0x6e>
		}
	}
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000c30 	.word	0x20000c30
 8001a74:	20000bc8 	.word	0x20000bc8

08001a78 <Deg2Ste>:

int16_t Deg2Ste(uint8_t RW, int16_t deg)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	460a      	mov	r2, r1
 8001a82:	71fb      	strb	r3, [r7, #7]
 8001a84:	4613      	mov	r3, r2
 8001a86:	80bb      	strh	r3, [r7, #4]
	if(osMutexWait(DegmsgHandle, osWaitForever)==osOK)
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <Deg2Ste+0x54>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a90:	4618      	mov	r0, r3
 8001a92:	f008 faa5 	bl	8009fe0 <osMutexAcquire>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d112      	bne.n	8001ac2 <Deg2Ste+0x4a>
	{
		if(RW){//write
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d006      	beq.n	8001ab0 <Deg2Ste+0x38>
	//		SteDeg = deg; printf("%d:deg in mut:%d \n", osKernelGetTickCount(), SteDeg);
			osMutexRelease(DegmsgHandle);
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <Deg2Ste+0x54>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f008 fae5 	bl	800a076 <osMutexRelease>
			return 1;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e009      	b.n	8001ac4 <Deg2Ste+0x4c>
		}
		else{//read
			osMutexRelease(DegmsgHandle);
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <Deg2Ste+0x54>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f008 fade 	bl	800a076 <osMutexRelease>
			return SteDeg;
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <Deg2Ste+0x58>)
 8001abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac0:	e000      	b.n	8001ac4 <Deg2Ste+0x4c>
		}
	}
	else{
//		printf("%d:mutex in \n", osKernelGetTickCount());
		return 0;
 8001ac2:	2300      	movs	r3, #0
	}
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000c2c 	.word	0x20000c2c
 8001ad0:	20000bc2 	.word	0x20000bc2
 8001ad4:	00000000 	.word	0x00000000

08001ad8 <rad2deg>:

int16_t rad2deg(double radian)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	ed87 0b00 	vstr	d0, [r7]
    return (int16_t)(radian*180/MATH_PI);
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <rad2deg+0x50>)
 8001ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aec:	f7fe fd84 	bl	80005f8 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	a309      	add	r3, pc, #36	; (adr r3, 8001b20 <rad2deg+0x48>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe fea5 	bl	800084c <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7ff f825 	bl	8000b58 <__aeabi_d2iz>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b21b      	sxth	r3, r3
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	f3af 8000 	nop.w
 8001b20:	54442d18 	.word	0x54442d18
 8001b24:	400921fb 	.word	0x400921fb
 8001b28:	40668000 	.word	0x40668000

08001b2c <HAL_GPIO_EXTI_Callback>:
	//ModeD//for stop
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]


    if(GPIO_Pin == PS_SIG1_Pin) {
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	2b10      	cmp	r3, #16
 8001b3a:	d109      	bne.n	8001b50 <HAL_GPIO_EXTI_Callback+0x24>
    	PS_SIGx_Pin |= 0b00000001;
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001b48:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG1_Pin.\n");
 8001b4a:	4818      	ldr	r0, [pc, #96]	; (8001bac <HAL_GPIO_EXTI_Callback+0x80>)
 8001b4c:	f00c fdc4 	bl	800e6d8 <puts>
	}

    if(GPIO_Pin == PS_SIG2_Pin) {
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	2b20      	cmp	r3, #32
 8001b54:	d109      	bne.n	8001b6a <HAL_GPIO_EXTI_Callback+0x3e>
    	PS_SIGx_Pin |= 0b00000010;
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	f043 0302 	orr.w	r3, r3, #2
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001b62:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG2_Pin.\n");
 8001b64:	4812      	ldr	r0, [pc, #72]	; (8001bb0 <HAL_GPIO_EXTI_Callback+0x84>)
 8001b66:	f00c fdb7 	bl	800e6d8 <puts>
    }

    if(GPIO_Pin == PS_SIG3_Pin) {
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	2b40      	cmp	r3, #64	; 0x40
 8001b6e:	d109      	bne.n	8001b84 <HAL_GPIO_EXTI_Callback+0x58>
    	PS_SIGx_Pin |= 0b00000100;
 8001b70:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001b7c:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG3_Pin.\n");
 8001b7e:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001b80:	f00c fdaa 	bl	800e6d8 <puts>
    }

    if(GPIO_Pin == PS_SIG4_Pin) {
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	2b80      	cmp	r3, #128	; 0x80
 8001b88:	d109      	bne.n	8001b9e <HAL_GPIO_EXTI_Callback+0x72>
    	PS_SIGx_Pin |= 0b00001000;
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001b96:	701a      	strb	r2, [r3, #0]
    	printf("GPIO_EXTI_Callback PS_SIG4_Pin.\n");
 8001b98:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001b9a:	f00c fd9d 	bl	800e6d8 <puts>
    }
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000bc0 	.word	0x20000bc0
 8001bac:	08011d0c 	.word	0x08011d0c
 8001bb0:	08011d2c 	.word	0x08011d2c
 8001bb4:	08011d4c 	.word	0x08011d4c
 8001bb8:	08011d6c 	.word	0x08011d6c

08001bbc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of canmsg */
  canmsgHandle = osMutexNew(&canmsg_attributes);
 8001bc0:	4839      	ldr	r0, [pc, #228]	; (8001ca8 <MX_FREERTOS_Init+0xec>)
 8001bc2:	f008 f987 	bl	8009ed4 <osMutexNew>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4a38      	ldr	r2, [pc, #224]	; (8001cac <MX_FREERTOS_Init+0xf0>)
 8001bca:	6013      	str	r3, [r2, #0]

  /* creation of Degmsg */
  DegmsgHandle = osMutexNew(&Degmsg_attributes);
 8001bcc:	4838      	ldr	r0, [pc, #224]	; (8001cb0 <MX_FREERTOS_Init+0xf4>)
 8001bce:	f008 f981 	bl	8009ed4 <osMutexNew>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a37      	ldr	r2, [pc, #220]	; (8001cb4 <MX_FREERTOS_Init+0xf8>)
 8001bd6:	6013      	str	r3, [r2, #0]

  /* creation of Stop_flag */
  Stop_flagHandle = osMutexNew(&Stop_flag_attributes);
 8001bd8:	4837      	ldr	r0, [pc, #220]	; (8001cb8 <MX_FREERTOS_Init+0xfc>)
 8001bda:	f008 f97b 	bl	8009ed4 <osMutexNew>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4a36      	ldr	r2, [pc, #216]	; (8001cbc <MX_FREERTOS_Init+0x100>)
 8001be2:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PSx_SIG_BinSem */
  PSx_SIG_BinSemHandle = osSemaphoreNew(1, 1, &PSx_SIG_BinSem_attributes);
 8001be4:	4a36      	ldr	r2, [pc, #216]	; (8001cc0 <MX_FREERTOS_Init+0x104>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	2001      	movs	r0, #1
 8001bea:	f008 fa81 	bl	800a0f0 <osSemaphoreNew>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4a34      	ldr	r2, [pc, #208]	; (8001cc4 <MX_FREERTOS_Init+0x108>)
 8001bf2:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of VelStopTimer */
  VelStopTimerHandle = osTimerNew(VelStopTimerCallback, osTimerPeriodic, NULL, &VelStopTimer_attributes);
 8001bf4:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <MX_FREERTOS_Init+0x10c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4834      	ldr	r0, [pc, #208]	; (8001ccc <MX_FREERTOS_Init+0x110>)
 8001bfc:	f008 f8c0 	bl	8009d80 <osTimerNew>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4a33      	ldr	r2, [pc, #204]	; (8001cd0 <MX_FREERTOS_Init+0x114>)
 8001c04:	6013      	str	r3, [r2, #0]

  /* creation of EndModeDTimer */
  EndModeDTimerHandle = osTimerNew(EndModeDTimerCallback, osTimerOnce, NULL, &EndModeDTimer_attributes);
 8001c06:	4b33      	ldr	r3, [pc, #204]	; (8001cd4 <MX_FREERTOS_Init+0x118>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4832      	ldr	r0, [pc, #200]	; (8001cd8 <MX_FREERTOS_Init+0x11c>)
 8001c0e:	f008 f8b7 	bl	8009d80 <osTimerNew>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4a31      	ldr	r2, [pc, #196]	; (8001cdc <MX_FREERTOS_Init+0x120>)
 8001c16:	6013      	str	r3, [r2, #0]

  /* creation of SendCanTimer */
  SendCanTimerHandle = osTimerNew(SendCanTimerCallback, osTimerPeriodic, NULL, &SendCanTimer_attributes);
 8001c18:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <MX_FREERTOS_Init+0x124>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	4831      	ldr	r0, [pc, #196]	; (8001ce4 <MX_FREERTOS_Init+0x128>)
 8001c20:	f008 f8ae 	bl	8009d80 <osTimerNew>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4a30      	ldr	r2, [pc, #192]	; (8001ce8 <MX_FREERTOS_Init+0x12c>)
 8001c28:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(VelStopTimerHandle, 1000);
 8001c2a:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <MX_FREERTOS_Init+0x114>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c32:	4618      	mov	r0, r3
 8001c34:	f008 f920 	bl	8009e78 <osTimerStart>
  osTimerStart(SendCanTimerHandle, 100);
 8001c38:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <MX_FREERTOS_Init+0x12c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2164      	movs	r1, #100	; 0x64
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f008 f91a 	bl	8009e78 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c44:	4a29      	ldr	r2, [pc, #164]	; (8001cec <MX_FREERTOS_Init+0x130>)
 8001c46:	2100      	movs	r1, #0
 8001c48:	4829      	ldr	r0, [pc, #164]	; (8001cf0 <MX_FREERTOS_Init+0x134>)
 8001c4a:	f007 feb8 	bl	80099be <osThreadNew>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4a28      	ldr	r2, [pc, #160]	; (8001cf4 <MX_FREERTOS_Init+0x138>)
 8001c52:	6013      	str	r3, [r2, #0]

  /* creation of canTask */
  canTaskHandle = osThreadNew(StartTask02, NULL, &canTask_attributes);
 8001c54:	4a28      	ldr	r2, [pc, #160]	; (8001cf8 <MX_FREERTOS_Init+0x13c>)
 8001c56:	2100      	movs	r1, #0
 8001c58:	4828      	ldr	r0, [pc, #160]	; (8001cfc <MX_FREERTOS_Init+0x140>)
 8001c5a:	f007 feb0 	bl	80099be <osThreadNew>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4a27      	ldr	r2, [pc, #156]	; (8001d00 <MX_FREERTOS_Init+0x144>)
 8001c62:	6013      	str	r3, [r2, #0]

  /* creation of UartComm */
  UartCommHandle = osThreadNew(StartTask03, NULL, &UartComm_attributes);
 8001c64:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <MX_FREERTOS_Init+0x148>)
 8001c66:	2100      	movs	r1, #0
 8001c68:	4827      	ldr	r0, [pc, #156]	; (8001d08 <MX_FREERTOS_Init+0x14c>)
 8001c6a:	f007 fea8 	bl	80099be <osThreadNew>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4a26      	ldr	r2, [pc, #152]	; (8001d0c <MX_FREERTOS_Init+0x150>)
 8001c72:	6013      	str	r3, [r2, #0]

  /* creation of NP_LED */
  NP_LEDHandle = osThreadNew(StartTask04, NULL, &NP_LED_attributes);
 8001c74:	4a26      	ldr	r2, [pc, #152]	; (8001d10 <MX_FREERTOS_Init+0x154>)
 8001c76:	2100      	movs	r1, #0
 8001c78:	4826      	ldr	r0, [pc, #152]	; (8001d14 <MX_FREERTOS_Init+0x158>)
 8001c7a:	f007 fea0 	bl	80099be <osThreadNew>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4a25      	ldr	r2, [pc, #148]	; (8001d18 <MX_FREERTOS_Init+0x15c>)
 8001c82:	6013      	str	r3, [r2, #0]

  /* creation of fancntl */
  fancntlHandle = osThreadNew(StartTask05, NULL, &fancntl_attributes);
 8001c84:	4a25      	ldr	r2, [pc, #148]	; (8001d1c <MX_FREERTOS_Init+0x160>)
 8001c86:	2100      	movs	r1, #0
 8001c88:	4825      	ldr	r0, [pc, #148]	; (8001d20 <MX_FREERTOS_Init+0x164>)
 8001c8a:	f007 fe98 	bl	80099be <osThreadNew>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a24      	ldr	r2, [pc, #144]	; (8001d24 <MX_FREERTOS_Init+0x168>)
 8001c92:	6013      	str	r3, [r2, #0]

  /* creation of IRQ_PSx */
  IRQ_PSxHandle = osThreadNew(StartTask06, NULL, &IRQ_PSx_attributes);
 8001c94:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <MX_FREERTOS_Init+0x16c>)
 8001c96:	2100      	movs	r1, #0
 8001c98:	4824      	ldr	r0, [pc, #144]	; (8001d2c <MX_FREERTOS_Init+0x170>)
 8001c9a:	f007 fe90 	bl	80099be <osThreadNew>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <MX_FREERTOS_Init+0x174>)
 8001ca2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	08012158 	.word	0x08012158
 8001cac:	20000c28 	.word	0x20000c28
 8001cb0:	08012168 	.word	0x08012168
 8001cb4:	20000c2c 	.word	0x20000c2c
 8001cb8:	08012178 	.word	0x08012178
 8001cbc:	20000c30 	.word	0x20000c30
 8001cc0:	08012188 	.word	0x08012188
 8001cc4:	20000c34 	.word	0x20000c34
 8001cc8:	08012128 	.word	0x08012128
 8001ccc:	08002f99 	.word	0x08002f99
 8001cd0:	20000c1c 	.word	0x20000c1c
 8001cd4:	08012138 	.word	0x08012138
 8001cd8:	08003001 	.word	0x08003001
 8001cdc:	20000c20 	.word	0x20000c20
 8001ce0:	08012148 	.word	0x08012148
 8001ce4:	08003029 	.word	0x08003029
 8001ce8:	20000c24 	.word	0x20000c24
 8001cec:	08012050 	.word	0x08012050
 8001cf0:	08001d35 	.word	0x08001d35
 8001cf4:	20000c04 	.word	0x20000c04
 8001cf8:	08012074 	.word	0x08012074
 8001cfc:	08001d61 	.word	0x08001d61
 8001d00:	20000c08 	.word	0x20000c08
 8001d04:	08012098 	.word	0x08012098
 8001d08:	080025d9 	.word	0x080025d9
 8001d0c:	20000c0c 	.word	0x20000c0c
 8001d10:	080120bc 	.word	0x080120bc
 8001d14:	08002d7d 	.word	0x08002d7d
 8001d18:	20000c10 	.word	0x20000c10
 8001d1c:	080120e0 	.word	0x080120e0
 8001d20:	08002dd5 	.word	0x08002dd5
 8001d24:	20000c14 	.word	0x20000c14
 8001d28:	08012104 	.word	0x08012104
 8001d2c:	08002dfd 	.word	0x08002dfd
 8001d30:	20000c18 	.word	0x20000c18

08001d34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	//StartTask01 is related gpio toggle for state check //
	uint32_t lastTime = osKernelGetTickCount();
 8001d3c:	f007 fe2a 	bl	8009994 <osKernelGetTickCount>
 8001d40:	60f8      	str	r0, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STATUS_LED;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d48:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f007 ffd5 	bl	8009cfa <osDelayUntil>


	//printf("uxHighWaterMark: %d\n", uxTaskGetStackHighWaterMark( NULL ));

	HAL_GPIO_TogglePin(testled_GPIO_Port, testled_Pin);
 8001d50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d54:	4801      	ldr	r0, [pc, #4]	; (8001d5c <StartDefaultTask+0x28>)
 8001d56:	f004 f9de 	bl	8006116 <HAL_GPIO_TogglePin>
	lastTime += PERIOD_STATUS_LED;
 8001d5a:	e7f2      	b.n	8001d42 <StartDefaultTask+0xe>
 8001d5c:	40020800 	.word	0x40020800

08001d60 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d64:	ed2d 8b02 	vpush	{d8}
 8001d68:	b08d      	sub	sp, #52	; 0x34
 8001d6a:	af04      	add	r7, sp, #16
 8001d6c:	6078      	str	r0, [r7, #4]
//	int16_t Tar_cmd_v_y = 0;
//	int16_t Tar_cmd_w = 0;



	uint8_t torqueSW = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	73fb      	strb	r3, [r7, #15]
	uint8_t Oncetimer = 1;
 8001d72:	2301      	movs	r3, #1
 8001d74:	73bb      	strb	r3, [r7, #14]
	uint8_t tempflag = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	737b      	strb	r3, [r7, #13]
	//////////////////////////////
	uint32_t lastTime;



	osDelay(3000);//must delay for nmt from motor driver
 8001d7a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001d7e:	f007 ffa1 	bl	8009cc4 <osDelay>
	while(!(STinitdone)){osDelay(100);;}
 8001d82:	e002      	b.n	8001d8a <StartTask02+0x2a>
 8001d84:	2064      	movs	r0, #100	; 0x64
 8001d86:	f007 ff9d 	bl	8009cc4 <osDelay>
 8001d8a:	4ba0      	ldr	r3, [pc, #640]	; (800200c <StartTask02+0x2ac>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f8      	beq.n	8001d84 <StartTask02+0x24>

	CanInit(FILTERID,MASKID,STDID);//must be to use it
 8001d92:	2200      	movs	r2, #0
 8001d94:	f640 4194 	movw	r1, #3220	; 0xc94
 8001d98:	2080      	movs	r0, #128	; 0x80
 8001d9a:	f7ff f991 	bl	80010c0 <CanInit>
	CAN_enableirq();
 8001d9e:	f7ff f987 	bl	80010b0 <CAN_enableirq>


	PDOMapping(1, RxPDO0, vel_RxPDO0, 1);
 8001da2:	4b9b      	ldr	r3, [pc, #620]	; (8002010 <StartTask02+0x2b0>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	9203      	str	r2, [sp, #12]
 8001da8:	466e      	mov	r6, sp
 8001daa:	f103 0208 	add.w	r2, r3, #8
 8001dae:	ca07      	ldmia	r2, {r0, r1, r2}
 8001db0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8001db4:	cb0c      	ldmia	r3, {r2, r3}
 8001db6:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f7ff fa6e 	bl	800129c <PDOMapping>
	PDOMapping(2, RxPDO0, vel_RxPDO0, 1);
 8001dc0:	4b93      	ldr	r3, [pc, #588]	; (8002010 <StartTask02+0x2b0>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	9203      	str	r2, [sp, #12]
 8001dc6:	466e      	mov	r6, sp
 8001dc8:	f103 0208 	add.w	r2, r3, #8
 8001dcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dce:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8001dd2:	cb0c      	ldmia	r3, {r2, r3}
 8001dd4:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8001dd8:	2002      	movs	r0, #2
 8001dda:	f7ff fa5f 	bl	800129c <PDOMapping>

	PDOMapping(1, TxPDO0, vel_TxPDO0, 1);//event time mode 100ms
 8001dde:	4b8d      	ldr	r3, [pc, #564]	; (8002014 <StartTask02+0x2b4>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	9203      	str	r2, [sp, #12]
 8001de4:	466e      	mov	r6, sp
 8001de6:	f103 0208 	add.w	r2, r3, #8
 8001dea:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dec:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8001df0:	cb0c      	ldmia	r3, {r2, r3}
 8001df2:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8001df6:	2001      	movs	r0, #1
 8001df8:	f7ff fa50 	bl	800129c <PDOMapping>
	PDOMapping(2, TxPDO0, vel_TxPDO0, 1);//event time mode
 8001dfc:	4b85      	ldr	r3, [pc, #532]	; (8002014 <StartTask02+0x2b4>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	9203      	str	r2, [sp, #12]
 8001e02:	466e      	mov	r6, sp
 8001e04:	f103 0208 	add.w	r2, r3, #8
 8001e08:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e0a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8001e0e:	cb0c      	ldmia	r3, {r2, r3}
 8001e10:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8001e14:	2002      	movs	r0, #2
 8001e16:	f7ff fa41 	bl	800129c <PDOMapping>
	PDOMapping(1, TxPDO1, vel_TxPDO1, 1);//inhibit mode 100ms
 8001e1a:	4b7f      	ldr	r3, [pc, #508]	; (8002018 <StartTask02+0x2b8>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	9203      	str	r2, [sp, #12]
 8001e20:	466e      	mov	r6, sp
 8001e22:	f103 0208 	add.w	r2, r3, #8
 8001e26:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e28:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8001e2c:	cb0c      	ldmia	r3, {r2, r3}
 8001e2e:	f641 2101 	movw	r1, #6657	; 0x1a01
 8001e32:	2001      	movs	r0, #1
 8001e34:	f7ff fa32 	bl	800129c <PDOMapping>
	PDOMapping(2, TxPDO1, vel_TxPDO1, 1);//inhibit mode
 8001e38:	4b77      	ldr	r3, [pc, #476]	; (8002018 <StartTask02+0x2b8>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	9203      	str	r2, [sp, #12]
 8001e3e:	466e      	mov	r6, sp
 8001e40:	f103 0208 	add.w	r2, r3, #8
 8001e44:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e46:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8001e4a:	cb0c      	ldmia	r3, {r2, r3}
 8001e4c:	f641 2101 	movw	r1, #6657	; 0x1a01
 8001e50:	2002      	movs	r0, #2
 8001e52:	f7ff fa23 	bl	800129c <PDOMapping>

	for(int i=0;i<2;i++){
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	e029      	b.n	8001eb0 <StartTask02+0x150>
		SDOMsg(i+1,0x2010, 0x0, 0x01, 1);//Node_id, index,  subindex,  msg,  len//save eeprom
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	b2d8      	uxtb	r0, r3
 8001e64:	2301      	movs	r3, #1
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2301      	movs	r3, #1
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f242 0110 	movw	r1, #8208	; 0x2010
 8001e70:	f7ff f9aa 	bl	80011c8 <SDOMsg>
		SDOMsg(i+1,0x6060, 0x0, 0x03, 1);//Node_id, index,  subindex,  msg,  len//3: Profile velocity mode;
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b2d8      	uxtb	r0, r3
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2303      	movs	r3, #3
 8001e82:	2200      	movs	r2, #0
 8001e84:	f246 0160 	movw	r1, #24672	; 0x6060
 8001e88:	f7ff f99e 	bl	80011c8 <SDOMsg>
		Tor_OnOff(TORQUEON);
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f7ff fb17 	bl	80014c0 <Tor_OnOff>
		SDOMsg(i+1,0x200f, 0x0, 0x01, 2);//Node_id, index,  subindex,  msg,  len//1e: Synchronization control
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	b2d8      	uxtb	r0, r3
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f242 010f 	movw	r1, #8207	; 0x200f
 8001ea6:	f7ff f98f 	bl	80011c8 <SDOMsg>
	for(int i=0;i<2;i++){
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	3301      	adds	r3, #1
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	ddd2      	ble.n	8001e5c <StartTask02+0xfc>
	}

  /* Infinite loop */
	//printf("%d: format\n", osKernelGetTickCount());
	lastTime = osKernelGetTickCount ();
 8001eb6:	f007 fd6d 	bl	8009994 <osKernelGetTickCount>
 8001eba:	61f8      	str	r0, [r7, #28]
  for(;;)
  {

	lastTime += PERIOD_CANCOMM;;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	330a      	adds	r3, #10
 8001ec0:	61fb      	str	r3, [r7, #28]
	osDelayUntil(lastTime);
 8001ec2:	69f8      	ldr	r0, [r7, #28]
 8001ec4:	f007 ff19 	bl	8009cfa <osDelayUntil>
	//osDelay(10);
	//printf("%d: t02\n", osKernelGetTickCount());

	if(FLAG_RxCplt>0)	//real time, check stdid, extid
 8001ec8:	4b54      	ldr	r3, [pc, #336]	; (800201c <StartTask02+0x2bc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 811f 	beq.w	8002110 <StartTask02+0x3b0>
	{
		while(FLAG_RxCplt>0){
 8001ed2:	e118      	b.n	8002106 <StartTask02+0x3a6>
			FLAG_RxCplt--;
 8001ed4:	4b51      	ldr	r3, [pc, #324]	; (800201c <StartTask02+0x2bc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	4a50      	ldr	r2, [pc, #320]	; (800201c <StartTask02+0x2bc>)
 8001edc:	6013      	str	r3, [r2, #0]
			for(int i=0;i<8;i++){canbuf[i] = g_uCAN_Rx_Data[FLAG_RxCplt][i];}
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	e010      	b.n	8001f06 <StartTask02+0x1a6>
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	; (800201c <StartTask02+0x2bc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a4d      	ldr	r2, [pc, #308]	; (8002020 <StartTask02+0x2c0>)
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	441a      	add	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f993 1000 	ldrsb.w	r1, [r3]
 8001ef6:	4a4b      	ldr	r2, [pc, #300]	; (8002024 <StartTask02+0x2c4>)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	4413      	add	r3, r2
 8001efc:	460a      	mov	r2, r1
 8001efe:	701a      	strb	r2, [r3, #0]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	3301      	adds	r3, #1
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b07      	cmp	r3, #7
 8001f0a:	ddeb      	ble.n	8001ee4 <StartTask02+0x184>
		//	printf("canbuf: %d %d %d %d %d %d %d %d\n", canbuf[0], canbuf[1], canbuf[2], canbuf[3], canbuf[4], canbuf[5], canbuf[6], canbuf[7]);
			//printf("%dcanid: %d %d %d\n", osKernelGetTickCount(), g_tCan_Rx_Header[FLAG_RxCplt].StdId, g_tCan_Rx_Header[FLAG_RxCplt].ExtId, g_tCan_Rx_Header[FLAG_RxCplt].Timestamp);
			if(g_tCan_Rx_Header[FLAG_RxCplt].StdId>g_tCan_Rx_Header[FLAG_RxCplt].ExtId){CanId = g_tCan_Rx_Header[FLAG_RxCplt].StdId;}//�?????????????체크
 8001f0c:	4b43      	ldr	r3, [pc, #268]	; (800201c <StartTask02+0x2bc>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4945      	ldr	r1, [pc, #276]	; (8002028 <StartTask02+0x2c8>)
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	6819      	ldr	r1, [r3, #0]
 8001f1e:	4b3f      	ldr	r3, [pc, #252]	; (800201c <StartTask02+0x2bc>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4841      	ldr	r0, [pc, #260]	; (8002028 <StartTask02+0x2c8>)
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	1a9b      	subs	r3, r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4403      	add	r3, r0
 8001f2e:	3304      	adds	r3, #4
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4299      	cmp	r1, r3
 8001f34:	d90b      	bls.n	8001f4e <StartTask02+0x1ee>
 8001f36:	4b39      	ldr	r3, [pc, #228]	; (800201c <StartTask02+0x2bc>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	493b      	ldr	r1, [pc, #236]	; (8002028 <StartTask02+0x2c8>)
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	1a9b      	subs	r3, r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a38      	ldr	r2, [pc, #224]	; (800202c <StartTask02+0x2cc>)
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	e00b      	b.n	8001f66 <StartTask02+0x206>
			else {CanId = g_tCan_Rx_Header[FLAG_RxCplt].ExtId;}
 8001f4e:	4b33      	ldr	r3, [pc, #204]	; (800201c <StartTask02+0x2bc>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4935      	ldr	r1, [pc, #212]	; (8002028 <StartTask02+0x2c8>)
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3304      	adds	r3, #4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a32      	ldr	r2, [pc, #200]	; (800202c <StartTask02+0x2cc>)
 8001f64:	6013      	str	r3, [r2, #0]

			switch(CanId)//parse
 8001f66:	4b31      	ldr	r3, [pc, #196]	; (800202c <StartTask02+0x2cc>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f240 72d2 	movw	r2, #2002	; 0x7d2
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	f000 80a2 	beq.w	80020b8 <StartTask02+0x358>
 8001f74:	f240 72d2 	movw	r2, #2002	; 0x7d2
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	f200 809e 	bhi.w	80020ba <StartTask02+0x35a>
 8001f7e:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00c      	beq.n	8001fa0 <StartTask02+0x240>
 8001f86:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	f200 8095 	bhi.w	80020ba <StartTask02+0x35a>
 8001f90:	f240 1281 	movw	r2, #385	; 0x181
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d051      	beq.n	800203c <StartTask02+0x2dc>
 8001f98:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8001f9c:	d06d      	beq.n	800207a <StartTask02+0x31a>
 8001f9e:	e08c      	b.n	80020ba <StartTask02+0x35a>
			{
				case 0x3E9:
					Tar_cmd_v_x = (((int16_t)canbuf[1])<<8) | ((int16_t)canbuf[0])&0xff;
 8001fa0:	4b20      	ldr	r3, [pc, #128]	; (8002024 <StartTask02+0x2c4>)
 8001fa2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	b21a      	sxth	r2, r3
 8001faa:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <StartTask02+0x2c4>)
 8001fac:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	b21b      	sxth	r3, r3
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	b21a      	sxth	r2, r3
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <StartTask02+0x2d0>)
 8001fbc:	801a      	strh	r2, [r3, #0]
					Tar_cmd_v_y = (((int16_t)canbuf[3])<<8) | ((int16_t)canbuf[2])&0xff;
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <StartTask02+0x2c4>)
 8001fc0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	4b16      	ldr	r3, [pc, #88]	; (8002024 <StartTask02+0x2c4>)
 8001fca:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	b21a      	sxth	r2, r3
 8001fd8:	4b16      	ldr	r3, [pc, #88]	; (8002034 <StartTask02+0x2d4>)
 8001fda:	801a      	strh	r2, [r3, #0]
					Tar_cmd_w = (((int16_t)canbuf[5])<<8) | ((int16_t)canbuf[4])&0xff;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <StartTask02+0x2c4>)
 8001fde:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	b21a      	sxth	r2, r3
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <StartTask02+0x2c4>)
 8001fe8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	b21a      	sxth	r2, r3
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <StartTask02+0x2d8>)
 8001ff8:	801a      	strh	r2, [r3, #0]
					torqueSW = canbuf[6];
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <StartTask02+0x2c4>)
 8001ffc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002000:	73fb      	strb	r3, [r7, #15]
					//if(Stop_flag++>255){Stop_flag = 1;}
					Stopflagcheck(Xbot_W, 1);
 8002002:	2101      	movs	r1, #1
 8002004:	2001      	movs	r0, #1
 8002006:	f7ff fcf7 	bl	80019f8 <Stopflagcheck>
					//printf("%d: 0x3E9:%d %d\n", osKernelGetTickCount(),Stop_flag,Pre_Stop_flag);
					//printf("%d: Stop_flag: %d\n", osKernelGetTickCount(), Stop_flag);
					break;
 800200a:	e056      	b.n	80020ba <StartTask02+0x35a>
 800200c:	20000bc5 	.word	0x20000bc5
 8002010:	20000000 	.word	0x20000000
 8002014:	20000014 	.word	0x20000014
 8002018:	20000028 	.word	0x20000028
 800201c:	20000a94 	.word	0x20000a94
 8002020:	20000a98 	.word	0x20000a98
 8002024:	20000bec 	.word	0x20000bec
 8002028:	20000ac8 	.word	0x20000ac8
 800202c:	20000bfc 	.word	0x20000bfc
 8002030:	20000bd0 	.word	0x20000bd0
 8002034:	20000bd2 	.word	0x20000bd2
 8002038:	20000bd4 	.word	0x20000bd4

				case 0x181:
					Tmp_cmd_FL = (((int16_t)canbuf[1])<<8) | ((int16_t)canbuf[0])&0xff;
 800203c:	4b96      	ldr	r3, [pc, #600]	; (8002298 <StartTask02+0x538>)
 800203e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b21a      	sxth	r2, r3
 8002046:	4b94      	ldr	r3, [pc, #592]	; (8002298 <StartTask02+0x538>)
 8002048:	f993 3000 	ldrsb.w	r3, [r3]
 800204c:	b21b      	sxth	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	b21b      	sxth	r3, r3
 8002052:	4313      	orrs	r3, r2
 8002054:	b21a      	sxth	r2, r3
 8002056:	4b91      	ldr	r3, [pc, #580]	; (800229c <StartTask02+0x53c>)
 8002058:	801a      	strh	r2, [r3, #0]
					Tmp_cmd_FR = (((int16_t)canbuf[3])<<8) | ((int16_t)canbuf[2])&0xff;
 800205a:	4b8f      	ldr	r3, [pc, #572]	; (8002298 <StartTask02+0x538>)
 800205c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	b21a      	sxth	r2, r3
 8002064:	4b8c      	ldr	r3, [pc, #560]	; (8002298 <StartTask02+0x538>)
 8002066:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800206a:	b21b      	sxth	r3, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21a      	sxth	r2, r3
 8002074:	4b8a      	ldr	r3, [pc, #552]	; (80022a0 <StartTask02+0x540>)
 8002076:	801a      	strh	r2, [r3, #0]
					//printf("0x181 %d\n", Tmp_cmd_FL);
					break;
 8002078:	e01f      	b.n	80020ba <StartTask02+0x35a>

				case 0x182:
					Tmp_cmd_RL = (((int16_t)canbuf[1])<<8) | ((int16_t)canbuf[0])&0xff;
 800207a:	4b87      	ldr	r3, [pc, #540]	; (8002298 <StartTask02+0x538>)
 800207c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	b21a      	sxth	r2, r3
 8002084:	4b84      	ldr	r3, [pc, #528]	; (8002298 <StartTask02+0x538>)
 8002086:	f993 3000 	ldrsb.w	r3, [r3]
 800208a:	b21b      	sxth	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	b21b      	sxth	r3, r3
 8002090:	4313      	orrs	r3, r2
 8002092:	b21a      	sxth	r2, r3
 8002094:	4b83      	ldr	r3, [pc, #524]	; (80022a4 <StartTask02+0x544>)
 8002096:	801a      	strh	r2, [r3, #0]
					Tmp_cmd_RR = (((int16_t)canbuf[3])<<8) | ((int16_t)canbuf[2])&0xff;
 8002098:	4b7f      	ldr	r3, [pc, #508]	; (8002298 <StartTask02+0x538>)
 800209a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	b21a      	sxth	r2, r3
 80020a2:	4b7d      	ldr	r3, [pc, #500]	; (8002298 <StartTask02+0x538>)
 80020a4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	4313      	orrs	r3, r2
 80020b0:	b21a      	sxth	r2, r3
 80020b2:	4b7d      	ldr	r3, [pc, #500]	; (80022a8 <StartTask02+0x548>)
 80020b4:	801a      	strh	r2, [r3, #0]
					break;
 80020b6:	e000      	b.n	80020ba <StartTask02+0x35a>

				case 2002:

					break;
 80020b8:	bf00      	nop
			}

			g_tCan_Rx_Header[FLAG_RxCplt].StdId=0;
 80020ba:	4b7c      	ldr	r3, [pc, #496]	; (80022ac <StartTask02+0x54c>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	497c      	ldr	r1, [pc, #496]	; (80022b0 <StartTask02+0x550>)
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
			g_tCan_Rx_Header[FLAG_RxCplt].ExtId=0;
 80020ce:	4b77      	ldr	r3, [pc, #476]	; (80022ac <StartTask02+0x54c>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4977      	ldr	r1, [pc, #476]	; (80022b0 <StartTask02+0x550>)
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	3304      	adds	r3, #4
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
			CanId = 0;
 80020e4:	4b73      	ldr	r3, [pc, #460]	; (80022b4 <StartTask02+0x554>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]

			for(int i=0;i<8;i++){canbuf[i]=0;}
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	e007      	b.n	8002100 <StartTask02+0x3a0>
 80020f0:	4a69      	ldr	r2, [pc, #420]	; (8002298 <StartTask02+0x538>)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4413      	add	r3, r2
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	3301      	adds	r3, #1
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b07      	cmp	r3, #7
 8002104:	ddf4      	ble.n	80020f0 <StartTask02+0x390>
		while(FLAG_RxCplt>0){
 8002106:	4b69      	ldr	r3, [pc, #420]	; (80022ac <StartTask02+0x54c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f47f aee2 	bne.w	8001ed4 <StartTask02+0x174>
		}

	}

	if(Tar_cmd_w){
 8002110:	4b69      	ldr	r3, [pc, #420]	; (80022b8 <StartTask02+0x558>)
 8002112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d077      	beq.n	800220a <StartTask02+0x4aa>

		ModeABCD = 3;
 800211a:	4b68      	ldr	r3, [pc, #416]	; (80022bc <StartTask02+0x55c>)
 800211c:	2203      	movs	r2, #3
 800211e:	701a      	strb	r2, [r3, #0]

		if((Pre_ModeABCD!=ModeABCD) || (EndMode==0)){
 8002120:	4b67      	ldr	r3, [pc, #412]	; (80022c0 <StartTask02+0x560>)
 8002122:	781a      	ldrb	r2, [r3, #0]
 8002124:	4b65      	ldr	r3, [pc, #404]	; (80022bc <StartTask02+0x55c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d103      	bne.n	8002134 <StartTask02+0x3d4>
 800212c:	4b65      	ldr	r3, [pc, #404]	; (80022c4 <StartTask02+0x564>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d128      	bne.n	8002186 <StartTask02+0x426>
			//printf("111osTimerStart: %d, %d\n", ModeABCD, Pre_ModeABCD);
			Pre_ModeABCD = ModeABCD;
 8002134:	4b61      	ldr	r3, [pc, #388]	; (80022bc <StartTask02+0x55c>)
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	4b61      	ldr	r3, [pc, #388]	; (80022c0 <StartTask02+0x560>)
 800213a:	701a      	strb	r2, [r3, #0]
			Tar_cmd_RR = Tar_cmd_RL = Tar_cmd_FR = Tar_cmd_FL=0;
 800213c:	4b62      	ldr	r3, [pc, #392]	; (80022c8 <StartTask02+0x568>)
 800213e:	2200      	movs	r2, #0
 8002140:	801a      	strh	r2, [r3, #0]
 8002142:	4b61      	ldr	r3, [pc, #388]	; (80022c8 <StartTask02+0x568>)
 8002144:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002148:	4b60      	ldr	r3, [pc, #384]	; (80022cc <StartTask02+0x56c>)
 800214a:	801a      	strh	r2, [r3, #0]
 800214c:	4b5f      	ldr	r3, [pc, #380]	; (80022cc <StartTask02+0x56c>)
 800214e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002152:	4b5f      	ldr	r3, [pc, #380]	; (80022d0 <StartTask02+0x570>)
 8002154:	801a      	strh	r2, [r3, #0]
 8002156:	4b5e      	ldr	r3, [pc, #376]	; (80022d0 <StartTask02+0x570>)
 8002158:	f9b3 2000 	ldrsh.w	r2, [r3]
 800215c:	4b5d      	ldr	r3, [pc, #372]	; (80022d4 <StartTask02+0x574>)
 800215e:	801a      	strh	r2, [r3, #0]
			if(timerflag){
 8002160:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <StartTask02+0x578>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 81b3 	beq.w	80024d0 <StartTask02+0x770>
				//printf("timerflag: %d\n", timerflag);
				osTimerStart(EndModeDTimerHandle, ENDMODETIME);
 800216a:	4b5c      	ldr	r3, [pc, #368]	; (80022dc <StartTask02+0x57c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002172:	4618      	mov	r0, r3
 8002174:	f007 fe80 	bl	8009e78 <osTimerStart>
				timerflag = 0;
 8002178:	4b57      	ldr	r3, [pc, #348]	; (80022d8 <StartTask02+0x578>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
				EndMode = 0;
 800217e:	4b51      	ldr	r3, [pc, #324]	; (80022c4 <StartTask02+0x564>)
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
			if(timerflag){
 8002184:	e1a4      	b.n	80024d0 <StartTask02+0x770>
			}
		}
		else {
			Tar_cmd_v_x=0;
 8002186:	4b56      	ldr	r3, [pc, #344]	; (80022e0 <StartTask02+0x580>)
 8002188:	2200      	movs	r2, #0
 800218a:	801a      	strh	r2, [r3, #0]
			Tar_cmd_v_y=0;
 800218c:	4b55      	ldr	r3, [pc, #340]	; (80022e4 <StartTask02+0x584>)
 800218e:	2200      	movs	r2, #0
 8002190:	801a      	strh	r2, [r3, #0]

			Tar_cmd_FL = -1*(Tar_cmd_w/CONSTANT_C_AxC_V);
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <StartTask02+0x558>)
 8002194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f9c3 	bl	8000524 <__aeabi_i2d>
 800219e:	a33c      	add	r3, pc, #240	; (adr r3, 8002290 <StartTask02+0x530>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	f7fe fb52 	bl	800084c <__aeabi_ddiv>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4614      	mov	r4, r2
 80021ae:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80021b2:	4620      	mov	r0, r4
 80021b4:	4629      	mov	r1, r5
 80021b6:	f7fe fccf 	bl	8000b58 <__aeabi_d2iz>
 80021ba:	4603      	mov	r3, r0
 80021bc:	b21a      	sxth	r2, r3
 80021be:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <StartTask02+0x568>)
 80021c0:	801a      	strh	r2, [r3, #0]

			if(Tar_cmd_FL>50){Tar_cmd_FL=50;}
 80021c2:	4b41      	ldr	r3, [pc, #260]	; (80022c8 <StartTask02+0x568>)
 80021c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c8:	2b32      	cmp	r3, #50	; 0x32
 80021ca:	dd02      	ble.n	80021d2 <StartTask02+0x472>
 80021cc:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <StartTask02+0x568>)
 80021ce:	2232      	movs	r2, #50	; 0x32
 80021d0:	801a      	strh	r2, [r3, #0]
			if(Tar_cmd_FL<-50){Tar_cmd_FL=-50;}
 80021d2:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <StartTask02+0x568>)
 80021d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021d8:	f113 0f32 	cmn.w	r3, #50	; 0x32
 80021dc:	da03      	bge.n	80021e6 <StartTask02+0x486>
 80021de:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <StartTask02+0x568>)
 80021e0:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80021e4:	801a      	strh	r2, [r3, #0]
			Tar_cmd_RR = Tar_cmd_RL = Tar_cmd_FR = Tar_cmd_FL;
 80021e6:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <StartTask02+0x568>)
 80021e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021ec:	4b37      	ldr	r3, [pc, #220]	; (80022cc <StartTask02+0x56c>)
 80021ee:	801a      	strh	r2, [r3, #0]
 80021f0:	4b36      	ldr	r3, [pc, #216]	; (80022cc <StartTask02+0x56c>)
 80021f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021f6:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <StartTask02+0x570>)
 80021f8:	801a      	strh	r2, [r3, #0]
 80021fa:	4b35      	ldr	r3, [pc, #212]	; (80022d0 <StartTask02+0x570>)
 80021fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002200:	4b34      	ldr	r3, [pc, #208]	; (80022d4 <StartTask02+0x574>)
 8002202:	801a      	strh	r2, [r3, #0]

//			Real_cmd_v_x = CONSTANT_VEL2*((Tmp_cmd_FL+Tmp_cmd_RL-Tmp_cmd_FR-Tmp_cmd_RR)/4)/10*cos(ANGLE_RAD);
//			Real_cmd_v_y = CONSTANT_VEL2*((Tmp_cmd_FL+Tmp_cmd_RL-Tmp_cmd_FR-Tmp_cmd_RR)/4)/10*sin(ANGLE_RAD);
//			Real_cmd_w = -(CONSTANT_C_AxC_V*((Tmp_cmd_FL+Tmp_cmd_RL+Tmp_cmd_FR+Tmp_cmd_RR)/4))/10;
			Cal_Real_cmd();
 8002204:	f7ff fadc 	bl	80017c0 <Cal_Real_cmd>
 8002208:	e162      	b.n	80024d0 <StartTask02+0x770>
		}
	}

	else if(Tar_cmd_v_x|Tar_cmd_v_y){
 800220a:	4b35      	ldr	r3, [pc, #212]	; (80022e0 <StartTask02+0x580>)
 800220c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002210:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <StartTask02+0x584>)
 8002212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002216:	4313      	orrs	r3, r2
 8002218:	b21b      	sxth	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8158 	beq.w	80024d0 <StartTask02+0x770>

		ModeABCD = 1;
 8002220:	4b26      	ldr	r3, [pc, #152]	; (80022bc <StartTask02+0x55c>)
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]

		if((Pre_ModeABCD!=ModeABCD) || (EndMode==0)){
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <StartTask02+0x560>)
 8002228:	781a      	ldrb	r2, [r3, #0]
 800222a:	4b24      	ldr	r3, [pc, #144]	; (80022bc <StartTask02+0x55c>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d103      	bne.n	800223a <StartTask02+0x4da>
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <StartTask02+0x564>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d156      	bne.n	80022e8 <StartTask02+0x588>
			//printf("111osTimerStart: %d, %d\n", ModeABCD, Pre_ModeABCD);
			Pre_ModeABCD = ModeABCD;
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <StartTask02+0x55c>)
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <StartTask02+0x560>)
 8002240:	701a      	strb	r2, [r3, #0]
			Tar_cmd_RR = Tar_cmd_RL = Tar_cmd_FR = Tar_cmd_FL=0;
 8002242:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <StartTask02+0x568>)
 8002244:	2200      	movs	r2, #0
 8002246:	801a      	strh	r2, [r3, #0]
 8002248:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <StartTask02+0x568>)
 800224a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800224e:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <StartTask02+0x56c>)
 8002250:	801a      	strh	r2, [r3, #0]
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <StartTask02+0x56c>)
 8002254:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <StartTask02+0x570>)
 800225a:	801a      	strh	r2, [r3, #0]
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <StartTask02+0x570>)
 800225e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002262:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <StartTask02+0x574>)
 8002264:	801a      	strh	r2, [r3, #0]
			if(timerflag){
 8002266:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <StartTask02+0x578>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8109 	beq.w	8002482 <StartTask02+0x722>
				//printf("timerflag: %d\n", timerflag);
				osTimerStart(EndModeDTimerHandle, ENDMODETIME);
 8002270:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <StartTask02+0x57c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002278:	4618      	mov	r0, r3
 800227a:	f007 fdfd 	bl	8009e78 <osTimerStart>
				timerflag = 0;
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <StartTask02+0x578>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
				EndMode = 0;
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <StartTask02+0x564>)
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
			if(timerflag){
 800228a:	e0fa      	b.n	8002482 <StartTask02+0x722>
 800228c:	f3af 8000 	nop.w
 8002290:	8ccd1fe0 	.word	0x8ccd1fe0
 8002294:	40412c3c 	.word	0x40412c3c
 8002298:	20000bec 	.word	0x20000bec
 800229c:	20000bdc 	.word	0x20000bdc
 80022a0:	20000bde 	.word	0x20000bde
 80022a4:	20000be0 	.word	0x20000be0
 80022a8:	20000be2 	.word	0x20000be2
 80022ac:	20000a94 	.word	0x20000a94
 80022b0:	20000ac8 	.word	0x20000ac8
 80022b4:	20000bfc 	.word	0x20000bfc
 80022b8:	20000bd4 	.word	0x20000bd4
 80022bc:	2000005c 	.word	0x2000005c
 80022c0:	20000bc4 	.word	0x20000bc4
 80022c4:	2000005e 	.word	0x2000005e
 80022c8:	20000be4 	.word	0x20000be4
 80022cc:	20000be6 	.word	0x20000be6
 80022d0:	20000be8 	.word	0x20000be8
 80022d4:	20000bea 	.word	0x20000bea
 80022d8:	2000005d 	.word	0x2000005d
 80022dc:	20000c20 	.word	0x20000c20
 80022e0:	20000bd0 	.word	0x20000bd0
 80022e4:	20000bd2 	.word	0x20000bd2
			}
		}
		else{
			Tar_cmd_FL = CONSTANT_VEL  *  (Tar_cmd_v_x*cos(ANGLE_RAD) + Tar_cmd_v_y*sin(ANGLE_RAD));
 80022e8:	4bad      	ldr	r3, [pc, #692]	; (80025a0 <StartTask02+0x840>)
 80022ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe f918 	bl	8000524 <__aeabi_i2d>
 80022f4:	4680      	mov	r8, r0
 80022f6:	4689      	mov	r9, r1
 80022f8:	4baa      	ldr	r3, [pc, #680]	; (80025a4 <StartTask02+0x844>)
 80022fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f910 	bl	8000524 <__aeabi_i2d>
 8002304:	4682      	mov	sl, r0
 8002306:	468b      	mov	fp, r1
 8002308:	4ba5      	ldr	r3, [pc, #660]	; (80025a0 <StartTask02+0x840>)
 800230a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f908 	bl	8000524 <__aeabi_i2d>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	ec43 2b11 	vmov	d1, r2, r3
 800231c:	ec4b ab10 	vmov	d0, sl, fp
 8002320:	f00e fa0a 	bl	8010738 <atan2>
 8002324:	eeb0 7a40 	vmov.f32	s14, s0
 8002328:	eef0 7a60 	vmov.f32	s15, s1
 800232c:	eeb0 0a47 	vmov.f32	s0, s14
 8002330:	eef0 0a67 	vmov.f32	s1, s15
 8002334:	f00e f954 	bl	80105e0 <cos>
 8002338:	ec53 2b10 	vmov	r2, r3, d0
 800233c:	4640      	mov	r0, r8
 800233e:	4649      	mov	r1, r9
 8002340:	f7fe f95a 	bl	80005f8 <__aeabi_dmul>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4692      	mov	sl, r2
 800234a:	469b      	mov	fp, r3
 800234c:	4b95      	ldr	r3, [pc, #596]	; (80025a4 <StartTask02+0x844>)
 800234e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe f8e6 	bl	8000524 <__aeabi_i2d>
 8002358:	4680      	mov	r8, r0
 800235a:	4689      	mov	r9, r1
 800235c:	4b91      	ldr	r3, [pc, #580]	; (80025a4 <StartTask02+0x844>)
 800235e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe f8de 	bl	8000524 <__aeabi_i2d>
 8002368:	ec41 0b18 	vmov	d8, r0, r1
 800236c:	4b8c      	ldr	r3, [pc, #560]	; (80025a0 <StartTask02+0x840>)
 800236e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f8d6 	bl	8000524 <__aeabi_i2d>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	ec43 2b11 	vmov	d1, r2, r3
 8002380:	eeb0 0a48 	vmov.f32	s0, s16
 8002384:	eef0 0a68 	vmov.f32	s1, s17
 8002388:	f00e f9d6 	bl	8010738 <atan2>
 800238c:	eeb0 7a40 	vmov.f32	s14, s0
 8002390:	eef0 7a60 	vmov.f32	s15, s1
 8002394:	eeb0 0a47 	vmov.f32	s0, s14
 8002398:	eef0 0a67 	vmov.f32	s1, s15
 800239c:	f00e f974 	bl	8010688 <sin>
 80023a0:	ec53 2b10 	vmov	r2, r3, d0
 80023a4:	4640      	mov	r0, r8
 80023a6:	4649      	mov	r1, r9
 80023a8:	f7fe f926 	bl	80005f8 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4650      	mov	r0, sl
 80023b2:	4659      	mov	r1, fp
 80023b4:	f7fd ff6a 	bl	800028c <__adddf3>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	a375      	add	r3, pc, #468	; (adr r3, 8002598 <StartTask02+0x838>)
 80023c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c6:	f7fe f917 	bl	80005f8 <__aeabi_dmul>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7fe fbc1 	bl	8000b58 <__aeabi_d2iz>
 80023d6:	4603      	mov	r3, r0
 80023d8:	b21a      	sxth	r2, r3
 80023da:	4b73      	ldr	r3, [pc, #460]	; (80025a8 <StartTask02+0x848>)
 80023dc:	801a      	strh	r2, [r3, #0]

			if(Tar_cmd_FL>100){Tar_cmd_FL=100;}
 80023de:	4b72      	ldr	r3, [pc, #456]	; (80025a8 <StartTask02+0x848>)
 80023e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e4:	2b64      	cmp	r3, #100	; 0x64
 80023e6:	dd02      	ble.n	80023ee <StartTask02+0x68e>
 80023e8:	4b6f      	ldr	r3, [pc, #444]	; (80025a8 <StartTask02+0x848>)
 80023ea:	2264      	movs	r2, #100	; 0x64
 80023ec:	801a      	strh	r2, [r3, #0]
			if(Tar_cmd_FL<-100){Tar_cmd_FL=-100;}
 80023ee:	4b6e      	ldr	r3, [pc, #440]	; (80025a8 <StartTask02+0x848>)
 80023f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023f4:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80023f8:	da03      	bge.n	8002402 <StartTask02+0x6a2>
 80023fa:	4b6b      	ldr	r3, [pc, #428]	; (80025a8 <StartTask02+0x848>)
 80023fc:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8002400:	801a      	strh	r2, [r3, #0]
			Tar_cmd_FR = -Tar_cmd_FL;
 8002402:	4b69      	ldr	r3, [pc, #420]	; (80025a8 <StartTask02+0x848>)
 8002404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002408:	b29b      	uxth	r3, r3
 800240a:	425b      	negs	r3, r3
 800240c:	b29b      	uxth	r3, r3
 800240e:	b21a      	sxth	r2, r3
 8002410:	4b66      	ldr	r3, [pc, #408]	; (80025ac <StartTask02+0x84c>)
 8002412:	801a      	strh	r2, [r3, #0]
			Tar_cmd_RL = Tar_cmd_FL;
 8002414:	4b64      	ldr	r3, [pc, #400]	; (80025a8 <StartTask02+0x848>)
 8002416:	f9b3 2000 	ldrsh.w	r2, [r3]
 800241a:	4b65      	ldr	r3, [pc, #404]	; (80025b0 <StartTask02+0x850>)
 800241c:	801a      	strh	r2, [r3, #0]
			Tar_cmd_RR = -Tar_cmd_FL;
 800241e:	4b62      	ldr	r3, [pc, #392]	; (80025a8 <StartTask02+0x848>)
 8002420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002424:	b29b      	uxth	r3, r3
 8002426:	425b      	negs	r3, r3
 8002428:	b29b      	uxth	r3, r3
 800242a:	b21a      	sxth	r2, r3
 800242c:	4b61      	ldr	r3, [pc, #388]	; (80025b4 <StartTask02+0x854>)
 800242e:	801a      	strh	r2, [r3, #0]

			if(Tar_cmd_v_x<0){
 8002430:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <StartTask02+0x840>)
 8002432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002436:	2b00      	cmp	r3, #0
 8002438:	da23      	bge.n	8002482 <StartTask02+0x722>
				Tar_cmd_FL*=-1;
 800243a:	4b5b      	ldr	r3, [pc, #364]	; (80025a8 <StartTask02+0x848>)
 800243c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002440:	b29b      	uxth	r3, r3
 8002442:	425b      	negs	r3, r3
 8002444:	b29b      	uxth	r3, r3
 8002446:	b21a      	sxth	r2, r3
 8002448:	4b57      	ldr	r3, [pc, #348]	; (80025a8 <StartTask02+0x848>)
 800244a:	801a      	strh	r2, [r3, #0]
				Tar_cmd_FR*=-1;
 800244c:	4b57      	ldr	r3, [pc, #348]	; (80025ac <StartTask02+0x84c>)
 800244e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002452:	b29b      	uxth	r3, r3
 8002454:	425b      	negs	r3, r3
 8002456:	b29b      	uxth	r3, r3
 8002458:	b21a      	sxth	r2, r3
 800245a:	4b54      	ldr	r3, [pc, #336]	; (80025ac <StartTask02+0x84c>)
 800245c:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RL*=-1;
 800245e:	4b54      	ldr	r3, [pc, #336]	; (80025b0 <StartTask02+0x850>)
 8002460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002464:	b29b      	uxth	r3, r3
 8002466:	425b      	negs	r3, r3
 8002468:	b29b      	uxth	r3, r3
 800246a:	b21a      	sxth	r2, r3
 800246c:	4b50      	ldr	r3, [pc, #320]	; (80025b0 <StartTask02+0x850>)
 800246e:	801a      	strh	r2, [r3, #0]
				Tar_cmd_RR*=-1;
 8002470:	4b50      	ldr	r3, [pc, #320]	; (80025b4 <StartTask02+0x854>)
 8002472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002476:	b29b      	uxth	r3, r3
 8002478:	425b      	negs	r3, r3
 800247a:	b29b      	uxth	r3, r3
 800247c:	b21a      	sxth	r2, r3
 800247e:	4b4d      	ldr	r3, [pc, #308]	; (80025b4 <StartTask02+0x854>)
 8002480:	801a      	strh	r2, [r3, #0]
			}
		}
		//SteDeg=rad2deg(ANGLE_RAD);
		Deg2Ste(Xbot_W,rad2deg(ANGLE_RAD));
 8002482:	4b48      	ldr	r3, [pc, #288]	; (80025a4 <StartTask02+0x844>)
 8002484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe f84b 	bl	8000524 <__aeabi_i2d>
 800248e:	4680      	mov	r8, r0
 8002490:	4689      	mov	r9, r1
 8002492:	4b43      	ldr	r3, [pc, #268]	; (80025a0 <StartTask02+0x840>)
 8002494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe f843 	bl	8000524 <__aeabi_i2d>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	ec43 2b11 	vmov	d1, r2, r3
 80024a6:	ec49 8b10 	vmov	d0, r8, r9
 80024aa:	f00e f945 	bl	8010738 <atan2>
 80024ae:	eeb0 7a40 	vmov.f32	s14, s0
 80024b2:	eef0 7a60 	vmov.f32	s15, s1
 80024b6:	eeb0 0a47 	vmov.f32	s0, s14
 80024ba:	eef0 0a67 	vmov.f32	s1, s15
 80024be:	f7ff fb0b 	bl	8001ad8 <rad2deg>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4619      	mov	r1, r3
 80024c6:	2001      	movs	r0, #1
 80024c8:	f7ff fad6 	bl	8001a78 <Deg2Ste>

//		Real_cmd_v_x = CONSTANT_VEL2*((Tmp_cmd_FL+Tmp_cmd_RL-Tmp_cmd_FR-Tmp_cmd_RR)/4)/10*fabs(cos(ANGLE_RAD));
//		Real_cmd_v_y = CONSTANT_VEL2*((Tmp_cmd_FL+Tmp_cmd_RL-Tmp_cmd_FR-Tmp_cmd_RR)/4)/10*sin(ANGLE_RAD);
//		Real_cmd_w = -(CONSTANT_C_AxC_V*((Tmp_cmd_FL+Tmp_cmd_RL+Tmp_cmd_FR+Tmp_cmd_RR)/4))/10;
		Cal_Real_cmd();
 80024cc:	f7ff f978 	bl	80017c0 <Cal_Real_cmd>
	}

	if(((Tar_cmd_v_x==0) && (Tar_cmd_v_y==0) && (Tar_cmd_w==0))  ||  (Stopflagcheck(Xbot_R, 1)==0))
 80024d0:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <StartTask02+0x840>)
 80024d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <StartTask02+0x78e>
 80024da:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <StartTask02+0x844>)
 80024dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d104      	bne.n	80024ee <StartTask02+0x78e>
 80024e4:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <StartTask02+0x858>)
 80024e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d006      	beq.n	80024fc <StartTask02+0x79c>
 80024ee:	2101      	movs	r1, #1
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7ff fa81 	bl	80019f8 <Stopflagcheck>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d119      	bne.n	8002530 <StartTask02+0x7d0>
	{
		ModeABCD = 4;
 80024fc:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <StartTask02+0x85c>)
 80024fe:	2204      	movs	r2, #4
 8002500:	701a      	strb	r2, [r3, #0]
		Pre_ModeABCD = 4;
 8002502:	4b2f      	ldr	r3, [pc, #188]	; (80025c0 <StartTask02+0x860>)
 8002504:	2204      	movs	r2, #4
 8002506:	701a      	strb	r2, [r3, #0]
		Tar_cmd_RR = Tar_cmd_RL = Tar_cmd_FR = Tar_cmd_FL=0;
 8002508:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <StartTask02+0x848>)
 800250a:	2200      	movs	r2, #0
 800250c:	801a      	strh	r2, [r3, #0]
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <StartTask02+0x848>)
 8002510:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002514:	4b25      	ldr	r3, [pc, #148]	; (80025ac <StartTask02+0x84c>)
 8002516:	801a      	strh	r2, [r3, #0]
 8002518:	4b24      	ldr	r3, [pc, #144]	; (80025ac <StartTask02+0x84c>)
 800251a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800251e:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <StartTask02+0x850>)
 8002520:	801a      	strh	r2, [r3, #0]
 8002522:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <StartTask02+0x850>)
 8002524:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002528:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <StartTask02+0x854>)
 800252a:	801a      	strh	r2, [r3, #0]
//		Real_cmd_v_x = CONSTANT_VEL2*((Tmp_cmd_FL+Tmp_cmd_RL-Tmp_cmd_FR-Tmp_cmd_RR)/4)*cos(ANGLE_RAD)/10;
//		Real_cmd_v_y = CONSTANT_VEL2*((Tmp_cmd_FL+Tmp_cmd_RL-Tmp_cmd_FR-Tmp_cmd_RR)/4)*sin(ANGLE_RAD)/10;
//		Real_cmd_w = CONSTANT_C_AxC_V*((Tmp_cmd_FL+Tmp_cmd_RL+Tmp_cmd_FR+Tmp_cmd_RR)/4);
		Cal_Real_cmd();
 800252c:	f7ff f948 	bl	80017c0 <Cal_Real_cmd>
//	Real_cmd_v_x = CONSTANT_VEL2*Tmp_cmd_FL*cos(ANGLE_RAD)/10;
//	Real_cmd_v_y = CONSTANT_VEL2*Tmp_cmd_FL*sin(ANGLE_RAD)/10;
//	Real_cmd_w = 0;


	sendcanbuf[7] = VERSION_MINOR;
 8002530:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <StartTask02+0x864>)
 8002532:	2205      	movs	r2, #5
 8002534:	71da      	strb	r2, [r3, #7]
	sendcanbuf[6] = VERSION_MAJOR;
 8002536:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <StartTask02+0x864>)
 8002538:	2201      	movs	r2, #1
 800253a:	719a      	strb	r2, [r3, #6]
	sendcanbuf[5] = (((int16_t)(Real_cmd_w)))>>8 & 0xff;
 800253c:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <StartTask02+0x868>)
 800253e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002542:	121b      	asrs	r3, r3, #8
 8002544:	b21b      	sxth	r3, r3
 8002546:	b25a      	sxtb	r2, r3
 8002548:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <StartTask02+0x864>)
 800254a:	715a      	strb	r2, [r3, #5]
	sendcanbuf[4] = (int16_t)(Real_cmd_w)&0xff;
 800254c:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <StartTask02+0x868>)
 800254e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002552:	b25a      	sxtb	r2, r3
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <StartTask02+0x864>)
 8002556:	711a      	strb	r2, [r3, #4]
	sendcanbuf[3] = (((int16_t)(Real_cmd_v_y)))>>8 & 0xff;
 8002558:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <StartTask02+0x86c>)
 800255a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800255e:	121b      	asrs	r3, r3, #8
 8002560:	b21b      	sxth	r3, r3
 8002562:	b25a      	sxtb	r2, r3
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <StartTask02+0x864>)
 8002566:	70da      	strb	r2, [r3, #3]
	sendcanbuf[2] = (int16_t)(Real_cmd_v_y)&0xff;
 8002568:	4b18      	ldr	r3, [pc, #96]	; (80025cc <StartTask02+0x86c>)
 800256a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800256e:	b25a      	sxtb	r2, r3
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <StartTask02+0x864>)
 8002572:	709a      	strb	r2, [r3, #2]
	sendcanbuf[1] = (((int16_t)(Real_cmd_v_x)))>>8 & 0xff;
 8002574:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <StartTask02+0x870>)
 8002576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800257a:	121b      	asrs	r3, r3, #8
 800257c:	b21b      	sxth	r3, r3
 800257e:	b25a      	sxtb	r2, r3
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <StartTask02+0x864>)
 8002582:	705a      	strb	r2, [r3, #1]
	sendcanbuf[0] = (int16_t)(Real_cmd_v_x)&0xff;
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <StartTask02+0x870>)
 8002586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800258a:	b25a      	sxtb	r2, r3
 800258c:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <StartTask02+0x864>)
 800258e:	701a      	strb	r2, [r3, #0]
	lastTime += PERIOD_CANCOMM;;
 8002590:	e494      	b.n	8001ebc <StartTask02+0x15c>
 8002592:	bf00      	nop
 8002594:	f3af 8000 	nop.w
 8002598:	cc196908 	.word	0xcc196908
 800259c:	3fbc42f1 	.word	0x3fbc42f1
 80025a0:	20000bd0 	.word	0x20000bd0
 80025a4:	20000bd2 	.word	0x20000bd2
 80025a8:	20000be4 	.word	0x20000be4
 80025ac:	20000be6 	.word	0x20000be6
 80025b0:	20000be8 	.word	0x20000be8
 80025b4:	20000bea 	.word	0x20000bea
 80025b8:	20000bd4 	.word	0x20000bd4
 80025bc:	2000005c 	.word	0x2000005c
 80025c0:	20000bc4 	.word	0x20000bc4
 80025c4:	20000bf4 	.word	0x20000bf4
 80025c8:	20000bda 	.word	0x20000bda
 80025cc:	20000bd8 	.word	0x20000bd8
 80025d0:	20000bd6 	.word	0x20000bd6
 80025d4:	00000000 	.word	0x00000000

080025d8 <StartTask03>:
* @retval None
*/

/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b090      	sub	sp, #64	; 0x40
 80025dc:	af02      	add	r7, sp, #8
 80025de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	uint32_t lastTime;
	uint8_t Dir_Rot = 0; //direction of rotation
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t FT_flag = 0; //FineTuning_flag
 80025e6:	2300      	movs	r3, #0
 80025e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	int32_t angle = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t pre_angle = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t speed_angle = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
//	char buf[48]={	 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,		//1 front right
//					13, 14, 15, 16, 17, 18, 19, 20, 21, 22,	23, 24,		//2 front left
//					25, 26, 27, 28, 29, 30, 31, 32,	33, 34, 35, 36,		//3 rear right
//					37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48	};	//4 rear left

	osDelay(1000);
 80025f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025fc:	f007 fb62 	bl	8009cc4 <osDelay>
	GPIO_enableirq();
 8002600:	f000 fe30 	bl	8003264 <GPIO_enableirq>
	osDelay(100);
 8002604:	2064      	movs	r0, #100	; 0x64
 8002606:	f007 fb5d 	bl	8009cc4 <osDelay>
	osThreadFlagsSet(IRQ_PSxHandle, 1);
 800260a:	4b9a      	ldr	r3, [pc, #616]	; (8002874 <StartTask03+0x29c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2101      	movs	r1, #1
 8002610:	4618      	mov	r0, r3
 8002612:	f007 fa67 	bl	8009ae4 <osThreadFlagsSet>

	for(int i=0;i<4;i++){
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
 800261a:	e058      	b.n	80026ce <StartTask03+0xf6>
		if(HAL_GPIO_ReadPin(GPIOA, ((1<<i)<<4))){//GPIO_PIN_4                 ((uint16_t)0x0010)  /* Pin 4 selected    */
 800261c:	2201      	movs	r2, #1
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	b29b      	uxth	r3, r3
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	b29b      	uxth	r3, r3
 800262a:	4619      	mov	r1, r3
 800262c:	4892      	ldr	r0, [pc, #584]	; (8002878 <StartTask03+0x2a0>)
 800262e:	f003 fd41 	bl	80060b4 <HAL_GPIO_ReadPin>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d018      	beq.n	800266a <StartTask03+0x92>
			if((i==STMotorID2) || (i==STMotorID3)) 	{Dir_Rot = SERVO_CW;}
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d002      	beq.n	8002644 <StartTask03+0x6c>
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d103      	bne.n	800264c <StartTask03+0x74>
 8002644:	2300      	movs	r3, #0
 8002646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800264a:	e026      	b.n	800269a <StartTask03+0xc2>
			else					{Dir_Rot = SERVO_CCW;FT_flag |= (1<<i);}
 800264c:	2301      	movs	r3, #1
 800264e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002652:	2201      	movs	r2, #1
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	b25a      	sxtb	r2, r3
 800265c:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8002660:	4313      	orrs	r3, r2
 8002662:	b25b      	sxtb	r3, r3
 8002664:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8002668:	e017      	b.n	800269a <StartTask03+0xc2>
		}
		else {
			if((i==STMotorID2) || (i==STMotorID3))	{Dir_Rot = SERVO_CCW;FT_flag |= (1<<i);}
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d002      	beq.n	8002676 <StartTask03+0x9e>
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d10e      	bne.n	8002694 <StartTask03+0xbc>
 8002676:	2301      	movs	r3, #1
 8002678:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800267c:	2201      	movs	r2, #1
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	b25a      	sxtb	r2, r3
 8002686:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 800268a:	4313      	orrs	r3, r2
 800268c:	b25b      	sxtb	r3, r3
 800268e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8002692:	e002      	b.n	800269a <StartTask03+0xc2>
			else					{Dir_Rot = SERVO_CW;}
 8002694:	2300      	movs	r3, #0
 8002696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		}
		DataSetSteering(buf, i, Dir_Rot, RPM_1, SERVO_INIT, INIT_SPEED);// i= STMotorIDx, x=1~4
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	b2d9      	uxtb	r1, r3
 800269e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80026a2:	231e      	movs	r3, #30
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	2301      	movs	r3, #1
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2314      	movs	r3, #20
 80026ac:	4873      	ldr	r0, [pc, #460]	; (800287c <StartTask03+0x2a4>)
 80026ae:	f000 ffab 	bl	8003608 <DataSetSteering>
		printf("PS_SIG1_Pin ccw init. %d %x\n", FT_flag, ((1<<i)<<4));
 80026b2:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 80026b6:	2201      	movs	r2, #1
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	461a      	mov	r2, r3
 80026c2:	486f      	ldr	r0, [pc, #444]	; (8002880 <StartTask03+0x2a8>)
 80026c4:	f00b ff82 	bl	800e5cc <iprintf>
	for(int i=0;i<4;i++){
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	3301      	adds	r3, #1
 80026cc:	623b      	str	r3, [r7, #32]
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	dda3      	ble.n	800261c <StartTask03+0x44>
	}

	osDelay(1000);
 80026d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026d8:	f007 faf4 	bl	8009cc4 <osDelay>

	for(int i=0;i<40;i++){
 80026dc:	2300      	movs	r3, #0
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	e022      	b.n	8002728 <StartTask03+0x150>
		osDelay(200);
 80026e2:	20c8      	movs	r0, #200	; 0xc8
 80026e4:	f007 faee 	bl	8009cc4 <osDelay>
		ServoMotor_writeDMA(buf);//servo init. must done init within 500*20ms
 80026e8:	4864      	ldr	r0, [pc, #400]	; (800287c <StartTask03+0x2a4>)
 80026ea:	f000 ff67 	bl	80035bc <ServoMotor_writeDMA>
		printf("%d ", i);
 80026ee:	69f9      	ldr	r1, [r7, #28]
 80026f0:	4864      	ldr	r0, [pc, #400]	; (8002884 <StartTask03+0x2ac>)
 80026f2:	f00b ff6b 	bl	800e5cc <iprintf>
		if(STinitdone){printf("steering origin init done!!!.\n"); break;}
 80026f6:	4b64      	ldr	r3, [pc, #400]	; (8002888 <StartTask03+0x2b0>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <StartTask03+0x12e>
 80026fe:	4863      	ldr	r0, [pc, #396]	; (800288c <StartTask03+0x2b4>)
 8002700:	f00b ffea 	bl	800e6d8 <puts>
 8002704:	e013      	b.n	800272e <StartTask03+0x156>
		if(i==39){
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	2b27      	cmp	r3, #39	; 0x27
 800270a:	d10a      	bne.n	8002722 <StartTask03+0x14a>
			HAL_Delay(100);
 800270c:	2064      	movs	r0, #100	; 0x64
 800270e:	f001 ff63 	bl	80045d8 <HAL_Delay>
			printf("steering origin init failed reset!!!!.\n");
 8002712:	485f      	ldr	r0, [pc, #380]	; (8002890 <StartTask03+0x2b8>)
 8002714:	f00b ffe0 	bl	800e6d8 <puts>
			HAL_Delay(100);
 8002718:	2064      	movs	r0, #100	; 0x64
 800271a:	f001 ff5d 	bl	80045d8 <HAL_Delay>
			NVIC_SystemReset();
 800271e:	f7ff f839 	bl	8001794 <__NVIC_SystemReset>
	for(int i=0;i<40;i++){
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3301      	adds	r3, #1
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b27      	cmp	r3, #39	; 0x27
 800272c:	ddd9      	ble.n	80026e2 <StartTask03+0x10a>
		}
	}
	osDelay(500);
 800272e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002732:	f007 fac7 	bl	8009cc4 <osDelay>
	STinitdone = 0;
 8002736:	4b54      	ldr	r3, [pc, #336]	; (8002888 <StartTask03+0x2b0>)
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
	//EndInit = 0;
	//GPIO_enableirq();
//	osThreadFlagsSet(IRQ_PSxHandle, 1);
	printf("%d: osTFSet\n", osKernelGetTickCount());
 800273c:	f007 f92a 	bl	8009994 <osKernelGetTickCount>
 8002740:	4603      	mov	r3, r0
 8002742:	4619      	mov	r1, r3
 8002744:	4853      	ldr	r0, [pc, #332]	; (8002894 <StartTask03+0x2bc>)
 8002746:	f00b ff41 	bl	800e5cc <iprintf>

	for(int i=0;i<4;i++){
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	e03e      	b.n	80027ce <StartTask03+0x1f6>
		if(FT_flag&(1<<i)){
 8002750:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	fa42 f303 	asr.w	r3, r2, r3
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d012      	beq.n	8002788 <StartTask03+0x1b0>
			DataSetSteering(buf, i, SERVO_CW, STM_FT_ID[i][SERVO_CW], SERVO_POS, INIT_SPEED);
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	b2d9      	uxtb	r1, r3
 8002766:	4a4c      	ldr	r2, [pc, #304]	; (8002898 <StartTask03+0x2c0>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800276e:	b29b      	uxth	r3, r3
 8002770:	221e      	movs	r2, #30
 8002772:	9201      	str	r2, [sp, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	9200      	str	r2, [sp, #0]
 8002778:	2200      	movs	r2, #0
 800277a:	4840      	ldr	r0, [pc, #256]	; (800287c <StartTask03+0x2a4>)
 800277c:	f000 ff44 	bl	8003608 <DataSetSteering>
			printf("SERVO_cW\n");
 8002780:	4846      	ldr	r0, [pc, #280]	; (800289c <StartTask03+0x2c4>)
 8002782:	f00b ffa9 	bl	800e6d8 <puts>
 8002786:	e012      	b.n	80027ae <StartTask03+0x1d6>
		}
		else {
			DataSetSteering(buf, i, SERVO_CCW, STM_FT_ID[i][SERVO_CCW], SERVO_POS, INIT_SPEED);
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	b2d9      	uxtb	r1, r3
 800278c:	4a42      	ldr	r2, [pc, #264]	; (8002898 <StartTask03+0x2c0>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	b29b      	uxth	r3, r3
 8002798:	221e      	movs	r2, #30
 800279a:	9201      	str	r2, [sp, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	9200      	str	r2, [sp, #0]
 80027a0:	2201      	movs	r2, #1
 80027a2:	4836      	ldr	r0, [pc, #216]	; (800287c <StartTask03+0x2a4>)
 80027a4:	f000 ff30 	bl	8003608 <DataSetSteering>
			printf("SERVO_ccW\n");
 80027a8:	483d      	ldr	r0, [pc, #244]	; (80028a0 <StartTask03+0x2c8>)
 80027aa:	f00b ff95 	bl	800e6d8 <puts>
		}
		PS_SIGx_Pin |= (1<<i);
 80027ae:	2201      	movs	r2, #1
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	b25a      	sxtb	r2, r3
 80027b8:	4b3a      	ldr	r3, [pc, #232]	; (80028a4 <StartTask03+0x2cc>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b25b      	sxtb	r3, r3
 80027be:	4313      	orrs	r3, r2
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	4b37      	ldr	r3, [pc, #220]	; (80028a4 <StartTask03+0x2cc>)
 80027c6:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<4;i++){
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	3301      	adds	r3, #1
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	ddbd      	ble.n	8002750 <StartTask03+0x178>
	}

	for(int i=0;i<10;i++){
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	e009      	b.n	80027ee <StartTask03+0x216>
		ServoMotor_writeDMA(buf);//servo init. must done init within 500*20ms
 80027da:	4828      	ldr	r0, [pc, #160]	; (800287c <StartTask03+0x2a4>)
 80027dc:	f000 feee 	bl	80035bc <ServoMotor_writeDMA>
		osDelay(500);
 80027e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027e4:	f007 fa6e 	bl	8009cc4 <osDelay>
	for(int i=0;i<10;i++){
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3301      	adds	r3, #1
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b09      	cmp	r3, #9
 80027f2:	ddf2      	ble.n	80027da <StartTask03+0x202>
		}

	for(int i=0;i<4;i++){
 80027f4:	2300      	movs	r3, #0
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	e035      	b.n	8002866 <StartTask03+0x28e>
		if(FT_flag&(1<<i)){
 80027fa:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	fa42 f303 	asr.w	r3, r2, r3
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00e      	beq.n	800282a <StartTask03+0x252>
			DataSetSteering(buf, i, SERVO_CW, 0, SERVO_INIT, INIT_SPEED);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	b2d9      	uxtb	r1, r3
 8002810:	231e      	movs	r3, #30
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	2301      	movs	r3, #1
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2300      	movs	r3, #0
 800281a:	2200      	movs	r2, #0
 800281c:	4817      	ldr	r0, [pc, #92]	; (800287c <StartTask03+0x2a4>)
 800281e:	f000 fef3 	bl	8003608 <DataSetSteering>
			printf("SERVO_cW\n");
 8002822:	481e      	ldr	r0, [pc, #120]	; (800289c <StartTask03+0x2c4>)
 8002824:	f00b ff58 	bl	800e6d8 <puts>
 8002828:	e00d      	b.n	8002846 <StartTask03+0x26e>
		}
		else {
			DataSetSteering(buf, i, SERVO_CCW, 0, SERVO_INIT, INIT_SPEED);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	b2d9      	uxtb	r1, r3
 800282e:	231e      	movs	r3, #30
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	2301      	movs	r3, #1
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2300      	movs	r3, #0
 8002838:	2201      	movs	r2, #1
 800283a:	4810      	ldr	r0, [pc, #64]	; (800287c <StartTask03+0x2a4>)
 800283c:	f000 fee4 	bl	8003608 <DataSetSteering>
			printf("SERVO_ccW\n");
 8002840:	4817      	ldr	r0, [pc, #92]	; (80028a0 <StartTask03+0x2c8>)
 8002842:	f00b ff49 	bl	800e6d8 <puts>
		}
		PS_SIGx_Pin |= (1<<i);
 8002846:	2201      	movs	r2, #1
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	b25a      	sxtb	r2, r3
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <StartTask03+0x2cc>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b25b      	sxtb	r3, r3
 8002856:	4313      	orrs	r3, r2
 8002858:	b25b      	sxtb	r3, r3
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <StartTask03+0x2cc>)
 800285e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<4;i++){
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	3301      	adds	r3, #1
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	2b03      	cmp	r3, #3
 800286a:	ddc6      	ble.n	80027fa <StartTask03+0x222>
	}

	for(int i=0;i<10;i++){
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e024      	b.n	80028bc <StartTask03+0x2e4>
 8002872:	bf00      	nop
 8002874:	20000c18 	.word	0x20000c18
 8002878:	40020000 	.word	0x40020000
 800287c:	20000060 	.word	0x20000060
 8002880:	08011d8c 	.word	0x08011d8c
 8002884:	08011dac 	.word	0x08011dac
 8002888:	20000bc5 	.word	0x20000bc5
 800288c:	08011db0 	.word	0x08011db0
 8002890:	08011dd0 	.word	0x08011dd0
 8002894:	08011df8 	.word	0x08011df8
 8002898:	2000003c 	.word	0x2000003c
 800289c:	08011e08 	.word	0x08011e08
 80028a0:	08011e14 	.word	0x08011e14
 80028a4:	20000bc0 	.word	0x20000bc0
		ServoMotor_writeDMA(buf);//servo init. must done init within 500*20ms
 80028a8:	4868      	ldr	r0, [pc, #416]	; (8002a4c <StartTask03+0x474>)
 80028aa:	f000 fe87 	bl	80035bc <ServoMotor_writeDMA>
		osDelay(500);
 80028ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028b2:	f007 fa07 	bl	8009cc4 <osDelay>
	for(int i=0;i<10;i++){
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	3301      	adds	r3, #1
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b09      	cmp	r3, #9
 80028c0:	ddf2      	ble.n	80028a8 <StartTask03+0x2d0>
		}

	Dir_Rot = 0;//init
 80028c2:	2300      	movs	r3, #0
 80028c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	lastTime = osKernelGetTickCount();
 80028c8:	f007 f864 	bl	8009994 <osKernelGetTickCount>
 80028cc:	6378      	str	r0, [r7, #52]	; 0x34
  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_STEERING;
 80028ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d0:	3332      	adds	r3, #50	; 0x32
 80028d2:	637b      	str	r3, [r7, #52]	; 0x34
	osDelayUntil(lastTime);
 80028d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80028d6:	f007 fa10 	bl	8009cfa <osDelayUntil>

	printf("%d: t03\n", osKernelGetTickCount());
 80028da:	f007 f85b 	bl	8009994 <osKernelGetTickCount>
 80028de:	4603      	mov	r3, r0
 80028e0:	4619      	mov	r1, r3
 80028e2:	485b      	ldr	r0, [pc, #364]	; (8002a50 <StartTask03+0x478>)
 80028e4:	f00b fe72 	bl	800e5cc <iprintf>

	if(ModeABCD == 1){
 80028e8:	4b5a      	ldr	r3, [pc, #360]	; (8002a54 <StartTask03+0x47c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	f040 8141 	bne.w	8002b74 <StartTask03+0x59c>

		if(Deg2Ste(Xbot_R,0) == 180||Deg2Ste(Xbot_R,0) == -180){Deg2Ste(Xbot_W,0);}//forward, rear
 80028f2:	2100      	movs	r1, #0
 80028f4:	2000      	movs	r0, #0
 80028f6:	f7ff f8bf 	bl	8001a78 <Deg2Ste>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2bb4      	cmp	r3, #180	; 0xb4
 80028fe:	d007      	beq.n	8002910 <StartTask03+0x338>
 8002900:	2100      	movs	r1, #0
 8002902:	2000      	movs	r0, #0
 8002904:	f7ff f8b8 	bl	8001a78 <Deg2Ste>
 8002908:	4603      	mov	r3, r0
 800290a:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 800290e:	d103      	bne.n	8002918 <StartTask03+0x340>
 8002910:	2100      	movs	r1, #0
 8002912:	2001      	movs	r0, #1
 8002914:	f7ff f8b0 	bl	8001a78 <Deg2Ste>
		if(Tar_cmd_v_x==0&&Tar_cmd_v_y>0){Deg2Ste(Xbot_W,90); Dir_Rot=SERVO_CCW;}//left
 8002918:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <StartTask03+0x480>)
 800291a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10c      	bne.n	800293c <StartTask03+0x364>
 8002922:	4b4e      	ldr	r3, [pc, #312]	; (8002a5c <StartTask03+0x484>)
 8002924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002928:	2b00      	cmp	r3, #0
 800292a:	dd07      	ble.n	800293c <StartTask03+0x364>
 800292c:	215a      	movs	r1, #90	; 0x5a
 800292e:	2001      	movs	r0, #1
 8002930:	f7ff f8a2 	bl	8001a78 <Deg2Ste>
 8002934:	2301      	movs	r3, #1
 8002936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800293a:	e010      	b.n	800295e <StartTask03+0x386>
		else if(Tar_cmd_v_x==0&&Tar_cmd_v_y<0){Deg2Ste(Xbot_W,90); Dir_Rot=SERVO_CW;}//right
 800293c:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <StartTask03+0x480>)
 800293e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10b      	bne.n	800295e <StartTask03+0x386>
 8002946:	4b45      	ldr	r3, [pc, #276]	; (8002a5c <StartTask03+0x484>)
 8002948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800294c:	2b00      	cmp	r3, #0
 800294e:	da06      	bge.n	800295e <StartTask03+0x386>
 8002950:	215a      	movs	r1, #90	; 0x5a
 8002952:	2001      	movs	r0, #1
 8002954:	f7ff f890 	bl	8001a78 <Deg2Ste>
 8002958:	2300      	movs	r3, #0
 800295a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if		((Tar_cmd_v_x>0) && (Tar_cmd_v_y>0)){/*SteDeg*=1;*/							Dir_Rot=SERVO_CCW; }//the first quadrant
 800295e:	4b3e      	ldr	r3, [pc, #248]	; (8002a58 <StartTask03+0x480>)
 8002960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002964:	2b00      	cmp	r3, #0
 8002966:	dd08      	ble.n	800297a <StartTask03+0x3a2>
 8002968:	4b3c      	ldr	r3, [pc, #240]	; (8002a5c <StartTask03+0x484>)
 800296a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296e:	2b00      	cmp	r3, #0
 8002970:	dd03      	ble.n	800297a <StartTask03+0x3a2>
 8002972:	2301      	movs	r3, #1
 8002974:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002978:	e051      	b.n	8002a1e <StartTask03+0x446>
		else if	((Tar_cmd_v_x<0) && (Tar_cmd_v_y>0)){Deg2Ste(Xbot_W,180-Deg2Ste(Xbot_R,0)); Dir_Rot=SERVO_CW; }//the second quadrant
 800297a:	4b37      	ldr	r3, [pc, #220]	; (8002a58 <StartTask03+0x480>)
 800297c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002980:	2b00      	cmp	r3, #0
 8002982:	da16      	bge.n	80029b2 <StartTask03+0x3da>
 8002984:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <StartTask03+0x484>)
 8002986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800298a:	2b00      	cmp	r3, #0
 800298c:	dd11      	ble.n	80029b2 <StartTask03+0x3da>
 800298e:	2100      	movs	r1, #0
 8002990:	2000      	movs	r0, #0
 8002992:	f7ff f871 	bl	8001a78 <Deg2Ste>
 8002996:	4603      	mov	r3, r0
 8002998:	b29b      	uxth	r3, r3
 800299a:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800299e:	b29b      	uxth	r3, r3
 80029a0:	b21b      	sxth	r3, r3
 80029a2:	4619      	mov	r1, r3
 80029a4:	2001      	movs	r0, #1
 80029a6:	f7ff f867 	bl	8001a78 <Deg2Ste>
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80029b0:	e035      	b.n	8002a1e <StartTask03+0x446>
		else if	((Tar_cmd_v_x<0) && (Tar_cmd_v_y<0)){Deg2Ste(Xbot_W,180+Deg2Ste(Xbot_R,0)); Dir_Rot=SERVO_CCW; }//the third quadrant
 80029b2:	4b29      	ldr	r3, [pc, #164]	; (8002a58 <StartTask03+0x480>)
 80029b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	da15      	bge.n	80029e8 <StartTask03+0x410>
 80029bc:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <StartTask03+0x484>)
 80029be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	da10      	bge.n	80029e8 <StartTask03+0x410>
 80029c6:	2100      	movs	r1, #0
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7ff f855 	bl	8001a78 <Deg2Ste>
 80029ce:	4603      	mov	r3, r0
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	33b4      	adds	r3, #180	; 0xb4
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	b21b      	sxth	r3, r3
 80029d8:	4619      	mov	r1, r3
 80029da:	2001      	movs	r0, #1
 80029dc:	f7ff f84c 	bl	8001a78 <Deg2Ste>
 80029e0:	2301      	movs	r3, #1
 80029e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80029e6:	e01a      	b.n	8002a1e <StartTask03+0x446>
		else if	((Tar_cmd_v_x>0) && (Tar_cmd_v_y<0)){Deg2Ste(Xbot_W,abs(Deg2Ste(Xbot_R,0))); Dir_Rot=SERVO_CW; }//the fourth quadrant
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <StartTask03+0x480>)
 80029ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	dd15      	ble.n	8002a1e <StartTask03+0x446>
 80029f2:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <StartTask03+0x484>)
 80029f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da10      	bge.n	8002a1e <StartTask03+0x446>
 80029fc:	2100      	movs	r1, #0
 80029fe:	2000      	movs	r0, #0
 8002a00:	f7ff f83a 	bl	8001a78 <Deg2Ste>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	bfb8      	it	lt
 8002a0a:	425b      	neglt	r3, r3
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	b21b      	sxth	r3, r3
 8002a10:	4619      	mov	r1, r3
 8002a12:	2001      	movs	r0, #1
 8002a14:	f7ff f830 	bl	8001a78 <Deg2Ste>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if((SteDeg>=0) && (SteDeg<=90)){//prevent from angle over range
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <StartTask03+0x488>)
 8002a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f2c0 80a2 	blt.w	8002b6e <StartTask03+0x596>
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <StartTask03+0x488>)
 8002a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a30:	2b5a      	cmp	r3, #90	; 0x5a
 8002a32:	f300 809c 	bgt.w	8002b6e <StartTask03+0x596>
			if(Dir_Rot==SERVO_CW){angle = -1*SteDeg;}
 8002a36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d112      	bne.n	8002a64 <StartTask03+0x48c>
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <StartTask03+0x488>)
 8002a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a44:	425b      	negs	r3, r3
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a48:	e010      	b.n	8002a6c <StartTask03+0x494>
 8002a4a:	bf00      	nop
 8002a4c:	20000060 	.word	0x20000060
 8002a50:	08011e20 	.word	0x08011e20
 8002a54:	2000005c 	.word	0x2000005c
 8002a58:	20000bd0 	.word	0x20000bd0
 8002a5c:	20000bd2 	.word	0x20000bd2
 8002a60:	20000bc2 	.word	0x20000bc2
			else{angle = SteDeg;}
 8002a64:	4bbc      	ldr	r3, [pc, #752]	; (8002d58 <StartTask03+0x780>)
 8002a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			printf("%d: abs %d %d %d\n", osKernelGetTickCount(), speed_angle, pre_angle, angle);
 8002a6c:	f006 ff92 	bl	8009994 <osKernelGetTickCount>
 8002a70:	4601      	mov	r1, r0
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7a:	48b8      	ldr	r0, [pc, #736]	; (8002d5c <StartTask03+0x784>)
 8002a7c:	f00b fda6 	bl	800e5cc <iprintf>
			if(pre_angle != angle){
 8002a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d012      	beq.n	8002aae <StartTask03+0x4d6>
				speed_angle=abs(angle-pre_angle);
 8002a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bfb8      	it	lt
 8002a92:	425b      	neglt	r3, r3
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
				printf("%d: pre_angle != angle %d %d %d\n", osKernelGetTickCount(), speed_angle, pre_angle, angle);
 8002a96:	f006 ff7d 	bl	8009994 <osKernelGetTickCount>
 8002a9a:	4601      	mov	r1, r0
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa4:	48ae      	ldr	r0, [pc, #696]	; (8002d60 <StartTask03+0x788>)
 8002aa6:	f00b fd91 	bl	800e5cc <iprintf>
				pre_angle = angle;
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			//DataSetSteering(buf, STMotorID1, Dir_Rot, SteDeg*100, SERVO_POS,(speed_angle/9));
			DataSetSteering(buf, STMotorID1, Dir_Rot, SteDeg*100, SERVO_POS,20);
 8002aae:	4baa      	ldr	r3, [pc, #680]	; (8002d58 <StartTask03+0x780>)
 8002ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	0092      	lsls	r2, r2, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	461a      	mov	r2, r3
 8002abe:	0091      	lsls	r1, r2, #2
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002ace:	2114      	movs	r1, #20
 8002ad0:	9101      	str	r1, [sp, #4]
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	9100      	str	r1, [sp, #0]
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	48a2      	ldr	r0, [pc, #648]	; (8002d64 <StartTask03+0x78c>)
 8002ada:	f000 fd95 	bl	8003608 <DataSetSteering>
			//DataSetSteering(buf, STMotorID1, Dir_Rot, SteDeg*100, -1,50);
			//DataSetSteering(buf, STMotorID1, Dir_Rot, SteDeg*100, 2, 150);
			//if(Dir_Rot==SERVO_CW)	{pre_angle = -1*pre_angle;}
			//else					{pre_angle = pre_angle;}

			DataSetSteering(buf, STMotorID2, Dir_Rot, SteDeg*100, SERVO_POS,20);
 8002ade:	4b9e      	ldr	r3, [pc, #632]	; (8002d58 <StartTask03+0x780>)
 8002ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	0092      	lsls	r2, r2, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	461a      	mov	r2, r3
 8002aee:	0091      	lsls	r1, r2, #2
 8002af0:	461a      	mov	r2, r3
 8002af2:	460b      	mov	r3, r1
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002afe:	2114      	movs	r1, #20
 8002b00:	9101      	str	r1, [sp, #4]
 8002b02:	2100      	movs	r1, #0
 8002b04:	9100      	str	r1, [sp, #0]
 8002b06:	2101      	movs	r1, #1
 8002b08:	4896      	ldr	r0, [pc, #600]	; (8002d64 <StartTask03+0x78c>)
 8002b0a:	f000 fd7d 	bl	8003608 <DataSetSteering>
			DataSetSteering(buf, STMotorID3, Dir_Rot, SteDeg*100, SERVO_POS,20);
 8002b0e:	4b92      	ldr	r3, [pc, #584]	; (8002d58 <StartTask03+0x780>)
 8002b10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	0092      	lsls	r2, r2, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	0091      	lsls	r1, r2, #2
 8002b20:	461a      	mov	r2, r3
 8002b22:	460b      	mov	r3, r1
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002b2e:	2114      	movs	r1, #20
 8002b30:	9101      	str	r1, [sp, #4]
 8002b32:	2100      	movs	r1, #0
 8002b34:	9100      	str	r1, [sp, #0]
 8002b36:	2102      	movs	r1, #2
 8002b38:	488a      	ldr	r0, [pc, #552]	; (8002d64 <StartTask03+0x78c>)
 8002b3a:	f000 fd65 	bl	8003608 <DataSetSteering>
			DataSetSteering(buf, STMotorID4, Dir_Rot, SteDeg*100, SERVO_POS,20);
 8002b3e:	4b86      	ldr	r3, [pc, #536]	; (8002d58 <StartTask03+0x780>)
 8002b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	0092      	lsls	r2, r2, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	0091      	lsls	r1, r2, #2
 8002b50:	461a      	mov	r2, r3
 8002b52:	460b      	mov	r3, r1
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002b5e:	2114      	movs	r1, #20
 8002b60:	9101      	str	r1, [sp, #4]
 8002b62:	2100      	movs	r1, #0
 8002b64:	9100      	str	r1, [sp, #0]
 8002b66:	2103      	movs	r1, #3
 8002b68:	487e      	ldr	r0, [pc, #504]	; (8002d64 <StartTask03+0x78c>)
 8002b6a:	f000 fd4d 	bl	8003608 <DataSetSteering>
		}
		printf("Mode A\n");
 8002b6e:	487e      	ldr	r0, [pc, #504]	; (8002d68 <StartTask03+0x790>)
 8002b70:	f00b fdb2 	bl	800e6d8 <puts>
	}

	if(ModeABCD == 3){
 8002b74:	4b7d      	ldr	r3, [pc, #500]	; (8002d6c <StartTask03+0x794>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d171      	bne.n	8002c60 <StartTask03+0x688>
//		SteDeg=rad2deg(ANGLE_VEL);
		Deg2Ste(Xbot_W,rad2deg(ANGLE_VEL));
 8002b7c:	ed9f 0b74 	vldr	d0, [pc, #464]	; 8002d50 <StartTask03+0x778>
 8002b80:	f7fe ffaa 	bl	8001ad8 <rad2deg>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4619      	mov	r1, r3
 8002b88:	2001      	movs	r0, #1
 8002b8a:	f7fe ff75 	bl	8001a78 <Deg2Ste>
		printf("%d: abs %d\n", osKernelGetTickCount(), SteDeg);
 8002b8e:	f006 ff01 	bl	8009994 <osKernelGetTickCount>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4a70      	ldr	r2, [pc, #448]	; (8002d58 <StartTask03+0x780>)
 8002b96:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4874      	ldr	r0, [pc, #464]	; (8002d70 <StartTask03+0x798>)
 8002b9e:	f00b fd15 	bl	800e5cc <iprintf>
		DataSetSteering(buf, STMotorID1, SERVO_CCW, SteDeg*100, SERVO_POS, 20);
 8002ba2:	4b6d      	ldr	r3, [pc, #436]	; (8002d58 <StartTask03+0x780>)
 8002ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	0092      	lsls	r2, r2, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	0091      	lsls	r1, r2, #2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2214      	movs	r2, #20
 8002bc0:	9201      	str	r2, [sp, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	9200      	str	r2, [sp, #0]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4866      	ldr	r0, [pc, #408]	; (8002d64 <StartTask03+0x78c>)
 8002bcc:	f000 fd1c 	bl	8003608 <DataSetSteering>
		DataSetSteering(buf, STMotorID2, SERVO_CW, SteDeg*100, SERVO_POS, 20);
 8002bd0:	4b61      	ldr	r3, [pc, #388]	; (8002d58 <StartTask03+0x780>)
 8002bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	0092      	lsls	r2, r2, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	461a      	mov	r2, r3
 8002be0:	0091      	lsls	r1, r2, #2
 8002be2:	461a      	mov	r2, r3
 8002be4:	460b      	mov	r3, r1
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2214      	movs	r2, #20
 8002bee:	9201      	str	r2, [sp, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	9200      	str	r2, [sp, #0]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	485a      	ldr	r0, [pc, #360]	; (8002d64 <StartTask03+0x78c>)
 8002bfa:	f000 fd05 	bl	8003608 <DataSetSteering>
		DataSetSteering(buf, STMotorID3, SERVO_CW, SteDeg*100, SERVO_POS, 20);
 8002bfe:	4b56      	ldr	r3, [pc, #344]	; (8002d58 <StartTask03+0x780>)
 8002c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	0092      	lsls	r2, r2, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	0091      	lsls	r1, r2, #2
 8002c10:	461a      	mov	r2, r3
 8002c12:	460b      	mov	r3, r1
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2214      	movs	r2, #20
 8002c1c:	9201      	str	r2, [sp, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	9200      	str	r2, [sp, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	2102      	movs	r1, #2
 8002c26:	484f      	ldr	r0, [pc, #316]	; (8002d64 <StartTask03+0x78c>)
 8002c28:	f000 fcee 	bl	8003608 <DataSetSteering>
		DataSetSteering(buf, STMotorID4, SERVO_CCW, SteDeg*100, SERVO_POS, 20);
 8002c2c:	4b4a      	ldr	r3, [pc, #296]	; (8002d58 <StartTask03+0x780>)
 8002c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	0092      	lsls	r2, r2, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	0091      	lsls	r1, r2, #2
 8002c3e:	461a      	mov	r2, r3
 8002c40:	460b      	mov	r3, r1
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2214      	movs	r2, #20
 8002c4a:	9201      	str	r2, [sp, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	9200      	str	r2, [sp, #0]
 8002c50:	2201      	movs	r2, #1
 8002c52:	2103      	movs	r1, #3
 8002c54:	4843      	ldr	r0, [pc, #268]	; (8002d64 <StartTask03+0x78c>)
 8002c56:	f000 fcd7 	bl	8003608 <DataSetSteering>
		printf("Mode c\n");
 8002c5a:	4846      	ldr	r0, [pc, #280]	; (8002d74 <StartTask03+0x79c>)
 8002c5c:	f00b fd3c 	bl	800e6d8 <puts>
	}

	if(ModeABCD == 4){
 8002c60:	4b42      	ldr	r3, [pc, #264]	; (8002d6c <StartTask03+0x794>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d16c      	bne.n	8002d42 <StartTask03+0x76a>
//		SteDeg=rad2deg(ANGLE_VEL);
		Deg2Ste(Xbot_W,rad2deg(ANGLE_VEL));
 8002c68:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8002d50 <StartTask03+0x778>
 8002c6c:	f7fe ff34 	bl	8001ad8 <rad2deg>
 8002c70:	4603      	mov	r3, r0
 8002c72:	4619      	mov	r1, r3
 8002c74:	2001      	movs	r0, #1
 8002c76:	f7fe feff 	bl	8001a78 <Deg2Ste>
		//DataSetSteering(buf, STMotorID1, SERVO_CW, SteDeg*100, SERVO_POS, 20);
		//DataSetSteering(buf, STMotorID1, SERVO_CW, SteDeg*100, 2, 250); pre_angle = -1*SteDeg;
		DataSetSteering(buf, STMotorID1, SERVO_CW, SteDeg*100, SERVO_POS,20); pre_angle = -1*SteDeg;
 8002c7a:	4b37      	ldr	r3, [pc, #220]	; (8002d58 <StartTask03+0x780>)
 8002c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	0092      	lsls	r2, r2, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	0091      	lsls	r1, r2, #2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2214      	movs	r2, #20
 8002c98:	9201      	str	r2, [sp, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	9200      	str	r2, [sp, #0]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4830      	ldr	r0, [pc, #192]	; (8002d64 <StartTask03+0x78c>)
 8002ca4:	f000 fcb0 	bl	8003608 <DataSetSteering>
 8002ca8:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <StartTask03+0x780>)
 8002caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cae:	425b      	negs	r3, r3
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
		DataSetSteering(buf, STMotorID2, SERVO_CCW, SteDeg*100, SERVO_POS, 20);
 8002cb2:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <StartTask03+0x780>)
 8002cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	461a      	mov	r2, r3
 8002cbc:	0092      	lsls	r2, r2, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	0091      	lsls	r1, r2, #2
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2214      	movs	r2, #20
 8002cd0:	9201      	str	r2, [sp, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	9200      	str	r2, [sp, #0]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	2101      	movs	r1, #1
 8002cda:	4822      	ldr	r0, [pc, #136]	; (8002d64 <StartTask03+0x78c>)
 8002cdc:	f000 fc94 	bl	8003608 <DataSetSteering>
		DataSetSteering(buf, STMotorID3, SERVO_CCW, SteDeg*100, SERVO_POS, 20);
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <StartTask03+0x780>)
 8002ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	0092      	lsls	r2, r2, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	461a      	mov	r2, r3
 8002cf0:	0091      	lsls	r1, r2, #2
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2214      	movs	r2, #20
 8002cfe:	9201      	str	r2, [sp, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	9200      	str	r2, [sp, #0]
 8002d04:	2201      	movs	r2, #1
 8002d06:	2102      	movs	r1, #2
 8002d08:	4816      	ldr	r0, [pc, #88]	; (8002d64 <StartTask03+0x78c>)
 8002d0a:	f000 fc7d 	bl	8003608 <DataSetSteering>
		DataSetSteering(buf, STMotorID4, SERVO_CW, SteDeg*100, SERVO_POS, 20);
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <StartTask03+0x780>)
 8002d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	0092      	lsls	r2, r2, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	0091      	lsls	r1, r2, #2
 8002d20:	461a      	mov	r2, r3
 8002d22:	460b      	mov	r3, r1
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2214      	movs	r2, #20
 8002d2c:	9201      	str	r2, [sp, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	9200      	str	r2, [sp, #0]
 8002d32:	2200      	movs	r2, #0
 8002d34:	2103      	movs	r1, #3
 8002d36:	480b      	ldr	r0, [pc, #44]	; (8002d64 <StartTask03+0x78c>)
 8002d38:	f000 fc66 	bl	8003608 <DataSetSteering>
//		EndModeD = 0;
		//osDelay(10);
		printf("Mode D\n");
 8002d3c:	480e      	ldr	r0, [pc, #56]	; (8002d78 <StartTask03+0x7a0>)
 8002d3e:	f00b fccb 	bl	800e6d8 <puts>
	}
	//osDelay(10);
	ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
 8002d42:	4808      	ldr	r0, [pc, #32]	; (8002d64 <StartTask03+0x78c>)
 8002d44:	f000 fc3a 	bl	80035bc <ServoMotor_writeDMA>
	lastTime += PERIOD_STEERING;
 8002d48:	e5c1      	b.n	80028ce <StartTask03+0x2f6>
 8002d4a:	bf00      	nop
 8002d4c:	f3af 8000 	nop.w
 8002d50:	ccefcd31 	.word	0xccefcd31
 8002d54:	3fe7a426 	.word	0x3fe7a426
 8002d58:	20000bc2 	.word	0x20000bc2
 8002d5c:	08011e2c 	.word	0x08011e2c
 8002d60:	08011e40 	.word	0x08011e40
 8002d64:	20000060 	.word	0x20000060
 8002d68:	08011e64 	.word	0x08011e64
 8002d6c:	2000005c 	.word	0x2000005c
 8002d70:	08011e6c 	.word	0x08011e6c
 8002d74:	08011e78 	.word	0x08011e78
 8002d78:	08011e80 	.word	0x08011e80

08002d7c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	//StartTask04 is related ws2812b//
	uint32_t lastTime = osKernelGetTickCount();
 8002d84:	f006 fe06 	bl	8009994 <osKernelGetTickCount>
 8002d88:	60f8      	str	r0, [r7, #12]

	static int temp = 0;
	////////////////////////////////

	ws2812AllColor(70,70,70);//r, g, b
 8002d8a:	2246      	movs	r2, #70	; 0x46
 8002d8c:	2146      	movs	r1, #70	; 0x46
 8002d8e:	2046      	movs	r0, #70	; 0x46
 8002d90:	f7fe f8b4 	bl	8000efc <ws2812AllColor>
	ws2812NumOn(NUM_NPLED);
 8002d94:	201d      	movs	r0, #29
 8002d96:	f7fe f889 	bl	8000eac <ws2812NumOn>

  /* Infinite loop */
  for(;;)
  {
		lastTime += PERIOD_NP_LED;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002da0:	60fb      	str	r3, [r7, #12]
		osDelayUntil(lastTime);
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f006 ffa9 	bl	8009cfa <osDelayUntil>

		temp++;
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <StartTask04+0x54>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3301      	adds	r3, #1
 8002dae:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <StartTask04+0x54>)
 8002db0:	6013      	str	r3, [r2, #0]
		switch (temp) {
 8002db2:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <StartTask04+0x54>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d005      	beq.n	8002dc6 <StartTask04+0x4a>
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	dced      	bgt.n	8002d9a <StartTask04+0x1e>
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d003      	beq.n	8002dca <StartTask04+0x4e>
 8002dc2:	2b02      	cmp	r3, #2
				break;

			case 2:
				//printf("case2\n");
				//ws2812SetColor(7,0,0,1);//index, r, g, b
				break;
 8002dc4:	e002      	b.n	8002dcc <StartTask04+0x50>

			case 3:
				//printf("case3\n");
				//ws2812SetColor(6,0,0,1);//index, r, g, b
				break;
 8002dc6:	bf00      	nop
 8002dc8:	e7e7      	b.n	8002d9a <StartTask04+0x1e>
				break;
 8002dca:	bf00      	nop
		lastTime += PERIOD_NP_LED;
 8002dcc:	e7e5      	b.n	8002d9a <StartTask04+0x1e>
 8002dce:	bf00      	nop
 8002dd0:	20000c38 	.word	0x20000c38

08002dd4 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	uint32_t lastTime = osKernelGetTickCount();
 8002ddc:	f006 fdda 	bl	8009994 <osKernelGetTickCount>
 8002de0:	60f8      	str	r0, [r7, #12]

	fanInit();
 8002de2:	f7fe fcaf 	bl	8001744 <fanInit>


  /* Infinite loop */
  for(;;)
  {
	lastTime += PERIOD_FAN;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002dec:	60fb      	str	r3, [r7, #12]
	osDelayUntil(lastTime);
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f006 ff83 	bl	8009cfa <osDelayUntil>
	fanOn(100);
 8002df4:	2064      	movs	r0, #100	; 0x64
 8002df6:	f7fe fcaf 	bl	8001758 <fanOn>
	lastTime += PERIOD_FAN;
 8002dfa:	e7f4      	b.n	8002de6 <StartTask05+0x12>

08002dfc <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8002dfc:	b5b0      	push	{r4, r5, r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
//	uint8_t EndInit = 0;
	//uint32_t lastTime = osKernelGetTickCount();
	//osDelay(10);//for printf();
	printf("StartTask06 %d: \n", PS_SIGx_Pin);
 8002e04:	4b59      	ldr	r3, [pc, #356]	; (8002f6c <StartTask06+0x170>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4859      	ldr	r0, [pc, #356]	; (8002f70 <StartTask06+0x174>)
 8002e0c:	f00b fbde 	bl	800e5cc <iprintf>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8002e10:	200a      	movs	r0, #10
 8002e12:	f006 ff57 	bl	8009cc4 <osDelay>
	//  printf("%d: t06\n", osKernelGetTickCount());
	if(PS_SIGx_Pin&1){//1ch init
 8002e16:	4b55      	ldr	r3, [pc, #340]	; (8002f6c <StartTask06+0x170>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d01a      	beq.n	8002e58 <StartTask06+0x5c>
		PS_SIGx_Pin &= ~(1); printf(" PS_SIG1_stop.\n");
 8002e22:	4b52      	ldr	r3, [pc, #328]	; (8002f6c <StartTask06+0x170>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	4b4f      	ldr	r3, [pc, #316]	; (8002f6c <StartTask06+0x170>)
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	4850      	ldr	r0, [pc, #320]	; (8002f74 <StartTask06+0x178>)
 8002e32:	f00b fc51 	bl	800e6d8 <puts>
		EndInit |= 1;
 8002e36:	4b50      	ldr	r3, [pc, #320]	; (8002f78 <StartTask06+0x17c>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	4b4d      	ldr	r3, [pc, #308]	; (8002f78 <StartTask06+0x17c>)
 8002e42:	701a      	strb	r2, [r3, #0]
		DataSetSteering(buf, 0, SERVO_CCW, 0, 0, 30);
 8002e44:	231e      	movs	r3, #30
 8002e46:	9301      	str	r3, [sp, #4]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2201      	movs	r2, #1
 8002e50:	2100      	movs	r1, #0
 8002e52:	484a      	ldr	r0, [pc, #296]	; (8002f7c <StartTask06+0x180>)
 8002e54:	f000 fbd8 	bl	8003608 <DataSetSteering>
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
	}

	if(PS_SIGx_Pin&2){//2ch init
 8002e58:	4b44      	ldr	r3, [pc, #272]	; (8002f6c <StartTask06+0x170>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d01a      	beq.n	8002e9a <StartTask06+0x9e>
		PS_SIGx_Pin &= ~(2); printf(" PS_SIG2_stop.\n");
 8002e64:	4b41      	ldr	r3, [pc, #260]	; (8002f6c <StartTask06+0x170>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	f023 0302 	bic.w	r3, r3, #2
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <StartTask06+0x170>)
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	4843      	ldr	r0, [pc, #268]	; (8002f80 <StartTask06+0x184>)
 8002e74:	f00b fc30 	bl	800e6d8 <puts>
		DataSetSteering(buf, 1, SERVO_CCW, 0, 0, 30);
 8002e78:	231e      	movs	r3, #30
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2300      	movs	r3, #0
 8002e82:	2201      	movs	r2, #1
 8002e84:	2101      	movs	r1, #1
 8002e86:	483d      	ldr	r0, [pc, #244]	; (8002f7c <StartTask06+0x180>)
 8002e88:	f000 fbbe 	bl	8003608 <DataSetSteering>
		EndInit |= 2;
 8002e8c:	4b3a      	ldr	r3, [pc, #232]	; (8002f78 <StartTask06+0x17c>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	4b38      	ldr	r3, [pc, #224]	; (8002f78 <StartTask06+0x17c>)
 8002e98:	701a      	strb	r2, [r3, #0]
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
	}
	if(PS_SIGx_Pin&4){//3ch init
 8002e9a:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <StartTask06+0x170>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d01a      	beq.n	8002edc <StartTask06+0xe0>
		PS_SIGx_Pin &= ~(4); printf(" PS_SIG3_stop.\n");
 8002ea6:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <StartTask06+0x170>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	f023 0304 	bic.w	r3, r3, #4
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <StartTask06+0x170>)
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	4833      	ldr	r0, [pc, #204]	; (8002f84 <StartTask06+0x188>)
 8002eb6:	f00b fc0f 	bl	800e6d8 <puts>
		DataSetSteering(buf, 2, SERVO_CCW, 0, 0, 30);
 8002eba:	231e      	movs	r3, #30
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	482c      	ldr	r0, [pc, #176]	; (8002f7c <StartTask06+0x180>)
 8002eca:	f000 fb9d 	bl	8003608 <DataSetSteering>
		EndInit |= 4;
 8002ece:	4b2a      	ldr	r3, [pc, #168]	; (8002f78 <StartTask06+0x17c>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	f043 0304 	orr.w	r3, r3, #4
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <StartTask06+0x17c>)
 8002eda:	701a      	strb	r2, [r3, #0]
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
	}	if(PS_SIGx_Pin&8){//4ch init
 8002edc:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <StartTask06+0x170>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d020      	beq.n	8002f2a <StartTask06+0x12e>
		PS_SIGx_Pin &= ~(8); printf(" PS_SIG4_stop.\n");
 8002ee8:	4b20      	ldr	r3, [pc, #128]	; (8002f6c <StartTask06+0x170>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	f023 0308 	bic.w	r3, r3, #8
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <StartTask06+0x170>)
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	4824      	ldr	r0, [pc, #144]	; (8002f88 <StartTask06+0x18c>)
 8002ef8:	f00b fbee 	bl	800e6d8 <puts>
		DataSetSteering(buf, 3, SERVO_CCW, 0, 0, 30);
 8002efc:	231e      	movs	r3, #30
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	2300      	movs	r3, #0
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	2300      	movs	r3, #0
 8002f06:	2201      	movs	r2, #1
 8002f08:	2103      	movs	r1, #3
 8002f0a:	481c      	ldr	r0, [pc, #112]	; (8002f7c <StartTask06+0x180>)
 8002f0c:	f000 fb7c 	bl	8003608 <DataSetSteering>
		EndInit |= 8;
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <StartTask06+0x17c>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	f043 0308 	orr.w	r3, r3, #8
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <StartTask06+0x17c>)
 8002f1c:	701a      	strb	r2, [r3, #0]
		//ServoMotor_writeDMA(buf);//use osdelay(6)*2ea
		//for(int i=0;i<48;i++){buf[i]=0;}//clear buf
		printf("EndInit %d\n", EndInit);
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <StartTask06+0x17c>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	4619      	mov	r1, r3
 8002f24:	4819      	ldr	r0, [pc, #100]	; (8002f8c <StartTask06+0x190>)
 8002f26:	f00b fb51 	bl	800e5cc <iprintf>
	}
	if(EndInit == 15) {
 8002f2a:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <StartTask06+0x17c>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b0f      	cmp	r3, #15
 8002f30:	f47f af6e 	bne.w	8002e10 <StartTask06+0x14>

		GPIO_disableirq();
 8002f34:	f000 f98c 	bl	8003250 <GPIO_disableirq>
		STinitdone++;
 8002f38:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <StartTask06+0x194>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <StartTask06+0x194>)
 8002f42:	701a      	strb	r2, [r3, #0]
		printf("%d: EndInit == 15. %d, %d\n", osKernelGetTickCount(), osThreadFlagsWait(1, 0, osWaitForever), osThreadFlagsGet());
 8002f44:	f006 fd26 	bl	8009994 <osKernelGetTickCount>
 8002f48:	4604      	mov	r4, r0
 8002f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f4e:	2100      	movs	r1, #0
 8002f50:	2001      	movs	r0, #1
 8002f52:	f006 fe36 	bl	8009bc2 <osThreadFlagsWait>
 8002f56:	4605      	mov	r5, r0
 8002f58:	f006 fe12 	bl	8009b80 <osThreadFlagsGet>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	462a      	mov	r2, r5
 8002f60:	4621      	mov	r1, r4
 8002f62:	480c      	ldr	r0, [pc, #48]	; (8002f94 <StartTask06+0x198>)
 8002f64:	f00b fb32 	bl	800e5cc <iprintf>
	  osDelay(10);
 8002f68:	e752      	b.n	8002e10 <StartTask06+0x14>
 8002f6a:	bf00      	nop
 8002f6c:	20000bc0 	.word	0x20000bc0
 8002f70:	08011e88 	.word	0x08011e88
 8002f74:	08011e9c 	.word	0x08011e9c
 8002f78:	20000c00 	.word	0x20000c00
 8002f7c:	20000060 	.word	0x20000060
 8002f80:	08011eac 	.word	0x08011eac
 8002f84:	08011ebc 	.word	0x08011ebc
 8002f88:	08011ecc 	.word	0x08011ecc
 8002f8c:	08011edc 	.word	0x08011edc
 8002f90:	20000bc5 	.word	0x20000bc5
 8002f94:	08011ee8 	.word	0x08011ee8

08002f98 <VelStopTimerCallback>:
  /* USER CODE END StartTask06 */
}

/* VelStopTimerCallback function */
void VelStopTimerCallback(void *argument)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN VelStopTimerCallback */

	//must be check this function
	int32_t TmpFlag = Stopflagcheck(Xbot_R, 1);
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f7fe fd28 	bl	80019f8 <Stopflagcheck>
 8002fa8:	60f8      	str	r0, [r7, #12]

	printf("%d: VelStopTimer:%d %d\n", osKernelGetTickCount(),TmpFlag,Pre_Stop_flag);
 8002faa:	f006 fcf3 	bl	8009994 <osKernelGetTickCount>
 8002fae:	4601      	mov	r1, r0
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <VelStopTimerCallback+0x58>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	480f      	ldr	r0, [pc, #60]	; (8002ff4 <VelStopTimerCallback+0x5c>)
 8002fb8:	f00b fb08 	bl	800e5cc <iprintf>
	if(Pre_Stop_flag != TmpFlag){
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <VelStopTimerCallback+0x58>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d003      	beq.n	8002fce <VelStopTimerCallback+0x36>
		Pre_Stop_flag = TmpFlag;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <VelStopTimerCallback+0x58>)
 8002fca:	6013      	str	r3, [r2, #0]
	}
	else {Stopflagcheck(Xbot_W, 0);
	printf("%d: VelStop2Stop_flag: %d\n", osKernelGetTickCount(), Stop_flag);
	}
  /* USER CODE END VelStopTimerCallback */
}
 8002fcc:	e00c      	b.n	8002fe8 <VelStopTimerCallback+0x50>
	else {Stopflagcheck(Xbot_W, 0);
 8002fce:	2100      	movs	r1, #0
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f7fe fd11 	bl	80019f8 <Stopflagcheck>
	printf("%d: VelStop2Stop_flag: %d\n", osKernelGetTickCount(), Stop_flag);
 8002fd6:	f006 fcdd 	bl	8009994 <osKernelGetTickCount>
 8002fda:	4601      	mov	r1, r0
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <VelStopTimerCallback+0x60>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4806      	ldr	r0, [pc, #24]	; (8002ffc <VelStopTimerCallback+0x64>)
 8002fe4:	f00b faf2 	bl	800e5cc <iprintf>
}
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000bcc 	.word	0x20000bcc
 8002ff4:	08011f04 	.word	0x08011f04
 8002ff8:	20000bc8 	.word	0x20000bc8
 8002ffc:	08011f1c 	.word	0x08011f1c

08003000 <EndModeDTimerCallback>:

/* EndModeDTimerCallback function */
void EndModeDTimerCallback(void *argument)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EndModeDTimerCallback */
	//EndModeD = 1;
	timerflag = 1;
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <EndModeDTimerCallback+0x20>)
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
	EndMode = 1;
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <EndModeDTimerCallback+0x24>)
 8003010:	2201      	movs	r2, #1
 8003012:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EndModeDTimerCallback */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	2000005d 	.word	0x2000005d
 8003024:	2000005e 	.word	0x2000005e

08003028 <SendCanTimerCallback>:

/* SendCanTimerCallback function */
void SendCanTimerCallback(void *argument)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SendCanTimerCallback */
	//send can message by 10hz
	Vel_PDOMsg(1, TxPDO0, Tar_cmd_FL, Tar_cmd_FR);
 8003030:	4b18      	ldr	r3, [pc, #96]	; (8003094 <SendCanTimerCallback+0x6c>)
 8003032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003036:	461a      	mov	r2, r3
 8003038:	4b17      	ldr	r3, [pc, #92]	; (8003098 <SendCanTimerCallback+0x70>)
 800303a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800303e:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8003042:	2001      	movs	r0, #1
 8003044:	f7fe fa12 	bl	800146c <Vel_PDOMsg>
	Vel_PDOMsg(2, TxPDO0, Tar_cmd_RL, Tar_cmd_RR);
 8003048:	4b14      	ldr	r3, [pc, #80]	; (800309c <SendCanTimerCallback+0x74>)
 800304a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800304e:	461a      	mov	r2, r3
 8003050:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <SendCanTimerCallback+0x78>)
 8003052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003056:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800305a:	2002      	movs	r0, #2
 800305c:	f7fe fa06 	bl	800146c <Vel_PDOMsg>

	sendCan(0x7D1, sendcanbuf, 8, 0);//(uint32_t ID, uint8_t data[8], uint8_t len, uint8_t ext)
 8003060:	2300      	movs	r3, #0
 8003062:	2208      	movs	r2, #8
 8003064:	490f      	ldr	r1, [pc, #60]	; (80030a4 <SendCanTimerCallback+0x7c>)
 8003066:	f240 70d1 	movw	r0, #2001	; 0x7d1
 800306a:	f7fe f871 	bl	8001150 <sendCan>
	for(int i=0;i<8;i++){canbuf[i]=0;}
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	e007      	b.n	8003084 <SendCanTimerCallback+0x5c>
 8003074:	4a0c      	ldr	r2, [pc, #48]	; (80030a8 <SendCanTimerCallback+0x80>)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4413      	add	r3, r2
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3301      	adds	r3, #1
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b07      	cmp	r3, #7
 8003088:	ddf4      	ble.n	8003074 <SendCanTimerCallback+0x4c>
  /* USER CODE END SendCanTimerCallback */
}
 800308a:	bf00      	nop
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000be4 	.word	0x20000be4
 8003098:	20000be6 	.word	0x20000be6
 800309c:	20000be8 	.word	0x20000be8
 80030a0:	20000bea 	.word	0x20000bea
 80030a4:	20000bf4 	.word	0x20000bf4
 80030a8:	20000bec 	.word	0x20000bec

080030ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b2:	f107 0314 	add.w	r3, r7, #20
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	60da      	str	r2, [r3, #12]
 80030c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	4b5d      	ldr	r3, [pc, #372]	; (800323c <MX_GPIO_Init+0x190>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4a5c      	ldr	r2, [pc, #368]	; (800323c <MX_GPIO_Init+0x190>)
 80030cc:	f043 0304 	orr.w	r3, r3, #4
 80030d0:	6313      	str	r3, [r2, #48]	; 0x30
 80030d2:	4b5a      	ldr	r3, [pc, #360]	; (800323c <MX_GPIO_Init+0x190>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	4b56      	ldr	r3, [pc, #344]	; (800323c <MX_GPIO_Init+0x190>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a55      	ldr	r2, [pc, #340]	; (800323c <MX_GPIO_Init+0x190>)
 80030e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b53      	ldr	r3, [pc, #332]	; (800323c <MX_GPIO_Init+0x190>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	4b4f      	ldr	r3, [pc, #316]	; (800323c <MX_GPIO_Init+0x190>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	4a4e      	ldr	r2, [pc, #312]	; (800323c <MX_GPIO_Init+0x190>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6313      	str	r3, [r2, #48]	; 0x30
 800310a:	4b4c      	ldr	r3, [pc, #304]	; (800323c <MX_GPIO_Init+0x190>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	4b48      	ldr	r3, [pc, #288]	; (800323c <MX_GPIO_Init+0x190>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	4a47      	ldr	r2, [pc, #284]	; (800323c <MX_GPIO_Init+0x190>)
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	6313      	str	r3, [r2, #48]	; 0x30
 8003126:	4b45      	ldr	r3, [pc, #276]	; (800323c <MX_GPIO_Init+0x190>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	607b      	str	r3, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	603b      	str	r3, [r7, #0]
 8003136:	4b41      	ldr	r3, [pc, #260]	; (800323c <MX_GPIO_Init+0x190>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	4a40      	ldr	r2, [pc, #256]	; (800323c <MX_GPIO_Init+0x190>)
 800313c:	f043 0308 	orr.w	r3, r3, #8
 8003140:	6313      	str	r3, [r2, #48]	; 0x30
 8003142:	4b3e      	ldr	r3, [pc, #248]	; (800323c <MX_GPIO_Init+0x190>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 800314e:	2200      	movs	r2, #0
 8003150:	f64f 413e 	movw	r1, #64574	; 0xfc3e
 8003154:	483a      	ldr	r0, [pc, #232]	; (8003240 <MX_GPIO_Init+0x194>)
 8003156:	f002 ffc5 	bl	80060e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_DE_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 800315a:	2200      	movs	r2, #0
 800315c:	f244 0110 	movw	r1, #16400	; 0x4010
 8003160:	4838      	ldr	r0, [pc, #224]	; (8003244 <MX_GPIO_Init+0x198>)
 8003162:	f002 ffbf 	bl	80060e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8003166:	2200      	movs	r2, #0
 8003168:	2104      	movs	r1, #4
 800316a:	4837      	ldr	r0, [pc, #220]	; (8003248 <MX_GPIO_Init+0x19c>)
 800316c:	f002 ffba 	bl	80060e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC1
                           PC2 PC3 PC4 PC5
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = testled_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8003170:	f64f 433e 	movw	r3, #64574	; 0xfc3e
 8003174:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003176:	2301      	movs	r3, #1
 8003178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	4619      	mov	r1, r3
 8003188:	482d      	ldr	r0, [pc, #180]	; (8003240 <MX_GPIO_Init+0x194>)
 800318a:	f002 fdf7 	bl	8005d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800318e:	2301      	movs	r3, #1
 8003190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003192:	2303      	movs	r3, #3
 8003194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800319a:	f107 0314 	add.w	r3, r7, #20
 800319e:	4619      	mov	r1, r3
 80031a0:	4827      	ldr	r0, [pc, #156]	; (8003240 <MX_GPIO_Init+0x194>)
 80031a2:	f002 fdeb 	bl	8005d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PS_SIG1_Pin|PS_SIG2_Pin|PS_SIG3_Pin;
 80031a6:	2370      	movs	r3, #112	; 0x70
 80031a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80031aa:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80031ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	4619      	mov	r1, r3
 80031ba:	4824      	ldr	r0, [pc, #144]	; (800324c <MX_GPIO_Init+0x1a0>)
 80031bc:	f002 fdde 	bl	8005d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS_SIG4_Pin;
 80031c0:	2380      	movs	r3, #128	; 0x80
 80031c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80031c4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80031c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ca:	2301      	movs	r3, #1
 80031cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS_SIG4_GPIO_Port, &GPIO_InitStruct);
 80031ce:	f107 0314 	add.w	r3, r7, #20
 80031d2:	4619      	mov	r1, r3
 80031d4:	481d      	ldr	r0, [pc, #116]	; (800324c <MX_GPIO_Init+0x1a0>)
 80031d6:	f002 fdd1 	bl	8005d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB4 */
  GPIO_InitStruct.Pin = RS485_DE_Pin|GPIO_PIN_4;
 80031da:	f244 0310 	movw	r3, #16400	; 0x4010
 80031de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031e0:	2301      	movs	r3, #1
 80031e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e8:	2300      	movs	r3, #0
 80031ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	4619      	mov	r1, r3
 80031f2:	4814      	ldr	r0, [pc, #80]	; (8003244 <MX_GPIO_Init+0x198>)
 80031f4:	f002 fdc2 	bl	8005d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031f8:	2304      	movs	r3, #4
 80031fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031fc:	2301      	movs	r3, #1
 80031fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	2300      	movs	r3, #0
 8003202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003204:	2300      	movs	r3, #0
 8003206:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	4619      	mov	r1, r3
 800320e:	480e      	ldr	r0, [pc, #56]	; (8003248 <MX_GPIO_Init+0x19c>)
 8003210:	f002 fdb4 	bl	8005d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003214:	2200      	movs	r2, #0
 8003216:	2105      	movs	r1, #5
 8003218:	200a      	movs	r0, #10
 800321a:	f002 f975 	bl	8005508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800321e:	200a      	movs	r0, #10
 8003220:	f002 f98e 	bl	8005540 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003224:	2200      	movs	r2, #0
 8003226:	2105      	movs	r1, #5
 8003228:	2017      	movs	r0, #23
 800322a:	f002 f96d 	bl	8005508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800322e:	2017      	movs	r0, #23
 8003230:	f002 f986 	bl	8005540 <HAL_NVIC_EnableIRQ>

}
 8003234:	bf00      	nop
 8003236:	3728      	adds	r7, #40	; 0x28
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40023800 	.word	0x40023800
 8003240:	40020800 	.word	0x40020800
 8003244:	40020400 	.word	0x40020400
 8003248:	40020c00 	.word	0x40020c00
 800324c:	40020000 	.word	0x40020000

08003250 <GPIO_disableirq>:

/* USER CODE BEGIN 2 */
void GPIO_disableirq(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8003254:	200a      	movs	r0, #10
 8003256:	f002 f981 	bl	800555c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800325a:	2017      	movs	r0, #23
 800325c:	f002 f97e 	bl	800555c <HAL_NVIC_DisableIRQ>
}
 8003260:	bf00      	nop
 8003262:	bd80      	pop	{r7, pc}

08003264 <GPIO_enableirq>:

void GPIO_enableirq(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
	  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003268:	2200      	movs	r2, #0
 800326a:	2105      	movs	r1, #5
 800326c:	200a      	movs	r0, #10
 800326e:	f002 f94b 	bl	8005508 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003272:	200a      	movs	r0, #10
 8003274:	f002 f964 	bl	8005540 <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003278:	2200      	movs	r2, #0
 800327a:	2105      	movs	r1, #5
 800327c:	2017      	movs	r0, #23
 800327e:	f002 f943 	bl	8005508 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003282:	2017      	movs	r0, #23
 8003284:	f002 f95c 	bl	8005540 <HAL_NVIC_EnableIRQ>
}
 8003288:	bf00      	nop
 800328a:	bd80      	pop	{r7, pc}

0800328c <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8003290:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <MX_I2C1_SMBUS_Init+0x68>)
 8003292:	4a19      	ldr	r2, [pc, #100]	; (80032f8 <MX_I2C1_SMBUS_Init+0x6c>)
 8003294:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.ClockSpeed = 100000;
 8003296:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <MX_I2C1_SMBUS_Init+0x68>)
 8003298:	4a18      	ldr	r2, [pc, #96]	; (80032fc <MX_I2C1_SMBUS_Init+0x70>)
 800329a:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.OwnAddress1 = 0;
 800329c:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <MX_I2C1_SMBUS_Init+0x68>)
 800329e:	2200      	movs	r2, #0
 80032a0:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80032a2:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <MX_I2C1_SMBUS_Init+0x68>)
 80032a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032a8:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <MX_I2C1_SMBUS_Init+0x68>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80032b0:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <MX_I2C1_SMBUS_Init+0x68>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80032b6:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <MX_I2C1_SMBUS_Init+0x68>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80032bc:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <MX_I2C1_SMBUS_Init+0x68>)
 80032be:	2200      	movs	r2, #0
 80032c0:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 80032c2:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <MX_I2C1_SMBUS_Init+0x68>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <MX_I2C1_SMBUS_Init+0x68>)
 80032ca:	2202      	movs	r2, #2
 80032cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 80032ce:	4809      	ldr	r0, [pc, #36]	; (80032f4 <MX_I2C1_SMBUS_Init+0x68>)
 80032d0:	f003 fbde 	bl	8006a90 <HAL_SMBUS_Init>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <MX_I2C1_SMBUS_Init+0x52>
  {
    Error_Handler();
 80032da:	f000 f93f 	bl	800355c <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 80032de:	4805      	ldr	r0, [pc, #20]	; (80032f4 <MX_I2C1_SMBUS_Init+0x68>)
 80032e0:	f003 fc8c 	bl	8006bfc <HAL_SMBUS_EnableAlert_IT>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 80032ea:	f000 f937 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000c3c 	.word	0x20000c3c
 80032f8:	40005400 	.word	0x40005400
 80032fc:	000186a0 	.word	0x000186a0

08003300 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	611a      	str	r2, [r3, #16]
  if(smbusHandle->Instance==I2C1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a19      	ldr	r2, [pc, #100]	; (8003384 <HAL_SMBUS_MspInit+0x84>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d12b      	bne.n	800337a <HAL_SMBUS_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	4b18      	ldr	r3, [pc, #96]	; (8003388 <HAL_SMBUS_MspInit+0x88>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	4a17      	ldr	r2, [pc, #92]	; (8003388 <HAL_SMBUS_MspInit+0x88>)
 800332c:	f043 0302 	orr.w	r3, r3, #2
 8003330:	6313      	str	r3, [r2, #48]	; 0x30
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <HAL_SMBUS_MspInit+0x88>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB5     ------> I2C1_SMBA
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800333e:	23e0      	movs	r3, #224	; 0xe0
 8003340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003342:	2312      	movs	r3, #18
 8003344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334a:	2303      	movs	r3, #3
 800334c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800334e:	2304      	movs	r3, #4
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003352:	f107 0314 	add.w	r3, r7, #20
 8003356:	4619      	mov	r1, r3
 8003358:	480c      	ldr	r0, [pc, #48]	; (800338c <HAL_SMBUS_MspInit+0x8c>)
 800335a:	f002 fd0f 	bl	8005d7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <HAL_SMBUS_MspInit+0x88>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	4a08      	ldr	r2, [pc, #32]	; (8003388 <HAL_SMBUS_MspInit+0x88>)
 8003368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800336c:	6413      	str	r3, [r2, #64]	; 0x40
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_SMBUS_MspInit+0x88>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800337a:	bf00      	nop
 800337c:	3728      	adds	r7, #40	; 0x28
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40005400 	.word	0x40005400
 8003388:	40023800 	.word	0x40023800
 800338c:	40020400 	.word	0x40020400

08003390 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003398:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800339c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d013      	beq.n	80033d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80033a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80033ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80033b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00b      	beq.n	80033d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80033b8:	e000      	b.n	80033bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80033ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80033bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f9      	beq.n	80033ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80033c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80033d0:	687b      	ldr	r3, [r7, #4]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)//485 task for nuri motor must change uart port
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b086      	sub	sp, #24
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
	//HAL_UART_Transmit_DMA(&huart2, (uint8_t *)ptr, (uint16_t)len);
//	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, (uint16_t)len, 100);
//	return (len);
//
	for(int i = 0; i < len; i++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	e009      	b.n	8003404 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	60ba      	str	r2, [r7, #8]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ffc9 	bl	8003390 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	3301      	adds	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	dbf1      	blt.n	80033f0 <_write+0x12>
	}
	return len;
 800340c:	687b      	ldr	r3, [r7, #4]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800341a:	f001 f89b 	bl	8004554 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);//must be for stabilization of EXTI
 800341e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003422:	f001 f8d9 	bl	80045d8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003426:	f000 f81d 	bl	8003464 <SystemClock_Config>
  MX_TIM3_Init();
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800342a:	f7ff fe3f 	bl	80030ac <MX_GPIO_Init>
  GPIO_disableirq();
 800342e:	f7ff ff0f 	bl	8003250 <GPIO_disableirq>
  MX_CAN1_Init();
 8003432:	f7fd fdad 	bl	8000f90 <MX_CAN1_Init>
  CAN_disableirq();
 8003436:	f7fd fe31 	bl	800109c <CAN_disableirq>
  MX_TIM1_Init();
 800343a:	f000 fb43 	bl	8003ac4 <MX_TIM1_Init>
  MX_I2C1_SMBUS_Init();
 800343e:	f7ff ff25 	bl	800328c <MX_I2C1_SMBUS_Init>
  MX_DMA_Init();
 8003442:	f7fe f929 	bl	8001698 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003446:	f000 ff3f 	bl	80042c8 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800344a:	f000 ff13 	bl	8004274 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 800344e:	f000 fc67 	bl	8003d20 <MX_TIM8_Init>
  MX_TIM3_Init();
 8003452:	f000 fbe9 	bl	8003c28 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003456:	f006 fa53 	bl	8009900 <osKernelInitialize>
  MX_FREERTOS_Init();
 800345a:	f7fe fbaf 	bl	8001bbc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800345e:	f006 fa73 	bl	8009948 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003462:	e7fe      	b.n	8003462 <main+0x4c>

08003464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b094      	sub	sp, #80	; 0x50
 8003468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800346a:	f107 0320 	add.w	r3, r7, #32
 800346e:	2230      	movs	r2, #48	; 0x30
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f00a fba3 	bl	800dbbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003478:	f107 030c 	add.w	r3, r7, #12
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003488:	2300      	movs	r3, #0
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	4b28      	ldr	r3, [pc, #160]	; (8003530 <SystemClock_Config+0xcc>)
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	4a27      	ldr	r2, [pc, #156]	; (8003530 <SystemClock_Config+0xcc>)
 8003492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003496:	6413      	str	r3, [r2, #64]	; 0x40
 8003498:	4b25      	ldr	r3, [pc, #148]	; (8003530 <SystemClock_Config+0xcc>)
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034a4:	2300      	movs	r3, #0
 80034a6:	607b      	str	r3, [r7, #4]
 80034a8:	4b22      	ldr	r3, [pc, #136]	; (8003534 <SystemClock_Config+0xd0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a21      	ldr	r2, [pc, #132]	; (8003534 <SystemClock_Config+0xd0>)
 80034ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	4b1f      	ldr	r3, [pc, #124]	; (8003534 <SystemClock_Config+0xd0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034c0:	2301      	movs	r3, #1
 80034c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034ca:	2302      	movs	r3, #2
 80034cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80034d4:	2306      	movs	r3, #6
 80034d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80034d8:	23a8      	movs	r3, #168	; 0xa8
 80034da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034dc:	2302      	movs	r3, #2
 80034de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80034e0:	2304      	movs	r3, #4
 80034e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034e4:	f107 0320 	add.w	r3, r7, #32
 80034e8:	4618      	mov	r0, r3
 80034ea:	f002 fe47 	bl	800617c <HAL_RCC_OscConfig>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034f4:	f000 f832 	bl	800355c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034f8:	230f      	movs	r3, #15
 80034fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034fc:	2302      	movs	r3, #2
 80034fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003504:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003508:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800350a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800350e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003510:	f107 030c 	add.w	r3, r7, #12
 8003514:	2105      	movs	r1, #5
 8003516:	4618      	mov	r0, r3
 8003518:	f003 f8a8 	bl	800666c <HAL_RCC_ClockConfig>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003522:	f000 f81b 	bl	800355c <Error_Handler>
  }
}
 8003526:	bf00      	nop
 8003528:	3750      	adds	r7, #80	; 0x50
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	40007000 	.word	0x40007000

08003538 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a04      	ldr	r2, [pc, #16]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d101      	bne.n	800354e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800354a:	f001 f825 	bl	8004598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40001000 	.word	0x40001000

0800355c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003560:	b672      	cpsid	i
}
 8003562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003564:	e7fe      	b.n	8003564 <Error_Handler+0x8>
	...

08003568 <HAL_UART_RxCpltCallback>:
void ServoMotor_init()
{
	HAL_UART_Receive_IT(&huart3, tmp_rx, 12);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {printf("hal_rev irq: %d\n", HAL_UART_Receive_IT(&huart3, tmp_rx, 12));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a0b      	ldr	r2, [pc, #44]	; (80035a4 <HAL_UART_RxCpltCallback+0x3c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d109      	bne.n	800358e <HAL_UART_RxCpltCallback+0x26>
 800357a:	220c      	movs	r2, #12
 800357c:	490a      	ldr	r1, [pc, #40]	; (80035a8 <HAL_UART_RxCpltCallback+0x40>)
 800357e:	480b      	ldr	r0, [pc, #44]	; (80035ac <HAL_UART_RxCpltCallback+0x44>)
 8003580:	f005 f8f9 	bl	8008776 <HAL_UART_Receive_IT>
 8003584:	4603      	mov	r3, r0
 8003586:	4619      	mov	r1, r3
 8003588:	4809      	ldr	r0, [pc, #36]	; (80035b0 <HAL_UART_RxCpltCallback+0x48>)
 800358a:	f00b f81f 	bl	800e5cc <iprintf>
	}//SET INTERRUPT
	flag_rx = 1;
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <HAL_UART_RxCpltCallback+0x4c>)
 8003590:	2201      	movs	r2, #1
 8003592:	601a      	str	r2, [r3, #0]
	printf("H_URCBf\n");
 8003594:	4808      	ldr	r0, [pc, #32]	; (80035b8 <HAL_UART_RxCpltCallback+0x50>)
 8003596:	f00b f89f 	bl	800e6d8 <puts>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40004800 	.word	0x40004800
 80035a8:	20000c94 	.word	0x20000c94
 80035ac:	20000f88 	.word	0x20000f88
 80035b0:	08011f38 	.word	0x08011f38
 80035b4:	20000c90 	.word	0x20000c90
 80035b8:	08011f4c 	.word	0x08011f4c

080035bc <ServoMotor_writeDMA>:

    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
}

void ServoMotor_writeDMA(const uint8_t* str)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 80035c4:	2201      	movs	r2, #1
 80035c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035ca:	480d      	ldr	r0, [pc, #52]	; (8003600 <ServoMotor_writeDMA+0x44>)
 80035cc:	f002 fd8a 	bl	80060e4 <HAL_GPIO_WritePin>
    //osDelay(6);//because transmit_DMA
    if(HAL_UART_Transmit_DMA(&huart3,str, 48)!= HAL_OK){Error_Handler();}
 80035d0:	2230      	movs	r2, #48	; 0x30
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	480b      	ldr	r0, [pc, #44]	; (8003604 <ServoMotor_writeDMA+0x48>)
 80035d6:	f005 f8ff 	bl	80087d8 <HAL_UART_Transmit_DMA>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <ServoMotor_writeDMA+0x28>
 80035e0:	f7ff ffbc 	bl	800355c <Error_Handler>
    osDelay(6);//because transmit_DMA
 80035e4:	2006      	movs	r0, #6
 80035e6:	f006 fb6d 	bl	8009cc4 <osDelay>
    HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 80035ea:	2200      	movs	r2, #0
 80035ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035f0:	4803      	ldr	r0, [pc, #12]	; (8003600 <ServoMotor_writeDMA+0x44>)
 80035f2:	f002 fd77 	bl	80060e4 <HAL_GPIO_WritePin>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40020400 	.word	0x40020400
 8003604:	20000f88 	.word	0x20000f88

08003608 <DataSetSteering>:
    ServoMotor_write(buf);
    
}

void DataSetSteering(const uint8_t* str, uint8_t id, uint8_t direction, unsigned short position, uint8_t init, uint8_t speed)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	4608      	mov	r0, r1
 8003612:	4611      	mov	r1, r2
 8003614:	461a      	mov	r2, r3
 8003616:	4603      	mov	r3, r0
 8003618:	70fb      	strb	r3, [r7, #3]
 800361a:	460b      	mov	r3, r1
 800361c:	70bb      	strb	r3, [r7, #2]
 800361e:	4613      	mov	r3, r2
 8003620:	803b      	strh	r3, [r7, #0]
	uint8_t buf[12];

    buf[0]=0xFF;//header
 8003622:	23ff      	movs	r3, #255	; 0xff
 8003624:	723b      	strb	r3, [r7, #8]
    buf[1]=0xFE;//header
 8003626:	23fe      	movs	r3, #254	; 0xfe
 8003628:	727b      	strb	r3, [r7, #9]
    buf[2]=id;//id fixed
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	72bb      	strb	r3, [r7, #10]
    buf[3]=0x06;//length
 800362e:	2306      	movs	r3, #6
 8003630:	72fb      	strb	r3, [r7, #11]
    if(init == 2){buf[3]=0x07;}
 8003632:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003636:	2b02      	cmp	r3, #2
 8003638:	d101      	bne.n	800363e <DataSetSteering+0x36>
 800363a:	2307      	movs	r3, #7
 800363c:	72fb      	strb	r3, [r7, #11]
    buf[4]=0x00;//checksum
 800363e:	2300      	movs	r3, #0
 8003640:	733b      	strb	r3, [r7, #12]
    buf[5]=0x02 + init;//mode,  2=position control mode , 3=speed control mode
 8003642:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003646:	3302      	adds	r3, #2
 8003648:	b2db      	uxtb	r3, r3
 800364a:	737b      	strb	r3, [r7, #13]
    if(init == 2){buf[5]=0x01;}
 800364c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003650:	2b02      	cmp	r3, #2
 8003652:	d101      	bne.n	8003658 <DataSetSteering+0x50>
 8003654:	2301      	movs	r3, #1
 8003656:	737b      	strb	r3, [r7, #13]
    buf[6]=direction;//direction ccw=0x00, cw=0x01
 8003658:	78bb      	ldrb	r3, [r7, #2]
 800365a:	73bb      	strb	r3, [r7, #14]
    buf[7]=(char)(position>>8);//position
 800365c:	883b      	ldrh	r3, [r7, #0]
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	b29b      	uxth	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	73fb      	strb	r3, [r7, #15]
    buf[8]=(char)position;//position
 8003666:	883b      	ldrh	r3, [r7, #0]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	743b      	strb	r3, [r7, #16]
    printf("%d: speed0 %d\n", osKernelGetTickCount(), init);
 800366c:	f006 f992 	bl	8009994 <osKernelGetTickCount>
 8003670:	4601      	mov	r1, r0
 8003672:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003676:	461a      	mov	r2, r3
 8003678:	4827      	ldr	r0, [pc, #156]	; (8003718 <DataSetSteering+0x110>)
 800367a:	f00a ffa7 	bl	800e5cc <iprintf>
    if(init == 1){buf[9]=STOP_SPEED;buf[10]=0x00; }//stop speed 0.3s>>0.6s 220520>>0.8s 220621
 800367e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003682:	2b01      	cmp	r3, #1
 8003684:	d104      	bne.n	8003690 <DataSetSteering+0x88>
 8003686:	2303      	movs	r3, #3
 8003688:	747b      	strb	r3, [r7, #17]
 800368a:	2300      	movs	r3, #0
 800368c:	74bb      	strb	r3, [r7, #18]
 800368e:	e012      	b.n	80036b6 <DataSetSteering+0xae>
    else if(init == 0) {buf[9]=speed;buf[10]=0x00; }//speed, position second = 3s
 8003690:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	d105      	bne.n	80036a4 <DataSetSteering+0x9c>
 8003698:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800369c:	747b      	strb	r3, [r7, #17]
 800369e:	2300      	movs	r3, #0
 80036a0:	74bb      	strb	r3, [r7, #18]
 80036a2:	e008      	b.n	80036b6 <DataSetSteering+0xae>
    else if(init == 2) {buf[9]=0;buf[10]=speed; }//speed, position second = 3s
 80036a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d104      	bne.n	80036b6 <DataSetSteering+0xae>
 80036ac:	2300      	movs	r3, #0
 80036ae:	747b      	strb	r3, [r7, #17]
 80036b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80036b4:	74bb      	strb	r3, [r7, #18]
    //buf[10]=0x00;//reservation
    buf[11]=0x00;//reservation
 80036b6:	2300      	movs	r3, #0
 80036b8:	74fb      	strb	r3, [r7, #19]
    //printf("%d: DSS %d %d %d\n", osKernelGetTickCount(), speed, buf[9], buf[10]);
    //FF FE 00 06 EC 03 00 00 00 0A
    //0  1  2  3  4  5  6  7  8  9
    for(int i=2;i<SERVO_BUFLEN;i++) {checksum_val += buf[i];}//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 80036ba:	2302      	movs	r3, #2
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	e00d      	b.n	80036dc <DataSetSteering+0xd4>
 80036c0:	f107 0208 	add.w	r2, r7, #8
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	4413      	add	r3, r2
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	4b14      	ldr	r3, [pc, #80]	; (800371c <DataSetSteering+0x114>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	4413      	add	r3, r2
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4b12      	ldr	r3, [pc, #72]	; (800371c <DataSetSteering+0x114>)
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	3301      	adds	r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b0a      	cmp	r3, #10
 80036e0:	ddee      	ble.n	80036c0 <DataSetSteering+0xb8>
    buf[4]=~(checksum_val);//checksum ~(Packet 2 + Packet 3 + Packet 5 + … + Packet N) [1byte]
 80036e2:	4b0e      	ldr	r3, [pc, #56]	; (800371c <DataSetSteering+0x114>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	733b      	strb	r3, [r7, #12]
    checksum_val=0x00;//checksum
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <DataSetSteering+0x114>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]

    memcpy(str+(12*id), buf, sizeof(buf));
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	461a      	mov	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4413      	add	r3, r2
 8003702:	461c      	mov	r4, r3
 8003704:	f107 0308 	add.w	r3, r7, #8
 8003708:	cb07      	ldmia	r3!, {r0, r1, r2}
 800370a:	6020      	str	r0, [r4, #0]
 800370c:	6061      	str	r1, [r4, #4]
 800370e:	60a2      	str	r2, [r4, #8]

}
 8003710:	bf00      	nop
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	bd90      	pop	{r4, r7, pc}
 8003718:	08011f54 	.word	0x08011f54
 800371c:	20000c8c 	.word	0x20000c8c

08003720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <HAL_MspInit+0x54>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	4a11      	ldr	r2, [pc, #68]	; (8003774 <HAL_MspInit+0x54>)
 8003730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003734:	6453      	str	r3, [r2, #68]	; 0x44
 8003736:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <HAL_MspInit+0x54>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_MspInit+0x54>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <HAL_MspInit+0x54>)
 800374c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003750:	6413      	str	r3, [r2, #64]	; 0x40
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_MspInit+0x54>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800375e:	2200      	movs	r2, #0
 8003760:	210f      	movs	r1, #15
 8003762:	f06f 0001 	mvn.w	r0, #1
 8003766:	f001 fecf 	bl	8005508 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800

08003778 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08c      	sub	sp, #48	; 0x30
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003788:	2200      	movs	r2, #0
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	2036      	movs	r0, #54	; 0x36
 800378e:	f001 febb 	bl	8005508 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003792:	2036      	movs	r0, #54	; 0x36
 8003794:	f001 fed4 	bl	8005540 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	4b1f      	ldr	r3, [pc, #124]	; (800381c <HAL_InitTick+0xa4>)
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	4a1e      	ldr	r2, [pc, #120]	; (800381c <HAL_InitTick+0xa4>)
 80037a2:	f043 0310 	orr.w	r3, r3, #16
 80037a6:	6413      	str	r3, [r2, #64]	; 0x40
 80037a8:	4b1c      	ldr	r3, [pc, #112]	; (800381c <HAL_InitTick+0xa4>)
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037b4:	f107 0210 	add.w	r2, r7, #16
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	4611      	mov	r1, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f003 f934 	bl	8006a2c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80037c4:	f003 f90a 	bl	80069dc <HAL_RCC_GetPCLK1Freq>
 80037c8:	4603      	mov	r3, r0
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d0:	4a13      	ldr	r2, [pc, #76]	; (8003820 <HAL_InitTick+0xa8>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	0c9b      	lsrs	r3, r3, #18
 80037d8:	3b01      	subs	r3, #1
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <HAL_InitTick+0xac>)
 80037de:	4a12      	ldr	r2, [pc, #72]	; (8003828 <HAL_InitTick+0xb0>)
 80037e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80037e2:	4b10      	ldr	r3, [pc, #64]	; (8003824 <HAL_InitTick+0xac>)
 80037e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037e8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037ea:	4a0e      	ldr	r2, [pc, #56]	; (8003824 <HAL_InitTick+0xac>)
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <HAL_InitTick+0xac>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037f6:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <HAL_InitTick+0xac>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80037fc:	4809      	ldr	r0, [pc, #36]	; (8003824 <HAL_InitTick+0xac>)
 80037fe:	f003 fa1d 	bl	8006c3c <HAL_TIM_Base_Init>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d104      	bne.n	8003812 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003808:	4806      	ldr	r0, [pc, #24]	; (8003824 <HAL_InitTick+0xac>)
 800380a:	f003 fa67 	bl	8006cdc <HAL_TIM_Base_Start_IT>
 800380e:	4603      	mov	r3, r0
 8003810:	e000      	b.n	8003814 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
}
 8003814:	4618      	mov	r0, r3
 8003816:	3730      	adds	r7, #48	; 0x30
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40023800 	.word	0x40023800
 8003820:	431bde83 	.word	0x431bde83
 8003824:	20000ca0 	.word	0x20000ca0
 8003828:	40001000 	.word	0x40001000

0800382c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003830:	e7fe      	b.n	8003830 <NMI_Handler+0x4>

08003832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003832:	b480      	push	{r7}
 8003834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003836:	e7fe      	b.n	8003836 <HardFault_Handler+0x4>

08003838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800383c:	e7fe      	b.n	800383c <MemManage_Handler+0x4>

0800383e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800383e:	b480      	push	{r7}
 8003840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003842:	e7fe      	b.n	8003842 <BusFault_Handler+0x4>

08003844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003848:	e7fe      	b.n	8003848 <UsageFault_Handler+0x4>

0800384a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800384a:	b480      	push	{r7}
 800384c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG1_Pin);
 800385c:	2010      	movs	r0, #16
 800385e:	f002 fc75 	bl	800614c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800386c:	4802      	ldr	r0, [pc, #8]	; (8003878 <DMA1_Stream3_IRQHandler+0x10>)
 800386e:	f002 f81b 	bl	80058a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	2000102c 	.word	0x2000102c

0800387c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <DMA1_Stream6_IRQHandler+0x10>)
 8003882:	f002 f811 	bl	80058a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20000fcc 	.word	0x20000fcc

08003890 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003894:	4802      	ldr	r0, [pc, #8]	; (80038a0 <CAN1_RX0_IRQHandler+0x10>)
 8003896:	f001 fb2b 	bl	8004ef0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000b98 	.word	0x20000b98

080038a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_SIG2_Pin);
 80038a8:	2020      	movs	r0, #32
 80038aa:	f002 fc4f 	bl	800614c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG3_Pin);
 80038ae:	2040      	movs	r0, #64	; 0x40
 80038b0:	f002 fc4c 	bl	800614c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PS_SIG4_Pin);
 80038b4:	2080      	movs	r0, #128	; 0x80
 80038b6:	f002 fc49 	bl	800614c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038c4:	4802      	ldr	r0, [pc, #8]	; (80038d0 <USART2_IRQHandler+0x10>)
 80038c6:	f005 f805 	bl	80088d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000f44 	.word	0x20000f44

080038d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80038d8:	4802      	ldr	r0, [pc, #8]	; (80038e4 <USART3_IRQHandler+0x10>)
 80038da:	f004 fffb 	bl	80088d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000f88 	.word	0x20000f88

080038e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80038ec:	4802      	ldr	r0, [pc, #8]	; (80038f8 <TIM6_DAC_IRQHandler+0x10>)
 80038ee:	f003 fd9e 	bl	800742e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000ca0 	.word	0x20000ca0

080038fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8003900:	4802      	ldr	r0, [pc, #8]	; (800390c <DMA2_Stream2_IRQHandler+0x10>)
 8003902:	f001 ffd1 	bl	80058a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000dc4 	.word	0x20000dc4

08003910 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8003914:	4802      	ldr	r0, [pc, #8]	; (8003920 <DMA2_Stream3_IRQHandler+0x10>)
 8003916:	f001 ffc7 	bl	80058a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000e24 	.word	0x20000e24

08003924 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 8003928:	4802      	ldr	r0, [pc, #8]	; (8003934 <DMA2_Stream4_IRQHandler+0x10>)
 800392a:	f001 ffbd 	bl	80058a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000e84 	.word	0x20000e84

08003938 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4_trig_com);
 800393c:	4802      	ldr	r0, [pc, #8]	; (8003948 <DMA2_Stream7_IRQHandler+0x10>)
 800393e:	f001 ffb3 	bl	80058a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003942:	bf00      	nop
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20000ee4 	.word	0x20000ee4

0800394c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
	return 1;
 8003950:	2301      	movs	r3, #1
}
 8003952:	4618      	mov	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <_kill>:

int _kill(int pid, int sig)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003966:	f009 fff9 	bl	800d95c <__errno>
 800396a:	4603      	mov	r3, r0
 800396c:	2216      	movs	r2, #22
 800396e:	601a      	str	r2, [r3, #0]
	return -1;
 8003970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <_exit>:

void _exit (int status)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003984:	f04f 31ff 	mov.w	r1, #4294967295
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ffe7 	bl	800395c <_kill>
	while (1) {}		/* Make sure we hang here */
 800398e:	e7fe      	b.n	800398e <_exit+0x12>

08003990 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	e00a      	b.n	80039b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80039a2:	f3af 8000 	nop.w
 80039a6:	4601      	mov	r1, r0
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	60ba      	str	r2, [r7, #8]
 80039ae:	b2ca      	uxtb	r2, r1
 80039b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	3301      	adds	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	dbf0      	blt.n	80039a2 <_read+0x12>
	}

return len;
 80039c0:	687b      	ldr	r3, [r7, #4]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
	return -1;
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039f2:	605a      	str	r2, [r3, #4]
	return 0;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <_isatty>:

int _isatty(int file)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
	return 1;
 8003a0a:	2301      	movs	r3, #1
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
	return 0;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <_sbrk+0x5c>)
 8003a3e:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <_sbrk+0x60>)
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <_sbrk+0x64>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <_sbrk+0x64>)
 8003a52:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <_sbrk+0x68>)
 8003a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <_sbrk+0x64>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d207      	bcs.n	8003a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a64:	f009 ff7a 	bl	800d95c <__errno>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a72:	e009      	b.n	8003a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <_sbrk+0x64>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <_sbrk+0x64>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <_sbrk+0x64>)
 8003a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a86:	68fb      	ldr	r3, [r7, #12]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20020000 	.word	0x20020000
 8003a94:	00000400 	.word	0x00000400
 8003a98:	20000ce8 	.word	0x20000ce8
 8003a9c:	20005ab0 	.word	0x20005ab0

08003aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <SystemInit+0x20>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	4a05      	ldr	r2, [pc, #20]	; (8003ac0 <SystemInit+0x20>)
 8003aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ab4:	bf00      	nop
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim8_ch3;
DMA_HandleTypeDef hdma_tim8_ch4_trig_com;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b096      	sub	sp, #88	; 0x58
 8003ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ad4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	605a      	str	r2, [r3, #4]
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	60da      	str	r2, [r3, #12]
 8003ae2:	611a      	str	r2, [r3, #16]
 8003ae4:	615a      	str	r2, [r3, #20]
 8003ae6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003af6:	1d3b      	adds	r3, r7, #4
 8003af8:	2220      	movs	r2, #32
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f00a f85e 	bl	800dbbe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b02:	4b47      	ldr	r3, [pc, #284]	; (8003c20 <MX_TIM1_Init+0x15c>)
 8003b04:	4a47      	ldr	r2, [pc, #284]	; (8003c24 <MX_TIM1_Init+0x160>)
 8003b06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680-1;
 8003b08:	4b45      	ldr	r3, [pc, #276]	; (8003c20 <MX_TIM1_Init+0x15c>)
 8003b0a:	f240 628f 	movw	r2, #1679	; 0x68f
 8003b0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b10:	4b43      	ldr	r3, [pc, #268]	; (8003c20 <MX_TIM1_Init+0x15c>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8003b16:	4b42      	ldr	r3, [pc, #264]	; (8003c20 <MX_TIM1_Init+0x15c>)
 8003b18:	2263      	movs	r2, #99	; 0x63
 8003b1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b1c:	4b40      	ldr	r3, [pc, #256]	; (8003c20 <MX_TIM1_Init+0x15c>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b22:	4b3f      	ldr	r3, [pc, #252]	; (8003c20 <MX_TIM1_Init+0x15c>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b28:	4b3d      	ldr	r3, [pc, #244]	; (8003c20 <MX_TIM1_Init+0x15c>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003b2e:	483c      	ldr	r0, [pc, #240]	; (8003c20 <MX_TIM1_Init+0x15c>)
 8003b30:	f003 f944 	bl	8006dbc <HAL_TIM_PWM_Init>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003b3a:	f7ff fd0f 	bl	800355c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003b3e:	4838      	ldr	r0, [pc, #224]	; (8003c20 <MX_TIM1_Init+0x15c>)
 8003b40:	f003 fc1c 	bl	800737c <HAL_TIM_IC_Init>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003b4a:	f7ff fd07 	bl	800355c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4830      	ldr	r0, [pc, #192]	; (8003c20 <MX_TIM1_Init+0x15c>)
 8003b5e:	f004 fcdb 	bl	8008518 <HAL_TIMEx_MasterConfigSynchronization>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003b68:	f7ff fcf8 	bl	800355c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b6c:	2360      	movs	r3, #96	; 0x60
 8003b6e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b74:	2300      	movs	r3, #0
 8003b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b80:	2300      	movs	r3, #0
 8003b82:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b84:	2300      	movs	r3, #0
 8003b86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4823      	ldr	r0, [pc, #140]	; (8003c20 <MX_TIM1_Init+0x15c>)
 8003b92:	f003 fdf1 	bl	8007778 <HAL_TIM_PWM_ConfigChannel>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003b9c:	f7ff fcde 	bl	800355c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4819      	ldr	r0, [pc, #100]	; (8003c20 <MX_TIM1_Init+0x15c>)
 8003bba:	f003 fd40 	bl	800763e <HAL_TIM_IC_ConfigChannel>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8003bc4:	f7ff fcca 	bl	800355c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bcc:	2208      	movs	r2, #8
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4813      	ldr	r0, [pc, #76]	; (8003c20 <MX_TIM1_Init+0x15c>)
 8003bd2:	f003 fd34 	bl	800763e <HAL_TIM_IC_ConfigChannel>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8003bdc:	f7ff fcbe 	bl	800355c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003be0:	2300      	movs	r3, #0
 8003be2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bf8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003bfe:	1d3b      	adds	r3, r7, #4
 8003c00:	4619      	mov	r1, r3
 8003c02:	4807      	ldr	r0, [pc, #28]	; (8003c20 <MX_TIM1_Init+0x15c>)
 8003c04:	f004 fd04 	bl	8008610 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8003c0e:	f7ff fca5 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003c12:	4803      	ldr	r0, [pc, #12]	; (8003c20 <MX_TIM1_Init+0x15c>)
 8003c14:	f000 faca 	bl	80041ac <HAL_TIM_MspPostInit>

}
 8003c18:	bf00      	nop
 8003c1a:	3758      	adds	r7, #88	; 0x58
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000cec 	.word	0x20000cec
 8003c24:	40010000 	.word	0x40010000

08003c28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	; 0x28
 8003c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c2e:	f107 0318 	add.w	r3, r7, #24
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	609a      	str	r2, [r3, #8]
 8003c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c3c:	f107 0310 	add.w	r3, r7, #16
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003c46:	463b      	mov	r3, r7
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c52:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <MX_TIM3_Init+0xf0>)
 8003c54:	4a31      	ldr	r2, [pc, #196]	; (8003d1c <MX_TIM3_Init+0xf4>)
 8003c56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003c58:	4b2f      	ldr	r3, [pc, #188]	; (8003d18 <MX_TIM3_Init+0xf0>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c5e:	4b2e      	ldr	r3, [pc, #184]	; (8003d18 <MX_TIM3_Init+0xf0>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003c64:	4b2c      	ldr	r3, [pc, #176]	; (8003d18 <MX_TIM3_Init+0xf0>)
 8003c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c6c:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <MX_TIM3_Init+0xf0>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c72:	4b29      	ldr	r3, [pc, #164]	; (8003d18 <MX_TIM3_Init+0xf0>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003c78:	4827      	ldr	r0, [pc, #156]	; (8003d18 <MX_TIM3_Init+0xf0>)
 8003c7a:	f002 ffdf 	bl	8006c3c <HAL_TIM_Base_Init>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8003c84:	f7ff fc6a 	bl	800355c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c8c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003c8e:	f107 0318 	add.w	r3, r7, #24
 8003c92:	4619      	mov	r1, r3
 8003c94:	4820      	ldr	r0, [pc, #128]	; (8003d18 <MX_TIM3_Init+0xf0>)
 8003c96:	f003 fe31 	bl	80078fc <HAL_TIM_ConfigClockSource>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003ca0:	f7ff fc5c 	bl	800355c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003ca4:	481c      	ldr	r0, [pc, #112]	; (8003d18 <MX_TIM3_Init+0xf0>)
 8003ca6:	f003 fb69 	bl	800737c <HAL_TIM_IC_Init>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003cb0:	f7ff fc54 	bl	800355c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003cbc:	f107 0310 	add.w	r3, r7, #16
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4815      	ldr	r0, [pc, #84]	; (8003d18 <MX_TIM3_Init+0xf0>)
 8003cc4:	f004 fc28 	bl	8008518 <HAL_TIMEx_MasterConfigSynchronization>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8003cce:	f7ff fc45 	bl	800355c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003ce2:	463b      	mov	r3, r7
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	480b      	ldr	r0, [pc, #44]	; (8003d18 <MX_TIM3_Init+0xf0>)
 8003cea:	f003 fca8 	bl	800763e <HAL_TIM_IC_ConfigChannel>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8003cf4:	f7ff fc32 	bl	800355c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003cf8:	463b      	mov	r3, r7
 8003cfa:	220c      	movs	r2, #12
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4806      	ldr	r0, [pc, #24]	; (8003d18 <MX_TIM3_Init+0xf0>)
 8003d00:	f003 fc9d 	bl	800763e <HAL_TIM_IC_ConfigChannel>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8003d0a:	f7ff fc27 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003d0e:	bf00      	nop
 8003d10:	3728      	adds	r7, #40	; 0x28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000d34 	.word	0x20000d34
 8003d1c:	40000400 	.word	0x40000400

08003d20 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b096      	sub	sp, #88	; 0x58
 8003d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	609a      	str	r2, [r3, #8]
 8003d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	605a      	str	r2, [r3, #4]
 8003d48:	609a      	str	r2, [r3, #8]
 8003d4a:	60da      	str	r2, [r3, #12]
 8003d4c:	611a      	str	r2, [r3, #16]
 8003d4e:	615a      	str	r2, [r3, #20]
 8003d50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d52:	1d3b      	adds	r3, r7, #4
 8003d54:	2220      	movs	r2, #32
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f009 ff30 	bl	800dbbe <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003d5e:	4b50      	ldr	r3, [pc, #320]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003d60:	4a50      	ldr	r2, [pc, #320]	; (8003ea4 <MX_TIM8_Init+0x184>)
 8003d62:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 8003d64:	4b4e      	ldr	r3, [pc, #312]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d6a:	4b4d      	ldr	r3, [pc, #308]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 104;
 8003d70:	4b4b      	ldr	r3, [pc, #300]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003d72:	2268      	movs	r2, #104	; 0x68
 8003d74:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d76:	4b4a      	ldr	r3, [pc, #296]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003d7c:	4b48      	ldr	r3, [pc, #288]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d82:	4b47      	ldr	r3, [pc, #284]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003d88:	4845      	ldr	r0, [pc, #276]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003d8a:	f002 ff57 	bl	8006c3c <HAL_TIM_Base_Init>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8003d94:	f7ff fbe2 	bl	800355c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003d9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003da2:	4619      	mov	r1, r3
 8003da4:	483e      	ldr	r0, [pc, #248]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003da6:	f003 fda9 	bl	80078fc <HAL_TIM_ConfigClockSource>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8003db0:	f7ff fbd4 	bl	800355c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003db4:	483a      	ldr	r0, [pc, #232]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003db6:	f003 f801 	bl	8006dbc <HAL_TIM_PWM_Init>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003dc0:	f7ff fbcc 	bl	800355c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003dcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4833      	ldr	r0, [pc, #204]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003dd4:	f004 fba0 	bl	8008518 <HAL_TIMEx_MasterConfigSynchronization>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8003dde:	f7ff fbbd 	bl	800355c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003de2:	2360      	movs	r3, #96	; 0x60
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dea:	2300      	movs	r3, #0
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003dee:	2300      	movs	r3, #0
 8003df0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e02:	2200      	movs	r2, #0
 8003e04:	4619      	mov	r1, r3
 8003e06:	4826      	ldr	r0, [pc, #152]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003e08:	f003 fcb6 	bl	8007778 <HAL_TIM_PWM_ConfigChannel>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8003e12:	f7ff fba3 	bl	800355c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4820      	ldr	r0, [pc, #128]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003e20:	f003 fcaa 	bl	8007778 <HAL_TIM_PWM_ConfigChannel>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8003e2a:	f7ff fb97 	bl	800355c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e32:	2208      	movs	r2, #8
 8003e34:	4619      	mov	r1, r3
 8003e36:	481a      	ldr	r0, [pc, #104]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003e38:	f003 fc9e 	bl	8007778 <HAL_TIM_PWM_ConfigChannel>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8003e42:	f7ff fb8b 	bl	800355c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e4a:	220c      	movs	r2, #12
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4814      	ldr	r0, [pc, #80]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003e50:	f003 fc92 	bl	8007778 <HAL_TIM_PWM_ConfigChannel>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8003e5a:	f7ff fb7f 	bl	800355c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003e7c:	1d3b      	adds	r3, r7, #4
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4807      	ldr	r0, [pc, #28]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003e82:	f004 fbc5 	bl	8008610 <HAL_TIMEx_ConfigBreakDeadTime>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8003e8c:	f7ff fb66 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003e90:	4803      	ldr	r0, [pc, #12]	; (8003ea0 <MX_TIM8_Init+0x180>)
 8003e92:	f000 f98b 	bl	80041ac <HAL_TIM_MspPostInit>

}
 8003e96:	bf00      	nop
 8003e98:	3758      	adds	r7, #88	; 0x58
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000d7c 	.word	0x20000d7c
 8003ea4:	40010400 	.word	0x40010400

08003ea8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	; 0x28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb0:	f107 0314 	add.w	r3, r7, #20
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	60da      	str	r2, [r3, #12]
 8003ebe:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a19      	ldr	r2, [pc, #100]	; (8003f2c <HAL_TIM_PWM_MspInit+0x84>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d12c      	bne.n	8003f24 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003eca:	2300      	movs	r3, #0
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <HAL_TIM_PWM_MspInit+0x88>)
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <HAL_TIM_PWM_MspInit+0x88>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <HAL_TIM_PWM_MspInit+0x88>)
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <HAL_TIM_PWM_MspInit+0x88>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	4a10      	ldr	r2, [pc, #64]	; (8003f30 <HAL_TIM_PWM_MspInit+0x88>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <HAL_TIM_PWM_MspInit+0x88>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003f02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f10:	2300      	movs	r3, #0
 8003f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f14:	2301      	movs	r3, #1
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f18:	f107 0314 	add.w	r3, r7, #20
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4805      	ldr	r0, [pc, #20]	; (8003f34 <HAL_TIM_PWM_MspInit+0x8c>)
 8003f20:	f001 ff2c 	bl	8005d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003f24:	bf00      	nop
 8003f26:	3728      	adds	r7, #40	; 0x28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40020000 	.word	0x40020000

08003f38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	; 0x28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f40:	f107 0314 	add.w	r3, r7, #20
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a89      	ldr	r2, [pc, #548]	; (800417c <HAL_TIM_Base_MspInit+0x244>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d12c      	bne.n	8003fb4 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	4b88      	ldr	r3, [pc, #544]	; (8004180 <HAL_TIM_Base_MspInit+0x248>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	4a87      	ldr	r2, [pc, #540]	; (8004180 <HAL_TIM_Base_MspInit+0x248>)
 8003f64:	f043 0302 	orr.w	r3, r3, #2
 8003f68:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6a:	4b85      	ldr	r3, [pc, #532]	; (8004180 <HAL_TIM_Base_MspInit+0x248>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	613b      	str	r3, [r7, #16]
 8003f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	4b81      	ldr	r3, [pc, #516]	; (8004180 <HAL_TIM_Base_MspInit+0x248>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	4a80      	ldr	r2, [pc, #512]	; (8004180 <HAL_TIM_Base_MspInit+0x248>)
 8003f80:	f043 0302 	orr.w	r3, r3, #2
 8003f84:	6313      	str	r3, [r2, #48]	; 0x30
 8003f86:	4b7e      	ldr	r3, [pc, #504]	; (8004180 <HAL_TIM_Base_MspInit+0x248>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f92:	2303      	movs	r3, #3
 8003f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f96:	2302      	movs	r3, #2
 8003f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa6:	f107 0314 	add.w	r3, r7, #20
 8003faa:	4619      	mov	r1, r3
 8003fac:	4875      	ldr	r0, [pc, #468]	; (8004184 <HAL_TIM_Base_MspInit+0x24c>)
 8003fae:	f001 fee5 	bl	8005d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003fb2:	e0df      	b.n	8004174 <HAL_TIM_Base_MspInit+0x23c>
  else if(tim_baseHandle->Instance==TIM8)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a73      	ldr	r2, [pc, #460]	; (8004188 <HAL_TIM_Base_MspInit+0x250>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	f040 80da 	bne.w	8004174 <HAL_TIM_Base_MspInit+0x23c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	4b6e      	ldr	r3, [pc, #440]	; (8004180 <HAL_TIM_Base_MspInit+0x248>)
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc8:	4a6d      	ldr	r2, [pc, #436]	; (8004180 <HAL_TIM_Base_MspInit+0x248>)
 8003fca:	f043 0302 	orr.w	r3, r3, #2
 8003fce:	6453      	str	r3, [r2, #68]	; 0x44
 8003fd0:	4b6b      	ldr	r3, [pc, #428]	; (8004180 <HAL_TIM_Base_MspInit+0x248>)
 8003fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 8003fdc:	4b6b      	ldr	r3, [pc, #428]	; (800418c <HAL_TIM_Base_MspInit+0x254>)
 8003fde:	4a6c      	ldr	r2, [pc, #432]	; (8004190 <HAL_TIM_Base_MspInit+0x258>)
 8003fe0:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 8003fe2:	4b6a      	ldr	r3, [pc, #424]	; (800418c <HAL_TIM_Base_MspInit+0x254>)
 8003fe4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003fe8:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fea:	4b68      	ldr	r3, [pc, #416]	; (800418c <HAL_TIM_Base_MspInit+0x254>)
 8003fec:	2240      	movs	r2, #64	; 0x40
 8003fee:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ff0:	4b66      	ldr	r3, [pc, #408]	; (800418c <HAL_TIM_Base_MspInit+0x254>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003ff6:	4b65      	ldr	r3, [pc, #404]	; (800418c <HAL_TIM_Base_MspInit+0x254>)
 8003ff8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ffc:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ffe:	4b63      	ldr	r3, [pc, #396]	; (800418c <HAL_TIM_Base_MspInit+0x254>)
 8004000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004004:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004006:	4b61      	ldr	r3, [pc, #388]	; (800418c <HAL_TIM_Base_MspInit+0x254>)
 8004008:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800400c:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 800400e:	4b5f      	ldr	r3, [pc, #380]	; (800418c <HAL_TIM_Base_MspInit+0x254>)
 8004010:	2200      	movs	r2, #0
 8004012:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004014:	4b5d      	ldr	r3, [pc, #372]	; (800418c <HAL_TIM_Base_MspInit+0x254>)
 8004016:	2200      	movs	r2, #0
 8004018:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800401a:	4b5c      	ldr	r3, [pc, #368]	; (800418c <HAL_TIM_Base_MspInit+0x254>)
 800401c:	2200      	movs	r2, #0
 800401e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8004020:	485a      	ldr	r0, [pc, #360]	; (800418c <HAL_TIM_Base_MspInit+0x254>)
 8004022:	f001 faa9 	bl	8005578 <HAL_DMA_Init>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <HAL_TIM_Base_MspInit+0xf8>
      Error_Handler();
 800402c:	f7ff fa96 	bl	800355c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a56      	ldr	r2, [pc, #344]	; (800418c <HAL_TIM_Base_MspInit+0x254>)
 8004034:	625a      	str	r2, [r3, #36]	; 0x24
 8004036:	4a55      	ldr	r2, [pc, #340]	; (800418c <HAL_TIM_Base_MspInit+0x254>)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim8_ch2.Instance = DMA2_Stream3;
 800403c:	4b55      	ldr	r3, [pc, #340]	; (8004194 <HAL_TIM_Base_MspInit+0x25c>)
 800403e:	4a56      	ldr	r2, [pc, #344]	; (8004198 <HAL_TIM_Base_MspInit+0x260>)
 8004040:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Channel = DMA_CHANNEL_7;
 8004042:	4b54      	ldr	r3, [pc, #336]	; (8004194 <HAL_TIM_Base_MspInit+0x25c>)
 8004044:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8004048:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800404a:	4b52      	ldr	r3, [pc, #328]	; (8004194 <HAL_TIM_Base_MspInit+0x25c>)
 800404c:	2240      	movs	r2, #64	; 0x40
 800404e:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004050:	4b50      	ldr	r3, [pc, #320]	; (8004194 <HAL_TIM_Base_MspInit+0x25c>)
 8004052:	2200      	movs	r2, #0
 8004054:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004056:	4b4f      	ldr	r3, [pc, #316]	; (8004194 <HAL_TIM_Base_MspInit+0x25c>)
 8004058:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800405c:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800405e:	4b4d      	ldr	r3, [pc, #308]	; (8004194 <HAL_TIM_Base_MspInit+0x25c>)
 8004060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004064:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004066:	4b4b      	ldr	r3, [pc, #300]	; (8004194 <HAL_TIM_Base_MspInit+0x25c>)
 8004068:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800406c:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 800406e:	4b49      	ldr	r3, [pc, #292]	; (8004194 <HAL_TIM_Base_MspInit+0x25c>)
 8004070:	2200      	movs	r2, #0
 8004072:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8004074:	4b47      	ldr	r3, [pc, #284]	; (8004194 <HAL_TIM_Base_MspInit+0x25c>)
 8004076:	2200      	movs	r2, #0
 8004078:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800407a:	4b46      	ldr	r3, [pc, #280]	; (8004194 <HAL_TIM_Base_MspInit+0x25c>)
 800407c:	2200      	movs	r2, #0
 800407e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8004080:	4844      	ldr	r0, [pc, #272]	; (8004194 <HAL_TIM_Base_MspInit+0x25c>)
 8004082:	f001 fa79 	bl	8005578 <HAL_DMA_Init>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_TIM_Base_MspInit+0x158>
      Error_Handler();
 800408c:	f7ff fa66 	bl	800355c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a40      	ldr	r2, [pc, #256]	; (8004194 <HAL_TIM_Base_MspInit+0x25c>)
 8004094:	629a      	str	r2, [r3, #40]	; 0x28
 8004096:	4a3f      	ldr	r2, [pc, #252]	; (8004194 <HAL_TIM_Base_MspInit+0x25c>)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim8_ch3.Instance = DMA2_Stream4;
 800409c:	4b3f      	ldr	r3, [pc, #252]	; (800419c <HAL_TIM_Base_MspInit+0x264>)
 800409e:	4a40      	ldr	r2, [pc, #256]	; (80041a0 <HAL_TIM_Base_MspInit+0x268>)
 80040a0:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Channel = DMA_CHANNEL_7;
 80040a2:	4b3e      	ldr	r3, [pc, #248]	; (800419c <HAL_TIM_Base_MspInit+0x264>)
 80040a4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80040a8:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040aa:	4b3c      	ldr	r3, [pc, #240]	; (800419c <HAL_TIM_Base_MspInit+0x264>)
 80040ac:	2240      	movs	r2, #64	; 0x40
 80040ae:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80040b0:	4b3a      	ldr	r3, [pc, #232]	; (800419c <HAL_TIM_Base_MspInit+0x264>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80040b6:	4b39      	ldr	r3, [pc, #228]	; (800419c <HAL_TIM_Base_MspInit+0x264>)
 80040b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040bc:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80040be:	4b37      	ldr	r3, [pc, #220]	; (800419c <HAL_TIM_Base_MspInit+0x264>)
 80040c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040c4:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80040c6:	4b35      	ldr	r3, [pc, #212]	; (800419c <HAL_TIM_Base_MspInit+0x264>)
 80040c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040cc:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_NORMAL;
 80040ce:	4b33      	ldr	r3, [pc, #204]	; (800419c <HAL_TIM_Base_MspInit+0x264>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80040d4:	4b31      	ldr	r3, [pc, #196]	; (800419c <HAL_TIM_Base_MspInit+0x264>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040da:	4b30      	ldr	r3, [pc, #192]	; (800419c <HAL_TIM_Base_MspInit+0x264>)
 80040dc:	2200      	movs	r2, #0
 80040de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 80040e0:	482e      	ldr	r0, [pc, #184]	; (800419c <HAL_TIM_Base_MspInit+0x264>)
 80040e2:	f001 fa49 	bl	8005578 <HAL_DMA_Init>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_TIM_Base_MspInit+0x1b8>
      Error_Handler();
 80040ec:	f7ff fa36 	bl	800355c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a2a      	ldr	r2, [pc, #168]	; (800419c <HAL_TIM_Base_MspInit+0x264>)
 80040f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80040f6:	4a29      	ldr	r2, [pc, #164]	; (800419c <HAL_TIM_Base_MspInit+0x264>)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim8_ch4_trig_com.Instance = DMA2_Stream7;
 80040fc:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 80040fe:	4a2a      	ldr	r2, [pc, #168]	; (80041a8 <HAL_TIM_Base_MspInit+0x270>)
 8004100:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4_trig_com.Init.Channel = DMA_CHANNEL_7;
 8004102:	4b28      	ldr	r3, [pc, #160]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 8004104:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8004108:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800410a:	4b26      	ldr	r3, [pc, #152]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 800410c:	2240      	movs	r2, #64	; 0x40
 800410e:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8004110:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 8004112:	2200      	movs	r2, #0
 8004114:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8004116:	4b23      	ldr	r3, [pc, #140]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 8004118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800411c:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800411e:	4b21      	ldr	r3, [pc, #132]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 8004120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004124:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004126:	4b1f      	ldr	r3, [pc, #124]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 8004128:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800412c:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4_trig_com.Init.Mode = DMA_NORMAL;
 800412e:	4b1d      	ldr	r3, [pc, #116]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 8004130:	2200      	movs	r2, #0
 8004132:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8004134:	4b1b      	ldr	r3, [pc, #108]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 8004136:	2200      	movs	r2, #0
 8004138:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800413a:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 800413c:	2200      	movs	r2, #0
 800413e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch4_trig_com) != HAL_OK)
 8004140:	4818      	ldr	r0, [pc, #96]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 8004142:	f001 fa19 	bl	8005578 <HAL_DMA_Init>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_TIM_Base_MspInit+0x218>
      Error_Handler();
 800414c:	f7ff fa06 	bl	800355c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a14      	ldr	r2, [pc, #80]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
 8004156:	4a13      	ldr	r2, [pc, #76]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim8_ch4_trig_com);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a11      	ldr	r2, [pc, #68]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 8004160:	639a      	str	r2, [r3, #56]	; 0x38
 8004162:	4a10      	ldr	r2, [pc, #64]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim8_ch4_trig_com);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a0e      	ldr	r2, [pc, #56]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 800416c:	635a      	str	r2, [r3, #52]	; 0x34
 800416e:	4a0d      	ldr	r2, [pc, #52]	; (80041a4 <HAL_TIM_Base_MspInit+0x26c>)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004174:	bf00      	nop
 8004176:	3728      	adds	r7, #40	; 0x28
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40000400 	.word	0x40000400
 8004180:	40023800 	.word	0x40023800
 8004184:	40020400 	.word	0x40020400
 8004188:	40010400 	.word	0x40010400
 800418c:	20000dc4 	.word	0x20000dc4
 8004190:	40026440 	.word	0x40026440
 8004194:	20000e24 	.word	0x20000e24
 8004198:	40026458 	.word	0x40026458
 800419c:	20000e84 	.word	0x20000e84
 80041a0:	40026470 	.word	0x40026470
 80041a4:	20000ee4 	.word	0x20000ee4
 80041a8:	400264b8 	.word	0x400264b8

080041ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08a      	sub	sp, #40	; 0x28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b4:	f107 0314 	add.w	r3, r7, #20
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	609a      	str	r2, [r3, #8]
 80041c0:	60da      	str	r2, [r3, #12]
 80041c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a25      	ldr	r2, [pc, #148]	; (8004260 <HAL_TIM_MspPostInit+0xb4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d11f      	bne.n	800420e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	4b24      	ldr	r3, [pc, #144]	; (8004264 <HAL_TIM_MspPostInit+0xb8>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	4a23      	ldr	r2, [pc, #140]	; (8004264 <HAL_TIM_MspPostInit+0xb8>)
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	6313      	str	r3, [r2, #48]	; 0x30
 80041de:	4b21      	ldr	r3, [pc, #132]	; (8004264 <HAL_TIM_MspPostInit+0xb8>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f0:	2302      	movs	r3, #2
 80041f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f8:	2300      	movs	r3, #0
 80041fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80041fc:	2301      	movs	r3, #1
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004200:	f107 0314 	add.w	r3, r7, #20
 8004204:	4619      	mov	r1, r3
 8004206:	4818      	ldr	r0, [pc, #96]	; (8004268 <HAL_TIM_MspPostInit+0xbc>)
 8004208:	f001 fdb8 	bl	8005d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800420c:	e023      	b.n	8004256 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a16      	ldr	r2, [pc, #88]	; (800426c <HAL_TIM_MspPostInit+0xc0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d11e      	bne.n	8004256 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	4b11      	ldr	r3, [pc, #68]	; (8004264 <HAL_TIM_MspPostInit+0xb8>)
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	4a10      	ldr	r2, [pc, #64]	; (8004264 <HAL_TIM_MspPostInit+0xb8>)
 8004222:	f043 0304 	orr.w	r3, r3, #4
 8004226:	6313      	str	r3, [r2, #48]	; 0x30
 8004228:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <HAL_TIM_MspPostInit+0xb8>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004234:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423a:	2302      	movs	r3, #2
 800423c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004242:	2300      	movs	r3, #0
 8004244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004246:	2303      	movs	r3, #3
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800424a:	f107 0314 	add.w	r3, r7, #20
 800424e:	4619      	mov	r1, r3
 8004250:	4807      	ldr	r0, [pc, #28]	; (8004270 <HAL_TIM_MspPostInit+0xc4>)
 8004252:	f001 fd93 	bl	8005d7c <HAL_GPIO_Init>
}
 8004256:	bf00      	nop
 8004258:	3728      	adds	r7, #40	; 0x28
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40010000 	.word	0x40010000
 8004264:	40023800 	.word	0x40023800
 8004268:	40020000 	.word	0x40020000
 800426c:	40010400 	.word	0x40010400
 8004270:	40020800 	.word	0x40020800

08004274 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004278:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <MX_USART2_UART_Init+0x4c>)
 800427a:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <MX_USART2_UART_Init+0x50>)
 800427c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800427e:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <MX_USART2_UART_Init+0x4c>)
 8004280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004284:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004286:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <MX_USART2_UART_Init+0x4c>)
 8004288:	2200      	movs	r2, #0
 800428a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <MX_USART2_UART_Init+0x4c>)
 800428e:	2200      	movs	r2, #0
 8004290:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <MX_USART2_UART_Init+0x4c>)
 8004294:	2200      	movs	r2, #0
 8004296:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004298:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <MX_USART2_UART_Init+0x4c>)
 800429a:	220c      	movs	r2, #12
 800429c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800429e:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <MX_USART2_UART_Init+0x4c>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042a4:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <MX_USART2_UART_Init+0x4c>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042aa:	4805      	ldr	r0, [pc, #20]	; (80042c0 <MX_USART2_UART_Init+0x4c>)
 80042ac:	f004 fa16 	bl	80086dc <HAL_UART_Init>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80042b6:	f7ff f951 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042ba:	bf00      	nop
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000f44 	.word	0x20000f44
 80042c4:	40004400 	.word	0x40004400

080042c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80042cc:	4b11      	ldr	r3, [pc, #68]	; (8004314 <MX_USART3_UART_Init+0x4c>)
 80042ce:	4a12      	ldr	r2, [pc, #72]	; (8004318 <MX_USART3_UART_Init+0x50>)
 80042d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80042d2:	4b10      	ldr	r3, [pc, #64]	; (8004314 <MX_USART3_UART_Init+0x4c>)
 80042d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80042da:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <MX_USART3_UART_Init+0x4c>)
 80042dc:	2200      	movs	r2, #0
 80042de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80042e0:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <MX_USART3_UART_Init+0x4c>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80042e6:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <MX_USART3_UART_Init+0x4c>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80042ec:	4b09      	ldr	r3, [pc, #36]	; (8004314 <MX_USART3_UART_Init+0x4c>)
 80042ee:	220c      	movs	r2, #12
 80042f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <MX_USART3_UART_Init+0x4c>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <MX_USART3_UART_Init+0x4c>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80042fe:	4805      	ldr	r0, [pc, #20]	; (8004314 <MX_USART3_UART_Init+0x4c>)
 8004300:	f004 f9ec 	bl	80086dc <HAL_UART_Init>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800430a:	f7ff f927 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000f88 	.word	0x20000f88
 8004318:	40004800 	.word	0x40004800

0800431c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08c      	sub	sp, #48	; 0x30
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004324:	f107 031c 	add.w	r3, r7, #28
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	609a      	str	r2, [r3, #8]
 8004330:	60da      	str	r2, [r3, #12]
 8004332:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a68      	ldr	r2, [pc, #416]	; (80044dc <HAL_UART_MspInit+0x1c0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d162      	bne.n	8004404 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	61bb      	str	r3, [r7, #24]
 8004342:	4b67      	ldr	r3, [pc, #412]	; (80044e0 <HAL_UART_MspInit+0x1c4>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	4a66      	ldr	r2, [pc, #408]	; (80044e0 <HAL_UART_MspInit+0x1c4>)
 8004348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800434c:	6413      	str	r3, [r2, #64]	; 0x40
 800434e:	4b64      	ldr	r3, [pc, #400]	; (80044e0 <HAL_UART_MspInit+0x1c4>)
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	4b60      	ldr	r3, [pc, #384]	; (80044e0 <HAL_UART_MspInit+0x1c4>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	4a5f      	ldr	r2, [pc, #380]	; (80044e0 <HAL_UART_MspInit+0x1c4>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	6313      	str	r3, [r2, #48]	; 0x30
 800436a:	4b5d      	ldr	r3, [pc, #372]	; (80044e0 <HAL_UART_MspInit+0x1c4>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004376:	230c      	movs	r3, #12
 8004378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800437a:	2302      	movs	r3, #2
 800437c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437e:	2300      	movs	r3, #0
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004382:	2303      	movs	r3, #3
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004386:	2307      	movs	r3, #7
 8004388:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800438a:	f107 031c 	add.w	r3, r7, #28
 800438e:	4619      	mov	r1, r3
 8004390:	4854      	ldr	r0, [pc, #336]	; (80044e4 <HAL_UART_MspInit+0x1c8>)
 8004392:	f001 fcf3 	bl	8005d7c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004396:	4b54      	ldr	r3, [pc, #336]	; (80044e8 <HAL_UART_MspInit+0x1cc>)
 8004398:	4a54      	ldr	r2, [pc, #336]	; (80044ec <HAL_UART_MspInit+0x1d0>)
 800439a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800439c:	4b52      	ldr	r3, [pc, #328]	; (80044e8 <HAL_UART_MspInit+0x1cc>)
 800439e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043a4:	4b50      	ldr	r3, [pc, #320]	; (80044e8 <HAL_UART_MspInit+0x1cc>)
 80043a6:	2240      	movs	r2, #64	; 0x40
 80043a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043aa:	4b4f      	ldr	r3, [pc, #316]	; (80044e8 <HAL_UART_MspInit+0x1cc>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043b0:	4b4d      	ldr	r3, [pc, #308]	; (80044e8 <HAL_UART_MspInit+0x1cc>)
 80043b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043b8:	4b4b      	ldr	r3, [pc, #300]	; (80044e8 <HAL_UART_MspInit+0x1cc>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043be:	4b4a      	ldr	r3, [pc, #296]	; (80044e8 <HAL_UART_MspInit+0x1cc>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80043c4:	4b48      	ldr	r3, [pc, #288]	; (80044e8 <HAL_UART_MspInit+0x1cc>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80043ca:	4b47      	ldr	r3, [pc, #284]	; (80044e8 <HAL_UART_MspInit+0x1cc>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043d0:	4b45      	ldr	r3, [pc, #276]	; (80044e8 <HAL_UART_MspInit+0x1cc>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80043d6:	4844      	ldr	r0, [pc, #272]	; (80044e8 <HAL_UART_MspInit+0x1cc>)
 80043d8:	f001 f8ce 	bl	8005578 <HAL_DMA_Init>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80043e2:	f7ff f8bb 	bl	800355c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a3f      	ldr	r2, [pc, #252]	; (80044e8 <HAL_UART_MspInit+0x1cc>)
 80043ea:	635a      	str	r2, [r3, #52]	; 0x34
 80043ec:	4a3e      	ldr	r2, [pc, #248]	; (80044e8 <HAL_UART_MspInit+0x1cc>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80043f2:	2200      	movs	r2, #0
 80043f4:	2105      	movs	r1, #5
 80043f6:	2026      	movs	r0, #38	; 0x26
 80043f8:	f001 f886 	bl	8005508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80043fc:	2026      	movs	r0, #38	; 0x26
 80043fe:	f001 f89f 	bl	8005540 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004402:	e067      	b.n	80044d4 <HAL_UART_MspInit+0x1b8>
  else if(uartHandle->Instance==USART3)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a39      	ldr	r2, [pc, #228]	; (80044f0 <HAL_UART_MspInit+0x1d4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d162      	bne.n	80044d4 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	4b33      	ldr	r3, [pc, #204]	; (80044e0 <HAL_UART_MspInit+0x1c4>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	4a32      	ldr	r2, [pc, #200]	; (80044e0 <HAL_UART_MspInit+0x1c4>)
 8004418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800441c:	6413      	str	r3, [r2, #64]	; 0x40
 800441e:	4b30      	ldr	r3, [pc, #192]	; (80044e0 <HAL_UART_MspInit+0x1c4>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	4b2c      	ldr	r3, [pc, #176]	; (80044e0 <HAL_UART_MspInit+0x1c4>)
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	4a2b      	ldr	r2, [pc, #172]	; (80044e0 <HAL_UART_MspInit+0x1c4>)
 8004434:	f043 0302 	orr.w	r3, r3, #2
 8004438:	6313      	str	r3, [r2, #48]	; 0x30
 800443a:	4b29      	ldr	r3, [pc, #164]	; (80044e0 <HAL_UART_MspInit+0x1c4>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004446:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800444a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444c:	2302      	movs	r3, #2
 800444e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004450:	2300      	movs	r3, #0
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004454:	2303      	movs	r3, #3
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004458:	2307      	movs	r3, #7
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800445c:	f107 031c 	add.w	r3, r7, #28
 8004460:	4619      	mov	r1, r3
 8004462:	4824      	ldr	r0, [pc, #144]	; (80044f4 <HAL_UART_MspInit+0x1d8>)
 8004464:	f001 fc8a 	bl	8005d7c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004468:	4b23      	ldr	r3, [pc, #140]	; (80044f8 <HAL_UART_MspInit+0x1dc>)
 800446a:	4a24      	ldr	r2, [pc, #144]	; (80044fc <HAL_UART_MspInit+0x1e0>)
 800446c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800446e:	4b22      	ldr	r3, [pc, #136]	; (80044f8 <HAL_UART_MspInit+0x1dc>)
 8004470:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004474:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004476:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <HAL_UART_MspInit+0x1dc>)
 8004478:	2240      	movs	r2, #64	; 0x40
 800447a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800447c:	4b1e      	ldr	r3, [pc, #120]	; (80044f8 <HAL_UART_MspInit+0x1dc>)
 800447e:	2200      	movs	r2, #0
 8004480:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004482:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <HAL_UART_MspInit+0x1dc>)
 8004484:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004488:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800448a:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <HAL_UART_MspInit+0x1dc>)
 800448c:	2200      	movs	r2, #0
 800448e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004490:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <HAL_UART_MspInit+0x1dc>)
 8004492:	2200      	movs	r2, #0
 8004494:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004496:	4b18      	ldr	r3, [pc, #96]	; (80044f8 <HAL_UART_MspInit+0x1dc>)
 8004498:	2200      	movs	r2, #0
 800449a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800449c:	4b16      	ldr	r3, [pc, #88]	; (80044f8 <HAL_UART_MspInit+0x1dc>)
 800449e:	2200      	movs	r2, #0
 80044a0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044a2:	4b15      	ldr	r3, [pc, #84]	; (80044f8 <HAL_UART_MspInit+0x1dc>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80044a8:	4813      	ldr	r0, [pc, #76]	; (80044f8 <HAL_UART_MspInit+0x1dc>)
 80044aa:	f001 f865 	bl	8005578 <HAL_DMA_Init>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80044b4:	f7ff f852 	bl	800355c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a0f      	ldr	r2, [pc, #60]	; (80044f8 <HAL_UART_MspInit+0x1dc>)
 80044bc:	635a      	str	r2, [r3, #52]	; 0x34
 80044be:	4a0e      	ldr	r2, [pc, #56]	; (80044f8 <HAL_UART_MspInit+0x1dc>)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80044c4:	2200      	movs	r2, #0
 80044c6:	2105      	movs	r1, #5
 80044c8:	2027      	movs	r0, #39	; 0x27
 80044ca:	f001 f81d 	bl	8005508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80044ce:	2027      	movs	r0, #39	; 0x27
 80044d0:	f001 f836 	bl	8005540 <HAL_NVIC_EnableIRQ>
}
 80044d4:	bf00      	nop
 80044d6:	3730      	adds	r7, #48	; 0x30
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40004400 	.word	0x40004400
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40020000 	.word	0x40020000
 80044e8:	20000fcc 	.word	0x20000fcc
 80044ec:	400260a0 	.word	0x400260a0
 80044f0:	40004800 	.word	0x40004800
 80044f4:	40020400 	.word	0x40020400
 80044f8:	2000102c 	.word	0x2000102c
 80044fc:	40026058 	.word	0x40026058

08004500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004538 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004504:	480d      	ldr	r0, [pc, #52]	; (800453c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004506:	490e      	ldr	r1, [pc, #56]	; (8004540 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004508:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800450a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800450c:	e002      	b.n	8004514 <LoopCopyDataInit>

0800450e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800450e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004512:	3304      	adds	r3, #4

08004514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004518:	d3f9      	bcc.n	800450e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800451a:	4a0b      	ldr	r2, [pc, #44]	; (8004548 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800451c:	4c0b      	ldr	r4, [pc, #44]	; (800454c <LoopFillZerobss+0x26>)
  movs r3, #0
 800451e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004520:	e001      	b.n	8004526 <LoopFillZerobss>

08004522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004524:	3204      	adds	r2, #4

08004526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004528:	d3fb      	bcc.n	8004522 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800452a:	f7ff fab9 	bl	8003aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800452e:	f009 fb11 	bl	800db54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004532:	f7fe ff70 	bl	8003416 <main>
  bx  lr    
 8004536:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800453c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004540:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8004544:	080127f0 	.word	0x080127f0
  ldr r2, =_sbss
 8004548:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 800454c:	20005ab0 	.word	0x20005ab0

08004550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004550:	e7fe      	b.n	8004550 <ADC_IRQHandler>
	...

08004554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <HAL_Init+0x40>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a0d      	ldr	r2, [pc, #52]	; (8004594 <HAL_Init+0x40>)
 800455e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_Init+0x40>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a0a      	ldr	r2, [pc, #40]	; (8004594 <HAL_Init+0x40>)
 800456a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800456e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004570:	4b08      	ldr	r3, [pc, #32]	; (8004594 <HAL_Init+0x40>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a07      	ldr	r2, [pc, #28]	; (8004594 <HAL_Init+0x40>)
 8004576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800457a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800457c:	2003      	movs	r0, #3
 800457e:	f000 ffb8 	bl	80054f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004582:	200f      	movs	r0, #15
 8004584:	f7ff f8f8 	bl	8003778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004588:	f7ff f8ca 	bl	8003720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40023c00 	.word	0x40023c00

08004598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800459c:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_IncTick+0x20>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <HAL_IncTick+0x24>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4413      	add	r3, r2
 80045a8:	4a04      	ldr	r2, [pc, #16]	; (80045bc <HAL_IncTick+0x24>)
 80045aa:	6013      	str	r3, [r2, #0]
}
 80045ac:	bf00      	nop
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000098 	.word	0x20000098
 80045bc:	2000108c 	.word	0x2000108c

080045c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return uwTick;
 80045c4:	4b03      	ldr	r3, [pc, #12]	; (80045d4 <HAL_GetTick+0x14>)
 80045c6:	681b      	ldr	r3, [r3, #0]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	2000108c 	.word	0x2000108c

080045d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045e0:	f7ff ffee 	bl	80045c0 <HAL_GetTick>
 80045e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d005      	beq.n	80045fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045f2:	4b0a      	ldr	r3, [pc, #40]	; (800461c <HAL_Delay+0x44>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045fe:	bf00      	nop
 8004600:	f7ff ffde 	bl	80045c0 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	429a      	cmp	r2, r3
 800460e:	d8f7      	bhi.n	8004600 <HAL_Delay+0x28>
  {
  }
}
 8004610:	bf00      	nop
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000098 	.word	0x20000098

08004620 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e0ed      	b.n	800480e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fc fcdc 	bl	8000ffc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004654:	f7ff ffb4 	bl	80045c0 <HAL_GetTick>
 8004658:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800465a:	e012      	b.n	8004682 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800465c:	f7ff ffb0 	bl	80045c0 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b0a      	cmp	r3, #10
 8004668:	d90b      	bls.n	8004682 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2205      	movs	r2, #5
 800467a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e0c5      	b.n	800480e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0e5      	beq.n	800465c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0202 	bic.w	r2, r2, #2
 800469e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046a0:	f7ff ff8e 	bl	80045c0 <HAL_GetTick>
 80046a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80046a6:	e012      	b.n	80046ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046a8:	f7ff ff8a 	bl	80045c0 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b0a      	cmp	r3, #10
 80046b4:	d90b      	bls.n	80046ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2205      	movs	r2, #5
 80046c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e09f      	b.n	800480e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e5      	bne.n	80046a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	7e1b      	ldrb	r3, [r3, #24]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d108      	bne.n	80046f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	e007      	b.n	8004706 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004704:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	7e5b      	ldrb	r3, [r3, #25]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d108      	bne.n	8004720 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	e007      	b.n	8004730 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	7e9b      	ldrb	r3, [r3, #26]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d108      	bne.n	800474a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0220 	orr.w	r2, r2, #32
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	e007      	b.n	800475a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0220 	bic.w	r2, r2, #32
 8004758:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	7edb      	ldrb	r3, [r3, #27]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d108      	bne.n	8004774 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0210 	bic.w	r2, r2, #16
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	e007      	b.n	8004784 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0210 	orr.w	r2, r2, #16
 8004782:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	7f1b      	ldrb	r3, [r3, #28]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d108      	bne.n	800479e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0208 	orr.w	r2, r2, #8
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	e007      	b.n	80047ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0208 	bic.w	r2, r2, #8
 80047ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	7f5b      	ldrb	r3, [r3, #29]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d108      	bne.n	80047c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0204 	orr.w	r2, r2, #4
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	e007      	b.n	80047d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0204 	bic.w	r2, r2, #4
 80047d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	ea42 0103 	orr.w	r1, r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	1e5a      	subs	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800482e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004830:	7cfb      	ldrb	r3, [r7, #19]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d003      	beq.n	800483e <HAL_CAN_ConfigFilter+0x26>
 8004836:	7cfb      	ldrb	r3, [r7, #19]
 8004838:	2b02      	cmp	r3, #2
 800483a:	f040 80be 	bne.w	80049ba <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800483e:	4b65      	ldr	r3, [pc, #404]	; (80049d4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004840:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004848:	f043 0201 	orr.w	r2, r3, #1
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004858:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	431a      	orrs	r2, r3
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 031f 	and.w	r3, r3, #31
 800487e:	2201      	movs	r2, #1
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	43db      	mvns	r3, r3
 8004890:	401a      	ands	r2, r3
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d123      	bne.n	80048e8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	401a      	ands	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80048c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	3248      	adds	r2, #72	; 0x48
 80048c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80048dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80048de:	6979      	ldr	r1, [r7, #20]
 80048e0:	3348      	adds	r3, #72	; 0x48
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	440b      	add	r3, r1
 80048e6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d122      	bne.n	8004936 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004910:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	3248      	adds	r2, #72	; 0x48
 8004916:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800492a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800492c:	6979      	ldr	r1, [r7, #20]
 800492e:	3348      	adds	r3, #72	; 0x48
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	440b      	add	r3, r1
 8004934:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	43db      	mvns	r3, r3
 8004948:	401a      	ands	r2, r3
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004950:	e007      	b.n	8004962 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	431a      	orrs	r2, r3
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d109      	bne.n	800497e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	43db      	mvns	r3, r3
 8004974:	401a      	ands	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800497c:	e007      	b.n	800498e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	431a      	orrs	r2, r3
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d107      	bne.n	80049a6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	431a      	orrs	r2, r3
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049ac:	f023 0201 	bic.w	r2, r3, #1
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e006      	b.n	80049c8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
  }
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	40006400 	.word	0x40006400

080049d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d12e      	bne.n	8004a4a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a04:	f7ff fddc 	bl	80045c0 <HAL_GetTick>
 8004a08:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004a0a:	e012      	b.n	8004a32 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a0c:	f7ff fdd8 	bl	80045c0 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b0a      	cmp	r3, #10
 8004a18:	d90b      	bls.n	8004a32 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2205      	movs	r2, #5
 8004a2a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e012      	b.n	8004a58 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e5      	bne.n	8004a0c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	e006      	b.n	8004a58 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
  }
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b089      	sub	sp, #36	; 0x24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a74:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a7e:	7ffb      	ldrb	r3, [r7, #31]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d003      	beq.n	8004a8c <HAL_CAN_AddTxMessage+0x2c>
 8004a84:	7ffb      	ldrb	r3, [r7, #31]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	f040 80b8 	bne.w	8004bfc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d105      	bne.n	8004aac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 80a0 	beq.w	8004bec <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	0e1b      	lsrs	r3, r3, #24
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d907      	bls.n	8004acc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e09e      	b.n	8004c0a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004acc:	2201      	movs	r2, #1
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	409a      	lsls	r2, r3
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10d      	bne.n	8004afa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004ae8:	68f9      	ldr	r1, [r7, #12]
 8004aea:	6809      	ldr	r1, [r1, #0]
 8004aec:	431a      	orrs	r2, r3
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	3318      	adds	r3, #24
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	440b      	add	r3, r1
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	e00f      	b.n	8004b1a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b04:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b0a:	68f9      	ldr	r1, [r7, #12]
 8004b0c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004b0e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	3318      	adds	r3, #24
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	440b      	add	r3, r1
 8004b18:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6819      	ldr	r1, [r3, #0]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	691a      	ldr	r2, [r3, #16]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	3318      	adds	r3, #24
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	440b      	add	r3, r1
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	7d1b      	ldrb	r3, [r3, #20]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d111      	bne.n	8004b5a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	3318      	adds	r3, #24
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	4413      	add	r3, r2
 8004b42:	3304      	adds	r3, #4
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	6811      	ldr	r1, [r2, #0]
 8004b4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	3318      	adds	r3, #24
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	440b      	add	r3, r1
 8004b56:	3304      	adds	r3, #4
 8004b58:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3307      	adds	r3, #7
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	061a      	lsls	r2, r3, #24
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3306      	adds	r3, #6
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	041b      	lsls	r3, r3, #16
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3305      	adds	r3, #5
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	021b      	lsls	r3, r3, #8
 8004b74:	4313      	orrs	r3, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	3204      	adds	r2, #4
 8004b7a:	7812      	ldrb	r2, [r2, #0]
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	6811      	ldr	r1, [r2, #0]
 8004b82:	ea43 0200 	orr.w	r2, r3, r0
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	440b      	add	r3, r1
 8004b8c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004b90:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3303      	adds	r3, #3
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	061a      	lsls	r2, r3, #24
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3302      	adds	r3, #2
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	041b      	lsls	r3, r3, #16
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	4313      	orrs	r3, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	7812      	ldrb	r2, [r2, #0]
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	6811      	ldr	r1, [r2, #0]
 8004bb8:	ea43 0200 	orr.w	r2, r3, r0
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	440b      	add	r3, r1
 8004bc2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004bc6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	3318      	adds	r3, #24
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	4413      	add	r3, r2
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	6811      	ldr	r1, [r2, #0]
 8004bda:	f043 0201 	orr.w	r2, r3, #1
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	3318      	adds	r3, #24
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	440b      	add	r3, r1
 8004be6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e00e      	b.n	8004c0a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e006      	b.n	8004c0a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
  }
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3724      	adds	r7, #36	; 0x24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b085      	sub	sp, #20
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c28:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004c2a:	7afb      	ldrb	r3, [r7, #11]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d002      	beq.n	8004c36 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004c30:	7afb      	ldrb	r3, [r7, #11]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d11d      	bne.n	8004c72 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3301      	adds	r3, #1
 8004c48:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004c72:	68fb      	ldr	r3, [r7, #12]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c94:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004c96:	7dfb      	ldrb	r3, [r7, #23]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d003      	beq.n	8004ca4 <HAL_CAN_GetRxMessage+0x24>
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	f040 80f3 	bne.w	8004e8a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10e      	bne.n	8004cc8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f003 0303 	and.w	r3, r3, #3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d116      	bne.n	8004ce6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0e7      	b.n	8004e98 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d107      	bne.n	8004ce6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e0d8      	b.n	8004e98 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	331b      	adds	r3, #27
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	4413      	add	r3, r2
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0204 	and.w	r2, r3, #4
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10c      	bne.n	8004d1e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	331b      	adds	r3, #27
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	4413      	add	r3, r2
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	0d5b      	lsrs	r3, r3, #21
 8004d14:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	e00b      	b.n	8004d36 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	331b      	adds	r3, #27
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	4413      	add	r3, r2
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	08db      	lsrs	r3, r3, #3
 8004d2e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	331b      	adds	r3, #27
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	4413      	add	r3, r2
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0202 	and.w	r2, r3, #2
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	331b      	adds	r3, #27
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	4413      	add	r3, r2
 8004d58:	3304      	adds	r3, #4
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 020f 	and.w	r2, r3, #15
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	331b      	adds	r3, #27
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	4413      	add	r3, r2
 8004d70:	3304      	adds	r3, #4
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	331b      	adds	r3, #27
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	4413      	add	r3, r2
 8004d88:	3304      	adds	r3, #4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	0c1b      	lsrs	r3, r3, #16
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	0a1a      	lsrs	r2, r3, #8
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	0c1a      	lsrs	r2, r3, #16
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	3302      	adds	r3, #2
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	0e1a      	lsrs	r2, r3, #24
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	3303      	adds	r3, #3
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	b2d2      	uxtb	r2, r2
 8004e0e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	0a1a      	lsrs	r2, r3, #8
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	3305      	adds	r3, #5
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	0c1a      	lsrs	r2, r3, #16
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	3306      	adds	r3, #6
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	0e1a      	lsrs	r2, r3, #24
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	3307      	adds	r3, #7
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d108      	bne.n	8004e76 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0220 	orr.w	r2, r2, #32
 8004e72:	60da      	str	r2, [r3, #12]
 8004e74:	e007      	b.n	8004e86 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f042 0220 	orr.w	r2, r2, #32
 8004e84:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e006      	b.n	8004e98 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
  }
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eb4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d002      	beq.n	8004ec2 <HAL_CAN_ActivateNotification+0x1e>
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d109      	bne.n	8004ed6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6959      	ldr	r1, [r3, #20]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e006      	b.n	8004ee4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
  }
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	; 0x28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d07c      	beq.n	8005030 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d023      	beq.n	8004f88 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2201      	movs	r2, #1
 8004f46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f983 	bl	800525e <HAL_CAN_TxMailbox0CompleteCallback>
 8004f58:	e016      	b.n	8004f88 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d004      	beq.n	8004f6e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6c:	e00c      	b.n	8004f88 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d004      	beq.n	8004f82 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f80:	e002      	b.n	8004f88 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f989 	bl	800529a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d024      	beq.n	8004fdc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f9a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f963 	bl	8005272 <HAL_CAN_TxMailbox1CompleteCallback>
 8004fac:	e016      	b.n	8004fdc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d004      	beq.n	8004fc2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc0:	e00c      	b.n	8004fdc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d004      	beq.n	8004fd6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd4:	e002      	b.n	8004fdc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f969 	bl	80052ae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d024      	beq.n	8005030 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004fee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f943 	bl	8005286 <HAL_CAN_TxMailbox2CompleteCallback>
 8005000:	e016      	b.n	8005030 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
 8005014:	e00c      	b.n	8005030 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d004      	beq.n	800502a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
 8005028:	e002      	b.n	8005030 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f949 	bl	80052c2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00c      	beq.n	8005054 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800504a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2210      	movs	r2, #16
 8005052:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00b      	beq.n	8005076 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d006      	beq.n	8005076 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2208      	movs	r2, #8
 800506e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f930 	bl	80052d6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d009      	beq.n	8005094 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fc fa72 	bl	8001578 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00c      	beq.n	80050b8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2210      	movs	r2, #16
 80050b6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00b      	beq.n	80050da <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d006      	beq.n	80050da <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2208      	movs	r2, #8
 80050d2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f912 	bl	80052fe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d009      	beq.n	80050f8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f8f9 	bl	80052ea <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b00      	cmp	r3, #0
 800510a:	d006      	beq.n	800511a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2210      	movs	r2, #16
 8005112:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f8fc 	bl	8005312 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00b      	beq.n	800513c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d006      	beq.n	800513c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2208      	movs	r2, #8
 8005134:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8f5 	bl	8005326 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d07b      	beq.n	800523e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d072      	beq.n	8005236 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005156:	2b00      	cmp	r3, #0
 8005158:	d008      	beq.n	800516c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005172:	2b00      	cmp	r3, #0
 8005174:	d008      	beq.n	8005188 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	f043 0302 	orr.w	r3, r3, #2
 8005186:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518e:	2b00      	cmp	r3, #0
 8005190:	d008      	beq.n	80051a4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	f043 0304 	orr.w	r3, r3, #4
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d043      	beq.n	8005236 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d03e      	beq.n	8005236 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051be:	2b60      	cmp	r3, #96	; 0x60
 80051c0:	d02b      	beq.n	800521a <HAL_CAN_IRQHandler+0x32a>
 80051c2:	2b60      	cmp	r3, #96	; 0x60
 80051c4:	d82e      	bhi.n	8005224 <HAL_CAN_IRQHandler+0x334>
 80051c6:	2b50      	cmp	r3, #80	; 0x50
 80051c8:	d022      	beq.n	8005210 <HAL_CAN_IRQHandler+0x320>
 80051ca:	2b50      	cmp	r3, #80	; 0x50
 80051cc:	d82a      	bhi.n	8005224 <HAL_CAN_IRQHandler+0x334>
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d019      	beq.n	8005206 <HAL_CAN_IRQHandler+0x316>
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d826      	bhi.n	8005224 <HAL_CAN_IRQHandler+0x334>
 80051d6:	2b30      	cmp	r3, #48	; 0x30
 80051d8:	d010      	beq.n	80051fc <HAL_CAN_IRQHandler+0x30c>
 80051da:	2b30      	cmp	r3, #48	; 0x30
 80051dc:	d822      	bhi.n	8005224 <HAL_CAN_IRQHandler+0x334>
 80051de:	2b10      	cmp	r3, #16
 80051e0:	d002      	beq.n	80051e8 <HAL_CAN_IRQHandler+0x2f8>
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d005      	beq.n	80051f2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80051e6:	e01d      	b.n	8005224 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	f043 0308 	orr.w	r3, r3, #8
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80051f0:	e019      	b.n	8005226 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	f043 0310 	orr.w	r3, r3, #16
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80051fa:	e014      	b.n	8005226 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	f043 0320 	orr.w	r3, r3, #32
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005204:	e00f      	b.n	8005226 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800520e:	e00a      	b.n	8005226 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005216:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005218:	e005      	b.n	8005226 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005222:	e000      	b.n	8005226 <HAL_CAN_IRQHandler+0x336>
            break;
 8005224:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699a      	ldr	r2, [r3, #24]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005234:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2204      	movs	r2, #4
 800523c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	2b00      	cmp	r3, #0
 8005242:	d008      	beq.n	8005256 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f872 	bl	800533a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005256:	bf00      	nop
 8005258:	3728      	adds	r7, #40	; 0x28
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
	...

08005350 <__NVIC_SetPriorityGrouping>:
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005360:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <__NVIC_SetPriorityGrouping+0x44>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800536c:	4013      	ands	r3, r2
 800536e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800537c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005382:	4a04      	ldr	r2, [pc, #16]	; (8005394 <__NVIC_SetPriorityGrouping+0x44>)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	60d3      	str	r3, [r2, #12]
}
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	e000ed00 	.word	0xe000ed00

08005398 <__NVIC_GetPriorityGrouping>:
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800539c:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <__NVIC_GetPriorityGrouping+0x18>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	0a1b      	lsrs	r3, r3, #8
 80053a2:	f003 0307 	and.w	r3, r3, #7
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	e000ed00 	.word	0xe000ed00

080053b4 <__NVIC_EnableIRQ>:
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	db0b      	blt.n	80053de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	f003 021f 	and.w	r2, r3, #31
 80053cc:	4907      	ldr	r1, [pc, #28]	; (80053ec <__NVIC_EnableIRQ+0x38>)
 80053ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d2:	095b      	lsrs	r3, r3, #5
 80053d4:	2001      	movs	r0, #1
 80053d6:	fa00 f202 	lsl.w	r2, r0, r2
 80053da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	e000e100 	.word	0xe000e100

080053f0 <__NVIC_DisableIRQ>:
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	db12      	blt.n	8005428 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	f003 021f 	and.w	r2, r3, #31
 8005408:	490a      	ldr	r1, [pc, #40]	; (8005434 <__NVIC_DisableIRQ+0x44>)
 800540a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	2001      	movs	r0, #1
 8005412:	fa00 f202 	lsl.w	r2, r0, r2
 8005416:	3320      	adds	r3, #32
 8005418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800541c:	f3bf 8f4f 	dsb	sy
}
 8005420:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005422:	f3bf 8f6f 	isb	sy
}
 8005426:	bf00      	nop
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	e000e100 	.word	0xe000e100

08005438 <__NVIC_SetPriority>:
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	6039      	str	r1, [r7, #0]
 8005442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005448:	2b00      	cmp	r3, #0
 800544a:	db0a      	blt.n	8005462 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	b2da      	uxtb	r2, r3
 8005450:	490c      	ldr	r1, [pc, #48]	; (8005484 <__NVIC_SetPriority+0x4c>)
 8005452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005456:	0112      	lsls	r2, r2, #4
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	440b      	add	r3, r1
 800545c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005460:	e00a      	b.n	8005478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	b2da      	uxtb	r2, r3
 8005466:	4908      	ldr	r1, [pc, #32]	; (8005488 <__NVIC_SetPriority+0x50>)
 8005468:	79fb      	ldrb	r3, [r7, #7]
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	3b04      	subs	r3, #4
 8005470:	0112      	lsls	r2, r2, #4
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	440b      	add	r3, r1
 8005476:	761a      	strb	r2, [r3, #24]
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	e000e100 	.word	0xe000e100
 8005488:	e000ed00 	.word	0xe000ed00

0800548c <NVIC_EncodePriority>:
{
 800548c:	b480      	push	{r7}
 800548e:	b089      	sub	sp, #36	; 0x24
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f1c3 0307 	rsb	r3, r3, #7
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	bf28      	it	cs
 80054aa:	2304      	movcs	r3, #4
 80054ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	3304      	adds	r3, #4
 80054b2:	2b06      	cmp	r3, #6
 80054b4:	d902      	bls.n	80054bc <NVIC_EncodePriority+0x30>
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	3b03      	subs	r3, #3
 80054ba:	e000      	b.n	80054be <NVIC_EncodePriority+0x32>
 80054bc:	2300      	movs	r3, #0
 80054be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c0:	f04f 32ff 	mov.w	r2, #4294967295
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	43da      	mvns	r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	401a      	ands	r2, r3
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054d4:	f04f 31ff 	mov.w	r1, #4294967295
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	fa01 f303 	lsl.w	r3, r1, r3
 80054de:	43d9      	mvns	r1, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054e4:	4313      	orrs	r3, r2
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3724      	adds	r7, #36	; 0x24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff ff28 	bl	8005350 <__NVIC_SetPriorityGrouping>
}
 8005500:	bf00      	nop
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800551a:	f7ff ff3d 	bl	8005398 <__NVIC_GetPriorityGrouping>
 800551e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	68b9      	ldr	r1, [r7, #8]
 8005524:	6978      	ldr	r0, [r7, #20]
 8005526:	f7ff ffb1 	bl	800548c <NVIC_EncodePriority>
 800552a:	4602      	mov	r2, r0
 800552c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005530:	4611      	mov	r1, r2
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff ff80 	bl	8005438 <__NVIC_SetPriority>
}
 8005538:	bf00      	nop
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	4603      	mov	r3, r0
 8005548:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800554a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff ff30 	bl	80053b4 <__NVIC_EnableIRQ>
}
 8005554:	bf00      	nop
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff ff40 	bl	80053f0 <__NVIC_DisableIRQ>
}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005584:	f7ff f81c 	bl	80045c0 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e099      	b.n	80056c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0201 	bic.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055b4:	e00f      	b.n	80055d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055b6:	f7ff f803 	bl	80045c0 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b05      	cmp	r3, #5
 80055c2:	d908      	bls.n	80055d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2203      	movs	r2, #3
 80055ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e078      	b.n	80056c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e8      	bne.n	80055b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	4b38      	ldr	r3, [pc, #224]	; (80056d0 <HAL_DMA_Init+0x158>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005602:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800560e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800561a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	2b04      	cmp	r3, #4
 800562e:	d107      	bne.n	8005640 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	4313      	orrs	r3, r2
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f023 0307 	bic.w	r3, r3, #7
 8005656:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	2b04      	cmp	r3, #4
 8005668:	d117      	bne.n	800569a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00e      	beq.n	800569a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fb01 	bl	8005c84 <DMA_CheckFifoParam>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2240      	movs	r2, #64	; 0x40
 800568c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005696:	2301      	movs	r3, #1
 8005698:	e016      	b.n	80056c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fab8 	bl	8005c18 <DMA_CalcBaseAndBitshift>
 80056a8:	4603      	mov	r3, r0
 80056aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b0:	223f      	movs	r2, #63	; 0x3f
 80056b2:	409a      	lsls	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	f010803f 	.word	0xf010803f

080056d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d101      	bne.n	80056fa <HAL_DMA_Start_IT+0x26>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e040      	b.n	800577c <HAL_DMA_Start_IT+0xa8>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	d12f      	bne.n	800576e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2202      	movs	r2, #2
 8005712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	68b9      	ldr	r1, [r7, #8]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 fa4a 	bl	8005bbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800572c:	223f      	movs	r2, #63	; 0x3f
 800572e:	409a      	lsls	r2, r3
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0216 	orr.w	r2, r2, #22
 8005742:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d007      	beq.n	800575c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0208 	orr.w	r2, r2, #8
 800575a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	e005      	b.n	800577a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005776:	2302      	movs	r3, #2
 8005778:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800577a:	7dfb      	ldrb	r3, [r7, #23]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005790:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005792:	f7fe ff15 	bl	80045c0 <HAL_GetTick>
 8005796:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d008      	beq.n	80057b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2280      	movs	r2, #128	; 0x80
 80057a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e052      	b.n	800585c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0216 	bic.w	r2, r2, #22
 80057c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695a      	ldr	r2, [r3, #20]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d103      	bne.n	80057e6 <HAL_DMA_Abort+0x62>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d007      	beq.n	80057f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0208 	bic.w	r2, r2, #8
 80057f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0201 	bic.w	r2, r2, #1
 8005804:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005806:	e013      	b.n	8005830 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005808:	f7fe feda 	bl	80045c0 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b05      	cmp	r3, #5
 8005814:	d90c      	bls.n	8005830 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2203      	movs	r2, #3
 8005820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e015      	b.n	800585c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e4      	bne.n	8005808 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005842:	223f      	movs	r2, #63	; 0x3f
 8005844:	409a      	lsls	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d004      	beq.n	8005882 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2280      	movs	r2, #128	; 0x80
 800587c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e00c      	b.n	800589c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2205      	movs	r2, #5
 8005886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0201 	bic.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058b4:	4b8e      	ldr	r3, [pc, #568]	; (8005af0 <HAL_DMA_IRQHandler+0x248>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a8e      	ldr	r2, [pc, #568]	; (8005af4 <HAL_DMA_IRQHandler+0x24c>)
 80058ba:	fba2 2303 	umull	r2, r3, r2, r3
 80058be:	0a9b      	lsrs	r3, r3, #10
 80058c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d2:	2208      	movs	r2, #8
 80058d4:	409a      	lsls	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4013      	ands	r3, r2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d01a      	beq.n	8005914 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d013      	beq.n	8005914 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0204 	bic.w	r2, r2, #4
 80058fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005900:	2208      	movs	r2, #8
 8005902:	409a      	lsls	r2, r3
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590c:	f043 0201 	orr.w	r2, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005918:	2201      	movs	r2, #1
 800591a:	409a      	lsls	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4013      	ands	r3, r2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d012      	beq.n	800594a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00b      	beq.n	800594a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005936:	2201      	movs	r2, #1
 8005938:	409a      	lsls	r2, r3
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005942:	f043 0202 	orr.w	r2, r3, #2
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594e:	2204      	movs	r2, #4
 8005950:	409a      	lsls	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4013      	ands	r3, r2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d012      	beq.n	8005980 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00b      	beq.n	8005980 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596c:	2204      	movs	r2, #4
 800596e:	409a      	lsls	r2, r3
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005978:	f043 0204 	orr.w	r2, r3, #4
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005984:	2210      	movs	r2, #16
 8005986:	409a      	lsls	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4013      	ands	r3, r2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d043      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0308 	and.w	r3, r3, #8
 800599a:	2b00      	cmp	r3, #0
 800599c:	d03c      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a2:	2210      	movs	r2, #16
 80059a4:	409a      	lsls	r2, r3
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d018      	beq.n	80059ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d108      	bne.n	80059d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d024      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	4798      	blx	r3
 80059d6:	e01f      	b.n	8005a18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01b      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	4798      	blx	r3
 80059e8:	e016      	b.n	8005a18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d107      	bne.n	8005a08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0208 	bic.w	r2, r2, #8
 8005a06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	409a      	lsls	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4013      	ands	r3, r2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 808f 	beq.w	8005b48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8087 	beq.w	8005b48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3e:	2220      	movs	r2, #32
 8005a40:	409a      	lsls	r2, r3
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b05      	cmp	r3, #5
 8005a50:	d136      	bne.n	8005ac0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0216 	bic.w	r2, r2, #22
 8005a60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695a      	ldr	r2, [r3, #20]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d103      	bne.n	8005a82 <HAL_DMA_IRQHandler+0x1da>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0208 	bic.w	r2, r2, #8
 8005a90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a96:	223f      	movs	r2, #63	; 0x3f
 8005a98:	409a      	lsls	r2, r3
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d07e      	beq.n	8005bb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	4798      	blx	r3
        }
        return;
 8005abe:	e079      	b.n	8005bb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01d      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10d      	bne.n	8005af8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d031      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	4798      	blx	r3
 8005aec:	e02c      	b.n	8005b48 <HAL_DMA_IRQHandler+0x2a0>
 8005aee:	bf00      	nop
 8005af0:	20000090 	.word	0x20000090
 8005af4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d023      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	4798      	blx	r3
 8005b08:	e01e      	b.n	8005b48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10f      	bne.n	8005b38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0210 	bic.w	r2, r2, #16
 8005b26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d032      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d022      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2205      	movs	r2, #5
 8005b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0201 	bic.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	3301      	adds	r3, #1
 8005b78:	60bb      	str	r3, [r7, #8]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d307      	bcc.n	8005b90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f2      	bne.n	8005b74 <HAL_DMA_IRQHandler+0x2cc>
 8005b8e:	e000      	b.n	8005b92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005b90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	4798      	blx	r3
 8005bb2:	e000      	b.n	8005bb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005bb4:	bf00      	nop
    }
  }
}
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2b40      	cmp	r3, #64	; 0x40
 8005be8:	d108      	bne.n	8005bfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005bfa:	e007      	b.n	8005c0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	60da      	str	r2, [r3, #12]
}
 8005c0c:	bf00      	nop
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	3b10      	subs	r3, #16
 8005c28:	4a14      	ldr	r2, [pc, #80]	; (8005c7c <DMA_CalcBaseAndBitshift+0x64>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	091b      	lsrs	r3, r3, #4
 8005c30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c32:	4a13      	ldr	r2, [pc, #76]	; (8005c80 <DMA_CalcBaseAndBitshift+0x68>)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d909      	bls.n	8005c5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c4e:	f023 0303 	bic.w	r3, r3, #3
 8005c52:	1d1a      	adds	r2, r3, #4
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	659a      	str	r2, [r3, #88]	; 0x58
 8005c58:	e007      	b.n	8005c6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c62:	f023 0303 	bic.w	r3, r3, #3
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	aaaaaaab 	.word	0xaaaaaaab
 8005c80:	080121b0 	.word	0x080121b0

08005c84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d11f      	bne.n	8005cde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d856      	bhi.n	8005d52 <DMA_CheckFifoParam+0xce>
 8005ca4:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <DMA_CheckFifoParam+0x28>)
 8005ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005caa:	bf00      	nop
 8005cac:	08005cbd 	.word	0x08005cbd
 8005cb0:	08005ccf 	.word	0x08005ccf
 8005cb4:	08005cbd 	.word	0x08005cbd
 8005cb8:	08005d53 	.word	0x08005d53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d046      	beq.n	8005d56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ccc:	e043      	b.n	8005d56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cd6:	d140      	bne.n	8005d5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cdc:	e03d      	b.n	8005d5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce6:	d121      	bne.n	8005d2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d837      	bhi.n	8005d5e <DMA_CheckFifoParam+0xda>
 8005cee:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <DMA_CheckFifoParam+0x70>)
 8005cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf4:	08005d05 	.word	0x08005d05
 8005cf8:	08005d0b 	.word	0x08005d0b
 8005cfc:	08005d05 	.word	0x08005d05
 8005d00:	08005d1d 	.word	0x08005d1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	73fb      	strb	r3, [r7, #15]
      break;
 8005d08:	e030      	b.n	8005d6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d025      	beq.n	8005d62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d1a:	e022      	b.n	8005d62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d24:	d11f      	bne.n	8005d66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d2a:	e01c      	b.n	8005d66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d903      	bls.n	8005d3a <DMA_CheckFifoParam+0xb6>
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d003      	beq.n	8005d40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d38:	e018      	b.n	8005d6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d3e:	e015      	b.n	8005d6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00e      	beq.n	8005d6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d50:	e00b      	b.n	8005d6a <DMA_CheckFifoParam+0xe6>
      break;
 8005d52:	bf00      	nop
 8005d54:	e00a      	b.n	8005d6c <DMA_CheckFifoParam+0xe8>
      break;
 8005d56:	bf00      	nop
 8005d58:	e008      	b.n	8005d6c <DMA_CheckFifoParam+0xe8>
      break;
 8005d5a:	bf00      	nop
 8005d5c:	e006      	b.n	8005d6c <DMA_CheckFifoParam+0xe8>
      break;
 8005d5e:	bf00      	nop
 8005d60:	e004      	b.n	8005d6c <DMA_CheckFifoParam+0xe8>
      break;
 8005d62:	bf00      	nop
 8005d64:	e002      	b.n	8005d6c <DMA_CheckFifoParam+0xe8>
      break;   
 8005d66:	bf00      	nop
 8005d68:	e000      	b.n	8005d6c <DMA_CheckFifoParam+0xe8>
      break;
 8005d6a:	bf00      	nop
    }
  } 
  
  return status; 
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop

08005d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b089      	sub	sp, #36	; 0x24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d92:	2300      	movs	r3, #0
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	e16b      	b.n	8006070 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d98:	2201      	movs	r2, #1
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4013      	ands	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	f040 815a 	bne.w	800606a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d005      	beq.n	8005dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d130      	bne.n	8005e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	2203      	movs	r2, #3
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	43db      	mvns	r3, r3
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	4013      	ands	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e04:	2201      	movs	r2, #1
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4013      	ands	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	091b      	lsrs	r3, r3, #4
 8005e1a:	f003 0201 	and.w	r2, r3, #1
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d017      	beq.n	8005e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	2203      	movs	r2, #3
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4013      	ands	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f003 0303 	and.w	r3, r3, #3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d123      	bne.n	8005ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	08da      	lsrs	r2, r3, #3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3208      	adds	r2, #8
 8005e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	220f      	movs	r2, #15
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	43db      	mvns	r3, r3
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	691a      	ldr	r2, [r3, #16]
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f003 0307 	and.w	r3, r3, #7
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	08da      	lsrs	r2, r3, #3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3208      	adds	r2, #8
 8005eba:	69b9      	ldr	r1, [r7, #24]
 8005ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	2203      	movs	r2, #3
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f003 0203 	and.w	r2, r3, #3
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80b4 	beq.w	800606a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f02:	2300      	movs	r3, #0
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	4b60      	ldr	r3, [pc, #384]	; (8006088 <HAL_GPIO_Init+0x30c>)
 8005f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f0a:	4a5f      	ldr	r2, [pc, #380]	; (8006088 <HAL_GPIO_Init+0x30c>)
 8005f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f10:	6453      	str	r3, [r2, #68]	; 0x44
 8005f12:	4b5d      	ldr	r3, [pc, #372]	; (8006088 <HAL_GPIO_Init+0x30c>)
 8005f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f1e:	4a5b      	ldr	r2, [pc, #364]	; (800608c <HAL_GPIO_Init+0x310>)
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	089b      	lsrs	r3, r3, #2
 8005f24:	3302      	adds	r3, #2
 8005f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	220f      	movs	r2, #15
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	43db      	mvns	r3, r3
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a52      	ldr	r2, [pc, #328]	; (8006090 <HAL_GPIO_Init+0x314>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d02b      	beq.n	8005fa2 <HAL_GPIO_Init+0x226>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a51      	ldr	r2, [pc, #324]	; (8006094 <HAL_GPIO_Init+0x318>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d025      	beq.n	8005f9e <HAL_GPIO_Init+0x222>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a50      	ldr	r2, [pc, #320]	; (8006098 <HAL_GPIO_Init+0x31c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d01f      	beq.n	8005f9a <HAL_GPIO_Init+0x21e>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a4f      	ldr	r2, [pc, #316]	; (800609c <HAL_GPIO_Init+0x320>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d019      	beq.n	8005f96 <HAL_GPIO_Init+0x21a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a4e      	ldr	r2, [pc, #312]	; (80060a0 <HAL_GPIO_Init+0x324>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d013      	beq.n	8005f92 <HAL_GPIO_Init+0x216>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a4d      	ldr	r2, [pc, #308]	; (80060a4 <HAL_GPIO_Init+0x328>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00d      	beq.n	8005f8e <HAL_GPIO_Init+0x212>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a4c      	ldr	r2, [pc, #304]	; (80060a8 <HAL_GPIO_Init+0x32c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d007      	beq.n	8005f8a <HAL_GPIO_Init+0x20e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a4b      	ldr	r2, [pc, #300]	; (80060ac <HAL_GPIO_Init+0x330>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d101      	bne.n	8005f86 <HAL_GPIO_Init+0x20a>
 8005f82:	2307      	movs	r3, #7
 8005f84:	e00e      	b.n	8005fa4 <HAL_GPIO_Init+0x228>
 8005f86:	2308      	movs	r3, #8
 8005f88:	e00c      	b.n	8005fa4 <HAL_GPIO_Init+0x228>
 8005f8a:	2306      	movs	r3, #6
 8005f8c:	e00a      	b.n	8005fa4 <HAL_GPIO_Init+0x228>
 8005f8e:	2305      	movs	r3, #5
 8005f90:	e008      	b.n	8005fa4 <HAL_GPIO_Init+0x228>
 8005f92:	2304      	movs	r3, #4
 8005f94:	e006      	b.n	8005fa4 <HAL_GPIO_Init+0x228>
 8005f96:	2303      	movs	r3, #3
 8005f98:	e004      	b.n	8005fa4 <HAL_GPIO_Init+0x228>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e002      	b.n	8005fa4 <HAL_GPIO_Init+0x228>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e000      	b.n	8005fa4 <HAL_GPIO_Init+0x228>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	f002 0203 	and.w	r2, r2, #3
 8005faa:	0092      	lsls	r2, r2, #2
 8005fac:	4093      	lsls	r3, r2
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fb4:	4935      	ldr	r1, [pc, #212]	; (800608c <HAL_GPIO_Init+0x310>)
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	089b      	lsrs	r3, r3, #2
 8005fba:	3302      	adds	r3, #2
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fc2:	4b3b      	ldr	r3, [pc, #236]	; (80060b0 <HAL_GPIO_Init+0x334>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005fe6:	4a32      	ldr	r2, [pc, #200]	; (80060b0 <HAL_GPIO_Init+0x334>)
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005fec:	4b30      	ldr	r3, [pc, #192]	; (80060b0 <HAL_GPIO_Init+0x334>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006010:	4a27      	ldr	r2, [pc, #156]	; (80060b0 <HAL_GPIO_Init+0x334>)
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006016:	4b26      	ldr	r3, [pc, #152]	; (80060b0 <HAL_GPIO_Init+0x334>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	43db      	mvns	r3, r3
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	4013      	ands	r3, r2
 8006024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800603a:	4a1d      	ldr	r2, [pc, #116]	; (80060b0 <HAL_GPIO_Init+0x334>)
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006040:	4b1b      	ldr	r3, [pc, #108]	; (80060b0 <HAL_GPIO_Init+0x334>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	43db      	mvns	r3, r3
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	4013      	ands	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006064:	4a12      	ldr	r2, [pc, #72]	; (80060b0 <HAL_GPIO_Init+0x334>)
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	3301      	adds	r3, #1
 800606e:	61fb      	str	r3, [r7, #28]
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	2b0f      	cmp	r3, #15
 8006074:	f67f ae90 	bls.w	8005d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006078:	bf00      	nop
 800607a:	bf00      	nop
 800607c:	3724      	adds	r7, #36	; 0x24
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	40023800 	.word	0x40023800
 800608c:	40013800 	.word	0x40013800
 8006090:	40020000 	.word	0x40020000
 8006094:	40020400 	.word	0x40020400
 8006098:	40020800 	.word	0x40020800
 800609c:	40020c00 	.word	0x40020c00
 80060a0:	40021000 	.word	0x40021000
 80060a4:	40021400 	.word	0x40021400
 80060a8:	40021800 	.word	0x40021800
 80060ac:	40021c00 	.word	0x40021c00
 80060b0:	40013c00 	.word	0x40013c00

080060b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	887b      	ldrh	r3, [r7, #2]
 80060c6:	4013      	ands	r3, r2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060cc:	2301      	movs	r3, #1
 80060ce:	73fb      	strb	r3, [r7, #15]
 80060d0:	e001      	b.n	80060d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060d2:	2300      	movs	r3, #0
 80060d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	807b      	strh	r3, [r7, #2]
 80060f0:	4613      	mov	r3, r2
 80060f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060f4:	787b      	ldrb	r3, [r7, #1]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060fa:	887a      	ldrh	r2, [r7, #2]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006100:	e003      	b.n	800610a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006102:	887b      	ldrh	r3, [r7, #2]
 8006104:	041a      	lsls	r2, r3, #16
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	619a      	str	r2, [r3, #24]
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006116:	b480      	push	{r7}
 8006118:	b085      	sub	sp, #20
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	460b      	mov	r3, r1
 8006120:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006128:	887a      	ldrh	r2, [r7, #2]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4013      	ands	r3, r2
 800612e:	041a      	lsls	r2, r3, #16
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	43d9      	mvns	r1, r3
 8006134:	887b      	ldrh	r3, [r7, #2]
 8006136:	400b      	ands	r3, r1
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	619a      	str	r2, [r3, #24]
}
 800613e:	bf00      	nop
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
	...

0800614c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	4603      	mov	r3, r0
 8006154:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006156:	4b08      	ldr	r3, [pc, #32]	; (8006178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006158:	695a      	ldr	r2, [r3, #20]
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	4013      	ands	r3, r2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d006      	beq.n	8006170 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006162:	4a05      	ldr	r2, [pc, #20]	; (8006178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006164:	88fb      	ldrh	r3, [r7, #6]
 8006166:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	4618      	mov	r0, r3
 800616c:	f7fb fcde 	bl	8001b2c <HAL_GPIO_EXTI_Callback>
  }
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40013c00 	.word	0x40013c00

0800617c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e267      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d075      	beq.n	8006286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800619a:	4b88      	ldr	r3, [pc, #544]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 030c 	and.w	r3, r3, #12
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d00c      	beq.n	80061c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061a6:	4b85      	ldr	r3, [pc, #532]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061ae:	2b08      	cmp	r3, #8
 80061b0:	d112      	bne.n	80061d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061b2:	4b82      	ldr	r3, [pc, #520]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061be:	d10b      	bne.n	80061d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c0:	4b7e      	ldr	r3, [pc, #504]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d05b      	beq.n	8006284 <HAL_RCC_OscConfig+0x108>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d157      	bne.n	8006284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e242      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e0:	d106      	bne.n	80061f0 <HAL_RCC_OscConfig+0x74>
 80061e2:	4b76      	ldr	r3, [pc, #472]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a75      	ldr	r2, [pc, #468]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80061e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	e01d      	b.n	800622c <HAL_RCC_OscConfig+0xb0>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061f8:	d10c      	bne.n	8006214 <HAL_RCC_OscConfig+0x98>
 80061fa:	4b70      	ldr	r3, [pc, #448]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a6f      	ldr	r2, [pc, #444]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	4b6d      	ldr	r3, [pc, #436]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a6c      	ldr	r2, [pc, #432]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 800620c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	e00b      	b.n	800622c <HAL_RCC_OscConfig+0xb0>
 8006214:	4b69      	ldr	r3, [pc, #420]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a68      	ldr	r2, [pc, #416]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 800621a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	4b66      	ldr	r3, [pc, #408]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a65      	ldr	r2, [pc, #404]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800622a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d013      	beq.n	800625c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006234:	f7fe f9c4 	bl	80045c0 <HAL_GetTick>
 8006238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800623a:	e008      	b.n	800624e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800623c:	f7fe f9c0 	bl	80045c0 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b64      	cmp	r3, #100	; 0x64
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e207      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800624e:	4b5b      	ldr	r3, [pc, #364]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0f0      	beq.n	800623c <HAL_RCC_OscConfig+0xc0>
 800625a:	e014      	b.n	8006286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800625c:	f7fe f9b0 	bl	80045c0 <HAL_GetTick>
 8006260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006262:	e008      	b.n	8006276 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006264:	f7fe f9ac 	bl	80045c0 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b64      	cmp	r3, #100	; 0x64
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e1f3      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006276:	4b51      	ldr	r3, [pc, #324]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1f0      	bne.n	8006264 <HAL_RCC_OscConfig+0xe8>
 8006282:	e000      	b.n	8006286 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d063      	beq.n	800635a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006292:	4b4a      	ldr	r3, [pc, #296]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 030c 	and.w	r3, r3, #12
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00b      	beq.n	80062b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800629e:	4b47      	ldr	r3, [pc, #284]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d11c      	bne.n	80062e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062aa:	4b44      	ldr	r3, [pc, #272]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d116      	bne.n	80062e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062b6:	4b41      	ldr	r3, [pc, #260]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d005      	beq.n	80062ce <HAL_RCC_OscConfig+0x152>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d001      	beq.n	80062ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e1c7      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ce:	4b3b      	ldr	r3, [pc, #236]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	4937      	ldr	r1, [pc, #220]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062e2:	e03a      	b.n	800635a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d020      	beq.n	800632e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062ec:	4b34      	ldr	r3, [pc, #208]	; (80063c0 <HAL_RCC_OscConfig+0x244>)
 80062ee:	2201      	movs	r2, #1
 80062f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f2:	f7fe f965 	bl	80045c0 <HAL_GetTick>
 80062f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062f8:	e008      	b.n	800630c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062fa:	f7fe f961 	bl	80045c0 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e1a8      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800630c:	4b2b      	ldr	r3, [pc, #172]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0f0      	beq.n	80062fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006318:	4b28      	ldr	r3, [pc, #160]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	4925      	ldr	r1, [pc, #148]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006328:	4313      	orrs	r3, r2
 800632a:	600b      	str	r3, [r1, #0]
 800632c:	e015      	b.n	800635a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800632e:	4b24      	ldr	r3, [pc, #144]	; (80063c0 <HAL_RCC_OscConfig+0x244>)
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006334:	f7fe f944 	bl	80045c0 <HAL_GetTick>
 8006338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800633c:	f7fe f940 	bl	80045c0 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e187      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800634e:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f0      	bne.n	800633c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d036      	beq.n	80063d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d016      	beq.n	800639c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800636e:	4b15      	ldr	r3, [pc, #84]	; (80063c4 <HAL_RCC_OscConfig+0x248>)
 8006370:	2201      	movs	r2, #1
 8006372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006374:	f7fe f924 	bl	80045c0 <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800637c:	f7fe f920 	bl	80045c0 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e167      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800638e:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <HAL_RCC_OscConfig+0x240>)
 8006390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d0f0      	beq.n	800637c <HAL_RCC_OscConfig+0x200>
 800639a:	e01b      	b.n	80063d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800639c:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <HAL_RCC_OscConfig+0x248>)
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063a2:	f7fe f90d 	bl	80045c0 <HAL_GetTick>
 80063a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063a8:	e00e      	b.n	80063c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063aa:	f7fe f909 	bl	80045c0 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d907      	bls.n	80063c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e150      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
 80063bc:	40023800 	.word	0x40023800
 80063c0:	42470000 	.word	0x42470000
 80063c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063c8:	4b88      	ldr	r3, [pc, #544]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 80063ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1ea      	bne.n	80063aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 8097 	beq.w	8006510 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063e2:	2300      	movs	r3, #0
 80063e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063e6:	4b81      	ldr	r3, [pc, #516]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10f      	bne.n	8006412 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063f2:	2300      	movs	r3, #0
 80063f4:	60bb      	str	r3, [r7, #8]
 80063f6:	4b7d      	ldr	r3, [pc, #500]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	4a7c      	ldr	r2, [pc, #496]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 80063fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006400:	6413      	str	r3, [r2, #64]	; 0x40
 8006402:	4b7a      	ldr	r3, [pc, #488]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640a:	60bb      	str	r3, [r7, #8]
 800640c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800640e:	2301      	movs	r3, #1
 8006410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006412:	4b77      	ldr	r3, [pc, #476]	; (80065f0 <HAL_RCC_OscConfig+0x474>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641a:	2b00      	cmp	r3, #0
 800641c:	d118      	bne.n	8006450 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800641e:	4b74      	ldr	r3, [pc, #464]	; (80065f0 <HAL_RCC_OscConfig+0x474>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a73      	ldr	r2, [pc, #460]	; (80065f0 <HAL_RCC_OscConfig+0x474>)
 8006424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800642a:	f7fe f8c9 	bl	80045c0 <HAL_GetTick>
 800642e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006432:	f7fe f8c5 	bl	80045c0 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e10c      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006444:	4b6a      	ldr	r3, [pc, #424]	; (80065f0 <HAL_RCC_OscConfig+0x474>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0f0      	beq.n	8006432 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d106      	bne.n	8006466 <HAL_RCC_OscConfig+0x2ea>
 8006458:	4b64      	ldr	r3, [pc, #400]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 800645a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645c:	4a63      	ldr	r2, [pc, #396]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 800645e:	f043 0301 	orr.w	r3, r3, #1
 8006462:	6713      	str	r3, [r2, #112]	; 0x70
 8006464:	e01c      	b.n	80064a0 <HAL_RCC_OscConfig+0x324>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	2b05      	cmp	r3, #5
 800646c:	d10c      	bne.n	8006488 <HAL_RCC_OscConfig+0x30c>
 800646e:	4b5f      	ldr	r3, [pc, #380]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 8006470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006472:	4a5e      	ldr	r2, [pc, #376]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 8006474:	f043 0304 	orr.w	r3, r3, #4
 8006478:	6713      	str	r3, [r2, #112]	; 0x70
 800647a:	4b5c      	ldr	r3, [pc, #368]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 800647c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647e:	4a5b      	ldr	r2, [pc, #364]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 8006480:	f043 0301 	orr.w	r3, r3, #1
 8006484:	6713      	str	r3, [r2, #112]	; 0x70
 8006486:	e00b      	b.n	80064a0 <HAL_RCC_OscConfig+0x324>
 8006488:	4b58      	ldr	r3, [pc, #352]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 800648a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648c:	4a57      	ldr	r2, [pc, #348]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 800648e:	f023 0301 	bic.w	r3, r3, #1
 8006492:	6713      	str	r3, [r2, #112]	; 0x70
 8006494:	4b55      	ldr	r3, [pc, #340]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 8006496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006498:	4a54      	ldr	r2, [pc, #336]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 800649a:	f023 0304 	bic.w	r3, r3, #4
 800649e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d015      	beq.n	80064d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a8:	f7fe f88a 	bl	80045c0 <HAL_GetTick>
 80064ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ae:	e00a      	b.n	80064c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064b0:	f7fe f886 	bl	80045c0 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80064be:	4293      	cmp	r3, r2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e0cb      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064c6:	4b49      	ldr	r3, [pc, #292]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 80064c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0ee      	beq.n	80064b0 <HAL_RCC_OscConfig+0x334>
 80064d2:	e014      	b.n	80064fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064d4:	f7fe f874 	bl	80045c0 <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064da:	e00a      	b.n	80064f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064dc:	f7fe f870 	bl	80045c0 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e0b5      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064f2:	4b3e      	ldr	r3, [pc, #248]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1ee      	bne.n	80064dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064fe:	7dfb      	ldrb	r3, [r7, #23]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d105      	bne.n	8006510 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006504:	4b39      	ldr	r3, [pc, #228]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	4a38      	ldr	r2, [pc, #224]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 800650a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800650e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 80a1 	beq.w	800665c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800651a:	4b34      	ldr	r3, [pc, #208]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 030c 	and.w	r3, r3, #12
 8006522:	2b08      	cmp	r3, #8
 8006524:	d05c      	beq.n	80065e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	2b02      	cmp	r3, #2
 800652c:	d141      	bne.n	80065b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800652e:	4b31      	ldr	r3, [pc, #196]	; (80065f4 <HAL_RCC_OscConfig+0x478>)
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006534:	f7fe f844 	bl	80045c0 <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800653a:	e008      	b.n	800654e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800653c:	f7fe f840 	bl	80045c0 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e087      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800654e:	4b27      	ldr	r3, [pc, #156]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1f0      	bne.n	800653c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69da      	ldr	r2, [r3, #28]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	019b      	lsls	r3, r3, #6
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006570:	085b      	lsrs	r3, r3, #1
 8006572:	3b01      	subs	r3, #1
 8006574:	041b      	lsls	r3, r3, #16
 8006576:	431a      	orrs	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	061b      	lsls	r3, r3, #24
 800657e:	491b      	ldr	r1, [pc, #108]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 8006580:	4313      	orrs	r3, r2
 8006582:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006584:	4b1b      	ldr	r3, [pc, #108]	; (80065f4 <HAL_RCC_OscConfig+0x478>)
 8006586:	2201      	movs	r2, #1
 8006588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658a:	f7fe f819 	bl	80045c0 <HAL_GetTick>
 800658e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006590:	e008      	b.n	80065a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006592:	f7fe f815 	bl	80045c0 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e05c      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a4:	4b11      	ldr	r3, [pc, #68]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0f0      	beq.n	8006592 <HAL_RCC_OscConfig+0x416>
 80065b0:	e054      	b.n	800665c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b2:	4b10      	ldr	r3, [pc, #64]	; (80065f4 <HAL_RCC_OscConfig+0x478>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b8:	f7fe f802 	bl	80045c0 <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065c0:	f7fd fffe 	bl	80045c0 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e045      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d2:	4b06      	ldr	r3, [pc, #24]	; (80065ec <HAL_RCC_OscConfig+0x470>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x444>
 80065de:	e03d      	b.n	800665c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d107      	bne.n	80065f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e038      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
 80065ec:	40023800 	.word	0x40023800
 80065f0:	40007000 	.word	0x40007000
 80065f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065f8:	4b1b      	ldr	r3, [pc, #108]	; (8006668 <HAL_RCC_OscConfig+0x4ec>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d028      	beq.n	8006658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006610:	429a      	cmp	r2, r3
 8006612:	d121      	bne.n	8006658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800661e:	429a      	cmp	r2, r3
 8006620:	d11a      	bne.n	8006658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006628:	4013      	ands	r3, r2
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800662e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006630:	4293      	cmp	r3, r2
 8006632:	d111      	bne.n	8006658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	3b01      	subs	r3, #1
 8006642:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006644:	429a      	cmp	r2, r3
 8006646:	d107      	bne.n	8006658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006652:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006654:	429a      	cmp	r2, r3
 8006656:	d001      	beq.n	800665c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	40023800 	.word	0x40023800

0800666c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e0cc      	b.n	800681a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006680:	4b68      	ldr	r3, [pc, #416]	; (8006824 <HAL_RCC_ClockConfig+0x1b8>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d90c      	bls.n	80066a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800668e:	4b65      	ldr	r3, [pc, #404]	; (8006824 <HAL_RCC_ClockConfig+0x1b8>)
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006696:	4b63      	ldr	r3, [pc, #396]	; (8006824 <HAL_RCC_ClockConfig+0x1b8>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d001      	beq.n	80066a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e0b8      	b.n	800681a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d020      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066c0:	4b59      	ldr	r3, [pc, #356]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	4a58      	ldr	r2, [pc, #352]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0308 	and.w	r3, r3, #8
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066d8:	4b53      	ldr	r3, [pc, #332]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	4a52      	ldr	r2, [pc, #328]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80066de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066e4:	4b50      	ldr	r3, [pc, #320]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	494d      	ldr	r1, [pc, #308]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d044      	beq.n	800678c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d107      	bne.n	800671a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800670a:	4b47      	ldr	r3, [pc, #284]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d119      	bne.n	800674a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e07f      	b.n	800681a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d003      	beq.n	800672a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006726:	2b03      	cmp	r3, #3
 8006728:	d107      	bne.n	800673a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800672a:	4b3f      	ldr	r3, [pc, #252]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d109      	bne.n	800674a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e06f      	b.n	800681a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800673a:	4b3b      	ldr	r3, [pc, #236]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e067      	b.n	800681a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800674a:	4b37      	ldr	r3, [pc, #220]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f023 0203 	bic.w	r2, r3, #3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	4934      	ldr	r1, [pc, #208]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 8006758:	4313      	orrs	r3, r2
 800675a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800675c:	f7fd ff30 	bl	80045c0 <HAL_GetTick>
 8006760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006762:	e00a      	b.n	800677a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006764:	f7fd ff2c 	bl	80045c0 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006772:	4293      	cmp	r3, r2
 8006774:	d901      	bls.n	800677a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e04f      	b.n	800681a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800677a:	4b2b      	ldr	r3, [pc, #172]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 020c 	and.w	r2, r3, #12
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	429a      	cmp	r2, r3
 800678a:	d1eb      	bne.n	8006764 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800678c:	4b25      	ldr	r3, [pc, #148]	; (8006824 <HAL_RCC_ClockConfig+0x1b8>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0307 	and.w	r3, r3, #7
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d20c      	bcs.n	80067b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800679a:	4b22      	ldr	r3, [pc, #136]	; (8006824 <HAL_RCC_ClockConfig+0x1b8>)
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a2:	4b20      	ldr	r3, [pc, #128]	; (8006824 <HAL_RCC_ClockConfig+0x1b8>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0307 	and.w	r3, r3, #7
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d001      	beq.n	80067b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e032      	b.n	800681a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0304 	and.w	r3, r3, #4
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d008      	beq.n	80067d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067c0:	4b19      	ldr	r3, [pc, #100]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	4916      	ldr	r1, [pc, #88]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d009      	beq.n	80067f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067de:	4b12      	ldr	r3, [pc, #72]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	490e      	ldr	r1, [pc, #56]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067f2:	f000 f821 	bl	8006838 <HAL_RCC_GetSysClockFreq>
 80067f6:	4602      	mov	r2, r0
 80067f8:	4b0b      	ldr	r3, [pc, #44]	; (8006828 <HAL_RCC_ClockConfig+0x1bc>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	091b      	lsrs	r3, r3, #4
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	490a      	ldr	r1, [pc, #40]	; (800682c <HAL_RCC_ClockConfig+0x1c0>)
 8006804:	5ccb      	ldrb	r3, [r1, r3]
 8006806:	fa22 f303 	lsr.w	r3, r2, r3
 800680a:	4a09      	ldr	r2, [pc, #36]	; (8006830 <HAL_RCC_ClockConfig+0x1c4>)
 800680c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800680e:	4b09      	ldr	r3, [pc, #36]	; (8006834 <HAL_RCC_ClockConfig+0x1c8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4618      	mov	r0, r3
 8006814:	f7fc ffb0 	bl	8003778 <HAL_InitTick>

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40023c00 	.word	0x40023c00
 8006828:	40023800 	.word	0x40023800
 800682c:	08012198 	.word	0x08012198
 8006830:	20000090 	.word	0x20000090
 8006834:	20000094 	.word	0x20000094

08006838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800683c:	b090      	sub	sp, #64	; 0x40
 800683e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	637b      	str	r3, [r7, #52]	; 0x34
 8006844:	2300      	movs	r3, #0
 8006846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006848:	2300      	movs	r3, #0
 800684a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006850:	4b59      	ldr	r3, [pc, #356]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 030c 	and.w	r3, r3, #12
 8006858:	2b08      	cmp	r3, #8
 800685a:	d00d      	beq.n	8006878 <HAL_RCC_GetSysClockFreq+0x40>
 800685c:	2b08      	cmp	r3, #8
 800685e:	f200 80a1 	bhi.w	80069a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <HAL_RCC_GetSysClockFreq+0x34>
 8006866:	2b04      	cmp	r3, #4
 8006868:	d003      	beq.n	8006872 <HAL_RCC_GetSysClockFreq+0x3a>
 800686a:	e09b      	b.n	80069a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800686c:	4b53      	ldr	r3, [pc, #332]	; (80069bc <HAL_RCC_GetSysClockFreq+0x184>)
 800686e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006870:	e09b      	b.n	80069aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006872:	4b53      	ldr	r3, [pc, #332]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006874:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006876:	e098      	b.n	80069aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006878:	4b4f      	ldr	r3, [pc, #316]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006880:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006882:	4b4d      	ldr	r3, [pc, #308]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d028      	beq.n	80068e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800688e:	4b4a      	ldr	r3, [pc, #296]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	099b      	lsrs	r3, r3, #6
 8006894:	2200      	movs	r2, #0
 8006896:	623b      	str	r3, [r7, #32]
 8006898:	627a      	str	r2, [r7, #36]	; 0x24
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80068a0:	2100      	movs	r1, #0
 80068a2:	4b47      	ldr	r3, [pc, #284]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80068a4:	fb03 f201 	mul.w	r2, r3, r1
 80068a8:	2300      	movs	r3, #0
 80068aa:	fb00 f303 	mul.w	r3, r0, r3
 80068ae:	4413      	add	r3, r2
 80068b0:	4a43      	ldr	r2, [pc, #268]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80068b2:	fba0 1202 	umull	r1, r2, r0, r2
 80068b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068b8:	460a      	mov	r2, r1
 80068ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80068bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068be:	4413      	add	r3, r2
 80068c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c4:	2200      	movs	r2, #0
 80068c6:	61bb      	str	r3, [r7, #24]
 80068c8:	61fa      	str	r2, [r7, #28]
 80068ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80068d2:	f7fa f969 	bl	8000ba8 <__aeabi_uldivmod>
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	4613      	mov	r3, r2
 80068dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068de:	e053      	b.n	8006988 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068e0:	4b35      	ldr	r3, [pc, #212]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	099b      	lsrs	r3, r3, #6
 80068e6:	2200      	movs	r2, #0
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	617a      	str	r2, [r7, #20]
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80068f2:	f04f 0b00 	mov.w	fp, #0
 80068f6:	4652      	mov	r2, sl
 80068f8:	465b      	mov	r3, fp
 80068fa:	f04f 0000 	mov.w	r0, #0
 80068fe:	f04f 0100 	mov.w	r1, #0
 8006902:	0159      	lsls	r1, r3, #5
 8006904:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006908:	0150      	lsls	r0, r2, #5
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	ebb2 080a 	subs.w	r8, r2, sl
 8006912:	eb63 090b 	sbc.w	r9, r3, fp
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	f04f 0300 	mov.w	r3, #0
 800691e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006922:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006926:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800692a:	ebb2 0408 	subs.w	r4, r2, r8
 800692e:	eb63 0509 	sbc.w	r5, r3, r9
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	f04f 0300 	mov.w	r3, #0
 800693a:	00eb      	lsls	r3, r5, #3
 800693c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006940:	00e2      	lsls	r2, r4, #3
 8006942:	4614      	mov	r4, r2
 8006944:	461d      	mov	r5, r3
 8006946:	eb14 030a 	adds.w	r3, r4, sl
 800694a:	603b      	str	r3, [r7, #0]
 800694c:	eb45 030b 	adc.w	r3, r5, fp
 8006950:	607b      	str	r3, [r7, #4]
 8006952:	f04f 0200 	mov.w	r2, #0
 8006956:	f04f 0300 	mov.w	r3, #0
 800695a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800695e:	4629      	mov	r1, r5
 8006960:	028b      	lsls	r3, r1, #10
 8006962:	4621      	mov	r1, r4
 8006964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006968:	4621      	mov	r1, r4
 800696a:	028a      	lsls	r2, r1, #10
 800696c:	4610      	mov	r0, r2
 800696e:	4619      	mov	r1, r3
 8006970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006972:	2200      	movs	r2, #0
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	60fa      	str	r2, [r7, #12]
 8006978:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800697c:	f7fa f914 	bl	8000ba8 <__aeabi_uldivmod>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4613      	mov	r3, r2
 8006986:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006988:	4b0b      	ldr	r3, [pc, #44]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	0c1b      	lsrs	r3, r3, #16
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	3301      	adds	r3, #1
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006998:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069a2:	e002      	b.n	80069aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069a4:	4b05      	ldr	r3, [pc, #20]	; (80069bc <HAL_RCC_GetSysClockFreq+0x184>)
 80069a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3740      	adds	r7, #64	; 0x40
 80069b0:	46bd      	mov	sp, r7
 80069b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069b6:	bf00      	nop
 80069b8:	40023800 	.word	0x40023800
 80069bc:	00f42400 	.word	0x00f42400
 80069c0:	00b71b00 	.word	0x00b71b00

080069c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069c4:	b480      	push	{r7}
 80069c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069c8:	4b03      	ldr	r3, [pc, #12]	; (80069d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80069ca:	681b      	ldr	r3, [r3, #0]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	20000090 	.word	0x20000090

080069dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069e0:	f7ff fff0 	bl	80069c4 <HAL_RCC_GetHCLKFreq>
 80069e4:	4602      	mov	r2, r0
 80069e6:	4b05      	ldr	r3, [pc, #20]	; (80069fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	0a9b      	lsrs	r3, r3, #10
 80069ec:	f003 0307 	and.w	r3, r3, #7
 80069f0:	4903      	ldr	r1, [pc, #12]	; (8006a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069f2:	5ccb      	ldrb	r3, [r1, r3]
 80069f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	40023800 	.word	0x40023800
 8006a00:	080121a8 	.word	0x080121a8

08006a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a08:	f7ff ffdc 	bl	80069c4 <HAL_RCC_GetHCLKFreq>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	0b5b      	lsrs	r3, r3, #13
 8006a14:	f003 0307 	and.w	r3, r3, #7
 8006a18:	4903      	ldr	r1, [pc, #12]	; (8006a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a1a:	5ccb      	ldrb	r3, [r1, r3]
 8006a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	40023800 	.word	0x40023800
 8006a28:	080121a8 	.word	0x080121a8

08006a2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	220f      	movs	r2, #15
 8006a3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a3c:	4b12      	ldr	r3, [pc, #72]	; (8006a88 <HAL_RCC_GetClockConfig+0x5c>)
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f003 0203 	and.w	r2, r3, #3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a48:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <HAL_RCC_GetClockConfig+0x5c>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a54:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <HAL_RCC_GetClockConfig+0x5c>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a60:	4b09      	ldr	r3, [pc, #36]	; (8006a88 <HAL_RCC_GetClockConfig+0x5c>)
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	08db      	lsrs	r3, r3, #3
 8006a66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a6e:	4b07      	ldr	r3, [pc, #28]	; (8006a8c <HAL_RCC_GetClockConfig+0x60>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0207 	and.w	r2, r3, #7
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	601a      	str	r2, [r3, #0]
}
 8006a7a:	bf00      	nop
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40023800 	.word	0x40023800
 8006a8c:	40023c00 	.word	0x40023c00

08006a90 <HAL_SMBUS_Init>:
  * @param  hsmbus pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60bb      	str	r3, [r7, #8]

  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_SMBUS_Init+0x1a>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e0a1      	b.n	8006bee <HAL_SMBUS_Init+0x15e>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d106      	bne.n	8006ac4 <HAL_SMBUS_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7fc fc1e 	bl	8003300 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2224      	movs	r2, #36	; 0x24
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0201 	bic.w	r2, r2, #1
 8006ada:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006adc:	f7ff ff7e 	bl	80069dc <HAL_RCC_GetPCLK1Freq>
 8006ae0:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = SMBUS_FREQRANGE(pclk1);
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	4a44      	ldr	r2, [pc, #272]	; (8006bf8 <HAL_SMBUS_Init+0x168>)
 8006ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aea:	0c9b      	lsrs	r3, r3, #18
 8006aec:	60fb      	str	r3, [r7, #12]

  /*---------------------------- SMBUSx CR2 Configuration ----------------------*/
  /* Configure SMBUSx: Frequency range */
  MODIFY_REG(hsmbus->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx TRISE Configuration --------------------*/
  /* Configure SMBUSx: Rise Time */
  MODIFY_REG(hsmbus->Instance->TRISE, I2C_TRISE_TRISE, SMBUS_RISE_TIME(freqrange));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	621a      	str	r2, [r3, #32]

  /*---------------------------- SMBUSx CCR Configuration ----------------------*/
  /* Configure SMBUSx: Speed */
  MODIFY_REG(hsmbus->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), SMBUS_SPEED_STANDARD(pclk1, hsmbus->Init.ClockSpeed));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8006b22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6852      	ldr	r2, [r2, #4]
 8006b2a:	0052      	lsls	r2, r2, #1
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	fbb1 f1f2 	udiv	r1, r1, r2
 8006b32:	f640 72fc 	movw	r2, #4092	; 0xffc
 8006b36:	400a      	ands	r2, r1
 8006b38:	2a00      	cmp	r2, #0
 8006b3a:	d006      	beq.n	8006b4a <HAL_SMBUS_Init+0xba>
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	6852      	ldr	r2, [r2, #4]
 8006b40:	0052      	lsls	r2, r2, #1
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	fbb1 f2f2 	udiv	r2, r1, r2
 8006b48:	e000      	b.n	8006b4c <HAL_SMBUS_Init+0xbc>
 8006b4a:	2204      	movs	r2, #4
 8006b4c:	6879      	ldr	r1, [r7, #4]
 8006b4e:	6809      	ldr	r1, [r1, #0]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- SMBUSx CR1 Configuration ----------------------*/
  /* Configure SMBUSx: Generalcall , PEC , Peripheral mode and  NoStretch mode */
  MODIFY_REG(hsmbus->Instance->CR1, (I2C_CR1_NOSTRETCH | I2C_CR1_ENGC | I2C_CR1_ENPEC | I2C_CR1_ENARP | I2C_CR1_SMBTYPE | I2C_CR1_SMBUS), (hsmbus->Init.NoStretchMode | hsmbus->Init.GeneralCallMode |  hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f023 01fa 	bic.w	r1, r3, #250	; 0xfa
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1a      	ldr	r2, [r3, #32]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b72:	431a      	orrs	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx OAR1 Configuration ---------------------*/
  /* Configure SMBUSx: Own Address1 and addressing mode */
  MODIFY_REG(hsmbus->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hsmbus->Init.AddressingMode | hsmbus->Init.OwnAddress1));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6911      	ldr	r1, [r2, #16]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	68d2      	ldr	r2, [r2, #12]
 8006b92:	4311      	orrs	r1, r2
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6812      	ldr	r2, [r2, #0]
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- SMBUSx OAR2 Configuration ---------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  MODIFY_REG(hsmbus->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	695a      	ldr	r2, [r3, #20]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	60da      	str	r2, [r3, #12]
  /* Configure SMBUSx: Analog noise filter */
  SET_BIT(hsmbus->Instance->FLTR, hsmbus->Init.AnalogFilter);
#endif

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0201 	orr.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hsmbus->PreviousState = SMBUS_STATE_NONE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	639a      	str	r2, [r3, #56]	; 0x38
  hsmbus->Mode = HAL_SMBUS_MODE_NONE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hsmbus->XferPEC = 0x00;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	431bde83 	.word	0x431bde83

08006bfc <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *         the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  SET_BIT(hsmbus->Instance->CR1, I2C_CR1_ALERT);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c12:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_SMBALERT);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8006c1c:	615a      	str	r2, [r3, #20]

  /* Enable Alert Interrupt */
  __HAL_SMBUS_ENABLE_IT(hsmbus, SMBUS_IT_ERR);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c2c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e041      	b.n	8006cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7fd f968 	bl	8003f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3304      	adds	r3, #4
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	f001 f812 	bl	8007ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d001      	beq.n	8006cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e04e      	b.n	8006d92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a23      	ldr	r2, [pc, #140]	; (8006da0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d022      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1e:	d01d      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a1f      	ldr	r2, [pc, #124]	; (8006da4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d018      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1e      	ldr	r2, [pc, #120]	; (8006da8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d013      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1c      	ldr	r2, [pc, #112]	; (8006dac <HAL_TIM_Base_Start_IT+0xd0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00e      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1b      	ldr	r2, [pc, #108]	; (8006db0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d009      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a19      	ldr	r2, [pc, #100]	; (8006db4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d004      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a18      	ldr	r2, [pc, #96]	; (8006db8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d111      	bne.n	8006d80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b06      	cmp	r3, #6
 8006d6c:	d010      	beq.n	8006d90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0201 	orr.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d7e:	e007      	b.n	8006d90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 0201 	orr.w	r2, r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	40010000 	.word	0x40010000
 8006da4:	40000400 	.word	0x40000400
 8006da8:	40000800 	.word	0x40000800
 8006dac:	40000c00 	.word	0x40000c00
 8006db0:	40010400 	.word	0x40010400
 8006db4:	40014000 	.word	0x40014000
 8006db8:	40001800 	.word	0x40001800

08006dbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e041      	b.n	8006e52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d106      	bne.n	8006de8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fd f860 	bl	8003ea8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	f000 ff52 	bl	8007ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
	...

08006e5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d109      	bne.n	8006e80 <HAL_TIM_PWM_Start+0x24>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	bf14      	ite	ne
 8006e78:	2301      	movne	r3, #1
 8006e7a:	2300      	moveq	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	e022      	b.n	8006ec6 <HAL_TIM_PWM_Start+0x6a>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d109      	bne.n	8006e9a <HAL_TIM_PWM_Start+0x3e>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	bf14      	ite	ne
 8006e92:	2301      	movne	r3, #1
 8006e94:	2300      	moveq	r3, #0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	e015      	b.n	8006ec6 <HAL_TIM_PWM_Start+0x6a>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d109      	bne.n	8006eb4 <HAL_TIM_PWM_Start+0x58>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	bf14      	ite	ne
 8006eac:	2301      	movne	r3, #1
 8006eae:	2300      	moveq	r3, #0
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	e008      	b.n	8006ec6 <HAL_TIM_PWM_Start+0x6a>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	bf14      	ite	ne
 8006ec0:	2301      	movne	r3, #1
 8006ec2:	2300      	moveq	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e07c      	b.n	8006fc8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d104      	bne.n	8006ede <HAL_TIM_PWM_Start+0x82>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006edc:	e013      	b.n	8006f06 <HAL_TIM_PWM_Start+0xaa>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	d104      	bne.n	8006eee <HAL_TIM_PWM_Start+0x92>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eec:	e00b      	b.n	8006f06 <HAL_TIM_PWM_Start+0xaa>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d104      	bne.n	8006efe <HAL_TIM_PWM_Start+0xa2>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006efc:	e003      	b.n	8006f06 <HAL_TIM_PWM_Start+0xaa>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2202      	movs	r2, #2
 8006f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 fadc 	bl	80084cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a2d      	ldr	r2, [pc, #180]	; (8006fd0 <HAL_TIM_PWM_Start+0x174>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d004      	beq.n	8006f28 <HAL_TIM_PWM_Start+0xcc>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a2c      	ldr	r2, [pc, #176]	; (8006fd4 <HAL_TIM_PWM_Start+0x178>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d101      	bne.n	8006f2c <HAL_TIM_PWM_Start+0xd0>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e000      	b.n	8006f2e <HAL_TIM_PWM_Start+0xd2>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d007      	beq.n	8006f42 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a22      	ldr	r2, [pc, #136]	; (8006fd0 <HAL_TIM_PWM_Start+0x174>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d022      	beq.n	8006f92 <HAL_TIM_PWM_Start+0x136>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f54:	d01d      	beq.n	8006f92 <HAL_TIM_PWM_Start+0x136>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1f      	ldr	r2, [pc, #124]	; (8006fd8 <HAL_TIM_PWM_Start+0x17c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d018      	beq.n	8006f92 <HAL_TIM_PWM_Start+0x136>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1d      	ldr	r2, [pc, #116]	; (8006fdc <HAL_TIM_PWM_Start+0x180>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d013      	beq.n	8006f92 <HAL_TIM_PWM_Start+0x136>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <HAL_TIM_PWM_Start+0x184>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d00e      	beq.n	8006f92 <HAL_TIM_PWM_Start+0x136>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a16      	ldr	r2, [pc, #88]	; (8006fd4 <HAL_TIM_PWM_Start+0x178>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d009      	beq.n	8006f92 <HAL_TIM_PWM_Start+0x136>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a18      	ldr	r2, [pc, #96]	; (8006fe4 <HAL_TIM_PWM_Start+0x188>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d004      	beq.n	8006f92 <HAL_TIM_PWM_Start+0x136>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a16      	ldr	r2, [pc, #88]	; (8006fe8 <HAL_TIM_PWM_Start+0x18c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d111      	bne.n	8006fb6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b06      	cmp	r3, #6
 8006fa2:	d010      	beq.n	8006fc6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0201 	orr.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb4:	e007      	b.n	8006fc6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f042 0201 	orr.w	r2, r2, #1
 8006fc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	40010000 	.word	0x40010000
 8006fd4:	40010400 	.word	0x40010400
 8006fd8:	40000400 	.word	0x40000400
 8006fdc:	40000800 	.word	0x40000800
 8006fe0:	40000c00 	.word	0x40000c00
 8006fe4:	40014000 	.word	0x40014000
 8006fe8:	40001800 	.word	0x40001800

08006fec <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d109      	bne.n	8007018 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	bf0c      	ite	eq
 8007010:	2301      	moveq	r3, #1
 8007012:	2300      	movne	r3, #0
 8007014:	b2db      	uxtb	r3, r3
 8007016:	e022      	b.n	800705e <HAL_TIM_PWM_Start_DMA+0x72>
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	2b04      	cmp	r3, #4
 800701c:	d109      	bne.n	8007032 <HAL_TIM_PWM_Start_DMA+0x46>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b02      	cmp	r3, #2
 8007028:	bf0c      	ite	eq
 800702a:	2301      	moveq	r3, #1
 800702c:	2300      	movne	r3, #0
 800702e:	b2db      	uxtb	r3, r3
 8007030:	e015      	b.n	800705e <HAL_TIM_PWM_Start_DMA+0x72>
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b08      	cmp	r3, #8
 8007036:	d109      	bne.n	800704c <HAL_TIM_PWM_Start_DMA+0x60>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b02      	cmp	r3, #2
 8007042:	bf0c      	ite	eq
 8007044:	2301      	moveq	r3, #1
 8007046:	2300      	movne	r3, #0
 8007048:	b2db      	uxtb	r3, r3
 800704a:	e008      	b.n	800705e <HAL_TIM_PWM_Start_DMA+0x72>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b02      	cmp	r3, #2
 8007056:	bf0c      	ite	eq
 8007058:	2301      	moveq	r3, #1
 800705a:	2300      	movne	r3, #0
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8007062:	2302      	movs	r3, #2
 8007064:	e171      	b.n	800734a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d109      	bne.n	8007080 <HAL_TIM_PWM_Start_DMA+0x94>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b01      	cmp	r3, #1
 8007076:	bf0c      	ite	eq
 8007078:	2301      	moveq	r3, #1
 800707a:	2300      	movne	r3, #0
 800707c:	b2db      	uxtb	r3, r3
 800707e:	e022      	b.n	80070c6 <HAL_TIM_PWM_Start_DMA+0xda>
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2b04      	cmp	r3, #4
 8007084:	d109      	bne.n	800709a <HAL_TIM_PWM_Start_DMA+0xae>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b01      	cmp	r3, #1
 8007090:	bf0c      	ite	eq
 8007092:	2301      	moveq	r3, #1
 8007094:	2300      	movne	r3, #0
 8007096:	b2db      	uxtb	r3, r3
 8007098:	e015      	b.n	80070c6 <HAL_TIM_PWM_Start_DMA+0xda>
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2b08      	cmp	r3, #8
 800709e:	d109      	bne.n	80070b4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	bf0c      	ite	eq
 80070ac:	2301      	moveq	r3, #1
 80070ae:	2300      	movne	r3, #0
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	e008      	b.n	80070c6 <HAL_TIM_PWM_Start_DMA+0xda>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b01      	cmp	r3, #1
 80070be:	bf0c      	ite	eq
 80070c0:	2301      	moveq	r3, #1
 80070c2:	2300      	movne	r3, #0
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d024      	beq.n	8007114 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <HAL_TIM_PWM_Start_DMA+0xee>
 80070d0:	887b      	ldrh	r3, [r7, #2]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e137      	b.n	800734a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d104      	bne.n	80070ea <HAL_TIM_PWM_Start_DMA+0xfe>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070e8:	e016      	b.n	8007118 <HAL_TIM_PWM_Start_DMA+0x12c>
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	d104      	bne.n	80070fa <HAL_TIM_PWM_Start_DMA+0x10e>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070f8:	e00e      	b.n	8007118 <HAL_TIM_PWM_Start_DMA+0x12c>
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d104      	bne.n	800710a <HAL_TIM_PWM_Start_DMA+0x11e>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007108:	e006      	b.n	8007118 <HAL_TIM_PWM_Start_DMA+0x12c>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2202      	movs	r2, #2
 800710e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007112:	e001      	b.n	8007118 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e118      	b.n	800734a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2b0c      	cmp	r3, #12
 800711c:	f200 80ae 	bhi.w	800727c <HAL_TIM_PWM_Start_DMA+0x290>
 8007120:	a201      	add	r2, pc, #4	; (adr r2, 8007128 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8007122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007126:	bf00      	nop
 8007128:	0800715d 	.word	0x0800715d
 800712c:	0800727d 	.word	0x0800727d
 8007130:	0800727d 	.word	0x0800727d
 8007134:	0800727d 	.word	0x0800727d
 8007138:	080071a5 	.word	0x080071a5
 800713c:	0800727d 	.word	0x0800727d
 8007140:	0800727d 	.word	0x0800727d
 8007144:	0800727d 	.word	0x0800727d
 8007148:	080071ed 	.word	0x080071ed
 800714c:	0800727d 	.word	0x0800727d
 8007150:	0800727d 	.word	0x0800727d
 8007154:	0800727d 	.word	0x0800727d
 8007158:	08007235 	.word	0x08007235
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	4a7c      	ldr	r2, [pc, #496]	; (8007354 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007162:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	4a7b      	ldr	r2, [pc, #492]	; (8007358 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800716a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	4a7a      	ldr	r2, [pc, #488]	; (800735c <HAL_TIM_PWM_Start_DMA+0x370>)
 8007172:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007178:	6879      	ldr	r1, [r7, #4]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3334      	adds	r3, #52	; 0x34
 8007180:	461a      	mov	r2, r3
 8007182:	887b      	ldrh	r3, [r7, #2]
 8007184:	f7fe faa6 	bl	80056d4 <HAL_DMA_Start_IT>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e0db      	b.n	800734a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071a0:	60da      	str	r2, [r3, #12]
      break;
 80071a2:	e06e      	b.n	8007282 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a8:	4a6a      	ldr	r2, [pc, #424]	; (8007354 <HAL_TIM_PWM_Start_DMA+0x368>)
 80071aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b0:	4a69      	ldr	r2, [pc, #420]	; (8007358 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80071b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b8:	4a68      	ldr	r2, [pc, #416]	; (800735c <HAL_TIM_PWM_Start_DMA+0x370>)
 80071ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80071c0:	6879      	ldr	r1, [r7, #4]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3338      	adds	r3, #56	; 0x38
 80071c8:	461a      	mov	r2, r3
 80071ca:	887b      	ldrh	r3, [r7, #2]
 80071cc:	f7fe fa82 	bl	80056d4 <HAL_DMA_Start_IT>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e0b7      	b.n	800734a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071e8:	60da      	str	r2, [r3, #12]
      break;
 80071ea:	e04a      	b.n	8007282 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	4a58      	ldr	r2, [pc, #352]	; (8007354 <HAL_TIM_PWM_Start_DMA+0x368>)
 80071f2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	4a57      	ldr	r2, [pc, #348]	; (8007358 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80071fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	4a56      	ldr	r2, [pc, #344]	; (800735c <HAL_TIM_PWM_Start_DMA+0x370>)
 8007202:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007208:	6879      	ldr	r1, [r7, #4]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	333c      	adds	r3, #60	; 0x3c
 8007210:	461a      	mov	r2, r3
 8007212:	887b      	ldrh	r3, [r7, #2]
 8007214:	f7fe fa5e 	bl	80056d4 <HAL_DMA_Start_IT>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e093      	b.n	800734a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68da      	ldr	r2, [r3, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007230:	60da      	str	r2, [r3, #12]
      break;
 8007232:	e026      	b.n	8007282 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007238:	4a46      	ldr	r2, [pc, #280]	; (8007354 <HAL_TIM_PWM_Start_DMA+0x368>)
 800723a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007240:	4a45      	ldr	r2, [pc, #276]	; (8007358 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	4a44      	ldr	r2, [pc, #272]	; (800735c <HAL_TIM_PWM_Start_DMA+0x370>)
 800724a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007250:	6879      	ldr	r1, [r7, #4]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3340      	adds	r3, #64	; 0x40
 8007258:	461a      	mov	r2, r3
 800725a:	887b      	ldrh	r3, [r7, #2]
 800725c:	f7fe fa3a 	bl	80056d4 <HAL_DMA_Start_IT>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e06f      	b.n	800734a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007278:	60da      	str	r2, [r3, #12]
      break;
 800727a:	e002      	b.n	8007282 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	75fb      	strb	r3, [r7, #23]
      break;
 8007280:	bf00      	nop
  }

  if (status == HAL_OK)
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d15f      	bne.n	8007348 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2201      	movs	r2, #1
 800728e:	68b9      	ldr	r1, [r7, #8]
 8007290:	4618      	mov	r0, r3
 8007292:	f001 f91b 	bl	80084cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a31      	ldr	r2, [pc, #196]	; (8007360 <HAL_TIM_PWM_Start_DMA+0x374>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d004      	beq.n	80072aa <HAL_TIM_PWM_Start_DMA+0x2be>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a2f      	ldr	r2, [pc, #188]	; (8007364 <HAL_TIM_PWM_Start_DMA+0x378>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d101      	bne.n	80072ae <HAL_TIM_PWM_Start_DMA+0x2c2>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e000      	b.n	80072b0 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80072ae:	2300      	movs	r3, #0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d007      	beq.n	80072c4 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072c2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a25      	ldr	r2, [pc, #148]	; (8007360 <HAL_TIM_PWM_Start_DMA+0x374>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d022      	beq.n	8007314 <HAL_TIM_PWM_Start_DMA+0x328>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d6:	d01d      	beq.n	8007314 <HAL_TIM_PWM_Start_DMA+0x328>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a22      	ldr	r2, [pc, #136]	; (8007368 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d018      	beq.n	8007314 <HAL_TIM_PWM_Start_DMA+0x328>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a21      	ldr	r2, [pc, #132]	; (800736c <HAL_TIM_PWM_Start_DMA+0x380>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d013      	beq.n	8007314 <HAL_TIM_PWM_Start_DMA+0x328>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a1f      	ldr	r2, [pc, #124]	; (8007370 <HAL_TIM_PWM_Start_DMA+0x384>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00e      	beq.n	8007314 <HAL_TIM_PWM_Start_DMA+0x328>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1a      	ldr	r2, [pc, #104]	; (8007364 <HAL_TIM_PWM_Start_DMA+0x378>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d009      	beq.n	8007314 <HAL_TIM_PWM_Start_DMA+0x328>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a1b      	ldr	r2, [pc, #108]	; (8007374 <HAL_TIM_PWM_Start_DMA+0x388>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d004      	beq.n	8007314 <HAL_TIM_PWM_Start_DMA+0x328>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a1a      	ldr	r2, [pc, #104]	; (8007378 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d111      	bne.n	8007338 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	2b06      	cmp	r3, #6
 8007324:	d010      	beq.n	8007348 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f042 0201 	orr.w	r2, r2, #1
 8007334:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007336:	e007      	b.n	8007348 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f042 0201 	orr.w	r2, r2, #1
 8007346:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007348:	7dfb      	ldrb	r3, [r7, #23]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	08007b95 	.word	0x08007b95
 8007358:	08007c3d 	.word	0x08007c3d
 800735c:	08007b03 	.word	0x08007b03
 8007360:	40010000 	.word	0x40010000
 8007364:	40010400 	.word	0x40010400
 8007368:	40000400 	.word	0x40000400
 800736c:	40000800 	.word	0x40000800
 8007370:	40000c00 	.word	0x40000c00
 8007374:	40014000 	.word	0x40014000
 8007378:	40001800 	.word	0x40001800

0800737c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e041      	b.n	8007412 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f839 	bl	800741a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3304      	adds	r3, #4
 80073b8:	4619      	mov	r1, r3
 80073ba:	4610      	mov	r0, r2
 80073bc:	f000 fc72 	bl	8007ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b082      	sub	sp, #8
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b02      	cmp	r3, #2
 8007442:	d122      	bne.n	800748a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b02      	cmp	r3, #2
 8007450:	d11b      	bne.n	800748a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f06f 0202 	mvn.w	r2, #2
 800745a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	f003 0303 	and.w	r3, r3, #3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fb14 	bl	8007a9e <HAL_TIM_IC_CaptureCallback>
 8007476:	e005      	b.n	8007484 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fb06 	bl	8007a8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fb17 	bl	8007ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b04      	cmp	r3, #4
 8007496:	d122      	bne.n	80074de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d11b      	bne.n	80074de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f06f 0204 	mvn.w	r2, #4
 80074ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 faea 	bl	8007a9e <HAL_TIM_IC_CaptureCallback>
 80074ca:	e005      	b.n	80074d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fadc 	bl	8007a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 faed 	bl	8007ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d122      	bne.n	8007532 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f003 0308 	and.w	r3, r3, #8
 80074f6:	2b08      	cmp	r3, #8
 80074f8:	d11b      	bne.n	8007532 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f06f 0208 	mvn.w	r2, #8
 8007502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2204      	movs	r2, #4
 8007508:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	f003 0303 	and.w	r3, r3, #3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fac0 	bl	8007a9e <HAL_TIM_IC_CaptureCallback>
 800751e:	e005      	b.n	800752c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fab2 	bl	8007a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fac3 	bl	8007ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b10      	cmp	r3, #16
 800753e:	d122      	bne.n	8007586 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f003 0310 	and.w	r3, r3, #16
 800754a:	2b10      	cmp	r3, #16
 800754c:	d11b      	bne.n	8007586 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f06f 0210 	mvn.w	r2, #16
 8007556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2208      	movs	r2, #8
 800755c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	69db      	ldr	r3, [r3, #28]
 8007564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fa96 	bl	8007a9e <HAL_TIM_IC_CaptureCallback>
 8007572:	e005      	b.n	8007580 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fa88 	bl	8007a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fa99 	bl	8007ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	2b01      	cmp	r3, #1
 8007592:	d10e      	bne.n	80075b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d107      	bne.n	80075b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f06f 0201 	mvn.w	r2, #1
 80075aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f7fb ffc3 	bl	8003538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075bc:	2b80      	cmp	r3, #128	; 0x80
 80075be:	d10e      	bne.n	80075de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ca:	2b80      	cmp	r3, #128	; 0x80
 80075cc:	d107      	bne.n	80075de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f001 f875 	bl	80086c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e8:	2b40      	cmp	r3, #64	; 0x40
 80075ea:	d10e      	bne.n	800760a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f6:	2b40      	cmp	r3, #64	; 0x40
 80075f8:	d107      	bne.n	800760a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fa68 	bl	8007ada <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	f003 0320 	and.w	r3, r3, #32
 8007614:	2b20      	cmp	r3, #32
 8007616:	d10e      	bne.n	8007636 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	f003 0320 	and.w	r3, r3, #32
 8007622:	2b20      	cmp	r3, #32
 8007624:	d107      	bne.n	8007636 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f06f 0220 	mvn.w	r2, #32
 800762e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 f83f 	bl	80086b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007636:	bf00      	nop
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b086      	sub	sp, #24
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007654:	2b01      	cmp	r3, #1
 8007656:	d101      	bne.n	800765c <HAL_TIM_IC_ConfigChannel+0x1e>
 8007658:	2302      	movs	r3, #2
 800765a:	e088      	b.n	800776e <HAL_TIM_IC_ConfigChannel+0x130>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d11b      	bne.n	80076a2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6818      	ldr	r0, [r3, #0]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	6819      	ldr	r1, [r3, #0]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	f000 fd63 	bl	8008144 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	699a      	ldr	r2, [r3, #24]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 020c 	bic.w	r2, r2, #12
 800768c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6999      	ldr	r1, [r3, #24]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	689a      	ldr	r2, [r3, #8]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	619a      	str	r2, [r3, #24]
 80076a0:	e060      	b.n	8007764 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	d11c      	bne.n	80076e2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	6819      	ldr	r1, [r3, #0]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f000 fde7 	bl	800828a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699a      	ldr	r2, [r3, #24]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80076ca:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6999      	ldr	r1, [r3, #24]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	021a      	lsls	r2, r3, #8
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	619a      	str	r2, [r3, #24]
 80076e0:	e040      	b.n	8007764 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d11b      	bne.n	8007720 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6818      	ldr	r0, [r3, #0]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	6819      	ldr	r1, [r3, #0]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f000 fe34 	bl	8008364 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	69da      	ldr	r2, [r3, #28]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 020c 	bic.w	r2, r2, #12
 800770a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	69d9      	ldr	r1, [r3, #28]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	689a      	ldr	r2, [r3, #8]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	61da      	str	r2, [r3, #28]
 800771e:	e021      	b.n	8007764 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b0c      	cmp	r3, #12
 8007724:	d11c      	bne.n	8007760 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	6819      	ldr	r1, [r3, #0]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f000 fe51 	bl	80083dc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69da      	ldr	r2, [r3, #28]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007748:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69d9      	ldr	r1, [r3, #28]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	021a      	lsls	r2, r3, #8
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	61da      	str	r2, [r3, #28]
 800775e:	e001      	b.n	8007764 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800776c:	7dfb      	ldrb	r3, [r7, #23]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3718      	adds	r7, #24
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
	...

08007778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007792:	2302      	movs	r3, #2
 8007794:	e0ae      	b.n	80078f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b0c      	cmp	r3, #12
 80077a2:	f200 809f 	bhi.w	80078e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077a6:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ac:	080077e1 	.word	0x080077e1
 80077b0:	080078e5 	.word	0x080078e5
 80077b4:	080078e5 	.word	0x080078e5
 80077b8:	080078e5 	.word	0x080078e5
 80077bc:	08007821 	.word	0x08007821
 80077c0:	080078e5 	.word	0x080078e5
 80077c4:	080078e5 	.word	0x080078e5
 80077c8:	080078e5 	.word	0x080078e5
 80077cc:	08007863 	.word	0x08007863
 80077d0:	080078e5 	.word	0x080078e5
 80077d4:	080078e5 	.word	0x080078e5
 80077d8:	080078e5 	.word	0x080078e5
 80077dc:	080078a3 	.word	0x080078a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68b9      	ldr	r1, [r7, #8]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 fafc 	bl	8007de4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	699a      	ldr	r2, [r3, #24]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0208 	orr.w	r2, r2, #8
 80077fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699a      	ldr	r2, [r3, #24]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0204 	bic.w	r2, r2, #4
 800780a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6999      	ldr	r1, [r3, #24]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	691a      	ldr	r2, [r3, #16]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	619a      	str	r2, [r3, #24]
      break;
 800781e:	e064      	b.n	80078ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fb4c 	bl	8007ec4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800783a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800784a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6999      	ldr	r1, [r3, #24]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	021a      	lsls	r2, r3, #8
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	619a      	str	r2, [r3, #24]
      break;
 8007860:	e043      	b.n	80078ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68b9      	ldr	r1, [r7, #8]
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fba1 	bl	8007fb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69da      	ldr	r2, [r3, #28]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f042 0208 	orr.w	r2, r2, #8
 800787c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	69da      	ldr	r2, [r3, #28]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0204 	bic.w	r2, r2, #4
 800788c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	69d9      	ldr	r1, [r3, #28]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	61da      	str	r2, [r3, #28]
      break;
 80078a0:	e023      	b.n	80078ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 fbf5 	bl	8008098 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69da      	ldr	r2, [r3, #28]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69d9      	ldr	r1, [r3, #28]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	021a      	lsls	r2, r3, #8
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	61da      	str	r2, [r3, #28]
      break;
 80078e2:	e002      	b.n	80078ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	75fb      	strb	r3, [r7, #23]
      break;
 80078e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3718      	adds	r7, #24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_TIM_ConfigClockSource+0x1c>
 8007914:	2302      	movs	r3, #2
 8007916:	e0b4      	b.n	8007a82 <HAL_TIM_ConfigClockSource+0x186>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800793e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007950:	d03e      	beq.n	80079d0 <HAL_TIM_ConfigClockSource+0xd4>
 8007952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007956:	f200 8087 	bhi.w	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 800795a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800795e:	f000 8086 	beq.w	8007a6e <HAL_TIM_ConfigClockSource+0x172>
 8007962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007966:	d87f      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007968:	2b70      	cmp	r3, #112	; 0x70
 800796a:	d01a      	beq.n	80079a2 <HAL_TIM_ConfigClockSource+0xa6>
 800796c:	2b70      	cmp	r3, #112	; 0x70
 800796e:	d87b      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007970:	2b60      	cmp	r3, #96	; 0x60
 8007972:	d050      	beq.n	8007a16 <HAL_TIM_ConfigClockSource+0x11a>
 8007974:	2b60      	cmp	r3, #96	; 0x60
 8007976:	d877      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007978:	2b50      	cmp	r3, #80	; 0x50
 800797a:	d03c      	beq.n	80079f6 <HAL_TIM_ConfigClockSource+0xfa>
 800797c:	2b50      	cmp	r3, #80	; 0x50
 800797e:	d873      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007980:	2b40      	cmp	r3, #64	; 0x40
 8007982:	d058      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0x13a>
 8007984:	2b40      	cmp	r3, #64	; 0x40
 8007986:	d86f      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007988:	2b30      	cmp	r3, #48	; 0x30
 800798a:	d064      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x15a>
 800798c:	2b30      	cmp	r3, #48	; 0x30
 800798e:	d86b      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007990:	2b20      	cmp	r3, #32
 8007992:	d060      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x15a>
 8007994:	2b20      	cmp	r3, #32
 8007996:	d867      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007998:	2b00      	cmp	r3, #0
 800799a:	d05c      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x15a>
 800799c:	2b10      	cmp	r3, #16
 800799e:	d05a      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x15a>
 80079a0:	e062      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6818      	ldr	r0, [r3, #0]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	6899      	ldr	r1, [r3, #8]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f000 fd6b 	bl	800848c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	609a      	str	r2, [r3, #8]
      break;
 80079ce:	e04f      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6818      	ldr	r0, [r3, #0]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	6899      	ldr	r1, [r3, #8]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f000 fd54 	bl	800848c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079f2:	609a      	str	r2, [r3, #8]
      break;
 80079f4:	e03c      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	6859      	ldr	r1, [r3, #4]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	461a      	mov	r2, r3
 8007a04:	f000 fc12 	bl	800822c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2150      	movs	r1, #80	; 0x50
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fd21 	bl	8008456 <TIM_ITRx_SetConfig>
      break;
 8007a14:	e02c      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	6859      	ldr	r1, [r3, #4]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	461a      	mov	r2, r3
 8007a24:	f000 fc6e 	bl	8008304 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2160      	movs	r1, #96	; 0x60
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fd11 	bl	8008456 <TIM_ITRx_SetConfig>
      break;
 8007a34:	e01c      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	6859      	ldr	r1, [r3, #4]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	461a      	mov	r2, r3
 8007a44:	f000 fbf2 	bl	800822c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2140      	movs	r1, #64	; 0x40
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 fd01 	bl	8008456 <TIM_ITRx_SetConfig>
      break;
 8007a54:	e00c      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4610      	mov	r0, r2
 8007a62:	f000 fcf8 	bl	8008456 <TIM_ITRx_SetConfig>
      break;
 8007a66:	e003      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a6c:	e000      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007aba:	bf00      	nop
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007ace:	bf00      	nop
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b083      	sub	sp, #12
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ae2:	bf00      	nop
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b083      	sub	sp, #12
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d107      	bne.n	8007b2a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b28:	e02a      	b.n	8007b80 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d107      	bne.n	8007b44 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2202      	movs	r2, #2
 8007b38:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b42:	e01d      	b.n	8007b80 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d107      	bne.n	8007b5e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2204      	movs	r2, #4
 8007b52:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b5c:	e010      	b.n	8007b80 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d107      	bne.n	8007b78 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2208      	movs	r2, #8
 8007b6c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b76:	e003      	b.n	8007b80 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f7ff ffb4 	bl	8007aee <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	771a      	strb	r2, [r3, #28]
}
 8007b8c:	bf00      	nop
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d10b      	bne.n	8007bc4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d136      	bne.n	8007c28 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bc2:	e031      	b.n	8007c28 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d10b      	bne.n	8007be6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	69db      	ldr	r3, [r3, #28]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d125      	bne.n	8007c28 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007be4:	e020      	b.n	8007c28 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d10b      	bne.n	8007c08 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2204      	movs	r2, #4
 8007bf4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d114      	bne.n	8007c28 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c06:	e00f      	b.n	8007c28 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d10a      	bne.n	8007c28 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2208      	movs	r2, #8
 8007c16:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d103      	bne.n	8007c28 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7ff ff42 	bl	8007ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	771a      	strb	r2, [r3, #28]
}
 8007c34:	bf00      	nop
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d103      	bne.n	8007c5c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2201      	movs	r2, #1
 8007c58:	771a      	strb	r2, [r3, #28]
 8007c5a:	e019      	b.n	8007c90 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d103      	bne.n	8007c6e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2202      	movs	r2, #2
 8007c6a:	771a      	strb	r2, [r3, #28]
 8007c6c:	e010      	b.n	8007c90 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d103      	bne.n	8007c80 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2204      	movs	r2, #4
 8007c7c:	771a      	strb	r2, [r3, #28]
 8007c7e:	e007      	b.n	8007c90 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d102      	bne.n	8007c90 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2208      	movs	r2, #8
 8007c8e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f7ff ff18 	bl	8007ac6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	771a      	strb	r2, [r3, #28]
}
 8007c9c:	bf00      	nop
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a40      	ldr	r2, [pc, #256]	; (8007db8 <TIM_Base_SetConfig+0x114>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d013      	beq.n	8007ce4 <TIM_Base_SetConfig+0x40>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc2:	d00f      	beq.n	8007ce4 <TIM_Base_SetConfig+0x40>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a3d      	ldr	r2, [pc, #244]	; (8007dbc <TIM_Base_SetConfig+0x118>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d00b      	beq.n	8007ce4 <TIM_Base_SetConfig+0x40>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a3c      	ldr	r2, [pc, #240]	; (8007dc0 <TIM_Base_SetConfig+0x11c>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d007      	beq.n	8007ce4 <TIM_Base_SetConfig+0x40>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a3b      	ldr	r2, [pc, #236]	; (8007dc4 <TIM_Base_SetConfig+0x120>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d003      	beq.n	8007ce4 <TIM_Base_SetConfig+0x40>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a3a      	ldr	r2, [pc, #232]	; (8007dc8 <TIM_Base_SetConfig+0x124>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d108      	bne.n	8007cf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a2f      	ldr	r2, [pc, #188]	; (8007db8 <TIM_Base_SetConfig+0x114>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d02b      	beq.n	8007d56 <TIM_Base_SetConfig+0xb2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d04:	d027      	beq.n	8007d56 <TIM_Base_SetConfig+0xb2>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a2c      	ldr	r2, [pc, #176]	; (8007dbc <TIM_Base_SetConfig+0x118>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d023      	beq.n	8007d56 <TIM_Base_SetConfig+0xb2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a2b      	ldr	r2, [pc, #172]	; (8007dc0 <TIM_Base_SetConfig+0x11c>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d01f      	beq.n	8007d56 <TIM_Base_SetConfig+0xb2>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a2a      	ldr	r2, [pc, #168]	; (8007dc4 <TIM_Base_SetConfig+0x120>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d01b      	beq.n	8007d56 <TIM_Base_SetConfig+0xb2>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a29      	ldr	r2, [pc, #164]	; (8007dc8 <TIM_Base_SetConfig+0x124>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d017      	beq.n	8007d56 <TIM_Base_SetConfig+0xb2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a28      	ldr	r2, [pc, #160]	; (8007dcc <TIM_Base_SetConfig+0x128>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d013      	beq.n	8007d56 <TIM_Base_SetConfig+0xb2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a27      	ldr	r2, [pc, #156]	; (8007dd0 <TIM_Base_SetConfig+0x12c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d00f      	beq.n	8007d56 <TIM_Base_SetConfig+0xb2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a26      	ldr	r2, [pc, #152]	; (8007dd4 <TIM_Base_SetConfig+0x130>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00b      	beq.n	8007d56 <TIM_Base_SetConfig+0xb2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a25      	ldr	r2, [pc, #148]	; (8007dd8 <TIM_Base_SetConfig+0x134>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d007      	beq.n	8007d56 <TIM_Base_SetConfig+0xb2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a24      	ldr	r2, [pc, #144]	; (8007ddc <TIM_Base_SetConfig+0x138>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d003      	beq.n	8007d56 <TIM_Base_SetConfig+0xb2>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a23      	ldr	r2, [pc, #140]	; (8007de0 <TIM_Base_SetConfig+0x13c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d108      	bne.n	8007d68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a0a      	ldr	r2, [pc, #40]	; (8007db8 <TIM_Base_SetConfig+0x114>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d003      	beq.n	8007d9c <TIM_Base_SetConfig+0xf8>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a0c      	ldr	r2, [pc, #48]	; (8007dc8 <TIM_Base_SetConfig+0x124>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d103      	bne.n	8007da4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	691a      	ldr	r2, [r3, #16]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	615a      	str	r2, [r3, #20]
}
 8007daa:	bf00      	nop
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	40010000 	.word	0x40010000
 8007dbc:	40000400 	.word	0x40000400
 8007dc0:	40000800 	.word	0x40000800
 8007dc4:	40000c00 	.word	0x40000c00
 8007dc8:	40010400 	.word	0x40010400
 8007dcc:	40014000 	.word	0x40014000
 8007dd0:	40014400 	.word	0x40014400
 8007dd4:	40014800 	.word	0x40014800
 8007dd8:	40001800 	.word	0x40001800
 8007ddc:	40001c00 	.word	0x40001c00
 8007de0:	40002000 	.word	0x40002000

08007de4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	f023 0201 	bic.w	r2, r3, #1
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 0303 	bic.w	r3, r3, #3
 8007e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f023 0302 	bic.w	r3, r3, #2
 8007e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a20      	ldr	r2, [pc, #128]	; (8007ebc <TIM_OC1_SetConfig+0xd8>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d003      	beq.n	8007e48 <TIM_OC1_SetConfig+0x64>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a1f      	ldr	r2, [pc, #124]	; (8007ec0 <TIM_OC1_SetConfig+0xdc>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d10c      	bne.n	8007e62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f023 0308 	bic.w	r3, r3, #8
 8007e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f023 0304 	bic.w	r3, r3, #4
 8007e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a15      	ldr	r2, [pc, #84]	; (8007ebc <TIM_OC1_SetConfig+0xd8>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d003      	beq.n	8007e72 <TIM_OC1_SetConfig+0x8e>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a14      	ldr	r2, [pc, #80]	; (8007ec0 <TIM_OC1_SetConfig+0xdc>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d111      	bne.n	8007e96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	621a      	str	r2, [r3, #32]
}
 8007eb0:	bf00      	nop
 8007eb2:	371c      	adds	r7, #28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	40010000 	.word	0x40010000
 8007ec0:	40010400 	.word	0x40010400

08007ec4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	f023 0210 	bic.w	r2, r3, #16
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	021b      	lsls	r3, r3, #8
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f023 0320 	bic.w	r3, r3, #32
 8007f0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a22      	ldr	r2, [pc, #136]	; (8007fa8 <TIM_OC2_SetConfig+0xe4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_OC2_SetConfig+0x68>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a21      	ldr	r2, [pc, #132]	; (8007fac <TIM_OC2_SetConfig+0xe8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d10d      	bne.n	8007f48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	011b      	lsls	r3, r3, #4
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a17      	ldr	r2, [pc, #92]	; (8007fa8 <TIM_OC2_SetConfig+0xe4>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d003      	beq.n	8007f58 <TIM_OC2_SetConfig+0x94>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a16      	ldr	r2, [pc, #88]	; (8007fac <TIM_OC2_SetConfig+0xe8>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d113      	bne.n	8007f80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	621a      	str	r2, [r3, #32]
}
 8007f9a:	bf00      	nop
 8007f9c:	371c      	adds	r7, #28
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	40010000 	.word	0x40010000
 8007fac:	40010400 	.word	0x40010400

08007fb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 0303 	bic.w	r3, r3, #3
 8007fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	021b      	lsls	r3, r3, #8
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	4313      	orrs	r3, r2
 8008004:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a21      	ldr	r2, [pc, #132]	; (8008090 <TIM_OC3_SetConfig+0xe0>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d003      	beq.n	8008016 <TIM_OC3_SetConfig+0x66>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a20      	ldr	r2, [pc, #128]	; (8008094 <TIM_OC3_SetConfig+0xe4>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d10d      	bne.n	8008032 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800801c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	021b      	lsls	r3, r3, #8
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	4313      	orrs	r3, r2
 8008028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a16      	ldr	r2, [pc, #88]	; (8008090 <TIM_OC3_SetConfig+0xe0>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d003      	beq.n	8008042 <TIM_OC3_SetConfig+0x92>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a15      	ldr	r2, [pc, #84]	; (8008094 <TIM_OC3_SetConfig+0xe4>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d113      	bne.n	800806a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	011b      	lsls	r3, r3, #4
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	4313      	orrs	r3, r2
 800805c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	011b      	lsls	r3, r3, #4
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	4313      	orrs	r3, r2
 8008068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	621a      	str	r2, [r3, #32]
}
 8008084:	bf00      	nop
 8008086:	371c      	adds	r7, #28
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	40010000 	.word	0x40010000
 8008094:	40010400 	.word	0x40010400

08008098 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	021b      	lsls	r3, r3, #8
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	4313      	orrs	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	031b      	lsls	r3, r3, #12
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a12      	ldr	r2, [pc, #72]	; (800813c <TIM_OC4_SetConfig+0xa4>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d003      	beq.n	8008100 <TIM_OC4_SetConfig+0x68>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a11      	ldr	r2, [pc, #68]	; (8008140 <TIM_OC4_SetConfig+0xa8>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d109      	bne.n	8008114 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008106:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	019b      	lsls	r3, r3, #6
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	4313      	orrs	r3, r2
 8008112:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	621a      	str	r2, [r3, #32]
}
 800812e:	bf00      	nop
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	40010000 	.word	0x40010000
 8008140:	40010400 	.word	0x40010400

08008144 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
 8008150:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	f023 0201 	bic.w	r2, r3, #1
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4a28      	ldr	r2, [pc, #160]	; (8008210 <TIM_TI1_SetConfig+0xcc>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d01b      	beq.n	80081aa <TIM_TI1_SetConfig+0x66>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008178:	d017      	beq.n	80081aa <TIM_TI1_SetConfig+0x66>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4a25      	ldr	r2, [pc, #148]	; (8008214 <TIM_TI1_SetConfig+0xd0>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d013      	beq.n	80081aa <TIM_TI1_SetConfig+0x66>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	4a24      	ldr	r2, [pc, #144]	; (8008218 <TIM_TI1_SetConfig+0xd4>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d00f      	beq.n	80081aa <TIM_TI1_SetConfig+0x66>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4a23      	ldr	r2, [pc, #140]	; (800821c <TIM_TI1_SetConfig+0xd8>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d00b      	beq.n	80081aa <TIM_TI1_SetConfig+0x66>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4a22      	ldr	r2, [pc, #136]	; (8008220 <TIM_TI1_SetConfig+0xdc>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d007      	beq.n	80081aa <TIM_TI1_SetConfig+0x66>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	4a21      	ldr	r2, [pc, #132]	; (8008224 <TIM_TI1_SetConfig+0xe0>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d003      	beq.n	80081aa <TIM_TI1_SetConfig+0x66>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4a20      	ldr	r2, [pc, #128]	; (8008228 <TIM_TI1_SetConfig+0xe4>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d101      	bne.n	80081ae <TIM_TI1_SetConfig+0x6a>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e000      	b.n	80081b0 <TIM_TI1_SetConfig+0x6c>
 80081ae:	2300      	movs	r3, #0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d008      	beq.n	80081c6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	f023 0303 	bic.w	r3, r3, #3
 80081ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	617b      	str	r3, [r7, #20]
 80081c4:	e003      	b.n	80081ce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f043 0301 	orr.w	r3, r3, #1
 80081cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	011b      	lsls	r3, r3, #4
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	4313      	orrs	r3, r2
 80081e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f023 030a 	bic.w	r3, r3, #10
 80081e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	f003 030a 	and.w	r3, r3, #10
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	621a      	str	r2, [r3, #32]
}
 8008202:	bf00      	nop
 8008204:	371c      	adds	r7, #28
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	40010000 	.word	0x40010000
 8008214:	40000400 	.word	0x40000400
 8008218:	40000800 	.word	0x40000800
 800821c:	40000c00 	.word	0x40000c00
 8008220:	40010400 	.word	0x40010400
 8008224:	40014000 	.word	0x40014000
 8008228:	40001800 	.word	0x40001800

0800822c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6a1b      	ldr	r3, [r3, #32]
 800823c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	f023 0201 	bic.w	r2, r3, #1
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	011b      	lsls	r3, r3, #4
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	4313      	orrs	r3, r2
 8008260:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f023 030a 	bic.w	r3, r3, #10
 8008268:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	4313      	orrs	r3, r2
 8008270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	621a      	str	r2, [r3, #32]
}
 800827e:	bf00      	nop
 8008280:	371c      	adds	r7, #28
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800828a:	b480      	push	{r7}
 800828c:	b087      	sub	sp, #28
 800828e:	af00      	add	r7, sp, #0
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	607a      	str	r2, [r7, #4]
 8008296:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	f023 0210 	bic.w	r2, r3, #16
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	021b      	lsls	r3, r3, #8
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	4313      	orrs	r3, r2
 80082c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	031b      	lsls	r3, r3, #12
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80082dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	011b      	lsls	r3, r3, #4
 80082e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	621a      	str	r2, [r3, #32]
}
 80082f8:	bf00      	nop
 80082fa:	371c      	adds	r7, #28
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008304:	b480      	push	{r7}
 8008306:	b087      	sub	sp, #28
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	f023 0210 	bic.w	r2, r3, #16
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800832e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	031b      	lsls	r3, r3, #12
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	4313      	orrs	r3, r2
 8008338:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008340:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	011b      	lsls	r3, r3, #4
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	4313      	orrs	r3, r2
 800834a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	621a      	str	r2, [r3, #32]
}
 8008358:	bf00      	nop
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6a1b      	ldr	r3, [r3, #32]
 8008388:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f023 0303 	bic.w	r3, r3, #3
 8008390:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4313      	orrs	r3, r2
 8008398:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	011b      	lsls	r3, r3, #4
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80083b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	621a      	str	r2, [r3, #32]
}
 80083d0:	bf00      	nop
 80083d2:	371c      	adds	r7, #28
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
 80083e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6a1b      	ldr	r3, [r3, #32]
 80083ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6a1b      	ldr	r3, [r3, #32]
 8008400:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008408:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	021b      	lsls	r3, r3, #8
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	4313      	orrs	r3, r2
 8008412:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800841a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	031b      	lsls	r3, r3, #12
 8008420:	b29b      	uxth	r3, r3
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	4313      	orrs	r3, r2
 8008426:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800842e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	031b      	lsls	r3, r3, #12
 8008434:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	4313      	orrs	r3, r2
 800843c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	621a      	str	r2, [r3, #32]
}
 800844a:	bf00      	nop
 800844c:	371c      	adds	r7, #28
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008456:	b480      	push	{r7}
 8008458:	b085      	sub	sp, #20
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	4313      	orrs	r3, r2
 8008474:	f043 0307 	orr.w	r3, r3, #7
 8008478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	609a      	str	r2, [r3, #8]
}
 8008480:	bf00      	nop
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800848c:	b480      	push	{r7}
 800848e:	b087      	sub	sp, #28
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
 8008498:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	021a      	lsls	r2, r3, #8
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	431a      	orrs	r2, r3
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	609a      	str	r2, [r3, #8]
}
 80084c0:	bf00      	nop
 80084c2:	371c      	adds	r7, #28
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	f003 031f 	and.w	r3, r3, #31
 80084de:	2201      	movs	r2, #1
 80084e0:	fa02 f303 	lsl.w	r3, r2, r3
 80084e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6a1a      	ldr	r2, [r3, #32]
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	43db      	mvns	r3, r3
 80084ee:	401a      	ands	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a1a      	ldr	r2, [r3, #32]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	f003 031f 	and.w	r3, r3, #31
 80084fe:	6879      	ldr	r1, [r7, #4]
 8008500:	fa01 f303 	lsl.w	r3, r1, r3
 8008504:	431a      	orrs	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	621a      	str	r2, [r3, #32]
}
 800850a:	bf00      	nop
 800850c:	371c      	adds	r7, #28
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
	...

08008518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008528:	2b01      	cmp	r3, #1
 800852a:	d101      	bne.n	8008530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800852c:	2302      	movs	r3, #2
 800852e:	e05a      	b.n	80085e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2202      	movs	r2, #2
 800853c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	4313      	orrs	r3, r2
 8008560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a21      	ldr	r2, [pc, #132]	; (80085f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d022      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800857c:	d01d      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a1d      	ldr	r2, [pc, #116]	; (80085f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d018      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a1b      	ldr	r2, [pc, #108]	; (80085fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d013      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a1a      	ldr	r2, [pc, #104]	; (8008600 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d00e      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a18      	ldr	r2, [pc, #96]	; (8008604 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d009      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a17      	ldr	r2, [pc, #92]	; (8008608 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d004      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a15      	ldr	r2, [pc, #84]	; (800860c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d10c      	bne.n	80085d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	40010000 	.word	0x40010000
 80085f8:	40000400 	.word	0x40000400
 80085fc:	40000800 	.word	0x40000800
 8008600:	40000c00 	.word	0x40000c00
 8008604:	40010400 	.word	0x40010400
 8008608:	40014000 	.word	0x40014000
 800860c:	40001800 	.word	0x40001800

08008610 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008624:	2b01      	cmp	r3, #1
 8008626:	d101      	bne.n	800862c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008628:	2302      	movs	r3, #2
 800862a:	e03d      	b.n	80086a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	4313      	orrs	r3, r2
 8008640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	4313      	orrs	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	4313      	orrs	r3, r2
 800865c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4313      	orrs	r3, r2
 800866a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	4313      	orrs	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	4313      	orrs	r3, r2
 8008686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d101      	bne.n	80086ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e03f      	b.n	800876e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d106      	bne.n	8008708 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7fb fe0a 	bl	800431c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2224      	movs	r2, #36	; 0x24
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800871e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fe35 	bl	8009390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	691a      	ldr	r2, [r3, #16]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008734:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	695a      	ldr	r2, [r3, #20]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008744:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008754:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2220      	movs	r2, #32
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2220      	movs	r2, #32
 8008768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	4613      	mov	r3, r2
 8008782:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b20      	cmp	r3, #32
 800878e:	d11d      	bne.n	80087cc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d002      	beq.n	800879c <HAL_UART_Receive_IT+0x26>
 8008796:	88fb      	ldrh	r3, [r7, #6]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e016      	b.n	80087ce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d101      	bne.n	80087ae <HAL_UART_Receive_IT+0x38>
 80087aa:	2302      	movs	r3, #2
 80087ac:	e00f      	b.n	80087ce <HAL_UART_Receive_IT+0x58>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80087bc:	88fb      	ldrh	r3, [r7, #6]
 80087be:	461a      	mov	r2, r3
 80087c0:	68b9      	ldr	r1, [r7, #8]
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 fbe3 	bl	8008f8e <UART_Start_Receive_IT>
 80087c8:	4603      	mov	r3, r0
 80087ca:	e000      	b.n	80087ce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80087cc:	2302      	movs	r3, #2
  }
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b08c      	sub	sp, #48	; 0x30
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	4613      	mov	r3, r2
 80087e4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b20      	cmp	r3, #32
 80087f0:	d165      	bne.n	80088be <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d002      	beq.n	80087fe <HAL_UART_Transmit_DMA+0x26>
 80087f8:	88fb      	ldrh	r3, [r7, #6]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e05e      	b.n	80088c0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008808:	2b01      	cmp	r3, #1
 800880a:	d101      	bne.n	8008810 <HAL_UART_Transmit_DMA+0x38>
 800880c:	2302      	movs	r3, #2
 800880e:	e057      	b.n	80088c0 <HAL_UART_Transmit_DMA+0xe8>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	88fa      	ldrh	r2, [r7, #6]
 8008822:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	88fa      	ldrh	r2, [r7, #6]
 8008828:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2221      	movs	r2, #33	; 0x21
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883c:	4a22      	ldr	r2, [pc, #136]	; (80088c8 <HAL_UART_Transmit_DMA+0xf0>)
 800883e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008844:	4a21      	ldr	r2, [pc, #132]	; (80088cc <HAL_UART_Transmit_DMA+0xf4>)
 8008846:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884c:	4a20      	ldr	r2, [pc, #128]	; (80088d0 <HAL_UART_Transmit_DMA+0xf8>)
 800884e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008854:	2200      	movs	r2, #0
 8008856:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008858:	f107 0308 	add.w	r3, r7, #8
 800885c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008864:	6819      	ldr	r1, [r3, #0]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3304      	adds	r3, #4
 800886c:	461a      	mov	r2, r3
 800886e:	88fb      	ldrh	r3, [r7, #6]
 8008870:	f7fc ff30 	bl	80056d4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800887c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	3314      	adds	r3, #20
 800888c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	e853 3f00 	ldrex	r3, [r3]
 8008894:	617b      	str	r3, [r7, #20]
   return(result);
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800889c:	62bb      	str	r3, [r7, #40]	; 0x28
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3314      	adds	r3, #20
 80088a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088a6:	627a      	str	r2, [r7, #36]	; 0x24
 80088a8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	6a39      	ldr	r1, [r7, #32]
 80088ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ae:	e841 2300 	strex	r3, r2, [r1]
 80088b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1e5      	bne.n	8008886 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	e000      	b.n	80088c0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80088be:	2302      	movs	r3, #2
  }
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3730      	adds	r7, #48	; 0x30
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	08008e45 	.word	0x08008e45
 80088cc:	08008edf 	.word	0x08008edf
 80088d0:	08008efb 	.word	0x08008efb

080088d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b0ba      	sub	sp, #232	; 0xe8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008900:	2300      	movs	r3, #0
 8008902:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800890a:	f003 030f 	and.w	r3, r3, #15
 800890e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10f      	bne.n	800893a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800891a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800891e:	f003 0320 	and.w	r3, r3, #32
 8008922:	2b00      	cmp	r3, #0
 8008924:	d009      	beq.n	800893a <HAL_UART_IRQHandler+0x66>
 8008926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800892a:	f003 0320 	and.w	r3, r3, #32
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fc70 	bl	8009218 <UART_Receive_IT>
      return;
 8008938:	e256      	b.n	8008de8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800893a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800893e:	2b00      	cmp	r3, #0
 8008940:	f000 80de 	beq.w	8008b00 <HAL_UART_IRQHandler+0x22c>
 8008944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b00      	cmp	r3, #0
 800894e:	d106      	bne.n	800895e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008954:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 80d1 	beq.w	8008b00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800895e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00b      	beq.n	8008982 <HAL_UART_IRQHandler+0xae>
 800896a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800896e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008972:	2b00      	cmp	r3, #0
 8008974:	d005      	beq.n	8008982 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897a:	f043 0201 	orr.w	r2, r3, #1
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008986:	f003 0304 	and.w	r3, r3, #4
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00b      	beq.n	80089a6 <HAL_UART_IRQHandler+0xd2>
 800898e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008992:	f003 0301 	and.w	r3, r3, #1
 8008996:	2b00      	cmp	r3, #0
 8008998:	d005      	beq.n	80089a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899e:	f043 0202 	orr.w	r2, r3, #2
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089aa:	f003 0302 	and.w	r3, r3, #2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00b      	beq.n	80089ca <HAL_UART_IRQHandler+0xf6>
 80089b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d005      	beq.n	80089ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	f043 0204 	orr.w	r2, r3, #4
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80089ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ce:	f003 0308 	and.w	r3, r3, #8
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d011      	beq.n	80089fa <HAL_UART_IRQHandler+0x126>
 80089d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089da:	f003 0320 	and.w	r3, r3, #32
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d105      	bne.n	80089ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80089e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d005      	beq.n	80089fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f2:	f043 0208 	orr.w	r2, r3, #8
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f000 81ed 	beq.w	8008dde <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a08:	f003 0320 	and.w	r3, r3, #32
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d008      	beq.n	8008a22 <HAL_UART_IRQHandler+0x14e>
 8008a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a14:	f003 0320 	and.w	r3, r3, #32
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fbfb 	bl	8009218 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2c:	2b40      	cmp	r3, #64	; 0x40
 8008a2e:	bf0c      	ite	eq
 8008a30:	2301      	moveq	r3, #1
 8008a32:	2300      	movne	r3, #0
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3e:	f003 0308 	and.w	r3, r3, #8
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d103      	bne.n	8008a4e <HAL_UART_IRQHandler+0x17a>
 8008a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d04f      	beq.n	8008aee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fb03 	bl	800905a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5e:	2b40      	cmp	r3, #64	; 0x40
 8008a60:	d141      	bne.n	8008ae6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3314      	adds	r3, #20
 8008a68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3314      	adds	r3, #20
 8008a8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008a8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008a92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008a9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008a9e:	e841 2300 	strex	r3, r2, [r1]
 8008aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1d9      	bne.n	8008a62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d013      	beq.n	8008ade <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aba:	4a7d      	ldr	r2, [pc, #500]	; (8008cb0 <HAL_UART_IRQHandler+0x3dc>)
 8008abc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fc fece 	bl	8005864 <HAL_DMA_Abort_IT>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d016      	beq.n	8008afc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008ad8:	4610      	mov	r0, r2
 8008ada:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008adc:	e00e      	b.n	8008afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f99a 	bl	8008e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ae4:	e00a      	b.n	8008afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f996 	bl	8008e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aec:	e006      	b.n	8008afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f992 	bl	8008e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008afa:	e170      	b.n	8008dde <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008afc:	bf00      	nop
    return;
 8008afe:	e16e      	b.n	8008dde <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	f040 814a 	bne.w	8008d9e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0e:	f003 0310 	and.w	r3, r3, #16
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 8143 	beq.w	8008d9e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b1c:	f003 0310 	and.w	r3, r3, #16
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 813c 	beq.w	8008d9e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b26:	2300      	movs	r3, #0
 8008b28:	60bb      	str	r3, [r7, #8]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	60bb      	str	r3, [r7, #8]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	60bb      	str	r3, [r7, #8]
 8008b3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b46:	2b40      	cmp	r3, #64	; 0x40
 8008b48:	f040 80b4 	bne.w	8008cb4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 8140 	beq.w	8008de2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	f080 8139 	bcs.w	8008de2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b82:	f000 8088 	beq.w	8008c96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	330c      	adds	r3, #12
 8008b8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b94:	e853 3f00 	ldrex	r3, [r3]
 8008b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	330c      	adds	r3, #12
 8008bae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008bb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008bbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bc2:	e841 2300 	strex	r3, r2, [r1]
 8008bc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1d9      	bne.n	8008b86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3314      	adds	r3, #20
 8008bd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bdc:	e853 3f00 	ldrex	r3, [r3]
 8008be0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008be4:	f023 0301 	bic.w	r3, r3, #1
 8008be8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3314      	adds	r3, #20
 8008bf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008bf6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008bfa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008bfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c02:	e841 2300 	strex	r3, r2, [r1]
 8008c06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1e1      	bne.n	8008bd2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3314      	adds	r3, #20
 8008c14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c18:	e853 3f00 	ldrex	r3, [r3]
 8008c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3314      	adds	r3, #20
 8008c2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c3a:	e841 2300 	strex	r3, r2, [r1]
 8008c3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1e3      	bne.n	8008c0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	330c      	adds	r3, #12
 8008c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c5e:	e853 3f00 	ldrex	r3, [r3]
 8008c62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c66:	f023 0310 	bic.w	r3, r3, #16
 8008c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	330c      	adds	r3, #12
 8008c74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008c78:	65ba      	str	r2, [r7, #88]	; 0x58
 8008c7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c80:	e841 2300 	strex	r3, r2, [r1]
 8008c84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1e3      	bne.n	8008c54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fc fd77 	bl	8005784 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f8c0 	bl	8008e2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cac:	e099      	b.n	8008de2 <HAL_UART_IRQHandler+0x50e>
 8008cae:	bf00      	nop
 8008cb0:	08009121 	.word	0x08009121
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f000 808b 	beq.w	8008de6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008cd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 8086 	beq.w	8008de6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	330c      	adds	r3, #12
 8008ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	330c      	adds	r3, #12
 8008cfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008cfe:	647a      	str	r2, [r7, #68]	; 0x44
 8008d00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d06:	e841 2300 	strex	r3, r2, [r1]
 8008d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1e3      	bne.n	8008cda <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3314      	adds	r3, #20
 8008d18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	e853 3f00 	ldrex	r3, [r3]
 8008d20:	623b      	str	r3, [r7, #32]
   return(result);
 8008d22:	6a3b      	ldr	r3, [r7, #32]
 8008d24:	f023 0301 	bic.w	r3, r3, #1
 8008d28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3314      	adds	r3, #20
 8008d32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d36:	633a      	str	r2, [r7, #48]	; 0x30
 8008d38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d3e:	e841 2300 	strex	r3, r2, [r1]
 8008d42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1e3      	bne.n	8008d12 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	330c      	adds	r3, #12
 8008d5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	e853 3f00 	ldrex	r3, [r3]
 8008d66:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 0310 	bic.w	r3, r3, #16
 8008d6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	330c      	adds	r3, #12
 8008d78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008d7c:	61fa      	str	r2, [r7, #28]
 8008d7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d80:	69b9      	ldr	r1, [r7, #24]
 8008d82:	69fa      	ldr	r2, [r7, #28]
 8008d84:	e841 2300 	strex	r3, r2, [r1]
 8008d88:	617b      	str	r3, [r7, #20]
   return(result);
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e3      	bne.n	8008d58 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f848 	bl	8008e2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d9c:	e023      	b.n	8008de6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d009      	beq.n	8008dbe <HAL_UART_IRQHandler+0x4ea>
 8008daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f9c6 	bl	8009148 <UART_Transmit_IT>
    return;
 8008dbc:	e014      	b.n	8008de8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00e      	beq.n	8008de8 <HAL_UART_IRQHandler+0x514>
 8008dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d008      	beq.n	8008de8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fa06 	bl	80091e8 <UART_EndTransmit_IT>
    return;
 8008ddc:	e004      	b.n	8008de8 <HAL_UART_IRQHandler+0x514>
    return;
 8008dde:	bf00      	nop
 8008de0:	e002      	b.n	8008de8 <HAL_UART_IRQHandler+0x514>
      return;
 8008de2:	bf00      	nop
 8008de4:	e000      	b.n	8008de8 <HAL_UART_IRQHandler+0x514>
      return;
 8008de6:	bf00      	nop
  }
}
 8008de8:	37e8      	adds	r7, #232	; 0xe8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop

08008df0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	460b      	mov	r3, r1
 8008e36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b090      	sub	sp, #64	; 0x40
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e50:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d137      	bne.n	8008ed0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e62:	2200      	movs	r2, #0
 8008e64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3314      	adds	r3, #20
 8008e6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	e853 3f00 	ldrex	r3, [r3]
 8008e74:	623b      	str	r3, [r7, #32]
   return(result);
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3314      	adds	r3, #20
 8008e84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e86:	633a      	str	r2, [r7, #48]	; 0x30
 8008e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e8e:	e841 2300 	strex	r3, r2, [r1]
 8008e92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1e5      	bne.n	8008e66 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	330c      	adds	r3, #12
 8008ea0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	e853 3f00 	ldrex	r3, [r3]
 8008ea8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8008eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	330c      	adds	r3, #12
 8008eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eba:	61fa      	str	r2, [r7, #28]
 8008ebc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebe:	69b9      	ldr	r1, [r7, #24]
 8008ec0:	69fa      	ldr	r2, [r7, #28]
 8008ec2:	e841 2300 	strex	r3, r2, [r1]
 8008ec6:	617b      	str	r3, [r7, #20]
   return(result);
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1e5      	bne.n	8008e9a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ece:	e002      	b.n	8008ed6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008ed0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008ed2:	f7ff ff8d 	bl	8008df0 <HAL_UART_TxCpltCallback>
}
 8008ed6:	bf00      	nop
 8008ed8:	3740      	adds	r7, #64	; 0x40
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b084      	sub	sp, #16
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f7ff ff89 	bl	8008e04 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ef2:	bf00      	nop
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b084      	sub	sp, #16
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f16:	2b80      	cmp	r3, #128	; 0x80
 8008f18:	bf0c      	ite	eq
 8008f1a:	2301      	moveq	r3, #1
 8008f1c:	2300      	movne	r3, #0
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b21      	cmp	r3, #33	; 0x21
 8008f2c:	d108      	bne.n	8008f40 <UART_DMAError+0x46>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d005      	beq.n	8008f40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2200      	movs	r2, #0
 8008f38:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008f3a:	68b8      	ldr	r0, [r7, #8]
 8008f3c:	f000 f865 	bl	800900a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f4a:	2b40      	cmp	r3, #64	; 0x40
 8008f4c:	bf0c      	ite	eq
 8008f4e:	2301      	moveq	r3, #1
 8008f50:	2300      	movne	r3, #0
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b22      	cmp	r3, #34	; 0x22
 8008f60:	d108      	bne.n	8008f74 <UART_DMAError+0x7a>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008f6e:	68b8      	ldr	r0, [r7, #8]
 8008f70:	f000 f873 	bl	800905a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f78:	f043 0210 	orr.w	r2, r3, #16
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f80:	68b8      	ldr	r0, [r7, #8]
 8008f82:	f7ff ff49 	bl	8008e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f86:	bf00      	nop
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b085      	sub	sp, #20
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	60f8      	str	r0, [r7, #12]
 8008f96:	60b9      	str	r1, [r7, #8]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	88fa      	ldrh	r2, [r7, #6]
 8008fa6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	88fa      	ldrh	r2, [r7, #6]
 8008fac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2222      	movs	r2, #34	; 0x22
 8008fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d007      	beq.n	8008fdc <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fda:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	695a      	ldr	r2, [r3, #20]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f042 0201 	orr.w	r2, r2, #1
 8008fea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f042 0220 	orr.w	r2, r2, #32
 8008ffa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3714      	adds	r7, #20
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr

0800900a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800900a:	b480      	push	{r7}
 800900c:	b089      	sub	sp, #36	; 0x24
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	330c      	adds	r3, #12
 8009018:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	e853 3f00 	ldrex	r3, [r3]
 8009020:	60bb      	str	r3, [r7, #8]
   return(result);
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009028:	61fb      	str	r3, [r7, #28]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	330c      	adds	r3, #12
 8009030:	69fa      	ldr	r2, [r7, #28]
 8009032:	61ba      	str	r2, [r7, #24]
 8009034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009036:	6979      	ldr	r1, [r7, #20]
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	e841 2300 	strex	r3, r2, [r1]
 800903e:	613b      	str	r3, [r7, #16]
   return(result);
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1e5      	bne.n	8009012 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2220      	movs	r2, #32
 800904a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800904e:	bf00      	nop
 8009050:	3724      	adds	r7, #36	; 0x24
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800905a:	b480      	push	{r7}
 800905c:	b095      	sub	sp, #84	; 0x54
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	330c      	adds	r3, #12
 8009068:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009078:	64fb      	str	r3, [r7, #76]	; 0x4c
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	330c      	adds	r3, #12
 8009080:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009082:	643a      	str	r2, [r7, #64]	; 0x40
 8009084:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009086:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009088:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800908a:	e841 2300 	strex	r3, r2, [r1]
 800908e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e5      	bne.n	8009062 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3314      	adds	r3, #20
 800909c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909e:	6a3b      	ldr	r3, [r7, #32]
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	f023 0301 	bic.w	r3, r3, #1
 80090ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3314      	adds	r3, #20
 80090b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e5      	bne.n	8009096 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d119      	bne.n	8009106 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	330c      	adds	r3, #12
 80090d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	e853 3f00 	ldrex	r3, [r3]
 80090e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f023 0310 	bic.w	r3, r3, #16
 80090e8:	647b      	str	r3, [r7, #68]	; 0x44
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	330c      	adds	r3, #12
 80090f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090f2:	61ba      	str	r2, [r7, #24]
 80090f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f6:	6979      	ldr	r1, [r7, #20]
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e5      	bne.n	80090d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2220      	movs	r2, #32
 800910a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009114:	bf00      	nop
 8009116:	3754      	adds	r7, #84	; 0x54
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f7ff fe6c 	bl	8008e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009140:	bf00      	nop
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b21      	cmp	r3, #33	; 0x21
 800915a:	d13e      	bne.n	80091da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009164:	d114      	bne.n	8009190 <UART_Transmit_IT+0x48>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d110      	bne.n	8009190 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	881b      	ldrh	r3, [r3, #0]
 8009178:	461a      	mov	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009182:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	1c9a      	adds	r2, r3, #2
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	621a      	str	r2, [r3, #32]
 800918e:	e008      	b.n	80091a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a1b      	ldr	r3, [r3, #32]
 8009194:	1c59      	adds	r1, r3, #1
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	6211      	str	r1, [r2, #32]
 800919a:	781a      	ldrb	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	3b01      	subs	r3, #1
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	4619      	mov	r1, r3
 80091b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10f      	bne.n	80091d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68da      	ldr	r2, [r3, #12]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68da      	ldr	r2, [r3, #12]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	e000      	b.n	80091dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091da:	2302      	movs	r3, #2
  }
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68da      	ldr	r2, [r3, #12]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2220      	movs	r2, #32
 8009204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff fdf1 	bl	8008df0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08c      	sub	sp, #48	; 0x30
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009226:	b2db      	uxtb	r3, r3
 8009228:	2b22      	cmp	r3, #34	; 0x22
 800922a:	f040 80ab 	bne.w	8009384 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009236:	d117      	bne.n	8009268 <UART_Receive_IT+0x50>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d113      	bne.n	8009268 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009240:	2300      	movs	r3, #0
 8009242:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009248:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	b29b      	uxth	r3, r3
 8009252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009256:	b29a      	uxth	r2, r3
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009260:	1c9a      	adds	r2, r3, #2
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	629a      	str	r2, [r3, #40]	; 0x28
 8009266:	e026      	b.n	80092b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800926e:	2300      	movs	r3, #0
 8009270:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800927a:	d007      	beq.n	800928c <UART_Receive_IT+0x74>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10a      	bne.n	800929a <UART_Receive_IT+0x82>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d106      	bne.n	800929a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	b2da      	uxtb	r2, r3
 8009294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009296:	701a      	strb	r2, [r3, #0]
 8009298:	e008      	b.n	80092ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b0:	1c5a      	adds	r2, r3, #1
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	3b01      	subs	r3, #1
 80092be:	b29b      	uxth	r3, r3
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	4619      	mov	r1, r3
 80092c4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d15a      	bne.n	8009380 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68da      	ldr	r2, [r3, #12]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f022 0220 	bic.w	r2, r2, #32
 80092d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68da      	ldr	r2, [r3, #12]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	695a      	ldr	r2, [r3, #20]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f022 0201 	bic.w	r2, r2, #1
 80092f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2220      	movs	r2, #32
 80092fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009306:	2b01      	cmp	r3, #1
 8009308:	d135      	bne.n	8009376 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	330c      	adds	r3, #12
 8009316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	e853 3f00 	ldrex	r3, [r3]
 800931e:	613b      	str	r3, [r7, #16]
   return(result);
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	f023 0310 	bic.w	r3, r3, #16
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	330c      	adds	r3, #12
 800932e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009330:	623a      	str	r2, [r7, #32]
 8009332:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009334:	69f9      	ldr	r1, [r7, #28]
 8009336:	6a3a      	ldr	r2, [r7, #32]
 8009338:	e841 2300 	strex	r3, r2, [r1]
 800933c:	61bb      	str	r3, [r7, #24]
   return(result);
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1e5      	bne.n	8009310 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 0310 	and.w	r3, r3, #16
 800934e:	2b10      	cmp	r3, #16
 8009350:	d10a      	bne.n	8009368 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009352:	2300      	movs	r3, #0
 8009354:	60fb      	str	r3, [r7, #12]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	60fb      	str	r3, [r7, #12]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	60fb      	str	r3, [r7, #12]
 8009366:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7ff fd5c 	bl	8008e2c <HAL_UARTEx_RxEventCallback>
 8009374:	e002      	b.n	800937c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7fa f8f6 	bl	8003568 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	e002      	b.n	8009386 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	e000      	b.n	8009386 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009384:	2302      	movs	r3, #2
  }
}
 8009386:	4618      	mov	r0, r3
 8009388:	3730      	adds	r7, #48	; 0x30
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
	...

08009390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009394:	b0c0      	sub	sp, #256	; 0x100
 8009396:	af00      	add	r7, sp, #0
 8009398:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800939c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80093a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ac:	68d9      	ldr	r1, [r3, #12]
 80093ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	ea40 0301 	orr.w	r3, r0, r1
 80093b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093be:	689a      	ldr	r2, [r3, #8]
 80093c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	431a      	orrs	r2, r3
 80093c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	431a      	orrs	r2, r3
 80093d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d4:	69db      	ldr	r3, [r3, #28]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80093dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80093e8:	f021 010c 	bic.w	r1, r1, #12
 80093ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093f6:	430b      	orrs	r3, r1
 80093f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800940a:	6999      	ldr	r1, [r3, #24]
 800940c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	ea40 0301 	orr.w	r3, r0, r1
 8009416:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	4b8f      	ldr	r3, [pc, #572]	; (800965c <UART_SetConfig+0x2cc>)
 8009420:	429a      	cmp	r2, r3
 8009422:	d005      	beq.n	8009430 <UART_SetConfig+0xa0>
 8009424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	4b8d      	ldr	r3, [pc, #564]	; (8009660 <UART_SetConfig+0x2d0>)
 800942c:	429a      	cmp	r2, r3
 800942e:	d104      	bne.n	800943a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009430:	f7fd fae8 	bl	8006a04 <HAL_RCC_GetPCLK2Freq>
 8009434:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009438:	e003      	b.n	8009442 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800943a:	f7fd facf 	bl	80069dc <HAL_RCC_GetPCLK1Freq>
 800943e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009446:	69db      	ldr	r3, [r3, #28]
 8009448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800944c:	f040 810c 	bne.w	8009668 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009454:	2200      	movs	r2, #0
 8009456:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800945a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800945e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009462:	4622      	mov	r2, r4
 8009464:	462b      	mov	r3, r5
 8009466:	1891      	adds	r1, r2, r2
 8009468:	65b9      	str	r1, [r7, #88]	; 0x58
 800946a:	415b      	adcs	r3, r3
 800946c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800946e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009472:	4621      	mov	r1, r4
 8009474:	eb12 0801 	adds.w	r8, r2, r1
 8009478:	4629      	mov	r1, r5
 800947a:	eb43 0901 	adc.w	r9, r3, r1
 800947e:	f04f 0200 	mov.w	r2, #0
 8009482:	f04f 0300 	mov.w	r3, #0
 8009486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800948a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800948e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009492:	4690      	mov	r8, r2
 8009494:	4699      	mov	r9, r3
 8009496:	4623      	mov	r3, r4
 8009498:	eb18 0303 	adds.w	r3, r8, r3
 800949c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80094a0:	462b      	mov	r3, r5
 80094a2:	eb49 0303 	adc.w	r3, r9, r3
 80094a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80094aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80094b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80094ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80094be:	460b      	mov	r3, r1
 80094c0:	18db      	adds	r3, r3, r3
 80094c2:	653b      	str	r3, [r7, #80]	; 0x50
 80094c4:	4613      	mov	r3, r2
 80094c6:	eb42 0303 	adc.w	r3, r2, r3
 80094ca:	657b      	str	r3, [r7, #84]	; 0x54
 80094cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80094d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80094d4:	f7f7 fb68 	bl	8000ba8 <__aeabi_uldivmod>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	4b61      	ldr	r3, [pc, #388]	; (8009664 <UART_SetConfig+0x2d4>)
 80094de:	fba3 2302 	umull	r2, r3, r3, r2
 80094e2:	095b      	lsrs	r3, r3, #5
 80094e4:	011c      	lsls	r4, r3, #4
 80094e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094ea:	2200      	movs	r2, #0
 80094ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80094f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80094f8:	4642      	mov	r2, r8
 80094fa:	464b      	mov	r3, r9
 80094fc:	1891      	adds	r1, r2, r2
 80094fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8009500:	415b      	adcs	r3, r3
 8009502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009504:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009508:	4641      	mov	r1, r8
 800950a:	eb12 0a01 	adds.w	sl, r2, r1
 800950e:	4649      	mov	r1, r9
 8009510:	eb43 0b01 	adc.w	fp, r3, r1
 8009514:	f04f 0200 	mov.w	r2, #0
 8009518:	f04f 0300 	mov.w	r3, #0
 800951c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009520:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009524:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009528:	4692      	mov	sl, r2
 800952a:	469b      	mov	fp, r3
 800952c:	4643      	mov	r3, r8
 800952e:	eb1a 0303 	adds.w	r3, sl, r3
 8009532:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009536:	464b      	mov	r3, r9
 8009538:	eb4b 0303 	adc.w	r3, fp, r3
 800953c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800954c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009550:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009554:	460b      	mov	r3, r1
 8009556:	18db      	adds	r3, r3, r3
 8009558:	643b      	str	r3, [r7, #64]	; 0x40
 800955a:	4613      	mov	r3, r2
 800955c:	eb42 0303 	adc.w	r3, r2, r3
 8009560:	647b      	str	r3, [r7, #68]	; 0x44
 8009562:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009566:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800956a:	f7f7 fb1d 	bl	8000ba8 <__aeabi_uldivmod>
 800956e:	4602      	mov	r2, r0
 8009570:	460b      	mov	r3, r1
 8009572:	4611      	mov	r1, r2
 8009574:	4b3b      	ldr	r3, [pc, #236]	; (8009664 <UART_SetConfig+0x2d4>)
 8009576:	fba3 2301 	umull	r2, r3, r3, r1
 800957a:	095b      	lsrs	r3, r3, #5
 800957c:	2264      	movs	r2, #100	; 0x64
 800957e:	fb02 f303 	mul.w	r3, r2, r3
 8009582:	1acb      	subs	r3, r1, r3
 8009584:	00db      	lsls	r3, r3, #3
 8009586:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800958a:	4b36      	ldr	r3, [pc, #216]	; (8009664 <UART_SetConfig+0x2d4>)
 800958c:	fba3 2302 	umull	r2, r3, r3, r2
 8009590:	095b      	lsrs	r3, r3, #5
 8009592:	005b      	lsls	r3, r3, #1
 8009594:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009598:	441c      	add	r4, r3
 800959a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800959e:	2200      	movs	r2, #0
 80095a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80095a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80095a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80095ac:	4642      	mov	r2, r8
 80095ae:	464b      	mov	r3, r9
 80095b0:	1891      	adds	r1, r2, r2
 80095b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80095b4:	415b      	adcs	r3, r3
 80095b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80095bc:	4641      	mov	r1, r8
 80095be:	1851      	adds	r1, r2, r1
 80095c0:	6339      	str	r1, [r7, #48]	; 0x30
 80095c2:	4649      	mov	r1, r9
 80095c4:	414b      	adcs	r3, r1
 80095c6:	637b      	str	r3, [r7, #52]	; 0x34
 80095c8:	f04f 0200 	mov.w	r2, #0
 80095cc:	f04f 0300 	mov.w	r3, #0
 80095d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80095d4:	4659      	mov	r1, fp
 80095d6:	00cb      	lsls	r3, r1, #3
 80095d8:	4651      	mov	r1, sl
 80095da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095de:	4651      	mov	r1, sl
 80095e0:	00ca      	lsls	r2, r1, #3
 80095e2:	4610      	mov	r0, r2
 80095e4:	4619      	mov	r1, r3
 80095e6:	4603      	mov	r3, r0
 80095e8:	4642      	mov	r2, r8
 80095ea:	189b      	adds	r3, r3, r2
 80095ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095f0:	464b      	mov	r3, r9
 80095f2:	460a      	mov	r2, r1
 80095f4:	eb42 0303 	adc.w	r3, r2, r3
 80095f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009608:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800960c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009610:	460b      	mov	r3, r1
 8009612:	18db      	adds	r3, r3, r3
 8009614:	62bb      	str	r3, [r7, #40]	; 0x28
 8009616:	4613      	mov	r3, r2
 8009618:	eb42 0303 	adc.w	r3, r2, r3
 800961c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800961e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009622:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009626:	f7f7 fabf 	bl	8000ba8 <__aeabi_uldivmod>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	4b0d      	ldr	r3, [pc, #52]	; (8009664 <UART_SetConfig+0x2d4>)
 8009630:	fba3 1302 	umull	r1, r3, r3, r2
 8009634:	095b      	lsrs	r3, r3, #5
 8009636:	2164      	movs	r1, #100	; 0x64
 8009638:	fb01 f303 	mul.w	r3, r1, r3
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	3332      	adds	r3, #50	; 0x32
 8009642:	4a08      	ldr	r2, [pc, #32]	; (8009664 <UART_SetConfig+0x2d4>)
 8009644:	fba2 2303 	umull	r2, r3, r2, r3
 8009648:	095b      	lsrs	r3, r3, #5
 800964a:	f003 0207 	and.w	r2, r3, #7
 800964e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4422      	add	r2, r4
 8009656:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009658:	e105      	b.n	8009866 <UART_SetConfig+0x4d6>
 800965a:	bf00      	nop
 800965c:	40011000 	.word	0x40011000
 8009660:	40011400 	.word	0x40011400
 8009664:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800966c:	2200      	movs	r2, #0
 800966e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009672:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009676:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800967a:	4642      	mov	r2, r8
 800967c:	464b      	mov	r3, r9
 800967e:	1891      	adds	r1, r2, r2
 8009680:	6239      	str	r1, [r7, #32]
 8009682:	415b      	adcs	r3, r3
 8009684:	627b      	str	r3, [r7, #36]	; 0x24
 8009686:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800968a:	4641      	mov	r1, r8
 800968c:	1854      	adds	r4, r2, r1
 800968e:	4649      	mov	r1, r9
 8009690:	eb43 0501 	adc.w	r5, r3, r1
 8009694:	f04f 0200 	mov.w	r2, #0
 8009698:	f04f 0300 	mov.w	r3, #0
 800969c:	00eb      	lsls	r3, r5, #3
 800969e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80096a2:	00e2      	lsls	r2, r4, #3
 80096a4:	4614      	mov	r4, r2
 80096a6:	461d      	mov	r5, r3
 80096a8:	4643      	mov	r3, r8
 80096aa:	18e3      	adds	r3, r4, r3
 80096ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80096b0:	464b      	mov	r3, r9
 80096b2:	eb45 0303 	adc.w	r3, r5, r3
 80096b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80096ca:	f04f 0200 	mov.w	r2, #0
 80096ce:	f04f 0300 	mov.w	r3, #0
 80096d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80096d6:	4629      	mov	r1, r5
 80096d8:	008b      	lsls	r3, r1, #2
 80096da:	4621      	mov	r1, r4
 80096dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096e0:	4621      	mov	r1, r4
 80096e2:	008a      	lsls	r2, r1, #2
 80096e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80096e8:	f7f7 fa5e 	bl	8000ba8 <__aeabi_uldivmod>
 80096ec:	4602      	mov	r2, r0
 80096ee:	460b      	mov	r3, r1
 80096f0:	4b60      	ldr	r3, [pc, #384]	; (8009874 <UART_SetConfig+0x4e4>)
 80096f2:	fba3 2302 	umull	r2, r3, r3, r2
 80096f6:	095b      	lsrs	r3, r3, #5
 80096f8:	011c      	lsls	r4, r3, #4
 80096fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096fe:	2200      	movs	r2, #0
 8009700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009704:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009708:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800970c:	4642      	mov	r2, r8
 800970e:	464b      	mov	r3, r9
 8009710:	1891      	adds	r1, r2, r2
 8009712:	61b9      	str	r1, [r7, #24]
 8009714:	415b      	adcs	r3, r3
 8009716:	61fb      	str	r3, [r7, #28]
 8009718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800971c:	4641      	mov	r1, r8
 800971e:	1851      	adds	r1, r2, r1
 8009720:	6139      	str	r1, [r7, #16]
 8009722:	4649      	mov	r1, r9
 8009724:	414b      	adcs	r3, r1
 8009726:	617b      	str	r3, [r7, #20]
 8009728:	f04f 0200 	mov.w	r2, #0
 800972c:	f04f 0300 	mov.w	r3, #0
 8009730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009734:	4659      	mov	r1, fp
 8009736:	00cb      	lsls	r3, r1, #3
 8009738:	4651      	mov	r1, sl
 800973a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800973e:	4651      	mov	r1, sl
 8009740:	00ca      	lsls	r2, r1, #3
 8009742:	4610      	mov	r0, r2
 8009744:	4619      	mov	r1, r3
 8009746:	4603      	mov	r3, r0
 8009748:	4642      	mov	r2, r8
 800974a:	189b      	adds	r3, r3, r2
 800974c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009750:	464b      	mov	r3, r9
 8009752:	460a      	mov	r2, r1
 8009754:	eb42 0303 	adc.w	r3, r2, r3
 8009758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800975c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	67bb      	str	r3, [r7, #120]	; 0x78
 8009766:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009768:	f04f 0200 	mov.w	r2, #0
 800976c:	f04f 0300 	mov.w	r3, #0
 8009770:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009774:	4649      	mov	r1, r9
 8009776:	008b      	lsls	r3, r1, #2
 8009778:	4641      	mov	r1, r8
 800977a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800977e:	4641      	mov	r1, r8
 8009780:	008a      	lsls	r2, r1, #2
 8009782:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009786:	f7f7 fa0f 	bl	8000ba8 <__aeabi_uldivmod>
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	4b39      	ldr	r3, [pc, #228]	; (8009874 <UART_SetConfig+0x4e4>)
 8009790:	fba3 1302 	umull	r1, r3, r3, r2
 8009794:	095b      	lsrs	r3, r3, #5
 8009796:	2164      	movs	r1, #100	; 0x64
 8009798:	fb01 f303 	mul.w	r3, r1, r3
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	011b      	lsls	r3, r3, #4
 80097a0:	3332      	adds	r3, #50	; 0x32
 80097a2:	4a34      	ldr	r2, [pc, #208]	; (8009874 <UART_SetConfig+0x4e4>)
 80097a4:	fba2 2303 	umull	r2, r3, r2, r3
 80097a8:	095b      	lsrs	r3, r3, #5
 80097aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097ae:	441c      	add	r4, r3
 80097b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097b4:	2200      	movs	r2, #0
 80097b6:	673b      	str	r3, [r7, #112]	; 0x70
 80097b8:	677a      	str	r2, [r7, #116]	; 0x74
 80097ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80097be:	4642      	mov	r2, r8
 80097c0:	464b      	mov	r3, r9
 80097c2:	1891      	adds	r1, r2, r2
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	415b      	adcs	r3, r3
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80097ce:	4641      	mov	r1, r8
 80097d0:	1851      	adds	r1, r2, r1
 80097d2:	6039      	str	r1, [r7, #0]
 80097d4:	4649      	mov	r1, r9
 80097d6:	414b      	adcs	r3, r1
 80097d8:	607b      	str	r3, [r7, #4]
 80097da:	f04f 0200 	mov.w	r2, #0
 80097de:	f04f 0300 	mov.w	r3, #0
 80097e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80097e6:	4659      	mov	r1, fp
 80097e8:	00cb      	lsls	r3, r1, #3
 80097ea:	4651      	mov	r1, sl
 80097ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097f0:	4651      	mov	r1, sl
 80097f2:	00ca      	lsls	r2, r1, #3
 80097f4:	4610      	mov	r0, r2
 80097f6:	4619      	mov	r1, r3
 80097f8:	4603      	mov	r3, r0
 80097fa:	4642      	mov	r2, r8
 80097fc:	189b      	adds	r3, r3, r2
 80097fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8009800:	464b      	mov	r3, r9
 8009802:	460a      	mov	r2, r1
 8009804:	eb42 0303 	adc.w	r3, r2, r3
 8009808:	66fb      	str	r3, [r7, #108]	; 0x6c
 800980a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	663b      	str	r3, [r7, #96]	; 0x60
 8009814:	667a      	str	r2, [r7, #100]	; 0x64
 8009816:	f04f 0200 	mov.w	r2, #0
 800981a:	f04f 0300 	mov.w	r3, #0
 800981e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009822:	4649      	mov	r1, r9
 8009824:	008b      	lsls	r3, r1, #2
 8009826:	4641      	mov	r1, r8
 8009828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800982c:	4641      	mov	r1, r8
 800982e:	008a      	lsls	r2, r1, #2
 8009830:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009834:	f7f7 f9b8 	bl	8000ba8 <__aeabi_uldivmod>
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	4b0d      	ldr	r3, [pc, #52]	; (8009874 <UART_SetConfig+0x4e4>)
 800983e:	fba3 1302 	umull	r1, r3, r3, r2
 8009842:	095b      	lsrs	r3, r3, #5
 8009844:	2164      	movs	r1, #100	; 0x64
 8009846:	fb01 f303 	mul.w	r3, r1, r3
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	011b      	lsls	r3, r3, #4
 800984e:	3332      	adds	r3, #50	; 0x32
 8009850:	4a08      	ldr	r2, [pc, #32]	; (8009874 <UART_SetConfig+0x4e4>)
 8009852:	fba2 2303 	umull	r2, r3, r2, r3
 8009856:	095b      	lsrs	r3, r3, #5
 8009858:	f003 020f 	and.w	r2, r3, #15
 800985c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4422      	add	r2, r4
 8009864:	609a      	str	r2, [r3, #8]
}
 8009866:	bf00      	nop
 8009868:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800986c:	46bd      	mov	sp, r7
 800986e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009872:	bf00      	nop
 8009874:	51eb851f 	.word	0x51eb851f

08009878 <__NVIC_SetPriority>:
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	4603      	mov	r3, r0
 8009880:	6039      	str	r1, [r7, #0]
 8009882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009888:	2b00      	cmp	r3, #0
 800988a:	db0a      	blt.n	80098a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	b2da      	uxtb	r2, r3
 8009890:	490c      	ldr	r1, [pc, #48]	; (80098c4 <__NVIC_SetPriority+0x4c>)
 8009892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009896:	0112      	lsls	r2, r2, #4
 8009898:	b2d2      	uxtb	r2, r2
 800989a:	440b      	add	r3, r1
 800989c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80098a0:	e00a      	b.n	80098b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	4908      	ldr	r1, [pc, #32]	; (80098c8 <__NVIC_SetPriority+0x50>)
 80098a8:	79fb      	ldrb	r3, [r7, #7]
 80098aa:	f003 030f 	and.w	r3, r3, #15
 80098ae:	3b04      	subs	r3, #4
 80098b0:	0112      	lsls	r2, r2, #4
 80098b2:	b2d2      	uxtb	r2, r2
 80098b4:	440b      	add	r3, r1
 80098b6:	761a      	strb	r2, [r3, #24]
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	e000e100 	.word	0xe000e100
 80098c8:	e000ed00 	.word	0xe000ed00

080098cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80098cc:	b580      	push	{r7, lr}
 80098ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80098d0:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <SysTick_Handler+0x1c>)
 80098d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80098d4:	f002 fc1e 	bl	800c114 <xTaskGetSchedulerState>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d001      	beq.n	80098e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80098de:	f003 fdc3 	bl	800d468 <xPortSysTickHandler>
  }
}
 80098e2:	bf00      	nop
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	e000e010 	.word	0xe000e010

080098ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80098ec:	b580      	push	{r7, lr}
 80098ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80098f0:	2100      	movs	r1, #0
 80098f2:	f06f 0004 	mvn.w	r0, #4
 80098f6:	f7ff ffbf 	bl	8009878 <__NVIC_SetPriority>
#endif
}
 80098fa:	bf00      	nop
 80098fc:	bd80      	pop	{r7, pc}
	...

08009900 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009906:	f3ef 8305 	mrs	r3, IPSR
 800990a:	603b      	str	r3, [r7, #0]
  return(result);
 800990c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800990e:	2b00      	cmp	r3, #0
 8009910:	d003      	beq.n	800991a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009912:	f06f 0305 	mvn.w	r3, #5
 8009916:	607b      	str	r3, [r7, #4]
 8009918:	e00c      	b.n	8009934 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800991a:	4b0a      	ldr	r3, [pc, #40]	; (8009944 <osKernelInitialize+0x44>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d105      	bne.n	800992e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009922:	4b08      	ldr	r3, [pc, #32]	; (8009944 <osKernelInitialize+0x44>)
 8009924:	2201      	movs	r2, #1
 8009926:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009928:	2300      	movs	r3, #0
 800992a:	607b      	str	r3, [r7, #4]
 800992c:	e002      	b.n	8009934 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800992e:	f04f 33ff 	mov.w	r3, #4294967295
 8009932:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009934:	687b      	ldr	r3, [r7, #4]
}
 8009936:	4618      	mov	r0, r3
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	20001090 	.word	0x20001090

08009948 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800994e:	f3ef 8305 	mrs	r3, IPSR
 8009952:	603b      	str	r3, [r7, #0]
  return(result);
 8009954:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <osKernelStart+0x1a>
    stat = osErrorISR;
 800995a:	f06f 0305 	mvn.w	r3, #5
 800995e:	607b      	str	r3, [r7, #4]
 8009960:	e010      	b.n	8009984 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009962:	4b0b      	ldr	r3, [pc, #44]	; (8009990 <osKernelStart+0x48>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d109      	bne.n	800997e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800996a:	f7ff ffbf 	bl	80098ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800996e:	4b08      	ldr	r3, [pc, #32]	; (8009990 <osKernelStart+0x48>)
 8009970:	2202      	movs	r2, #2
 8009972:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009974:	f001 ff50 	bl	800b818 <vTaskStartScheduler>
      stat = osOK;
 8009978:	2300      	movs	r3, #0
 800997a:	607b      	str	r3, [r7, #4]
 800997c:	e002      	b.n	8009984 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800997e:	f04f 33ff 	mov.w	r3, #4294967295
 8009982:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009984:	687b      	ldr	r3, [r7, #4]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3708      	adds	r7, #8
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	20001090 	.word	0x20001090

08009994 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800999a:	f3ef 8305 	mrs	r3, IPSR
 800999e:	603b      	str	r3, [r7, #0]
  return(result);
 80099a0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d003      	beq.n	80099ae <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80099a6:	f002 f863 	bl	800ba70 <xTaskGetTickCountFromISR>
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	e002      	b.n	80099b4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80099ae:	f002 f84f 	bl	800ba50 <xTaskGetTickCount>
 80099b2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80099b4:	687b      	ldr	r3, [r7, #4]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80099be:	b580      	push	{r7, lr}
 80099c0:	b08e      	sub	sp, #56	; 0x38
 80099c2:	af04      	add	r7, sp, #16
 80099c4:	60f8      	str	r0, [r7, #12]
 80099c6:	60b9      	str	r1, [r7, #8]
 80099c8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80099ca:	2300      	movs	r3, #0
 80099cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099ce:	f3ef 8305 	mrs	r3, IPSR
 80099d2:	617b      	str	r3, [r7, #20]
  return(result);
 80099d4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d17e      	bne.n	8009ad8 <osThreadNew+0x11a>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d07b      	beq.n	8009ad8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80099e0:	2380      	movs	r3, #128	; 0x80
 80099e2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80099e4:	2318      	movs	r3, #24
 80099e6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80099e8:	2300      	movs	r3, #0
 80099ea:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80099ec:	f04f 33ff 	mov.w	r3, #4294967295
 80099f0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d045      	beq.n	8009a84 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <osThreadNew+0x48>
        name = attr->name;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d002      	beq.n	8009a14 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d008      	beq.n	8009a2c <osThreadNew+0x6e>
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	2b38      	cmp	r3, #56	; 0x38
 8009a1e:	d805      	bhi.n	8009a2c <osThreadNew+0x6e>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	f003 0301 	and.w	r3, r3, #1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <osThreadNew+0x72>
        return (NULL);
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	e054      	b.n	8009ada <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	695b      	ldr	r3, [r3, #20]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d003      	beq.n	8009a40 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	089b      	lsrs	r3, r3, #2
 8009a3e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00e      	beq.n	8009a66 <osThreadNew+0xa8>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	2bbb      	cmp	r3, #187	; 0xbb
 8009a4e:	d90a      	bls.n	8009a66 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d006      	beq.n	8009a66 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	695b      	ldr	r3, [r3, #20]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d002      	beq.n	8009a66 <osThreadNew+0xa8>
        mem = 1;
 8009a60:	2301      	movs	r3, #1
 8009a62:	61bb      	str	r3, [r7, #24]
 8009a64:	e010      	b.n	8009a88 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10c      	bne.n	8009a88 <osThreadNew+0xca>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d108      	bne.n	8009a88 <osThreadNew+0xca>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d104      	bne.n	8009a88 <osThreadNew+0xca>
          mem = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	61bb      	str	r3, [r7, #24]
 8009a82:	e001      	b.n	8009a88 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009a84:	2300      	movs	r3, #0
 8009a86:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d110      	bne.n	8009ab0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a96:	9202      	str	r2, [sp, #8]
 8009a98:	9301      	str	r3, [sp, #4]
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	6a3a      	ldr	r2, [r7, #32]
 8009aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f001 fc4d 	bl	800b344 <xTaskCreateStatic>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	613b      	str	r3, [r7, #16]
 8009aae:	e013      	b.n	8009ad8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d110      	bne.n	8009ad8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	f107 0310 	add.w	r3, r7, #16
 8009abe:	9301      	str	r3, [sp, #4]
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f001 fc98 	bl	800b3fe <xTaskCreate>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d001      	beq.n	8009ad8 <osThreadNew+0x11a>
            hTask = NULL;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009ad8:	693b      	ldr	r3, [r7, #16]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3728      	adds	r7, #40	; 0x28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
	...

08009ae4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b088      	sub	sp, #32
 8009ae8:	af02      	add	r7, sp, #8
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d002      	beq.n	8009afe <osThreadFlagsSet+0x1a>
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	da03      	bge.n	8009b06 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8009afe:	f06f 0303 	mvn.w	r3, #3
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	e035      	b.n	8009b72 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8009b06:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b0c:	f3ef 8305 	mrs	r3, IPSR
 8009b10:	613b      	str	r3, [r7, #16]
  return(result);
 8009b12:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d01f      	beq.n	8009b58 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009b1c:	f107 0308 	add.w	r3, r7, #8
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	2300      	movs	r3, #0
 8009b24:	2201      	movs	r2, #1
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6978      	ldr	r0, [r7, #20]
 8009b2a:	f002 fd9b 	bl	800c664 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8009b2e:	f107 030c 	add.w	r3, r7, #12
 8009b32:	2200      	movs	r2, #0
 8009b34:	9200      	str	r2, [sp, #0]
 8009b36:	2200      	movs	r2, #0
 8009b38:	2100      	movs	r1, #0
 8009b3a:	6978      	ldr	r0, [r7, #20]
 8009b3c:	f002 fd92 	bl	800c664 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d015      	beq.n	8009b72 <osThreadFlagsSet+0x8e>
 8009b46:	4b0d      	ldr	r3, [pc, #52]	; (8009b7c <osThreadFlagsSet+0x98>)
 8009b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	e00c      	b.n	8009b72 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009b58:	2300      	movs	r3, #0
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6978      	ldr	r0, [r7, #20]
 8009b60:	f002 fcc2 	bl	800c4e8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009b64:	f107 030c 	add.w	r3, r7, #12
 8009b68:	2200      	movs	r2, #0
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	6978      	ldr	r0, [r7, #20]
 8009b6e:	f002 fcbb 	bl	800c4e8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8009b72:	68fb      	ldr	r3, [r7, #12]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3718      	adds	r7, #24
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	e000ed04 	.word	0xe000ed04

08009b80 <osThreadFlagsGet>:

  /* Return flags before clearing */
  return (rflags);
}

uint32_t osThreadFlagsGet (void) {
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b86:	f3ef 8305 	mrs	r3, IPSR
 8009b8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b8c:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d003      	beq.n	8009b9a <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 8009b92:	f06f 0305 	mvn.w	r3, #5
 8009b96:	607b      	str	r3, [r7, #4]
 8009b98:	e00e      	b.n	8009bb8 <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8009b9a:	f002 faab 	bl	800c0f4 <xTaskGetCurrentTaskHandle>
 8009b9e:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 8009ba0:	1d3b      	adds	r3, r7, #4
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f002 fc9e 	bl	800c4e8 <xTaskGenericNotify>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d002      	beq.n	8009bb8 <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 8009bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 8009bb8:	687b      	ldr	r3, [r7, #4]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b08c      	sub	sp, #48	; 0x30
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	60f8      	str	r0, [r7, #12]
 8009bca:	60b9      	str	r1, [r7, #8]
 8009bcc:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bce:	f3ef 8305 	mrs	r3, IPSR
 8009bd2:	617b      	str	r3, [r7, #20]
  return(result);
 8009bd4:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8009bda:	f06f 0305 	mvn.w	r3, #5
 8009bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009be0:	e06b      	b.n	8009cba <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	da03      	bge.n	8009bf0 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8009be8:	f06f 0303 	mvn.w	r3, #3
 8009bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bee:	e064      	b.n	8009cba <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	f003 0302 	and.w	r3, r3, #2
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d002      	beq.n	8009c00 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bfe:	e001      	b.n	8009c04 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8009c04:	2300      	movs	r3, #0
 8009c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8009c0c:	f001 ff20 	bl	800ba50 <xTaskGetTickCount>
 8009c10:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8009c12:	f107 0210 	add.w	r2, r7, #16
 8009c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	f002 fc04 	bl	800c428 <xTaskNotifyWait>
 8009c20:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d137      	bne.n	8009c98 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8009c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c34:	4313      	orrs	r3, r2
 8009c36:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00c      	beq.n	8009c5c <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c46:	4013      	ands	r3, r2
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d032      	beq.n	8009cb4 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10f      	bne.n	8009c74 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009c54:	f06f 0302 	mvn.w	r3, #2
 8009c58:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009c5a:	e02e      	b.n	8009cba <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c60:	4013      	ands	r3, r2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d128      	bne.n	8009cb8 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d103      	bne.n	8009c74 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009c6c:	f06f 0302 	mvn.w	r3, #2
 8009c70:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009c72:	e022      	b.n	8009cba <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8009c74:	f001 feec 	bl	800ba50 <xTaskGetTickCount>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	6a3b      	ldr	r3, [r7, #32]
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8009c80:	69ba      	ldr	r2, [r7, #24]
 8009c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d902      	bls.n	8009c8e <osThreadFlagsWait+0xcc>
          tout  = 0;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c8c:	e00e      	b.n	8009cac <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8009c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	1ad3      	subs	r3, r2, r3
 8009c94:	627b      	str	r3, [r7, #36]	; 0x24
 8009c96:	e009      	b.n	8009cac <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d103      	bne.n	8009ca6 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8009c9e:	f06f 0302 	mvn.w	r3, #2
 8009ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ca4:	e002      	b.n	8009cac <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8009ca6:	f06f 0301 	mvn.w	r3, #1
 8009caa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1af      	bne.n	8009c12 <osThreadFlagsWait+0x50>
 8009cb2:	e002      	b.n	8009cba <osThreadFlagsWait+0xf8>
            break;
 8009cb4:	bf00      	nop
 8009cb6:	e000      	b.n	8009cba <osThreadFlagsWait+0xf8>
            break;
 8009cb8:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8009cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3730      	adds	r7, #48	; 0x30
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ccc:	f3ef 8305 	mrs	r3, IPSR
 8009cd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d003      	beq.n	8009ce0 <osDelay+0x1c>
    stat = osErrorISR;
 8009cd8:	f06f 0305 	mvn.w	r3, #5
 8009cdc:	60fb      	str	r3, [r7, #12]
 8009cde:	e007      	b.n	8009cf0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d002      	beq.n	8009cf0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f001 fd60 	bl	800b7b0 <vTaskDelay>
    }
  }

  return (stat);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b086      	sub	sp, #24
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d02:	f3ef 8305 	mrs	r3, IPSR
 8009d06:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d08:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d003      	beq.n	8009d16 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8009d0e:	f06f 0305 	mvn.w	r3, #5
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	e019      	b.n	8009d4a <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8009d1a:	f001 fe99 	bl	800ba50 <xTaskGetTickCount>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d009      	beq.n	8009d44 <osDelayUntil+0x4a>
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	db06      	blt.n	8009d44 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009d36:	f107 0308 	add.w	r3, r7, #8
 8009d3a:	6939      	ldr	r1, [r7, #16]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f001 fcb9 	bl	800b6b4 <vTaskDelayUntil>
 8009d42:	e002      	b.n	8009d4a <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009d44:	f06f 0303 	mvn.w	r3, #3
 8009d48:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009d4a:	697b      	ldr	r3, [r7, #20]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3718      	adds	r7, #24
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f003 f9a1 	bl	800d0a4 <pvTimerGetTimerID>
 8009d62:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d005      	beq.n	8009d76 <TimerCallback+0x22>
    callb->func (callb->arg);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	6852      	ldr	r2, [r2, #4]
 8009d72:	4610      	mov	r0, r2
 8009d74:	4798      	blx	r3
  }
}
 8009d76:	bf00      	nop
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
	...

08009d80 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b08c      	sub	sp, #48	; 0x30
 8009d84:	af02      	add	r7, sp, #8
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	607a      	str	r2, [r7, #4]
 8009d8a:	603b      	str	r3, [r7, #0]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8009d90:	2300      	movs	r3, #0
 8009d92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d94:	f3ef 8305 	mrs	r3, IPSR
 8009d98:	613b      	str	r3, [r7, #16]
  return(result);
 8009d9a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d163      	bne.n	8009e68 <osTimerNew+0xe8>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d060      	beq.n	8009e68 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8009da6:	2008      	movs	r0, #8
 8009da8:	f003 fbee 	bl	800d588 <pvPortMalloc>
 8009dac:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d059      	beq.n	8009e68 <osTimerNew+0xe8>
      callb->func = func;
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8009dc0:	7afb      	ldrb	r3, [r7, #11]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d102      	bne.n	8009dcc <osTimerNew+0x4c>
        reload = pdFALSE;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	61fb      	str	r3, [r7, #28]
 8009dca:	e001      	b.n	8009dd0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8009dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d01c      	beq.n	8009e1a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <osTimerNew+0x6e>
          name = attr->name;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d006      	beq.n	8009e04 <osTimerNew+0x84>
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	2b2b      	cmp	r3, #43	; 0x2b
 8009dfc:	d902      	bls.n	8009e04 <osTimerNew+0x84>
          mem = 1;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	61bb      	str	r3, [r7, #24]
 8009e02:	e00c      	b.n	8009e1e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d108      	bne.n	8009e1e <osTimerNew+0x9e>
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d104      	bne.n	8009e1e <osTimerNew+0x9e>
            mem = 0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	61bb      	str	r3, [r7, #24]
 8009e18:	e001      	b.n	8009e1e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d10c      	bne.n	8009e3e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	9301      	str	r3, [sp, #4]
 8009e2a:	4b12      	ldr	r3, [pc, #72]	; (8009e74 <osTimerNew+0xf4>)
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	69fa      	ldr	r2, [r7, #28]
 8009e32:	2101      	movs	r1, #1
 8009e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e36:	f002 fdb6 	bl	800c9a6 <xTimerCreateStatic>
 8009e3a:	6238      	str	r0, [r7, #32]
 8009e3c:	e00b      	b.n	8009e56 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d108      	bne.n	8009e56 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009e44:	4b0b      	ldr	r3, [pc, #44]	; (8009e74 <osTimerNew+0xf4>)
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	69fa      	ldr	r2, [r7, #28]
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e50:	f002 fd88 	bl	800c964 <xTimerCreate>
 8009e54:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8009e56:	6a3b      	ldr	r3, [r7, #32]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d105      	bne.n	8009e68 <osTimerNew+0xe8>
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d002      	beq.n	8009e68 <osTimerNew+0xe8>
        vPortFree (callb);
 8009e62:	6978      	ldr	r0, [r7, #20]
 8009e64:	f003 fc5c 	bl	800d720 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009e68:	6a3b      	ldr	r3, [r7, #32]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3728      	adds	r7, #40	; 0x28
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	08009d55 	.word	0x08009d55

08009e78 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b088      	sub	sp, #32
 8009e7c:	af02      	add	r7, sp, #8
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e86:	f3ef 8305 	mrs	r3, IPSR
 8009e8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <osTimerStart+0x22>
    stat = osErrorISR;
 8009e92:	f06f 0305 	mvn.w	r3, #5
 8009e96:	617b      	str	r3, [r7, #20]
 8009e98:	e017      	b.n	8009eca <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d103      	bne.n	8009ea8 <osTimerStart+0x30>
    stat = osErrorParameter;
 8009ea0:	f06f 0303 	mvn.w	r3, #3
 8009ea4:	617b      	str	r3, [r7, #20]
 8009ea6:	e010      	b.n	8009eca <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	2300      	movs	r3, #0
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	2104      	movs	r1, #4
 8009eb2:	6938      	ldr	r0, [r7, #16]
 8009eb4:	f002 fdf0 	bl	800ca98 <xTimerGenericCommand>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d102      	bne.n	8009ec4 <osTimerStart+0x4c>
      stat = osOK;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	617b      	str	r3, [r7, #20]
 8009ec2:	e002      	b.n	8009eca <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8009ec4:	f06f 0302 	mvn.w	r3, #2
 8009ec8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009eca:	697b      	ldr	r3, [r7, #20]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3718      	adds	r7, #24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b088      	sub	sp, #32
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009edc:	2300      	movs	r3, #0
 8009ede:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ee0:	f3ef 8305 	mrs	r3, IPSR
 8009ee4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ee6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d174      	bne.n	8009fd6 <osMutexNew+0x102>
    if (attr != NULL) {
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d003      	beq.n	8009efa <osMutexNew+0x26>
      type = attr->attr_bits;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	61bb      	str	r3, [r7, #24]
 8009ef8:	e001      	b.n	8009efe <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009efa:	2300      	movs	r3, #0
 8009efc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d002      	beq.n	8009f0e <osMutexNew+0x3a>
      rmtx = 1U;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	617b      	str	r3, [r7, #20]
 8009f0c:	e001      	b.n	8009f12 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	f003 0308 	and.w	r3, r3, #8
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d15c      	bne.n	8009fd6 <osMutexNew+0x102>
      mem = -1;
 8009f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f20:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d015      	beq.n	8009f54 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d006      	beq.n	8009f3e <osMutexNew+0x6a>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	2b4f      	cmp	r3, #79	; 0x4f
 8009f36:	d902      	bls.n	8009f3e <osMutexNew+0x6a>
          mem = 1;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	613b      	str	r3, [r7, #16]
 8009f3c:	e00c      	b.n	8009f58 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d108      	bne.n	8009f58 <osMutexNew+0x84>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d104      	bne.n	8009f58 <osMutexNew+0x84>
            mem = 0;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	613b      	str	r3, [r7, #16]
 8009f52:	e001      	b.n	8009f58 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009f54:	2300      	movs	r3, #0
 8009f56:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d112      	bne.n	8009f84 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d007      	beq.n	8009f74 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	4619      	mov	r1, r3
 8009f6a:	2004      	movs	r0, #4
 8009f6c:	f000 fba1 	bl	800a6b2 <xQueueCreateMutexStatic>
 8009f70:	61f8      	str	r0, [r7, #28]
 8009f72:	e016      	b.n	8009fa2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	2001      	movs	r0, #1
 8009f7c:	f000 fb99 	bl	800a6b2 <xQueueCreateMutexStatic>
 8009f80:	61f8      	str	r0, [r7, #28]
 8009f82:	e00e      	b.n	8009fa2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10b      	bne.n	8009fa2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d004      	beq.n	8009f9a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009f90:	2004      	movs	r0, #4
 8009f92:	f000 fb76 	bl	800a682 <xQueueCreateMutex>
 8009f96:	61f8      	str	r0, [r7, #28]
 8009f98:	e003      	b.n	8009fa2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009f9a:	2001      	movs	r0, #1
 8009f9c:	f000 fb71 	bl	800a682 <xQueueCreateMutex>
 8009fa0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00c      	beq.n	8009fc2 <osMutexNew+0xee>
        if (attr != NULL) {
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d003      	beq.n	8009fb6 <osMutexNew+0xe2>
          name = attr->name;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	e001      	b.n	8009fba <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009fba:	68f9      	ldr	r1, [r7, #12]
 8009fbc:	69f8      	ldr	r0, [r7, #28]
 8009fbe:	f001 f939 	bl	800b234 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d006      	beq.n	8009fd6 <osMutexNew+0x102>
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	f043 0301 	orr.w	r3, r3, #1
 8009fd4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009fd6:	69fb      	ldr	r3, [r7, #28]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3720      	adds	r7, #32
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f023 0301 	bic.w	r3, r3, #1
 8009ff0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f003 0301 	and.w	r3, r3, #1
 8009ff8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ffe:	f3ef 8305 	mrs	r3, IPSR
 800a002:	60bb      	str	r3, [r7, #8]
  return(result);
 800a004:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a006:	2b00      	cmp	r3, #0
 800a008:	d003      	beq.n	800a012 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a00a:	f06f 0305 	mvn.w	r3, #5
 800a00e:	617b      	str	r3, [r7, #20]
 800a010:	e02c      	b.n	800a06c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d103      	bne.n	800a020 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a018:	f06f 0303 	mvn.w	r3, #3
 800a01c:	617b      	str	r3, [r7, #20]
 800a01e:	e025      	b.n	800a06c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d011      	beq.n	800a04a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a026:	6839      	ldr	r1, [r7, #0]
 800a028:	6938      	ldr	r0, [r7, #16]
 800a02a:	f000 fb91 	bl	800a750 <xQueueTakeMutexRecursive>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b01      	cmp	r3, #1
 800a032:	d01b      	beq.n	800a06c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a03a:	f06f 0301 	mvn.w	r3, #1
 800a03e:	617b      	str	r3, [r7, #20]
 800a040:	e014      	b.n	800a06c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a042:	f06f 0302 	mvn.w	r3, #2
 800a046:	617b      	str	r3, [r7, #20]
 800a048:	e010      	b.n	800a06c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a04a:	6839      	ldr	r1, [r7, #0]
 800a04c:	6938      	ldr	r0, [r7, #16]
 800a04e:	f000 fe99 	bl	800ad84 <xQueueSemaphoreTake>
 800a052:	4603      	mov	r3, r0
 800a054:	2b01      	cmp	r3, #1
 800a056:	d009      	beq.n	800a06c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d003      	beq.n	800a066 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a05e:	f06f 0301 	mvn.w	r3, #1
 800a062:	617b      	str	r3, [r7, #20]
 800a064:	e002      	b.n	800a06c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a066:	f06f 0302 	mvn.w	r3, #2
 800a06a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a06c:	697b      	ldr	r3, [r7, #20]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3718      	adds	r7, #24
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a076:	b580      	push	{r7, lr}
 800a078:	b086      	sub	sp, #24
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f023 0301 	bic.w	r3, r3, #1
 800a084:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f003 0301 	and.w	r3, r3, #1
 800a08c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a08e:	2300      	movs	r3, #0
 800a090:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a092:	f3ef 8305 	mrs	r3, IPSR
 800a096:	60bb      	str	r3, [r7, #8]
  return(result);
 800a098:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d003      	beq.n	800a0a6 <osMutexRelease+0x30>
    stat = osErrorISR;
 800a09e:	f06f 0305 	mvn.w	r3, #5
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	e01f      	b.n	800a0e6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d103      	bne.n	800a0b4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800a0ac:	f06f 0303 	mvn.w	r3, #3
 800a0b0:	617b      	str	r3, [r7, #20]
 800a0b2:	e018      	b.n	800a0e6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d009      	beq.n	800a0ce <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a0ba:	6938      	ldr	r0, [r7, #16]
 800a0bc:	f000 fb14 	bl	800a6e8 <xQueueGiveMutexRecursive>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d00f      	beq.n	800a0e6 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a0c6:	f06f 0302 	mvn.w	r3, #2
 800a0ca:	617b      	str	r3, [r7, #20]
 800a0cc:	e00b      	b.n	800a0e6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	6938      	ldr	r0, [r7, #16]
 800a0d6:	f000 fbdb 	bl	800a890 <xQueueGenericSend>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d002      	beq.n	800a0e6 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a0e0:	f06f 0302 	mvn.w	r3, #2
 800a0e4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a0e6:	697b      	ldr	r3, [r7, #20]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3718      	adds	r7, #24
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b08a      	sub	sp, #40	; 0x28
 800a0f4:	af02      	add	r7, sp, #8
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a100:	f3ef 8305 	mrs	r3, IPSR
 800a104:	613b      	str	r3, [r7, #16]
  return(result);
 800a106:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d175      	bne.n	800a1f8 <osSemaphoreNew+0x108>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d072      	beq.n	800a1f8 <osSemaphoreNew+0x108>
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	429a      	cmp	r2, r3
 800a118:	d86e      	bhi.n	800a1f8 <osSemaphoreNew+0x108>
    mem = -1;
 800a11a:	f04f 33ff 	mov.w	r3, #4294967295
 800a11e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d015      	beq.n	800a152 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d006      	beq.n	800a13c <osSemaphoreNew+0x4c>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	2b4f      	cmp	r3, #79	; 0x4f
 800a134:	d902      	bls.n	800a13c <osSemaphoreNew+0x4c>
        mem = 1;
 800a136:	2301      	movs	r3, #1
 800a138:	61bb      	str	r3, [r7, #24]
 800a13a:	e00c      	b.n	800a156 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d108      	bne.n	800a156 <osSemaphoreNew+0x66>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d104      	bne.n	800a156 <osSemaphoreNew+0x66>
          mem = 0;
 800a14c:	2300      	movs	r3, #0
 800a14e:	61bb      	str	r3, [r7, #24]
 800a150:	e001      	b.n	800a156 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a152:	2300      	movs	r3, #0
 800a154:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a15c:	d04c      	beq.n	800a1f8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d128      	bne.n	800a1b6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	2b01      	cmp	r3, #1
 800a168:	d10a      	bne.n	800a180 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	2203      	movs	r2, #3
 800a170:	9200      	str	r2, [sp, #0]
 800a172:	2200      	movs	r2, #0
 800a174:	2100      	movs	r1, #0
 800a176:	2001      	movs	r0, #1
 800a178:	f000 f994 	bl	800a4a4 <xQueueGenericCreateStatic>
 800a17c:	61f8      	str	r0, [r7, #28]
 800a17e:	e005      	b.n	800a18c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a180:	2203      	movs	r2, #3
 800a182:	2100      	movs	r1, #0
 800a184:	2001      	movs	r0, #1
 800a186:	f000 fa05 	bl	800a594 <xQueueGenericCreate>
 800a18a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d022      	beq.n	800a1d8 <osSemaphoreNew+0xe8>
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d01f      	beq.n	800a1d8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a198:	2300      	movs	r3, #0
 800a19a:	2200      	movs	r2, #0
 800a19c:	2100      	movs	r1, #0
 800a19e:	69f8      	ldr	r0, [r7, #28]
 800a1a0:	f000 fb76 	bl	800a890 <xQueueGenericSend>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d016      	beq.n	800a1d8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a1aa:	69f8      	ldr	r0, [r7, #28]
 800a1ac:	f000 fef6 	bl	800af9c <vQueueDelete>
            hSemaphore = NULL;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	61fb      	str	r3, [r7, #28]
 800a1b4:	e010      	b.n	800a1d8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d108      	bne.n	800a1ce <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	68b9      	ldr	r1, [r7, #8]
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f000 faf9 	bl	800a7bc <xQueueCreateCountingSemaphoreStatic>
 800a1ca:	61f8      	str	r0, [r7, #28]
 800a1cc:	e004      	b.n	800a1d8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a1ce:	68b9      	ldr	r1, [r7, #8]
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f000 fb2a 	bl	800a82a <xQueueCreateCountingSemaphore>
 800a1d6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00c      	beq.n	800a1f8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d003      	beq.n	800a1ec <osSemaphoreNew+0xfc>
          name = attr->name;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	617b      	str	r3, [r7, #20]
 800a1ea:	e001      	b.n	800a1f0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a1f0:	6979      	ldr	r1, [r7, #20]
 800a1f2:	69f8      	ldr	r0, [r7, #28]
 800a1f4:	f001 f81e 	bl	800b234 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a1f8:	69fb      	ldr	r3, [r7, #28]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3720      	adds	r7, #32
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
	...

0800a204 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	4a07      	ldr	r2, [pc, #28]	; (800a230 <vApplicationGetIdleTaskMemory+0x2c>)
 800a214:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	4a06      	ldr	r2, [pc, #24]	; (800a234 <vApplicationGetIdleTaskMemory+0x30>)
 800a21a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2280      	movs	r2, #128	; 0x80
 800a220:	601a      	str	r2, [r3, #0]
}
 800a222:	bf00      	nop
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	20001094 	.word	0x20001094
 800a234:	20001150 	.word	0x20001150

0800a238 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	4a07      	ldr	r2, [pc, #28]	; (800a264 <vApplicationGetTimerTaskMemory+0x2c>)
 800a248:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	4a06      	ldr	r2, [pc, #24]	; (800a268 <vApplicationGetTimerTaskMemory+0x30>)
 800a24e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a256:	601a      	str	r2, [r3, #0]
}
 800a258:	bf00      	nop
 800a25a:	3714      	adds	r7, #20
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	20001350 	.word	0x20001350
 800a268:	2000140c 	.word	0x2000140c

0800a26c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f103 0208 	add.w	r2, r3, #8
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f04f 32ff 	mov.w	r2, #4294967295
 800a284:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f103 0208 	add.w	r2, r3, #8
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f103 0208 	add.w	r2, r3, #8
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a2ba:	bf00      	nop
 800a2bc:	370c      	adds	r7, #12
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr

0800a2c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2c6:	b480      	push	{r7}
 800a2c8:	b085      	sub	sp, #20
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	689a      	ldr	r2, [r3, #8]
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	1c5a      	adds	r2, r3, #1
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	601a      	str	r2, [r3, #0]
}
 800a302:	bf00      	nop
 800a304:	3714      	adds	r7, #20
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a30e:	b480      	push	{r7}
 800a310:	b085      	sub	sp, #20
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a324:	d103      	bne.n	800a32e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	60fb      	str	r3, [r7, #12]
 800a32c:	e00c      	b.n	800a348 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	3308      	adds	r3, #8
 800a332:	60fb      	str	r3, [r7, #12]
 800a334:	e002      	b.n	800a33c <vListInsert+0x2e>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	60fb      	str	r3, [r7, #12]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	429a      	cmp	r2, r3
 800a346:	d2f6      	bcs.n	800a336 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	683a      	ldr	r2, [r7, #0]
 800a362:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	1c5a      	adds	r2, r3, #1
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	601a      	str	r2, [r3, #0]
}
 800a374:	bf00      	nop
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	6892      	ldr	r2, [r2, #8]
 800a396:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	6852      	ldr	r2, [r2, #4]
 800a3a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d103      	bne.n	800a3b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	689a      	ldr	r2, [r3, #8]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	1e5a      	subs	r2, r3, #1
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10a      	bne.n	800a3fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ec:	f383 8811 	msr	BASEPRI, r3
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a3fa:	bf00      	nop
 800a3fc:	e7fe      	b.n	800a3fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a3fe:	f002 ffa1 	bl	800d344 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a40a:	68f9      	ldr	r1, [r7, #12]
 800a40c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a40e:	fb01 f303 	mul.w	r3, r1, r3
 800a412:	441a      	add	r2, r3
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a42e:	3b01      	subs	r3, #1
 800a430:	68f9      	ldr	r1, [r7, #12]
 800a432:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a434:	fb01 f303 	mul.w	r3, r1, r3
 800a438:	441a      	add	r2, r3
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	22ff      	movs	r2, #255	; 0xff
 800a442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	22ff      	movs	r2, #255	; 0xff
 800a44a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d114      	bne.n	800a47e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d01a      	beq.n	800a492 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3310      	adds	r3, #16
 800a460:	4618      	mov	r0, r3
 800a462:	f001 fc85 	bl	800bd70 <xTaskRemoveFromEventList>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d012      	beq.n	800a492 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a46c:	4b0c      	ldr	r3, [pc, #48]	; (800a4a0 <xQueueGenericReset+0xcc>)
 800a46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a472:	601a      	str	r2, [r3, #0]
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	e009      	b.n	800a492 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3310      	adds	r3, #16
 800a482:	4618      	mov	r0, r3
 800a484:	f7ff fef2 	bl	800a26c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	3324      	adds	r3, #36	; 0x24
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7ff feed 	bl	800a26c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a492:	f002 ff87 	bl	800d3a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a496:	2301      	movs	r3, #1
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	e000ed04 	.word	0xe000ed04

0800a4a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b08e      	sub	sp, #56	; 0x38
 800a4a8:	af02      	add	r7, sp, #8
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]
 800a4b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10a      	bne.n	800a4ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4bc:	f383 8811 	msr	BASEPRI, r3
 800a4c0:	f3bf 8f6f 	isb	sy
 800a4c4:	f3bf 8f4f 	dsb	sy
 800a4c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4ca:	bf00      	nop
 800a4cc:	e7fe      	b.n	800a4cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10a      	bne.n	800a4ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4e6:	bf00      	nop
 800a4e8:	e7fe      	b.n	800a4e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <xQueueGenericCreateStatic+0x52>
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <xQueueGenericCreateStatic+0x56>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e000      	b.n	800a4fc <xQueueGenericCreateStatic+0x58>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10a      	bne.n	800a516 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	623b      	str	r3, [r7, #32]
}
 800a512:	bf00      	nop
 800a514:	e7fe      	b.n	800a514 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d102      	bne.n	800a522 <xQueueGenericCreateStatic+0x7e>
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d101      	bne.n	800a526 <xQueueGenericCreateStatic+0x82>
 800a522:	2301      	movs	r3, #1
 800a524:	e000      	b.n	800a528 <xQueueGenericCreateStatic+0x84>
 800a526:	2300      	movs	r3, #0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d10a      	bne.n	800a542 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a530:	f383 8811 	msr	BASEPRI, r3
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	61fb      	str	r3, [r7, #28]
}
 800a53e:	bf00      	nop
 800a540:	e7fe      	b.n	800a540 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a542:	2350      	movs	r3, #80	; 0x50
 800a544:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	2b50      	cmp	r3, #80	; 0x50
 800a54a:	d00a      	beq.n	800a562 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	61bb      	str	r3, [r7, #24]
}
 800a55e:	bf00      	nop
 800a560:	e7fe      	b.n	800a560 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a562:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00d      	beq.n	800a58a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a570:	2201      	movs	r2, #1
 800a572:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a576:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	4613      	mov	r3, r2
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	68b9      	ldr	r1, [r7, #8]
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f000 f83f 	bl	800a608 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3730      	adds	r7, #48	; 0x30
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a594:	b580      	push	{r7, lr}
 800a596:	b08a      	sub	sp, #40	; 0x28
 800a598:	af02      	add	r7, sp, #8
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10a      	bne.n	800a5be <xQueueGenericCreate+0x2a>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	613b      	str	r3, [r7, #16]
}
 800a5ba:	bf00      	nop
 800a5bc:	e7fe      	b.n	800a5bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	fb02 f303 	mul.w	r3, r2, r3
 800a5c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	3350      	adds	r3, #80	; 0x50
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f002 ffdb 	bl	800d588 <pvPortMalloc>
 800a5d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d011      	beq.n	800a5fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	3350      	adds	r3, #80	; 0x50
 800a5e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5ec:	79fa      	ldrb	r2, [r7, #7]
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	68b9      	ldr	r1, [r7, #8]
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f000 f805 	bl	800a608 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a5fe:	69bb      	ldr	r3, [r7, #24]
	}
 800a600:	4618      	mov	r0, r3
 800a602:	3720      	adds	r7, #32
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
 800a614:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d103      	bne.n	800a624 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	69ba      	ldr	r2, [r7, #24]
 800a620:	601a      	str	r2, [r3, #0]
 800a622:	e002      	b.n	800a62a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	68fa      	ldr	r2, [r7, #12]
 800a62e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	68ba      	ldr	r2, [r7, #8]
 800a634:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a636:	2101      	movs	r1, #1
 800a638:	69b8      	ldr	r0, [r7, #24]
 800a63a:	f7ff fecb 	bl	800a3d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	78fa      	ldrb	r2, [r7, #3]
 800a642:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a646:	bf00      	nop
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b082      	sub	sp, #8
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00e      	beq.n	800a67a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a66e:	2300      	movs	r3, #0
 800a670:	2200      	movs	r2, #0
 800a672:	2100      	movs	r1, #0
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 f90b 	bl	800a890 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a67a:	bf00      	nop
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a682:	b580      	push	{r7, lr}
 800a684:	b086      	sub	sp, #24
 800a686:	af00      	add	r7, sp, #0
 800a688:	4603      	mov	r3, r0
 800a68a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a68c:	2301      	movs	r3, #1
 800a68e:	617b      	str	r3, [r7, #20]
 800a690:	2300      	movs	r3, #0
 800a692:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a694:	79fb      	ldrb	r3, [r7, #7]
 800a696:	461a      	mov	r2, r3
 800a698:	6939      	ldr	r1, [r7, #16]
 800a69a:	6978      	ldr	r0, [r7, #20]
 800a69c:	f7ff ff7a 	bl	800a594 <xQueueGenericCreate>
 800a6a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f7ff ffd3 	bl	800a64e <prvInitialiseMutex>

		return xNewQueue;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
	}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3718      	adds	r7, #24
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b088      	sub	sp, #32
 800a6b6:	af02      	add	r7, sp, #8
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	6039      	str	r1, [r7, #0]
 800a6bc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	617b      	str	r3, [r7, #20]
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a6c6:	79fb      	ldrb	r3, [r7, #7]
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	6939      	ldr	r1, [r7, #16]
 800a6d0:	6978      	ldr	r0, [r7, #20]
 800a6d2:	f7ff fee7 	bl	800a4a4 <xQueueGenericCreateStatic>
 800a6d6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f7ff ffb8 	bl	800a64e <prvInitialiseMutex>

		return xNewQueue;
 800a6de:	68fb      	ldr	r3, [r7, #12]
	}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a6e8:	b590      	push	{r4, r7, lr}
 800a6ea:	b087      	sub	sp, #28
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10a      	bne.n	800a710 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	60fb      	str	r3, [r7, #12]
}
 800a70c:	bf00      	nop
 800a70e:	e7fe      	b.n	800a70e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	689c      	ldr	r4, [r3, #8]
 800a714:	f001 fcee 	bl	800c0f4 <xTaskGetCurrentTaskHandle>
 800a718:	4603      	mov	r3, r0
 800a71a:	429c      	cmp	r4, r3
 800a71c:	d111      	bne.n	800a742 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	1e5a      	subs	r2, r3, #1
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d105      	bne.n	800a73c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a730:	2300      	movs	r3, #0
 800a732:	2200      	movs	r2, #0
 800a734:	2100      	movs	r1, #0
 800a736:	6938      	ldr	r0, [r7, #16]
 800a738:	f000 f8aa 	bl	800a890 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a73c:	2301      	movs	r3, #1
 800a73e:	617b      	str	r3, [r7, #20]
 800a740:	e001      	b.n	800a746 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a742:	2300      	movs	r3, #0
 800a744:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a746:	697b      	ldr	r3, [r7, #20]
	}
 800a748:	4618      	mov	r0, r3
 800a74a:	371c      	adds	r7, #28
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd90      	pop	{r4, r7, pc}

0800a750 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a750:	b590      	push	{r4, r7, lr}
 800a752:	b087      	sub	sp, #28
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10a      	bne.n	800a77a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	60fb      	str	r3, [r7, #12]
}
 800a776:	bf00      	nop
 800a778:	e7fe      	b.n	800a778 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	689c      	ldr	r4, [r3, #8]
 800a77e:	f001 fcb9 	bl	800c0f4 <xTaskGetCurrentTaskHandle>
 800a782:	4603      	mov	r3, r0
 800a784:	429c      	cmp	r4, r3
 800a786:	d107      	bne.n	800a798 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	1c5a      	adds	r2, r3, #1
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a792:	2301      	movs	r3, #1
 800a794:	617b      	str	r3, [r7, #20]
 800a796:	e00c      	b.n	800a7b2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a798:	6839      	ldr	r1, [r7, #0]
 800a79a:	6938      	ldr	r0, [r7, #16]
 800a79c:	f000 faf2 	bl	800ad84 <xQueueSemaphoreTake>
 800a7a0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d004      	beq.n	800a7b2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	1c5a      	adds	r2, r3, #1
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a7b2:	697b      	ldr	r3, [r7, #20]
	}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	371c      	adds	r7, #28
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd90      	pop	{r4, r7, pc}

0800a7bc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b08a      	sub	sp, #40	; 0x28
 800a7c0:	af02      	add	r7, sp, #8
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10a      	bne.n	800a7e4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	61bb      	str	r3, [r7, #24]
}
 800a7e0:	bf00      	nop
 800a7e2:	e7fe      	b.n	800a7e2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d90a      	bls.n	800a802 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	617b      	str	r3, [r7, #20]
}
 800a7fe:	bf00      	nop
 800a800:	e7fe      	b.n	800a800 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a802:	2302      	movs	r3, #2
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	2100      	movs	r1, #0
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f7ff fe49 	bl	800a4a4 <xQueueGenericCreateStatic>
 800a812:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d002      	beq.n	800a820 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a820:	69fb      	ldr	r3, [r7, #28]
	}
 800a822:	4618      	mov	r0, r3
 800a824:	3720      	adds	r7, #32
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b086      	sub	sp, #24
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10a      	bne.n	800a850 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	613b      	str	r3, [r7, #16]
}
 800a84c:	bf00      	nop
 800a84e:	e7fe      	b.n	800a84e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a850:	683a      	ldr	r2, [r7, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	429a      	cmp	r2, r3
 800a856:	d90a      	bls.n	800a86e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	60fb      	str	r3, [r7, #12]
}
 800a86a:	bf00      	nop
 800a86c:	e7fe      	b.n	800a86c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a86e:	2202      	movs	r2, #2
 800a870:	2100      	movs	r1, #0
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7ff fe8e 	bl	800a594 <xQueueGenericCreate>
 800a878:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a886:	697b      	ldr	r3, [r7, #20]
	}
 800a888:	4618      	mov	r0, r3
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b08e      	sub	sp, #56	; 0x38
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
 800a89c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10a      	bne.n	800a8c2 <xQueueGenericSend+0x32>
	__asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8be:	bf00      	nop
 800a8c0:	e7fe      	b.n	800a8c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d103      	bne.n	800a8d0 <xQueueGenericSend+0x40>
 800a8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d101      	bne.n	800a8d4 <xQueueGenericSend+0x44>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e000      	b.n	800a8d6 <xQueueGenericSend+0x46>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10a      	bne.n	800a8f0 <xQueueGenericSend+0x60>
	__asm volatile
 800a8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8ec:	bf00      	nop
 800a8ee:	e7fe      	b.n	800a8ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d103      	bne.n	800a8fe <xQueueGenericSend+0x6e>
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d101      	bne.n	800a902 <xQueueGenericSend+0x72>
 800a8fe:	2301      	movs	r3, #1
 800a900:	e000      	b.n	800a904 <xQueueGenericSend+0x74>
 800a902:	2300      	movs	r3, #0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10a      	bne.n	800a91e <xQueueGenericSend+0x8e>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	623b      	str	r3, [r7, #32]
}
 800a91a:	bf00      	nop
 800a91c:	e7fe      	b.n	800a91c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a91e:	f001 fbf9 	bl	800c114 <xTaskGetSchedulerState>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d102      	bne.n	800a92e <xQueueGenericSend+0x9e>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d101      	bne.n	800a932 <xQueueGenericSend+0xa2>
 800a92e:	2301      	movs	r3, #1
 800a930:	e000      	b.n	800a934 <xQueueGenericSend+0xa4>
 800a932:	2300      	movs	r3, #0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10a      	bne.n	800a94e <xQueueGenericSend+0xbe>
	__asm volatile
 800a938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93c:	f383 8811 	msr	BASEPRI, r3
 800a940:	f3bf 8f6f 	isb	sy
 800a944:	f3bf 8f4f 	dsb	sy
 800a948:	61fb      	str	r3, [r7, #28]
}
 800a94a:	bf00      	nop
 800a94c:	e7fe      	b.n	800a94c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a94e:	f002 fcf9 	bl	800d344 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d302      	bcc.n	800a964 <xQueueGenericSend+0xd4>
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2b02      	cmp	r3, #2
 800a962:	d129      	bne.n	800a9b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	68b9      	ldr	r1, [r7, #8]
 800a968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a96a:	f000 fb52 	bl	800b012 <prvCopyDataToQueue>
 800a96e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a974:	2b00      	cmp	r3, #0
 800a976:	d010      	beq.n	800a99a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97a:	3324      	adds	r3, #36	; 0x24
 800a97c:	4618      	mov	r0, r3
 800a97e:	f001 f9f7 	bl	800bd70 <xTaskRemoveFromEventList>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d013      	beq.n	800a9b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a988:	4b3f      	ldr	r3, [pc, #252]	; (800aa88 <xQueueGenericSend+0x1f8>)
 800a98a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a98e:	601a      	str	r2, [r3, #0]
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	e00a      	b.n	800a9b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d007      	beq.n	800a9b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a9a0:	4b39      	ldr	r3, [pc, #228]	; (800aa88 <xQueueGenericSend+0x1f8>)
 800a9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9a6:	601a      	str	r2, [r3, #0]
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a9b0:	f002 fcf8 	bl	800d3a4 <vPortExitCritical>
				return pdPASS;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e063      	b.n	800aa80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d103      	bne.n	800a9c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9be:	f002 fcf1 	bl	800d3a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	e05c      	b.n	800aa80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d106      	bne.n	800a9da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9cc:	f107 0314 	add.w	r3, r7, #20
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f001 fa31 	bl	800be38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9da:	f002 fce3 	bl	800d3a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9de:	f000 ff8b 	bl	800b8f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9e2:	f002 fcaf 	bl	800d344 <vPortEnterCritical>
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9ec:	b25b      	sxtb	r3, r3
 800a9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f2:	d103      	bne.n	800a9fc <xQueueGenericSend+0x16c>
 800a9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa02:	b25b      	sxtb	r3, r3
 800aa04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa08:	d103      	bne.n	800aa12 <xQueueGenericSend+0x182>
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa12:	f002 fcc7 	bl	800d3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa16:	1d3a      	adds	r2, r7, #4
 800aa18:	f107 0314 	add.w	r3, r7, #20
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f001 fa20 	bl	800be64 <xTaskCheckForTimeOut>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d124      	bne.n	800aa74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa2c:	f000 fbe9 	bl	800b202 <prvIsQueueFull>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d018      	beq.n	800aa68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa38:	3310      	adds	r3, #16
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f001 f946 	bl	800bcd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa46:	f000 fb74 	bl	800b132 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa4a:	f000 ff63 	bl	800b914 <xTaskResumeAll>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f47f af7c 	bne.w	800a94e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aa56:	4b0c      	ldr	r3, [pc, #48]	; (800aa88 <xQueueGenericSend+0x1f8>)
 800aa58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa5c:	601a      	str	r2, [r3, #0]
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	e772      	b.n	800a94e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa6a:	f000 fb62 	bl	800b132 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa6e:	f000 ff51 	bl	800b914 <xTaskResumeAll>
 800aa72:	e76c      	b.n	800a94e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa76:	f000 fb5c 	bl	800b132 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa7a:	f000 ff4b 	bl	800b914 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3738      	adds	r7, #56	; 0x38
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	e000ed04 	.word	0xe000ed04

0800aa8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b090      	sub	sp, #64	; 0x40
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
 800aa98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aa9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10a      	bne.n	800aaba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aab6:	bf00      	nop
 800aab8:	e7fe      	b.n	800aab8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d103      	bne.n	800aac8 <xQueueGenericSendFromISR+0x3c>
 800aac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d101      	bne.n	800aacc <xQueueGenericSendFromISR+0x40>
 800aac8:	2301      	movs	r3, #1
 800aaca:	e000      	b.n	800aace <xQueueGenericSendFromISR+0x42>
 800aacc:	2300      	movs	r3, #0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10a      	bne.n	800aae8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad6:	f383 8811 	msr	BASEPRI, r3
 800aada:	f3bf 8f6f 	isb	sy
 800aade:	f3bf 8f4f 	dsb	sy
 800aae2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aae4:	bf00      	nop
 800aae6:	e7fe      	b.n	800aae6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d103      	bne.n	800aaf6 <xQueueGenericSendFromISR+0x6a>
 800aaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d101      	bne.n	800aafa <xQueueGenericSendFromISR+0x6e>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e000      	b.n	800aafc <xQueueGenericSendFromISR+0x70>
 800aafa:	2300      	movs	r3, #0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10a      	bne.n	800ab16 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	623b      	str	r3, [r7, #32]
}
 800ab12:	bf00      	nop
 800ab14:	e7fe      	b.n	800ab14 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab16:	f002 fcf7 	bl	800d508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab1a:	f3ef 8211 	mrs	r2, BASEPRI
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	61fa      	str	r2, [r7, #28]
 800ab30:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab32:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab34:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d302      	bcc.n	800ab48 <xQueueGenericSendFromISR+0xbc>
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d12f      	bne.n	800aba8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab56:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab58:	683a      	ldr	r2, [r7, #0]
 800ab5a:	68b9      	ldr	r1, [r7, #8]
 800ab5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab5e:	f000 fa58 	bl	800b012 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ab66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6a:	d112      	bne.n	800ab92 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d016      	beq.n	800aba2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab76:	3324      	adds	r3, #36	; 0x24
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f001 f8f9 	bl	800bd70 <xTaskRemoveFromEventList>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00e      	beq.n	800aba2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00b      	beq.n	800aba2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	601a      	str	r2, [r3, #0]
 800ab90:	e007      	b.n	800aba2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab96:	3301      	adds	r3, #1
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	b25a      	sxtb	r2, r3
 800ab9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aba2:	2301      	movs	r3, #1
 800aba4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800aba6:	e001      	b.n	800abac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aba8:	2300      	movs	r3, #0
 800abaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800abb6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3740      	adds	r7, #64	; 0x40
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
	...

0800abc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b08c      	sub	sp, #48	; 0x30
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800abd0:	2300      	movs	r3, #0
 800abd2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800abd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d10a      	bne.n	800abf4 <xQueueReceive+0x30>
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	623b      	str	r3, [r7, #32]
}
 800abf0:	bf00      	nop
 800abf2:	e7fe      	b.n	800abf2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d103      	bne.n	800ac02 <xQueueReceive+0x3e>
 800abfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d101      	bne.n	800ac06 <xQueueReceive+0x42>
 800ac02:	2301      	movs	r3, #1
 800ac04:	e000      	b.n	800ac08 <xQueueReceive+0x44>
 800ac06:	2300      	movs	r3, #0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10a      	bne.n	800ac22 <xQueueReceive+0x5e>
	__asm volatile
 800ac0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	61fb      	str	r3, [r7, #28]
}
 800ac1e:	bf00      	nop
 800ac20:	e7fe      	b.n	800ac20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac22:	f001 fa77 	bl	800c114 <xTaskGetSchedulerState>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d102      	bne.n	800ac32 <xQueueReceive+0x6e>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d101      	bne.n	800ac36 <xQueueReceive+0x72>
 800ac32:	2301      	movs	r3, #1
 800ac34:	e000      	b.n	800ac38 <xQueueReceive+0x74>
 800ac36:	2300      	movs	r3, #0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10a      	bne.n	800ac52 <xQueueReceive+0x8e>
	__asm volatile
 800ac3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	61bb      	str	r3, [r7, #24]
}
 800ac4e:	bf00      	nop
 800ac50:	e7fe      	b.n	800ac50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac52:	f002 fb77 	bl	800d344 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d01f      	beq.n	800aca2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac62:	68b9      	ldr	r1, [r7, #8]
 800ac64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac66:	f000 fa3e 	bl	800b0e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6c:	1e5a      	subs	r2, r3, #1
 800ac6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00f      	beq.n	800ac9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7c:	3310      	adds	r3, #16
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f001 f876 	bl	800bd70 <xTaskRemoveFromEventList>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d007      	beq.n	800ac9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac8a:	4b3d      	ldr	r3, [pc, #244]	; (800ad80 <xQueueReceive+0x1bc>)
 800ac8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac90:	601a      	str	r2, [r3, #0]
 800ac92:	f3bf 8f4f 	dsb	sy
 800ac96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac9a:	f002 fb83 	bl	800d3a4 <vPortExitCritical>
				return pdPASS;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e069      	b.n	800ad76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d103      	bne.n	800acb0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aca8:	f002 fb7c 	bl	800d3a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800acac:	2300      	movs	r3, #0
 800acae:	e062      	b.n	800ad76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d106      	bne.n	800acc4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acb6:	f107 0310 	add.w	r3, r7, #16
 800acba:	4618      	mov	r0, r3
 800acbc:	f001 f8bc 	bl	800be38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800acc0:	2301      	movs	r3, #1
 800acc2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acc4:	f002 fb6e 	bl	800d3a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acc8:	f000 fe16 	bl	800b8f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800accc:	f002 fb3a 	bl	800d344 <vPortEnterCritical>
 800acd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acd6:	b25b      	sxtb	r3, r3
 800acd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acdc:	d103      	bne.n	800ace6 <xQueueReceive+0x122>
 800acde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ace6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acec:	b25b      	sxtb	r3, r3
 800acee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf2:	d103      	bne.n	800acfc <xQueueReceive+0x138>
 800acf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acfc:	f002 fb52 	bl	800d3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad00:	1d3a      	adds	r2, r7, #4
 800ad02:	f107 0310 	add.w	r3, r7, #16
 800ad06:	4611      	mov	r1, r2
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f001 f8ab 	bl	800be64 <xTaskCheckForTimeOut>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d123      	bne.n	800ad5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad16:	f000 fa5e 	bl	800b1d6 <prvIsQueueEmpty>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d017      	beq.n	800ad50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad22:	3324      	adds	r3, #36	; 0x24
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	4611      	mov	r1, r2
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f000 ffd1 	bl	800bcd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad30:	f000 f9ff 	bl	800b132 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad34:	f000 fdee 	bl	800b914 <xTaskResumeAll>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d189      	bne.n	800ac52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ad3e:	4b10      	ldr	r3, [pc, #64]	; (800ad80 <xQueueReceive+0x1bc>)
 800ad40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad44:	601a      	str	r2, [r3, #0]
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	e780      	b.n	800ac52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad52:	f000 f9ee 	bl	800b132 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad56:	f000 fddd 	bl	800b914 <xTaskResumeAll>
 800ad5a:	e77a      	b.n	800ac52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad5e:	f000 f9e8 	bl	800b132 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad62:	f000 fdd7 	bl	800b914 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad68:	f000 fa35 	bl	800b1d6 <prvIsQueueEmpty>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f43f af6f 	beq.w	800ac52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3730      	adds	r7, #48	; 0x30
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	e000ed04 	.word	0xe000ed04

0800ad84 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b08e      	sub	sp, #56	; 0x38
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ad96:	2300      	movs	r3, #0
 800ad98:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	623b      	str	r3, [r7, #32]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800adb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00a      	beq.n	800add4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	61fb      	str	r3, [r7, #28]
}
 800add0:	bf00      	nop
 800add2:	e7fe      	b.n	800add2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800add4:	f001 f99e 	bl	800c114 <xTaskGetSchedulerState>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d102      	bne.n	800ade4 <xQueueSemaphoreTake+0x60>
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d101      	bne.n	800ade8 <xQueueSemaphoreTake+0x64>
 800ade4:	2301      	movs	r3, #1
 800ade6:	e000      	b.n	800adea <xQueueSemaphoreTake+0x66>
 800ade8:	2300      	movs	r3, #0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d10a      	bne.n	800ae04 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	61bb      	str	r3, [r7, #24]
}
 800ae00:	bf00      	nop
 800ae02:	e7fe      	b.n	800ae02 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae04:	f002 fa9e 	bl	800d344 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ae08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ae0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d024      	beq.n	800ae5e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ae14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae16:	1e5a      	subs	r2, r3, #1
 800ae18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d104      	bne.n	800ae2e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ae24:	f001 faec 	bl	800c400 <pvTaskIncrementMutexHeldCount>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00f      	beq.n	800ae56 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae38:	3310      	adds	r3, #16
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f000 ff98 	bl	800bd70 <xTaskRemoveFromEventList>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d007      	beq.n	800ae56 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae46:	4b54      	ldr	r3, [pc, #336]	; (800af98 <xQueueSemaphoreTake+0x214>)
 800ae48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae4c:	601a      	str	r2, [r3, #0]
 800ae4e:	f3bf 8f4f 	dsb	sy
 800ae52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae56:	f002 faa5 	bl	800d3a4 <vPortExitCritical>
				return pdPASS;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e097      	b.n	800af8e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d111      	bne.n	800ae88 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ae64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00a      	beq.n	800ae80 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ae6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6e:	f383 8811 	msr	BASEPRI, r3
 800ae72:	f3bf 8f6f 	isb	sy
 800ae76:	f3bf 8f4f 	dsb	sy
 800ae7a:	617b      	str	r3, [r7, #20]
}
 800ae7c:	bf00      	nop
 800ae7e:	e7fe      	b.n	800ae7e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ae80:	f002 fa90 	bl	800d3a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae84:	2300      	movs	r3, #0
 800ae86:	e082      	b.n	800af8e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d106      	bne.n	800ae9c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae8e:	f107 030c 	add.w	r3, r7, #12
 800ae92:	4618      	mov	r0, r3
 800ae94:	f000 ffd0 	bl	800be38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae9c:	f002 fa82 	bl	800d3a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aea0:	f000 fd2a 	bl	800b8f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aea4:	f002 fa4e 	bl	800d344 <vPortEnterCritical>
 800aea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeae:	b25b      	sxtb	r3, r3
 800aeb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb4:	d103      	bne.n	800aebe <xQueueSemaphoreTake+0x13a>
 800aeb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aec4:	b25b      	sxtb	r3, r3
 800aec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeca:	d103      	bne.n	800aed4 <xQueueSemaphoreTake+0x150>
 800aecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aed4:	f002 fa66 	bl	800d3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aed8:	463a      	mov	r2, r7
 800aeda:	f107 030c 	add.w	r3, r7, #12
 800aede:	4611      	mov	r1, r2
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 ffbf 	bl	800be64 <xTaskCheckForTimeOut>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d132      	bne.n	800af52 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aeec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aeee:	f000 f972 	bl	800b1d6 <prvIsQueueEmpty>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d026      	beq.n	800af46 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d109      	bne.n	800af14 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800af00:	f002 fa20 	bl	800d344 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	4618      	mov	r0, r3
 800af0a:	f001 f921 	bl	800c150 <xTaskPriorityInherit>
 800af0e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800af10:	f002 fa48 	bl	800d3a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af16:	3324      	adds	r3, #36	; 0x24
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	4611      	mov	r1, r2
 800af1c:	4618      	mov	r0, r3
 800af1e:	f000 fed7 	bl	800bcd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af24:	f000 f905 	bl	800b132 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af28:	f000 fcf4 	bl	800b914 <xTaskResumeAll>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f47f af68 	bne.w	800ae04 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800af34:	4b18      	ldr	r3, [pc, #96]	; (800af98 <xQueueSemaphoreTake+0x214>)
 800af36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af3a:	601a      	str	r2, [r3, #0]
 800af3c:	f3bf 8f4f 	dsb	sy
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	e75e      	b.n	800ae04 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800af46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af48:	f000 f8f3 	bl	800b132 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af4c:	f000 fce2 	bl	800b914 <xTaskResumeAll>
 800af50:	e758      	b.n	800ae04 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800af52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af54:	f000 f8ed 	bl	800b132 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af58:	f000 fcdc 	bl	800b914 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af5e:	f000 f93a 	bl	800b1d6 <prvIsQueueEmpty>
 800af62:	4603      	mov	r3, r0
 800af64:	2b00      	cmp	r3, #0
 800af66:	f43f af4d 	beq.w	800ae04 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800af6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00d      	beq.n	800af8c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800af70:	f002 f9e8 	bl	800d344 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800af74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af76:	f000 f834 	bl	800afe2 <prvGetDisinheritPriorityAfterTimeout>
 800af7a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800af7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af82:	4618      	mov	r0, r3
 800af84:	f001 f9ba 	bl	800c2fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800af88:	f002 fa0c 	bl	800d3a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3738      	adds	r7, #56	; 0x38
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	e000ed04 	.word	0xe000ed04

0800af9c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d10a      	bne.n	800afc4 <vQueueDelete+0x28>
	__asm volatile
 800afae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb2:	f383 8811 	msr	BASEPRI, r3
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	60bb      	str	r3, [r7, #8]
}
 800afc0:	bf00      	nop
 800afc2:	e7fe      	b.n	800afc2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f000 f95f 	bl	800b288 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d102      	bne.n	800afda <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f002 fba3 	bl	800d720 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800afda:	bf00      	nop
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800afe2:	b480      	push	{r7}
 800afe4:	b085      	sub	sp, #20
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d006      	beq.n	800b000 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800affc:	60fb      	str	r3, [r7, #12]
 800affe:	e001      	b.n	800b004 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b000:	2300      	movs	r3, #0
 800b002:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b004:	68fb      	ldr	r3, [r7, #12]
	}
 800b006:	4618      	mov	r0, r3
 800b008:	3714      	adds	r7, #20
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b086      	sub	sp, #24
 800b016:	af00      	add	r7, sp, #0
 800b018:	60f8      	str	r0, [r7, #12]
 800b01a:	60b9      	str	r1, [r7, #8]
 800b01c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b01e:	2300      	movs	r3, #0
 800b020:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b026:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10d      	bne.n	800b04c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d14d      	bne.n	800b0d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f001 f8ef 	bl	800c220 <xTaskPriorityDisinherit>
 800b042:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2200      	movs	r2, #0
 800b048:	609a      	str	r2, [r3, #8]
 800b04a:	e043      	b.n	800b0d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d119      	bne.n	800b086 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6858      	ldr	r0, [r3, #4]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b05a:	461a      	mov	r2, r3
 800b05c:	68b9      	ldr	r1, [r7, #8]
 800b05e:	f002 fda0 	bl	800dba2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	685a      	ldr	r2, [r3, #4]
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06a:	441a      	add	r2, r3
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	685a      	ldr	r2, [r3, #4]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d32b      	bcc.n	800b0d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	605a      	str	r2, [r3, #4]
 800b084:	e026      	b.n	800b0d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	68d8      	ldr	r0, [r3, #12]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08e:	461a      	mov	r2, r3
 800b090:	68b9      	ldr	r1, [r7, #8]
 800b092:	f002 fd86 	bl	800dba2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	68da      	ldr	r2, [r3, #12]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09e:	425b      	negs	r3, r3
 800b0a0:	441a      	add	r2, r3
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	68da      	ldr	r2, [r3, #12]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d207      	bcs.n	800b0c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	689a      	ldr	r2, [r3, #8]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ba:	425b      	negs	r3, r3
 800b0bc:	441a      	add	r2, r3
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b02      	cmp	r3, #2
 800b0c6:	d105      	bne.n	800b0d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d002      	beq.n	800b0d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	1c5a      	adds	r2, r3, #1
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0dc:	697b      	ldr	r3, [r7, #20]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3718      	adds	r7, #24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b082      	sub	sp, #8
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d018      	beq.n	800b12a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	68da      	ldr	r2, [r3, #12]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b100:	441a      	add	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	68da      	ldr	r2, [r3, #12]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d303      	bcc.n	800b11a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	68d9      	ldr	r1, [r3, #12]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b122:	461a      	mov	r2, r3
 800b124:	6838      	ldr	r0, [r7, #0]
 800b126:	f002 fd3c 	bl	800dba2 <memcpy>
	}
}
 800b12a:	bf00      	nop
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b084      	sub	sp, #16
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b13a:	f002 f903 	bl	800d344 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b144:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b146:	e011      	b.n	800b16c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d012      	beq.n	800b176 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	3324      	adds	r3, #36	; 0x24
 800b154:	4618      	mov	r0, r3
 800b156:	f000 fe0b 	bl	800bd70 <xTaskRemoveFromEventList>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d001      	beq.n	800b164 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b160:	f000 fee2 	bl	800bf28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b164:	7bfb      	ldrb	r3, [r7, #15]
 800b166:	3b01      	subs	r3, #1
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b16c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b170:	2b00      	cmp	r3, #0
 800b172:	dce9      	bgt.n	800b148 <prvUnlockQueue+0x16>
 800b174:	e000      	b.n	800b178 <prvUnlockQueue+0x46>
					break;
 800b176:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	22ff      	movs	r2, #255	; 0xff
 800b17c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b180:	f002 f910 	bl	800d3a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b184:	f002 f8de 	bl	800d344 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b18e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b190:	e011      	b.n	800b1b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d012      	beq.n	800b1c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	3310      	adds	r3, #16
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f000 fde6 	bl	800bd70 <xTaskRemoveFromEventList>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d001      	beq.n	800b1ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b1aa:	f000 febd 	bl	800bf28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b1ae:	7bbb      	ldrb	r3, [r7, #14]
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	dce9      	bgt.n	800b192 <prvUnlockQueue+0x60>
 800b1be:	e000      	b.n	800b1c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	22ff      	movs	r2, #255	; 0xff
 800b1c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b1ca:	f002 f8eb 	bl	800d3a4 <vPortExitCritical>
}
 800b1ce:	bf00      	nop
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b084      	sub	sp, #16
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1de:	f002 f8b1 	bl	800d344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d102      	bne.n	800b1f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	60fb      	str	r3, [r7, #12]
 800b1ee:	e001      	b.n	800b1f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1f4:	f002 f8d6 	bl	800d3a4 <vPortExitCritical>

	return xReturn;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b084      	sub	sp, #16
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b20a:	f002 f89b 	bl	800d344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b216:	429a      	cmp	r2, r3
 800b218:	d102      	bne.n	800b220 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b21a:	2301      	movs	r3, #1
 800b21c:	60fb      	str	r3, [r7, #12]
 800b21e:	e001      	b.n	800b224 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b220:	2300      	movs	r3, #0
 800b222:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b224:	f002 f8be 	bl	800d3a4 <vPortExitCritical>

	return xReturn;
 800b228:	68fb      	ldr	r3, [r7, #12]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
	...

0800b234 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b23e:	2300      	movs	r3, #0
 800b240:	60fb      	str	r3, [r7, #12]
 800b242:	e014      	b.n	800b26e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b244:	4a0f      	ldr	r2, [pc, #60]	; (800b284 <vQueueAddToRegistry+0x50>)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d10b      	bne.n	800b268 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b250:	490c      	ldr	r1, [pc, #48]	; (800b284 <vQueueAddToRegistry+0x50>)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	683a      	ldr	r2, [r7, #0]
 800b256:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b25a:	4a0a      	ldr	r2, [pc, #40]	; (800b284 <vQueueAddToRegistry+0x50>)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	00db      	lsls	r3, r3, #3
 800b260:	4413      	add	r3, r2
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b266:	e006      	b.n	800b276 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	3301      	adds	r3, #1
 800b26c:	60fb      	str	r3, [r7, #12]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b07      	cmp	r3, #7
 800b272:	d9e7      	bls.n	800b244 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b274:	bf00      	nop
 800b276:	bf00      	nop
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	2000180c 	.word	0x2000180c

0800b288 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b290:	2300      	movs	r3, #0
 800b292:	60fb      	str	r3, [r7, #12]
 800b294:	e016      	b.n	800b2c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b296:	4a10      	ldr	r2, [pc, #64]	; (800b2d8 <vQueueUnregisterQueue+0x50>)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	00db      	lsls	r3, r3, #3
 800b29c:	4413      	add	r3, r2
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d10b      	bne.n	800b2be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b2a6:	4a0c      	ldr	r2, [pc, #48]	; (800b2d8 <vQueueUnregisterQueue+0x50>)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b2b0:	4a09      	ldr	r2, [pc, #36]	; (800b2d8 <vQueueUnregisterQueue+0x50>)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	00db      	lsls	r3, r3, #3
 800b2b6:	4413      	add	r3, r2
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	605a      	str	r2, [r3, #4]
				break;
 800b2bc:	e006      	b.n	800b2cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	60fb      	str	r3, [r7, #12]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b07      	cmp	r3, #7
 800b2c8:	d9e5      	bls.n	800b296 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b2ca:	bf00      	nop
 800b2cc:	bf00      	nop
 800b2ce:	3714      	adds	r7, #20
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	2000180c 	.word	0x2000180c

0800b2dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b086      	sub	sp, #24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b2ec:	f002 f82a 	bl	800d344 <vPortEnterCritical>
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2f6:	b25b      	sxtb	r3, r3
 800b2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fc:	d103      	bne.n	800b306 <vQueueWaitForMessageRestricted+0x2a>
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	2200      	movs	r2, #0
 800b302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b30c:	b25b      	sxtb	r3, r3
 800b30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b312:	d103      	bne.n	800b31c <vQueueWaitForMessageRestricted+0x40>
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2200      	movs	r2, #0
 800b318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b31c:	f002 f842 	bl	800d3a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b324:	2b00      	cmp	r3, #0
 800b326:	d106      	bne.n	800b336 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	3324      	adds	r3, #36	; 0x24
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	68b9      	ldr	r1, [r7, #8]
 800b330:	4618      	mov	r0, r3
 800b332:	f000 fcf1 	bl	800bd18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b336:	6978      	ldr	r0, [r7, #20]
 800b338:	f7ff fefb 	bl	800b132 <prvUnlockQueue>
	}
 800b33c:	bf00      	nop
 800b33e:	3718      	adds	r7, #24
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b344:	b580      	push	{r7, lr}
 800b346:	b08e      	sub	sp, #56	; 0x38
 800b348:	af04      	add	r7, sp, #16
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
 800b350:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10a      	bne.n	800b36e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35c:	f383 8811 	msr	BASEPRI, r3
 800b360:	f3bf 8f6f 	isb	sy
 800b364:	f3bf 8f4f 	dsb	sy
 800b368:	623b      	str	r3, [r7, #32]
}
 800b36a:	bf00      	nop
 800b36c:	e7fe      	b.n	800b36c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b370:	2b00      	cmp	r3, #0
 800b372:	d10a      	bne.n	800b38a <xTaskCreateStatic+0x46>
	__asm volatile
 800b374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	61fb      	str	r3, [r7, #28]
}
 800b386:	bf00      	nop
 800b388:	e7fe      	b.n	800b388 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b38a:	23bc      	movs	r3, #188	; 0xbc
 800b38c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	2bbc      	cmp	r3, #188	; 0xbc
 800b392:	d00a      	beq.n	800b3aa <xTaskCreateStatic+0x66>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	61bb      	str	r3, [r7, #24]
}
 800b3a6:	bf00      	nop
 800b3a8:	e7fe      	b.n	800b3a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b3aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d01e      	beq.n	800b3f0 <xTaskCreateStatic+0xac>
 800b3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d01b      	beq.n	800b3f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	2202      	movs	r2, #2
 800b3c6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	9303      	str	r3, [sp, #12]
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	9302      	str	r3, [sp, #8]
 800b3d2:	f107 0314 	add.w	r3, r7, #20
 800b3d6:	9301      	str	r3, [sp, #4]
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	68b9      	ldr	r1, [r7, #8]
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f000 f850 	bl	800b488 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3ea:	f000 f8f3 	bl	800b5d4 <prvAddNewTaskToReadyList>
 800b3ee:	e001      	b.n	800b3f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b3f4:	697b      	ldr	r3, [r7, #20]
	}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3728      	adds	r7, #40	; 0x28
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b08c      	sub	sp, #48	; 0x30
 800b402:	af04      	add	r7, sp, #16
 800b404:	60f8      	str	r0, [r7, #12]
 800b406:	60b9      	str	r1, [r7, #8]
 800b408:	603b      	str	r3, [r7, #0]
 800b40a:	4613      	mov	r3, r2
 800b40c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b40e:	88fb      	ldrh	r3, [r7, #6]
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4618      	mov	r0, r3
 800b414:	f002 f8b8 	bl	800d588 <pvPortMalloc>
 800b418:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00e      	beq.n	800b43e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b420:	20bc      	movs	r0, #188	; 0xbc
 800b422:	f002 f8b1 	bl	800d588 <pvPortMalloc>
 800b426:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d003      	beq.n	800b436 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	697a      	ldr	r2, [r7, #20]
 800b432:	631a      	str	r2, [r3, #48]	; 0x30
 800b434:	e005      	b.n	800b442 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b436:	6978      	ldr	r0, [r7, #20]
 800b438:	f002 f972 	bl	800d720 <vPortFree>
 800b43c:	e001      	b.n	800b442 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b43e:	2300      	movs	r3, #0
 800b440:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d017      	beq.n	800b478 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b450:	88fa      	ldrh	r2, [r7, #6]
 800b452:	2300      	movs	r3, #0
 800b454:	9303      	str	r3, [sp, #12]
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	9302      	str	r3, [sp, #8]
 800b45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45c:	9301      	str	r3, [sp, #4]
 800b45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	68b9      	ldr	r1, [r7, #8]
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f000 f80e 	bl	800b488 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b46c:	69f8      	ldr	r0, [r7, #28]
 800b46e:	f000 f8b1 	bl	800b5d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b472:	2301      	movs	r3, #1
 800b474:	61bb      	str	r3, [r7, #24]
 800b476:	e002      	b.n	800b47e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b478:	f04f 33ff 	mov.w	r3, #4294967295
 800b47c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b47e:	69bb      	ldr	r3, [r7, #24]
	}
 800b480:	4618      	mov	r0, r3
 800b482:	3720      	adds	r7, #32
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b088      	sub	sp, #32
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
 800b494:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	461a      	mov	r2, r3
 800b4a0:	21a5      	movs	r1, #165	; 0xa5
 800b4a2:	f002 fb8c 	bl	800dbbe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4413      	add	r3, r2
 800b4b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	f023 0307 	bic.w	r3, r3, #7
 800b4be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	f003 0307 	and.w	r3, r3, #7
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00a      	beq.n	800b4e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ce:	f383 8811 	msr	BASEPRI, r3
 800b4d2:	f3bf 8f6f 	isb	sy
 800b4d6:	f3bf 8f4f 	dsb	sy
 800b4da:	617b      	str	r3, [r7, #20]
}
 800b4dc:	bf00      	nop
 800b4de:	e7fe      	b.n	800b4de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d01f      	beq.n	800b526 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	61fb      	str	r3, [r7, #28]
 800b4ea:	e012      	b.n	800b512 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	7819      	ldrb	r1, [r3, #0]
 800b4f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	3334      	adds	r3, #52	; 0x34
 800b4fc:	460a      	mov	r2, r1
 800b4fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b500:	68ba      	ldr	r2, [r7, #8]
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	4413      	add	r3, r2
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d006      	beq.n	800b51a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	3301      	adds	r3, #1
 800b510:	61fb      	str	r3, [r7, #28]
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	2b0f      	cmp	r3, #15
 800b516:	d9e9      	bls.n	800b4ec <prvInitialiseNewTask+0x64>
 800b518:	e000      	b.n	800b51c <prvInitialiseNewTask+0x94>
			{
				break;
 800b51a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b524:	e003      	b.n	800b52e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b528:	2200      	movs	r2, #0
 800b52a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b530:	2b37      	cmp	r3, #55	; 0x37
 800b532:	d901      	bls.n	800b538 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b534:	2337      	movs	r3, #55	; 0x37
 800b536:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b53c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b542:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b546:	2200      	movs	r2, #0
 800b548:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	3304      	adds	r3, #4
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fe feac 	bl	800a2ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b556:	3318      	adds	r3, #24
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe fea7 	bl	800a2ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b562:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b566:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b572:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b576:	2200      	movs	r2, #0
 800b578:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b586:	3354      	adds	r3, #84	; 0x54
 800b588:	2260      	movs	r2, #96	; 0x60
 800b58a:	2100      	movs	r1, #0
 800b58c:	4618      	mov	r0, r3
 800b58e:	f002 fb16 	bl	800dbbe <memset>
 800b592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b594:	4a0c      	ldr	r2, [pc, #48]	; (800b5c8 <prvInitialiseNewTask+0x140>)
 800b596:	659a      	str	r2, [r3, #88]	; 0x58
 800b598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59a:	4a0c      	ldr	r2, [pc, #48]	; (800b5cc <prvInitialiseNewTask+0x144>)
 800b59c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a0:	4a0b      	ldr	r2, [pc, #44]	; (800b5d0 <prvInitialiseNewTask+0x148>)
 800b5a2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b5a4:	683a      	ldr	r2, [r7, #0]
 800b5a6:	68f9      	ldr	r1, [r7, #12]
 800b5a8:	69b8      	ldr	r0, [r7, #24]
 800b5aa:	f001 fd9b 	bl	800d0e4 <pxPortInitialiseStack>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d002      	beq.n	800b5c0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5c0:	bf00      	nop
 800b5c2:	3720      	adds	r7, #32
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	080121d8 	.word	0x080121d8
 800b5cc:	080121f8 	.word	0x080121f8
 800b5d0:	080121b8 	.word	0x080121b8

0800b5d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b5dc:	f001 feb2 	bl	800d344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b5e0:	4b2d      	ldr	r3, [pc, #180]	; (800b698 <prvAddNewTaskToReadyList+0xc4>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	4a2c      	ldr	r2, [pc, #176]	; (800b698 <prvAddNewTaskToReadyList+0xc4>)
 800b5e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b5ea:	4b2c      	ldr	r3, [pc, #176]	; (800b69c <prvAddNewTaskToReadyList+0xc8>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d109      	bne.n	800b606 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b5f2:	4a2a      	ldr	r2, [pc, #168]	; (800b69c <prvAddNewTaskToReadyList+0xc8>)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b5f8:	4b27      	ldr	r3, [pc, #156]	; (800b698 <prvAddNewTaskToReadyList+0xc4>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d110      	bne.n	800b622 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b600:	f000 fcb6 	bl	800bf70 <prvInitialiseTaskLists>
 800b604:	e00d      	b.n	800b622 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b606:	4b26      	ldr	r3, [pc, #152]	; (800b6a0 <prvAddNewTaskToReadyList+0xcc>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d109      	bne.n	800b622 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b60e:	4b23      	ldr	r3, [pc, #140]	; (800b69c <prvAddNewTaskToReadyList+0xc8>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b618:	429a      	cmp	r2, r3
 800b61a:	d802      	bhi.n	800b622 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b61c:	4a1f      	ldr	r2, [pc, #124]	; (800b69c <prvAddNewTaskToReadyList+0xc8>)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b622:	4b20      	ldr	r3, [pc, #128]	; (800b6a4 <prvAddNewTaskToReadyList+0xd0>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	3301      	adds	r3, #1
 800b628:	4a1e      	ldr	r2, [pc, #120]	; (800b6a4 <prvAddNewTaskToReadyList+0xd0>)
 800b62a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b62c:	4b1d      	ldr	r3, [pc, #116]	; (800b6a4 <prvAddNewTaskToReadyList+0xd0>)
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b638:	4b1b      	ldr	r3, [pc, #108]	; (800b6a8 <prvAddNewTaskToReadyList+0xd4>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d903      	bls.n	800b648 <prvAddNewTaskToReadyList+0x74>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b644:	4a18      	ldr	r2, [pc, #96]	; (800b6a8 <prvAddNewTaskToReadyList+0xd4>)
 800b646:	6013      	str	r3, [r2, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b64c:	4613      	mov	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	4a15      	ldr	r2, [pc, #84]	; (800b6ac <prvAddNewTaskToReadyList+0xd8>)
 800b656:	441a      	add	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	3304      	adds	r3, #4
 800b65c:	4619      	mov	r1, r3
 800b65e:	4610      	mov	r0, r2
 800b660:	f7fe fe31 	bl	800a2c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b664:	f001 fe9e 	bl	800d3a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b668:	4b0d      	ldr	r3, [pc, #52]	; (800b6a0 <prvAddNewTaskToReadyList+0xcc>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00e      	beq.n	800b68e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b670:	4b0a      	ldr	r3, [pc, #40]	; (800b69c <prvAddNewTaskToReadyList+0xc8>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d207      	bcs.n	800b68e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b67e:	4b0c      	ldr	r3, [pc, #48]	; (800b6b0 <prvAddNewTaskToReadyList+0xdc>)
 800b680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b684:	601a      	str	r2, [r3, #0]
 800b686:	f3bf 8f4f 	dsb	sy
 800b68a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b68e:	bf00      	nop
 800b690:	3708      	adds	r7, #8
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	20001d20 	.word	0x20001d20
 800b69c:	2000184c 	.word	0x2000184c
 800b6a0:	20001d2c 	.word	0x20001d2c
 800b6a4:	20001d3c 	.word	0x20001d3c
 800b6a8:	20001d28 	.word	0x20001d28
 800b6ac:	20001850 	.word	0x20001850
 800b6b0:	e000ed04 	.word	0xe000ed04

0800b6b4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b08a      	sub	sp, #40	; 0x28
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d10a      	bne.n	800b6de <vTaskDelayUntil+0x2a>
	__asm volatile
 800b6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6cc:	f383 8811 	msr	BASEPRI, r3
 800b6d0:	f3bf 8f6f 	isb	sy
 800b6d4:	f3bf 8f4f 	dsb	sy
 800b6d8:	617b      	str	r3, [r7, #20]
}
 800b6da:	bf00      	nop
 800b6dc:	e7fe      	b.n	800b6dc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d10a      	bne.n	800b6fa <vTaskDelayUntil+0x46>
	__asm volatile
 800b6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e8:	f383 8811 	msr	BASEPRI, r3
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	613b      	str	r3, [r7, #16]
}
 800b6f6:	bf00      	nop
 800b6f8:	e7fe      	b.n	800b6f8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b6fa:	4b2a      	ldr	r3, [pc, #168]	; (800b7a4 <vTaskDelayUntil+0xf0>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00a      	beq.n	800b718 <vTaskDelayUntil+0x64>
	__asm volatile
 800b702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b706:	f383 8811 	msr	BASEPRI, r3
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	60fb      	str	r3, [r7, #12]
}
 800b714:	bf00      	nop
 800b716:	e7fe      	b.n	800b716 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b718:	f000 f8ee 	bl	800b8f8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b71c:	4b22      	ldr	r3, [pc, #136]	; (800b7a8 <vTaskDelayUntil+0xf4>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	4413      	add	r3, r2
 800b72a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	6a3a      	ldr	r2, [r7, #32]
 800b732:	429a      	cmp	r2, r3
 800b734:	d20b      	bcs.n	800b74e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	69fa      	ldr	r2, [r7, #28]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d211      	bcs.n	800b764 <vTaskDelayUntil+0xb0>
 800b740:	69fa      	ldr	r2, [r7, #28]
 800b742:	6a3b      	ldr	r3, [r7, #32]
 800b744:	429a      	cmp	r2, r3
 800b746:	d90d      	bls.n	800b764 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b748:	2301      	movs	r3, #1
 800b74a:	627b      	str	r3, [r7, #36]	; 0x24
 800b74c:	e00a      	b.n	800b764 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	69fa      	ldr	r2, [r7, #28]
 800b754:	429a      	cmp	r2, r3
 800b756:	d303      	bcc.n	800b760 <vTaskDelayUntil+0xac>
 800b758:	69fa      	ldr	r2, [r7, #28]
 800b75a:	6a3b      	ldr	r3, [r7, #32]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d901      	bls.n	800b764 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b760:	2301      	movs	r3, #1
 800b762:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	69fa      	ldr	r2, [r7, #28]
 800b768:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d006      	beq.n	800b77e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b770:	69fa      	ldr	r2, [r7, #28]
 800b772:	6a3b      	ldr	r3, [r7, #32]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	2100      	movs	r1, #0
 800b778:	4618      	mov	r0, r3
 800b77a:	f001 f857 	bl	800c82c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b77e:	f000 f8c9 	bl	800b914 <xTaskResumeAll>
 800b782:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d107      	bne.n	800b79a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b78a:	4b08      	ldr	r3, [pc, #32]	; (800b7ac <vTaskDelayUntil+0xf8>)
 800b78c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b790:	601a      	str	r2, [r3, #0]
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b79a:	bf00      	nop
 800b79c:	3728      	adds	r7, #40	; 0x28
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	20001d48 	.word	0x20001d48
 800b7a8:	20001d24 	.word	0x20001d24
 800b7ac:	e000ed04 	.word	0xe000ed04

0800b7b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d017      	beq.n	800b7f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b7c2:	4b13      	ldr	r3, [pc, #76]	; (800b810 <vTaskDelay+0x60>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00a      	beq.n	800b7e0 <vTaskDelay+0x30>
	__asm volatile
 800b7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ce:	f383 8811 	msr	BASEPRI, r3
 800b7d2:	f3bf 8f6f 	isb	sy
 800b7d6:	f3bf 8f4f 	dsb	sy
 800b7da:	60bb      	str	r3, [r7, #8]
}
 800b7dc:	bf00      	nop
 800b7de:	e7fe      	b.n	800b7de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b7e0:	f000 f88a 	bl	800b8f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f001 f820 	bl	800c82c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b7ec:	f000 f892 	bl	800b914 <xTaskResumeAll>
 800b7f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d107      	bne.n	800b808 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b7f8:	4b06      	ldr	r3, [pc, #24]	; (800b814 <vTaskDelay+0x64>)
 800b7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7fe:	601a      	str	r2, [r3, #0]
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b808:	bf00      	nop
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	20001d48 	.word	0x20001d48
 800b814:	e000ed04 	.word	0xe000ed04

0800b818 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b08a      	sub	sp, #40	; 0x28
 800b81c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b81e:	2300      	movs	r3, #0
 800b820:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b822:	2300      	movs	r3, #0
 800b824:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b826:	463a      	mov	r2, r7
 800b828:	1d39      	adds	r1, r7, #4
 800b82a:	f107 0308 	add.w	r3, r7, #8
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fe fce8 	bl	800a204 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b834:	6839      	ldr	r1, [r7, #0]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	9202      	str	r2, [sp, #8]
 800b83c:	9301      	str	r3, [sp, #4]
 800b83e:	2300      	movs	r3, #0
 800b840:	9300      	str	r3, [sp, #0]
 800b842:	2300      	movs	r3, #0
 800b844:	460a      	mov	r2, r1
 800b846:	4924      	ldr	r1, [pc, #144]	; (800b8d8 <vTaskStartScheduler+0xc0>)
 800b848:	4824      	ldr	r0, [pc, #144]	; (800b8dc <vTaskStartScheduler+0xc4>)
 800b84a:	f7ff fd7b 	bl	800b344 <xTaskCreateStatic>
 800b84e:	4603      	mov	r3, r0
 800b850:	4a23      	ldr	r2, [pc, #140]	; (800b8e0 <vTaskStartScheduler+0xc8>)
 800b852:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b854:	4b22      	ldr	r3, [pc, #136]	; (800b8e0 <vTaskStartScheduler+0xc8>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d002      	beq.n	800b862 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b85c:	2301      	movs	r3, #1
 800b85e:	617b      	str	r3, [r7, #20]
 800b860:	e001      	b.n	800b866 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b862:	2300      	movs	r3, #0
 800b864:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d102      	bne.n	800b872 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b86c:	f001 f832 	bl	800c8d4 <xTimerCreateTimerTask>
 800b870:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d11b      	bne.n	800b8b0 <vTaskStartScheduler+0x98>
	__asm volatile
 800b878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87c:	f383 8811 	msr	BASEPRI, r3
 800b880:	f3bf 8f6f 	isb	sy
 800b884:	f3bf 8f4f 	dsb	sy
 800b888:	613b      	str	r3, [r7, #16]
}
 800b88a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b88c:	4b15      	ldr	r3, [pc, #84]	; (800b8e4 <vTaskStartScheduler+0xcc>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	3354      	adds	r3, #84	; 0x54
 800b892:	4a15      	ldr	r2, [pc, #84]	; (800b8e8 <vTaskStartScheduler+0xd0>)
 800b894:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b896:	4b15      	ldr	r3, [pc, #84]	; (800b8ec <vTaskStartScheduler+0xd4>)
 800b898:	f04f 32ff 	mov.w	r2, #4294967295
 800b89c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b89e:	4b14      	ldr	r3, [pc, #80]	; (800b8f0 <vTaskStartScheduler+0xd8>)
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8a4:	4b13      	ldr	r3, [pc, #76]	; (800b8f4 <vTaskStartScheduler+0xdc>)
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b8aa:	f001 fca9 	bl	800d200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b8ae:	e00e      	b.n	800b8ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b6:	d10a      	bne.n	800b8ce <vTaskStartScheduler+0xb6>
	__asm volatile
 800b8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8bc:	f383 8811 	msr	BASEPRI, r3
 800b8c0:	f3bf 8f6f 	isb	sy
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	60fb      	str	r3, [r7, #12]
}
 800b8ca:	bf00      	nop
 800b8cc:	e7fe      	b.n	800b8cc <vTaskStartScheduler+0xb4>
}
 800b8ce:	bf00      	nop
 800b8d0:	3718      	adds	r7, #24
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	08012038 	.word	0x08012038
 800b8dc:	0800bf41 	.word	0x0800bf41
 800b8e0:	20001d44 	.word	0x20001d44
 800b8e4:	2000184c 	.word	0x2000184c
 800b8e8:	200000a0 	.word	0x200000a0
 800b8ec:	20001d40 	.word	0x20001d40
 800b8f0:	20001d2c 	.word	0x20001d2c
 800b8f4:	20001d24 	.word	0x20001d24

0800b8f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b8fc:	4b04      	ldr	r3, [pc, #16]	; (800b910 <vTaskSuspendAll+0x18>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	3301      	adds	r3, #1
 800b902:	4a03      	ldr	r2, [pc, #12]	; (800b910 <vTaskSuspendAll+0x18>)
 800b904:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b906:	bf00      	nop
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr
 800b910:	20001d48 	.word	0x20001d48

0800b914 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b91a:	2300      	movs	r3, #0
 800b91c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b91e:	2300      	movs	r3, #0
 800b920:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b922:	4b42      	ldr	r3, [pc, #264]	; (800ba2c <xTaskResumeAll+0x118>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d10a      	bne.n	800b940 <xTaskResumeAll+0x2c>
	__asm volatile
 800b92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92e:	f383 8811 	msr	BASEPRI, r3
 800b932:	f3bf 8f6f 	isb	sy
 800b936:	f3bf 8f4f 	dsb	sy
 800b93a:	603b      	str	r3, [r7, #0]
}
 800b93c:	bf00      	nop
 800b93e:	e7fe      	b.n	800b93e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b940:	f001 fd00 	bl	800d344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b944:	4b39      	ldr	r3, [pc, #228]	; (800ba2c <xTaskResumeAll+0x118>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	3b01      	subs	r3, #1
 800b94a:	4a38      	ldr	r2, [pc, #224]	; (800ba2c <xTaskResumeAll+0x118>)
 800b94c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b94e:	4b37      	ldr	r3, [pc, #220]	; (800ba2c <xTaskResumeAll+0x118>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d162      	bne.n	800ba1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b956:	4b36      	ldr	r3, [pc, #216]	; (800ba30 <xTaskResumeAll+0x11c>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d05e      	beq.n	800ba1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b95e:	e02f      	b.n	800b9c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b960:	4b34      	ldr	r3, [pc, #208]	; (800ba34 <xTaskResumeAll+0x120>)
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	3318      	adds	r3, #24
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7fe fd07 	bl	800a380 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	3304      	adds	r3, #4
 800b976:	4618      	mov	r0, r3
 800b978:	f7fe fd02 	bl	800a380 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b980:	4b2d      	ldr	r3, [pc, #180]	; (800ba38 <xTaskResumeAll+0x124>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	429a      	cmp	r2, r3
 800b986:	d903      	bls.n	800b990 <xTaskResumeAll+0x7c>
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98c:	4a2a      	ldr	r2, [pc, #168]	; (800ba38 <xTaskResumeAll+0x124>)
 800b98e:	6013      	str	r3, [r2, #0]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b994:	4613      	mov	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4413      	add	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	4a27      	ldr	r2, [pc, #156]	; (800ba3c <xTaskResumeAll+0x128>)
 800b99e:	441a      	add	r2, r3
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3304      	adds	r3, #4
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	4610      	mov	r0, r2
 800b9a8:	f7fe fc8d 	bl	800a2c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b0:	4b23      	ldr	r3, [pc, #140]	; (800ba40 <xTaskResumeAll+0x12c>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d302      	bcc.n	800b9c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b9ba:	4b22      	ldr	r3, [pc, #136]	; (800ba44 <xTaskResumeAll+0x130>)
 800b9bc:	2201      	movs	r2, #1
 800b9be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9c0:	4b1c      	ldr	r3, [pc, #112]	; (800ba34 <xTaskResumeAll+0x120>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1cb      	bne.n	800b960 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d001      	beq.n	800b9d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b9ce:	f000 fb71 	bl	800c0b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b9d2:	4b1d      	ldr	r3, [pc, #116]	; (800ba48 <xTaskResumeAll+0x134>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d010      	beq.n	800ba00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b9de:	f000 f859 	bl	800ba94 <xTaskIncrementTick>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d002      	beq.n	800b9ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b9e8:	4b16      	ldr	r3, [pc, #88]	; (800ba44 <xTaskResumeAll+0x130>)
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1f1      	bne.n	800b9de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b9fa:	4b13      	ldr	r3, [pc, #76]	; (800ba48 <xTaskResumeAll+0x134>)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba00:	4b10      	ldr	r3, [pc, #64]	; (800ba44 <xTaskResumeAll+0x130>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d009      	beq.n	800ba1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba0c:	4b0f      	ldr	r3, [pc, #60]	; (800ba4c <xTaskResumeAll+0x138>)
 800ba0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba1c:	f001 fcc2 	bl	800d3a4 <vPortExitCritical>

	return xAlreadyYielded;
 800ba20:	68bb      	ldr	r3, [r7, #8]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	20001d48 	.word	0x20001d48
 800ba30:	20001d20 	.word	0x20001d20
 800ba34:	20001ce0 	.word	0x20001ce0
 800ba38:	20001d28 	.word	0x20001d28
 800ba3c:	20001850 	.word	0x20001850
 800ba40:	2000184c 	.word	0x2000184c
 800ba44:	20001d34 	.word	0x20001d34
 800ba48:	20001d30 	.word	0x20001d30
 800ba4c:	e000ed04 	.word	0xe000ed04

0800ba50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba56:	4b05      	ldr	r3, [pc, #20]	; (800ba6c <xTaskGetTickCount+0x1c>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba5c:	687b      	ldr	r3, [r7, #4]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	20001d24 	.word	0x20001d24

0800ba70 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba76:	f001 fd47 	bl	800d508 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ba7e:	4b04      	ldr	r3, [pc, #16]	; (800ba90 <xTaskGetTickCountFromISR+0x20>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba84:	683b      	ldr	r3, [r7, #0]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	20001d24 	.word	0x20001d24

0800ba94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba9e:	4b4f      	ldr	r3, [pc, #316]	; (800bbdc <xTaskIncrementTick+0x148>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f040 808f 	bne.w	800bbc6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800baa8:	4b4d      	ldr	r3, [pc, #308]	; (800bbe0 <xTaskIncrementTick+0x14c>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	3301      	adds	r3, #1
 800baae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bab0:	4a4b      	ldr	r2, [pc, #300]	; (800bbe0 <xTaskIncrementTick+0x14c>)
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d120      	bne.n	800bafe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800babc:	4b49      	ldr	r3, [pc, #292]	; (800bbe4 <xTaskIncrementTick+0x150>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00a      	beq.n	800badc <xTaskIncrementTick+0x48>
	__asm volatile
 800bac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baca:	f383 8811 	msr	BASEPRI, r3
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	f3bf 8f4f 	dsb	sy
 800bad6:	603b      	str	r3, [r7, #0]
}
 800bad8:	bf00      	nop
 800bada:	e7fe      	b.n	800bada <xTaskIncrementTick+0x46>
 800badc:	4b41      	ldr	r3, [pc, #260]	; (800bbe4 <xTaskIncrementTick+0x150>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	60fb      	str	r3, [r7, #12]
 800bae2:	4b41      	ldr	r3, [pc, #260]	; (800bbe8 <xTaskIncrementTick+0x154>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a3f      	ldr	r2, [pc, #252]	; (800bbe4 <xTaskIncrementTick+0x150>)
 800bae8:	6013      	str	r3, [r2, #0]
 800baea:	4a3f      	ldr	r2, [pc, #252]	; (800bbe8 <xTaskIncrementTick+0x154>)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6013      	str	r3, [r2, #0]
 800baf0:	4b3e      	ldr	r3, [pc, #248]	; (800bbec <xTaskIncrementTick+0x158>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3301      	adds	r3, #1
 800baf6:	4a3d      	ldr	r2, [pc, #244]	; (800bbec <xTaskIncrementTick+0x158>)
 800baf8:	6013      	str	r3, [r2, #0]
 800bafa:	f000 fadb 	bl	800c0b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bafe:	4b3c      	ldr	r3, [pc, #240]	; (800bbf0 <xTaskIncrementTick+0x15c>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	693a      	ldr	r2, [r7, #16]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d349      	bcc.n	800bb9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb08:	4b36      	ldr	r3, [pc, #216]	; (800bbe4 <xTaskIncrementTick+0x150>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d104      	bne.n	800bb1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb12:	4b37      	ldr	r3, [pc, #220]	; (800bbf0 <xTaskIncrementTick+0x15c>)
 800bb14:	f04f 32ff 	mov.w	r2, #4294967295
 800bb18:	601a      	str	r2, [r3, #0]
					break;
 800bb1a:	e03f      	b.n	800bb9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb1c:	4b31      	ldr	r3, [pc, #196]	; (800bbe4 <xTaskIncrementTick+0x150>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb2c:	693a      	ldr	r2, [r7, #16]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d203      	bcs.n	800bb3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb34:	4a2e      	ldr	r2, [pc, #184]	; (800bbf0 <xTaskIncrementTick+0x15c>)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb3a:	e02f      	b.n	800bb9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	3304      	adds	r3, #4
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7fe fc1d 	bl	800a380 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d004      	beq.n	800bb58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	3318      	adds	r3, #24
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fe fc14 	bl	800a380 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb5c:	4b25      	ldr	r3, [pc, #148]	; (800bbf4 <xTaskIncrementTick+0x160>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d903      	bls.n	800bb6c <xTaskIncrementTick+0xd8>
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb68:	4a22      	ldr	r2, [pc, #136]	; (800bbf4 <xTaskIncrementTick+0x160>)
 800bb6a:	6013      	str	r3, [r2, #0]
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb70:	4613      	mov	r3, r2
 800bb72:	009b      	lsls	r3, r3, #2
 800bb74:	4413      	add	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4a1f      	ldr	r2, [pc, #124]	; (800bbf8 <xTaskIncrementTick+0x164>)
 800bb7a:	441a      	add	r2, r3
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	3304      	adds	r3, #4
 800bb80:	4619      	mov	r1, r3
 800bb82:	4610      	mov	r0, r2
 800bb84:	f7fe fb9f 	bl	800a2c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb8c:	4b1b      	ldr	r3, [pc, #108]	; (800bbfc <xTaskIncrementTick+0x168>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d3b8      	bcc.n	800bb08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bb96:	2301      	movs	r3, #1
 800bb98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb9a:	e7b5      	b.n	800bb08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb9c:	4b17      	ldr	r3, [pc, #92]	; (800bbfc <xTaskIncrementTick+0x168>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba2:	4915      	ldr	r1, [pc, #84]	; (800bbf8 <xTaskIncrementTick+0x164>)
 800bba4:	4613      	mov	r3, r2
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	4413      	add	r3, r2
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	440b      	add	r3, r1
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d901      	bls.n	800bbb8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bbb8:	4b11      	ldr	r3, [pc, #68]	; (800bc00 <xTaskIncrementTick+0x16c>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d007      	beq.n	800bbd0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	617b      	str	r3, [r7, #20]
 800bbc4:	e004      	b.n	800bbd0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bbc6:	4b0f      	ldr	r3, [pc, #60]	; (800bc04 <xTaskIncrementTick+0x170>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	4a0d      	ldr	r2, [pc, #52]	; (800bc04 <xTaskIncrementTick+0x170>)
 800bbce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bbd0:	697b      	ldr	r3, [r7, #20]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3718      	adds	r7, #24
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	20001d48 	.word	0x20001d48
 800bbe0:	20001d24 	.word	0x20001d24
 800bbe4:	20001cd8 	.word	0x20001cd8
 800bbe8:	20001cdc 	.word	0x20001cdc
 800bbec:	20001d38 	.word	0x20001d38
 800bbf0:	20001d40 	.word	0x20001d40
 800bbf4:	20001d28 	.word	0x20001d28
 800bbf8:	20001850 	.word	0x20001850
 800bbfc:	2000184c 	.word	0x2000184c
 800bc00:	20001d34 	.word	0x20001d34
 800bc04:	20001d30 	.word	0x20001d30

0800bc08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc0e:	4b2a      	ldr	r3, [pc, #168]	; (800bcb8 <vTaskSwitchContext+0xb0>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d003      	beq.n	800bc1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc16:	4b29      	ldr	r3, [pc, #164]	; (800bcbc <vTaskSwitchContext+0xb4>)
 800bc18:	2201      	movs	r2, #1
 800bc1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc1c:	e046      	b.n	800bcac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bc1e:	4b27      	ldr	r3, [pc, #156]	; (800bcbc <vTaskSwitchContext+0xb4>)
 800bc20:	2200      	movs	r2, #0
 800bc22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc24:	4b26      	ldr	r3, [pc, #152]	; (800bcc0 <vTaskSwitchContext+0xb8>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	60fb      	str	r3, [r7, #12]
 800bc2a:	e010      	b.n	800bc4e <vTaskSwitchContext+0x46>
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d10a      	bne.n	800bc48 <vTaskSwitchContext+0x40>
	__asm volatile
 800bc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc36:	f383 8811 	msr	BASEPRI, r3
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	607b      	str	r3, [r7, #4]
}
 800bc44:	bf00      	nop
 800bc46:	e7fe      	b.n	800bc46 <vTaskSwitchContext+0x3e>
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	60fb      	str	r3, [r7, #12]
 800bc4e:	491d      	ldr	r1, [pc, #116]	; (800bcc4 <vTaskSwitchContext+0xbc>)
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	4613      	mov	r3, r2
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	4413      	add	r3, r2
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	440b      	add	r3, r1
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d0e4      	beq.n	800bc2c <vTaskSwitchContext+0x24>
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	4613      	mov	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4a15      	ldr	r2, [pc, #84]	; (800bcc4 <vTaskSwitchContext+0xbc>)
 800bc6e:	4413      	add	r3, r2
 800bc70:	60bb      	str	r3, [r7, #8]
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	685a      	ldr	r2, [r3, #4]
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	605a      	str	r2, [r3, #4]
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	685a      	ldr	r2, [r3, #4]
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	3308      	adds	r3, #8
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d104      	bne.n	800bc92 <vTaskSwitchContext+0x8a>
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	685a      	ldr	r2, [r3, #4]
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	605a      	str	r2, [r3, #4]
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	4a0b      	ldr	r2, [pc, #44]	; (800bcc8 <vTaskSwitchContext+0xc0>)
 800bc9a:	6013      	str	r3, [r2, #0]
 800bc9c:	4a08      	ldr	r2, [pc, #32]	; (800bcc0 <vTaskSwitchContext+0xb8>)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bca2:	4b09      	ldr	r3, [pc, #36]	; (800bcc8 <vTaskSwitchContext+0xc0>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	3354      	adds	r3, #84	; 0x54
 800bca8:	4a08      	ldr	r2, [pc, #32]	; (800bccc <vTaskSwitchContext+0xc4>)
 800bcaa:	6013      	str	r3, [r2, #0]
}
 800bcac:	bf00      	nop
 800bcae:	3714      	adds	r7, #20
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr
 800bcb8:	20001d48 	.word	0x20001d48
 800bcbc:	20001d34 	.word	0x20001d34
 800bcc0:	20001d28 	.word	0x20001d28
 800bcc4:	20001850 	.word	0x20001850
 800bcc8:	2000184c 	.word	0x2000184c
 800bccc:	200000a0 	.word	0x200000a0

0800bcd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10a      	bne.n	800bcf6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	60fb      	str	r3, [r7, #12]
}
 800bcf2:	bf00      	nop
 800bcf4:	e7fe      	b.n	800bcf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcf6:	4b07      	ldr	r3, [pc, #28]	; (800bd14 <vTaskPlaceOnEventList+0x44>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	3318      	adds	r3, #24
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f7fe fb05 	bl	800a30e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd04:	2101      	movs	r1, #1
 800bd06:	6838      	ldr	r0, [r7, #0]
 800bd08:	f000 fd90 	bl	800c82c <prvAddCurrentTaskToDelayedList>
}
 800bd0c:	bf00      	nop
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	2000184c 	.word	0x2000184c

0800bd18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b086      	sub	sp, #24
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10a      	bne.n	800bd40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	617b      	str	r3, [r7, #20]
}
 800bd3c:	bf00      	nop
 800bd3e:	e7fe      	b.n	800bd3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd40:	4b0a      	ldr	r3, [pc, #40]	; (800bd6c <vTaskPlaceOnEventListRestricted+0x54>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	3318      	adds	r3, #24
 800bd46:	4619      	mov	r1, r3
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f7fe fabc 	bl	800a2c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d002      	beq.n	800bd5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bd54:	f04f 33ff 	mov.w	r3, #4294967295
 800bd58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd5a:	6879      	ldr	r1, [r7, #4]
 800bd5c:	68b8      	ldr	r0, [r7, #8]
 800bd5e:	f000 fd65 	bl	800c82c <prvAddCurrentTaskToDelayedList>
	}
 800bd62:	bf00      	nop
 800bd64:	3718      	adds	r7, #24
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	2000184c 	.word	0x2000184c

0800bd70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d10a      	bne.n	800bd9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8a:	f383 8811 	msr	BASEPRI, r3
 800bd8e:	f3bf 8f6f 	isb	sy
 800bd92:	f3bf 8f4f 	dsb	sy
 800bd96:	60fb      	str	r3, [r7, #12]
}
 800bd98:	bf00      	nop
 800bd9a:	e7fe      	b.n	800bd9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	3318      	adds	r3, #24
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7fe faed 	bl	800a380 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bda6:	4b1e      	ldr	r3, [pc, #120]	; (800be20 <xTaskRemoveFromEventList+0xb0>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d11d      	bne.n	800bdea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	3304      	adds	r3, #4
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7fe fae4 	bl	800a380 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdbc:	4b19      	ldr	r3, [pc, #100]	; (800be24 <xTaskRemoveFromEventList+0xb4>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d903      	bls.n	800bdcc <xTaskRemoveFromEventList+0x5c>
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc8:	4a16      	ldr	r2, [pc, #88]	; (800be24 <xTaskRemoveFromEventList+0xb4>)
 800bdca:	6013      	str	r3, [r2, #0]
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	4413      	add	r3, r2
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	4a13      	ldr	r2, [pc, #76]	; (800be28 <xTaskRemoveFromEventList+0xb8>)
 800bdda:	441a      	add	r2, r3
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	3304      	adds	r3, #4
 800bde0:	4619      	mov	r1, r3
 800bde2:	4610      	mov	r0, r2
 800bde4:	f7fe fa6f 	bl	800a2c6 <vListInsertEnd>
 800bde8:	e005      	b.n	800bdf6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	3318      	adds	r3, #24
 800bdee:	4619      	mov	r1, r3
 800bdf0:	480e      	ldr	r0, [pc, #56]	; (800be2c <xTaskRemoveFromEventList+0xbc>)
 800bdf2:	f7fe fa68 	bl	800a2c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdfa:	4b0d      	ldr	r3, [pc, #52]	; (800be30 <xTaskRemoveFromEventList+0xc0>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be00:	429a      	cmp	r2, r3
 800be02:	d905      	bls.n	800be10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be04:	2301      	movs	r3, #1
 800be06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be08:	4b0a      	ldr	r3, [pc, #40]	; (800be34 <xTaskRemoveFromEventList+0xc4>)
 800be0a:	2201      	movs	r2, #1
 800be0c:	601a      	str	r2, [r3, #0]
 800be0e:	e001      	b.n	800be14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800be10:	2300      	movs	r3, #0
 800be12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be14:	697b      	ldr	r3, [r7, #20]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3718      	adds	r7, #24
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	20001d48 	.word	0x20001d48
 800be24:	20001d28 	.word	0x20001d28
 800be28:	20001850 	.word	0x20001850
 800be2c:	20001ce0 	.word	0x20001ce0
 800be30:	2000184c 	.word	0x2000184c
 800be34:	20001d34 	.word	0x20001d34

0800be38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be40:	4b06      	ldr	r3, [pc, #24]	; (800be5c <vTaskInternalSetTimeOutState+0x24>)
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be48:	4b05      	ldr	r3, [pc, #20]	; (800be60 <vTaskInternalSetTimeOutState+0x28>)
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	605a      	str	r2, [r3, #4]
}
 800be50:	bf00      	nop
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	20001d38 	.word	0x20001d38
 800be60:	20001d24 	.word	0x20001d24

0800be64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b088      	sub	sp, #32
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10a      	bne.n	800be8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800be74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	613b      	str	r3, [r7, #16]
}
 800be86:	bf00      	nop
 800be88:	e7fe      	b.n	800be88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d10a      	bne.n	800bea6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800be90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be94:	f383 8811 	msr	BASEPRI, r3
 800be98:	f3bf 8f6f 	isb	sy
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	60fb      	str	r3, [r7, #12]
}
 800bea2:	bf00      	nop
 800bea4:	e7fe      	b.n	800bea4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bea6:	f001 fa4d 	bl	800d344 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800beaa:	4b1d      	ldr	r3, [pc, #116]	; (800bf20 <xTaskCheckForTimeOut+0xbc>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	69ba      	ldr	r2, [r7, #24]
 800beb6:	1ad3      	subs	r3, r2, r3
 800beb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec2:	d102      	bne.n	800beca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bec4:	2300      	movs	r3, #0
 800bec6:	61fb      	str	r3, [r7, #28]
 800bec8:	e023      	b.n	800bf12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	4b15      	ldr	r3, [pc, #84]	; (800bf24 <xTaskCheckForTimeOut+0xc0>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d007      	beq.n	800bee6 <xTaskCheckForTimeOut+0x82>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	69ba      	ldr	r2, [r7, #24]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d302      	bcc.n	800bee6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bee0:	2301      	movs	r3, #1
 800bee2:	61fb      	str	r3, [r7, #28]
 800bee4:	e015      	b.n	800bf12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	697a      	ldr	r2, [r7, #20]
 800beec:	429a      	cmp	r2, r3
 800beee:	d20b      	bcs.n	800bf08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	1ad2      	subs	r2, r2, r3
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f7ff ff9b 	bl	800be38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf02:	2300      	movs	r3, #0
 800bf04:	61fb      	str	r3, [r7, #28]
 800bf06:	e004      	b.n	800bf12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf12:	f001 fa47 	bl	800d3a4 <vPortExitCritical>

	return xReturn;
 800bf16:	69fb      	ldr	r3, [r7, #28]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3720      	adds	r7, #32
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	20001d24 	.word	0x20001d24
 800bf24:	20001d38 	.word	0x20001d38

0800bf28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf28:	b480      	push	{r7}
 800bf2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf2c:	4b03      	ldr	r3, [pc, #12]	; (800bf3c <vTaskMissedYield+0x14>)
 800bf2e:	2201      	movs	r2, #1
 800bf30:	601a      	str	r2, [r3, #0]
}
 800bf32:	bf00      	nop
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr
 800bf3c:	20001d34 	.word	0x20001d34

0800bf40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf48:	f000 f852 	bl	800bff0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf4c:	4b06      	ldr	r3, [pc, #24]	; (800bf68 <prvIdleTask+0x28>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d9f9      	bls.n	800bf48 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf54:	4b05      	ldr	r3, [pc, #20]	; (800bf6c <prvIdleTask+0x2c>)
 800bf56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf5a:	601a      	str	r2, [r3, #0]
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf64:	e7f0      	b.n	800bf48 <prvIdleTask+0x8>
 800bf66:	bf00      	nop
 800bf68:	20001850 	.word	0x20001850
 800bf6c:	e000ed04 	.word	0xe000ed04

0800bf70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf76:	2300      	movs	r3, #0
 800bf78:	607b      	str	r3, [r7, #4]
 800bf7a:	e00c      	b.n	800bf96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	4613      	mov	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	4413      	add	r3, r2
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	4a12      	ldr	r2, [pc, #72]	; (800bfd0 <prvInitialiseTaskLists+0x60>)
 800bf88:	4413      	add	r3, r2
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fe f96e 	bl	800a26c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	3301      	adds	r3, #1
 800bf94:	607b      	str	r3, [r7, #4]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b37      	cmp	r3, #55	; 0x37
 800bf9a:	d9ef      	bls.n	800bf7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf9c:	480d      	ldr	r0, [pc, #52]	; (800bfd4 <prvInitialiseTaskLists+0x64>)
 800bf9e:	f7fe f965 	bl	800a26c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bfa2:	480d      	ldr	r0, [pc, #52]	; (800bfd8 <prvInitialiseTaskLists+0x68>)
 800bfa4:	f7fe f962 	bl	800a26c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bfa8:	480c      	ldr	r0, [pc, #48]	; (800bfdc <prvInitialiseTaskLists+0x6c>)
 800bfaa:	f7fe f95f 	bl	800a26c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bfae:	480c      	ldr	r0, [pc, #48]	; (800bfe0 <prvInitialiseTaskLists+0x70>)
 800bfb0:	f7fe f95c 	bl	800a26c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bfb4:	480b      	ldr	r0, [pc, #44]	; (800bfe4 <prvInitialiseTaskLists+0x74>)
 800bfb6:	f7fe f959 	bl	800a26c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bfba:	4b0b      	ldr	r3, [pc, #44]	; (800bfe8 <prvInitialiseTaskLists+0x78>)
 800bfbc:	4a05      	ldr	r2, [pc, #20]	; (800bfd4 <prvInitialiseTaskLists+0x64>)
 800bfbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bfc0:	4b0a      	ldr	r3, [pc, #40]	; (800bfec <prvInitialiseTaskLists+0x7c>)
 800bfc2:	4a05      	ldr	r2, [pc, #20]	; (800bfd8 <prvInitialiseTaskLists+0x68>)
 800bfc4:	601a      	str	r2, [r3, #0]
}
 800bfc6:	bf00      	nop
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	20001850 	.word	0x20001850
 800bfd4:	20001cb0 	.word	0x20001cb0
 800bfd8:	20001cc4 	.word	0x20001cc4
 800bfdc:	20001ce0 	.word	0x20001ce0
 800bfe0:	20001cf4 	.word	0x20001cf4
 800bfe4:	20001d0c 	.word	0x20001d0c
 800bfe8:	20001cd8 	.word	0x20001cd8
 800bfec:	20001cdc 	.word	0x20001cdc

0800bff0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bff6:	e019      	b.n	800c02c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bff8:	f001 f9a4 	bl	800d344 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bffc:	4b10      	ldr	r3, [pc, #64]	; (800c040 <prvCheckTasksWaitingTermination+0x50>)
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	3304      	adds	r3, #4
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fe f9b9 	bl	800a380 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c00e:	4b0d      	ldr	r3, [pc, #52]	; (800c044 <prvCheckTasksWaitingTermination+0x54>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	3b01      	subs	r3, #1
 800c014:	4a0b      	ldr	r2, [pc, #44]	; (800c044 <prvCheckTasksWaitingTermination+0x54>)
 800c016:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c018:	4b0b      	ldr	r3, [pc, #44]	; (800c048 <prvCheckTasksWaitingTermination+0x58>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	3b01      	subs	r3, #1
 800c01e:	4a0a      	ldr	r2, [pc, #40]	; (800c048 <prvCheckTasksWaitingTermination+0x58>)
 800c020:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c022:	f001 f9bf 	bl	800d3a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 f810 	bl	800c04c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c02c:	4b06      	ldr	r3, [pc, #24]	; (800c048 <prvCheckTasksWaitingTermination+0x58>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1e1      	bne.n	800bff8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c034:	bf00      	nop
 800c036:	bf00      	nop
 800c038:	3708      	adds	r7, #8
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	20001cf4 	.word	0x20001cf4
 800c044:	20001d20 	.word	0x20001d20
 800c048:	20001d08 	.word	0x20001d08

0800c04c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	3354      	adds	r3, #84	; 0x54
 800c058:	4618      	mov	r0, r3
 800c05a:	f002 fb53 	bl	800e704 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c064:	2b00      	cmp	r3, #0
 800c066:	d108      	bne.n	800c07a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c06c:	4618      	mov	r0, r3
 800c06e:	f001 fb57 	bl	800d720 <vPortFree>
				vPortFree( pxTCB );
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f001 fb54 	bl	800d720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c078:	e018      	b.n	800c0ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c080:	2b01      	cmp	r3, #1
 800c082:	d103      	bne.n	800c08c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f001 fb4b 	bl	800d720 <vPortFree>
	}
 800c08a:	e00f      	b.n	800c0ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c092:	2b02      	cmp	r3, #2
 800c094:	d00a      	beq.n	800c0ac <prvDeleteTCB+0x60>
	__asm volatile
 800c096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09a:	f383 8811 	msr	BASEPRI, r3
 800c09e:	f3bf 8f6f 	isb	sy
 800c0a2:	f3bf 8f4f 	dsb	sy
 800c0a6:	60fb      	str	r3, [r7, #12]
}
 800c0a8:	bf00      	nop
 800c0aa:	e7fe      	b.n	800c0aa <prvDeleteTCB+0x5e>
	}
 800c0ac:	bf00      	nop
 800c0ae:	3710      	adds	r7, #16
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0ba:	4b0c      	ldr	r3, [pc, #48]	; (800c0ec <prvResetNextTaskUnblockTime+0x38>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d104      	bne.n	800c0ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c0c4:	4b0a      	ldr	r3, [pc, #40]	; (800c0f0 <prvResetNextTaskUnblockTime+0x3c>)
 800c0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c0cc:	e008      	b.n	800c0e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ce:	4b07      	ldr	r3, [pc, #28]	; (800c0ec <prvResetNextTaskUnblockTime+0x38>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	4a04      	ldr	r2, [pc, #16]	; (800c0f0 <prvResetNextTaskUnblockTime+0x3c>)
 800c0de:	6013      	str	r3, [r2, #0]
}
 800c0e0:	bf00      	nop
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr
 800c0ec:	20001cd8 	.word	0x20001cd8
 800c0f0:	20001d40 	.word	0x20001d40

0800c0f4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c0fa:	4b05      	ldr	r3, [pc, #20]	; (800c110 <xTaskGetCurrentTaskHandle+0x1c>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c100:	687b      	ldr	r3, [r7, #4]
	}
 800c102:	4618      	mov	r0, r3
 800c104:	370c      	adds	r7, #12
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	2000184c 	.word	0x2000184c

0800c114 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c11a:	4b0b      	ldr	r3, [pc, #44]	; (800c148 <xTaskGetSchedulerState+0x34>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d102      	bne.n	800c128 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c122:	2301      	movs	r3, #1
 800c124:	607b      	str	r3, [r7, #4]
 800c126:	e008      	b.n	800c13a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c128:	4b08      	ldr	r3, [pc, #32]	; (800c14c <xTaskGetSchedulerState+0x38>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d102      	bne.n	800c136 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c130:	2302      	movs	r3, #2
 800c132:	607b      	str	r3, [r7, #4]
 800c134:	e001      	b.n	800c13a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c136:	2300      	movs	r3, #0
 800c138:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c13a:	687b      	ldr	r3, [r7, #4]
	}
 800c13c:	4618      	mov	r0, r3
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	20001d2c 	.word	0x20001d2c
 800c14c:	20001d48 	.word	0x20001d48

0800c150 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c15c:	2300      	movs	r3, #0
 800c15e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d051      	beq.n	800c20a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c16a:	4b2a      	ldr	r3, [pc, #168]	; (800c214 <xTaskPriorityInherit+0xc4>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c170:	429a      	cmp	r2, r3
 800c172:	d241      	bcs.n	800c1f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	699b      	ldr	r3, [r3, #24]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	db06      	blt.n	800c18a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c17c:	4b25      	ldr	r3, [pc, #148]	; (800c214 <xTaskPriorityInherit+0xc4>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c182:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	6959      	ldr	r1, [r3, #20]
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c192:	4613      	mov	r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	4413      	add	r3, r2
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	4a1f      	ldr	r2, [pc, #124]	; (800c218 <xTaskPriorityInherit+0xc8>)
 800c19c:	4413      	add	r3, r2
 800c19e:	4299      	cmp	r1, r3
 800c1a0:	d122      	bne.n	800c1e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	3304      	adds	r3, #4
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7fe f8ea 	bl	800a380 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c1ac:	4b19      	ldr	r3, [pc, #100]	; (800c214 <xTaskPriorityInherit+0xc4>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ba:	4b18      	ldr	r3, [pc, #96]	; (800c21c <xTaskPriorityInherit+0xcc>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d903      	bls.n	800c1ca <xTaskPriorityInherit+0x7a>
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c6:	4a15      	ldr	r2, [pc, #84]	; (800c21c <xTaskPriorityInherit+0xcc>)
 800c1c8:	6013      	str	r3, [r2, #0]
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	4413      	add	r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	4a10      	ldr	r2, [pc, #64]	; (800c218 <xTaskPriorityInherit+0xc8>)
 800c1d8:	441a      	add	r2, r3
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	3304      	adds	r3, #4
 800c1de:	4619      	mov	r1, r3
 800c1e0:	4610      	mov	r0, r2
 800c1e2:	f7fe f870 	bl	800a2c6 <vListInsertEnd>
 800c1e6:	e004      	b.n	800c1f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c1e8:	4b0a      	ldr	r3, [pc, #40]	; (800c214 <xTaskPriorityInherit+0xc4>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	60fb      	str	r3, [r7, #12]
 800c1f6:	e008      	b.n	800c20a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c1fc:	4b05      	ldr	r3, [pc, #20]	; (800c214 <xTaskPriorityInherit+0xc4>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c202:	429a      	cmp	r2, r3
 800c204:	d201      	bcs.n	800c20a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c206:	2301      	movs	r3, #1
 800c208:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c20a:	68fb      	ldr	r3, [r7, #12]
	}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	2000184c 	.word	0x2000184c
 800c218:	20001850 	.word	0x20001850
 800c21c:	20001d28 	.word	0x20001d28

0800c220 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c220:	b580      	push	{r7, lr}
 800c222:	b086      	sub	sp, #24
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c22c:	2300      	movs	r3, #0
 800c22e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d056      	beq.n	800c2e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c236:	4b2e      	ldr	r3, [pc, #184]	; (800c2f0 <xTaskPriorityDisinherit+0xd0>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	693a      	ldr	r2, [r7, #16]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d00a      	beq.n	800c256 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	60fb      	str	r3, [r7, #12]
}
 800c252:	bf00      	nop
 800c254:	e7fe      	b.n	800c254 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d10a      	bne.n	800c274 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	60bb      	str	r3, [r7, #8]
}
 800c270:	bf00      	nop
 800c272:	e7fe      	b.n	800c272 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c278:	1e5a      	subs	r2, r3, #1
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c286:	429a      	cmp	r2, r3
 800c288:	d02c      	beq.n	800c2e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d128      	bne.n	800c2e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	3304      	adds	r3, #4
 800c296:	4618      	mov	r0, r3
 800c298:	f7fe f872 	bl	800a380 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b4:	4b0f      	ldr	r3, [pc, #60]	; (800c2f4 <xTaskPriorityDisinherit+0xd4>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d903      	bls.n	800c2c4 <xTaskPriorityDisinherit+0xa4>
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c0:	4a0c      	ldr	r2, [pc, #48]	; (800c2f4 <xTaskPriorityDisinherit+0xd4>)
 800c2c2:	6013      	str	r3, [r2, #0]
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	4413      	add	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4a09      	ldr	r2, [pc, #36]	; (800c2f8 <xTaskPriorityDisinherit+0xd8>)
 800c2d2:	441a      	add	r2, r3
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	3304      	adds	r3, #4
 800c2d8:	4619      	mov	r1, r3
 800c2da:	4610      	mov	r0, r2
 800c2dc:	f7fd fff3 	bl	800a2c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c2e4:	697b      	ldr	r3, [r7, #20]
	}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3718      	adds	r7, #24
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	2000184c 	.word	0x2000184c
 800c2f4:	20001d28 	.word	0x20001d28
 800c2f8:	20001850 	.word	0x20001850

0800c2fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b088      	sub	sp, #32
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c30a:	2301      	movs	r3, #1
 800c30c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d06a      	beq.n	800c3ea <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10a      	bne.n	800c332 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	60fb      	str	r3, [r7, #12]
}
 800c32e:	bf00      	nop
 800c330:	e7fe      	b.n	800c330 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d902      	bls.n	800c342 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	61fb      	str	r3, [r7, #28]
 800c340:	e002      	b.n	800c348 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c342:	69bb      	ldr	r3, [r7, #24]
 800c344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c346:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34c:	69fa      	ldr	r2, [r7, #28]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d04b      	beq.n	800c3ea <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c356:	697a      	ldr	r2, [r7, #20]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d146      	bne.n	800c3ea <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c35c:	4b25      	ldr	r3, [pc, #148]	; (800c3f4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	69ba      	ldr	r2, [r7, #24]
 800c362:	429a      	cmp	r2, r3
 800c364:	d10a      	bne.n	800c37c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	60bb      	str	r3, [r7, #8]
}
 800c378:	bf00      	nop
 800c37a:	e7fe      	b.n	800c37a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c380:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	69fa      	ldr	r2, [r7, #28]
 800c386:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	699b      	ldr	r3, [r3, #24]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	db04      	blt.n	800c39a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	6959      	ldr	r1, [r3, #20]
 800c39e:	693a      	ldr	r2, [r7, #16]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	4a13      	ldr	r2, [pc, #76]	; (800c3f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c3aa:	4413      	add	r3, r2
 800c3ac:	4299      	cmp	r1, r3
 800c3ae:	d11c      	bne.n	800c3ea <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	3304      	adds	r3, #4
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7fd ffe3 	bl	800a380 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3be:	4b0f      	ldr	r3, [pc, #60]	; (800c3fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d903      	bls.n	800c3ce <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ca:	4a0c      	ldr	r2, [pc, #48]	; (800c3fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c3cc:	6013      	str	r3, [r2, #0]
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	4413      	add	r3, r2
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	4a07      	ldr	r2, [pc, #28]	; (800c3f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c3dc:	441a      	add	r2, r3
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	3304      	adds	r3, #4
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	4610      	mov	r0, r2
 800c3e6:	f7fd ff6e 	bl	800a2c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c3ea:	bf00      	nop
 800c3ec:	3720      	adds	r7, #32
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	2000184c 	.word	0x2000184c
 800c3f8:	20001850 	.word	0x20001850
 800c3fc:	20001d28 	.word	0x20001d28

0800c400 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c400:	b480      	push	{r7}
 800c402:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c404:	4b07      	ldr	r3, [pc, #28]	; (800c424 <pvTaskIncrementMutexHeldCount+0x24>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d004      	beq.n	800c416 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c40c:	4b05      	ldr	r3, [pc, #20]	; (800c424 <pvTaskIncrementMutexHeldCount+0x24>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c412:	3201      	adds	r2, #1
 800c414:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c416:	4b03      	ldr	r3, [pc, #12]	; (800c424 <pvTaskIncrementMutexHeldCount+0x24>)
 800c418:	681b      	ldr	r3, [r3, #0]
	}
 800c41a:	4618      	mov	r0, r3
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr
 800c424:	2000184c 	.word	0x2000184c

0800c428 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b086      	sub	sp, #24
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
 800c434:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c436:	f000 ff85 	bl	800d344 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c43a:	4b29      	ldr	r3, [pc, #164]	; (800c4e0 <xTaskNotifyWait+0xb8>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800c442:	b2db      	uxtb	r3, r3
 800c444:	2b02      	cmp	r3, #2
 800c446:	d01c      	beq.n	800c482 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c448:	4b25      	ldr	r3, [pc, #148]	; (800c4e0 <xTaskNotifyWait+0xb8>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	43d2      	mvns	r2, r2
 800c454:	400a      	ands	r2, r1
 800c456:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c45a:	4b21      	ldr	r3, [pc, #132]	; (800c4e0 <xTaskNotifyWait+0xb8>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2201      	movs	r2, #1
 800c460:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00b      	beq.n	800c482 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c46a:	2101      	movs	r1, #1
 800c46c:	6838      	ldr	r0, [r7, #0]
 800c46e:	f000 f9dd 	bl	800c82c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c472:	4b1c      	ldr	r3, [pc, #112]	; (800c4e4 <xTaskNotifyWait+0xbc>)
 800c474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c478:	601a      	str	r2, [r3, #0]
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c482:	f000 ff8f 	bl	800d3a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c486:	f000 ff5d 	bl	800d344 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d005      	beq.n	800c49c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c490:	4b13      	ldr	r3, [pc, #76]	; (800c4e0 <xTaskNotifyWait+0xb8>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c49c:	4b10      	ldr	r3, [pc, #64]	; (800c4e0 <xTaskNotifyWait+0xb8>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	2b02      	cmp	r3, #2
 800c4a8:	d002      	beq.n	800c4b0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	617b      	str	r3, [r7, #20]
 800c4ae:	e00a      	b.n	800c4c6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c4b0:	4b0b      	ldr	r3, [pc, #44]	; (800c4e0 <xTaskNotifyWait+0xb8>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800c4b8:	68ba      	ldr	r2, [r7, #8]
 800c4ba:	43d2      	mvns	r2, r2
 800c4bc:	400a      	ands	r2, r1
 800c4be:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c4c6:	4b06      	ldr	r3, [pc, #24]	; (800c4e0 <xTaskNotifyWait+0xb8>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800c4d0:	f000 ff68 	bl	800d3a4 <vPortExitCritical>

		return xReturn;
 800c4d4:	697b      	ldr	r3, [r7, #20]
	}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3718      	adds	r7, #24
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	2000184c 	.word	0x2000184c
 800c4e4:	e000ed04 	.word	0xe000ed04

0800c4e8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b08a      	sub	sp, #40	; 0x28
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	603b      	str	r3, [r7, #0]
 800c4f4:	4613      	mov	r3, r2
 800c4f6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10a      	bne.n	800c518 <xTaskGenericNotify+0x30>
	__asm volatile
 800c502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c506:	f383 8811 	msr	BASEPRI, r3
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	f3bf 8f4f 	dsb	sy
 800c512:	61bb      	str	r3, [r7, #24]
}
 800c514:	bf00      	nop
 800c516:	e7fe      	b.n	800c516 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c51c:	f000 ff12 	bl	800d344 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d004      	beq.n	800c530 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c526:	6a3b      	ldr	r3, [r7, #32]
 800c528:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c530:	6a3b      	ldr	r3, [r7, #32]
 800c532:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800c536:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c538:	6a3b      	ldr	r3, [r7, #32]
 800c53a:	2202      	movs	r2, #2
 800c53c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800c540:	79fb      	ldrb	r3, [r7, #7]
 800c542:	2b04      	cmp	r3, #4
 800c544:	d82d      	bhi.n	800c5a2 <xTaskGenericNotify+0xba>
 800c546:	a201      	add	r2, pc, #4	; (adr r2, 800c54c <xTaskGenericNotify+0x64>)
 800c548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c54c:	0800c5c5 	.word	0x0800c5c5
 800c550:	0800c561 	.word	0x0800c561
 800c554:	0800c573 	.word	0x0800c573
 800c558:	0800c583 	.word	0x0800c583
 800c55c:	0800c58d 	.word	0x0800c58d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c560:	6a3b      	ldr	r3, [r7, #32]
 800c562:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	431a      	orrs	r2, r3
 800c56a:	6a3b      	ldr	r3, [r7, #32]
 800c56c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c570:	e02b      	b.n	800c5ca <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c572:	6a3b      	ldr	r3, [r7, #32]
 800c574:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c578:	1c5a      	adds	r2, r3, #1
 800c57a:	6a3b      	ldr	r3, [r7, #32]
 800c57c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c580:	e023      	b.n	800c5ca <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c582:	6a3b      	ldr	r3, [r7, #32]
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c58a:	e01e      	b.n	800c5ca <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c58c:	7ffb      	ldrb	r3, [r7, #31]
 800c58e:	2b02      	cmp	r3, #2
 800c590:	d004      	beq.n	800c59c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c592:	6a3b      	ldr	r3, [r7, #32]
 800c594:	68ba      	ldr	r2, [r7, #8]
 800c596:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c59a:	e016      	b.n	800c5ca <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800c59c:	2300      	movs	r3, #0
 800c59e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c5a0:	e013      	b.n	800c5ca <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c5a2:	6a3b      	ldr	r3, [r7, #32]
 800c5a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ac:	d00c      	beq.n	800c5c8 <xTaskGenericNotify+0xe0>
	__asm volatile
 800c5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	617b      	str	r3, [r7, #20]
}
 800c5c0:	bf00      	nop
 800c5c2:	e7fe      	b.n	800c5c2 <xTaskGenericNotify+0xda>
					break;
 800c5c4:	bf00      	nop
 800c5c6:	e000      	b.n	800c5ca <xTaskGenericNotify+0xe2>

					break;
 800c5c8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c5ca:	7ffb      	ldrb	r3, [r7, #31]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d13a      	bne.n	800c646 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5d0:	6a3b      	ldr	r3, [r7, #32]
 800c5d2:	3304      	adds	r3, #4
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7fd fed3 	bl	800a380 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c5da:	6a3b      	ldr	r3, [r7, #32]
 800c5dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5de:	4b1d      	ldr	r3, [pc, #116]	; (800c654 <xTaskGenericNotify+0x16c>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d903      	bls.n	800c5ee <xTaskGenericNotify+0x106>
 800c5e6:	6a3b      	ldr	r3, [r7, #32]
 800c5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ea:	4a1a      	ldr	r2, [pc, #104]	; (800c654 <xTaskGenericNotify+0x16c>)
 800c5ec:	6013      	str	r3, [r2, #0]
 800c5ee:	6a3b      	ldr	r3, [r7, #32]
 800c5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f2:	4613      	mov	r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	4413      	add	r3, r2
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	4a17      	ldr	r2, [pc, #92]	; (800c658 <xTaskGenericNotify+0x170>)
 800c5fc:	441a      	add	r2, r3
 800c5fe:	6a3b      	ldr	r3, [r7, #32]
 800c600:	3304      	adds	r3, #4
 800c602:	4619      	mov	r1, r3
 800c604:	4610      	mov	r0, r2
 800c606:	f7fd fe5e 	bl	800a2c6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c60a:	6a3b      	ldr	r3, [r7, #32]
 800c60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00a      	beq.n	800c628 <xTaskGenericNotify+0x140>
	__asm volatile
 800c612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	613b      	str	r3, [r7, #16]
}
 800c624:	bf00      	nop
 800c626:	e7fe      	b.n	800c626 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c628:	6a3b      	ldr	r3, [r7, #32]
 800c62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c62c:	4b0b      	ldr	r3, [pc, #44]	; (800c65c <xTaskGenericNotify+0x174>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c632:	429a      	cmp	r2, r3
 800c634:	d907      	bls.n	800c646 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c636:	4b0a      	ldr	r3, [pc, #40]	; (800c660 <xTaskGenericNotify+0x178>)
 800c638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c63c:	601a      	str	r2, [r3, #0]
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c646:	f000 fead 	bl	800d3a4 <vPortExitCritical>

		return xReturn;
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3728      	adds	r7, #40	; 0x28
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	20001d28 	.word	0x20001d28
 800c658:	20001850 	.word	0x20001850
 800c65c:	2000184c 	.word	0x2000184c
 800c660:	e000ed04 	.word	0xe000ed04

0800c664 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c664:	b580      	push	{r7, lr}
 800c666:	b08e      	sub	sp, #56	; 0x38
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	603b      	str	r3, [r7, #0]
 800c670:	4613      	mov	r3, r2
 800c672:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c674:	2301      	movs	r3, #1
 800c676:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d10a      	bne.n	800c694 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c690:	bf00      	nop
 800c692:	e7fe      	b.n	800c692 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c694:	f000 ff38 	bl	800d508 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c69c:	f3ef 8211 	mrs	r2, BASEPRI
 800c6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	623a      	str	r2, [r7, #32]
 800c6b2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c6b4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d004      	beq.n	800c6c8 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ca:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800c6ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d4:	2202      	movs	r2, #2
 800c6d6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800c6da:	79fb      	ldrb	r3, [r7, #7]
 800c6dc:	2b04      	cmp	r3, #4
 800c6de:	d82f      	bhi.n	800c740 <xTaskGenericNotifyFromISR+0xdc>
 800c6e0:	a201      	add	r2, pc, #4	; (adr r2, 800c6e8 <xTaskGenericNotifyFromISR+0x84>)
 800c6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e6:	bf00      	nop
 800c6e8:	0800c763 	.word	0x0800c763
 800c6ec:	0800c6fd 	.word	0x0800c6fd
 800c6f0:	0800c70f 	.word	0x0800c70f
 800c6f4:	0800c71f 	.word	0x0800c71f
 800c6f8:	0800c729 	.word	0x0800c729
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	431a      	orrs	r2, r3
 800c706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c708:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c70c:	e02c      	b.n	800c768 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c710:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c714:	1c5a      	adds	r2, r3, #1
 800c716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c718:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c71c:	e024      	b.n	800c768 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c726:	e01f      	b.n	800c768 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c728:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	d004      	beq.n	800c73a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c732:	68ba      	ldr	r2, [r7, #8]
 800c734:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c738:	e016      	b.n	800c768 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800c73a:	2300      	movs	r3, #0
 800c73c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c73e:	e013      	b.n	800c768 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c742:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c74a:	d00c      	beq.n	800c766 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800c74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c750:	f383 8811 	msr	BASEPRI, r3
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	61bb      	str	r3, [r7, #24]
}
 800c75e:	bf00      	nop
 800c760:	e7fe      	b.n	800c760 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800c762:	bf00      	nop
 800c764:	e000      	b.n	800c768 <xTaskGenericNotifyFromISR+0x104>
					break;
 800c766:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c768:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d146      	bne.n	800c7fe <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00a      	beq.n	800c78e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800c778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77c:	f383 8811 	msr	BASEPRI, r3
 800c780:	f3bf 8f6f 	isb	sy
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	617b      	str	r3, [r7, #20]
}
 800c78a:	bf00      	nop
 800c78c:	e7fe      	b.n	800c78c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c78e:	4b21      	ldr	r3, [pc, #132]	; (800c814 <xTaskGenericNotifyFromISR+0x1b0>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d11d      	bne.n	800c7d2 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	3304      	adds	r3, #4
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7fd fdf0 	bl	800a380 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7a4:	4b1c      	ldr	r3, [pc, #112]	; (800c818 <xTaskGenericNotifyFromISR+0x1b4>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d903      	bls.n	800c7b4 <xTaskGenericNotifyFromISR+0x150>
 800c7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b0:	4a19      	ldr	r2, [pc, #100]	; (800c818 <xTaskGenericNotifyFromISR+0x1b4>)
 800c7b2:	6013      	str	r3, [r2, #0]
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	4413      	add	r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	4a16      	ldr	r2, [pc, #88]	; (800c81c <xTaskGenericNotifyFromISR+0x1b8>)
 800c7c2:	441a      	add	r2, r3
 800c7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c6:	3304      	adds	r3, #4
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	4610      	mov	r0, r2
 800c7cc:	f7fd fd7b 	bl	800a2c6 <vListInsertEnd>
 800c7d0:	e005      	b.n	800c7de <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d4:	3318      	adds	r3, #24
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4811      	ldr	r0, [pc, #68]	; (800c820 <xTaskGenericNotifyFromISR+0x1bc>)
 800c7da:	f7fd fd74 	bl	800a2c6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7e2:	4b10      	ldr	r3, [pc, #64]	; (800c824 <xTaskGenericNotifyFromISR+0x1c0>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d908      	bls.n	800c7fe <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c7ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d002      	beq.n	800c7f8 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c7f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c7f8:	4b0b      	ldr	r3, [pc, #44]	; (800c828 <xTaskGenericNotifyFromISR+0x1c4>)
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	601a      	str	r2, [r3, #0]
 800c7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c800:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	f383 8811 	msr	BASEPRI, r3
}
 800c808:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c80a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3738      	adds	r7, #56	; 0x38
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	20001d48 	.word	0x20001d48
 800c818:	20001d28 	.word	0x20001d28
 800c81c:	20001850 	.word	0x20001850
 800c820:	20001ce0 	.word	0x20001ce0
 800c824:	2000184c 	.word	0x2000184c
 800c828:	20001d34 	.word	0x20001d34

0800c82c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c836:	4b21      	ldr	r3, [pc, #132]	; (800c8bc <prvAddCurrentTaskToDelayedList+0x90>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c83c:	4b20      	ldr	r3, [pc, #128]	; (800c8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	3304      	adds	r3, #4
 800c842:	4618      	mov	r0, r3
 800c844:	f7fd fd9c 	bl	800a380 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c84e:	d10a      	bne.n	800c866 <prvAddCurrentTaskToDelayedList+0x3a>
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d007      	beq.n	800c866 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c856:	4b1a      	ldr	r3, [pc, #104]	; (800c8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	3304      	adds	r3, #4
 800c85c:	4619      	mov	r1, r3
 800c85e:	4819      	ldr	r0, [pc, #100]	; (800c8c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800c860:	f7fd fd31 	bl	800a2c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c864:	e026      	b.n	800c8b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4413      	add	r3, r2
 800c86c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c86e:	4b14      	ldr	r3, [pc, #80]	; (800c8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d209      	bcs.n	800c892 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c87e:	4b12      	ldr	r3, [pc, #72]	; (800c8c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	4b0f      	ldr	r3, [pc, #60]	; (800c8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	3304      	adds	r3, #4
 800c888:	4619      	mov	r1, r3
 800c88a:	4610      	mov	r0, r2
 800c88c:	f7fd fd3f 	bl	800a30e <vListInsert>
}
 800c890:	e010      	b.n	800c8b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c892:	4b0e      	ldr	r3, [pc, #56]	; (800c8cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800c894:	681a      	ldr	r2, [r3, #0]
 800c896:	4b0a      	ldr	r3, [pc, #40]	; (800c8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	3304      	adds	r3, #4
 800c89c:	4619      	mov	r1, r3
 800c89e:	4610      	mov	r0, r2
 800c8a0:	f7fd fd35 	bl	800a30e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c8a4:	4b0a      	ldr	r3, [pc, #40]	; (800c8d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68ba      	ldr	r2, [r7, #8]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d202      	bcs.n	800c8b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c8ae:	4a08      	ldr	r2, [pc, #32]	; (800c8d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	6013      	str	r3, [r2, #0]
}
 800c8b4:	bf00      	nop
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	20001d24 	.word	0x20001d24
 800c8c0:	2000184c 	.word	0x2000184c
 800c8c4:	20001d0c 	.word	0x20001d0c
 800c8c8:	20001cdc 	.word	0x20001cdc
 800c8cc:	20001cd8 	.word	0x20001cd8
 800c8d0:	20001d40 	.word	0x20001d40

0800c8d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b08a      	sub	sp, #40	; 0x28
 800c8d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c8de:	f000 fba1 	bl	800d024 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c8e2:	4b1c      	ldr	r3, [pc, #112]	; (800c954 <xTimerCreateTimerTask+0x80>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d021      	beq.n	800c92e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c8f2:	1d3a      	adds	r2, r7, #4
 800c8f4:	f107 0108 	add.w	r1, r7, #8
 800c8f8:	f107 030c 	add.w	r3, r7, #12
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7fd fc9b 	bl	800a238 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c902:	6879      	ldr	r1, [r7, #4]
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	68fa      	ldr	r2, [r7, #12]
 800c908:	9202      	str	r2, [sp, #8]
 800c90a:	9301      	str	r3, [sp, #4]
 800c90c:	2302      	movs	r3, #2
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	2300      	movs	r3, #0
 800c912:	460a      	mov	r2, r1
 800c914:	4910      	ldr	r1, [pc, #64]	; (800c958 <xTimerCreateTimerTask+0x84>)
 800c916:	4811      	ldr	r0, [pc, #68]	; (800c95c <xTimerCreateTimerTask+0x88>)
 800c918:	f7fe fd14 	bl	800b344 <xTaskCreateStatic>
 800c91c:	4603      	mov	r3, r0
 800c91e:	4a10      	ldr	r2, [pc, #64]	; (800c960 <xTimerCreateTimerTask+0x8c>)
 800c920:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c922:	4b0f      	ldr	r3, [pc, #60]	; (800c960 <xTimerCreateTimerTask+0x8c>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d001      	beq.n	800c92e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c92a:	2301      	movs	r3, #1
 800c92c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d10a      	bne.n	800c94a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c938:	f383 8811 	msr	BASEPRI, r3
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	613b      	str	r3, [r7, #16]
}
 800c946:	bf00      	nop
 800c948:	e7fe      	b.n	800c948 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c94a:	697b      	ldr	r3, [r7, #20]
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3718      	adds	r7, #24
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	20001d7c 	.word	0x20001d7c
 800c958:	08012040 	.word	0x08012040
 800c95c:	0800cbcd 	.word	0x0800cbcd
 800c960:	20001d80 	.word	0x20001d80

0800c964 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c964:	b580      	push	{r7, lr}
 800c966:	b088      	sub	sp, #32
 800c968:	af02      	add	r7, sp, #8
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
 800c970:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c972:	202c      	movs	r0, #44	; 0x2c
 800c974:	f000 fe08 	bl	800d588 <pvPortMalloc>
 800c978:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d00d      	beq.n	800c99c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	2200      	movs	r2, #0
 800c984:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	9301      	str	r3, [sp, #4]
 800c98c:	6a3b      	ldr	r3, [r7, #32]
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	68b9      	ldr	r1, [r7, #8]
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f000 f843 	bl	800ca22 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c99c:	697b      	ldr	r3, [r7, #20]
	}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3718      	adds	r7, #24
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b08a      	sub	sp, #40	; 0x28
 800c9aa:	af02      	add	r7, sp, #8
 800c9ac:	60f8      	str	r0, [r7, #12]
 800c9ae:	60b9      	str	r1, [r7, #8]
 800c9b0:	607a      	str	r2, [r7, #4]
 800c9b2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c9b4:	232c      	movs	r3, #44	; 0x2c
 800c9b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	2b2c      	cmp	r3, #44	; 0x2c
 800c9bc:	d00a      	beq.n	800c9d4 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c2:	f383 8811 	msr	BASEPRI, r3
 800c9c6:	f3bf 8f6f 	isb	sy
 800c9ca:	f3bf 8f4f 	dsb	sy
 800c9ce:	61bb      	str	r3, [r7, #24]
}
 800c9d0:	bf00      	nop
 800c9d2:	e7fe      	b.n	800c9d2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c9d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d10a      	bne.n	800c9f2 <xTimerCreateStatic+0x4c>
	__asm volatile
 800c9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e0:	f383 8811 	msr	BASEPRI, r3
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	617b      	str	r3, [r7, #20]
}
 800c9ee:	bf00      	nop
 800c9f0:	e7fe      	b.n	800c9f0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00d      	beq.n	800ca18 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	2202      	movs	r2, #2
 800ca00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ca04:	69fb      	ldr	r3, [r7, #28]
 800ca06:	9301      	str	r3, [sp, #4]
 800ca08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0a:	9300      	str	r3, [sp, #0]
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	68b9      	ldr	r1, [r7, #8]
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f000 f805 	bl	800ca22 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ca18:	69fb      	ldr	r3, [r7, #28]
	}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3720      	adds	r7, #32
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b086      	sub	sp, #24
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	60f8      	str	r0, [r7, #12]
 800ca2a:	60b9      	str	r1, [r7, #8]
 800ca2c:	607a      	str	r2, [r7, #4]
 800ca2e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10a      	bne.n	800ca4c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800ca36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	617b      	str	r3, [r7, #20]
}
 800ca48:	bf00      	nop
 800ca4a:	e7fe      	b.n	800ca4a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ca4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d01e      	beq.n	800ca90 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ca52:	f000 fae7 	bl	800d024 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ca56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5e:	68ba      	ldr	r2, [r7, #8]
 800ca60:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ca62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca64:	683a      	ldr	r2, [r7, #0]
 800ca66:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ca68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6a:	6a3a      	ldr	r2, [r7, #32]
 800ca6c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca70:	3304      	adds	r3, #4
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7fd fc1a 	bl	800a2ac <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d008      	beq.n	800ca90 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ca7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca84:	f043 0304 	orr.w	r3, r3, #4
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ca90:	bf00      	nop
 800ca92:	3718      	adds	r7, #24
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b08a      	sub	sp, #40	; 0x28
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
 800caa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800caa6:	2300      	movs	r3, #0
 800caa8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d10a      	bne.n	800cac6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab4:	f383 8811 	msr	BASEPRI, r3
 800cab8:	f3bf 8f6f 	isb	sy
 800cabc:	f3bf 8f4f 	dsb	sy
 800cac0:	623b      	str	r3, [r7, #32]
}
 800cac2:	bf00      	nop
 800cac4:	e7fe      	b.n	800cac4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cac6:	4b1a      	ldr	r3, [pc, #104]	; (800cb30 <xTimerGenericCommand+0x98>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d02a      	beq.n	800cb24 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	2b05      	cmp	r3, #5
 800cade:	dc18      	bgt.n	800cb12 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cae0:	f7ff fb18 	bl	800c114 <xTaskGetSchedulerState>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d109      	bne.n	800cafe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800caea:	4b11      	ldr	r3, [pc, #68]	; (800cb30 <xTimerGenericCommand+0x98>)
 800caec:	6818      	ldr	r0, [r3, #0]
 800caee:	f107 0110 	add.w	r1, r7, #16
 800caf2:	2300      	movs	r3, #0
 800caf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caf6:	f7fd fecb 	bl	800a890 <xQueueGenericSend>
 800cafa:	6278      	str	r0, [r7, #36]	; 0x24
 800cafc:	e012      	b.n	800cb24 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cafe:	4b0c      	ldr	r3, [pc, #48]	; (800cb30 <xTimerGenericCommand+0x98>)
 800cb00:	6818      	ldr	r0, [r3, #0]
 800cb02:	f107 0110 	add.w	r1, r7, #16
 800cb06:	2300      	movs	r3, #0
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f7fd fec1 	bl	800a890 <xQueueGenericSend>
 800cb0e:	6278      	str	r0, [r7, #36]	; 0x24
 800cb10:	e008      	b.n	800cb24 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cb12:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <xTimerGenericCommand+0x98>)
 800cb14:	6818      	ldr	r0, [r3, #0]
 800cb16:	f107 0110 	add.w	r1, r7, #16
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	683a      	ldr	r2, [r7, #0]
 800cb1e:	f7fd ffb5 	bl	800aa8c <xQueueGenericSendFromISR>
 800cb22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3728      	adds	r7, #40	; 0x28
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	20001d7c 	.word	0x20001d7c

0800cb34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b088      	sub	sp, #32
 800cb38:	af02      	add	r7, sp, #8
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb3e:	4b22      	ldr	r3, [pc, #136]	; (800cbc8 <prvProcessExpiredTimer+0x94>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	68db      	ldr	r3, [r3, #12]
 800cb46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	3304      	adds	r3, #4
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7fd fc17 	bl	800a380 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb58:	f003 0304 	and.w	r3, r3, #4
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d022      	beq.n	800cba6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	699a      	ldr	r2, [r3, #24]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	18d1      	adds	r1, r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	683a      	ldr	r2, [r7, #0]
 800cb6c:	6978      	ldr	r0, [r7, #20]
 800cb6e:	f000 f8d1 	bl	800cd14 <prvInsertTimerInActiveList>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d01f      	beq.n	800cbb8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb78:	2300      	movs	r3, #0
 800cb7a:	9300      	str	r3, [sp, #0]
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	2100      	movs	r1, #0
 800cb82:	6978      	ldr	r0, [r7, #20]
 800cb84:	f7ff ff88 	bl	800ca98 <xTimerGenericCommand>
 800cb88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d113      	bne.n	800cbb8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	60fb      	str	r3, [r7, #12]
}
 800cba2:	bf00      	nop
 800cba4:	e7fe      	b.n	800cba4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbac:	f023 0301 	bic.w	r3, r3, #1
 800cbb0:	b2da      	uxtb	r2, r3
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	6a1b      	ldr	r3, [r3, #32]
 800cbbc:	6978      	ldr	r0, [r7, #20]
 800cbbe:	4798      	blx	r3
}
 800cbc0:	bf00      	nop
 800cbc2:	3718      	adds	r7, #24
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	20001d74 	.word	0x20001d74

0800cbcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cbd4:	f107 0308 	add.w	r3, r7, #8
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f000 f857 	bl	800cc8c <prvGetNextExpireTime>
 800cbde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	68f8      	ldr	r0, [r7, #12]
 800cbe6:	f000 f803 	bl	800cbf0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cbea:	f000 f8d5 	bl	800cd98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cbee:	e7f1      	b.n	800cbd4 <prvTimerTask+0x8>

0800cbf0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cbfa:	f7fe fe7d 	bl	800b8f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cbfe:	f107 0308 	add.w	r3, r7, #8
 800cc02:	4618      	mov	r0, r3
 800cc04:	f000 f866 	bl	800ccd4 <prvSampleTimeNow>
 800cc08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d130      	bne.n	800cc72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d10a      	bne.n	800cc2c <prvProcessTimerOrBlockTask+0x3c>
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d806      	bhi.n	800cc2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cc1e:	f7fe fe79 	bl	800b914 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cc22:	68f9      	ldr	r1, [r7, #12]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f7ff ff85 	bl	800cb34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cc2a:	e024      	b.n	800cc76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d008      	beq.n	800cc44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cc32:	4b13      	ldr	r3, [pc, #76]	; (800cc80 <prvProcessTimerOrBlockTask+0x90>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d101      	bne.n	800cc40 <prvProcessTimerOrBlockTask+0x50>
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	e000      	b.n	800cc42 <prvProcessTimerOrBlockTask+0x52>
 800cc40:	2300      	movs	r3, #0
 800cc42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cc44:	4b0f      	ldr	r3, [pc, #60]	; (800cc84 <prvProcessTimerOrBlockTask+0x94>)
 800cc46:	6818      	ldr	r0, [r3, #0]
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	1ad3      	subs	r3, r2, r3
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	4619      	mov	r1, r3
 800cc52:	f7fe fb43 	bl	800b2dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cc56:	f7fe fe5d 	bl	800b914 <xTaskResumeAll>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d10a      	bne.n	800cc76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc60:	4b09      	ldr	r3, [pc, #36]	; (800cc88 <prvProcessTimerOrBlockTask+0x98>)
 800cc62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc66:	601a      	str	r2, [r3, #0]
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	f3bf 8f6f 	isb	sy
}
 800cc70:	e001      	b.n	800cc76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc72:	f7fe fe4f 	bl	800b914 <xTaskResumeAll>
}
 800cc76:	bf00      	nop
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	20001d78 	.word	0x20001d78
 800cc84:	20001d7c 	.word	0x20001d7c
 800cc88:	e000ed04 	.word	0xe000ed04

0800cc8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b085      	sub	sp, #20
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc94:	4b0e      	ldr	r3, [pc, #56]	; (800ccd0 <prvGetNextExpireTime+0x44>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d101      	bne.n	800cca2 <prvGetNextExpireTime+0x16>
 800cc9e:	2201      	movs	r2, #1
 800cca0:	e000      	b.n	800cca4 <prvGetNextExpireTime+0x18>
 800cca2:	2200      	movs	r2, #0
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d105      	bne.n	800ccbc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ccb0:	4b07      	ldr	r3, [pc, #28]	; (800ccd0 <prvGetNextExpireTime+0x44>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	60fb      	str	r3, [r7, #12]
 800ccba:	e001      	b.n	800ccc0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3714      	adds	r7, #20
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	20001d74 	.word	0x20001d74

0800ccd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ccdc:	f7fe feb8 	bl	800ba50 <xTaskGetTickCount>
 800cce0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cce2:	4b0b      	ldr	r3, [pc, #44]	; (800cd10 <prvSampleTimeNow+0x3c>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	68fa      	ldr	r2, [r7, #12]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d205      	bcs.n	800ccf8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ccec:	f000 f936 	bl	800cf5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	601a      	str	r2, [r3, #0]
 800ccf6:	e002      	b.n	800ccfe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ccfe:	4a04      	ldr	r2, [pc, #16]	; (800cd10 <prvSampleTimeNow+0x3c>)
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cd04:	68fb      	ldr	r3, [r7, #12]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	20001d84 	.word	0x20001d84

0800cd14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b086      	sub	sp, #24
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	60b9      	str	r1, [r7, #8]
 800cd1e:	607a      	str	r2, [r7, #4]
 800cd20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cd22:	2300      	movs	r3, #0
 800cd24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	68ba      	ldr	r2, [r7, #8]
 800cd2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cd32:	68ba      	ldr	r2, [r7, #8]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d812      	bhi.n	800cd60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	1ad2      	subs	r2, r2, r3
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	699b      	ldr	r3, [r3, #24]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d302      	bcc.n	800cd4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	617b      	str	r3, [r7, #20]
 800cd4c:	e01b      	b.n	800cd86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cd4e:	4b10      	ldr	r3, [pc, #64]	; (800cd90 <prvInsertTimerInActiveList+0x7c>)
 800cd50:	681a      	ldr	r2, [r3, #0]
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	3304      	adds	r3, #4
 800cd56:	4619      	mov	r1, r3
 800cd58:	4610      	mov	r0, r2
 800cd5a:	f7fd fad8 	bl	800a30e <vListInsert>
 800cd5e:	e012      	b.n	800cd86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d206      	bcs.n	800cd76 <prvInsertTimerInActiveList+0x62>
 800cd68:	68ba      	ldr	r2, [r7, #8]
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d302      	bcc.n	800cd76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd70:	2301      	movs	r3, #1
 800cd72:	617b      	str	r3, [r7, #20]
 800cd74:	e007      	b.n	800cd86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd76:	4b07      	ldr	r3, [pc, #28]	; (800cd94 <prvInsertTimerInActiveList+0x80>)
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	3304      	adds	r3, #4
 800cd7e:	4619      	mov	r1, r3
 800cd80:	4610      	mov	r0, r2
 800cd82:	f7fd fac4 	bl	800a30e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd86:	697b      	ldr	r3, [r7, #20]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3718      	adds	r7, #24
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	20001d78 	.word	0x20001d78
 800cd94:	20001d74 	.word	0x20001d74

0800cd98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b08e      	sub	sp, #56	; 0x38
 800cd9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd9e:	e0ca      	b.n	800cf36 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	da18      	bge.n	800cdd8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cda6:	1d3b      	adds	r3, r7, #4
 800cda8:	3304      	adds	r3, #4
 800cdaa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10a      	bne.n	800cdc8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb6:	f383 8811 	msr	BASEPRI, r3
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	61fb      	str	r3, [r7, #28]
}
 800cdc4:	bf00      	nop
 800cdc6:	e7fe      	b.n	800cdc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdce:	6850      	ldr	r0, [r2, #4]
 800cdd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdd2:	6892      	ldr	r2, [r2, #8]
 800cdd4:	4611      	mov	r1, r2
 800cdd6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f2c0 80aa 	blt.w	800cf34 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde6:	695b      	ldr	r3, [r3, #20]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d004      	beq.n	800cdf6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdee:	3304      	adds	r3, #4
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7fd fac5 	bl	800a380 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cdf6:	463b      	mov	r3, r7
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7ff ff6b 	bl	800ccd4 <prvSampleTimeNow>
 800cdfe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2b09      	cmp	r3, #9
 800ce04:	f200 8097 	bhi.w	800cf36 <prvProcessReceivedCommands+0x19e>
 800ce08:	a201      	add	r2, pc, #4	; (adr r2, 800ce10 <prvProcessReceivedCommands+0x78>)
 800ce0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce0e:	bf00      	nop
 800ce10:	0800ce39 	.word	0x0800ce39
 800ce14:	0800ce39 	.word	0x0800ce39
 800ce18:	0800ce39 	.word	0x0800ce39
 800ce1c:	0800cead 	.word	0x0800cead
 800ce20:	0800cec1 	.word	0x0800cec1
 800ce24:	0800cf0b 	.word	0x0800cf0b
 800ce28:	0800ce39 	.word	0x0800ce39
 800ce2c:	0800ce39 	.word	0x0800ce39
 800ce30:	0800cead 	.word	0x0800cead
 800ce34:	0800cec1 	.word	0x0800cec1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce3e:	f043 0301 	orr.w	r3, r3, #1
 800ce42:	b2da      	uxtb	r2, r3
 800ce44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ce4a:	68ba      	ldr	r2, [r7, #8]
 800ce4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4e:	699b      	ldr	r3, [r3, #24]
 800ce50:	18d1      	adds	r1, r2, r3
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce58:	f7ff ff5c 	bl	800cd14 <prvInsertTimerInActiveList>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d069      	beq.n	800cf36 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce64:	6a1b      	ldr	r3, [r3, #32]
 800ce66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce70:	f003 0304 	and.w	r3, r3, #4
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d05e      	beq.n	800cf36 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ce78:	68ba      	ldr	r2, [r7, #8]
 800ce7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7c:	699b      	ldr	r3, [r3, #24]
 800ce7e:	441a      	add	r2, r3
 800ce80:	2300      	movs	r3, #0
 800ce82:	9300      	str	r3, [sp, #0]
 800ce84:	2300      	movs	r3, #0
 800ce86:	2100      	movs	r1, #0
 800ce88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce8a:	f7ff fe05 	bl	800ca98 <xTimerGenericCommand>
 800ce8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ce90:	6a3b      	ldr	r3, [r7, #32]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d14f      	bne.n	800cf36 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ce96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9a:	f383 8811 	msr	BASEPRI, r3
 800ce9e:	f3bf 8f6f 	isb	sy
 800cea2:	f3bf 8f4f 	dsb	sy
 800cea6:	61bb      	str	r3, [r7, #24]
}
 800cea8:	bf00      	nop
 800ceaa:	e7fe      	b.n	800ceaa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ceac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ceb2:	f023 0301 	bic.w	r3, r3, #1
 800ceb6:	b2da      	uxtb	r2, r3
 800ceb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cebe:	e03a      	b.n	800cf36 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cec6:	f043 0301 	orr.w	r3, r3, #1
 800ceca:	b2da      	uxtb	r2, r3
 800cecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ced2:	68ba      	ldr	r2, [r7, #8]
 800ced4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ced8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceda:	699b      	ldr	r3, [r3, #24]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d10a      	bne.n	800cef6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee4:	f383 8811 	msr	BASEPRI, r3
 800cee8:	f3bf 8f6f 	isb	sy
 800ceec:	f3bf 8f4f 	dsb	sy
 800cef0:	617b      	str	r3, [r7, #20]
}
 800cef2:	bf00      	nop
 800cef4:	e7fe      	b.n	800cef4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef8:	699a      	ldr	r2, [r3, #24]
 800cefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefc:	18d1      	adds	r1, r2, r3
 800cefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf04:	f7ff ff06 	bl	800cd14 <prvInsertTimerInActiveList>
					break;
 800cf08:	e015      	b.n	800cf36 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf10:	f003 0302 	and.w	r3, r3, #2
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d103      	bne.n	800cf20 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cf18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf1a:	f000 fc01 	bl	800d720 <vPortFree>
 800cf1e:	e00a      	b.n	800cf36 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf26:	f023 0301 	bic.w	r3, r3, #1
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cf32:	e000      	b.n	800cf36 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cf34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf36:	4b08      	ldr	r3, [pc, #32]	; (800cf58 <prvProcessReceivedCommands+0x1c0>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	1d39      	adds	r1, r7, #4
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7fd fe40 	bl	800abc4 <xQueueReceive>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f47f af2a 	bne.w	800cda0 <prvProcessReceivedCommands+0x8>
	}
}
 800cf4c:	bf00      	nop
 800cf4e:	bf00      	nop
 800cf50:	3730      	adds	r7, #48	; 0x30
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	20001d7c 	.word	0x20001d7c

0800cf5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b088      	sub	sp, #32
 800cf60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf62:	e048      	b.n	800cff6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf64:	4b2d      	ldr	r3, [pc, #180]	; (800d01c <prvSwitchTimerLists+0xc0>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf6e:	4b2b      	ldr	r3, [pc, #172]	; (800d01c <prvSwitchTimerLists+0xc0>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	3304      	adds	r3, #4
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fd f9ff 	bl	800a380 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	6a1b      	ldr	r3, [r3, #32]
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf90:	f003 0304 	and.w	r3, r3, #4
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d02e      	beq.n	800cff6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	699b      	ldr	r3, [r3, #24]
 800cf9c:	693a      	ldr	r2, [r7, #16]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cfa2:	68ba      	ldr	r2, [r7, #8]
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d90e      	bls.n	800cfc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	68fa      	ldr	r2, [r7, #12]
 800cfb4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfb6:	4b19      	ldr	r3, [pc, #100]	; (800d01c <prvSwitchTimerLists+0xc0>)
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	3304      	adds	r3, #4
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	4610      	mov	r0, r2
 800cfc2:	f7fd f9a4 	bl	800a30e <vListInsert>
 800cfc6:	e016      	b.n	800cff6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cfc8:	2300      	movs	r3, #0
 800cfca:	9300      	str	r3, [sp, #0]
 800cfcc:	2300      	movs	r3, #0
 800cfce:	693a      	ldr	r2, [r7, #16]
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	68f8      	ldr	r0, [r7, #12]
 800cfd4:	f7ff fd60 	bl	800ca98 <xTimerGenericCommand>
 800cfd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d10a      	bne.n	800cff6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe4:	f383 8811 	msr	BASEPRI, r3
 800cfe8:	f3bf 8f6f 	isb	sy
 800cfec:	f3bf 8f4f 	dsb	sy
 800cff0:	603b      	str	r3, [r7, #0]
}
 800cff2:	bf00      	nop
 800cff4:	e7fe      	b.n	800cff4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cff6:	4b09      	ldr	r3, [pc, #36]	; (800d01c <prvSwitchTimerLists+0xc0>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d1b1      	bne.n	800cf64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d000:	4b06      	ldr	r3, [pc, #24]	; (800d01c <prvSwitchTimerLists+0xc0>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d006:	4b06      	ldr	r3, [pc, #24]	; (800d020 <prvSwitchTimerLists+0xc4>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a04      	ldr	r2, [pc, #16]	; (800d01c <prvSwitchTimerLists+0xc0>)
 800d00c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d00e:	4a04      	ldr	r2, [pc, #16]	; (800d020 <prvSwitchTimerLists+0xc4>)
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	6013      	str	r3, [r2, #0]
}
 800d014:	bf00      	nop
 800d016:	3718      	adds	r7, #24
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	20001d74 	.word	0x20001d74
 800d020:	20001d78 	.word	0x20001d78

0800d024 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d02a:	f000 f98b 	bl	800d344 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d02e:	4b15      	ldr	r3, [pc, #84]	; (800d084 <prvCheckForValidListAndQueue+0x60>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d120      	bne.n	800d078 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d036:	4814      	ldr	r0, [pc, #80]	; (800d088 <prvCheckForValidListAndQueue+0x64>)
 800d038:	f7fd f918 	bl	800a26c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d03c:	4813      	ldr	r0, [pc, #76]	; (800d08c <prvCheckForValidListAndQueue+0x68>)
 800d03e:	f7fd f915 	bl	800a26c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d042:	4b13      	ldr	r3, [pc, #76]	; (800d090 <prvCheckForValidListAndQueue+0x6c>)
 800d044:	4a10      	ldr	r2, [pc, #64]	; (800d088 <prvCheckForValidListAndQueue+0x64>)
 800d046:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d048:	4b12      	ldr	r3, [pc, #72]	; (800d094 <prvCheckForValidListAndQueue+0x70>)
 800d04a:	4a10      	ldr	r2, [pc, #64]	; (800d08c <prvCheckForValidListAndQueue+0x68>)
 800d04c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d04e:	2300      	movs	r3, #0
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	4b11      	ldr	r3, [pc, #68]	; (800d098 <prvCheckForValidListAndQueue+0x74>)
 800d054:	4a11      	ldr	r2, [pc, #68]	; (800d09c <prvCheckForValidListAndQueue+0x78>)
 800d056:	2110      	movs	r1, #16
 800d058:	200a      	movs	r0, #10
 800d05a:	f7fd fa23 	bl	800a4a4 <xQueueGenericCreateStatic>
 800d05e:	4603      	mov	r3, r0
 800d060:	4a08      	ldr	r2, [pc, #32]	; (800d084 <prvCheckForValidListAndQueue+0x60>)
 800d062:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d064:	4b07      	ldr	r3, [pc, #28]	; (800d084 <prvCheckForValidListAndQueue+0x60>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d005      	beq.n	800d078 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d06c:	4b05      	ldr	r3, [pc, #20]	; (800d084 <prvCheckForValidListAndQueue+0x60>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	490b      	ldr	r1, [pc, #44]	; (800d0a0 <prvCheckForValidListAndQueue+0x7c>)
 800d072:	4618      	mov	r0, r3
 800d074:	f7fe f8de 	bl	800b234 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d078:	f000 f994 	bl	800d3a4 <vPortExitCritical>
}
 800d07c:	bf00      	nop
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	20001d7c 	.word	0x20001d7c
 800d088:	20001d4c 	.word	0x20001d4c
 800d08c:	20001d60 	.word	0x20001d60
 800d090:	20001d74 	.word	0x20001d74
 800d094:	20001d78 	.word	0x20001d78
 800d098:	20001e28 	.word	0x20001e28
 800d09c:	20001d88 	.word	0x20001d88
 800d0a0:	08012048 	.word	0x08012048

0800d0a4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b086      	sub	sp, #24
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10a      	bne.n	800d0cc <pvTimerGetTimerID+0x28>
	__asm volatile
 800d0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ba:	f383 8811 	msr	BASEPRI, r3
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	60fb      	str	r3, [r7, #12]
}
 800d0c8:	bf00      	nop
 800d0ca:	e7fe      	b.n	800d0ca <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800d0cc:	f000 f93a 	bl	800d344 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	69db      	ldr	r3, [r3, #28]
 800d0d4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d0d6:	f000 f965 	bl	800d3a4 <vPortExitCritical>

	return pvReturn;
 800d0da:	693b      	ldr	r3, [r7, #16]
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3718      	adds	r7, #24
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b085      	sub	sp, #20
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	3b04      	subs	r3, #4
 800d0f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d0fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	3b04      	subs	r3, #4
 800d102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	f023 0201 	bic.w	r2, r3, #1
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	3b04      	subs	r3, #4
 800d112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d114:	4a0c      	ldr	r2, [pc, #48]	; (800d148 <pxPortInitialiseStack+0x64>)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	3b14      	subs	r3, #20
 800d11e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	3b04      	subs	r3, #4
 800d12a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f06f 0202 	mvn.w	r2, #2
 800d132:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	3b20      	subs	r3, #32
 800d138:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d13a:	68fb      	ldr	r3, [r7, #12]
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3714      	adds	r7, #20
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr
 800d148:	0800d14d 	.word	0x0800d14d

0800d14c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d152:	2300      	movs	r3, #0
 800d154:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d156:	4b12      	ldr	r3, [pc, #72]	; (800d1a0 <prvTaskExitError+0x54>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d15e:	d00a      	beq.n	800d176 <prvTaskExitError+0x2a>
	__asm volatile
 800d160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	60fb      	str	r3, [r7, #12]
}
 800d172:	bf00      	nop
 800d174:	e7fe      	b.n	800d174 <prvTaskExitError+0x28>
	__asm volatile
 800d176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	60bb      	str	r3, [r7, #8]
}
 800d188:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d18a:	bf00      	nop
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d0fc      	beq.n	800d18c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d192:	bf00      	nop
 800d194:	bf00      	nop
 800d196:	3714      	adds	r7, #20
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr
 800d1a0:	2000009c 	.word	0x2000009c
	...

0800d1b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d1b0:	4b07      	ldr	r3, [pc, #28]	; (800d1d0 <pxCurrentTCBConst2>)
 800d1b2:	6819      	ldr	r1, [r3, #0]
 800d1b4:	6808      	ldr	r0, [r1, #0]
 800d1b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ba:	f380 8809 	msr	PSP, r0
 800d1be:	f3bf 8f6f 	isb	sy
 800d1c2:	f04f 0000 	mov.w	r0, #0
 800d1c6:	f380 8811 	msr	BASEPRI, r0
 800d1ca:	4770      	bx	lr
 800d1cc:	f3af 8000 	nop.w

0800d1d0 <pxCurrentTCBConst2>:
 800d1d0:	2000184c 	.word	0x2000184c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d1d4:	bf00      	nop
 800d1d6:	bf00      	nop

0800d1d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d1d8:	4808      	ldr	r0, [pc, #32]	; (800d1fc <prvPortStartFirstTask+0x24>)
 800d1da:	6800      	ldr	r0, [r0, #0]
 800d1dc:	6800      	ldr	r0, [r0, #0]
 800d1de:	f380 8808 	msr	MSP, r0
 800d1e2:	f04f 0000 	mov.w	r0, #0
 800d1e6:	f380 8814 	msr	CONTROL, r0
 800d1ea:	b662      	cpsie	i
 800d1ec:	b661      	cpsie	f
 800d1ee:	f3bf 8f4f 	dsb	sy
 800d1f2:	f3bf 8f6f 	isb	sy
 800d1f6:	df00      	svc	0
 800d1f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d1fa:	bf00      	nop
 800d1fc:	e000ed08 	.word	0xe000ed08

0800d200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b086      	sub	sp, #24
 800d204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d206:	4b46      	ldr	r3, [pc, #280]	; (800d320 <xPortStartScheduler+0x120>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a46      	ldr	r2, [pc, #280]	; (800d324 <xPortStartScheduler+0x124>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d10a      	bne.n	800d226 <xPortStartScheduler+0x26>
	__asm volatile
 800d210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d214:	f383 8811 	msr	BASEPRI, r3
 800d218:	f3bf 8f6f 	isb	sy
 800d21c:	f3bf 8f4f 	dsb	sy
 800d220:	613b      	str	r3, [r7, #16]
}
 800d222:	bf00      	nop
 800d224:	e7fe      	b.n	800d224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d226:	4b3e      	ldr	r3, [pc, #248]	; (800d320 <xPortStartScheduler+0x120>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a3f      	ldr	r2, [pc, #252]	; (800d328 <xPortStartScheduler+0x128>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d10a      	bne.n	800d246 <xPortStartScheduler+0x46>
	__asm volatile
 800d230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d234:	f383 8811 	msr	BASEPRI, r3
 800d238:	f3bf 8f6f 	isb	sy
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	60fb      	str	r3, [r7, #12]
}
 800d242:	bf00      	nop
 800d244:	e7fe      	b.n	800d244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d246:	4b39      	ldr	r3, [pc, #228]	; (800d32c <xPortStartScheduler+0x12c>)
 800d248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	22ff      	movs	r2, #255	; 0xff
 800d256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d260:	78fb      	ldrb	r3, [r7, #3]
 800d262:	b2db      	uxtb	r3, r3
 800d264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d268:	b2da      	uxtb	r2, r3
 800d26a:	4b31      	ldr	r3, [pc, #196]	; (800d330 <xPortStartScheduler+0x130>)
 800d26c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d26e:	4b31      	ldr	r3, [pc, #196]	; (800d334 <xPortStartScheduler+0x134>)
 800d270:	2207      	movs	r2, #7
 800d272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d274:	e009      	b.n	800d28a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d276:	4b2f      	ldr	r3, [pc, #188]	; (800d334 <xPortStartScheduler+0x134>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	3b01      	subs	r3, #1
 800d27c:	4a2d      	ldr	r2, [pc, #180]	; (800d334 <xPortStartScheduler+0x134>)
 800d27e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d280:	78fb      	ldrb	r3, [r7, #3]
 800d282:	b2db      	uxtb	r3, r3
 800d284:	005b      	lsls	r3, r3, #1
 800d286:	b2db      	uxtb	r3, r3
 800d288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d28a:	78fb      	ldrb	r3, [r7, #3]
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d292:	2b80      	cmp	r3, #128	; 0x80
 800d294:	d0ef      	beq.n	800d276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d296:	4b27      	ldr	r3, [pc, #156]	; (800d334 <xPortStartScheduler+0x134>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f1c3 0307 	rsb	r3, r3, #7
 800d29e:	2b04      	cmp	r3, #4
 800d2a0:	d00a      	beq.n	800d2b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	60bb      	str	r3, [r7, #8]
}
 800d2b4:	bf00      	nop
 800d2b6:	e7fe      	b.n	800d2b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d2b8:	4b1e      	ldr	r3, [pc, #120]	; (800d334 <xPortStartScheduler+0x134>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	021b      	lsls	r3, r3, #8
 800d2be:	4a1d      	ldr	r2, [pc, #116]	; (800d334 <xPortStartScheduler+0x134>)
 800d2c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d2c2:	4b1c      	ldr	r3, [pc, #112]	; (800d334 <xPortStartScheduler+0x134>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d2ca:	4a1a      	ldr	r2, [pc, #104]	; (800d334 <xPortStartScheduler+0x134>)
 800d2cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	b2da      	uxtb	r2, r3
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d2d6:	4b18      	ldr	r3, [pc, #96]	; (800d338 <xPortStartScheduler+0x138>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a17      	ldr	r2, [pc, #92]	; (800d338 <xPortStartScheduler+0x138>)
 800d2dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d2e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d2e2:	4b15      	ldr	r3, [pc, #84]	; (800d338 <xPortStartScheduler+0x138>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a14      	ldr	r2, [pc, #80]	; (800d338 <xPortStartScheduler+0x138>)
 800d2e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d2ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d2ee:	f000 f8dd 	bl	800d4ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d2f2:	4b12      	ldr	r3, [pc, #72]	; (800d33c <xPortStartScheduler+0x13c>)
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d2f8:	f000 f8fc 	bl	800d4f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d2fc:	4b10      	ldr	r3, [pc, #64]	; (800d340 <xPortStartScheduler+0x140>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a0f      	ldr	r2, [pc, #60]	; (800d340 <xPortStartScheduler+0x140>)
 800d302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d308:	f7ff ff66 	bl	800d1d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d30c:	f7fe fc7c 	bl	800bc08 <vTaskSwitchContext>
	prvTaskExitError();
 800d310:	f7ff ff1c 	bl	800d14c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d314:	2300      	movs	r3, #0
}
 800d316:	4618      	mov	r0, r3
 800d318:	3718      	adds	r7, #24
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	e000ed00 	.word	0xe000ed00
 800d324:	410fc271 	.word	0x410fc271
 800d328:	410fc270 	.word	0x410fc270
 800d32c:	e000e400 	.word	0xe000e400
 800d330:	20001e78 	.word	0x20001e78
 800d334:	20001e7c 	.word	0x20001e7c
 800d338:	e000ed20 	.word	0xe000ed20
 800d33c:	2000009c 	.word	0x2000009c
 800d340:	e000ef34 	.word	0xe000ef34

0800d344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
	__asm volatile
 800d34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34e:	f383 8811 	msr	BASEPRI, r3
 800d352:	f3bf 8f6f 	isb	sy
 800d356:	f3bf 8f4f 	dsb	sy
 800d35a:	607b      	str	r3, [r7, #4]
}
 800d35c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d35e:	4b0f      	ldr	r3, [pc, #60]	; (800d39c <vPortEnterCritical+0x58>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	3301      	adds	r3, #1
 800d364:	4a0d      	ldr	r2, [pc, #52]	; (800d39c <vPortEnterCritical+0x58>)
 800d366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d368:	4b0c      	ldr	r3, [pc, #48]	; (800d39c <vPortEnterCritical+0x58>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d10f      	bne.n	800d390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d370:	4b0b      	ldr	r3, [pc, #44]	; (800d3a0 <vPortEnterCritical+0x5c>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	b2db      	uxtb	r3, r3
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00a      	beq.n	800d390 <vPortEnterCritical+0x4c>
	__asm volatile
 800d37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37e:	f383 8811 	msr	BASEPRI, r3
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	603b      	str	r3, [r7, #0]
}
 800d38c:	bf00      	nop
 800d38e:	e7fe      	b.n	800d38e <vPortEnterCritical+0x4a>
	}
}
 800d390:	bf00      	nop
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr
 800d39c:	2000009c 	.word	0x2000009c
 800d3a0:	e000ed04 	.word	0xe000ed04

0800d3a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d3aa:	4b12      	ldr	r3, [pc, #72]	; (800d3f4 <vPortExitCritical+0x50>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d10a      	bne.n	800d3c8 <vPortExitCritical+0x24>
	__asm volatile
 800d3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b6:	f383 8811 	msr	BASEPRI, r3
 800d3ba:	f3bf 8f6f 	isb	sy
 800d3be:	f3bf 8f4f 	dsb	sy
 800d3c2:	607b      	str	r3, [r7, #4]
}
 800d3c4:	bf00      	nop
 800d3c6:	e7fe      	b.n	800d3c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d3c8:	4b0a      	ldr	r3, [pc, #40]	; (800d3f4 <vPortExitCritical+0x50>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	3b01      	subs	r3, #1
 800d3ce:	4a09      	ldr	r2, [pc, #36]	; (800d3f4 <vPortExitCritical+0x50>)
 800d3d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d3d2:	4b08      	ldr	r3, [pc, #32]	; (800d3f4 <vPortExitCritical+0x50>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d105      	bne.n	800d3e6 <vPortExitCritical+0x42>
 800d3da:	2300      	movs	r3, #0
 800d3dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	f383 8811 	msr	BASEPRI, r3
}
 800d3e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d3e6:	bf00      	nop
 800d3e8:	370c      	adds	r7, #12
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	2000009c 	.word	0x2000009c
	...

0800d400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d400:	f3ef 8009 	mrs	r0, PSP
 800d404:	f3bf 8f6f 	isb	sy
 800d408:	4b15      	ldr	r3, [pc, #84]	; (800d460 <pxCurrentTCBConst>)
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	f01e 0f10 	tst.w	lr, #16
 800d410:	bf08      	it	eq
 800d412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d41a:	6010      	str	r0, [r2, #0]
 800d41c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d420:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d424:	f380 8811 	msr	BASEPRI, r0
 800d428:	f3bf 8f4f 	dsb	sy
 800d42c:	f3bf 8f6f 	isb	sy
 800d430:	f7fe fbea 	bl	800bc08 <vTaskSwitchContext>
 800d434:	f04f 0000 	mov.w	r0, #0
 800d438:	f380 8811 	msr	BASEPRI, r0
 800d43c:	bc09      	pop	{r0, r3}
 800d43e:	6819      	ldr	r1, [r3, #0]
 800d440:	6808      	ldr	r0, [r1, #0]
 800d442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d446:	f01e 0f10 	tst.w	lr, #16
 800d44a:	bf08      	it	eq
 800d44c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d450:	f380 8809 	msr	PSP, r0
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	f3af 8000 	nop.w

0800d460 <pxCurrentTCBConst>:
 800d460:	2000184c 	.word	0x2000184c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d464:	bf00      	nop
 800d466:	bf00      	nop

0800d468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d472:	f383 8811 	msr	BASEPRI, r3
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	607b      	str	r3, [r7, #4]
}
 800d480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d482:	f7fe fb07 	bl	800ba94 <xTaskIncrementTick>
 800d486:	4603      	mov	r3, r0
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d003      	beq.n	800d494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d48c:	4b06      	ldr	r3, [pc, #24]	; (800d4a8 <xPortSysTickHandler+0x40>)
 800d48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d492:	601a      	str	r2, [r3, #0]
 800d494:	2300      	movs	r3, #0
 800d496:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	f383 8811 	msr	BASEPRI, r3
}
 800d49e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d4a0:	bf00      	nop
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	e000ed04 	.word	0xe000ed04

0800d4ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d4b0:	4b0b      	ldr	r3, [pc, #44]	; (800d4e0 <vPortSetupTimerInterrupt+0x34>)
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d4b6:	4b0b      	ldr	r3, [pc, #44]	; (800d4e4 <vPortSetupTimerInterrupt+0x38>)
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d4bc:	4b0a      	ldr	r3, [pc, #40]	; (800d4e8 <vPortSetupTimerInterrupt+0x3c>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a0a      	ldr	r2, [pc, #40]	; (800d4ec <vPortSetupTimerInterrupt+0x40>)
 800d4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d4c6:	099b      	lsrs	r3, r3, #6
 800d4c8:	4a09      	ldr	r2, [pc, #36]	; (800d4f0 <vPortSetupTimerInterrupt+0x44>)
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d4ce:	4b04      	ldr	r3, [pc, #16]	; (800d4e0 <vPortSetupTimerInterrupt+0x34>)
 800d4d0:	2207      	movs	r2, #7
 800d4d2:	601a      	str	r2, [r3, #0]
}
 800d4d4:	bf00      	nop
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr
 800d4de:	bf00      	nop
 800d4e0:	e000e010 	.word	0xe000e010
 800d4e4:	e000e018 	.word	0xe000e018
 800d4e8:	20000090 	.word	0x20000090
 800d4ec:	10624dd3 	.word	0x10624dd3
 800d4f0:	e000e014 	.word	0xe000e014

0800d4f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d4f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d504 <vPortEnableVFP+0x10>
 800d4f8:	6801      	ldr	r1, [r0, #0]
 800d4fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d4fe:	6001      	str	r1, [r0, #0]
 800d500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d502:	bf00      	nop
 800d504:	e000ed88 	.word	0xe000ed88

0800d508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d508:	b480      	push	{r7}
 800d50a:	b085      	sub	sp, #20
 800d50c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d50e:	f3ef 8305 	mrs	r3, IPSR
 800d512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2b0f      	cmp	r3, #15
 800d518:	d914      	bls.n	800d544 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d51a:	4a17      	ldr	r2, [pc, #92]	; (800d578 <vPortValidateInterruptPriority+0x70>)
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	4413      	add	r3, r2
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d524:	4b15      	ldr	r3, [pc, #84]	; (800d57c <vPortValidateInterruptPriority+0x74>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	7afa      	ldrb	r2, [r7, #11]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d20a      	bcs.n	800d544 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d532:	f383 8811 	msr	BASEPRI, r3
 800d536:	f3bf 8f6f 	isb	sy
 800d53a:	f3bf 8f4f 	dsb	sy
 800d53e:	607b      	str	r3, [r7, #4]
}
 800d540:	bf00      	nop
 800d542:	e7fe      	b.n	800d542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d544:	4b0e      	ldr	r3, [pc, #56]	; (800d580 <vPortValidateInterruptPriority+0x78>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d54c:	4b0d      	ldr	r3, [pc, #52]	; (800d584 <vPortValidateInterruptPriority+0x7c>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	429a      	cmp	r2, r3
 800d552:	d90a      	bls.n	800d56a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d558:	f383 8811 	msr	BASEPRI, r3
 800d55c:	f3bf 8f6f 	isb	sy
 800d560:	f3bf 8f4f 	dsb	sy
 800d564:	603b      	str	r3, [r7, #0]
}
 800d566:	bf00      	nop
 800d568:	e7fe      	b.n	800d568 <vPortValidateInterruptPriority+0x60>
	}
 800d56a:	bf00      	nop
 800d56c:	3714      	adds	r7, #20
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	e000e3f0 	.word	0xe000e3f0
 800d57c:	20001e78 	.word	0x20001e78
 800d580:	e000ed0c 	.word	0xe000ed0c
 800d584:	20001e7c 	.word	0x20001e7c

0800d588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b08a      	sub	sp, #40	; 0x28
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d590:	2300      	movs	r3, #0
 800d592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d594:	f7fe f9b0 	bl	800b8f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d598:	4b5b      	ldr	r3, [pc, #364]	; (800d708 <pvPortMalloc+0x180>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d101      	bne.n	800d5a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d5a0:	f000 f920 	bl	800d7e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d5a4:	4b59      	ldr	r3, [pc, #356]	; (800d70c <pvPortMalloc+0x184>)
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4013      	ands	r3, r2
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f040 8093 	bne.w	800d6d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d01d      	beq.n	800d5f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d5b8:	2208      	movs	r2, #8
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4413      	add	r3, r2
 800d5be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f003 0307 	and.w	r3, r3, #7
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d014      	beq.n	800d5f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f023 0307 	bic.w	r3, r3, #7
 800d5d0:	3308      	adds	r3, #8
 800d5d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f003 0307 	and.w	r3, r3, #7
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00a      	beq.n	800d5f4 <pvPortMalloc+0x6c>
	__asm volatile
 800d5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e2:	f383 8811 	msr	BASEPRI, r3
 800d5e6:	f3bf 8f6f 	isb	sy
 800d5ea:	f3bf 8f4f 	dsb	sy
 800d5ee:	617b      	str	r3, [r7, #20]
}
 800d5f0:	bf00      	nop
 800d5f2:	e7fe      	b.n	800d5f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d06e      	beq.n	800d6d8 <pvPortMalloc+0x150>
 800d5fa:	4b45      	ldr	r3, [pc, #276]	; (800d710 <pvPortMalloc+0x188>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	429a      	cmp	r2, r3
 800d602:	d869      	bhi.n	800d6d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d604:	4b43      	ldr	r3, [pc, #268]	; (800d714 <pvPortMalloc+0x18c>)
 800d606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d608:	4b42      	ldr	r3, [pc, #264]	; (800d714 <pvPortMalloc+0x18c>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d60e:	e004      	b.n	800d61a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	429a      	cmp	r2, r3
 800d622:	d903      	bls.n	800d62c <pvPortMalloc+0xa4>
 800d624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d1f1      	bne.n	800d610 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d62c:	4b36      	ldr	r3, [pc, #216]	; (800d708 <pvPortMalloc+0x180>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d632:	429a      	cmp	r2, r3
 800d634:	d050      	beq.n	800d6d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d636:	6a3b      	ldr	r3, [r7, #32]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2208      	movs	r2, #8
 800d63c:	4413      	add	r3, r2
 800d63e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	6a3b      	ldr	r3, [r7, #32]
 800d646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64a:	685a      	ldr	r2, [r3, #4]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	1ad2      	subs	r2, r2, r3
 800d650:	2308      	movs	r3, #8
 800d652:	005b      	lsls	r3, r3, #1
 800d654:	429a      	cmp	r2, r3
 800d656:	d91f      	bls.n	800d698 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4413      	add	r3, r2
 800d65e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	f003 0307 	and.w	r3, r3, #7
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00a      	beq.n	800d680 <pvPortMalloc+0xf8>
	__asm volatile
 800d66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	613b      	str	r3, [r7, #16]
}
 800d67c:	bf00      	nop
 800d67e:	e7fe      	b.n	800d67e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d682:	685a      	ldr	r2, [r3, #4]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	1ad2      	subs	r2, r2, r3
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d692:	69b8      	ldr	r0, [r7, #24]
 800d694:	f000 f908 	bl	800d8a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d698:	4b1d      	ldr	r3, [pc, #116]	; (800d710 <pvPortMalloc+0x188>)
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	1ad3      	subs	r3, r2, r3
 800d6a2:	4a1b      	ldr	r2, [pc, #108]	; (800d710 <pvPortMalloc+0x188>)
 800d6a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d6a6:	4b1a      	ldr	r3, [pc, #104]	; (800d710 <pvPortMalloc+0x188>)
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	4b1b      	ldr	r3, [pc, #108]	; (800d718 <pvPortMalloc+0x190>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d203      	bcs.n	800d6ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d6b2:	4b17      	ldr	r3, [pc, #92]	; (800d710 <pvPortMalloc+0x188>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4a18      	ldr	r2, [pc, #96]	; (800d718 <pvPortMalloc+0x190>)
 800d6b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6bc:	685a      	ldr	r2, [r3, #4]
 800d6be:	4b13      	ldr	r3, [pc, #76]	; (800d70c <pvPortMalloc+0x184>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	431a      	orrs	r2, r3
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d6ce:	4b13      	ldr	r3, [pc, #76]	; (800d71c <pvPortMalloc+0x194>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	4a11      	ldr	r2, [pc, #68]	; (800d71c <pvPortMalloc+0x194>)
 800d6d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d6d8:	f7fe f91c 	bl	800b914 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	f003 0307 	and.w	r3, r3, #7
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00a      	beq.n	800d6fc <pvPortMalloc+0x174>
	__asm volatile
 800d6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ea:	f383 8811 	msr	BASEPRI, r3
 800d6ee:	f3bf 8f6f 	isb	sy
 800d6f2:	f3bf 8f4f 	dsb	sy
 800d6f6:	60fb      	str	r3, [r7, #12]
}
 800d6f8:	bf00      	nop
 800d6fa:	e7fe      	b.n	800d6fa <pvPortMalloc+0x172>
	return pvReturn;
 800d6fc:	69fb      	ldr	r3, [r7, #28]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3728      	adds	r7, #40	; 0x28
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	20005a88 	.word	0x20005a88
 800d70c:	20005a9c 	.word	0x20005a9c
 800d710:	20005a8c 	.word	0x20005a8c
 800d714:	20005a80 	.word	0x20005a80
 800d718:	20005a90 	.word	0x20005a90
 800d71c:	20005a94 	.word	0x20005a94

0800d720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b086      	sub	sp, #24
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d04d      	beq.n	800d7ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d732:	2308      	movs	r3, #8
 800d734:	425b      	negs	r3, r3
 800d736:	697a      	ldr	r2, [r7, #20]
 800d738:	4413      	add	r3, r2
 800d73a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	685a      	ldr	r2, [r3, #4]
 800d744:	4b24      	ldr	r3, [pc, #144]	; (800d7d8 <vPortFree+0xb8>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4013      	ands	r3, r2
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d10a      	bne.n	800d764 <vPortFree+0x44>
	__asm volatile
 800d74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d752:	f383 8811 	msr	BASEPRI, r3
 800d756:	f3bf 8f6f 	isb	sy
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	60fb      	str	r3, [r7, #12]
}
 800d760:	bf00      	nop
 800d762:	e7fe      	b.n	800d762 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d00a      	beq.n	800d782 <vPortFree+0x62>
	__asm volatile
 800d76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d770:	f383 8811 	msr	BASEPRI, r3
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	f3bf 8f4f 	dsb	sy
 800d77c:	60bb      	str	r3, [r7, #8]
}
 800d77e:	bf00      	nop
 800d780:	e7fe      	b.n	800d780 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	685a      	ldr	r2, [r3, #4]
 800d786:	4b14      	ldr	r3, [pc, #80]	; (800d7d8 <vPortFree+0xb8>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4013      	ands	r3, r2
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d01e      	beq.n	800d7ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d11a      	bne.n	800d7ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	685a      	ldr	r2, [r3, #4]
 800d79c:	4b0e      	ldr	r3, [pc, #56]	; (800d7d8 <vPortFree+0xb8>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	43db      	mvns	r3, r3
 800d7a2:	401a      	ands	r2, r3
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d7a8:	f7fe f8a6 	bl	800b8f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	685a      	ldr	r2, [r3, #4]
 800d7b0:	4b0a      	ldr	r3, [pc, #40]	; (800d7dc <vPortFree+0xbc>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4413      	add	r3, r2
 800d7b6:	4a09      	ldr	r2, [pc, #36]	; (800d7dc <vPortFree+0xbc>)
 800d7b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d7ba:	6938      	ldr	r0, [r7, #16]
 800d7bc:	f000 f874 	bl	800d8a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d7c0:	4b07      	ldr	r3, [pc, #28]	; (800d7e0 <vPortFree+0xc0>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	4a06      	ldr	r2, [pc, #24]	; (800d7e0 <vPortFree+0xc0>)
 800d7c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d7ca:	f7fe f8a3 	bl	800b914 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d7ce:	bf00      	nop
 800d7d0:	3718      	adds	r7, #24
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	20005a9c 	.word	0x20005a9c
 800d7dc:	20005a8c 	.word	0x20005a8c
 800d7e0:	20005a98 	.word	0x20005a98

0800d7e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b085      	sub	sp, #20
 800d7e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d7ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d7ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d7f0:	4b27      	ldr	r3, [pc, #156]	; (800d890 <prvHeapInit+0xac>)
 800d7f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f003 0307 	and.w	r3, r3, #7
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00c      	beq.n	800d818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	3307      	adds	r3, #7
 800d802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f023 0307 	bic.w	r3, r3, #7
 800d80a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d80c:	68ba      	ldr	r2, [r7, #8]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	4a1f      	ldr	r2, [pc, #124]	; (800d890 <prvHeapInit+0xac>)
 800d814:	4413      	add	r3, r2
 800d816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d81c:	4a1d      	ldr	r2, [pc, #116]	; (800d894 <prvHeapInit+0xb0>)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d822:	4b1c      	ldr	r3, [pc, #112]	; (800d894 <prvHeapInit+0xb0>)
 800d824:	2200      	movs	r2, #0
 800d826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	68ba      	ldr	r2, [r7, #8]
 800d82c:	4413      	add	r3, r2
 800d82e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d830:	2208      	movs	r2, #8
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	1a9b      	subs	r3, r3, r2
 800d836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f023 0307 	bic.w	r3, r3, #7
 800d83e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	4a15      	ldr	r2, [pc, #84]	; (800d898 <prvHeapInit+0xb4>)
 800d844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d846:	4b14      	ldr	r3, [pc, #80]	; (800d898 <prvHeapInit+0xb4>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2200      	movs	r2, #0
 800d84c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d84e:	4b12      	ldr	r3, [pc, #72]	; (800d898 <prvHeapInit+0xb4>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2200      	movs	r2, #0
 800d854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	1ad2      	subs	r2, r2, r3
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d864:	4b0c      	ldr	r3, [pc, #48]	; (800d898 <prvHeapInit+0xb4>)
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	4a0a      	ldr	r2, [pc, #40]	; (800d89c <prvHeapInit+0xb8>)
 800d872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	4a09      	ldr	r2, [pc, #36]	; (800d8a0 <prvHeapInit+0xbc>)
 800d87a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d87c:	4b09      	ldr	r3, [pc, #36]	; (800d8a4 <prvHeapInit+0xc0>)
 800d87e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d882:	601a      	str	r2, [r3, #0]
}
 800d884:	bf00      	nop
 800d886:	3714      	adds	r7, #20
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr
 800d890:	20001e80 	.word	0x20001e80
 800d894:	20005a80 	.word	0x20005a80
 800d898:	20005a88 	.word	0x20005a88
 800d89c:	20005a90 	.word	0x20005a90
 800d8a0:	20005a8c 	.word	0x20005a8c
 800d8a4:	20005a9c 	.word	0x20005a9c

0800d8a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d8b0:	4b28      	ldr	r3, [pc, #160]	; (800d954 <prvInsertBlockIntoFreeList+0xac>)
 800d8b2:	60fb      	str	r3, [r7, #12]
 800d8b4:	e002      	b.n	800d8bc <prvInsertBlockIntoFreeList+0x14>
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	60fb      	str	r3, [r7, #12]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d8f7      	bhi.n	800d8b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	68ba      	ldr	r2, [r7, #8]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d108      	bne.n	800d8ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	685a      	ldr	r2, [r3, #4]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	441a      	add	r2, r3
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	68ba      	ldr	r2, [r7, #8]
 800d8f4:	441a      	add	r2, r3
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d118      	bne.n	800d930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	4b15      	ldr	r3, [pc, #84]	; (800d958 <prvInsertBlockIntoFreeList+0xb0>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	429a      	cmp	r2, r3
 800d908:	d00d      	beq.n	800d926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	685a      	ldr	r2, [r3, #4]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	441a      	add	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	681a      	ldr	r2, [r3, #0]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	601a      	str	r2, [r3, #0]
 800d924:	e008      	b.n	800d938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d926:	4b0c      	ldr	r3, [pc, #48]	; (800d958 <prvInsertBlockIntoFreeList+0xb0>)
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	e003      	b.n	800d938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d938:	68fa      	ldr	r2, [r7, #12]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d002      	beq.n	800d946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d946:	bf00      	nop
 800d948:	3714      	adds	r7, #20
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	20005a80 	.word	0x20005a80
 800d958:	20005a88 	.word	0x20005a88

0800d95c <__errno>:
 800d95c:	4b01      	ldr	r3, [pc, #4]	; (800d964 <__errno+0x8>)
 800d95e:	6818      	ldr	r0, [r3, #0]
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	200000a0 	.word	0x200000a0

0800d968 <std>:
 800d968:	2300      	movs	r3, #0
 800d96a:	b510      	push	{r4, lr}
 800d96c:	4604      	mov	r4, r0
 800d96e:	e9c0 3300 	strd	r3, r3, [r0]
 800d972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d976:	6083      	str	r3, [r0, #8]
 800d978:	8181      	strh	r1, [r0, #12]
 800d97a:	6643      	str	r3, [r0, #100]	; 0x64
 800d97c:	81c2      	strh	r2, [r0, #14]
 800d97e:	6183      	str	r3, [r0, #24]
 800d980:	4619      	mov	r1, r3
 800d982:	2208      	movs	r2, #8
 800d984:	305c      	adds	r0, #92	; 0x5c
 800d986:	f000 f91a 	bl	800dbbe <memset>
 800d98a:	4b05      	ldr	r3, [pc, #20]	; (800d9a0 <std+0x38>)
 800d98c:	6263      	str	r3, [r4, #36]	; 0x24
 800d98e:	4b05      	ldr	r3, [pc, #20]	; (800d9a4 <std+0x3c>)
 800d990:	62a3      	str	r3, [r4, #40]	; 0x28
 800d992:	4b05      	ldr	r3, [pc, #20]	; (800d9a8 <std+0x40>)
 800d994:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d996:	4b05      	ldr	r3, [pc, #20]	; (800d9ac <std+0x44>)
 800d998:	6224      	str	r4, [r4, #32]
 800d99a:	6323      	str	r3, [r4, #48]	; 0x30
 800d99c:	bd10      	pop	{r4, pc}
 800d99e:	bf00      	nop
 800d9a0:	0800e7dd 	.word	0x0800e7dd
 800d9a4:	0800e7ff 	.word	0x0800e7ff
 800d9a8:	0800e837 	.word	0x0800e837
 800d9ac:	0800e85b 	.word	0x0800e85b

0800d9b0 <_cleanup_r>:
 800d9b0:	4901      	ldr	r1, [pc, #4]	; (800d9b8 <_cleanup_r+0x8>)
 800d9b2:	f000 b8af 	b.w	800db14 <_fwalk_reent>
 800d9b6:	bf00      	nop
 800d9b8:	0800f829 	.word	0x0800f829

0800d9bc <__sfmoreglue>:
 800d9bc:	b570      	push	{r4, r5, r6, lr}
 800d9be:	2268      	movs	r2, #104	; 0x68
 800d9c0:	1e4d      	subs	r5, r1, #1
 800d9c2:	4355      	muls	r5, r2
 800d9c4:	460e      	mov	r6, r1
 800d9c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d9ca:	f000 f921 	bl	800dc10 <_malloc_r>
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	b140      	cbz	r0, 800d9e4 <__sfmoreglue+0x28>
 800d9d2:	2100      	movs	r1, #0
 800d9d4:	e9c0 1600 	strd	r1, r6, [r0]
 800d9d8:	300c      	adds	r0, #12
 800d9da:	60a0      	str	r0, [r4, #8]
 800d9dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d9e0:	f000 f8ed 	bl	800dbbe <memset>
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	bd70      	pop	{r4, r5, r6, pc}

0800d9e8 <__sfp_lock_acquire>:
 800d9e8:	4801      	ldr	r0, [pc, #4]	; (800d9f0 <__sfp_lock_acquire+0x8>)
 800d9ea:	f000 b8d8 	b.w	800db9e <__retarget_lock_acquire_recursive>
 800d9ee:	bf00      	nop
 800d9f0:	20005aa1 	.word	0x20005aa1

0800d9f4 <__sfp_lock_release>:
 800d9f4:	4801      	ldr	r0, [pc, #4]	; (800d9fc <__sfp_lock_release+0x8>)
 800d9f6:	f000 b8d3 	b.w	800dba0 <__retarget_lock_release_recursive>
 800d9fa:	bf00      	nop
 800d9fc:	20005aa1 	.word	0x20005aa1

0800da00 <__sinit_lock_acquire>:
 800da00:	4801      	ldr	r0, [pc, #4]	; (800da08 <__sinit_lock_acquire+0x8>)
 800da02:	f000 b8cc 	b.w	800db9e <__retarget_lock_acquire_recursive>
 800da06:	bf00      	nop
 800da08:	20005aa2 	.word	0x20005aa2

0800da0c <__sinit_lock_release>:
 800da0c:	4801      	ldr	r0, [pc, #4]	; (800da14 <__sinit_lock_release+0x8>)
 800da0e:	f000 b8c7 	b.w	800dba0 <__retarget_lock_release_recursive>
 800da12:	bf00      	nop
 800da14:	20005aa2 	.word	0x20005aa2

0800da18 <__sinit>:
 800da18:	b510      	push	{r4, lr}
 800da1a:	4604      	mov	r4, r0
 800da1c:	f7ff fff0 	bl	800da00 <__sinit_lock_acquire>
 800da20:	69a3      	ldr	r3, [r4, #24]
 800da22:	b11b      	cbz	r3, 800da2c <__sinit+0x14>
 800da24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da28:	f7ff bff0 	b.w	800da0c <__sinit_lock_release>
 800da2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800da30:	6523      	str	r3, [r4, #80]	; 0x50
 800da32:	4b13      	ldr	r3, [pc, #76]	; (800da80 <__sinit+0x68>)
 800da34:	4a13      	ldr	r2, [pc, #76]	; (800da84 <__sinit+0x6c>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	62a2      	str	r2, [r4, #40]	; 0x28
 800da3a:	42a3      	cmp	r3, r4
 800da3c:	bf04      	itt	eq
 800da3e:	2301      	moveq	r3, #1
 800da40:	61a3      	streq	r3, [r4, #24]
 800da42:	4620      	mov	r0, r4
 800da44:	f000 f820 	bl	800da88 <__sfp>
 800da48:	6060      	str	r0, [r4, #4]
 800da4a:	4620      	mov	r0, r4
 800da4c:	f000 f81c 	bl	800da88 <__sfp>
 800da50:	60a0      	str	r0, [r4, #8]
 800da52:	4620      	mov	r0, r4
 800da54:	f000 f818 	bl	800da88 <__sfp>
 800da58:	2200      	movs	r2, #0
 800da5a:	60e0      	str	r0, [r4, #12]
 800da5c:	2104      	movs	r1, #4
 800da5e:	6860      	ldr	r0, [r4, #4]
 800da60:	f7ff ff82 	bl	800d968 <std>
 800da64:	68a0      	ldr	r0, [r4, #8]
 800da66:	2201      	movs	r2, #1
 800da68:	2109      	movs	r1, #9
 800da6a:	f7ff ff7d 	bl	800d968 <std>
 800da6e:	68e0      	ldr	r0, [r4, #12]
 800da70:	2202      	movs	r2, #2
 800da72:	2112      	movs	r1, #18
 800da74:	f7ff ff78 	bl	800d968 <std>
 800da78:	2301      	movs	r3, #1
 800da7a:	61a3      	str	r3, [r4, #24]
 800da7c:	e7d2      	b.n	800da24 <__sinit+0xc>
 800da7e:	bf00      	nop
 800da80:	08012218 	.word	0x08012218
 800da84:	0800d9b1 	.word	0x0800d9b1

0800da88 <__sfp>:
 800da88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8a:	4607      	mov	r7, r0
 800da8c:	f7ff ffac 	bl	800d9e8 <__sfp_lock_acquire>
 800da90:	4b1e      	ldr	r3, [pc, #120]	; (800db0c <__sfp+0x84>)
 800da92:	681e      	ldr	r6, [r3, #0]
 800da94:	69b3      	ldr	r3, [r6, #24]
 800da96:	b913      	cbnz	r3, 800da9e <__sfp+0x16>
 800da98:	4630      	mov	r0, r6
 800da9a:	f7ff ffbd 	bl	800da18 <__sinit>
 800da9e:	3648      	adds	r6, #72	; 0x48
 800daa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800daa4:	3b01      	subs	r3, #1
 800daa6:	d503      	bpl.n	800dab0 <__sfp+0x28>
 800daa8:	6833      	ldr	r3, [r6, #0]
 800daaa:	b30b      	cbz	r3, 800daf0 <__sfp+0x68>
 800daac:	6836      	ldr	r6, [r6, #0]
 800daae:	e7f7      	b.n	800daa0 <__sfp+0x18>
 800dab0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dab4:	b9d5      	cbnz	r5, 800daec <__sfp+0x64>
 800dab6:	4b16      	ldr	r3, [pc, #88]	; (800db10 <__sfp+0x88>)
 800dab8:	60e3      	str	r3, [r4, #12]
 800daba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dabe:	6665      	str	r5, [r4, #100]	; 0x64
 800dac0:	f000 f86c 	bl	800db9c <__retarget_lock_init_recursive>
 800dac4:	f7ff ff96 	bl	800d9f4 <__sfp_lock_release>
 800dac8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dacc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dad0:	6025      	str	r5, [r4, #0]
 800dad2:	61a5      	str	r5, [r4, #24]
 800dad4:	2208      	movs	r2, #8
 800dad6:	4629      	mov	r1, r5
 800dad8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dadc:	f000 f86f 	bl	800dbbe <memset>
 800dae0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dae4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dae8:	4620      	mov	r0, r4
 800daea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daec:	3468      	adds	r4, #104	; 0x68
 800daee:	e7d9      	b.n	800daa4 <__sfp+0x1c>
 800daf0:	2104      	movs	r1, #4
 800daf2:	4638      	mov	r0, r7
 800daf4:	f7ff ff62 	bl	800d9bc <__sfmoreglue>
 800daf8:	4604      	mov	r4, r0
 800dafa:	6030      	str	r0, [r6, #0]
 800dafc:	2800      	cmp	r0, #0
 800dafe:	d1d5      	bne.n	800daac <__sfp+0x24>
 800db00:	f7ff ff78 	bl	800d9f4 <__sfp_lock_release>
 800db04:	230c      	movs	r3, #12
 800db06:	603b      	str	r3, [r7, #0]
 800db08:	e7ee      	b.n	800dae8 <__sfp+0x60>
 800db0a:	bf00      	nop
 800db0c:	08012218 	.word	0x08012218
 800db10:	ffff0001 	.word	0xffff0001

0800db14 <_fwalk_reent>:
 800db14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db18:	4606      	mov	r6, r0
 800db1a:	4688      	mov	r8, r1
 800db1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800db20:	2700      	movs	r7, #0
 800db22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db26:	f1b9 0901 	subs.w	r9, r9, #1
 800db2a:	d505      	bpl.n	800db38 <_fwalk_reent+0x24>
 800db2c:	6824      	ldr	r4, [r4, #0]
 800db2e:	2c00      	cmp	r4, #0
 800db30:	d1f7      	bne.n	800db22 <_fwalk_reent+0xe>
 800db32:	4638      	mov	r0, r7
 800db34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db38:	89ab      	ldrh	r3, [r5, #12]
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d907      	bls.n	800db4e <_fwalk_reent+0x3a>
 800db3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db42:	3301      	adds	r3, #1
 800db44:	d003      	beq.n	800db4e <_fwalk_reent+0x3a>
 800db46:	4629      	mov	r1, r5
 800db48:	4630      	mov	r0, r6
 800db4a:	47c0      	blx	r8
 800db4c:	4307      	orrs	r7, r0
 800db4e:	3568      	adds	r5, #104	; 0x68
 800db50:	e7e9      	b.n	800db26 <_fwalk_reent+0x12>
	...

0800db54 <__libc_init_array>:
 800db54:	b570      	push	{r4, r5, r6, lr}
 800db56:	4d0d      	ldr	r5, [pc, #52]	; (800db8c <__libc_init_array+0x38>)
 800db58:	4c0d      	ldr	r4, [pc, #52]	; (800db90 <__libc_init_array+0x3c>)
 800db5a:	1b64      	subs	r4, r4, r5
 800db5c:	10a4      	asrs	r4, r4, #2
 800db5e:	2600      	movs	r6, #0
 800db60:	42a6      	cmp	r6, r4
 800db62:	d109      	bne.n	800db78 <__libc_init_array+0x24>
 800db64:	4d0b      	ldr	r5, [pc, #44]	; (800db94 <__libc_init_array+0x40>)
 800db66:	4c0c      	ldr	r4, [pc, #48]	; (800db98 <__libc_init_array+0x44>)
 800db68:	f004 f84c 	bl	8011c04 <_init>
 800db6c:	1b64      	subs	r4, r4, r5
 800db6e:	10a4      	asrs	r4, r4, #2
 800db70:	2600      	movs	r6, #0
 800db72:	42a6      	cmp	r6, r4
 800db74:	d105      	bne.n	800db82 <__libc_init_array+0x2e>
 800db76:	bd70      	pop	{r4, r5, r6, pc}
 800db78:	f855 3b04 	ldr.w	r3, [r5], #4
 800db7c:	4798      	blx	r3
 800db7e:	3601      	adds	r6, #1
 800db80:	e7ee      	b.n	800db60 <__libc_init_array+0xc>
 800db82:	f855 3b04 	ldr.w	r3, [r5], #4
 800db86:	4798      	blx	r3
 800db88:	3601      	adds	r6, #1
 800db8a:	e7f2      	b.n	800db72 <__libc_init_array+0x1e>
 800db8c:	080127e8 	.word	0x080127e8
 800db90:	080127e8 	.word	0x080127e8
 800db94:	080127e8 	.word	0x080127e8
 800db98:	080127ec 	.word	0x080127ec

0800db9c <__retarget_lock_init_recursive>:
 800db9c:	4770      	bx	lr

0800db9e <__retarget_lock_acquire_recursive>:
 800db9e:	4770      	bx	lr

0800dba0 <__retarget_lock_release_recursive>:
 800dba0:	4770      	bx	lr

0800dba2 <memcpy>:
 800dba2:	440a      	add	r2, r1
 800dba4:	4291      	cmp	r1, r2
 800dba6:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbaa:	d100      	bne.n	800dbae <memcpy+0xc>
 800dbac:	4770      	bx	lr
 800dbae:	b510      	push	{r4, lr}
 800dbb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbb8:	4291      	cmp	r1, r2
 800dbba:	d1f9      	bne.n	800dbb0 <memcpy+0xe>
 800dbbc:	bd10      	pop	{r4, pc}

0800dbbe <memset>:
 800dbbe:	4402      	add	r2, r0
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d100      	bne.n	800dbc8 <memset+0xa>
 800dbc6:	4770      	bx	lr
 800dbc8:	f803 1b01 	strb.w	r1, [r3], #1
 800dbcc:	e7f9      	b.n	800dbc2 <memset+0x4>
	...

0800dbd0 <sbrk_aligned>:
 800dbd0:	b570      	push	{r4, r5, r6, lr}
 800dbd2:	4e0e      	ldr	r6, [pc, #56]	; (800dc0c <sbrk_aligned+0x3c>)
 800dbd4:	460c      	mov	r4, r1
 800dbd6:	6831      	ldr	r1, [r6, #0]
 800dbd8:	4605      	mov	r5, r0
 800dbda:	b911      	cbnz	r1, 800dbe2 <sbrk_aligned+0x12>
 800dbdc:	f000 fdee 	bl	800e7bc <_sbrk_r>
 800dbe0:	6030      	str	r0, [r6, #0]
 800dbe2:	4621      	mov	r1, r4
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	f000 fde9 	bl	800e7bc <_sbrk_r>
 800dbea:	1c43      	adds	r3, r0, #1
 800dbec:	d00a      	beq.n	800dc04 <sbrk_aligned+0x34>
 800dbee:	1cc4      	adds	r4, r0, #3
 800dbf0:	f024 0403 	bic.w	r4, r4, #3
 800dbf4:	42a0      	cmp	r0, r4
 800dbf6:	d007      	beq.n	800dc08 <sbrk_aligned+0x38>
 800dbf8:	1a21      	subs	r1, r4, r0
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	f000 fdde 	bl	800e7bc <_sbrk_r>
 800dc00:	3001      	adds	r0, #1
 800dc02:	d101      	bne.n	800dc08 <sbrk_aligned+0x38>
 800dc04:	f04f 34ff 	mov.w	r4, #4294967295
 800dc08:	4620      	mov	r0, r4
 800dc0a:	bd70      	pop	{r4, r5, r6, pc}
 800dc0c:	20005aa8 	.word	0x20005aa8

0800dc10 <_malloc_r>:
 800dc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc14:	1ccd      	adds	r5, r1, #3
 800dc16:	f025 0503 	bic.w	r5, r5, #3
 800dc1a:	3508      	adds	r5, #8
 800dc1c:	2d0c      	cmp	r5, #12
 800dc1e:	bf38      	it	cc
 800dc20:	250c      	movcc	r5, #12
 800dc22:	2d00      	cmp	r5, #0
 800dc24:	4607      	mov	r7, r0
 800dc26:	db01      	blt.n	800dc2c <_malloc_r+0x1c>
 800dc28:	42a9      	cmp	r1, r5
 800dc2a:	d905      	bls.n	800dc38 <_malloc_r+0x28>
 800dc2c:	230c      	movs	r3, #12
 800dc2e:	603b      	str	r3, [r7, #0]
 800dc30:	2600      	movs	r6, #0
 800dc32:	4630      	mov	r0, r6
 800dc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc38:	4e2e      	ldr	r6, [pc, #184]	; (800dcf4 <_malloc_r+0xe4>)
 800dc3a:	f001 feb5 	bl	800f9a8 <__malloc_lock>
 800dc3e:	6833      	ldr	r3, [r6, #0]
 800dc40:	461c      	mov	r4, r3
 800dc42:	bb34      	cbnz	r4, 800dc92 <_malloc_r+0x82>
 800dc44:	4629      	mov	r1, r5
 800dc46:	4638      	mov	r0, r7
 800dc48:	f7ff ffc2 	bl	800dbd0 <sbrk_aligned>
 800dc4c:	1c43      	adds	r3, r0, #1
 800dc4e:	4604      	mov	r4, r0
 800dc50:	d14d      	bne.n	800dcee <_malloc_r+0xde>
 800dc52:	6834      	ldr	r4, [r6, #0]
 800dc54:	4626      	mov	r6, r4
 800dc56:	2e00      	cmp	r6, #0
 800dc58:	d140      	bne.n	800dcdc <_malloc_r+0xcc>
 800dc5a:	6823      	ldr	r3, [r4, #0]
 800dc5c:	4631      	mov	r1, r6
 800dc5e:	4638      	mov	r0, r7
 800dc60:	eb04 0803 	add.w	r8, r4, r3
 800dc64:	f000 fdaa 	bl	800e7bc <_sbrk_r>
 800dc68:	4580      	cmp	r8, r0
 800dc6a:	d13a      	bne.n	800dce2 <_malloc_r+0xd2>
 800dc6c:	6821      	ldr	r1, [r4, #0]
 800dc6e:	3503      	adds	r5, #3
 800dc70:	1a6d      	subs	r5, r5, r1
 800dc72:	f025 0503 	bic.w	r5, r5, #3
 800dc76:	3508      	adds	r5, #8
 800dc78:	2d0c      	cmp	r5, #12
 800dc7a:	bf38      	it	cc
 800dc7c:	250c      	movcc	r5, #12
 800dc7e:	4629      	mov	r1, r5
 800dc80:	4638      	mov	r0, r7
 800dc82:	f7ff ffa5 	bl	800dbd0 <sbrk_aligned>
 800dc86:	3001      	adds	r0, #1
 800dc88:	d02b      	beq.n	800dce2 <_malloc_r+0xd2>
 800dc8a:	6823      	ldr	r3, [r4, #0]
 800dc8c:	442b      	add	r3, r5
 800dc8e:	6023      	str	r3, [r4, #0]
 800dc90:	e00e      	b.n	800dcb0 <_malloc_r+0xa0>
 800dc92:	6822      	ldr	r2, [r4, #0]
 800dc94:	1b52      	subs	r2, r2, r5
 800dc96:	d41e      	bmi.n	800dcd6 <_malloc_r+0xc6>
 800dc98:	2a0b      	cmp	r2, #11
 800dc9a:	d916      	bls.n	800dcca <_malloc_r+0xba>
 800dc9c:	1961      	adds	r1, r4, r5
 800dc9e:	42a3      	cmp	r3, r4
 800dca0:	6025      	str	r5, [r4, #0]
 800dca2:	bf18      	it	ne
 800dca4:	6059      	strne	r1, [r3, #4]
 800dca6:	6863      	ldr	r3, [r4, #4]
 800dca8:	bf08      	it	eq
 800dcaa:	6031      	streq	r1, [r6, #0]
 800dcac:	5162      	str	r2, [r4, r5]
 800dcae:	604b      	str	r3, [r1, #4]
 800dcb0:	4638      	mov	r0, r7
 800dcb2:	f104 060b 	add.w	r6, r4, #11
 800dcb6:	f001 fe7d 	bl	800f9b4 <__malloc_unlock>
 800dcba:	f026 0607 	bic.w	r6, r6, #7
 800dcbe:	1d23      	adds	r3, r4, #4
 800dcc0:	1af2      	subs	r2, r6, r3
 800dcc2:	d0b6      	beq.n	800dc32 <_malloc_r+0x22>
 800dcc4:	1b9b      	subs	r3, r3, r6
 800dcc6:	50a3      	str	r3, [r4, r2]
 800dcc8:	e7b3      	b.n	800dc32 <_malloc_r+0x22>
 800dcca:	6862      	ldr	r2, [r4, #4]
 800dccc:	42a3      	cmp	r3, r4
 800dcce:	bf0c      	ite	eq
 800dcd0:	6032      	streq	r2, [r6, #0]
 800dcd2:	605a      	strne	r2, [r3, #4]
 800dcd4:	e7ec      	b.n	800dcb0 <_malloc_r+0xa0>
 800dcd6:	4623      	mov	r3, r4
 800dcd8:	6864      	ldr	r4, [r4, #4]
 800dcda:	e7b2      	b.n	800dc42 <_malloc_r+0x32>
 800dcdc:	4634      	mov	r4, r6
 800dcde:	6876      	ldr	r6, [r6, #4]
 800dce0:	e7b9      	b.n	800dc56 <_malloc_r+0x46>
 800dce2:	230c      	movs	r3, #12
 800dce4:	603b      	str	r3, [r7, #0]
 800dce6:	4638      	mov	r0, r7
 800dce8:	f001 fe64 	bl	800f9b4 <__malloc_unlock>
 800dcec:	e7a1      	b.n	800dc32 <_malloc_r+0x22>
 800dcee:	6025      	str	r5, [r4, #0]
 800dcf0:	e7de      	b.n	800dcb0 <_malloc_r+0xa0>
 800dcf2:	bf00      	nop
 800dcf4:	20005aa4 	.word	0x20005aa4

0800dcf8 <__cvt>:
 800dcf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dcfc:	ec55 4b10 	vmov	r4, r5, d0
 800dd00:	2d00      	cmp	r5, #0
 800dd02:	460e      	mov	r6, r1
 800dd04:	4619      	mov	r1, r3
 800dd06:	462b      	mov	r3, r5
 800dd08:	bfbb      	ittet	lt
 800dd0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dd0e:	461d      	movlt	r5, r3
 800dd10:	2300      	movge	r3, #0
 800dd12:	232d      	movlt	r3, #45	; 0x2d
 800dd14:	700b      	strb	r3, [r1, #0]
 800dd16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dd1c:	4691      	mov	r9, r2
 800dd1e:	f023 0820 	bic.w	r8, r3, #32
 800dd22:	bfbc      	itt	lt
 800dd24:	4622      	movlt	r2, r4
 800dd26:	4614      	movlt	r4, r2
 800dd28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dd2c:	d005      	beq.n	800dd3a <__cvt+0x42>
 800dd2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dd32:	d100      	bne.n	800dd36 <__cvt+0x3e>
 800dd34:	3601      	adds	r6, #1
 800dd36:	2102      	movs	r1, #2
 800dd38:	e000      	b.n	800dd3c <__cvt+0x44>
 800dd3a:	2103      	movs	r1, #3
 800dd3c:	ab03      	add	r3, sp, #12
 800dd3e:	9301      	str	r3, [sp, #4]
 800dd40:	ab02      	add	r3, sp, #8
 800dd42:	9300      	str	r3, [sp, #0]
 800dd44:	ec45 4b10 	vmov	d0, r4, r5
 800dd48:	4653      	mov	r3, sl
 800dd4a:	4632      	mov	r2, r6
 800dd4c:	f000 fef8 	bl	800eb40 <_dtoa_r>
 800dd50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dd54:	4607      	mov	r7, r0
 800dd56:	d102      	bne.n	800dd5e <__cvt+0x66>
 800dd58:	f019 0f01 	tst.w	r9, #1
 800dd5c:	d022      	beq.n	800dda4 <__cvt+0xac>
 800dd5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dd62:	eb07 0906 	add.w	r9, r7, r6
 800dd66:	d110      	bne.n	800dd8a <__cvt+0x92>
 800dd68:	783b      	ldrb	r3, [r7, #0]
 800dd6a:	2b30      	cmp	r3, #48	; 0x30
 800dd6c:	d10a      	bne.n	800dd84 <__cvt+0x8c>
 800dd6e:	2200      	movs	r2, #0
 800dd70:	2300      	movs	r3, #0
 800dd72:	4620      	mov	r0, r4
 800dd74:	4629      	mov	r1, r5
 800dd76:	f7f2 fea7 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd7a:	b918      	cbnz	r0, 800dd84 <__cvt+0x8c>
 800dd7c:	f1c6 0601 	rsb	r6, r6, #1
 800dd80:	f8ca 6000 	str.w	r6, [sl]
 800dd84:	f8da 3000 	ldr.w	r3, [sl]
 800dd88:	4499      	add	r9, r3
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	4620      	mov	r0, r4
 800dd90:	4629      	mov	r1, r5
 800dd92:	f7f2 fe99 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd96:	b108      	cbz	r0, 800dd9c <__cvt+0xa4>
 800dd98:	f8cd 900c 	str.w	r9, [sp, #12]
 800dd9c:	2230      	movs	r2, #48	; 0x30
 800dd9e:	9b03      	ldr	r3, [sp, #12]
 800dda0:	454b      	cmp	r3, r9
 800dda2:	d307      	bcc.n	800ddb4 <__cvt+0xbc>
 800dda4:	9b03      	ldr	r3, [sp, #12]
 800dda6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dda8:	1bdb      	subs	r3, r3, r7
 800ddaa:	4638      	mov	r0, r7
 800ddac:	6013      	str	r3, [r2, #0]
 800ddae:	b004      	add	sp, #16
 800ddb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddb4:	1c59      	adds	r1, r3, #1
 800ddb6:	9103      	str	r1, [sp, #12]
 800ddb8:	701a      	strb	r2, [r3, #0]
 800ddba:	e7f0      	b.n	800dd9e <__cvt+0xa6>

0800ddbc <__exponent>:
 800ddbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2900      	cmp	r1, #0
 800ddc2:	bfb8      	it	lt
 800ddc4:	4249      	neglt	r1, r1
 800ddc6:	f803 2b02 	strb.w	r2, [r3], #2
 800ddca:	bfb4      	ite	lt
 800ddcc:	222d      	movlt	r2, #45	; 0x2d
 800ddce:	222b      	movge	r2, #43	; 0x2b
 800ddd0:	2909      	cmp	r1, #9
 800ddd2:	7042      	strb	r2, [r0, #1]
 800ddd4:	dd2a      	ble.n	800de2c <__exponent+0x70>
 800ddd6:	f10d 0407 	add.w	r4, sp, #7
 800ddda:	46a4      	mov	ip, r4
 800dddc:	270a      	movs	r7, #10
 800ddde:	46a6      	mov	lr, r4
 800dde0:	460a      	mov	r2, r1
 800dde2:	fb91 f6f7 	sdiv	r6, r1, r7
 800dde6:	fb07 1516 	mls	r5, r7, r6, r1
 800ddea:	3530      	adds	r5, #48	; 0x30
 800ddec:	2a63      	cmp	r2, #99	; 0x63
 800ddee:	f104 34ff 	add.w	r4, r4, #4294967295
 800ddf2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ddf6:	4631      	mov	r1, r6
 800ddf8:	dcf1      	bgt.n	800ddde <__exponent+0x22>
 800ddfa:	3130      	adds	r1, #48	; 0x30
 800ddfc:	f1ae 0502 	sub.w	r5, lr, #2
 800de00:	f804 1c01 	strb.w	r1, [r4, #-1]
 800de04:	1c44      	adds	r4, r0, #1
 800de06:	4629      	mov	r1, r5
 800de08:	4561      	cmp	r1, ip
 800de0a:	d30a      	bcc.n	800de22 <__exponent+0x66>
 800de0c:	f10d 0209 	add.w	r2, sp, #9
 800de10:	eba2 020e 	sub.w	r2, r2, lr
 800de14:	4565      	cmp	r5, ip
 800de16:	bf88      	it	hi
 800de18:	2200      	movhi	r2, #0
 800de1a:	4413      	add	r3, r2
 800de1c:	1a18      	subs	r0, r3, r0
 800de1e:	b003      	add	sp, #12
 800de20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de26:	f804 2f01 	strb.w	r2, [r4, #1]!
 800de2a:	e7ed      	b.n	800de08 <__exponent+0x4c>
 800de2c:	2330      	movs	r3, #48	; 0x30
 800de2e:	3130      	adds	r1, #48	; 0x30
 800de30:	7083      	strb	r3, [r0, #2]
 800de32:	70c1      	strb	r1, [r0, #3]
 800de34:	1d03      	adds	r3, r0, #4
 800de36:	e7f1      	b.n	800de1c <__exponent+0x60>

0800de38 <_printf_float>:
 800de38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3c:	ed2d 8b02 	vpush	{d8}
 800de40:	b08d      	sub	sp, #52	; 0x34
 800de42:	460c      	mov	r4, r1
 800de44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800de48:	4616      	mov	r6, r2
 800de4a:	461f      	mov	r7, r3
 800de4c:	4605      	mov	r5, r0
 800de4e:	f001 fd27 	bl	800f8a0 <_localeconv_r>
 800de52:	f8d0 a000 	ldr.w	sl, [r0]
 800de56:	4650      	mov	r0, sl
 800de58:	f7f2 f9ba 	bl	80001d0 <strlen>
 800de5c:	2300      	movs	r3, #0
 800de5e:	930a      	str	r3, [sp, #40]	; 0x28
 800de60:	6823      	ldr	r3, [r4, #0]
 800de62:	9305      	str	r3, [sp, #20]
 800de64:	f8d8 3000 	ldr.w	r3, [r8]
 800de68:	f894 b018 	ldrb.w	fp, [r4, #24]
 800de6c:	3307      	adds	r3, #7
 800de6e:	f023 0307 	bic.w	r3, r3, #7
 800de72:	f103 0208 	add.w	r2, r3, #8
 800de76:	f8c8 2000 	str.w	r2, [r8]
 800de7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800de82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800de86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800de8a:	9307      	str	r3, [sp, #28]
 800de8c:	f8cd 8018 	str.w	r8, [sp, #24]
 800de90:	ee08 0a10 	vmov	s16, r0
 800de94:	4b9f      	ldr	r3, [pc, #636]	; (800e114 <_printf_float+0x2dc>)
 800de96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de9a:	f04f 32ff 	mov.w	r2, #4294967295
 800de9e:	f7f2 fe45 	bl	8000b2c <__aeabi_dcmpun>
 800dea2:	bb88      	cbnz	r0, 800df08 <_printf_float+0xd0>
 800dea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dea8:	4b9a      	ldr	r3, [pc, #616]	; (800e114 <_printf_float+0x2dc>)
 800deaa:	f04f 32ff 	mov.w	r2, #4294967295
 800deae:	f7f2 fe1f 	bl	8000af0 <__aeabi_dcmple>
 800deb2:	bb48      	cbnz	r0, 800df08 <_printf_float+0xd0>
 800deb4:	2200      	movs	r2, #0
 800deb6:	2300      	movs	r3, #0
 800deb8:	4640      	mov	r0, r8
 800deba:	4649      	mov	r1, r9
 800debc:	f7f2 fe0e 	bl	8000adc <__aeabi_dcmplt>
 800dec0:	b110      	cbz	r0, 800dec8 <_printf_float+0x90>
 800dec2:	232d      	movs	r3, #45	; 0x2d
 800dec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dec8:	4b93      	ldr	r3, [pc, #588]	; (800e118 <_printf_float+0x2e0>)
 800deca:	4894      	ldr	r0, [pc, #592]	; (800e11c <_printf_float+0x2e4>)
 800decc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ded0:	bf94      	ite	ls
 800ded2:	4698      	movls	r8, r3
 800ded4:	4680      	movhi	r8, r0
 800ded6:	2303      	movs	r3, #3
 800ded8:	6123      	str	r3, [r4, #16]
 800deda:	9b05      	ldr	r3, [sp, #20]
 800dedc:	f023 0204 	bic.w	r2, r3, #4
 800dee0:	6022      	str	r2, [r4, #0]
 800dee2:	f04f 0900 	mov.w	r9, #0
 800dee6:	9700      	str	r7, [sp, #0]
 800dee8:	4633      	mov	r3, r6
 800deea:	aa0b      	add	r2, sp, #44	; 0x2c
 800deec:	4621      	mov	r1, r4
 800deee:	4628      	mov	r0, r5
 800def0:	f000 f9d8 	bl	800e2a4 <_printf_common>
 800def4:	3001      	adds	r0, #1
 800def6:	f040 8090 	bne.w	800e01a <_printf_float+0x1e2>
 800defa:	f04f 30ff 	mov.w	r0, #4294967295
 800defe:	b00d      	add	sp, #52	; 0x34
 800df00:	ecbd 8b02 	vpop	{d8}
 800df04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df08:	4642      	mov	r2, r8
 800df0a:	464b      	mov	r3, r9
 800df0c:	4640      	mov	r0, r8
 800df0e:	4649      	mov	r1, r9
 800df10:	f7f2 fe0c 	bl	8000b2c <__aeabi_dcmpun>
 800df14:	b140      	cbz	r0, 800df28 <_printf_float+0xf0>
 800df16:	464b      	mov	r3, r9
 800df18:	2b00      	cmp	r3, #0
 800df1a:	bfbc      	itt	lt
 800df1c:	232d      	movlt	r3, #45	; 0x2d
 800df1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800df22:	487f      	ldr	r0, [pc, #508]	; (800e120 <_printf_float+0x2e8>)
 800df24:	4b7f      	ldr	r3, [pc, #508]	; (800e124 <_printf_float+0x2ec>)
 800df26:	e7d1      	b.n	800decc <_printf_float+0x94>
 800df28:	6863      	ldr	r3, [r4, #4]
 800df2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800df2e:	9206      	str	r2, [sp, #24]
 800df30:	1c5a      	adds	r2, r3, #1
 800df32:	d13f      	bne.n	800dfb4 <_printf_float+0x17c>
 800df34:	2306      	movs	r3, #6
 800df36:	6063      	str	r3, [r4, #4]
 800df38:	9b05      	ldr	r3, [sp, #20]
 800df3a:	6861      	ldr	r1, [r4, #4]
 800df3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800df40:	2300      	movs	r3, #0
 800df42:	9303      	str	r3, [sp, #12]
 800df44:	ab0a      	add	r3, sp, #40	; 0x28
 800df46:	e9cd b301 	strd	fp, r3, [sp, #4]
 800df4a:	ab09      	add	r3, sp, #36	; 0x24
 800df4c:	ec49 8b10 	vmov	d0, r8, r9
 800df50:	9300      	str	r3, [sp, #0]
 800df52:	6022      	str	r2, [r4, #0]
 800df54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800df58:	4628      	mov	r0, r5
 800df5a:	f7ff fecd 	bl	800dcf8 <__cvt>
 800df5e:	9b06      	ldr	r3, [sp, #24]
 800df60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df62:	2b47      	cmp	r3, #71	; 0x47
 800df64:	4680      	mov	r8, r0
 800df66:	d108      	bne.n	800df7a <_printf_float+0x142>
 800df68:	1cc8      	adds	r0, r1, #3
 800df6a:	db02      	blt.n	800df72 <_printf_float+0x13a>
 800df6c:	6863      	ldr	r3, [r4, #4]
 800df6e:	4299      	cmp	r1, r3
 800df70:	dd41      	ble.n	800dff6 <_printf_float+0x1be>
 800df72:	f1ab 0b02 	sub.w	fp, fp, #2
 800df76:	fa5f fb8b 	uxtb.w	fp, fp
 800df7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800df7e:	d820      	bhi.n	800dfc2 <_printf_float+0x18a>
 800df80:	3901      	subs	r1, #1
 800df82:	465a      	mov	r2, fp
 800df84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800df88:	9109      	str	r1, [sp, #36]	; 0x24
 800df8a:	f7ff ff17 	bl	800ddbc <__exponent>
 800df8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df90:	1813      	adds	r3, r2, r0
 800df92:	2a01      	cmp	r2, #1
 800df94:	4681      	mov	r9, r0
 800df96:	6123      	str	r3, [r4, #16]
 800df98:	dc02      	bgt.n	800dfa0 <_printf_float+0x168>
 800df9a:	6822      	ldr	r2, [r4, #0]
 800df9c:	07d2      	lsls	r2, r2, #31
 800df9e:	d501      	bpl.n	800dfa4 <_printf_float+0x16c>
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	6123      	str	r3, [r4, #16]
 800dfa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d09c      	beq.n	800dee6 <_printf_float+0xae>
 800dfac:	232d      	movs	r3, #45	; 0x2d
 800dfae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfb2:	e798      	b.n	800dee6 <_printf_float+0xae>
 800dfb4:	9a06      	ldr	r2, [sp, #24]
 800dfb6:	2a47      	cmp	r2, #71	; 0x47
 800dfb8:	d1be      	bne.n	800df38 <_printf_float+0x100>
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d1bc      	bne.n	800df38 <_printf_float+0x100>
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e7b9      	b.n	800df36 <_printf_float+0xfe>
 800dfc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dfc6:	d118      	bne.n	800dffa <_printf_float+0x1c2>
 800dfc8:	2900      	cmp	r1, #0
 800dfca:	6863      	ldr	r3, [r4, #4]
 800dfcc:	dd0b      	ble.n	800dfe6 <_printf_float+0x1ae>
 800dfce:	6121      	str	r1, [r4, #16]
 800dfd0:	b913      	cbnz	r3, 800dfd8 <_printf_float+0x1a0>
 800dfd2:	6822      	ldr	r2, [r4, #0]
 800dfd4:	07d0      	lsls	r0, r2, #31
 800dfd6:	d502      	bpl.n	800dfde <_printf_float+0x1a6>
 800dfd8:	3301      	adds	r3, #1
 800dfda:	440b      	add	r3, r1
 800dfdc:	6123      	str	r3, [r4, #16]
 800dfde:	65a1      	str	r1, [r4, #88]	; 0x58
 800dfe0:	f04f 0900 	mov.w	r9, #0
 800dfe4:	e7de      	b.n	800dfa4 <_printf_float+0x16c>
 800dfe6:	b913      	cbnz	r3, 800dfee <_printf_float+0x1b6>
 800dfe8:	6822      	ldr	r2, [r4, #0]
 800dfea:	07d2      	lsls	r2, r2, #31
 800dfec:	d501      	bpl.n	800dff2 <_printf_float+0x1ba>
 800dfee:	3302      	adds	r3, #2
 800dff0:	e7f4      	b.n	800dfdc <_printf_float+0x1a4>
 800dff2:	2301      	movs	r3, #1
 800dff4:	e7f2      	b.n	800dfdc <_printf_float+0x1a4>
 800dff6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dffc:	4299      	cmp	r1, r3
 800dffe:	db05      	blt.n	800e00c <_printf_float+0x1d4>
 800e000:	6823      	ldr	r3, [r4, #0]
 800e002:	6121      	str	r1, [r4, #16]
 800e004:	07d8      	lsls	r0, r3, #31
 800e006:	d5ea      	bpl.n	800dfde <_printf_float+0x1a6>
 800e008:	1c4b      	adds	r3, r1, #1
 800e00a:	e7e7      	b.n	800dfdc <_printf_float+0x1a4>
 800e00c:	2900      	cmp	r1, #0
 800e00e:	bfd4      	ite	le
 800e010:	f1c1 0202 	rsble	r2, r1, #2
 800e014:	2201      	movgt	r2, #1
 800e016:	4413      	add	r3, r2
 800e018:	e7e0      	b.n	800dfdc <_printf_float+0x1a4>
 800e01a:	6823      	ldr	r3, [r4, #0]
 800e01c:	055a      	lsls	r2, r3, #21
 800e01e:	d407      	bmi.n	800e030 <_printf_float+0x1f8>
 800e020:	6923      	ldr	r3, [r4, #16]
 800e022:	4642      	mov	r2, r8
 800e024:	4631      	mov	r1, r6
 800e026:	4628      	mov	r0, r5
 800e028:	47b8      	blx	r7
 800e02a:	3001      	adds	r0, #1
 800e02c:	d12c      	bne.n	800e088 <_printf_float+0x250>
 800e02e:	e764      	b.n	800defa <_printf_float+0xc2>
 800e030:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e034:	f240 80e0 	bls.w	800e1f8 <_printf_float+0x3c0>
 800e038:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e03c:	2200      	movs	r2, #0
 800e03e:	2300      	movs	r3, #0
 800e040:	f7f2 fd42 	bl	8000ac8 <__aeabi_dcmpeq>
 800e044:	2800      	cmp	r0, #0
 800e046:	d034      	beq.n	800e0b2 <_printf_float+0x27a>
 800e048:	4a37      	ldr	r2, [pc, #220]	; (800e128 <_printf_float+0x2f0>)
 800e04a:	2301      	movs	r3, #1
 800e04c:	4631      	mov	r1, r6
 800e04e:	4628      	mov	r0, r5
 800e050:	47b8      	blx	r7
 800e052:	3001      	adds	r0, #1
 800e054:	f43f af51 	beq.w	800defa <_printf_float+0xc2>
 800e058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e05c:	429a      	cmp	r2, r3
 800e05e:	db02      	blt.n	800e066 <_printf_float+0x22e>
 800e060:	6823      	ldr	r3, [r4, #0]
 800e062:	07d8      	lsls	r0, r3, #31
 800e064:	d510      	bpl.n	800e088 <_printf_float+0x250>
 800e066:	ee18 3a10 	vmov	r3, s16
 800e06a:	4652      	mov	r2, sl
 800e06c:	4631      	mov	r1, r6
 800e06e:	4628      	mov	r0, r5
 800e070:	47b8      	blx	r7
 800e072:	3001      	adds	r0, #1
 800e074:	f43f af41 	beq.w	800defa <_printf_float+0xc2>
 800e078:	f04f 0800 	mov.w	r8, #0
 800e07c:	f104 091a 	add.w	r9, r4, #26
 800e080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e082:	3b01      	subs	r3, #1
 800e084:	4543      	cmp	r3, r8
 800e086:	dc09      	bgt.n	800e09c <_printf_float+0x264>
 800e088:	6823      	ldr	r3, [r4, #0]
 800e08a:	079b      	lsls	r3, r3, #30
 800e08c:	f100 8105 	bmi.w	800e29a <_printf_float+0x462>
 800e090:	68e0      	ldr	r0, [r4, #12]
 800e092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e094:	4298      	cmp	r0, r3
 800e096:	bfb8      	it	lt
 800e098:	4618      	movlt	r0, r3
 800e09a:	e730      	b.n	800defe <_printf_float+0xc6>
 800e09c:	2301      	movs	r3, #1
 800e09e:	464a      	mov	r2, r9
 800e0a0:	4631      	mov	r1, r6
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	47b8      	blx	r7
 800e0a6:	3001      	adds	r0, #1
 800e0a8:	f43f af27 	beq.w	800defa <_printf_float+0xc2>
 800e0ac:	f108 0801 	add.w	r8, r8, #1
 800e0b0:	e7e6      	b.n	800e080 <_printf_float+0x248>
 800e0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	dc39      	bgt.n	800e12c <_printf_float+0x2f4>
 800e0b8:	4a1b      	ldr	r2, [pc, #108]	; (800e128 <_printf_float+0x2f0>)
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	4631      	mov	r1, r6
 800e0be:	4628      	mov	r0, r5
 800e0c0:	47b8      	blx	r7
 800e0c2:	3001      	adds	r0, #1
 800e0c4:	f43f af19 	beq.w	800defa <_printf_float+0xc2>
 800e0c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	d102      	bne.n	800e0d6 <_printf_float+0x29e>
 800e0d0:	6823      	ldr	r3, [r4, #0]
 800e0d2:	07d9      	lsls	r1, r3, #31
 800e0d4:	d5d8      	bpl.n	800e088 <_printf_float+0x250>
 800e0d6:	ee18 3a10 	vmov	r3, s16
 800e0da:	4652      	mov	r2, sl
 800e0dc:	4631      	mov	r1, r6
 800e0de:	4628      	mov	r0, r5
 800e0e0:	47b8      	blx	r7
 800e0e2:	3001      	adds	r0, #1
 800e0e4:	f43f af09 	beq.w	800defa <_printf_float+0xc2>
 800e0e8:	f04f 0900 	mov.w	r9, #0
 800e0ec:	f104 0a1a 	add.w	sl, r4, #26
 800e0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0f2:	425b      	negs	r3, r3
 800e0f4:	454b      	cmp	r3, r9
 800e0f6:	dc01      	bgt.n	800e0fc <_printf_float+0x2c4>
 800e0f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0fa:	e792      	b.n	800e022 <_printf_float+0x1ea>
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	4652      	mov	r2, sl
 800e100:	4631      	mov	r1, r6
 800e102:	4628      	mov	r0, r5
 800e104:	47b8      	blx	r7
 800e106:	3001      	adds	r0, #1
 800e108:	f43f aef7 	beq.w	800defa <_printf_float+0xc2>
 800e10c:	f109 0901 	add.w	r9, r9, #1
 800e110:	e7ee      	b.n	800e0f0 <_printf_float+0x2b8>
 800e112:	bf00      	nop
 800e114:	7fefffff 	.word	0x7fefffff
 800e118:	0801221c 	.word	0x0801221c
 800e11c:	08012220 	.word	0x08012220
 800e120:	08012228 	.word	0x08012228
 800e124:	08012224 	.word	0x08012224
 800e128:	0801222c 	.word	0x0801222c
 800e12c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e12e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e130:	429a      	cmp	r2, r3
 800e132:	bfa8      	it	ge
 800e134:	461a      	movge	r2, r3
 800e136:	2a00      	cmp	r2, #0
 800e138:	4691      	mov	r9, r2
 800e13a:	dc37      	bgt.n	800e1ac <_printf_float+0x374>
 800e13c:	f04f 0b00 	mov.w	fp, #0
 800e140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e144:	f104 021a 	add.w	r2, r4, #26
 800e148:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e14a:	9305      	str	r3, [sp, #20]
 800e14c:	eba3 0309 	sub.w	r3, r3, r9
 800e150:	455b      	cmp	r3, fp
 800e152:	dc33      	bgt.n	800e1bc <_printf_float+0x384>
 800e154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e158:	429a      	cmp	r2, r3
 800e15a:	db3b      	blt.n	800e1d4 <_printf_float+0x39c>
 800e15c:	6823      	ldr	r3, [r4, #0]
 800e15e:	07da      	lsls	r2, r3, #31
 800e160:	d438      	bmi.n	800e1d4 <_printf_float+0x39c>
 800e162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e164:	9a05      	ldr	r2, [sp, #20]
 800e166:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e168:	1a9a      	subs	r2, r3, r2
 800e16a:	eba3 0901 	sub.w	r9, r3, r1
 800e16e:	4591      	cmp	r9, r2
 800e170:	bfa8      	it	ge
 800e172:	4691      	movge	r9, r2
 800e174:	f1b9 0f00 	cmp.w	r9, #0
 800e178:	dc35      	bgt.n	800e1e6 <_printf_float+0x3ae>
 800e17a:	f04f 0800 	mov.w	r8, #0
 800e17e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e182:	f104 0a1a 	add.w	sl, r4, #26
 800e186:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e18a:	1a9b      	subs	r3, r3, r2
 800e18c:	eba3 0309 	sub.w	r3, r3, r9
 800e190:	4543      	cmp	r3, r8
 800e192:	f77f af79 	ble.w	800e088 <_printf_float+0x250>
 800e196:	2301      	movs	r3, #1
 800e198:	4652      	mov	r2, sl
 800e19a:	4631      	mov	r1, r6
 800e19c:	4628      	mov	r0, r5
 800e19e:	47b8      	blx	r7
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	f43f aeaa 	beq.w	800defa <_printf_float+0xc2>
 800e1a6:	f108 0801 	add.w	r8, r8, #1
 800e1aa:	e7ec      	b.n	800e186 <_printf_float+0x34e>
 800e1ac:	4613      	mov	r3, r2
 800e1ae:	4631      	mov	r1, r6
 800e1b0:	4642      	mov	r2, r8
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	47b8      	blx	r7
 800e1b6:	3001      	adds	r0, #1
 800e1b8:	d1c0      	bne.n	800e13c <_printf_float+0x304>
 800e1ba:	e69e      	b.n	800defa <_printf_float+0xc2>
 800e1bc:	2301      	movs	r3, #1
 800e1be:	4631      	mov	r1, r6
 800e1c0:	4628      	mov	r0, r5
 800e1c2:	9205      	str	r2, [sp, #20]
 800e1c4:	47b8      	blx	r7
 800e1c6:	3001      	adds	r0, #1
 800e1c8:	f43f ae97 	beq.w	800defa <_printf_float+0xc2>
 800e1cc:	9a05      	ldr	r2, [sp, #20]
 800e1ce:	f10b 0b01 	add.w	fp, fp, #1
 800e1d2:	e7b9      	b.n	800e148 <_printf_float+0x310>
 800e1d4:	ee18 3a10 	vmov	r3, s16
 800e1d8:	4652      	mov	r2, sl
 800e1da:	4631      	mov	r1, r6
 800e1dc:	4628      	mov	r0, r5
 800e1de:	47b8      	blx	r7
 800e1e0:	3001      	adds	r0, #1
 800e1e2:	d1be      	bne.n	800e162 <_printf_float+0x32a>
 800e1e4:	e689      	b.n	800defa <_printf_float+0xc2>
 800e1e6:	9a05      	ldr	r2, [sp, #20]
 800e1e8:	464b      	mov	r3, r9
 800e1ea:	4442      	add	r2, r8
 800e1ec:	4631      	mov	r1, r6
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	47b8      	blx	r7
 800e1f2:	3001      	adds	r0, #1
 800e1f4:	d1c1      	bne.n	800e17a <_printf_float+0x342>
 800e1f6:	e680      	b.n	800defa <_printf_float+0xc2>
 800e1f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1fa:	2a01      	cmp	r2, #1
 800e1fc:	dc01      	bgt.n	800e202 <_printf_float+0x3ca>
 800e1fe:	07db      	lsls	r3, r3, #31
 800e200:	d538      	bpl.n	800e274 <_printf_float+0x43c>
 800e202:	2301      	movs	r3, #1
 800e204:	4642      	mov	r2, r8
 800e206:	4631      	mov	r1, r6
 800e208:	4628      	mov	r0, r5
 800e20a:	47b8      	blx	r7
 800e20c:	3001      	adds	r0, #1
 800e20e:	f43f ae74 	beq.w	800defa <_printf_float+0xc2>
 800e212:	ee18 3a10 	vmov	r3, s16
 800e216:	4652      	mov	r2, sl
 800e218:	4631      	mov	r1, r6
 800e21a:	4628      	mov	r0, r5
 800e21c:	47b8      	blx	r7
 800e21e:	3001      	adds	r0, #1
 800e220:	f43f ae6b 	beq.w	800defa <_printf_float+0xc2>
 800e224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e228:	2200      	movs	r2, #0
 800e22a:	2300      	movs	r3, #0
 800e22c:	f7f2 fc4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e230:	b9d8      	cbnz	r0, 800e26a <_printf_float+0x432>
 800e232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e234:	f108 0201 	add.w	r2, r8, #1
 800e238:	3b01      	subs	r3, #1
 800e23a:	4631      	mov	r1, r6
 800e23c:	4628      	mov	r0, r5
 800e23e:	47b8      	blx	r7
 800e240:	3001      	adds	r0, #1
 800e242:	d10e      	bne.n	800e262 <_printf_float+0x42a>
 800e244:	e659      	b.n	800defa <_printf_float+0xc2>
 800e246:	2301      	movs	r3, #1
 800e248:	4652      	mov	r2, sl
 800e24a:	4631      	mov	r1, r6
 800e24c:	4628      	mov	r0, r5
 800e24e:	47b8      	blx	r7
 800e250:	3001      	adds	r0, #1
 800e252:	f43f ae52 	beq.w	800defa <_printf_float+0xc2>
 800e256:	f108 0801 	add.w	r8, r8, #1
 800e25a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e25c:	3b01      	subs	r3, #1
 800e25e:	4543      	cmp	r3, r8
 800e260:	dcf1      	bgt.n	800e246 <_printf_float+0x40e>
 800e262:	464b      	mov	r3, r9
 800e264:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e268:	e6dc      	b.n	800e024 <_printf_float+0x1ec>
 800e26a:	f04f 0800 	mov.w	r8, #0
 800e26e:	f104 0a1a 	add.w	sl, r4, #26
 800e272:	e7f2      	b.n	800e25a <_printf_float+0x422>
 800e274:	2301      	movs	r3, #1
 800e276:	4642      	mov	r2, r8
 800e278:	e7df      	b.n	800e23a <_printf_float+0x402>
 800e27a:	2301      	movs	r3, #1
 800e27c:	464a      	mov	r2, r9
 800e27e:	4631      	mov	r1, r6
 800e280:	4628      	mov	r0, r5
 800e282:	47b8      	blx	r7
 800e284:	3001      	adds	r0, #1
 800e286:	f43f ae38 	beq.w	800defa <_printf_float+0xc2>
 800e28a:	f108 0801 	add.w	r8, r8, #1
 800e28e:	68e3      	ldr	r3, [r4, #12]
 800e290:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e292:	1a5b      	subs	r3, r3, r1
 800e294:	4543      	cmp	r3, r8
 800e296:	dcf0      	bgt.n	800e27a <_printf_float+0x442>
 800e298:	e6fa      	b.n	800e090 <_printf_float+0x258>
 800e29a:	f04f 0800 	mov.w	r8, #0
 800e29e:	f104 0919 	add.w	r9, r4, #25
 800e2a2:	e7f4      	b.n	800e28e <_printf_float+0x456>

0800e2a4 <_printf_common>:
 800e2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2a8:	4616      	mov	r6, r2
 800e2aa:	4699      	mov	r9, r3
 800e2ac:	688a      	ldr	r2, [r1, #8]
 800e2ae:	690b      	ldr	r3, [r1, #16]
 800e2b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	bfb8      	it	lt
 800e2b8:	4613      	movlt	r3, r2
 800e2ba:	6033      	str	r3, [r6, #0]
 800e2bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e2c0:	4607      	mov	r7, r0
 800e2c2:	460c      	mov	r4, r1
 800e2c4:	b10a      	cbz	r2, 800e2ca <_printf_common+0x26>
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	6033      	str	r3, [r6, #0]
 800e2ca:	6823      	ldr	r3, [r4, #0]
 800e2cc:	0699      	lsls	r1, r3, #26
 800e2ce:	bf42      	ittt	mi
 800e2d0:	6833      	ldrmi	r3, [r6, #0]
 800e2d2:	3302      	addmi	r3, #2
 800e2d4:	6033      	strmi	r3, [r6, #0]
 800e2d6:	6825      	ldr	r5, [r4, #0]
 800e2d8:	f015 0506 	ands.w	r5, r5, #6
 800e2dc:	d106      	bne.n	800e2ec <_printf_common+0x48>
 800e2de:	f104 0a19 	add.w	sl, r4, #25
 800e2e2:	68e3      	ldr	r3, [r4, #12]
 800e2e4:	6832      	ldr	r2, [r6, #0]
 800e2e6:	1a9b      	subs	r3, r3, r2
 800e2e8:	42ab      	cmp	r3, r5
 800e2ea:	dc26      	bgt.n	800e33a <_printf_common+0x96>
 800e2ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e2f0:	1e13      	subs	r3, r2, #0
 800e2f2:	6822      	ldr	r2, [r4, #0]
 800e2f4:	bf18      	it	ne
 800e2f6:	2301      	movne	r3, #1
 800e2f8:	0692      	lsls	r2, r2, #26
 800e2fa:	d42b      	bmi.n	800e354 <_printf_common+0xb0>
 800e2fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e300:	4649      	mov	r1, r9
 800e302:	4638      	mov	r0, r7
 800e304:	47c0      	blx	r8
 800e306:	3001      	adds	r0, #1
 800e308:	d01e      	beq.n	800e348 <_printf_common+0xa4>
 800e30a:	6823      	ldr	r3, [r4, #0]
 800e30c:	68e5      	ldr	r5, [r4, #12]
 800e30e:	6832      	ldr	r2, [r6, #0]
 800e310:	f003 0306 	and.w	r3, r3, #6
 800e314:	2b04      	cmp	r3, #4
 800e316:	bf08      	it	eq
 800e318:	1aad      	subeq	r5, r5, r2
 800e31a:	68a3      	ldr	r3, [r4, #8]
 800e31c:	6922      	ldr	r2, [r4, #16]
 800e31e:	bf0c      	ite	eq
 800e320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e324:	2500      	movne	r5, #0
 800e326:	4293      	cmp	r3, r2
 800e328:	bfc4      	itt	gt
 800e32a:	1a9b      	subgt	r3, r3, r2
 800e32c:	18ed      	addgt	r5, r5, r3
 800e32e:	2600      	movs	r6, #0
 800e330:	341a      	adds	r4, #26
 800e332:	42b5      	cmp	r5, r6
 800e334:	d11a      	bne.n	800e36c <_printf_common+0xc8>
 800e336:	2000      	movs	r0, #0
 800e338:	e008      	b.n	800e34c <_printf_common+0xa8>
 800e33a:	2301      	movs	r3, #1
 800e33c:	4652      	mov	r2, sl
 800e33e:	4649      	mov	r1, r9
 800e340:	4638      	mov	r0, r7
 800e342:	47c0      	blx	r8
 800e344:	3001      	adds	r0, #1
 800e346:	d103      	bne.n	800e350 <_printf_common+0xac>
 800e348:	f04f 30ff 	mov.w	r0, #4294967295
 800e34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e350:	3501      	adds	r5, #1
 800e352:	e7c6      	b.n	800e2e2 <_printf_common+0x3e>
 800e354:	18e1      	adds	r1, r4, r3
 800e356:	1c5a      	adds	r2, r3, #1
 800e358:	2030      	movs	r0, #48	; 0x30
 800e35a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e35e:	4422      	add	r2, r4
 800e360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e368:	3302      	adds	r3, #2
 800e36a:	e7c7      	b.n	800e2fc <_printf_common+0x58>
 800e36c:	2301      	movs	r3, #1
 800e36e:	4622      	mov	r2, r4
 800e370:	4649      	mov	r1, r9
 800e372:	4638      	mov	r0, r7
 800e374:	47c0      	blx	r8
 800e376:	3001      	adds	r0, #1
 800e378:	d0e6      	beq.n	800e348 <_printf_common+0xa4>
 800e37a:	3601      	adds	r6, #1
 800e37c:	e7d9      	b.n	800e332 <_printf_common+0x8e>
	...

0800e380 <_printf_i>:
 800e380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e384:	7e0f      	ldrb	r7, [r1, #24]
 800e386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e388:	2f78      	cmp	r7, #120	; 0x78
 800e38a:	4691      	mov	r9, r2
 800e38c:	4680      	mov	r8, r0
 800e38e:	460c      	mov	r4, r1
 800e390:	469a      	mov	sl, r3
 800e392:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e396:	d807      	bhi.n	800e3a8 <_printf_i+0x28>
 800e398:	2f62      	cmp	r7, #98	; 0x62
 800e39a:	d80a      	bhi.n	800e3b2 <_printf_i+0x32>
 800e39c:	2f00      	cmp	r7, #0
 800e39e:	f000 80d8 	beq.w	800e552 <_printf_i+0x1d2>
 800e3a2:	2f58      	cmp	r7, #88	; 0x58
 800e3a4:	f000 80a3 	beq.w	800e4ee <_printf_i+0x16e>
 800e3a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e3b0:	e03a      	b.n	800e428 <_printf_i+0xa8>
 800e3b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e3b6:	2b15      	cmp	r3, #21
 800e3b8:	d8f6      	bhi.n	800e3a8 <_printf_i+0x28>
 800e3ba:	a101      	add	r1, pc, #4	; (adr r1, 800e3c0 <_printf_i+0x40>)
 800e3bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3c0:	0800e419 	.word	0x0800e419
 800e3c4:	0800e42d 	.word	0x0800e42d
 800e3c8:	0800e3a9 	.word	0x0800e3a9
 800e3cc:	0800e3a9 	.word	0x0800e3a9
 800e3d0:	0800e3a9 	.word	0x0800e3a9
 800e3d4:	0800e3a9 	.word	0x0800e3a9
 800e3d8:	0800e42d 	.word	0x0800e42d
 800e3dc:	0800e3a9 	.word	0x0800e3a9
 800e3e0:	0800e3a9 	.word	0x0800e3a9
 800e3e4:	0800e3a9 	.word	0x0800e3a9
 800e3e8:	0800e3a9 	.word	0x0800e3a9
 800e3ec:	0800e539 	.word	0x0800e539
 800e3f0:	0800e45d 	.word	0x0800e45d
 800e3f4:	0800e51b 	.word	0x0800e51b
 800e3f8:	0800e3a9 	.word	0x0800e3a9
 800e3fc:	0800e3a9 	.word	0x0800e3a9
 800e400:	0800e55b 	.word	0x0800e55b
 800e404:	0800e3a9 	.word	0x0800e3a9
 800e408:	0800e45d 	.word	0x0800e45d
 800e40c:	0800e3a9 	.word	0x0800e3a9
 800e410:	0800e3a9 	.word	0x0800e3a9
 800e414:	0800e523 	.word	0x0800e523
 800e418:	682b      	ldr	r3, [r5, #0]
 800e41a:	1d1a      	adds	r2, r3, #4
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	602a      	str	r2, [r5, #0]
 800e420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e428:	2301      	movs	r3, #1
 800e42a:	e0a3      	b.n	800e574 <_printf_i+0x1f4>
 800e42c:	6820      	ldr	r0, [r4, #0]
 800e42e:	6829      	ldr	r1, [r5, #0]
 800e430:	0606      	lsls	r6, r0, #24
 800e432:	f101 0304 	add.w	r3, r1, #4
 800e436:	d50a      	bpl.n	800e44e <_printf_i+0xce>
 800e438:	680e      	ldr	r6, [r1, #0]
 800e43a:	602b      	str	r3, [r5, #0]
 800e43c:	2e00      	cmp	r6, #0
 800e43e:	da03      	bge.n	800e448 <_printf_i+0xc8>
 800e440:	232d      	movs	r3, #45	; 0x2d
 800e442:	4276      	negs	r6, r6
 800e444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e448:	485e      	ldr	r0, [pc, #376]	; (800e5c4 <_printf_i+0x244>)
 800e44a:	230a      	movs	r3, #10
 800e44c:	e019      	b.n	800e482 <_printf_i+0x102>
 800e44e:	680e      	ldr	r6, [r1, #0]
 800e450:	602b      	str	r3, [r5, #0]
 800e452:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e456:	bf18      	it	ne
 800e458:	b236      	sxthne	r6, r6
 800e45a:	e7ef      	b.n	800e43c <_printf_i+0xbc>
 800e45c:	682b      	ldr	r3, [r5, #0]
 800e45e:	6820      	ldr	r0, [r4, #0]
 800e460:	1d19      	adds	r1, r3, #4
 800e462:	6029      	str	r1, [r5, #0]
 800e464:	0601      	lsls	r1, r0, #24
 800e466:	d501      	bpl.n	800e46c <_printf_i+0xec>
 800e468:	681e      	ldr	r6, [r3, #0]
 800e46a:	e002      	b.n	800e472 <_printf_i+0xf2>
 800e46c:	0646      	lsls	r6, r0, #25
 800e46e:	d5fb      	bpl.n	800e468 <_printf_i+0xe8>
 800e470:	881e      	ldrh	r6, [r3, #0]
 800e472:	4854      	ldr	r0, [pc, #336]	; (800e5c4 <_printf_i+0x244>)
 800e474:	2f6f      	cmp	r7, #111	; 0x6f
 800e476:	bf0c      	ite	eq
 800e478:	2308      	moveq	r3, #8
 800e47a:	230a      	movne	r3, #10
 800e47c:	2100      	movs	r1, #0
 800e47e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e482:	6865      	ldr	r5, [r4, #4]
 800e484:	60a5      	str	r5, [r4, #8]
 800e486:	2d00      	cmp	r5, #0
 800e488:	bfa2      	ittt	ge
 800e48a:	6821      	ldrge	r1, [r4, #0]
 800e48c:	f021 0104 	bicge.w	r1, r1, #4
 800e490:	6021      	strge	r1, [r4, #0]
 800e492:	b90e      	cbnz	r6, 800e498 <_printf_i+0x118>
 800e494:	2d00      	cmp	r5, #0
 800e496:	d04d      	beq.n	800e534 <_printf_i+0x1b4>
 800e498:	4615      	mov	r5, r2
 800e49a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e49e:	fb03 6711 	mls	r7, r3, r1, r6
 800e4a2:	5dc7      	ldrb	r7, [r0, r7]
 800e4a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e4a8:	4637      	mov	r7, r6
 800e4aa:	42bb      	cmp	r3, r7
 800e4ac:	460e      	mov	r6, r1
 800e4ae:	d9f4      	bls.n	800e49a <_printf_i+0x11a>
 800e4b0:	2b08      	cmp	r3, #8
 800e4b2:	d10b      	bne.n	800e4cc <_printf_i+0x14c>
 800e4b4:	6823      	ldr	r3, [r4, #0]
 800e4b6:	07de      	lsls	r6, r3, #31
 800e4b8:	d508      	bpl.n	800e4cc <_printf_i+0x14c>
 800e4ba:	6923      	ldr	r3, [r4, #16]
 800e4bc:	6861      	ldr	r1, [r4, #4]
 800e4be:	4299      	cmp	r1, r3
 800e4c0:	bfde      	ittt	le
 800e4c2:	2330      	movle	r3, #48	; 0x30
 800e4c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e4c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e4cc:	1b52      	subs	r2, r2, r5
 800e4ce:	6122      	str	r2, [r4, #16]
 800e4d0:	f8cd a000 	str.w	sl, [sp]
 800e4d4:	464b      	mov	r3, r9
 800e4d6:	aa03      	add	r2, sp, #12
 800e4d8:	4621      	mov	r1, r4
 800e4da:	4640      	mov	r0, r8
 800e4dc:	f7ff fee2 	bl	800e2a4 <_printf_common>
 800e4e0:	3001      	adds	r0, #1
 800e4e2:	d14c      	bne.n	800e57e <_printf_i+0x1fe>
 800e4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e8:	b004      	add	sp, #16
 800e4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4ee:	4835      	ldr	r0, [pc, #212]	; (800e5c4 <_printf_i+0x244>)
 800e4f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e4f4:	6829      	ldr	r1, [r5, #0]
 800e4f6:	6823      	ldr	r3, [r4, #0]
 800e4f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800e4fc:	6029      	str	r1, [r5, #0]
 800e4fe:	061d      	lsls	r5, r3, #24
 800e500:	d514      	bpl.n	800e52c <_printf_i+0x1ac>
 800e502:	07df      	lsls	r7, r3, #31
 800e504:	bf44      	itt	mi
 800e506:	f043 0320 	orrmi.w	r3, r3, #32
 800e50a:	6023      	strmi	r3, [r4, #0]
 800e50c:	b91e      	cbnz	r6, 800e516 <_printf_i+0x196>
 800e50e:	6823      	ldr	r3, [r4, #0]
 800e510:	f023 0320 	bic.w	r3, r3, #32
 800e514:	6023      	str	r3, [r4, #0]
 800e516:	2310      	movs	r3, #16
 800e518:	e7b0      	b.n	800e47c <_printf_i+0xfc>
 800e51a:	6823      	ldr	r3, [r4, #0]
 800e51c:	f043 0320 	orr.w	r3, r3, #32
 800e520:	6023      	str	r3, [r4, #0]
 800e522:	2378      	movs	r3, #120	; 0x78
 800e524:	4828      	ldr	r0, [pc, #160]	; (800e5c8 <_printf_i+0x248>)
 800e526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e52a:	e7e3      	b.n	800e4f4 <_printf_i+0x174>
 800e52c:	0659      	lsls	r1, r3, #25
 800e52e:	bf48      	it	mi
 800e530:	b2b6      	uxthmi	r6, r6
 800e532:	e7e6      	b.n	800e502 <_printf_i+0x182>
 800e534:	4615      	mov	r5, r2
 800e536:	e7bb      	b.n	800e4b0 <_printf_i+0x130>
 800e538:	682b      	ldr	r3, [r5, #0]
 800e53a:	6826      	ldr	r6, [r4, #0]
 800e53c:	6961      	ldr	r1, [r4, #20]
 800e53e:	1d18      	adds	r0, r3, #4
 800e540:	6028      	str	r0, [r5, #0]
 800e542:	0635      	lsls	r5, r6, #24
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	d501      	bpl.n	800e54c <_printf_i+0x1cc>
 800e548:	6019      	str	r1, [r3, #0]
 800e54a:	e002      	b.n	800e552 <_printf_i+0x1d2>
 800e54c:	0670      	lsls	r0, r6, #25
 800e54e:	d5fb      	bpl.n	800e548 <_printf_i+0x1c8>
 800e550:	8019      	strh	r1, [r3, #0]
 800e552:	2300      	movs	r3, #0
 800e554:	6123      	str	r3, [r4, #16]
 800e556:	4615      	mov	r5, r2
 800e558:	e7ba      	b.n	800e4d0 <_printf_i+0x150>
 800e55a:	682b      	ldr	r3, [r5, #0]
 800e55c:	1d1a      	adds	r2, r3, #4
 800e55e:	602a      	str	r2, [r5, #0]
 800e560:	681d      	ldr	r5, [r3, #0]
 800e562:	6862      	ldr	r2, [r4, #4]
 800e564:	2100      	movs	r1, #0
 800e566:	4628      	mov	r0, r5
 800e568:	f7f1 fe3a 	bl	80001e0 <memchr>
 800e56c:	b108      	cbz	r0, 800e572 <_printf_i+0x1f2>
 800e56e:	1b40      	subs	r0, r0, r5
 800e570:	6060      	str	r0, [r4, #4]
 800e572:	6863      	ldr	r3, [r4, #4]
 800e574:	6123      	str	r3, [r4, #16]
 800e576:	2300      	movs	r3, #0
 800e578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e57c:	e7a8      	b.n	800e4d0 <_printf_i+0x150>
 800e57e:	6923      	ldr	r3, [r4, #16]
 800e580:	462a      	mov	r2, r5
 800e582:	4649      	mov	r1, r9
 800e584:	4640      	mov	r0, r8
 800e586:	47d0      	blx	sl
 800e588:	3001      	adds	r0, #1
 800e58a:	d0ab      	beq.n	800e4e4 <_printf_i+0x164>
 800e58c:	6823      	ldr	r3, [r4, #0]
 800e58e:	079b      	lsls	r3, r3, #30
 800e590:	d413      	bmi.n	800e5ba <_printf_i+0x23a>
 800e592:	68e0      	ldr	r0, [r4, #12]
 800e594:	9b03      	ldr	r3, [sp, #12]
 800e596:	4298      	cmp	r0, r3
 800e598:	bfb8      	it	lt
 800e59a:	4618      	movlt	r0, r3
 800e59c:	e7a4      	b.n	800e4e8 <_printf_i+0x168>
 800e59e:	2301      	movs	r3, #1
 800e5a0:	4632      	mov	r2, r6
 800e5a2:	4649      	mov	r1, r9
 800e5a4:	4640      	mov	r0, r8
 800e5a6:	47d0      	blx	sl
 800e5a8:	3001      	adds	r0, #1
 800e5aa:	d09b      	beq.n	800e4e4 <_printf_i+0x164>
 800e5ac:	3501      	adds	r5, #1
 800e5ae:	68e3      	ldr	r3, [r4, #12]
 800e5b0:	9903      	ldr	r1, [sp, #12]
 800e5b2:	1a5b      	subs	r3, r3, r1
 800e5b4:	42ab      	cmp	r3, r5
 800e5b6:	dcf2      	bgt.n	800e59e <_printf_i+0x21e>
 800e5b8:	e7eb      	b.n	800e592 <_printf_i+0x212>
 800e5ba:	2500      	movs	r5, #0
 800e5bc:	f104 0619 	add.w	r6, r4, #25
 800e5c0:	e7f5      	b.n	800e5ae <_printf_i+0x22e>
 800e5c2:	bf00      	nop
 800e5c4:	0801222e 	.word	0x0801222e
 800e5c8:	0801223f 	.word	0x0801223f

0800e5cc <iprintf>:
 800e5cc:	b40f      	push	{r0, r1, r2, r3}
 800e5ce:	4b0a      	ldr	r3, [pc, #40]	; (800e5f8 <iprintf+0x2c>)
 800e5d0:	b513      	push	{r0, r1, r4, lr}
 800e5d2:	681c      	ldr	r4, [r3, #0]
 800e5d4:	b124      	cbz	r4, 800e5e0 <iprintf+0x14>
 800e5d6:	69a3      	ldr	r3, [r4, #24]
 800e5d8:	b913      	cbnz	r3, 800e5e0 <iprintf+0x14>
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f7ff fa1c 	bl	800da18 <__sinit>
 800e5e0:	ab05      	add	r3, sp, #20
 800e5e2:	9a04      	ldr	r2, [sp, #16]
 800e5e4:	68a1      	ldr	r1, [r4, #8]
 800e5e6:	9301      	str	r3, [sp, #4]
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	f001 fdf9 	bl	80101e0 <_vfiprintf_r>
 800e5ee:	b002      	add	sp, #8
 800e5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5f4:	b004      	add	sp, #16
 800e5f6:	4770      	bx	lr
 800e5f8:	200000a0 	.word	0x200000a0

0800e5fc <_puts_r>:
 800e5fc:	b570      	push	{r4, r5, r6, lr}
 800e5fe:	460e      	mov	r6, r1
 800e600:	4605      	mov	r5, r0
 800e602:	b118      	cbz	r0, 800e60c <_puts_r+0x10>
 800e604:	6983      	ldr	r3, [r0, #24]
 800e606:	b90b      	cbnz	r3, 800e60c <_puts_r+0x10>
 800e608:	f7ff fa06 	bl	800da18 <__sinit>
 800e60c:	69ab      	ldr	r3, [r5, #24]
 800e60e:	68ac      	ldr	r4, [r5, #8]
 800e610:	b913      	cbnz	r3, 800e618 <_puts_r+0x1c>
 800e612:	4628      	mov	r0, r5
 800e614:	f7ff fa00 	bl	800da18 <__sinit>
 800e618:	4b2c      	ldr	r3, [pc, #176]	; (800e6cc <_puts_r+0xd0>)
 800e61a:	429c      	cmp	r4, r3
 800e61c:	d120      	bne.n	800e660 <_puts_r+0x64>
 800e61e:	686c      	ldr	r4, [r5, #4]
 800e620:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e622:	07db      	lsls	r3, r3, #31
 800e624:	d405      	bmi.n	800e632 <_puts_r+0x36>
 800e626:	89a3      	ldrh	r3, [r4, #12]
 800e628:	0598      	lsls	r0, r3, #22
 800e62a:	d402      	bmi.n	800e632 <_puts_r+0x36>
 800e62c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e62e:	f7ff fab6 	bl	800db9e <__retarget_lock_acquire_recursive>
 800e632:	89a3      	ldrh	r3, [r4, #12]
 800e634:	0719      	lsls	r1, r3, #28
 800e636:	d51d      	bpl.n	800e674 <_puts_r+0x78>
 800e638:	6923      	ldr	r3, [r4, #16]
 800e63a:	b1db      	cbz	r3, 800e674 <_puts_r+0x78>
 800e63c:	3e01      	subs	r6, #1
 800e63e:	68a3      	ldr	r3, [r4, #8]
 800e640:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e644:	3b01      	subs	r3, #1
 800e646:	60a3      	str	r3, [r4, #8]
 800e648:	bb39      	cbnz	r1, 800e69a <_puts_r+0x9e>
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	da38      	bge.n	800e6c0 <_puts_r+0xc4>
 800e64e:	4622      	mov	r2, r4
 800e650:	210a      	movs	r1, #10
 800e652:	4628      	mov	r0, r5
 800e654:	f000 f906 	bl	800e864 <__swbuf_r>
 800e658:	3001      	adds	r0, #1
 800e65a:	d011      	beq.n	800e680 <_puts_r+0x84>
 800e65c:	250a      	movs	r5, #10
 800e65e:	e011      	b.n	800e684 <_puts_r+0x88>
 800e660:	4b1b      	ldr	r3, [pc, #108]	; (800e6d0 <_puts_r+0xd4>)
 800e662:	429c      	cmp	r4, r3
 800e664:	d101      	bne.n	800e66a <_puts_r+0x6e>
 800e666:	68ac      	ldr	r4, [r5, #8]
 800e668:	e7da      	b.n	800e620 <_puts_r+0x24>
 800e66a:	4b1a      	ldr	r3, [pc, #104]	; (800e6d4 <_puts_r+0xd8>)
 800e66c:	429c      	cmp	r4, r3
 800e66e:	bf08      	it	eq
 800e670:	68ec      	ldreq	r4, [r5, #12]
 800e672:	e7d5      	b.n	800e620 <_puts_r+0x24>
 800e674:	4621      	mov	r1, r4
 800e676:	4628      	mov	r0, r5
 800e678:	f000 f958 	bl	800e92c <__swsetup_r>
 800e67c:	2800      	cmp	r0, #0
 800e67e:	d0dd      	beq.n	800e63c <_puts_r+0x40>
 800e680:	f04f 35ff 	mov.w	r5, #4294967295
 800e684:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e686:	07da      	lsls	r2, r3, #31
 800e688:	d405      	bmi.n	800e696 <_puts_r+0x9a>
 800e68a:	89a3      	ldrh	r3, [r4, #12]
 800e68c:	059b      	lsls	r3, r3, #22
 800e68e:	d402      	bmi.n	800e696 <_puts_r+0x9a>
 800e690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e692:	f7ff fa85 	bl	800dba0 <__retarget_lock_release_recursive>
 800e696:	4628      	mov	r0, r5
 800e698:	bd70      	pop	{r4, r5, r6, pc}
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	da04      	bge.n	800e6a8 <_puts_r+0xac>
 800e69e:	69a2      	ldr	r2, [r4, #24]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	dc06      	bgt.n	800e6b2 <_puts_r+0xb6>
 800e6a4:	290a      	cmp	r1, #10
 800e6a6:	d004      	beq.n	800e6b2 <_puts_r+0xb6>
 800e6a8:	6823      	ldr	r3, [r4, #0]
 800e6aa:	1c5a      	adds	r2, r3, #1
 800e6ac:	6022      	str	r2, [r4, #0]
 800e6ae:	7019      	strb	r1, [r3, #0]
 800e6b0:	e7c5      	b.n	800e63e <_puts_r+0x42>
 800e6b2:	4622      	mov	r2, r4
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	f000 f8d5 	bl	800e864 <__swbuf_r>
 800e6ba:	3001      	adds	r0, #1
 800e6bc:	d1bf      	bne.n	800e63e <_puts_r+0x42>
 800e6be:	e7df      	b.n	800e680 <_puts_r+0x84>
 800e6c0:	6823      	ldr	r3, [r4, #0]
 800e6c2:	250a      	movs	r5, #10
 800e6c4:	1c5a      	adds	r2, r3, #1
 800e6c6:	6022      	str	r2, [r4, #0]
 800e6c8:	701d      	strb	r5, [r3, #0]
 800e6ca:	e7db      	b.n	800e684 <_puts_r+0x88>
 800e6cc:	080121d8 	.word	0x080121d8
 800e6d0:	080121f8 	.word	0x080121f8
 800e6d4:	080121b8 	.word	0x080121b8

0800e6d8 <puts>:
 800e6d8:	4b02      	ldr	r3, [pc, #8]	; (800e6e4 <puts+0xc>)
 800e6da:	4601      	mov	r1, r0
 800e6dc:	6818      	ldr	r0, [r3, #0]
 800e6de:	f7ff bf8d 	b.w	800e5fc <_puts_r>
 800e6e2:	bf00      	nop
 800e6e4:	200000a0 	.word	0x200000a0

0800e6e8 <cleanup_glue>:
 800e6e8:	b538      	push	{r3, r4, r5, lr}
 800e6ea:	460c      	mov	r4, r1
 800e6ec:	6809      	ldr	r1, [r1, #0]
 800e6ee:	4605      	mov	r5, r0
 800e6f0:	b109      	cbz	r1, 800e6f6 <cleanup_glue+0xe>
 800e6f2:	f7ff fff9 	bl	800e6e8 <cleanup_glue>
 800e6f6:	4621      	mov	r1, r4
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6fe:	f001 bcf9 	b.w	80100f4 <_free_r>
	...

0800e704 <_reclaim_reent>:
 800e704:	4b2c      	ldr	r3, [pc, #176]	; (800e7b8 <_reclaim_reent+0xb4>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4283      	cmp	r3, r0
 800e70a:	b570      	push	{r4, r5, r6, lr}
 800e70c:	4604      	mov	r4, r0
 800e70e:	d051      	beq.n	800e7b4 <_reclaim_reent+0xb0>
 800e710:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e712:	b143      	cbz	r3, 800e726 <_reclaim_reent+0x22>
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d14a      	bne.n	800e7b0 <_reclaim_reent+0xac>
 800e71a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e71c:	6819      	ldr	r1, [r3, #0]
 800e71e:	b111      	cbz	r1, 800e726 <_reclaim_reent+0x22>
 800e720:	4620      	mov	r0, r4
 800e722:	f001 fce7 	bl	80100f4 <_free_r>
 800e726:	6961      	ldr	r1, [r4, #20]
 800e728:	b111      	cbz	r1, 800e730 <_reclaim_reent+0x2c>
 800e72a:	4620      	mov	r0, r4
 800e72c:	f001 fce2 	bl	80100f4 <_free_r>
 800e730:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e732:	b111      	cbz	r1, 800e73a <_reclaim_reent+0x36>
 800e734:	4620      	mov	r0, r4
 800e736:	f001 fcdd 	bl	80100f4 <_free_r>
 800e73a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e73c:	b111      	cbz	r1, 800e744 <_reclaim_reent+0x40>
 800e73e:	4620      	mov	r0, r4
 800e740:	f001 fcd8 	bl	80100f4 <_free_r>
 800e744:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e746:	b111      	cbz	r1, 800e74e <_reclaim_reent+0x4a>
 800e748:	4620      	mov	r0, r4
 800e74a:	f001 fcd3 	bl	80100f4 <_free_r>
 800e74e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e750:	b111      	cbz	r1, 800e758 <_reclaim_reent+0x54>
 800e752:	4620      	mov	r0, r4
 800e754:	f001 fcce 	bl	80100f4 <_free_r>
 800e758:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e75a:	b111      	cbz	r1, 800e762 <_reclaim_reent+0x5e>
 800e75c:	4620      	mov	r0, r4
 800e75e:	f001 fcc9 	bl	80100f4 <_free_r>
 800e762:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e764:	b111      	cbz	r1, 800e76c <_reclaim_reent+0x68>
 800e766:	4620      	mov	r0, r4
 800e768:	f001 fcc4 	bl	80100f4 <_free_r>
 800e76c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e76e:	b111      	cbz	r1, 800e776 <_reclaim_reent+0x72>
 800e770:	4620      	mov	r0, r4
 800e772:	f001 fcbf 	bl	80100f4 <_free_r>
 800e776:	69a3      	ldr	r3, [r4, #24]
 800e778:	b1e3      	cbz	r3, 800e7b4 <_reclaim_reent+0xb0>
 800e77a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e77c:	4620      	mov	r0, r4
 800e77e:	4798      	blx	r3
 800e780:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e782:	b1b9      	cbz	r1, 800e7b4 <_reclaim_reent+0xb0>
 800e784:	4620      	mov	r0, r4
 800e786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e78a:	f7ff bfad 	b.w	800e6e8 <cleanup_glue>
 800e78e:	5949      	ldr	r1, [r1, r5]
 800e790:	b941      	cbnz	r1, 800e7a4 <_reclaim_reent+0xa0>
 800e792:	3504      	adds	r5, #4
 800e794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e796:	2d80      	cmp	r5, #128	; 0x80
 800e798:	68d9      	ldr	r1, [r3, #12]
 800e79a:	d1f8      	bne.n	800e78e <_reclaim_reent+0x8a>
 800e79c:	4620      	mov	r0, r4
 800e79e:	f001 fca9 	bl	80100f4 <_free_r>
 800e7a2:	e7ba      	b.n	800e71a <_reclaim_reent+0x16>
 800e7a4:	680e      	ldr	r6, [r1, #0]
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	f001 fca4 	bl	80100f4 <_free_r>
 800e7ac:	4631      	mov	r1, r6
 800e7ae:	e7ef      	b.n	800e790 <_reclaim_reent+0x8c>
 800e7b0:	2500      	movs	r5, #0
 800e7b2:	e7ef      	b.n	800e794 <_reclaim_reent+0x90>
 800e7b4:	bd70      	pop	{r4, r5, r6, pc}
 800e7b6:	bf00      	nop
 800e7b8:	200000a0 	.word	0x200000a0

0800e7bc <_sbrk_r>:
 800e7bc:	b538      	push	{r3, r4, r5, lr}
 800e7be:	4d06      	ldr	r5, [pc, #24]	; (800e7d8 <_sbrk_r+0x1c>)
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	4604      	mov	r4, r0
 800e7c4:	4608      	mov	r0, r1
 800e7c6:	602b      	str	r3, [r5, #0]
 800e7c8:	f7f5 f934 	bl	8003a34 <_sbrk>
 800e7cc:	1c43      	adds	r3, r0, #1
 800e7ce:	d102      	bne.n	800e7d6 <_sbrk_r+0x1a>
 800e7d0:	682b      	ldr	r3, [r5, #0]
 800e7d2:	b103      	cbz	r3, 800e7d6 <_sbrk_r+0x1a>
 800e7d4:	6023      	str	r3, [r4, #0]
 800e7d6:	bd38      	pop	{r3, r4, r5, pc}
 800e7d8:	20005aac 	.word	0x20005aac

0800e7dc <__sread>:
 800e7dc:	b510      	push	{r4, lr}
 800e7de:	460c      	mov	r4, r1
 800e7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7e4:	f001 fe2c 	bl	8010440 <_read_r>
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	bfab      	itete	ge
 800e7ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e7ee:	89a3      	ldrhlt	r3, [r4, #12]
 800e7f0:	181b      	addge	r3, r3, r0
 800e7f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e7f6:	bfac      	ite	ge
 800e7f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e7fa:	81a3      	strhlt	r3, [r4, #12]
 800e7fc:	bd10      	pop	{r4, pc}

0800e7fe <__swrite>:
 800e7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e802:	461f      	mov	r7, r3
 800e804:	898b      	ldrh	r3, [r1, #12]
 800e806:	05db      	lsls	r3, r3, #23
 800e808:	4605      	mov	r5, r0
 800e80a:	460c      	mov	r4, r1
 800e80c:	4616      	mov	r6, r2
 800e80e:	d505      	bpl.n	800e81c <__swrite+0x1e>
 800e810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e814:	2302      	movs	r3, #2
 800e816:	2200      	movs	r2, #0
 800e818:	f001 f846 	bl	800f8a8 <_lseek_r>
 800e81c:	89a3      	ldrh	r3, [r4, #12]
 800e81e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e826:	81a3      	strh	r3, [r4, #12]
 800e828:	4632      	mov	r2, r6
 800e82a:	463b      	mov	r3, r7
 800e82c:	4628      	mov	r0, r5
 800e82e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e832:	f000 b869 	b.w	800e908 <_write_r>

0800e836 <__sseek>:
 800e836:	b510      	push	{r4, lr}
 800e838:	460c      	mov	r4, r1
 800e83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e83e:	f001 f833 	bl	800f8a8 <_lseek_r>
 800e842:	1c43      	adds	r3, r0, #1
 800e844:	89a3      	ldrh	r3, [r4, #12]
 800e846:	bf15      	itete	ne
 800e848:	6560      	strne	r0, [r4, #84]	; 0x54
 800e84a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e84e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e852:	81a3      	strheq	r3, [r4, #12]
 800e854:	bf18      	it	ne
 800e856:	81a3      	strhne	r3, [r4, #12]
 800e858:	bd10      	pop	{r4, pc}

0800e85a <__sclose>:
 800e85a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e85e:	f000 b8d3 	b.w	800ea08 <_close_r>
	...

0800e864 <__swbuf_r>:
 800e864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e866:	460e      	mov	r6, r1
 800e868:	4614      	mov	r4, r2
 800e86a:	4605      	mov	r5, r0
 800e86c:	b118      	cbz	r0, 800e876 <__swbuf_r+0x12>
 800e86e:	6983      	ldr	r3, [r0, #24]
 800e870:	b90b      	cbnz	r3, 800e876 <__swbuf_r+0x12>
 800e872:	f7ff f8d1 	bl	800da18 <__sinit>
 800e876:	4b21      	ldr	r3, [pc, #132]	; (800e8fc <__swbuf_r+0x98>)
 800e878:	429c      	cmp	r4, r3
 800e87a:	d12b      	bne.n	800e8d4 <__swbuf_r+0x70>
 800e87c:	686c      	ldr	r4, [r5, #4]
 800e87e:	69a3      	ldr	r3, [r4, #24]
 800e880:	60a3      	str	r3, [r4, #8]
 800e882:	89a3      	ldrh	r3, [r4, #12]
 800e884:	071a      	lsls	r2, r3, #28
 800e886:	d52f      	bpl.n	800e8e8 <__swbuf_r+0x84>
 800e888:	6923      	ldr	r3, [r4, #16]
 800e88a:	b36b      	cbz	r3, 800e8e8 <__swbuf_r+0x84>
 800e88c:	6923      	ldr	r3, [r4, #16]
 800e88e:	6820      	ldr	r0, [r4, #0]
 800e890:	1ac0      	subs	r0, r0, r3
 800e892:	6963      	ldr	r3, [r4, #20]
 800e894:	b2f6      	uxtb	r6, r6
 800e896:	4283      	cmp	r3, r0
 800e898:	4637      	mov	r7, r6
 800e89a:	dc04      	bgt.n	800e8a6 <__swbuf_r+0x42>
 800e89c:	4621      	mov	r1, r4
 800e89e:	4628      	mov	r0, r5
 800e8a0:	f000 ffc2 	bl	800f828 <_fflush_r>
 800e8a4:	bb30      	cbnz	r0, 800e8f4 <__swbuf_r+0x90>
 800e8a6:	68a3      	ldr	r3, [r4, #8]
 800e8a8:	3b01      	subs	r3, #1
 800e8aa:	60a3      	str	r3, [r4, #8]
 800e8ac:	6823      	ldr	r3, [r4, #0]
 800e8ae:	1c5a      	adds	r2, r3, #1
 800e8b0:	6022      	str	r2, [r4, #0]
 800e8b2:	701e      	strb	r6, [r3, #0]
 800e8b4:	6963      	ldr	r3, [r4, #20]
 800e8b6:	3001      	adds	r0, #1
 800e8b8:	4283      	cmp	r3, r0
 800e8ba:	d004      	beq.n	800e8c6 <__swbuf_r+0x62>
 800e8bc:	89a3      	ldrh	r3, [r4, #12]
 800e8be:	07db      	lsls	r3, r3, #31
 800e8c0:	d506      	bpl.n	800e8d0 <__swbuf_r+0x6c>
 800e8c2:	2e0a      	cmp	r6, #10
 800e8c4:	d104      	bne.n	800e8d0 <__swbuf_r+0x6c>
 800e8c6:	4621      	mov	r1, r4
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	f000 ffad 	bl	800f828 <_fflush_r>
 800e8ce:	b988      	cbnz	r0, 800e8f4 <__swbuf_r+0x90>
 800e8d0:	4638      	mov	r0, r7
 800e8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8d4:	4b0a      	ldr	r3, [pc, #40]	; (800e900 <__swbuf_r+0x9c>)
 800e8d6:	429c      	cmp	r4, r3
 800e8d8:	d101      	bne.n	800e8de <__swbuf_r+0x7a>
 800e8da:	68ac      	ldr	r4, [r5, #8]
 800e8dc:	e7cf      	b.n	800e87e <__swbuf_r+0x1a>
 800e8de:	4b09      	ldr	r3, [pc, #36]	; (800e904 <__swbuf_r+0xa0>)
 800e8e0:	429c      	cmp	r4, r3
 800e8e2:	bf08      	it	eq
 800e8e4:	68ec      	ldreq	r4, [r5, #12]
 800e8e6:	e7ca      	b.n	800e87e <__swbuf_r+0x1a>
 800e8e8:	4621      	mov	r1, r4
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	f000 f81e 	bl	800e92c <__swsetup_r>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d0cb      	beq.n	800e88c <__swbuf_r+0x28>
 800e8f4:	f04f 37ff 	mov.w	r7, #4294967295
 800e8f8:	e7ea      	b.n	800e8d0 <__swbuf_r+0x6c>
 800e8fa:	bf00      	nop
 800e8fc:	080121d8 	.word	0x080121d8
 800e900:	080121f8 	.word	0x080121f8
 800e904:	080121b8 	.word	0x080121b8

0800e908 <_write_r>:
 800e908:	b538      	push	{r3, r4, r5, lr}
 800e90a:	4d07      	ldr	r5, [pc, #28]	; (800e928 <_write_r+0x20>)
 800e90c:	4604      	mov	r4, r0
 800e90e:	4608      	mov	r0, r1
 800e910:	4611      	mov	r1, r2
 800e912:	2200      	movs	r2, #0
 800e914:	602a      	str	r2, [r5, #0]
 800e916:	461a      	mov	r2, r3
 800e918:	f7f4 fd61 	bl	80033de <_write>
 800e91c:	1c43      	adds	r3, r0, #1
 800e91e:	d102      	bne.n	800e926 <_write_r+0x1e>
 800e920:	682b      	ldr	r3, [r5, #0]
 800e922:	b103      	cbz	r3, 800e926 <_write_r+0x1e>
 800e924:	6023      	str	r3, [r4, #0]
 800e926:	bd38      	pop	{r3, r4, r5, pc}
 800e928:	20005aac 	.word	0x20005aac

0800e92c <__swsetup_r>:
 800e92c:	4b32      	ldr	r3, [pc, #200]	; (800e9f8 <__swsetup_r+0xcc>)
 800e92e:	b570      	push	{r4, r5, r6, lr}
 800e930:	681d      	ldr	r5, [r3, #0]
 800e932:	4606      	mov	r6, r0
 800e934:	460c      	mov	r4, r1
 800e936:	b125      	cbz	r5, 800e942 <__swsetup_r+0x16>
 800e938:	69ab      	ldr	r3, [r5, #24]
 800e93a:	b913      	cbnz	r3, 800e942 <__swsetup_r+0x16>
 800e93c:	4628      	mov	r0, r5
 800e93e:	f7ff f86b 	bl	800da18 <__sinit>
 800e942:	4b2e      	ldr	r3, [pc, #184]	; (800e9fc <__swsetup_r+0xd0>)
 800e944:	429c      	cmp	r4, r3
 800e946:	d10f      	bne.n	800e968 <__swsetup_r+0x3c>
 800e948:	686c      	ldr	r4, [r5, #4]
 800e94a:	89a3      	ldrh	r3, [r4, #12]
 800e94c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e950:	0719      	lsls	r1, r3, #28
 800e952:	d42c      	bmi.n	800e9ae <__swsetup_r+0x82>
 800e954:	06dd      	lsls	r5, r3, #27
 800e956:	d411      	bmi.n	800e97c <__swsetup_r+0x50>
 800e958:	2309      	movs	r3, #9
 800e95a:	6033      	str	r3, [r6, #0]
 800e95c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e960:	81a3      	strh	r3, [r4, #12]
 800e962:	f04f 30ff 	mov.w	r0, #4294967295
 800e966:	e03e      	b.n	800e9e6 <__swsetup_r+0xba>
 800e968:	4b25      	ldr	r3, [pc, #148]	; (800ea00 <__swsetup_r+0xd4>)
 800e96a:	429c      	cmp	r4, r3
 800e96c:	d101      	bne.n	800e972 <__swsetup_r+0x46>
 800e96e:	68ac      	ldr	r4, [r5, #8]
 800e970:	e7eb      	b.n	800e94a <__swsetup_r+0x1e>
 800e972:	4b24      	ldr	r3, [pc, #144]	; (800ea04 <__swsetup_r+0xd8>)
 800e974:	429c      	cmp	r4, r3
 800e976:	bf08      	it	eq
 800e978:	68ec      	ldreq	r4, [r5, #12]
 800e97a:	e7e6      	b.n	800e94a <__swsetup_r+0x1e>
 800e97c:	0758      	lsls	r0, r3, #29
 800e97e:	d512      	bpl.n	800e9a6 <__swsetup_r+0x7a>
 800e980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e982:	b141      	cbz	r1, 800e996 <__swsetup_r+0x6a>
 800e984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e988:	4299      	cmp	r1, r3
 800e98a:	d002      	beq.n	800e992 <__swsetup_r+0x66>
 800e98c:	4630      	mov	r0, r6
 800e98e:	f001 fbb1 	bl	80100f4 <_free_r>
 800e992:	2300      	movs	r3, #0
 800e994:	6363      	str	r3, [r4, #52]	; 0x34
 800e996:	89a3      	ldrh	r3, [r4, #12]
 800e998:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e99c:	81a3      	strh	r3, [r4, #12]
 800e99e:	2300      	movs	r3, #0
 800e9a0:	6063      	str	r3, [r4, #4]
 800e9a2:	6923      	ldr	r3, [r4, #16]
 800e9a4:	6023      	str	r3, [r4, #0]
 800e9a6:	89a3      	ldrh	r3, [r4, #12]
 800e9a8:	f043 0308 	orr.w	r3, r3, #8
 800e9ac:	81a3      	strh	r3, [r4, #12]
 800e9ae:	6923      	ldr	r3, [r4, #16]
 800e9b0:	b94b      	cbnz	r3, 800e9c6 <__swsetup_r+0x9a>
 800e9b2:	89a3      	ldrh	r3, [r4, #12]
 800e9b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e9b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9bc:	d003      	beq.n	800e9c6 <__swsetup_r+0x9a>
 800e9be:	4621      	mov	r1, r4
 800e9c0:	4630      	mov	r0, r6
 800e9c2:	f000 ffa9 	bl	800f918 <__smakebuf_r>
 800e9c6:	89a0      	ldrh	r0, [r4, #12]
 800e9c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e9cc:	f010 0301 	ands.w	r3, r0, #1
 800e9d0:	d00a      	beq.n	800e9e8 <__swsetup_r+0xbc>
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	60a3      	str	r3, [r4, #8]
 800e9d6:	6963      	ldr	r3, [r4, #20]
 800e9d8:	425b      	negs	r3, r3
 800e9da:	61a3      	str	r3, [r4, #24]
 800e9dc:	6923      	ldr	r3, [r4, #16]
 800e9de:	b943      	cbnz	r3, 800e9f2 <__swsetup_r+0xc6>
 800e9e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e9e4:	d1ba      	bne.n	800e95c <__swsetup_r+0x30>
 800e9e6:	bd70      	pop	{r4, r5, r6, pc}
 800e9e8:	0781      	lsls	r1, r0, #30
 800e9ea:	bf58      	it	pl
 800e9ec:	6963      	ldrpl	r3, [r4, #20]
 800e9ee:	60a3      	str	r3, [r4, #8]
 800e9f0:	e7f4      	b.n	800e9dc <__swsetup_r+0xb0>
 800e9f2:	2000      	movs	r0, #0
 800e9f4:	e7f7      	b.n	800e9e6 <__swsetup_r+0xba>
 800e9f6:	bf00      	nop
 800e9f8:	200000a0 	.word	0x200000a0
 800e9fc:	080121d8 	.word	0x080121d8
 800ea00:	080121f8 	.word	0x080121f8
 800ea04:	080121b8 	.word	0x080121b8

0800ea08 <_close_r>:
 800ea08:	b538      	push	{r3, r4, r5, lr}
 800ea0a:	4d06      	ldr	r5, [pc, #24]	; (800ea24 <_close_r+0x1c>)
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	4604      	mov	r4, r0
 800ea10:	4608      	mov	r0, r1
 800ea12:	602b      	str	r3, [r5, #0]
 800ea14:	f7f4 ffd9 	bl	80039ca <_close>
 800ea18:	1c43      	adds	r3, r0, #1
 800ea1a:	d102      	bne.n	800ea22 <_close_r+0x1a>
 800ea1c:	682b      	ldr	r3, [r5, #0]
 800ea1e:	b103      	cbz	r3, 800ea22 <_close_r+0x1a>
 800ea20:	6023      	str	r3, [r4, #0]
 800ea22:	bd38      	pop	{r3, r4, r5, pc}
 800ea24:	20005aac 	.word	0x20005aac

0800ea28 <quorem>:
 800ea28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea2c:	6903      	ldr	r3, [r0, #16]
 800ea2e:	690c      	ldr	r4, [r1, #16]
 800ea30:	42a3      	cmp	r3, r4
 800ea32:	4607      	mov	r7, r0
 800ea34:	f2c0 8081 	blt.w	800eb3a <quorem+0x112>
 800ea38:	3c01      	subs	r4, #1
 800ea3a:	f101 0814 	add.w	r8, r1, #20
 800ea3e:	f100 0514 	add.w	r5, r0, #20
 800ea42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea46:	9301      	str	r3, [sp, #4]
 800ea48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ea4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea50:	3301      	adds	r3, #1
 800ea52:	429a      	cmp	r2, r3
 800ea54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ea58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ea5c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ea60:	d331      	bcc.n	800eac6 <quorem+0x9e>
 800ea62:	f04f 0e00 	mov.w	lr, #0
 800ea66:	4640      	mov	r0, r8
 800ea68:	46ac      	mov	ip, r5
 800ea6a:	46f2      	mov	sl, lr
 800ea6c:	f850 2b04 	ldr.w	r2, [r0], #4
 800ea70:	b293      	uxth	r3, r2
 800ea72:	fb06 e303 	mla	r3, r6, r3, lr
 800ea76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	ebaa 0303 	sub.w	r3, sl, r3
 800ea80:	f8dc a000 	ldr.w	sl, [ip]
 800ea84:	0c12      	lsrs	r2, r2, #16
 800ea86:	fa13 f38a 	uxtah	r3, r3, sl
 800ea8a:	fb06 e202 	mla	r2, r6, r2, lr
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	9b00      	ldr	r3, [sp, #0]
 800ea92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ea96:	b292      	uxth	r2, r2
 800ea98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ea9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eaa0:	f8bd 3000 	ldrh.w	r3, [sp]
 800eaa4:	4581      	cmp	r9, r0
 800eaa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eaaa:	f84c 3b04 	str.w	r3, [ip], #4
 800eaae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eab2:	d2db      	bcs.n	800ea6c <quorem+0x44>
 800eab4:	f855 300b 	ldr.w	r3, [r5, fp]
 800eab8:	b92b      	cbnz	r3, 800eac6 <quorem+0x9e>
 800eaba:	9b01      	ldr	r3, [sp, #4]
 800eabc:	3b04      	subs	r3, #4
 800eabe:	429d      	cmp	r5, r3
 800eac0:	461a      	mov	r2, r3
 800eac2:	d32e      	bcc.n	800eb22 <quorem+0xfa>
 800eac4:	613c      	str	r4, [r7, #16]
 800eac6:	4638      	mov	r0, r7
 800eac8:	f001 f9fc 	bl	800fec4 <__mcmp>
 800eacc:	2800      	cmp	r0, #0
 800eace:	db24      	blt.n	800eb1a <quorem+0xf2>
 800ead0:	3601      	adds	r6, #1
 800ead2:	4628      	mov	r0, r5
 800ead4:	f04f 0c00 	mov.w	ip, #0
 800ead8:	f858 2b04 	ldr.w	r2, [r8], #4
 800eadc:	f8d0 e000 	ldr.w	lr, [r0]
 800eae0:	b293      	uxth	r3, r2
 800eae2:	ebac 0303 	sub.w	r3, ip, r3
 800eae6:	0c12      	lsrs	r2, r2, #16
 800eae8:	fa13 f38e 	uxtah	r3, r3, lr
 800eaec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eaf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eafa:	45c1      	cmp	r9, r8
 800eafc:	f840 3b04 	str.w	r3, [r0], #4
 800eb00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eb04:	d2e8      	bcs.n	800ead8 <quorem+0xb0>
 800eb06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb0e:	b922      	cbnz	r2, 800eb1a <quorem+0xf2>
 800eb10:	3b04      	subs	r3, #4
 800eb12:	429d      	cmp	r5, r3
 800eb14:	461a      	mov	r2, r3
 800eb16:	d30a      	bcc.n	800eb2e <quorem+0x106>
 800eb18:	613c      	str	r4, [r7, #16]
 800eb1a:	4630      	mov	r0, r6
 800eb1c:	b003      	add	sp, #12
 800eb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb22:	6812      	ldr	r2, [r2, #0]
 800eb24:	3b04      	subs	r3, #4
 800eb26:	2a00      	cmp	r2, #0
 800eb28:	d1cc      	bne.n	800eac4 <quorem+0x9c>
 800eb2a:	3c01      	subs	r4, #1
 800eb2c:	e7c7      	b.n	800eabe <quorem+0x96>
 800eb2e:	6812      	ldr	r2, [r2, #0]
 800eb30:	3b04      	subs	r3, #4
 800eb32:	2a00      	cmp	r2, #0
 800eb34:	d1f0      	bne.n	800eb18 <quorem+0xf0>
 800eb36:	3c01      	subs	r4, #1
 800eb38:	e7eb      	b.n	800eb12 <quorem+0xea>
 800eb3a:	2000      	movs	r0, #0
 800eb3c:	e7ee      	b.n	800eb1c <quorem+0xf4>
	...

0800eb40 <_dtoa_r>:
 800eb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb44:	ed2d 8b04 	vpush	{d8-d9}
 800eb48:	ec57 6b10 	vmov	r6, r7, d0
 800eb4c:	b093      	sub	sp, #76	; 0x4c
 800eb4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eb50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eb54:	9106      	str	r1, [sp, #24]
 800eb56:	ee10 aa10 	vmov	sl, s0
 800eb5a:	4604      	mov	r4, r0
 800eb5c:	9209      	str	r2, [sp, #36]	; 0x24
 800eb5e:	930c      	str	r3, [sp, #48]	; 0x30
 800eb60:	46bb      	mov	fp, r7
 800eb62:	b975      	cbnz	r5, 800eb82 <_dtoa_r+0x42>
 800eb64:	2010      	movs	r0, #16
 800eb66:	f000 ff17 	bl	800f998 <malloc>
 800eb6a:	4602      	mov	r2, r0
 800eb6c:	6260      	str	r0, [r4, #36]	; 0x24
 800eb6e:	b920      	cbnz	r0, 800eb7a <_dtoa_r+0x3a>
 800eb70:	4ba7      	ldr	r3, [pc, #668]	; (800ee10 <_dtoa_r+0x2d0>)
 800eb72:	21ea      	movs	r1, #234	; 0xea
 800eb74:	48a7      	ldr	r0, [pc, #668]	; (800ee14 <_dtoa_r+0x2d4>)
 800eb76:	f001 fc75 	bl	8010464 <__assert_func>
 800eb7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eb7e:	6005      	str	r5, [r0, #0]
 800eb80:	60c5      	str	r5, [r0, #12]
 800eb82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb84:	6819      	ldr	r1, [r3, #0]
 800eb86:	b151      	cbz	r1, 800eb9e <_dtoa_r+0x5e>
 800eb88:	685a      	ldr	r2, [r3, #4]
 800eb8a:	604a      	str	r2, [r1, #4]
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	4093      	lsls	r3, r2
 800eb90:	608b      	str	r3, [r1, #8]
 800eb92:	4620      	mov	r0, r4
 800eb94:	f000 ff54 	bl	800fa40 <_Bfree>
 800eb98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	601a      	str	r2, [r3, #0]
 800eb9e:	1e3b      	subs	r3, r7, #0
 800eba0:	bfaa      	itet	ge
 800eba2:	2300      	movge	r3, #0
 800eba4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800eba8:	f8c8 3000 	strge.w	r3, [r8]
 800ebac:	4b9a      	ldr	r3, [pc, #616]	; (800ee18 <_dtoa_r+0x2d8>)
 800ebae:	bfbc      	itt	lt
 800ebb0:	2201      	movlt	r2, #1
 800ebb2:	f8c8 2000 	strlt.w	r2, [r8]
 800ebb6:	ea33 030b 	bics.w	r3, r3, fp
 800ebba:	d11b      	bne.n	800ebf4 <_dtoa_r+0xb4>
 800ebbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ebbe:	f242 730f 	movw	r3, #9999	; 0x270f
 800ebc2:	6013      	str	r3, [r2, #0]
 800ebc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ebc8:	4333      	orrs	r3, r6
 800ebca:	f000 8592 	beq.w	800f6f2 <_dtoa_r+0xbb2>
 800ebce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ebd0:	b963      	cbnz	r3, 800ebec <_dtoa_r+0xac>
 800ebd2:	4b92      	ldr	r3, [pc, #584]	; (800ee1c <_dtoa_r+0x2dc>)
 800ebd4:	e022      	b.n	800ec1c <_dtoa_r+0xdc>
 800ebd6:	4b92      	ldr	r3, [pc, #584]	; (800ee20 <_dtoa_r+0x2e0>)
 800ebd8:	9301      	str	r3, [sp, #4]
 800ebda:	3308      	adds	r3, #8
 800ebdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ebde:	6013      	str	r3, [r2, #0]
 800ebe0:	9801      	ldr	r0, [sp, #4]
 800ebe2:	b013      	add	sp, #76	; 0x4c
 800ebe4:	ecbd 8b04 	vpop	{d8-d9}
 800ebe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebec:	4b8b      	ldr	r3, [pc, #556]	; (800ee1c <_dtoa_r+0x2dc>)
 800ebee:	9301      	str	r3, [sp, #4]
 800ebf0:	3303      	adds	r3, #3
 800ebf2:	e7f3      	b.n	800ebdc <_dtoa_r+0x9c>
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	4650      	mov	r0, sl
 800ebfa:	4659      	mov	r1, fp
 800ebfc:	f7f1 ff64 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec00:	ec4b ab19 	vmov	d9, sl, fp
 800ec04:	4680      	mov	r8, r0
 800ec06:	b158      	cbz	r0, 800ec20 <_dtoa_r+0xe0>
 800ec08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	6013      	str	r3, [r2, #0]
 800ec0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	f000 856b 	beq.w	800f6ec <_dtoa_r+0xbac>
 800ec16:	4883      	ldr	r0, [pc, #524]	; (800ee24 <_dtoa_r+0x2e4>)
 800ec18:	6018      	str	r0, [r3, #0]
 800ec1a:	1e43      	subs	r3, r0, #1
 800ec1c:	9301      	str	r3, [sp, #4]
 800ec1e:	e7df      	b.n	800ebe0 <_dtoa_r+0xa0>
 800ec20:	ec4b ab10 	vmov	d0, sl, fp
 800ec24:	aa10      	add	r2, sp, #64	; 0x40
 800ec26:	a911      	add	r1, sp, #68	; 0x44
 800ec28:	4620      	mov	r0, r4
 800ec2a:	f001 f9f1 	bl	8010010 <__d2b>
 800ec2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ec32:	ee08 0a10 	vmov	s16, r0
 800ec36:	2d00      	cmp	r5, #0
 800ec38:	f000 8084 	beq.w	800ed44 <_dtoa_r+0x204>
 800ec3c:	ee19 3a90 	vmov	r3, s19
 800ec40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ec48:	4656      	mov	r6, sl
 800ec4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ec4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ec52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ec56:	4b74      	ldr	r3, [pc, #464]	; (800ee28 <_dtoa_r+0x2e8>)
 800ec58:	2200      	movs	r2, #0
 800ec5a:	4630      	mov	r0, r6
 800ec5c:	4639      	mov	r1, r7
 800ec5e:	f7f1 fb13 	bl	8000288 <__aeabi_dsub>
 800ec62:	a365      	add	r3, pc, #404	; (adr r3, 800edf8 <_dtoa_r+0x2b8>)
 800ec64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec68:	f7f1 fcc6 	bl	80005f8 <__aeabi_dmul>
 800ec6c:	a364      	add	r3, pc, #400	; (adr r3, 800ee00 <_dtoa_r+0x2c0>)
 800ec6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec72:	f7f1 fb0b 	bl	800028c <__adddf3>
 800ec76:	4606      	mov	r6, r0
 800ec78:	4628      	mov	r0, r5
 800ec7a:	460f      	mov	r7, r1
 800ec7c:	f7f1 fc52 	bl	8000524 <__aeabi_i2d>
 800ec80:	a361      	add	r3, pc, #388	; (adr r3, 800ee08 <_dtoa_r+0x2c8>)
 800ec82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec86:	f7f1 fcb7 	bl	80005f8 <__aeabi_dmul>
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	4630      	mov	r0, r6
 800ec90:	4639      	mov	r1, r7
 800ec92:	f7f1 fafb 	bl	800028c <__adddf3>
 800ec96:	4606      	mov	r6, r0
 800ec98:	460f      	mov	r7, r1
 800ec9a:	f7f1 ff5d 	bl	8000b58 <__aeabi_d2iz>
 800ec9e:	2200      	movs	r2, #0
 800eca0:	9000      	str	r0, [sp, #0]
 800eca2:	2300      	movs	r3, #0
 800eca4:	4630      	mov	r0, r6
 800eca6:	4639      	mov	r1, r7
 800eca8:	f7f1 ff18 	bl	8000adc <__aeabi_dcmplt>
 800ecac:	b150      	cbz	r0, 800ecc4 <_dtoa_r+0x184>
 800ecae:	9800      	ldr	r0, [sp, #0]
 800ecb0:	f7f1 fc38 	bl	8000524 <__aeabi_i2d>
 800ecb4:	4632      	mov	r2, r6
 800ecb6:	463b      	mov	r3, r7
 800ecb8:	f7f1 ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 800ecbc:	b910      	cbnz	r0, 800ecc4 <_dtoa_r+0x184>
 800ecbe:	9b00      	ldr	r3, [sp, #0]
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	9300      	str	r3, [sp, #0]
 800ecc4:	9b00      	ldr	r3, [sp, #0]
 800ecc6:	2b16      	cmp	r3, #22
 800ecc8:	d85a      	bhi.n	800ed80 <_dtoa_r+0x240>
 800ecca:	9a00      	ldr	r2, [sp, #0]
 800eccc:	4b57      	ldr	r3, [pc, #348]	; (800ee2c <_dtoa_r+0x2ec>)
 800ecce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ecd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd6:	ec51 0b19 	vmov	r0, r1, d9
 800ecda:	f7f1 feff 	bl	8000adc <__aeabi_dcmplt>
 800ecde:	2800      	cmp	r0, #0
 800ece0:	d050      	beq.n	800ed84 <_dtoa_r+0x244>
 800ece2:	9b00      	ldr	r3, [sp, #0]
 800ece4:	3b01      	subs	r3, #1
 800ece6:	9300      	str	r3, [sp, #0]
 800ece8:	2300      	movs	r3, #0
 800ecea:	930b      	str	r3, [sp, #44]	; 0x2c
 800ecec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ecee:	1b5d      	subs	r5, r3, r5
 800ecf0:	1e6b      	subs	r3, r5, #1
 800ecf2:	9305      	str	r3, [sp, #20]
 800ecf4:	bf45      	ittet	mi
 800ecf6:	f1c5 0301 	rsbmi	r3, r5, #1
 800ecfa:	9304      	strmi	r3, [sp, #16]
 800ecfc:	2300      	movpl	r3, #0
 800ecfe:	2300      	movmi	r3, #0
 800ed00:	bf4c      	ite	mi
 800ed02:	9305      	strmi	r3, [sp, #20]
 800ed04:	9304      	strpl	r3, [sp, #16]
 800ed06:	9b00      	ldr	r3, [sp, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	db3d      	blt.n	800ed88 <_dtoa_r+0x248>
 800ed0c:	9b05      	ldr	r3, [sp, #20]
 800ed0e:	9a00      	ldr	r2, [sp, #0]
 800ed10:	920a      	str	r2, [sp, #40]	; 0x28
 800ed12:	4413      	add	r3, r2
 800ed14:	9305      	str	r3, [sp, #20]
 800ed16:	2300      	movs	r3, #0
 800ed18:	9307      	str	r3, [sp, #28]
 800ed1a:	9b06      	ldr	r3, [sp, #24]
 800ed1c:	2b09      	cmp	r3, #9
 800ed1e:	f200 8089 	bhi.w	800ee34 <_dtoa_r+0x2f4>
 800ed22:	2b05      	cmp	r3, #5
 800ed24:	bfc4      	itt	gt
 800ed26:	3b04      	subgt	r3, #4
 800ed28:	9306      	strgt	r3, [sp, #24]
 800ed2a:	9b06      	ldr	r3, [sp, #24]
 800ed2c:	f1a3 0302 	sub.w	r3, r3, #2
 800ed30:	bfcc      	ite	gt
 800ed32:	2500      	movgt	r5, #0
 800ed34:	2501      	movle	r5, #1
 800ed36:	2b03      	cmp	r3, #3
 800ed38:	f200 8087 	bhi.w	800ee4a <_dtoa_r+0x30a>
 800ed3c:	e8df f003 	tbb	[pc, r3]
 800ed40:	59383a2d 	.word	0x59383a2d
 800ed44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ed48:	441d      	add	r5, r3
 800ed4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ed4e:	2b20      	cmp	r3, #32
 800ed50:	bfc1      	itttt	gt
 800ed52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ed56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ed5a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ed5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ed62:	bfda      	itte	le
 800ed64:	f1c3 0320 	rsble	r3, r3, #32
 800ed68:	fa06 f003 	lslle.w	r0, r6, r3
 800ed6c:	4318      	orrgt	r0, r3
 800ed6e:	f7f1 fbc9 	bl	8000504 <__aeabi_ui2d>
 800ed72:	2301      	movs	r3, #1
 800ed74:	4606      	mov	r6, r0
 800ed76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ed7a:	3d01      	subs	r5, #1
 800ed7c:	930e      	str	r3, [sp, #56]	; 0x38
 800ed7e:	e76a      	b.n	800ec56 <_dtoa_r+0x116>
 800ed80:	2301      	movs	r3, #1
 800ed82:	e7b2      	b.n	800ecea <_dtoa_r+0x1aa>
 800ed84:	900b      	str	r0, [sp, #44]	; 0x2c
 800ed86:	e7b1      	b.n	800ecec <_dtoa_r+0x1ac>
 800ed88:	9b04      	ldr	r3, [sp, #16]
 800ed8a:	9a00      	ldr	r2, [sp, #0]
 800ed8c:	1a9b      	subs	r3, r3, r2
 800ed8e:	9304      	str	r3, [sp, #16]
 800ed90:	4253      	negs	r3, r2
 800ed92:	9307      	str	r3, [sp, #28]
 800ed94:	2300      	movs	r3, #0
 800ed96:	930a      	str	r3, [sp, #40]	; 0x28
 800ed98:	e7bf      	b.n	800ed1a <_dtoa_r+0x1da>
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	9308      	str	r3, [sp, #32]
 800ed9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	dc55      	bgt.n	800ee50 <_dtoa_r+0x310>
 800eda4:	2301      	movs	r3, #1
 800eda6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800edaa:	461a      	mov	r2, r3
 800edac:	9209      	str	r2, [sp, #36]	; 0x24
 800edae:	e00c      	b.n	800edca <_dtoa_r+0x28a>
 800edb0:	2301      	movs	r3, #1
 800edb2:	e7f3      	b.n	800ed9c <_dtoa_r+0x25c>
 800edb4:	2300      	movs	r3, #0
 800edb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edb8:	9308      	str	r3, [sp, #32]
 800edba:	9b00      	ldr	r3, [sp, #0]
 800edbc:	4413      	add	r3, r2
 800edbe:	9302      	str	r3, [sp, #8]
 800edc0:	3301      	adds	r3, #1
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	9303      	str	r3, [sp, #12]
 800edc6:	bfb8      	it	lt
 800edc8:	2301      	movlt	r3, #1
 800edca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800edcc:	2200      	movs	r2, #0
 800edce:	6042      	str	r2, [r0, #4]
 800edd0:	2204      	movs	r2, #4
 800edd2:	f102 0614 	add.w	r6, r2, #20
 800edd6:	429e      	cmp	r6, r3
 800edd8:	6841      	ldr	r1, [r0, #4]
 800edda:	d93d      	bls.n	800ee58 <_dtoa_r+0x318>
 800eddc:	4620      	mov	r0, r4
 800edde:	f000 fdef 	bl	800f9c0 <_Balloc>
 800ede2:	9001      	str	r0, [sp, #4]
 800ede4:	2800      	cmp	r0, #0
 800ede6:	d13b      	bne.n	800ee60 <_dtoa_r+0x320>
 800ede8:	4b11      	ldr	r3, [pc, #68]	; (800ee30 <_dtoa_r+0x2f0>)
 800edea:	4602      	mov	r2, r0
 800edec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800edf0:	e6c0      	b.n	800eb74 <_dtoa_r+0x34>
 800edf2:	2301      	movs	r3, #1
 800edf4:	e7df      	b.n	800edb6 <_dtoa_r+0x276>
 800edf6:	bf00      	nop
 800edf8:	636f4361 	.word	0x636f4361
 800edfc:	3fd287a7 	.word	0x3fd287a7
 800ee00:	8b60c8b3 	.word	0x8b60c8b3
 800ee04:	3fc68a28 	.word	0x3fc68a28
 800ee08:	509f79fb 	.word	0x509f79fb
 800ee0c:	3fd34413 	.word	0x3fd34413
 800ee10:	0801225d 	.word	0x0801225d
 800ee14:	08012274 	.word	0x08012274
 800ee18:	7ff00000 	.word	0x7ff00000
 800ee1c:	08012259 	.word	0x08012259
 800ee20:	08012250 	.word	0x08012250
 800ee24:	0801222d 	.word	0x0801222d
 800ee28:	3ff80000 	.word	0x3ff80000
 800ee2c:	08012368 	.word	0x08012368
 800ee30:	080122cf 	.word	0x080122cf
 800ee34:	2501      	movs	r5, #1
 800ee36:	2300      	movs	r3, #0
 800ee38:	9306      	str	r3, [sp, #24]
 800ee3a:	9508      	str	r5, [sp, #32]
 800ee3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ee44:	2200      	movs	r2, #0
 800ee46:	2312      	movs	r3, #18
 800ee48:	e7b0      	b.n	800edac <_dtoa_r+0x26c>
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	9308      	str	r3, [sp, #32]
 800ee4e:	e7f5      	b.n	800ee3c <_dtoa_r+0x2fc>
 800ee50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ee56:	e7b8      	b.n	800edca <_dtoa_r+0x28a>
 800ee58:	3101      	adds	r1, #1
 800ee5a:	6041      	str	r1, [r0, #4]
 800ee5c:	0052      	lsls	r2, r2, #1
 800ee5e:	e7b8      	b.n	800edd2 <_dtoa_r+0x292>
 800ee60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee62:	9a01      	ldr	r2, [sp, #4]
 800ee64:	601a      	str	r2, [r3, #0]
 800ee66:	9b03      	ldr	r3, [sp, #12]
 800ee68:	2b0e      	cmp	r3, #14
 800ee6a:	f200 809d 	bhi.w	800efa8 <_dtoa_r+0x468>
 800ee6e:	2d00      	cmp	r5, #0
 800ee70:	f000 809a 	beq.w	800efa8 <_dtoa_r+0x468>
 800ee74:	9b00      	ldr	r3, [sp, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	dd32      	ble.n	800eee0 <_dtoa_r+0x3a0>
 800ee7a:	4ab7      	ldr	r2, [pc, #732]	; (800f158 <_dtoa_r+0x618>)
 800ee7c:	f003 030f 	and.w	r3, r3, #15
 800ee80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ee84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee88:	9b00      	ldr	r3, [sp, #0]
 800ee8a:	05d8      	lsls	r0, r3, #23
 800ee8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ee90:	d516      	bpl.n	800eec0 <_dtoa_r+0x380>
 800ee92:	4bb2      	ldr	r3, [pc, #712]	; (800f15c <_dtoa_r+0x61c>)
 800ee94:	ec51 0b19 	vmov	r0, r1, d9
 800ee98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ee9c:	f7f1 fcd6 	bl	800084c <__aeabi_ddiv>
 800eea0:	f007 070f 	and.w	r7, r7, #15
 800eea4:	4682      	mov	sl, r0
 800eea6:	468b      	mov	fp, r1
 800eea8:	2503      	movs	r5, #3
 800eeaa:	4eac      	ldr	r6, [pc, #688]	; (800f15c <_dtoa_r+0x61c>)
 800eeac:	b957      	cbnz	r7, 800eec4 <_dtoa_r+0x384>
 800eeae:	4642      	mov	r2, r8
 800eeb0:	464b      	mov	r3, r9
 800eeb2:	4650      	mov	r0, sl
 800eeb4:	4659      	mov	r1, fp
 800eeb6:	f7f1 fcc9 	bl	800084c <__aeabi_ddiv>
 800eeba:	4682      	mov	sl, r0
 800eebc:	468b      	mov	fp, r1
 800eebe:	e028      	b.n	800ef12 <_dtoa_r+0x3d2>
 800eec0:	2502      	movs	r5, #2
 800eec2:	e7f2      	b.n	800eeaa <_dtoa_r+0x36a>
 800eec4:	07f9      	lsls	r1, r7, #31
 800eec6:	d508      	bpl.n	800eeda <_dtoa_r+0x39a>
 800eec8:	4640      	mov	r0, r8
 800eeca:	4649      	mov	r1, r9
 800eecc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eed0:	f7f1 fb92 	bl	80005f8 <__aeabi_dmul>
 800eed4:	3501      	adds	r5, #1
 800eed6:	4680      	mov	r8, r0
 800eed8:	4689      	mov	r9, r1
 800eeda:	107f      	asrs	r7, r7, #1
 800eedc:	3608      	adds	r6, #8
 800eede:	e7e5      	b.n	800eeac <_dtoa_r+0x36c>
 800eee0:	f000 809b 	beq.w	800f01a <_dtoa_r+0x4da>
 800eee4:	9b00      	ldr	r3, [sp, #0]
 800eee6:	4f9d      	ldr	r7, [pc, #628]	; (800f15c <_dtoa_r+0x61c>)
 800eee8:	425e      	negs	r6, r3
 800eeea:	4b9b      	ldr	r3, [pc, #620]	; (800f158 <_dtoa_r+0x618>)
 800eeec:	f006 020f 	and.w	r2, r6, #15
 800eef0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef8:	ec51 0b19 	vmov	r0, r1, d9
 800eefc:	f7f1 fb7c 	bl	80005f8 <__aeabi_dmul>
 800ef00:	1136      	asrs	r6, r6, #4
 800ef02:	4682      	mov	sl, r0
 800ef04:	468b      	mov	fp, r1
 800ef06:	2300      	movs	r3, #0
 800ef08:	2502      	movs	r5, #2
 800ef0a:	2e00      	cmp	r6, #0
 800ef0c:	d17a      	bne.n	800f004 <_dtoa_r+0x4c4>
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1d3      	bne.n	800eeba <_dtoa_r+0x37a>
 800ef12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	f000 8082 	beq.w	800f01e <_dtoa_r+0x4de>
 800ef1a:	4b91      	ldr	r3, [pc, #580]	; (800f160 <_dtoa_r+0x620>)
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	4650      	mov	r0, sl
 800ef20:	4659      	mov	r1, fp
 800ef22:	f7f1 fddb 	bl	8000adc <__aeabi_dcmplt>
 800ef26:	2800      	cmp	r0, #0
 800ef28:	d079      	beq.n	800f01e <_dtoa_r+0x4de>
 800ef2a:	9b03      	ldr	r3, [sp, #12]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d076      	beq.n	800f01e <_dtoa_r+0x4de>
 800ef30:	9b02      	ldr	r3, [sp, #8]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	dd36      	ble.n	800efa4 <_dtoa_r+0x464>
 800ef36:	9b00      	ldr	r3, [sp, #0]
 800ef38:	4650      	mov	r0, sl
 800ef3a:	4659      	mov	r1, fp
 800ef3c:	1e5f      	subs	r7, r3, #1
 800ef3e:	2200      	movs	r2, #0
 800ef40:	4b88      	ldr	r3, [pc, #544]	; (800f164 <_dtoa_r+0x624>)
 800ef42:	f7f1 fb59 	bl	80005f8 <__aeabi_dmul>
 800ef46:	9e02      	ldr	r6, [sp, #8]
 800ef48:	4682      	mov	sl, r0
 800ef4a:	468b      	mov	fp, r1
 800ef4c:	3501      	adds	r5, #1
 800ef4e:	4628      	mov	r0, r5
 800ef50:	f7f1 fae8 	bl	8000524 <__aeabi_i2d>
 800ef54:	4652      	mov	r2, sl
 800ef56:	465b      	mov	r3, fp
 800ef58:	f7f1 fb4e 	bl	80005f8 <__aeabi_dmul>
 800ef5c:	4b82      	ldr	r3, [pc, #520]	; (800f168 <_dtoa_r+0x628>)
 800ef5e:	2200      	movs	r2, #0
 800ef60:	f7f1 f994 	bl	800028c <__adddf3>
 800ef64:	46d0      	mov	r8, sl
 800ef66:	46d9      	mov	r9, fp
 800ef68:	4682      	mov	sl, r0
 800ef6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ef6e:	2e00      	cmp	r6, #0
 800ef70:	d158      	bne.n	800f024 <_dtoa_r+0x4e4>
 800ef72:	4b7e      	ldr	r3, [pc, #504]	; (800f16c <_dtoa_r+0x62c>)
 800ef74:	2200      	movs	r2, #0
 800ef76:	4640      	mov	r0, r8
 800ef78:	4649      	mov	r1, r9
 800ef7a:	f7f1 f985 	bl	8000288 <__aeabi_dsub>
 800ef7e:	4652      	mov	r2, sl
 800ef80:	465b      	mov	r3, fp
 800ef82:	4680      	mov	r8, r0
 800ef84:	4689      	mov	r9, r1
 800ef86:	f7f1 fdc7 	bl	8000b18 <__aeabi_dcmpgt>
 800ef8a:	2800      	cmp	r0, #0
 800ef8c:	f040 8295 	bne.w	800f4ba <_dtoa_r+0x97a>
 800ef90:	4652      	mov	r2, sl
 800ef92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ef96:	4640      	mov	r0, r8
 800ef98:	4649      	mov	r1, r9
 800ef9a:	f7f1 fd9f 	bl	8000adc <__aeabi_dcmplt>
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	f040 8289 	bne.w	800f4b6 <_dtoa_r+0x976>
 800efa4:	ec5b ab19 	vmov	sl, fp, d9
 800efa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800efaa:	2b00      	cmp	r3, #0
 800efac:	f2c0 8148 	blt.w	800f240 <_dtoa_r+0x700>
 800efb0:	9a00      	ldr	r2, [sp, #0]
 800efb2:	2a0e      	cmp	r2, #14
 800efb4:	f300 8144 	bgt.w	800f240 <_dtoa_r+0x700>
 800efb8:	4b67      	ldr	r3, [pc, #412]	; (800f158 <_dtoa_r+0x618>)
 800efba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800efbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800efc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f280 80d5 	bge.w	800f174 <_dtoa_r+0x634>
 800efca:	9b03      	ldr	r3, [sp, #12]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f300 80d1 	bgt.w	800f174 <_dtoa_r+0x634>
 800efd2:	f040 826f 	bne.w	800f4b4 <_dtoa_r+0x974>
 800efd6:	4b65      	ldr	r3, [pc, #404]	; (800f16c <_dtoa_r+0x62c>)
 800efd8:	2200      	movs	r2, #0
 800efda:	4640      	mov	r0, r8
 800efdc:	4649      	mov	r1, r9
 800efde:	f7f1 fb0b 	bl	80005f8 <__aeabi_dmul>
 800efe2:	4652      	mov	r2, sl
 800efe4:	465b      	mov	r3, fp
 800efe6:	f7f1 fd8d 	bl	8000b04 <__aeabi_dcmpge>
 800efea:	9e03      	ldr	r6, [sp, #12]
 800efec:	4637      	mov	r7, r6
 800efee:	2800      	cmp	r0, #0
 800eff0:	f040 8245 	bne.w	800f47e <_dtoa_r+0x93e>
 800eff4:	9d01      	ldr	r5, [sp, #4]
 800eff6:	2331      	movs	r3, #49	; 0x31
 800eff8:	f805 3b01 	strb.w	r3, [r5], #1
 800effc:	9b00      	ldr	r3, [sp, #0]
 800effe:	3301      	adds	r3, #1
 800f000:	9300      	str	r3, [sp, #0]
 800f002:	e240      	b.n	800f486 <_dtoa_r+0x946>
 800f004:	07f2      	lsls	r2, r6, #31
 800f006:	d505      	bpl.n	800f014 <_dtoa_r+0x4d4>
 800f008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f00c:	f7f1 faf4 	bl	80005f8 <__aeabi_dmul>
 800f010:	3501      	adds	r5, #1
 800f012:	2301      	movs	r3, #1
 800f014:	1076      	asrs	r6, r6, #1
 800f016:	3708      	adds	r7, #8
 800f018:	e777      	b.n	800ef0a <_dtoa_r+0x3ca>
 800f01a:	2502      	movs	r5, #2
 800f01c:	e779      	b.n	800ef12 <_dtoa_r+0x3d2>
 800f01e:	9f00      	ldr	r7, [sp, #0]
 800f020:	9e03      	ldr	r6, [sp, #12]
 800f022:	e794      	b.n	800ef4e <_dtoa_r+0x40e>
 800f024:	9901      	ldr	r1, [sp, #4]
 800f026:	4b4c      	ldr	r3, [pc, #304]	; (800f158 <_dtoa_r+0x618>)
 800f028:	4431      	add	r1, r6
 800f02a:	910d      	str	r1, [sp, #52]	; 0x34
 800f02c:	9908      	ldr	r1, [sp, #32]
 800f02e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f032:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f036:	2900      	cmp	r1, #0
 800f038:	d043      	beq.n	800f0c2 <_dtoa_r+0x582>
 800f03a:	494d      	ldr	r1, [pc, #308]	; (800f170 <_dtoa_r+0x630>)
 800f03c:	2000      	movs	r0, #0
 800f03e:	f7f1 fc05 	bl	800084c <__aeabi_ddiv>
 800f042:	4652      	mov	r2, sl
 800f044:	465b      	mov	r3, fp
 800f046:	f7f1 f91f 	bl	8000288 <__aeabi_dsub>
 800f04a:	9d01      	ldr	r5, [sp, #4]
 800f04c:	4682      	mov	sl, r0
 800f04e:	468b      	mov	fp, r1
 800f050:	4649      	mov	r1, r9
 800f052:	4640      	mov	r0, r8
 800f054:	f7f1 fd80 	bl	8000b58 <__aeabi_d2iz>
 800f058:	4606      	mov	r6, r0
 800f05a:	f7f1 fa63 	bl	8000524 <__aeabi_i2d>
 800f05e:	4602      	mov	r2, r0
 800f060:	460b      	mov	r3, r1
 800f062:	4640      	mov	r0, r8
 800f064:	4649      	mov	r1, r9
 800f066:	f7f1 f90f 	bl	8000288 <__aeabi_dsub>
 800f06a:	3630      	adds	r6, #48	; 0x30
 800f06c:	f805 6b01 	strb.w	r6, [r5], #1
 800f070:	4652      	mov	r2, sl
 800f072:	465b      	mov	r3, fp
 800f074:	4680      	mov	r8, r0
 800f076:	4689      	mov	r9, r1
 800f078:	f7f1 fd30 	bl	8000adc <__aeabi_dcmplt>
 800f07c:	2800      	cmp	r0, #0
 800f07e:	d163      	bne.n	800f148 <_dtoa_r+0x608>
 800f080:	4642      	mov	r2, r8
 800f082:	464b      	mov	r3, r9
 800f084:	4936      	ldr	r1, [pc, #216]	; (800f160 <_dtoa_r+0x620>)
 800f086:	2000      	movs	r0, #0
 800f088:	f7f1 f8fe 	bl	8000288 <__aeabi_dsub>
 800f08c:	4652      	mov	r2, sl
 800f08e:	465b      	mov	r3, fp
 800f090:	f7f1 fd24 	bl	8000adc <__aeabi_dcmplt>
 800f094:	2800      	cmp	r0, #0
 800f096:	f040 80b5 	bne.w	800f204 <_dtoa_r+0x6c4>
 800f09a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f09c:	429d      	cmp	r5, r3
 800f09e:	d081      	beq.n	800efa4 <_dtoa_r+0x464>
 800f0a0:	4b30      	ldr	r3, [pc, #192]	; (800f164 <_dtoa_r+0x624>)
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	4650      	mov	r0, sl
 800f0a6:	4659      	mov	r1, fp
 800f0a8:	f7f1 faa6 	bl	80005f8 <__aeabi_dmul>
 800f0ac:	4b2d      	ldr	r3, [pc, #180]	; (800f164 <_dtoa_r+0x624>)
 800f0ae:	4682      	mov	sl, r0
 800f0b0:	468b      	mov	fp, r1
 800f0b2:	4640      	mov	r0, r8
 800f0b4:	4649      	mov	r1, r9
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f7f1 fa9e 	bl	80005f8 <__aeabi_dmul>
 800f0bc:	4680      	mov	r8, r0
 800f0be:	4689      	mov	r9, r1
 800f0c0:	e7c6      	b.n	800f050 <_dtoa_r+0x510>
 800f0c2:	4650      	mov	r0, sl
 800f0c4:	4659      	mov	r1, fp
 800f0c6:	f7f1 fa97 	bl	80005f8 <__aeabi_dmul>
 800f0ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f0cc:	9d01      	ldr	r5, [sp, #4]
 800f0ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800f0d0:	4682      	mov	sl, r0
 800f0d2:	468b      	mov	fp, r1
 800f0d4:	4649      	mov	r1, r9
 800f0d6:	4640      	mov	r0, r8
 800f0d8:	f7f1 fd3e 	bl	8000b58 <__aeabi_d2iz>
 800f0dc:	4606      	mov	r6, r0
 800f0de:	f7f1 fa21 	bl	8000524 <__aeabi_i2d>
 800f0e2:	3630      	adds	r6, #48	; 0x30
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	460b      	mov	r3, r1
 800f0e8:	4640      	mov	r0, r8
 800f0ea:	4649      	mov	r1, r9
 800f0ec:	f7f1 f8cc 	bl	8000288 <__aeabi_dsub>
 800f0f0:	f805 6b01 	strb.w	r6, [r5], #1
 800f0f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f0f6:	429d      	cmp	r5, r3
 800f0f8:	4680      	mov	r8, r0
 800f0fa:	4689      	mov	r9, r1
 800f0fc:	f04f 0200 	mov.w	r2, #0
 800f100:	d124      	bne.n	800f14c <_dtoa_r+0x60c>
 800f102:	4b1b      	ldr	r3, [pc, #108]	; (800f170 <_dtoa_r+0x630>)
 800f104:	4650      	mov	r0, sl
 800f106:	4659      	mov	r1, fp
 800f108:	f7f1 f8c0 	bl	800028c <__adddf3>
 800f10c:	4602      	mov	r2, r0
 800f10e:	460b      	mov	r3, r1
 800f110:	4640      	mov	r0, r8
 800f112:	4649      	mov	r1, r9
 800f114:	f7f1 fd00 	bl	8000b18 <__aeabi_dcmpgt>
 800f118:	2800      	cmp	r0, #0
 800f11a:	d173      	bne.n	800f204 <_dtoa_r+0x6c4>
 800f11c:	4652      	mov	r2, sl
 800f11e:	465b      	mov	r3, fp
 800f120:	4913      	ldr	r1, [pc, #76]	; (800f170 <_dtoa_r+0x630>)
 800f122:	2000      	movs	r0, #0
 800f124:	f7f1 f8b0 	bl	8000288 <__aeabi_dsub>
 800f128:	4602      	mov	r2, r0
 800f12a:	460b      	mov	r3, r1
 800f12c:	4640      	mov	r0, r8
 800f12e:	4649      	mov	r1, r9
 800f130:	f7f1 fcd4 	bl	8000adc <__aeabi_dcmplt>
 800f134:	2800      	cmp	r0, #0
 800f136:	f43f af35 	beq.w	800efa4 <_dtoa_r+0x464>
 800f13a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f13c:	1e6b      	subs	r3, r5, #1
 800f13e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f140:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f144:	2b30      	cmp	r3, #48	; 0x30
 800f146:	d0f8      	beq.n	800f13a <_dtoa_r+0x5fa>
 800f148:	9700      	str	r7, [sp, #0]
 800f14a:	e049      	b.n	800f1e0 <_dtoa_r+0x6a0>
 800f14c:	4b05      	ldr	r3, [pc, #20]	; (800f164 <_dtoa_r+0x624>)
 800f14e:	f7f1 fa53 	bl	80005f8 <__aeabi_dmul>
 800f152:	4680      	mov	r8, r0
 800f154:	4689      	mov	r9, r1
 800f156:	e7bd      	b.n	800f0d4 <_dtoa_r+0x594>
 800f158:	08012368 	.word	0x08012368
 800f15c:	08012340 	.word	0x08012340
 800f160:	3ff00000 	.word	0x3ff00000
 800f164:	40240000 	.word	0x40240000
 800f168:	401c0000 	.word	0x401c0000
 800f16c:	40140000 	.word	0x40140000
 800f170:	3fe00000 	.word	0x3fe00000
 800f174:	9d01      	ldr	r5, [sp, #4]
 800f176:	4656      	mov	r6, sl
 800f178:	465f      	mov	r7, fp
 800f17a:	4642      	mov	r2, r8
 800f17c:	464b      	mov	r3, r9
 800f17e:	4630      	mov	r0, r6
 800f180:	4639      	mov	r1, r7
 800f182:	f7f1 fb63 	bl	800084c <__aeabi_ddiv>
 800f186:	f7f1 fce7 	bl	8000b58 <__aeabi_d2iz>
 800f18a:	4682      	mov	sl, r0
 800f18c:	f7f1 f9ca 	bl	8000524 <__aeabi_i2d>
 800f190:	4642      	mov	r2, r8
 800f192:	464b      	mov	r3, r9
 800f194:	f7f1 fa30 	bl	80005f8 <__aeabi_dmul>
 800f198:	4602      	mov	r2, r0
 800f19a:	460b      	mov	r3, r1
 800f19c:	4630      	mov	r0, r6
 800f19e:	4639      	mov	r1, r7
 800f1a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f1a4:	f7f1 f870 	bl	8000288 <__aeabi_dsub>
 800f1a8:	f805 6b01 	strb.w	r6, [r5], #1
 800f1ac:	9e01      	ldr	r6, [sp, #4]
 800f1ae:	9f03      	ldr	r7, [sp, #12]
 800f1b0:	1bae      	subs	r6, r5, r6
 800f1b2:	42b7      	cmp	r7, r6
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	d135      	bne.n	800f226 <_dtoa_r+0x6e6>
 800f1ba:	f7f1 f867 	bl	800028c <__adddf3>
 800f1be:	4642      	mov	r2, r8
 800f1c0:	464b      	mov	r3, r9
 800f1c2:	4606      	mov	r6, r0
 800f1c4:	460f      	mov	r7, r1
 800f1c6:	f7f1 fca7 	bl	8000b18 <__aeabi_dcmpgt>
 800f1ca:	b9d0      	cbnz	r0, 800f202 <_dtoa_r+0x6c2>
 800f1cc:	4642      	mov	r2, r8
 800f1ce:	464b      	mov	r3, r9
 800f1d0:	4630      	mov	r0, r6
 800f1d2:	4639      	mov	r1, r7
 800f1d4:	f7f1 fc78 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1d8:	b110      	cbz	r0, 800f1e0 <_dtoa_r+0x6a0>
 800f1da:	f01a 0f01 	tst.w	sl, #1
 800f1de:	d110      	bne.n	800f202 <_dtoa_r+0x6c2>
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	ee18 1a10 	vmov	r1, s16
 800f1e6:	f000 fc2b 	bl	800fa40 <_Bfree>
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	9800      	ldr	r0, [sp, #0]
 800f1ee:	702b      	strb	r3, [r5, #0]
 800f1f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1f2:	3001      	adds	r0, #1
 800f1f4:	6018      	str	r0, [r3, #0]
 800f1f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	f43f acf1 	beq.w	800ebe0 <_dtoa_r+0xa0>
 800f1fe:	601d      	str	r5, [r3, #0]
 800f200:	e4ee      	b.n	800ebe0 <_dtoa_r+0xa0>
 800f202:	9f00      	ldr	r7, [sp, #0]
 800f204:	462b      	mov	r3, r5
 800f206:	461d      	mov	r5, r3
 800f208:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f20c:	2a39      	cmp	r2, #57	; 0x39
 800f20e:	d106      	bne.n	800f21e <_dtoa_r+0x6de>
 800f210:	9a01      	ldr	r2, [sp, #4]
 800f212:	429a      	cmp	r2, r3
 800f214:	d1f7      	bne.n	800f206 <_dtoa_r+0x6c6>
 800f216:	9901      	ldr	r1, [sp, #4]
 800f218:	2230      	movs	r2, #48	; 0x30
 800f21a:	3701      	adds	r7, #1
 800f21c:	700a      	strb	r2, [r1, #0]
 800f21e:	781a      	ldrb	r2, [r3, #0]
 800f220:	3201      	adds	r2, #1
 800f222:	701a      	strb	r2, [r3, #0]
 800f224:	e790      	b.n	800f148 <_dtoa_r+0x608>
 800f226:	4ba6      	ldr	r3, [pc, #664]	; (800f4c0 <_dtoa_r+0x980>)
 800f228:	2200      	movs	r2, #0
 800f22a:	f7f1 f9e5 	bl	80005f8 <__aeabi_dmul>
 800f22e:	2200      	movs	r2, #0
 800f230:	2300      	movs	r3, #0
 800f232:	4606      	mov	r6, r0
 800f234:	460f      	mov	r7, r1
 800f236:	f7f1 fc47 	bl	8000ac8 <__aeabi_dcmpeq>
 800f23a:	2800      	cmp	r0, #0
 800f23c:	d09d      	beq.n	800f17a <_dtoa_r+0x63a>
 800f23e:	e7cf      	b.n	800f1e0 <_dtoa_r+0x6a0>
 800f240:	9a08      	ldr	r2, [sp, #32]
 800f242:	2a00      	cmp	r2, #0
 800f244:	f000 80d7 	beq.w	800f3f6 <_dtoa_r+0x8b6>
 800f248:	9a06      	ldr	r2, [sp, #24]
 800f24a:	2a01      	cmp	r2, #1
 800f24c:	f300 80ba 	bgt.w	800f3c4 <_dtoa_r+0x884>
 800f250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f252:	2a00      	cmp	r2, #0
 800f254:	f000 80b2 	beq.w	800f3bc <_dtoa_r+0x87c>
 800f258:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f25c:	9e07      	ldr	r6, [sp, #28]
 800f25e:	9d04      	ldr	r5, [sp, #16]
 800f260:	9a04      	ldr	r2, [sp, #16]
 800f262:	441a      	add	r2, r3
 800f264:	9204      	str	r2, [sp, #16]
 800f266:	9a05      	ldr	r2, [sp, #20]
 800f268:	2101      	movs	r1, #1
 800f26a:	441a      	add	r2, r3
 800f26c:	4620      	mov	r0, r4
 800f26e:	9205      	str	r2, [sp, #20]
 800f270:	f000 fc9e 	bl	800fbb0 <__i2b>
 800f274:	4607      	mov	r7, r0
 800f276:	2d00      	cmp	r5, #0
 800f278:	dd0c      	ble.n	800f294 <_dtoa_r+0x754>
 800f27a:	9b05      	ldr	r3, [sp, #20]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	dd09      	ble.n	800f294 <_dtoa_r+0x754>
 800f280:	42ab      	cmp	r3, r5
 800f282:	9a04      	ldr	r2, [sp, #16]
 800f284:	bfa8      	it	ge
 800f286:	462b      	movge	r3, r5
 800f288:	1ad2      	subs	r2, r2, r3
 800f28a:	9204      	str	r2, [sp, #16]
 800f28c:	9a05      	ldr	r2, [sp, #20]
 800f28e:	1aed      	subs	r5, r5, r3
 800f290:	1ad3      	subs	r3, r2, r3
 800f292:	9305      	str	r3, [sp, #20]
 800f294:	9b07      	ldr	r3, [sp, #28]
 800f296:	b31b      	cbz	r3, 800f2e0 <_dtoa_r+0x7a0>
 800f298:	9b08      	ldr	r3, [sp, #32]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	f000 80af 	beq.w	800f3fe <_dtoa_r+0x8be>
 800f2a0:	2e00      	cmp	r6, #0
 800f2a2:	dd13      	ble.n	800f2cc <_dtoa_r+0x78c>
 800f2a4:	4639      	mov	r1, r7
 800f2a6:	4632      	mov	r2, r6
 800f2a8:	4620      	mov	r0, r4
 800f2aa:	f000 fd41 	bl	800fd30 <__pow5mult>
 800f2ae:	ee18 2a10 	vmov	r2, s16
 800f2b2:	4601      	mov	r1, r0
 800f2b4:	4607      	mov	r7, r0
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	f000 fc90 	bl	800fbdc <__multiply>
 800f2bc:	ee18 1a10 	vmov	r1, s16
 800f2c0:	4680      	mov	r8, r0
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f000 fbbc 	bl	800fa40 <_Bfree>
 800f2c8:	ee08 8a10 	vmov	s16, r8
 800f2cc:	9b07      	ldr	r3, [sp, #28]
 800f2ce:	1b9a      	subs	r2, r3, r6
 800f2d0:	d006      	beq.n	800f2e0 <_dtoa_r+0x7a0>
 800f2d2:	ee18 1a10 	vmov	r1, s16
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	f000 fd2a 	bl	800fd30 <__pow5mult>
 800f2dc:	ee08 0a10 	vmov	s16, r0
 800f2e0:	2101      	movs	r1, #1
 800f2e2:	4620      	mov	r0, r4
 800f2e4:	f000 fc64 	bl	800fbb0 <__i2b>
 800f2e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	4606      	mov	r6, r0
 800f2ee:	f340 8088 	ble.w	800f402 <_dtoa_r+0x8c2>
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	4601      	mov	r1, r0
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f000 fd1a 	bl	800fd30 <__pow5mult>
 800f2fc:	9b06      	ldr	r3, [sp, #24]
 800f2fe:	2b01      	cmp	r3, #1
 800f300:	4606      	mov	r6, r0
 800f302:	f340 8081 	ble.w	800f408 <_dtoa_r+0x8c8>
 800f306:	f04f 0800 	mov.w	r8, #0
 800f30a:	6933      	ldr	r3, [r6, #16]
 800f30c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f310:	6918      	ldr	r0, [r3, #16]
 800f312:	f000 fbfd 	bl	800fb10 <__hi0bits>
 800f316:	f1c0 0020 	rsb	r0, r0, #32
 800f31a:	9b05      	ldr	r3, [sp, #20]
 800f31c:	4418      	add	r0, r3
 800f31e:	f010 001f 	ands.w	r0, r0, #31
 800f322:	f000 8092 	beq.w	800f44a <_dtoa_r+0x90a>
 800f326:	f1c0 0320 	rsb	r3, r0, #32
 800f32a:	2b04      	cmp	r3, #4
 800f32c:	f340 808a 	ble.w	800f444 <_dtoa_r+0x904>
 800f330:	f1c0 001c 	rsb	r0, r0, #28
 800f334:	9b04      	ldr	r3, [sp, #16]
 800f336:	4403      	add	r3, r0
 800f338:	9304      	str	r3, [sp, #16]
 800f33a:	9b05      	ldr	r3, [sp, #20]
 800f33c:	4403      	add	r3, r0
 800f33e:	4405      	add	r5, r0
 800f340:	9305      	str	r3, [sp, #20]
 800f342:	9b04      	ldr	r3, [sp, #16]
 800f344:	2b00      	cmp	r3, #0
 800f346:	dd07      	ble.n	800f358 <_dtoa_r+0x818>
 800f348:	ee18 1a10 	vmov	r1, s16
 800f34c:	461a      	mov	r2, r3
 800f34e:	4620      	mov	r0, r4
 800f350:	f000 fd48 	bl	800fde4 <__lshift>
 800f354:	ee08 0a10 	vmov	s16, r0
 800f358:	9b05      	ldr	r3, [sp, #20]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	dd05      	ble.n	800f36a <_dtoa_r+0x82a>
 800f35e:	4631      	mov	r1, r6
 800f360:	461a      	mov	r2, r3
 800f362:	4620      	mov	r0, r4
 800f364:	f000 fd3e 	bl	800fde4 <__lshift>
 800f368:	4606      	mov	r6, r0
 800f36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d06e      	beq.n	800f44e <_dtoa_r+0x90e>
 800f370:	ee18 0a10 	vmov	r0, s16
 800f374:	4631      	mov	r1, r6
 800f376:	f000 fda5 	bl	800fec4 <__mcmp>
 800f37a:	2800      	cmp	r0, #0
 800f37c:	da67      	bge.n	800f44e <_dtoa_r+0x90e>
 800f37e:	9b00      	ldr	r3, [sp, #0]
 800f380:	3b01      	subs	r3, #1
 800f382:	ee18 1a10 	vmov	r1, s16
 800f386:	9300      	str	r3, [sp, #0]
 800f388:	220a      	movs	r2, #10
 800f38a:	2300      	movs	r3, #0
 800f38c:	4620      	mov	r0, r4
 800f38e:	f000 fb79 	bl	800fa84 <__multadd>
 800f392:	9b08      	ldr	r3, [sp, #32]
 800f394:	ee08 0a10 	vmov	s16, r0
 800f398:	2b00      	cmp	r3, #0
 800f39a:	f000 81b1 	beq.w	800f700 <_dtoa_r+0xbc0>
 800f39e:	2300      	movs	r3, #0
 800f3a0:	4639      	mov	r1, r7
 800f3a2:	220a      	movs	r2, #10
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f000 fb6d 	bl	800fa84 <__multadd>
 800f3aa:	9b02      	ldr	r3, [sp, #8]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	4607      	mov	r7, r0
 800f3b0:	f300 808e 	bgt.w	800f4d0 <_dtoa_r+0x990>
 800f3b4:	9b06      	ldr	r3, [sp, #24]
 800f3b6:	2b02      	cmp	r3, #2
 800f3b8:	dc51      	bgt.n	800f45e <_dtoa_r+0x91e>
 800f3ba:	e089      	b.n	800f4d0 <_dtoa_r+0x990>
 800f3bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f3be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f3c2:	e74b      	b.n	800f25c <_dtoa_r+0x71c>
 800f3c4:	9b03      	ldr	r3, [sp, #12]
 800f3c6:	1e5e      	subs	r6, r3, #1
 800f3c8:	9b07      	ldr	r3, [sp, #28]
 800f3ca:	42b3      	cmp	r3, r6
 800f3cc:	bfbf      	itttt	lt
 800f3ce:	9b07      	ldrlt	r3, [sp, #28]
 800f3d0:	9607      	strlt	r6, [sp, #28]
 800f3d2:	1af2      	sublt	r2, r6, r3
 800f3d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f3d6:	bfb6      	itet	lt
 800f3d8:	189b      	addlt	r3, r3, r2
 800f3da:	1b9e      	subge	r6, r3, r6
 800f3dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f3de:	9b03      	ldr	r3, [sp, #12]
 800f3e0:	bfb8      	it	lt
 800f3e2:	2600      	movlt	r6, #0
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	bfb7      	itett	lt
 800f3e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f3ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f3f0:	1a9d      	sublt	r5, r3, r2
 800f3f2:	2300      	movlt	r3, #0
 800f3f4:	e734      	b.n	800f260 <_dtoa_r+0x720>
 800f3f6:	9e07      	ldr	r6, [sp, #28]
 800f3f8:	9d04      	ldr	r5, [sp, #16]
 800f3fa:	9f08      	ldr	r7, [sp, #32]
 800f3fc:	e73b      	b.n	800f276 <_dtoa_r+0x736>
 800f3fe:	9a07      	ldr	r2, [sp, #28]
 800f400:	e767      	b.n	800f2d2 <_dtoa_r+0x792>
 800f402:	9b06      	ldr	r3, [sp, #24]
 800f404:	2b01      	cmp	r3, #1
 800f406:	dc18      	bgt.n	800f43a <_dtoa_r+0x8fa>
 800f408:	f1ba 0f00 	cmp.w	sl, #0
 800f40c:	d115      	bne.n	800f43a <_dtoa_r+0x8fa>
 800f40e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f412:	b993      	cbnz	r3, 800f43a <_dtoa_r+0x8fa>
 800f414:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f418:	0d1b      	lsrs	r3, r3, #20
 800f41a:	051b      	lsls	r3, r3, #20
 800f41c:	b183      	cbz	r3, 800f440 <_dtoa_r+0x900>
 800f41e:	9b04      	ldr	r3, [sp, #16]
 800f420:	3301      	adds	r3, #1
 800f422:	9304      	str	r3, [sp, #16]
 800f424:	9b05      	ldr	r3, [sp, #20]
 800f426:	3301      	adds	r3, #1
 800f428:	9305      	str	r3, [sp, #20]
 800f42a:	f04f 0801 	mov.w	r8, #1
 800f42e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f430:	2b00      	cmp	r3, #0
 800f432:	f47f af6a 	bne.w	800f30a <_dtoa_r+0x7ca>
 800f436:	2001      	movs	r0, #1
 800f438:	e76f      	b.n	800f31a <_dtoa_r+0x7da>
 800f43a:	f04f 0800 	mov.w	r8, #0
 800f43e:	e7f6      	b.n	800f42e <_dtoa_r+0x8ee>
 800f440:	4698      	mov	r8, r3
 800f442:	e7f4      	b.n	800f42e <_dtoa_r+0x8ee>
 800f444:	f43f af7d 	beq.w	800f342 <_dtoa_r+0x802>
 800f448:	4618      	mov	r0, r3
 800f44a:	301c      	adds	r0, #28
 800f44c:	e772      	b.n	800f334 <_dtoa_r+0x7f4>
 800f44e:	9b03      	ldr	r3, [sp, #12]
 800f450:	2b00      	cmp	r3, #0
 800f452:	dc37      	bgt.n	800f4c4 <_dtoa_r+0x984>
 800f454:	9b06      	ldr	r3, [sp, #24]
 800f456:	2b02      	cmp	r3, #2
 800f458:	dd34      	ble.n	800f4c4 <_dtoa_r+0x984>
 800f45a:	9b03      	ldr	r3, [sp, #12]
 800f45c:	9302      	str	r3, [sp, #8]
 800f45e:	9b02      	ldr	r3, [sp, #8]
 800f460:	b96b      	cbnz	r3, 800f47e <_dtoa_r+0x93e>
 800f462:	4631      	mov	r1, r6
 800f464:	2205      	movs	r2, #5
 800f466:	4620      	mov	r0, r4
 800f468:	f000 fb0c 	bl	800fa84 <__multadd>
 800f46c:	4601      	mov	r1, r0
 800f46e:	4606      	mov	r6, r0
 800f470:	ee18 0a10 	vmov	r0, s16
 800f474:	f000 fd26 	bl	800fec4 <__mcmp>
 800f478:	2800      	cmp	r0, #0
 800f47a:	f73f adbb 	bgt.w	800eff4 <_dtoa_r+0x4b4>
 800f47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f480:	9d01      	ldr	r5, [sp, #4]
 800f482:	43db      	mvns	r3, r3
 800f484:	9300      	str	r3, [sp, #0]
 800f486:	f04f 0800 	mov.w	r8, #0
 800f48a:	4631      	mov	r1, r6
 800f48c:	4620      	mov	r0, r4
 800f48e:	f000 fad7 	bl	800fa40 <_Bfree>
 800f492:	2f00      	cmp	r7, #0
 800f494:	f43f aea4 	beq.w	800f1e0 <_dtoa_r+0x6a0>
 800f498:	f1b8 0f00 	cmp.w	r8, #0
 800f49c:	d005      	beq.n	800f4aa <_dtoa_r+0x96a>
 800f49e:	45b8      	cmp	r8, r7
 800f4a0:	d003      	beq.n	800f4aa <_dtoa_r+0x96a>
 800f4a2:	4641      	mov	r1, r8
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	f000 facb 	bl	800fa40 <_Bfree>
 800f4aa:	4639      	mov	r1, r7
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	f000 fac7 	bl	800fa40 <_Bfree>
 800f4b2:	e695      	b.n	800f1e0 <_dtoa_r+0x6a0>
 800f4b4:	2600      	movs	r6, #0
 800f4b6:	4637      	mov	r7, r6
 800f4b8:	e7e1      	b.n	800f47e <_dtoa_r+0x93e>
 800f4ba:	9700      	str	r7, [sp, #0]
 800f4bc:	4637      	mov	r7, r6
 800f4be:	e599      	b.n	800eff4 <_dtoa_r+0x4b4>
 800f4c0:	40240000 	.word	0x40240000
 800f4c4:	9b08      	ldr	r3, [sp, #32]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	f000 80ca 	beq.w	800f660 <_dtoa_r+0xb20>
 800f4cc:	9b03      	ldr	r3, [sp, #12]
 800f4ce:	9302      	str	r3, [sp, #8]
 800f4d0:	2d00      	cmp	r5, #0
 800f4d2:	dd05      	ble.n	800f4e0 <_dtoa_r+0x9a0>
 800f4d4:	4639      	mov	r1, r7
 800f4d6:	462a      	mov	r2, r5
 800f4d8:	4620      	mov	r0, r4
 800f4da:	f000 fc83 	bl	800fde4 <__lshift>
 800f4de:	4607      	mov	r7, r0
 800f4e0:	f1b8 0f00 	cmp.w	r8, #0
 800f4e4:	d05b      	beq.n	800f59e <_dtoa_r+0xa5e>
 800f4e6:	6879      	ldr	r1, [r7, #4]
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	f000 fa69 	bl	800f9c0 <_Balloc>
 800f4ee:	4605      	mov	r5, r0
 800f4f0:	b928      	cbnz	r0, 800f4fe <_dtoa_r+0x9be>
 800f4f2:	4b87      	ldr	r3, [pc, #540]	; (800f710 <_dtoa_r+0xbd0>)
 800f4f4:	4602      	mov	r2, r0
 800f4f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f4fa:	f7ff bb3b 	b.w	800eb74 <_dtoa_r+0x34>
 800f4fe:	693a      	ldr	r2, [r7, #16]
 800f500:	3202      	adds	r2, #2
 800f502:	0092      	lsls	r2, r2, #2
 800f504:	f107 010c 	add.w	r1, r7, #12
 800f508:	300c      	adds	r0, #12
 800f50a:	f7fe fb4a 	bl	800dba2 <memcpy>
 800f50e:	2201      	movs	r2, #1
 800f510:	4629      	mov	r1, r5
 800f512:	4620      	mov	r0, r4
 800f514:	f000 fc66 	bl	800fde4 <__lshift>
 800f518:	9b01      	ldr	r3, [sp, #4]
 800f51a:	f103 0901 	add.w	r9, r3, #1
 800f51e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f522:	4413      	add	r3, r2
 800f524:	9305      	str	r3, [sp, #20]
 800f526:	f00a 0301 	and.w	r3, sl, #1
 800f52a:	46b8      	mov	r8, r7
 800f52c:	9304      	str	r3, [sp, #16]
 800f52e:	4607      	mov	r7, r0
 800f530:	4631      	mov	r1, r6
 800f532:	ee18 0a10 	vmov	r0, s16
 800f536:	f7ff fa77 	bl	800ea28 <quorem>
 800f53a:	4641      	mov	r1, r8
 800f53c:	9002      	str	r0, [sp, #8]
 800f53e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f542:	ee18 0a10 	vmov	r0, s16
 800f546:	f000 fcbd 	bl	800fec4 <__mcmp>
 800f54a:	463a      	mov	r2, r7
 800f54c:	9003      	str	r0, [sp, #12]
 800f54e:	4631      	mov	r1, r6
 800f550:	4620      	mov	r0, r4
 800f552:	f000 fcd3 	bl	800fefc <__mdiff>
 800f556:	68c2      	ldr	r2, [r0, #12]
 800f558:	f109 3bff 	add.w	fp, r9, #4294967295
 800f55c:	4605      	mov	r5, r0
 800f55e:	bb02      	cbnz	r2, 800f5a2 <_dtoa_r+0xa62>
 800f560:	4601      	mov	r1, r0
 800f562:	ee18 0a10 	vmov	r0, s16
 800f566:	f000 fcad 	bl	800fec4 <__mcmp>
 800f56a:	4602      	mov	r2, r0
 800f56c:	4629      	mov	r1, r5
 800f56e:	4620      	mov	r0, r4
 800f570:	9207      	str	r2, [sp, #28]
 800f572:	f000 fa65 	bl	800fa40 <_Bfree>
 800f576:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f57a:	ea43 0102 	orr.w	r1, r3, r2
 800f57e:	9b04      	ldr	r3, [sp, #16]
 800f580:	430b      	orrs	r3, r1
 800f582:	464d      	mov	r5, r9
 800f584:	d10f      	bne.n	800f5a6 <_dtoa_r+0xa66>
 800f586:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f58a:	d02a      	beq.n	800f5e2 <_dtoa_r+0xaa2>
 800f58c:	9b03      	ldr	r3, [sp, #12]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	dd02      	ble.n	800f598 <_dtoa_r+0xa58>
 800f592:	9b02      	ldr	r3, [sp, #8]
 800f594:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f598:	f88b a000 	strb.w	sl, [fp]
 800f59c:	e775      	b.n	800f48a <_dtoa_r+0x94a>
 800f59e:	4638      	mov	r0, r7
 800f5a0:	e7ba      	b.n	800f518 <_dtoa_r+0x9d8>
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	e7e2      	b.n	800f56c <_dtoa_r+0xa2c>
 800f5a6:	9b03      	ldr	r3, [sp, #12]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	db04      	blt.n	800f5b6 <_dtoa_r+0xa76>
 800f5ac:	9906      	ldr	r1, [sp, #24]
 800f5ae:	430b      	orrs	r3, r1
 800f5b0:	9904      	ldr	r1, [sp, #16]
 800f5b2:	430b      	orrs	r3, r1
 800f5b4:	d122      	bne.n	800f5fc <_dtoa_r+0xabc>
 800f5b6:	2a00      	cmp	r2, #0
 800f5b8:	ddee      	ble.n	800f598 <_dtoa_r+0xa58>
 800f5ba:	ee18 1a10 	vmov	r1, s16
 800f5be:	2201      	movs	r2, #1
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	f000 fc0f 	bl	800fde4 <__lshift>
 800f5c6:	4631      	mov	r1, r6
 800f5c8:	ee08 0a10 	vmov	s16, r0
 800f5cc:	f000 fc7a 	bl	800fec4 <__mcmp>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	dc03      	bgt.n	800f5dc <_dtoa_r+0xa9c>
 800f5d4:	d1e0      	bne.n	800f598 <_dtoa_r+0xa58>
 800f5d6:	f01a 0f01 	tst.w	sl, #1
 800f5da:	d0dd      	beq.n	800f598 <_dtoa_r+0xa58>
 800f5dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f5e0:	d1d7      	bne.n	800f592 <_dtoa_r+0xa52>
 800f5e2:	2339      	movs	r3, #57	; 0x39
 800f5e4:	f88b 3000 	strb.w	r3, [fp]
 800f5e8:	462b      	mov	r3, r5
 800f5ea:	461d      	mov	r5, r3
 800f5ec:	3b01      	subs	r3, #1
 800f5ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f5f2:	2a39      	cmp	r2, #57	; 0x39
 800f5f4:	d071      	beq.n	800f6da <_dtoa_r+0xb9a>
 800f5f6:	3201      	adds	r2, #1
 800f5f8:	701a      	strb	r2, [r3, #0]
 800f5fa:	e746      	b.n	800f48a <_dtoa_r+0x94a>
 800f5fc:	2a00      	cmp	r2, #0
 800f5fe:	dd07      	ble.n	800f610 <_dtoa_r+0xad0>
 800f600:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f604:	d0ed      	beq.n	800f5e2 <_dtoa_r+0xaa2>
 800f606:	f10a 0301 	add.w	r3, sl, #1
 800f60a:	f88b 3000 	strb.w	r3, [fp]
 800f60e:	e73c      	b.n	800f48a <_dtoa_r+0x94a>
 800f610:	9b05      	ldr	r3, [sp, #20]
 800f612:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f616:	4599      	cmp	r9, r3
 800f618:	d047      	beq.n	800f6aa <_dtoa_r+0xb6a>
 800f61a:	ee18 1a10 	vmov	r1, s16
 800f61e:	2300      	movs	r3, #0
 800f620:	220a      	movs	r2, #10
 800f622:	4620      	mov	r0, r4
 800f624:	f000 fa2e 	bl	800fa84 <__multadd>
 800f628:	45b8      	cmp	r8, r7
 800f62a:	ee08 0a10 	vmov	s16, r0
 800f62e:	f04f 0300 	mov.w	r3, #0
 800f632:	f04f 020a 	mov.w	r2, #10
 800f636:	4641      	mov	r1, r8
 800f638:	4620      	mov	r0, r4
 800f63a:	d106      	bne.n	800f64a <_dtoa_r+0xb0a>
 800f63c:	f000 fa22 	bl	800fa84 <__multadd>
 800f640:	4680      	mov	r8, r0
 800f642:	4607      	mov	r7, r0
 800f644:	f109 0901 	add.w	r9, r9, #1
 800f648:	e772      	b.n	800f530 <_dtoa_r+0x9f0>
 800f64a:	f000 fa1b 	bl	800fa84 <__multadd>
 800f64e:	4639      	mov	r1, r7
 800f650:	4680      	mov	r8, r0
 800f652:	2300      	movs	r3, #0
 800f654:	220a      	movs	r2, #10
 800f656:	4620      	mov	r0, r4
 800f658:	f000 fa14 	bl	800fa84 <__multadd>
 800f65c:	4607      	mov	r7, r0
 800f65e:	e7f1      	b.n	800f644 <_dtoa_r+0xb04>
 800f660:	9b03      	ldr	r3, [sp, #12]
 800f662:	9302      	str	r3, [sp, #8]
 800f664:	9d01      	ldr	r5, [sp, #4]
 800f666:	ee18 0a10 	vmov	r0, s16
 800f66a:	4631      	mov	r1, r6
 800f66c:	f7ff f9dc 	bl	800ea28 <quorem>
 800f670:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f674:	9b01      	ldr	r3, [sp, #4]
 800f676:	f805 ab01 	strb.w	sl, [r5], #1
 800f67a:	1aea      	subs	r2, r5, r3
 800f67c:	9b02      	ldr	r3, [sp, #8]
 800f67e:	4293      	cmp	r3, r2
 800f680:	dd09      	ble.n	800f696 <_dtoa_r+0xb56>
 800f682:	ee18 1a10 	vmov	r1, s16
 800f686:	2300      	movs	r3, #0
 800f688:	220a      	movs	r2, #10
 800f68a:	4620      	mov	r0, r4
 800f68c:	f000 f9fa 	bl	800fa84 <__multadd>
 800f690:	ee08 0a10 	vmov	s16, r0
 800f694:	e7e7      	b.n	800f666 <_dtoa_r+0xb26>
 800f696:	9b02      	ldr	r3, [sp, #8]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	bfc8      	it	gt
 800f69c:	461d      	movgt	r5, r3
 800f69e:	9b01      	ldr	r3, [sp, #4]
 800f6a0:	bfd8      	it	le
 800f6a2:	2501      	movle	r5, #1
 800f6a4:	441d      	add	r5, r3
 800f6a6:	f04f 0800 	mov.w	r8, #0
 800f6aa:	ee18 1a10 	vmov	r1, s16
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f000 fb97 	bl	800fde4 <__lshift>
 800f6b6:	4631      	mov	r1, r6
 800f6b8:	ee08 0a10 	vmov	s16, r0
 800f6bc:	f000 fc02 	bl	800fec4 <__mcmp>
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	dc91      	bgt.n	800f5e8 <_dtoa_r+0xaa8>
 800f6c4:	d102      	bne.n	800f6cc <_dtoa_r+0xb8c>
 800f6c6:	f01a 0f01 	tst.w	sl, #1
 800f6ca:	d18d      	bne.n	800f5e8 <_dtoa_r+0xaa8>
 800f6cc:	462b      	mov	r3, r5
 800f6ce:	461d      	mov	r5, r3
 800f6d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f6d4:	2a30      	cmp	r2, #48	; 0x30
 800f6d6:	d0fa      	beq.n	800f6ce <_dtoa_r+0xb8e>
 800f6d8:	e6d7      	b.n	800f48a <_dtoa_r+0x94a>
 800f6da:	9a01      	ldr	r2, [sp, #4]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d184      	bne.n	800f5ea <_dtoa_r+0xaaa>
 800f6e0:	9b00      	ldr	r3, [sp, #0]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	9300      	str	r3, [sp, #0]
 800f6e6:	2331      	movs	r3, #49	; 0x31
 800f6e8:	7013      	strb	r3, [r2, #0]
 800f6ea:	e6ce      	b.n	800f48a <_dtoa_r+0x94a>
 800f6ec:	4b09      	ldr	r3, [pc, #36]	; (800f714 <_dtoa_r+0xbd4>)
 800f6ee:	f7ff ba95 	b.w	800ec1c <_dtoa_r+0xdc>
 800f6f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	f47f aa6e 	bne.w	800ebd6 <_dtoa_r+0x96>
 800f6fa:	4b07      	ldr	r3, [pc, #28]	; (800f718 <_dtoa_r+0xbd8>)
 800f6fc:	f7ff ba8e 	b.w	800ec1c <_dtoa_r+0xdc>
 800f700:	9b02      	ldr	r3, [sp, #8]
 800f702:	2b00      	cmp	r3, #0
 800f704:	dcae      	bgt.n	800f664 <_dtoa_r+0xb24>
 800f706:	9b06      	ldr	r3, [sp, #24]
 800f708:	2b02      	cmp	r3, #2
 800f70a:	f73f aea8 	bgt.w	800f45e <_dtoa_r+0x91e>
 800f70e:	e7a9      	b.n	800f664 <_dtoa_r+0xb24>
 800f710:	080122cf 	.word	0x080122cf
 800f714:	0801222c 	.word	0x0801222c
 800f718:	08012250 	.word	0x08012250

0800f71c <__sflush_r>:
 800f71c:	898a      	ldrh	r2, [r1, #12]
 800f71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f722:	4605      	mov	r5, r0
 800f724:	0710      	lsls	r0, r2, #28
 800f726:	460c      	mov	r4, r1
 800f728:	d458      	bmi.n	800f7dc <__sflush_r+0xc0>
 800f72a:	684b      	ldr	r3, [r1, #4]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	dc05      	bgt.n	800f73c <__sflush_r+0x20>
 800f730:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f732:	2b00      	cmp	r3, #0
 800f734:	dc02      	bgt.n	800f73c <__sflush_r+0x20>
 800f736:	2000      	movs	r0, #0
 800f738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f73c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f73e:	2e00      	cmp	r6, #0
 800f740:	d0f9      	beq.n	800f736 <__sflush_r+0x1a>
 800f742:	2300      	movs	r3, #0
 800f744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f748:	682f      	ldr	r7, [r5, #0]
 800f74a:	602b      	str	r3, [r5, #0]
 800f74c:	d032      	beq.n	800f7b4 <__sflush_r+0x98>
 800f74e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f750:	89a3      	ldrh	r3, [r4, #12]
 800f752:	075a      	lsls	r2, r3, #29
 800f754:	d505      	bpl.n	800f762 <__sflush_r+0x46>
 800f756:	6863      	ldr	r3, [r4, #4]
 800f758:	1ac0      	subs	r0, r0, r3
 800f75a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f75c:	b10b      	cbz	r3, 800f762 <__sflush_r+0x46>
 800f75e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f760:	1ac0      	subs	r0, r0, r3
 800f762:	2300      	movs	r3, #0
 800f764:	4602      	mov	r2, r0
 800f766:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f768:	6a21      	ldr	r1, [r4, #32]
 800f76a:	4628      	mov	r0, r5
 800f76c:	47b0      	blx	r6
 800f76e:	1c43      	adds	r3, r0, #1
 800f770:	89a3      	ldrh	r3, [r4, #12]
 800f772:	d106      	bne.n	800f782 <__sflush_r+0x66>
 800f774:	6829      	ldr	r1, [r5, #0]
 800f776:	291d      	cmp	r1, #29
 800f778:	d82c      	bhi.n	800f7d4 <__sflush_r+0xb8>
 800f77a:	4a2a      	ldr	r2, [pc, #168]	; (800f824 <__sflush_r+0x108>)
 800f77c:	40ca      	lsrs	r2, r1
 800f77e:	07d6      	lsls	r6, r2, #31
 800f780:	d528      	bpl.n	800f7d4 <__sflush_r+0xb8>
 800f782:	2200      	movs	r2, #0
 800f784:	6062      	str	r2, [r4, #4]
 800f786:	04d9      	lsls	r1, r3, #19
 800f788:	6922      	ldr	r2, [r4, #16]
 800f78a:	6022      	str	r2, [r4, #0]
 800f78c:	d504      	bpl.n	800f798 <__sflush_r+0x7c>
 800f78e:	1c42      	adds	r2, r0, #1
 800f790:	d101      	bne.n	800f796 <__sflush_r+0x7a>
 800f792:	682b      	ldr	r3, [r5, #0]
 800f794:	b903      	cbnz	r3, 800f798 <__sflush_r+0x7c>
 800f796:	6560      	str	r0, [r4, #84]	; 0x54
 800f798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f79a:	602f      	str	r7, [r5, #0]
 800f79c:	2900      	cmp	r1, #0
 800f79e:	d0ca      	beq.n	800f736 <__sflush_r+0x1a>
 800f7a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7a4:	4299      	cmp	r1, r3
 800f7a6:	d002      	beq.n	800f7ae <__sflush_r+0x92>
 800f7a8:	4628      	mov	r0, r5
 800f7aa:	f000 fca3 	bl	80100f4 <_free_r>
 800f7ae:	2000      	movs	r0, #0
 800f7b0:	6360      	str	r0, [r4, #52]	; 0x34
 800f7b2:	e7c1      	b.n	800f738 <__sflush_r+0x1c>
 800f7b4:	6a21      	ldr	r1, [r4, #32]
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	47b0      	blx	r6
 800f7bc:	1c41      	adds	r1, r0, #1
 800f7be:	d1c7      	bne.n	800f750 <__sflush_r+0x34>
 800f7c0:	682b      	ldr	r3, [r5, #0]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d0c4      	beq.n	800f750 <__sflush_r+0x34>
 800f7c6:	2b1d      	cmp	r3, #29
 800f7c8:	d001      	beq.n	800f7ce <__sflush_r+0xb2>
 800f7ca:	2b16      	cmp	r3, #22
 800f7cc:	d101      	bne.n	800f7d2 <__sflush_r+0xb6>
 800f7ce:	602f      	str	r7, [r5, #0]
 800f7d0:	e7b1      	b.n	800f736 <__sflush_r+0x1a>
 800f7d2:	89a3      	ldrh	r3, [r4, #12]
 800f7d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7d8:	81a3      	strh	r3, [r4, #12]
 800f7da:	e7ad      	b.n	800f738 <__sflush_r+0x1c>
 800f7dc:	690f      	ldr	r7, [r1, #16]
 800f7de:	2f00      	cmp	r7, #0
 800f7e0:	d0a9      	beq.n	800f736 <__sflush_r+0x1a>
 800f7e2:	0793      	lsls	r3, r2, #30
 800f7e4:	680e      	ldr	r6, [r1, #0]
 800f7e6:	bf08      	it	eq
 800f7e8:	694b      	ldreq	r3, [r1, #20]
 800f7ea:	600f      	str	r7, [r1, #0]
 800f7ec:	bf18      	it	ne
 800f7ee:	2300      	movne	r3, #0
 800f7f0:	eba6 0807 	sub.w	r8, r6, r7
 800f7f4:	608b      	str	r3, [r1, #8]
 800f7f6:	f1b8 0f00 	cmp.w	r8, #0
 800f7fa:	dd9c      	ble.n	800f736 <__sflush_r+0x1a>
 800f7fc:	6a21      	ldr	r1, [r4, #32]
 800f7fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f800:	4643      	mov	r3, r8
 800f802:	463a      	mov	r2, r7
 800f804:	4628      	mov	r0, r5
 800f806:	47b0      	blx	r6
 800f808:	2800      	cmp	r0, #0
 800f80a:	dc06      	bgt.n	800f81a <__sflush_r+0xfe>
 800f80c:	89a3      	ldrh	r3, [r4, #12]
 800f80e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f812:	81a3      	strh	r3, [r4, #12]
 800f814:	f04f 30ff 	mov.w	r0, #4294967295
 800f818:	e78e      	b.n	800f738 <__sflush_r+0x1c>
 800f81a:	4407      	add	r7, r0
 800f81c:	eba8 0800 	sub.w	r8, r8, r0
 800f820:	e7e9      	b.n	800f7f6 <__sflush_r+0xda>
 800f822:	bf00      	nop
 800f824:	20400001 	.word	0x20400001

0800f828 <_fflush_r>:
 800f828:	b538      	push	{r3, r4, r5, lr}
 800f82a:	690b      	ldr	r3, [r1, #16]
 800f82c:	4605      	mov	r5, r0
 800f82e:	460c      	mov	r4, r1
 800f830:	b913      	cbnz	r3, 800f838 <_fflush_r+0x10>
 800f832:	2500      	movs	r5, #0
 800f834:	4628      	mov	r0, r5
 800f836:	bd38      	pop	{r3, r4, r5, pc}
 800f838:	b118      	cbz	r0, 800f842 <_fflush_r+0x1a>
 800f83a:	6983      	ldr	r3, [r0, #24]
 800f83c:	b90b      	cbnz	r3, 800f842 <_fflush_r+0x1a>
 800f83e:	f7fe f8eb 	bl	800da18 <__sinit>
 800f842:	4b14      	ldr	r3, [pc, #80]	; (800f894 <_fflush_r+0x6c>)
 800f844:	429c      	cmp	r4, r3
 800f846:	d11b      	bne.n	800f880 <_fflush_r+0x58>
 800f848:	686c      	ldr	r4, [r5, #4]
 800f84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d0ef      	beq.n	800f832 <_fflush_r+0xa>
 800f852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f854:	07d0      	lsls	r0, r2, #31
 800f856:	d404      	bmi.n	800f862 <_fflush_r+0x3a>
 800f858:	0599      	lsls	r1, r3, #22
 800f85a:	d402      	bmi.n	800f862 <_fflush_r+0x3a>
 800f85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f85e:	f7fe f99e 	bl	800db9e <__retarget_lock_acquire_recursive>
 800f862:	4628      	mov	r0, r5
 800f864:	4621      	mov	r1, r4
 800f866:	f7ff ff59 	bl	800f71c <__sflush_r>
 800f86a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f86c:	07da      	lsls	r2, r3, #31
 800f86e:	4605      	mov	r5, r0
 800f870:	d4e0      	bmi.n	800f834 <_fflush_r+0xc>
 800f872:	89a3      	ldrh	r3, [r4, #12]
 800f874:	059b      	lsls	r3, r3, #22
 800f876:	d4dd      	bmi.n	800f834 <_fflush_r+0xc>
 800f878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f87a:	f7fe f991 	bl	800dba0 <__retarget_lock_release_recursive>
 800f87e:	e7d9      	b.n	800f834 <_fflush_r+0xc>
 800f880:	4b05      	ldr	r3, [pc, #20]	; (800f898 <_fflush_r+0x70>)
 800f882:	429c      	cmp	r4, r3
 800f884:	d101      	bne.n	800f88a <_fflush_r+0x62>
 800f886:	68ac      	ldr	r4, [r5, #8]
 800f888:	e7df      	b.n	800f84a <_fflush_r+0x22>
 800f88a:	4b04      	ldr	r3, [pc, #16]	; (800f89c <_fflush_r+0x74>)
 800f88c:	429c      	cmp	r4, r3
 800f88e:	bf08      	it	eq
 800f890:	68ec      	ldreq	r4, [r5, #12]
 800f892:	e7da      	b.n	800f84a <_fflush_r+0x22>
 800f894:	080121d8 	.word	0x080121d8
 800f898:	080121f8 	.word	0x080121f8
 800f89c:	080121b8 	.word	0x080121b8

0800f8a0 <_localeconv_r>:
 800f8a0:	4800      	ldr	r0, [pc, #0]	; (800f8a4 <_localeconv_r+0x4>)
 800f8a2:	4770      	bx	lr
 800f8a4:	200001f4 	.word	0x200001f4

0800f8a8 <_lseek_r>:
 800f8a8:	b538      	push	{r3, r4, r5, lr}
 800f8aa:	4d07      	ldr	r5, [pc, #28]	; (800f8c8 <_lseek_r+0x20>)
 800f8ac:	4604      	mov	r4, r0
 800f8ae:	4608      	mov	r0, r1
 800f8b0:	4611      	mov	r1, r2
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	602a      	str	r2, [r5, #0]
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	f7f4 f8ae 	bl	8003a18 <_lseek>
 800f8bc:	1c43      	adds	r3, r0, #1
 800f8be:	d102      	bne.n	800f8c6 <_lseek_r+0x1e>
 800f8c0:	682b      	ldr	r3, [r5, #0]
 800f8c2:	b103      	cbz	r3, 800f8c6 <_lseek_r+0x1e>
 800f8c4:	6023      	str	r3, [r4, #0]
 800f8c6:	bd38      	pop	{r3, r4, r5, pc}
 800f8c8:	20005aac 	.word	0x20005aac

0800f8cc <__swhatbuf_r>:
 800f8cc:	b570      	push	{r4, r5, r6, lr}
 800f8ce:	460e      	mov	r6, r1
 800f8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8d4:	2900      	cmp	r1, #0
 800f8d6:	b096      	sub	sp, #88	; 0x58
 800f8d8:	4614      	mov	r4, r2
 800f8da:	461d      	mov	r5, r3
 800f8dc:	da08      	bge.n	800f8f0 <__swhatbuf_r+0x24>
 800f8de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	602a      	str	r2, [r5, #0]
 800f8e6:	061a      	lsls	r2, r3, #24
 800f8e8:	d410      	bmi.n	800f90c <__swhatbuf_r+0x40>
 800f8ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8ee:	e00e      	b.n	800f90e <__swhatbuf_r+0x42>
 800f8f0:	466a      	mov	r2, sp
 800f8f2:	f000 fde7 	bl	80104c4 <_fstat_r>
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	dbf1      	blt.n	800f8de <__swhatbuf_r+0x12>
 800f8fa:	9a01      	ldr	r2, [sp, #4]
 800f8fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f900:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f904:	425a      	negs	r2, r3
 800f906:	415a      	adcs	r2, r3
 800f908:	602a      	str	r2, [r5, #0]
 800f90a:	e7ee      	b.n	800f8ea <__swhatbuf_r+0x1e>
 800f90c:	2340      	movs	r3, #64	; 0x40
 800f90e:	2000      	movs	r0, #0
 800f910:	6023      	str	r3, [r4, #0]
 800f912:	b016      	add	sp, #88	; 0x58
 800f914:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f918 <__smakebuf_r>:
 800f918:	898b      	ldrh	r3, [r1, #12]
 800f91a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f91c:	079d      	lsls	r5, r3, #30
 800f91e:	4606      	mov	r6, r0
 800f920:	460c      	mov	r4, r1
 800f922:	d507      	bpl.n	800f934 <__smakebuf_r+0x1c>
 800f924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f928:	6023      	str	r3, [r4, #0]
 800f92a:	6123      	str	r3, [r4, #16]
 800f92c:	2301      	movs	r3, #1
 800f92e:	6163      	str	r3, [r4, #20]
 800f930:	b002      	add	sp, #8
 800f932:	bd70      	pop	{r4, r5, r6, pc}
 800f934:	ab01      	add	r3, sp, #4
 800f936:	466a      	mov	r2, sp
 800f938:	f7ff ffc8 	bl	800f8cc <__swhatbuf_r>
 800f93c:	9900      	ldr	r1, [sp, #0]
 800f93e:	4605      	mov	r5, r0
 800f940:	4630      	mov	r0, r6
 800f942:	f7fe f965 	bl	800dc10 <_malloc_r>
 800f946:	b948      	cbnz	r0, 800f95c <__smakebuf_r+0x44>
 800f948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f94c:	059a      	lsls	r2, r3, #22
 800f94e:	d4ef      	bmi.n	800f930 <__smakebuf_r+0x18>
 800f950:	f023 0303 	bic.w	r3, r3, #3
 800f954:	f043 0302 	orr.w	r3, r3, #2
 800f958:	81a3      	strh	r3, [r4, #12]
 800f95a:	e7e3      	b.n	800f924 <__smakebuf_r+0xc>
 800f95c:	4b0d      	ldr	r3, [pc, #52]	; (800f994 <__smakebuf_r+0x7c>)
 800f95e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f960:	89a3      	ldrh	r3, [r4, #12]
 800f962:	6020      	str	r0, [r4, #0]
 800f964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f968:	81a3      	strh	r3, [r4, #12]
 800f96a:	9b00      	ldr	r3, [sp, #0]
 800f96c:	6163      	str	r3, [r4, #20]
 800f96e:	9b01      	ldr	r3, [sp, #4]
 800f970:	6120      	str	r0, [r4, #16]
 800f972:	b15b      	cbz	r3, 800f98c <__smakebuf_r+0x74>
 800f974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f978:	4630      	mov	r0, r6
 800f97a:	f000 fdb5 	bl	80104e8 <_isatty_r>
 800f97e:	b128      	cbz	r0, 800f98c <__smakebuf_r+0x74>
 800f980:	89a3      	ldrh	r3, [r4, #12]
 800f982:	f023 0303 	bic.w	r3, r3, #3
 800f986:	f043 0301 	orr.w	r3, r3, #1
 800f98a:	81a3      	strh	r3, [r4, #12]
 800f98c:	89a0      	ldrh	r0, [r4, #12]
 800f98e:	4305      	orrs	r5, r0
 800f990:	81a5      	strh	r5, [r4, #12]
 800f992:	e7cd      	b.n	800f930 <__smakebuf_r+0x18>
 800f994:	0800d9b1 	.word	0x0800d9b1

0800f998 <malloc>:
 800f998:	4b02      	ldr	r3, [pc, #8]	; (800f9a4 <malloc+0xc>)
 800f99a:	4601      	mov	r1, r0
 800f99c:	6818      	ldr	r0, [r3, #0]
 800f99e:	f7fe b937 	b.w	800dc10 <_malloc_r>
 800f9a2:	bf00      	nop
 800f9a4:	200000a0 	.word	0x200000a0

0800f9a8 <__malloc_lock>:
 800f9a8:	4801      	ldr	r0, [pc, #4]	; (800f9b0 <__malloc_lock+0x8>)
 800f9aa:	f7fe b8f8 	b.w	800db9e <__retarget_lock_acquire_recursive>
 800f9ae:	bf00      	nop
 800f9b0:	20005aa0 	.word	0x20005aa0

0800f9b4 <__malloc_unlock>:
 800f9b4:	4801      	ldr	r0, [pc, #4]	; (800f9bc <__malloc_unlock+0x8>)
 800f9b6:	f7fe b8f3 	b.w	800dba0 <__retarget_lock_release_recursive>
 800f9ba:	bf00      	nop
 800f9bc:	20005aa0 	.word	0x20005aa0

0800f9c0 <_Balloc>:
 800f9c0:	b570      	push	{r4, r5, r6, lr}
 800f9c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f9c4:	4604      	mov	r4, r0
 800f9c6:	460d      	mov	r5, r1
 800f9c8:	b976      	cbnz	r6, 800f9e8 <_Balloc+0x28>
 800f9ca:	2010      	movs	r0, #16
 800f9cc:	f7ff ffe4 	bl	800f998 <malloc>
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	6260      	str	r0, [r4, #36]	; 0x24
 800f9d4:	b920      	cbnz	r0, 800f9e0 <_Balloc+0x20>
 800f9d6:	4b18      	ldr	r3, [pc, #96]	; (800fa38 <_Balloc+0x78>)
 800f9d8:	4818      	ldr	r0, [pc, #96]	; (800fa3c <_Balloc+0x7c>)
 800f9da:	2166      	movs	r1, #102	; 0x66
 800f9dc:	f000 fd42 	bl	8010464 <__assert_func>
 800f9e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f9e4:	6006      	str	r6, [r0, #0]
 800f9e6:	60c6      	str	r6, [r0, #12]
 800f9e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f9ea:	68f3      	ldr	r3, [r6, #12]
 800f9ec:	b183      	cbz	r3, 800fa10 <_Balloc+0x50>
 800f9ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9f0:	68db      	ldr	r3, [r3, #12]
 800f9f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f9f6:	b9b8      	cbnz	r0, 800fa28 <_Balloc+0x68>
 800f9f8:	2101      	movs	r1, #1
 800f9fa:	fa01 f605 	lsl.w	r6, r1, r5
 800f9fe:	1d72      	adds	r2, r6, #5
 800fa00:	0092      	lsls	r2, r2, #2
 800fa02:	4620      	mov	r0, r4
 800fa04:	f000 fb60 	bl	80100c8 <_calloc_r>
 800fa08:	b160      	cbz	r0, 800fa24 <_Balloc+0x64>
 800fa0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fa0e:	e00e      	b.n	800fa2e <_Balloc+0x6e>
 800fa10:	2221      	movs	r2, #33	; 0x21
 800fa12:	2104      	movs	r1, #4
 800fa14:	4620      	mov	r0, r4
 800fa16:	f000 fb57 	bl	80100c8 <_calloc_r>
 800fa1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa1c:	60f0      	str	r0, [r6, #12]
 800fa1e:	68db      	ldr	r3, [r3, #12]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d1e4      	bne.n	800f9ee <_Balloc+0x2e>
 800fa24:	2000      	movs	r0, #0
 800fa26:	bd70      	pop	{r4, r5, r6, pc}
 800fa28:	6802      	ldr	r2, [r0, #0]
 800fa2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fa2e:	2300      	movs	r3, #0
 800fa30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fa34:	e7f7      	b.n	800fa26 <_Balloc+0x66>
 800fa36:	bf00      	nop
 800fa38:	0801225d 	.word	0x0801225d
 800fa3c:	080122e0 	.word	0x080122e0

0800fa40 <_Bfree>:
 800fa40:	b570      	push	{r4, r5, r6, lr}
 800fa42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fa44:	4605      	mov	r5, r0
 800fa46:	460c      	mov	r4, r1
 800fa48:	b976      	cbnz	r6, 800fa68 <_Bfree+0x28>
 800fa4a:	2010      	movs	r0, #16
 800fa4c:	f7ff ffa4 	bl	800f998 <malloc>
 800fa50:	4602      	mov	r2, r0
 800fa52:	6268      	str	r0, [r5, #36]	; 0x24
 800fa54:	b920      	cbnz	r0, 800fa60 <_Bfree+0x20>
 800fa56:	4b09      	ldr	r3, [pc, #36]	; (800fa7c <_Bfree+0x3c>)
 800fa58:	4809      	ldr	r0, [pc, #36]	; (800fa80 <_Bfree+0x40>)
 800fa5a:	218a      	movs	r1, #138	; 0x8a
 800fa5c:	f000 fd02 	bl	8010464 <__assert_func>
 800fa60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa64:	6006      	str	r6, [r0, #0]
 800fa66:	60c6      	str	r6, [r0, #12]
 800fa68:	b13c      	cbz	r4, 800fa7a <_Bfree+0x3a>
 800fa6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fa6c:	6862      	ldr	r2, [r4, #4]
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fa74:	6021      	str	r1, [r4, #0]
 800fa76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fa7a:	bd70      	pop	{r4, r5, r6, pc}
 800fa7c:	0801225d 	.word	0x0801225d
 800fa80:	080122e0 	.word	0x080122e0

0800fa84 <__multadd>:
 800fa84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa88:	690d      	ldr	r5, [r1, #16]
 800fa8a:	4607      	mov	r7, r0
 800fa8c:	460c      	mov	r4, r1
 800fa8e:	461e      	mov	r6, r3
 800fa90:	f101 0c14 	add.w	ip, r1, #20
 800fa94:	2000      	movs	r0, #0
 800fa96:	f8dc 3000 	ldr.w	r3, [ip]
 800fa9a:	b299      	uxth	r1, r3
 800fa9c:	fb02 6101 	mla	r1, r2, r1, r6
 800faa0:	0c1e      	lsrs	r6, r3, #16
 800faa2:	0c0b      	lsrs	r3, r1, #16
 800faa4:	fb02 3306 	mla	r3, r2, r6, r3
 800faa8:	b289      	uxth	r1, r1
 800faaa:	3001      	adds	r0, #1
 800faac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fab0:	4285      	cmp	r5, r0
 800fab2:	f84c 1b04 	str.w	r1, [ip], #4
 800fab6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800faba:	dcec      	bgt.n	800fa96 <__multadd+0x12>
 800fabc:	b30e      	cbz	r6, 800fb02 <__multadd+0x7e>
 800fabe:	68a3      	ldr	r3, [r4, #8]
 800fac0:	42ab      	cmp	r3, r5
 800fac2:	dc19      	bgt.n	800faf8 <__multadd+0x74>
 800fac4:	6861      	ldr	r1, [r4, #4]
 800fac6:	4638      	mov	r0, r7
 800fac8:	3101      	adds	r1, #1
 800faca:	f7ff ff79 	bl	800f9c0 <_Balloc>
 800face:	4680      	mov	r8, r0
 800fad0:	b928      	cbnz	r0, 800fade <__multadd+0x5a>
 800fad2:	4602      	mov	r2, r0
 800fad4:	4b0c      	ldr	r3, [pc, #48]	; (800fb08 <__multadd+0x84>)
 800fad6:	480d      	ldr	r0, [pc, #52]	; (800fb0c <__multadd+0x88>)
 800fad8:	21b5      	movs	r1, #181	; 0xb5
 800fada:	f000 fcc3 	bl	8010464 <__assert_func>
 800fade:	6922      	ldr	r2, [r4, #16]
 800fae0:	3202      	adds	r2, #2
 800fae2:	f104 010c 	add.w	r1, r4, #12
 800fae6:	0092      	lsls	r2, r2, #2
 800fae8:	300c      	adds	r0, #12
 800faea:	f7fe f85a 	bl	800dba2 <memcpy>
 800faee:	4621      	mov	r1, r4
 800faf0:	4638      	mov	r0, r7
 800faf2:	f7ff ffa5 	bl	800fa40 <_Bfree>
 800faf6:	4644      	mov	r4, r8
 800faf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fafc:	3501      	adds	r5, #1
 800fafe:	615e      	str	r6, [r3, #20]
 800fb00:	6125      	str	r5, [r4, #16]
 800fb02:	4620      	mov	r0, r4
 800fb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb08:	080122cf 	.word	0x080122cf
 800fb0c:	080122e0 	.word	0x080122e0

0800fb10 <__hi0bits>:
 800fb10:	0c03      	lsrs	r3, r0, #16
 800fb12:	041b      	lsls	r3, r3, #16
 800fb14:	b9d3      	cbnz	r3, 800fb4c <__hi0bits+0x3c>
 800fb16:	0400      	lsls	r0, r0, #16
 800fb18:	2310      	movs	r3, #16
 800fb1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fb1e:	bf04      	itt	eq
 800fb20:	0200      	lsleq	r0, r0, #8
 800fb22:	3308      	addeq	r3, #8
 800fb24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fb28:	bf04      	itt	eq
 800fb2a:	0100      	lsleq	r0, r0, #4
 800fb2c:	3304      	addeq	r3, #4
 800fb2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fb32:	bf04      	itt	eq
 800fb34:	0080      	lsleq	r0, r0, #2
 800fb36:	3302      	addeq	r3, #2
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	db05      	blt.n	800fb48 <__hi0bits+0x38>
 800fb3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fb40:	f103 0301 	add.w	r3, r3, #1
 800fb44:	bf08      	it	eq
 800fb46:	2320      	moveq	r3, #32
 800fb48:	4618      	mov	r0, r3
 800fb4a:	4770      	bx	lr
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	e7e4      	b.n	800fb1a <__hi0bits+0xa>

0800fb50 <__lo0bits>:
 800fb50:	6803      	ldr	r3, [r0, #0]
 800fb52:	f013 0207 	ands.w	r2, r3, #7
 800fb56:	4601      	mov	r1, r0
 800fb58:	d00b      	beq.n	800fb72 <__lo0bits+0x22>
 800fb5a:	07da      	lsls	r2, r3, #31
 800fb5c:	d423      	bmi.n	800fba6 <__lo0bits+0x56>
 800fb5e:	0798      	lsls	r0, r3, #30
 800fb60:	bf49      	itett	mi
 800fb62:	085b      	lsrmi	r3, r3, #1
 800fb64:	089b      	lsrpl	r3, r3, #2
 800fb66:	2001      	movmi	r0, #1
 800fb68:	600b      	strmi	r3, [r1, #0]
 800fb6a:	bf5c      	itt	pl
 800fb6c:	600b      	strpl	r3, [r1, #0]
 800fb6e:	2002      	movpl	r0, #2
 800fb70:	4770      	bx	lr
 800fb72:	b298      	uxth	r0, r3
 800fb74:	b9a8      	cbnz	r0, 800fba2 <__lo0bits+0x52>
 800fb76:	0c1b      	lsrs	r3, r3, #16
 800fb78:	2010      	movs	r0, #16
 800fb7a:	b2da      	uxtb	r2, r3
 800fb7c:	b90a      	cbnz	r2, 800fb82 <__lo0bits+0x32>
 800fb7e:	3008      	adds	r0, #8
 800fb80:	0a1b      	lsrs	r3, r3, #8
 800fb82:	071a      	lsls	r2, r3, #28
 800fb84:	bf04      	itt	eq
 800fb86:	091b      	lsreq	r3, r3, #4
 800fb88:	3004      	addeq	r0, #4
 800fb8a:	079a      	lsls	r2, r3, #30
 800fb8c:	bf04      	itt	eq
 800fb8e:	089b      	lsreq	r3, r3, #2
 800fb90:	3002      	addeq	r0, #2
 800fb92:	07da      	lsls	r2, r3, #31
 800fb94:	d403      	bmi.n	800fb9e <__lo0bits+0x4e>
 800fb96:	085b      	lsrs	r3, r3, #1
 800fb98:	f100 0001 	add.w	r0, r0, #1
 800fb9c:	d005      	beq.n	800fbaa <__lo0bits+0x5a>
 800fb9e:	600b      	str	r3, [r1, #0]
 800fba0:	4770      	bx	lr
 800fba2:	4610      	mov	r0, r2
 800fba4:	e7e9      	b.n	800fb7a <__lo0bits+0x2a>
 800fba6:	2000      	movs	r0, #0
 800fba8:	4770      	bx	lr
 800fbaa:	2020      	movs	r0, #32
 800fbac:	4770      	bx	lr
	...

0800fbb0 <__i2b>:
 800fbb0:	b510      	push	{r4, lr}
 800fbb2:	460c      	mov	r4, r1
 800fbb4:	2101      	movs	r1, #1
 800fbb6:	f7ff ff03 	bl	800f9c0 <_Balloc>
 800fbba:	4602      	mov	r2, r0
 800fbbc:	b928      	cbnz	r0, 800fbca <__i2b+0x1a>
 800fbbe:	4b05      	ldr	r3, [pc, #20]	; (800fbd4 <__i2b+0x24>)
 800fbc0:	4805      	ldr	r0, [pc, #20]	; (800fbd8 <__i2b+0x28>)
 800fbc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fbc6:	f000 fc4d 	bl	8010464 <__assert_func>
 800fbca:	2301      	movs	r3, #1
 800fbcc:	6144      	str	r4, [r0, #20]
 800fbce:	6103      	str	r3, [r0, #16]
 800fbd0:	bd10      	pop	{r4, pc}
 800fbd2:	bf00      	nop
 800fbd4:	080122cf 	.word	0x080122cf
 800fbd8:	080122e0 	.word	0x080122e0

0800fbdc <__multiply>:
 800fbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbe0:	4691      	mov	r9, r2
 800fbe2:	690a      	ldr	r2, [r1, #16]
 800fbe4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	bfb8      	it	lt
 800fbec:	460b      	movlt	r3, r1
 800fbee:	460c      	mov	r4, r1
 800fbf0:	bfbc      	itt	lt
 800fbf2:	464c      	movlt	r4, r9
 800fbf4:	4699      	movlt	r9, r3
 800fbf6:	6927      	ldr	r7, [r4, #16]
 800fbf8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fbfc:	68a3      	ldr	r3, [r4, #8]
 800fbfe:	6861      	ldr	r1, [r4, #4]
 800fc00:	eb07 060a 	add.w	r6, r7, sl
 800fc04:	42b3      	cmp	r3, r6
 800fc06:	b085      	sub	sp, #20
 800fc08:	bfb8      	it	lt
 800fc0a:	3101      	addlt	r1, #1
 800fc0c:	f7ff fed8 	bl	800f9c0 <_Balloc>
 800fc10:	b930      	cbnz	r0, 800fc20 <__multiply+0x44>
 800fc12:	4602      	mov	r2, r0
 800fc14:	4b44      	ldr	r3, [pc, #272]	; (800fd28 <__multiply+0x14c>)
 800fc16:	4845      	ldr	r0, [pc, #276]	; (800fd2c <__multiply+0x150>)
 800fc18:	f240 115d 	movw	r1, #349	; 0x15d
 800fc1c:	f000 fc22 	bl	8010464 <__assert_func>
 800fc20:	f100 0514 	add.w	r5, r0, #20
 800fc24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fc28:	462b      	mov	r3, r5
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	4543      	cmp	r3, r8
 800fc2e:	d321      	bcc.n	800fc74 <__multiply+0x98>
 800fc30:	f104 0314 	add.w	r3, r4, #20
 800fc34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fc38:	f109 0314 	add.w	r3, r9, #20
 800fc3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fc40:	9202      	str	r2, [sp, #8]
 800fc42:	1b3a      	subs	r2, r7, r4
 800fc44:	3a15      	subs	r2, #21
 800fc46:	f022 0203 	bic.w	r2, r2, #3
 800fc4a:	3204      	adds	r2, #4
 800fc4c:	f104 0115 	add.w	r1, r4, #21
 800fc50:	428f      	cmp	r7, r1
 800fc52:	bf38      	it	cc
 800fc54:	2204      	movcc	r2, #4
 800fc56:	9201      	str	r2, [sp, #4]
 800fc58:	9a02      	ldr	r2, [sp, #8]
 800fc5a:	9303      	str	r3, [sp, #12]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d80c      	bhi.n	800fc7a <__multiply+0x9e>
 800fc60:	2e00      	cmp	r6, #0
 800fc62:	dd03      	ble.n	800fc6c <__multiply+0x90>
 800fc64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d05a      	beq.n	800fd22 <__multiply+0x146>
 800fc6c:	6106      	str	r6, [r0, #16]
 800fc6e:	b005      	add	sp, #20
 800fc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc74:	f843 2b04 	str.w	r2, [r3], #4
 800fc78:	e7d8      	b.n	800fc2c <__multiply+0x50>
 800fc7a:	f8b3 a000 	ldrh.w	sl, [r3]
 800fc7e:	f1ba 0f00 	cmp.w	sl, #0
 800fc82:	d024      	beq.n	800fcce <__multiply+0xf2>
 800fc84:	f104 0e14 	add.w	lr, r4, #20
 800fc88:	46a9      	mov	r9, r5
 800fc8a:	f04f 0c00 	mov.w	ip, #0
 800fc8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fc92:	f8d9 1000 	ldr.w	r1, [r9]
 800fc96:	fa1f fb82 	uxth.w	fp, r2
 800fc9a:	b289      	uxth	r1, r1
 800fc9c:	fb0a 110b 	mla	r1, sl, fp, r1
 800fca0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fca4:	f8d9 2000 	ldr.w	r2, [r9]
 800fca8:	4461      	add	r1, ip
 800fcaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fcae:	fb0a c20b 	mla	r2, sl, fp, ip
 800fcb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fcb6:	b289      	uxth	r1, r1
 800fcb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fcbc:	4577      	cmp	r7, lr
 800fcbe:	f849 1b04 	str.w	r1, [r9], #4
 800fcc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fcc6:	d8e2      	bhi.n	800fc8e <__multiply+0xb2>
 800fcc8:	9a01      	ldr	r2, [sp, #4]
 800fcca:	f845 c002 	str.w	ip, [r5, r2]
 800fcce:	9a03      	ldr	r2, [sp, #12]
 800fcd0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fcd4:	3304      	adds	r3, #4
 800fcd6:	f1b9 0f00 	cmp.w	r9, #0
 800fcda:	d020      	beq.n	800fd1e <__multiply+0x142>
 800fcdc:	6829      	ldr	r1, [r5, #0]
 800fcde:	f104 0c14 	add.w	ip, r4, #20
 800fce2:	46ae      	mov	lr, r5
 800fce4:	f04f 0a00 	mov.w	sl, #0
 800fce8:	f8bc b000 	ldrh.w	fp, [ip]
 800fcec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fcf0:	fb09 220b 	mla	r2, r9, fp, r2
 800fcf4:	4492      	add	sl, r2
 800fcf6:	b289      	uxth	r1, r1
 800fcf8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fcfc:	f84e 1b04 	str.w	r1, [lr], #4
 800fd00:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fd04:	f8be 1000 	ldrh.w	r1, [lr]
 800fd08:	0c12      	lsrs	r2, r2, #16
 800fd0a:	fb09 1102 	mla	r1, r9, r2, r1
 800fd0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fd12:	4567      	cmp	r7, ip
 800fd14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fd18:	d8e6      	bhi.n	800fce8 <__multiply+0x10c>
 800fd1a:	9a01      	ldr	r2, [sp, #4]
 800fd1c:	50a9      	str	r1, [r5, r2]
 800fd1e:	3504      	adds	r5, #4
 800fd20:	e79a      	b.n	800fc58 <__multiply+0x7c>
 800fd22:	3e01      	subs	r6, #1
 800fd24:	e79c      	b.n	800fc60 <__multiply+0x84>
 800fd26:	bf00      	nop
 800fd28:	080122cf 	.word	0x080122cf
 800fd2c:	080122e0 	.word	0x080122e0

0800fd30 <__pow5mult>:
 800fd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd34:	4615      	mov	r5, r2
 800fd36:	f012 0203 	ands.w	r2, r2, #3
 800fd3a:	4606      	mov	r6, r0
 800fd3c:	460f      	mov	r7, r1
 800fd3e:	d007      	beq.n	800fd50 <__pow5mult+0x20>
 800fd40:	4c25      	ldr	r4, [pc, #148]	; (800fdd8 <__pow5mult+0xa8>)
 800fd42:	3a01      	subs	r2, #1
 800fd44:	2300      	movs	r3, #0
 800fd46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fd4a:	f7ff fe9b 	bl	800fa84 <__multadd>
 800fd4e:	4607      	mov	r7, r0
 800fd50:	10ad      	asrs	r5, r5, #2
 800fd52:	d03d      	beq.n	800fdd0 <__pow5mult+0xa0>
 800fd54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fd56:	b97c      	cbnz	r4, 800fd78 <__pow5mult+0x48>
 800fd58:	2010      	movs	r0, #16
 800fd5a:	f7ff fe1d 	bl	800f998 <malloc>
 800fd5e:	4602      	mov	r2, r0
 800fd60:	6270      	str	r0, [r6, #36]	; 0x24
 800fd62:	b928      	cbnz	r0, 800fd70 <__pow5mult+0x40>
 800fd64:	4b1d      	ldr	r3, [pc, #116]	; (800fddc <__pow5mult+0xac>)
 800fd66:	481e      	ldr	r0, [pc, #120]	; (800fde0 <__pow5mult+0xb0>)
 800fd68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fd6c:	f000 fb7a 	bl	8010464 <__assert_func>
 800fd70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd74:	6004      	str	r4, [r0, #0]
 800fd76:	60c4      	str	r4, [r0, #12]
 800fd78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fd7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fd80:	b94c      	cbnz	r4, 800fd96 <__pow5mult+0x66>
 800fd82:	f240 2171 	movw	r1, #625	; 0x271
 800fd86:	4630      	mov	r0, r6
 800fd88:	f7ff ff12 	bl	800fbb0 <__i2b>
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fd92:	4604      	mov	r4, r0
 800fd94:	6003      	str	r3, [r0, #0]
 800fd96:	f04f 0900 	mov.w	r9, #0
 800fd9a:	07eb      	lsls	r3, r5, #31
 800fd9c:	d50a      	bpl.n	800fdb4 <__pow5mult+0x84>
 800fd9e:	4639      	mov	r1, r7
 800fda0:	4622      	mov	r2, r4
 800fda2:	4630      	mov	r0, r6
 800fda4:	f7ff ff1a 	bl	800fbdc <__multiply>
 800fda8:	4639      	mov	r1, r7
 800fdaa:	4680      	mov	r8, r0
 800fdac:	4630      	mov	r0, r6
 800fdae:	f7ff fe47 	bl	800fa40 <_Bfree>
 800fdb2:	4647      	mov	r7, r8
 800fdb4:	106d      	asrs	r5, r5, #1
 800fdb6:	d00b      	beq.n	800fdd0 <__pow5mult+0xa0>
 800fdb8:	6820      	ldr	r0, [r4, #0]
 800fdba:	b938      	cbnz	r0, 800fdcc <__pow5mult+0x9c>
 800fdbc:	4622      	mov	r2, r4
 800fdbe:	4621      	mov	r1, r4
 800fdc0:	4630      	mov	r0, r6
 800fdc2:	f7ff ff0b 	bl	800fbdc <__multiply>
 800fdc6:	6020      	str	r0, [r4, #0]
 800fdc8:	f8c0 9000 	str.w	r9, [r0]
 800fdcc:	4604      	mov	r4, r0
 800fdce:	e7e4      	b.n	800fd9a <__pow5mult+0x6a>
 800fdd0:	4638      	mov	r0, r7
 800fdd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdd6:	bf00      	nop
 800fdd8:	08012430 	.word	0x08012430
 800fddc:	0801225d 	.word	0x0801225d
 800fde0:	080122e0 	.word	0x080122e0

0800fde4 <__lshift>:
 800fde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fde8:	460c      	mov	r4, r1
 800fdea:	6849      	ldr	r1, [r1, #4]
 800fdec:	6923      	ldr	r3, [r4, #16]
 800fdee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fdf2:	68a3      	ldr	r3, [r4, #8]
 800fdf4:	4607      	mov	r7, r0
 800fdf6:	4691      	mov	r9, r2
 800fdf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fdfc:	f108 0601 	add.w	r6, r8, #1
 800fe00:	42b3      	cmp	r3, r6
 800fe02:	db0b      	blt.n	800fe1c <__lshift+0x38>
 800fe04:	4638      	mov	r0, r7
 800fe06:	f7ff fddb 	bl	800f9c0 <_Balloc>
 800fe0a:	4605      	mov	r5, r0
 800fe0c:	b948      	cbnz	r0, 800fe22 <__lshift+0x3e>
 800fe0e:	4602      	mov	r2, r0
 800fe10:	4b2a      	ldr	r3, [pc, #168]	; (800febc <__lshift+0xd8>)
 800fe12:	482b      	ldr	r0, [pc, #172]	; (800fec0 <__lshift+0xdc>)
 800fe14:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fe18:	f000 fb24 	bl	8010464 <__assert_func>
 800fe1c:	3101      	adds	r1, #1
 800fe1e:	005b      	lsls	r3, r3, #1
 800fe20:	e7ee      	b.n	800fe00 <__lshift+0x1c>
 800fe22:	2300      	movs	r3, #0
 800fe24:	f100 0114 	add.w	r1, r0, #20
 800fe28:	f100 0210 	add.w	r2, r0, #16
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	4553      	cmp	r3, sl
 800fe30:	db37      	blt.n	800fea2 <__lshift+0xbe>
 800fe32:	6920      	ldr	r0, [r4, #16]
 800fe34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fe38:	f104 0314 	add.w	r3, r4, #20
 800fe3c:	f019 091f 	ands.w	r9, r9, #31
 800fe40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fe44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fe48:	d02f      	beq.n	800feaa <__lshift+0xc6>
 800fe4a:	f1c9 0e20 	rsb	lr, r9, #32
 800fe4e:	468a      	mov	sl, r1
 800fe50:	f04f 0c00 	mov.w	ip, #0
 800fe54:	681a      	ldr	r2, [r3, #0]
 800fe56:	fa02 f209 	lsl.w	r2, r2, r9
 800fe5a:	ea42 020c 	orr.w	r2, r2, ip
 800fe5e:	f84a 2b04 	str.w	r2, [sl], #4
 800fe62:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe66:	4298      	cmp	r0, r3
 800fe68:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fe6c:	d8f2      	bhi.n	800fe54 <__lshift+0x70>
 800fe6e:	1b03      	subs	r3, r0, r4
 800fe70:	3b15      	subs	r3, #21
 800fe72:	f023 0303 	bic.w	r3, r3, #3
 800fe76:	3304      	adds	r3, #4
 800fe78:	f104 0215 	add.w	r2, r4, #21
 800fe7c:	4290      	cmp	r0, r2
 800fe7e:	bf38      	it	cc
 800fe80:	2304      	movcc	r3, #4
 800fe82:	f841 c003 	str.w	ip, [r1, r3]
 800fe86:	f1bc 0f00 	cmp.w	ip, #0
 800fe8a:	d001      	beq.n	800fe90 <__lshift+0xac>
 800fe8c:	f108 0602 	add.w	r6, r8, #2
 800fe90:	3e01      	subs	r6, #1
 800fe92:	4638      	mov	r0, r7
 800fe94:	612e      	str	r6, [r5, #16]
 800fe96:	4621      	mov	r1, r4
 800fe98:	f7ff fdd2 	bl	800fa40 <_Bfree>
 800fe9c:	4628      	mov	r0, r5
 800fe9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fea2:	f842 0f04 	str.w	r0, [r2, #4]!
 800fea6:	3301      	adds	r3, #1
 800fea8:	e7c1      	b.n	800fe2e <__lshift+0x4a>
 800feaa:	3904      	subs	r1, #4
 800feac:	f853 2b04 	ldr.w	r2, [r3], #4
 800feb0:	f841 2f04 	str.w	r2, [r1, #4]!
 800feb4:	4298      	cmp	r0, r3
 800feb6:	d8f9      	bhi.n	800feac <__lshift+0xc8>
 800feb8:	e7ea      	b.n	800fe90 <__lshift+0xac>
 800feba:	bf00      	nop
 800febc:	080122cf 	.word	0x080122cf
 800fec0:	080122e0 	.word	0x080122e0

0800fec4 <__mcmp>:
 800fec4:	b530      	push	{r4, r5, lr}
 800fec6:	6902      	ldr	r2, [r0, #16]
 800fec8:	690c      	ldr	r4, [r1, #16]
 800feca:	1b12      	subs	r2, r2, r4
 800fecc:	d10e      	bne.n	800feec <__mcmp+0x28>
 800fece:	f100 0314 	add.w	r3, r0, #20
 800fed2:	3114      	adds	r1, #20
 800fed4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fed8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fedc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fee0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fee4:	42a5      	cmp	r5, r4
 800fee6:	d003      	beq.n	800fef0 <__mcmp+0x2c>
 800fee8:	d305      	bcc.n	800fef6 <__mcmp+0x32>
 800feea:	2201      	movs	r2, #1
 800feec:	4610      	mov	r0, r2
 800feee:	bd30      	pop	{r4, r5, pc}
 800fef0:	4283      	cmp	r3, r0
 800fef2:	d3f3      	bcc.n	800fedc <__mcmp+0x18>
 800fef4:	e7fa      	b.n	800feec <__mcmp+0x28>
 800fef6:	f04f 32ff 	mov.w	r2, #4294967295
 800fefa:	e7f7      	b.n	800feec <__mcmp+0x28>

0800fefc <__mdiff>:
 800fefc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff00:	460c      	mov	r4, r1
 800ff02:	4606      	mov	r6, r0
 800ff04:	4611      	mov	r1, r2
 800ff06:	4620      	mov	r0, r4
 800ff08:	4690      	mov	r8, r2
 800ff0a:	f7ff ffdb 	bl	800fec4 <__mcmp>
 800ff0e:	1e05      	subs	r5, r0, #0
 800ff10:	d110      	bne.n	800ff34 <__mdiff+0x38>
 800ff12:	4629      	mov	r1, r5
 800ff14:	4630      	mov	r0, r6
 800ff16:	f7ff fd53 	bl	800f9c0 <_Balloc>
 800ff1a:	b930      	cbnz	r0, 800ff2a <__mdiff+0x2e>
 800ff1c:	4b3a      	ldr	r3, [pc, #232]	; (8010008 <__mdiff+0x10c>)
 800ff1e:	4602      	mov	r2, r0
 800ff20:	f240 2132 	movw	r1, #562	; 0x232
 800ff24:	4839      	ldr	r0, [pc, #228]	; (801000c <__mdiff+0x110>)
 800ff26:	f000 fa9d 	bl	8010464 <__assert_func>
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ff30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff34:	bfa4      	itt	ge
 800ff36:	4643      	movge	r3, r8
 800ff38:	46a0      	movge	r8, r4
 800ff3a:	4630      	mov	r0, r6
 800ff3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ff40:	bfa6      	itte	ge
 800ff42:	461c      	movge	r4, r3
 800ff44:	2500      	movge	r5, #0
 800ff46:	2501      	movlt	r5, #1
 800ff48:	f7ff fd3a 	bl	800f9c0 <_Balloc>
 800ff4c:	b920      	cbnz	r0, 800ff58 <__mdiff+0x5c>
 800ff4e:	4b2e      	ldr	r3, [pc, #184]	; (8010008 <__mdiff+0x10c>)
 800ff50:	4602      	mov	r2, r0
 800ff52:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ff56:	e7e5      	b.n	800ff24 <__mdiff+0x28>
 800ff58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ff5c:	6926      	ldr	r6, [r4, #16]
 800ff5e:	60c5      	str	r5, [r0, #12]
 800ff60:	f104 0914 	add.w	r9, r4, #20
 800ff64:	f108 0514 	add.w	r5, r8, #20
 800ff68:	f100 0e14 	add.w	lr, r0, #20
 800ff6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ff70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ff74:	f108 0210 	add.w	r2, r8, #16
 800ff78:	46f2      	mov	sl, lr
 800ff7a:	2100      	movs	r1, #0
 800ff7c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ff80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ff84:	fa1f f883 	uxth.w	r8, r3
 800ff88:	fa11 f18b 	uxtah	r1, r1, fp
 800ff8c:	0c1b      	lsrs	r3, r3, #16
 800ff8e:	eba1 0808 	sub.w	r8, r1, r8
 800ff92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ff96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ff9a:	fa1f f888 	uxth.w	r8, r8
 800ff9e:	1419      	asrs	r1, r3, #16
 800ffa0:	454e      	cmp	r6, r9
 800ffa2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ffa6:	f84a 3b04 	str.w	r3, [sl], #4
 800ffaa:	d8e7      	bhi.n	800ff7c <__mdiff+0x80>
 800ffac:	1b33      	subs	r3, r6, r4
 800ffae:	3b15      	subs	r3, #21
 800ffb0:	f023 0303 	bic.w	r3, r3, #3
 800ffb4:	3304      	adds	r3, #4
 800ffb6:	3415      	adds	r4, #21
 800ffb8:	42a6      	cmp	r6, r4
 800ffba:	bf38      	it	cc
 800ffbc:	2304      	movcc	r3, #4
 800ffbe:	441d      	add	r5, r3
 800ffc0:	4473      	add	r3, lr
 800ffc2:	469e      	mov	lr, r3
 800ffc4:	462e      	mov	r6, r5
 800ffc6:	4566      	cmp	r6, ip
 800ffc8:	d30e      	bcc.n	800ffe8 <__mdiff+0xec>
 800ffca:	f10c 0203 	add.w	r2, ip, #3
 800ffce:	1b52      	subs	r2, r2, r5
 800ffd0:	f022 0203 	bic.w	r2, r2, #3
 800ffd4:	3d03      	subs	r5, #3
 800ffd6:	45ac      	cmp	ip, r5
 800ffd8:	bf38      	it	cc
 800ffda:	2200      	movcc	r2, #0
 800ffdc:	441a      	add	r2, r3
 800ffde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ffe2:	b17b      	cbz	r3, 8010004 <__mdiff+0x108>
 800ffe4:	6107      	str	r7, [r0, #16]
 800ffe6:	e7a3      	b.n	800ff30 <__mdiff+0x34>
 800ffe8:	f856 8b04 	ldr.w	r8, [r6], #4
 800ffec:	fa11 f288 	uxtah	r2, r1, r8
 800fff0:	1414      	asrs	r4, r2, #16
 800fff2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fff6:	b292      	uxth	r2, r2
 800fff8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fffc:	f84e 2b04 	str.w	r2, [lr], #4
 8010000:	1421      	asrs	r1, r4, #16
 8010002:	e7e0      	b.n	800ffc6 <__mdiff+0xca>
 8010004:	3f01      	subs	r7, #1
 8010006:	e7ea      	b.n	800ffde <__mdiff+0xe2>
 8010008:	080122cf 	.word	0x080122cf
 801000c:	080122e0 	.word	0x080122e0

08010010 <__d2b>:
 8010010:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010014:	4689      	mov	r9, r1
 8010016:	2101      	movs	r1, #1
 8010018:	ec57 6b10 	vmov	r6, r7, d0
 801001c:	4690      	mov	r8, r2
 801001e:	f7ff fccf 	bl	800f9c0 <_Balloc>
 8010022:	4604      	mov	r4, r0
 8010024:	b930      	cbnz	r0, 8010034 <__d2b+0x24>
 8010026:	4602      	mov	r2, r0
 8010028:	4b25      	ldr	r3, [pc, #148]	; (80100c0 <__d2b+0xb0>)
 801002a:	4826      	ldr	r0, [pc, #152]	; (80100c4 <__d2b+0xb4>)
 801002c:	f240 310a 	movw	r1, #778	; 0x30a
 8010030:	f000 fa18 	bl	8010464 <__assert_func>
 8010034:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010038:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801003c:	bb35      	cbnz	r5, 801008c <__d2b+0x7c>
 801003e:	2e00      	cmp	r6, #0
 8010040:	9301      	str	r3, [sp, #4]
 8010042:	d028      	beq.n	8010096 <__d2b+0x86>
 8010044:	4668      	mov	r0, sp
 8010046:	9600      	str	r6, [sp, #0]
 8010048:	f7ff fd82 	bl	800fb50 <__lo0bits>
 801004c:	9900      	ldr	r1, [sp, #0]
 801004e:	b300      	cbz	r0, 8010092 <__d2b+0x82>
 8010050:	9a01      	ldr	r2, [sp, #4]
 8010052:	f1c0 0320 	rsb	r3, r0, #32
 8010056:	fa02 f303 	lsl.w	r3, r2, r3
 801005a:	430b      	orrs	r3, r1
 801005c:	40c2      	lsrs	r2, r0
 801005e:	6163      	str	r3, [r4, #20]
 8010060:	9201      	str	r2, [sp, #4]
 8010062:	9b01      	ldr	r3, [sp, #4]
 8010064:	61a3      	str	r3, [r4, #24]
 8010066:	2b00      	cmp	r3, #0
 8010068:	bf14      	ite	ne
 801006a:	2202      	movne	r2, #2
 801006c:	2201      	moveq	r2, #1
 801006e:	6122      	str	r2, [r4, #16]
 8010070:	b1d5      	cbz	r5, 80100a8 <__d2b+0x98>
 8010072:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010076:	4405      	add	r5, r0
 8010078:	f8c9 5000 	str.w	r5, [r9]
 801007c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010080:	f8c8 0000 	str.w	r0, [r8]
 8010084:	4620      	mov	r0, r4
 8010086:	b003      	add	sp, #12
 8010088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801008c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010090:	e7d5      	b.n	801003e <__d2b+0x2e>
 8010092:	6161      	str	r1, [r4, #20]
 8010094:	e7e5      	b.n	8010062 <__d2b+0x52>
 8010096:	a801      	add	r0, sp, #4
 8010098:	f7ff fd5a 	bl	800fb50 <__lo0bits>
 801009c:	9b01      	ldr	r3, [sp, #4]
 801009e:	6163      	str	r3, [r4, #20]
 80100a0:	2201      	movs	r2, #1
 80100a2:	6122      	str	r2, [r4, #16]
 80100a4:	3020      	adds	r0, #32
 80100a6:	e7e3      	b.n	8010070 <__d2b+0x60>
 80100a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80100ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80100b0:	f8c9 0000 	str.w	r0, [r9]
 80100b4:	6918      	ldr	r0, [r3, #16]
 80100b6:	f7ff fd2b 	bl	800fb10 <__hi0bits>
 80100ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80100be:	e7df      	b.n	8010080 <__d2b+0x70>
 80100c0:	080122cf 	.word	0x080122cf
 80100c4:	080122e0 	.word	0x080122e0

080100c8 <_calloc_r>:
 80100c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100ca:	fba1 2402 	umull	r2, r4, r1, r2
 80100ce:	b94c      	cbnz	r4, 80100e4 <_calloc_r+0x1c>
 80100d0:	4611      	mov	r1, r2
 80100d2:	9201      	str	r2, [sp, #4]
 80100d4:	f7fd fd9c 	bl	800dc10 <_malloc_r>
 80100d8:	9a01      	ldr	r2, [sp, #4]
 80100da:	4605      	mov	r5, r0
 80100dc:	b930      	cbnz	r0, 80100ec <_calloc_r+0x24>
 80100de:	4628      	mov	r0, r5
 80100e0:	b003      	add	sp, #12
 80100e2:	bd30      	pop	{r4, r5, pc}
 80100e4:	220c      	movs	r2, #12
 80100e6:	6002      	str	r2, [r0, #0]
 80100e8:	2500      	movs	r5, #0
 80100ea:	e7f8      	b.n	80100de <_calloc_r+0x16>
 80100ec:	4621      	mov	r1, r4
 80100ee:	f7fd fd66 	bl	800dbbe <memset>
 80100f2:	e7f4      	b.n	80100de <_calloc_r+0x16>

080100f4 <_free_r>:
 80100f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100f6:	2900      	cmp	r1, #0
 80100f8:	d044      	beq.n	8010184 <_free_r+0x90>
 80100fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100fe:	9001      	str	r0, [sp, #4]
 8010100:	2b00      	cmp	r3, #0
 8010102:	f1a1 0404 	sub.w	r4, r1, #4
 8010106:	bfb8      	it	lt
 8010108:	18e4      	addlt	r4, r4, r3
 801010a:	f7ff fc4d 	bl	800f9a8 <__malloc_lock>
 801010e:	4a1e      	ldr	r2, [pc, #120]	; (8010188 <_free_r+0x94>)
 8010110:	9801      	ldr	r0, [sp, #4]
 8010112:	6813      	ldr	r3, [r2, #0]
 8010114:	b933      	cbnz	r3, 8010124 <_free_r+0x30>
 8010116:	6063      	str	r3, [r4, #4]
 8010118:	6014      	str	r4, [r2, #0]
 801011a:	b003      	add	sp, #12
 801011c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010120:	f7ff bc48 	b.w	800f9b4 <__malloc_unlock>
 8010124:	42a3      	cmp	r3, r4
 8010126:	d908      	bls.n	801013a <_free_r+0x46>
 8010128:	6825      	ldr	r5, [r4, #0]
 801012a:	1961      	adds	r1, r4, r5
 801012c:	428b      	cmp	r3, r1
 801012e:	bf01      	itttt	eq
 8010130:	6819      	ldreq	r1, [r3, #0]
 8010132:	685b      	ldreq	r3, [r3, #4]
 8010134:	1949      	addeq	r1, r1, r5
 8010136:	6021      	streq	r1, [r4, #0]
 8010138:	e7ed      	b.n	8010116 <_free_r+0x22>
 801013a:	461a      	mov	r2, r3
 801013c:	685b      	ldr	r3, [r3, #4]
 801013e:	b10b      	cbz	r3, 8010144 <_free_r+0x50>
 8010140:	42a3      	cmp	r3, r4
 8010142:	d9fa      	bls.n	801013a <_free_r+0x46>
 8010144:	6811      	ldr	r1, [r2, #0]
 8010146:	1855      	adds	r5, r2, r1
 8010148:	42a5      	cmp	r5, r4
 801014a:	d10b      	bne.n	8010164 <_free_r+0x70>
 801014c:	6824      	ldr	r4, [r4, #0]
 801014e:	4421      	add	r1, r4
 8010150:	1854      	adds	r4, r2, r1
 8010152:	42a3      	cmp	r3, r4
 8010154:	6011      	str	r1, [r2, #0]
 8010156:	d1e0      	bne.n	801011a <_free_r+0x26>
 8010158:	681c      	ldr	r4, [r3, #0]
 801015a:	685b      	ldr	r3, [r3, #4]
 801015c:	6053      	str	r3, [r2, #4]
 801015e:	4421      	add	r1, r4
 8010160:	6011      	str	r1, [r2, #0]
 8010162:	e7da      	b.n	801011a <_free_r+0x26>
 8010164:	d902      	bls.n	801016c <_free_r+0x78>
 8010166:	230c      	movs	r3, #12
 8010168:	6003      	str	r3, [r0, #0]
 801016a:	e7d6      	b.n	801011a <_free_r+0x26>
 801016c:	6825      	ldr	r5, [r4, #0]
 801016e:	1961      	adds	r1, r4, r5
 8010170:	428b      	cmp	r3, r1
 8010172:	bf04      	itt	eq
 8010174:	6819      	ldreq	r1, [r3, #0]
 8010176:	685b      	ldreq	r3, [r3, #4]
 8010178:	6063      	str	r3, [r4, #4]
 801017a:	bf04      	itt	eq
 801017c:	1949      	addeq	r1, r1, r5
 801017e:	6021      	streq	r1, [r4, #0]
 8010180:	6054      	str	r4, [r2, #4]
 8010182:	e7ca      	b.n	801011a <_free_r+0x26>
 8010184:	b003      	add	sp, #12
 8010186:	bd30      	pop	{r4, r5, pc}
 8010188:	20005aa4 	.word	0x20005aa4

0801018c <__sfputc_r>:
 801018c:	6893      	ldr	r3, [r2, #8]
 801018e:	3b01      	subs	r3, #1
 8010190:	2b00      	cmp	r3, #0
 8010192:	b410      	push	{r4}
 8010194:	6093      	str	r3, [r2, #8]
 8010196:	da08      	bge.n	80101aa <__sfputc_r+0x1e>
 8010198:	6994      	ldr	r4, [r2, #24]
 801019a:	42a3      	cmp	r3, r4
 801019c:	db01      	blt.n	80101a2 <__sfputc_r+0x16>
 801019e:	290a      	cmp	r1, #10
 80101a0:	d103      	bne.n	80101aa <__sfputc_r+0x1e>
 80101a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101a6:	f7fe bb5d 	b.w	800e864 <__swbuf_r>
 80101aa:	6813      	ldr	r3, [r2, #0]
 80101ac:	1c58      	adds	r0, r3, #1
 80101ae:	6010      	str	r0, [r2, #0]
 80101b0:	7019      	strb	r1, [r3, #0]
 80101b2:	4608      	mov	r0, r1
 80101b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101b8:	4770      	bx	lr

080101ba <__sfputs_r>:
 80101ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101bc:	4606      	mov	r6, r0
 80101be:	460f      	mov	r7, r1
 80101c0:	4614      	mov	r4, r2
 80101c2:	18d5      	adds	r5, r2, r3
 80101c4:	42ac      	cmp	r4, r5
 80101c6:	d101      	bne.n	80101cc <__sfputs_r+0x12>
 80101c8:	2000      	movs	r0, #0
 80101ca:	e007      	b.n	80101dc <__sfputs_r+0x22>
 80101cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101d0:	463a      	mov	r2, r7
 80101d2:	4630      	mov	r0, r6
 80101d4:	f7ff ffda 	bl	801018c <__sfputc_r>
 80101d8:	1c43      	adds	r3, r0, #1
 80101da:	d1f3      	bne.n	80101c4 <__sfputs_r+0xa>
 80101dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080101e0 <_vfiprintf_r>:
 80101e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101e4:	460d      	mov	r5, r1
 80101e6:	b09d      	sub	sp, #116	; 0x74
 80101e8:	4614      	mov	r4, r2
 80101ea:	4698      	mov	r8, r3
 80101ec:	4606      	mov	r6, r0
 80101ee:	b118      	cbz	r0, 80101f8 <_vfiprintf_r+0x18>
 80101f0:	6983      	ldr	r3, [r0, #24]
 80101f2:	b90b      	cbnz	r3, 80101f8 <_vfiprintf_r+0x18>
 80101f4:	f7fd fc10 	bl	800da18 <__sinit>
 80101f8:	4b89      	ldr	r3, [pc, #548]	; (8010420 <_vfiprintf_r+0x240>)
 80101fa:	429d      	cmp	r5, r3
 80101fc:	d11b      	bne.n	8010236 <_vfiprintf_r+0x56>
 80101fe:	6875      	ldr	r5, [r6, #4]
 8010200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010202:	07d9      	lsls	r1, r3, #31
 8010204:	d405      	bmi.n	8010212 <_vfiprintf_r+0x32>
 8010206:	89ab      	ldrh	r3, [r5, #12]
 8010208:	059a      	lsls	r2, r3, #22
 801020a:	d402      	bmi.n	8010212 <_vfiprintf_r+0x32>
 801020c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801020e:	f7fd fcc6 	bl	800db9e <__retarget_lock_acquire_recursive>
 8010212:	89ab      	ldrh	r3, [r5, #12]
 8010214:	071b      	lsls	r3, r3, #28
 8010216:	d501      	bpl.n	801021c <_vfiprintf_r+0x3c>
 8010218:	692b      	ldr	r3, [r5, #16]
 801021a:	b9eb      	cbnz	r3, 8010258 <_vfiprintf_r+0x78>
 801021c:	4629      	mov	r1, r5
 801021e:	4630      	mov	r0, r6
 8010220:	f7fe fb84 	bl	800e92c <__swsetup_r>
 8010224:	b1c0      	cbz	r0, 8010258 <_vfiprintf_r+0x78>
 8010226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010228:	07dc      	lsls	r4, r3, #31
 801022a:	d50e      	bpl.n	801024a <_vfiprintf_r+0x6a>
 801022c:	f04f 30ff 	mov.w	r0, #4294967295
 8010230:	b01d      	add	sp, #116	; 0x74
 8010232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010236:	4b7b      	ldr	r3, [pc, #492]	; (8010424 <_vfiprintf_r+0x244>)
 8010238:	429d      	cmp	r5, r3
 801023a:	d101      	bne.n	8010240 <_vfiprintf_r+0x60>
 801023c:	68b5      	ldr	r5, [r6, #8]
 801023e:	e7df      	b.n	8010200 <_vfiprintf_r+0x20>
 8010240:	4b79      	ldr	r3, [pc, #484]	; (8010428 <_vfiprintf_r+0x248>)
 8010242:	429d      	cmp	r5, r3
 8010244:	bf08      	it	eq
 8010246:	68f5      	ldreq	r5, [r6, #12]
 8010248:	e7da      	b.n	8010200 <_vfiprintf_r+0x20>
 801024a:	89ab      	ldrh	r3, [r5, #12]
 801024c:	0598      	lsls	r0, r3, #22
 801024e:	d4ed      	bmi.n	801022c <_vfiprintf_r+0x4c>
 8010250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010252:	f7fd fca5 	bl	800dba0 <__retarget_lock_release_recursive>
 8010256:	e7e9      	b.n	801022c <_vfiprintf_r+0x4c>
 8010258:	2300      	movs	r3, #0
 801025a:	9309      	str	r3, [sp, #36]	; 0x24
 801025c:	2320      	movs	r3, #32
 801025e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010262:	f8cd 800c 	str.w	r8, [sp, #12]
 8010266:	2330      	movs	r3, #48	; 0x30
 8010268:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801042c <_vfiprintf_r+0x24c>
 801026c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010270:	f04f 0901 	mov.w	r9, #1
 8010274:	4623      	mov	r3, r4
 8010276:	469a      	mov	sl, r3
 8010278:	f813 2b01 	ldrb.w	r2, [r3], #1
 801027c:	b10a      	cbz	r2, 8010282 <_vfiprintf_r+0xa2>
 801027e:	2a25      	cmp	r2, #37	; 0x25
 8010280:	d1f9      	bne.n	8010276 <_vfiprintf_r+0x96>
 8010282:	ebba 0b04 	subs.w	fp, sl, r4
 8010286:	d00b      	beq.n	80102a0 <_vfiprintf_r+0xc0>
 8010288:	465b      	mov	r3, fp
 801028a:	4622      	mov	r2, r4
 801028c:	4629      	mov	r1, r5
 801028e:	4630      	mov	r0, r6
 8010290:	f7ff ff93 	bl	80101ba <__sfputs_r>
 8010294:	3001      	adds	r0, #1
 8010296:	f000 80aa 	beq.w	80103ee <_vfiprintf_r+0x20e>
 801029a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801029c:	445a      	add	r2, fp
 801029e:	9209      	str	r2, [sp, #36]	; 0x24
 80102a0:	f89a 3000 	ldrb.w	r3, [sl]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	f000 80a2 	beq.w	80103ee <_vfiprintf_r+0x20e>
 80102aa:	2300      	movs	r3, #0
 80102ac:	f04f 32ff 	mov.w	r2, #4294967295
 80102b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102b4:	f10a 0a01 	add.w	sl, sl, #1
 80102b8:	9304      	str	r3, [sp, #16]
 80102ba:	9307      	str	r3, [sp, #28]
 80102bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80102c0:	931a      	str	r3, [sp, #104]	; 0x68
 80102c2:	4654      	mov	r4, sl
 80102c4:	2205      	movs	r2, #5
 80102c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102ca:	4858      	ldr	r0, [pc, #352]	; (801042c <_vfiprintf_r+0x24c>)
 80102cc:	f7ef ff88 	bl	80001e0 <memchr>
 80102d0:	9a04      	ldr	r2, [sp, #16]
 80102d2:	b9d8      	cbnz	r0, 801030c <_vfiprintf_r+0x12c>
 80102d4:	06d1      	lsls	r1, r2, #27
 80102d6:	bf44      	itt	mi
 80102d8:	2320      	movmi	r3, #32
 80102da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102de:	0713      	lsls	r3, r2, #28
 80102e0:	bf44      	itt	mi
 80102e2:	232b      	movmi	r3, #43	; 0x2b
 80102e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102e8:	f89a 3000 	ldrb.w	r3, [sl]
 80102ec:	2b2a      	cmp	r3, #42	; 0x2a
 80102ee:	d015      	beq.n	801031c <_vfiprintf_r+0x13c>
 80102f0:	9a07      	ldr	r2, [sp, #28]
 80102f2:	4654      	mov	r4, sl
 80102f4:	2000      	movs	r0, #0
 80102f6:	f04f 0c0a 	mov.w	ip, #10
 80102fa:	4621      	mov	r1, r4
 80102fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010300:	3b30      	subs	r3, #48	; 0x30
 8010302:	2b09      	cmp	r3, #9
 8010304:	d94e      	bls.n	80103a4 <_vfiprintf_r+0x1c4>
 8010306:	b1b0      	cbz	r0, 8010336 <_vfiprintf_r+0x156>
 8010308:	9207      	str	r2, [sp, #28]
 801030a:	e014      	b.n	8010336 <_vfiprintf_r+0x156>
 801030c:	eba0 0308 	sub.w	r3, r0, r8
 8010310:	fa09 f303 	lsl.w	r3, r9, r3
 8010314:	4313      	orrs	r3, r2
 8010316:	9304      	str	r3, [sp, #16]
 8010318:	46a2      	mov	sl, r4
 801031a:	e7d2      	b.n	80102c2 <_vfiprintf_r+0xe2>
 801031c:	9b03      	ldr	r3, [sp, #12]
 801031e:	1d19      	adds	r1, r3, #4
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	9103      	str	r1, [sp, #12]
 8010324:	2b00      	cmp	r3, #0
 8010326:	bfbb      	ittet	lt
 8010328:	425b      	neglt	r3, r3
 801032a:	f042 0202 	orrlt.w	r2, r2, #2
 801032e:	9307      	strge	r3, [sp, #28]
 8010330:	9307      	strlt	r3, [sp, #28]
 8010332:	bfb8      	it	lt
 8010334:	9204      	strlt	r2, [sp, #16]
 8010336:	7823      	ldrb	r3, [r4, #0]
 8010338:	2b2e      	cmp	r3, #46	; 0x2e
 801033a:	d10c      	bne.n	8010356 <_vfiprintf_r+0x176>
 801033c:	7863      	ldrb	r3, [r4, #1]
 801033e:	2b2a      	cmp	r3, #42	; 0x2a
 8010340:	d135      	bne.n	80103ae <_vfiprintf_r+0x1ce>
 8010342:	9b03      	ldr	r3, [sp, #12]
 8010344:	1d1a      	adds	r2, r3, #4
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	9203      	str	r2, [sp, #12]
 801034a:	2b00      	cmp	r3, #0
 801034c:	bfb8      	it	lt
 801034e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010352:	3402      	adds	r4, #2
 8010354:	9305      	str	r3, [sp, #20]
 8010356:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801043c <_vfiprintf_r+0x25c>
 801035a:	7821      	ldrb	r1, [r4, #0]
 801035c:	2203      	movs	r2, #3
 801035e:	4650      	mov	r0, sl
 8010360:	f7ef ff3e 	bl	80001e0 <memchr>
 8010364:	b140      	cbz	r0, 8010378 <_vfiprintf_r+0x198>
 8010366:	2340      	movs	r3, #64	; 0x40
 8010368:	eba0 000a 	sub.w	r0, r0, sl
 801036c:	fa03 f000 	lsl.w	r0, r3, r0
 8010370:	9b04      	ldr	r3, [sp, #16]
 8010372:	4303      	orrs	r3, r0
 8010374:	3401      	adds	r4, #1
 8010376:	9304      	str	r3, [sp, #16]
 8010378:	f814 1b01 	ldrb.w	r1, [r4], #1
 801037c:	482c      	ldr	r0, [pc, #176]	; (8010430 <_vfiprintf_r+0x250>)
 801037e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010382:	2206      	movs	r2, #6
 8010384:	f7ef ff2c 	bl	80001e0 <memchr>
 8010388:	2800      	cmp	r0, #0
 801038a:	d03f      	beq.n	801040c <_vfiprintf_r+0x22c>
 801038c:	4b29      	ldr	r3, [pc, #164]	; (8010434 <_vfiprintf_r+0x254>)
 801038e:	bb1b      	cbnz	r3, 80103d8 <_vfiprintf_r+0x1f8>
 8010390:	9b03      	ldr	r3, [sp, #12]
 8010392:	3307      	adds	r3, #7
 8010394:	f023 0307 	bic.w	r3, r3, #7
 8010398:	3308      	adds	r3, #8
 801039a:	9303      	str	r3, [sp, #12]
 801039c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801039e:	443b      	add	r3, r7
 80103a0:	9309      	str	r3, [sp, #36]	; 0x24
 80103a2:	e767      	b.n	8010274 <_vfiprintf_r+0x94>
 80103a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80103a8:	460c      	mov	r4, r1
 80103aa:	2001      	movs	r0, #1
 80103ac:	e7a5      	b.n	80102fa <_vfiprintf_r+0x11a>
 80103ae:	2300      	movs	r3, #0
 80103b0:	3401      	adds	r4, #1
 80103b2:	9305      	str	r3, [sp, #20]
 80103b4:	4619      	mov	r1, r3
 80103b6:	f04f 0c0a 	mov.w	ip, #10
 80103ba:	4620      	mov	r0, r4
 80103bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103c0:	3a30      	subs	r2, #48	; 0x30
 80103c2:	2a09      	cmp	r2, #9
 80103c4:	d903      	bls.n	80103ce <_vfiprintf_r+0x1ee>
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d0c5      	beq.n	8010356 <_vfiprintf_r+0x176>
 80103ca:	9105      	str	r1, [sp, #20]
 80103cc:	e7c3      	b.n	8010356 <_vfiprintf_r+0x176>
 80103ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80103d2:	4604      	mov	r4, r0
 80103d4:	2301      	movs	r3, #1
 80103d6:	e7f0      	b.n	80103ba <_vfiprintf_r+0x1da>
 80103d8:	ab03      	add	r3, sp, #12
 80103da:	9300      	str	r3, [sp, #0]
 80103dc:	462a      	mov	r2, r5
 80103de:	4b16      	ldr	r3, [pc, #88]	; (8010438 <_vfiprintf_r+0x258>)
 80103e0:	a904      	add	r1, sp, #16
 80103e2:	4630      	mov	r0, r6
 80103e4:	f7fd fd28 	bl	800de38 <_printf_float>
 80103e8:	4607      	mov	r7, r0
 80103ea:	1c78      	adds	r0, r7, #1
 80103ec:	d1d6      	bne.n	801039c <_vfiprintf_r+0x1bc>
 80103ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103f0:	07d9      	lsls	r1, r3, #31
 80103f2:	d405      	bmi.n	8010400 <_vfiprintf_r+0x220>
 80103f4:	89ab      	ldrh	r3, [r5, #12]
 80103f6:	059a      	lsls	r2, r3, #22
 80103f8:	d402      	bmi.n	8010400 <_vfiprintf_r+0x220>
 80103fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103fc:	f7fd fbd0 	bl	800dba0 <__retarget_lock_release_recursive>
 8010400:	89ab      	ldrh	r3, [r5, #12]
 8010402:	065b      	lsls	r3, r3, #25
 8010404:	f53f af12 	bmi.w	801022c <_vfiprintf_r+0x4c>
 8010408:	9809      	ldr	r0, [sp, #36]	; 0x24
 801040a:	e711      	b.n	8010230 <_vfiprintf_r+0x50>
 801040c:	ab03      	add	r3, sp, #12
 801040e:	9300      	str	r3, [sp, #0]
 8010410:	462a      	mov	r2, r5
 8010412:	4b09      	ldr	r3, [pc, #36]	; (8010438 <_vfiprintf_r+0x258>)
 8010414:	a904      	add	r1, sp, #16
 8010416:	4630      	mov	r0, r6
 8010418:	f7fd ffb2 	bl	800e380 <_printf_i>
 801041c:	e7e4      	b.n	80103e8 <_vfiprintf_r+0x208>
 801041e:	bf00      	nop
 8010420:	080121d8 	.word	0x080121d8
 8010424:	080121f8 	.word	0x080121f8
 8010428:	080121b8 	.word	0x080121b8
 801042c:	0801243c 	.word	0x0801243c
 8010430:	08012446 	.word	0x08012446
 8010434:	0800de39 	.word	0x0800de39
 8010438:	080101bb 	.word	0x080101bb
 801043c:	08012442 	.word	0x08012442

08010440 <_read_r>:
 8010440:	b538      	push	{r3, r4, r5, lr}
 8010442:	4d07      	ldr	r5, [pc, #28]	; (8010460 <_read_r+0x20>)
 8010444:	4604      	mov	r4, r0
 8010446:	4608      	mov	r0, r1
 8010448:	4611      	mov	r1, r2
 801044a:	2200      	movs	r2, #0
 801044c:	602a      	str	r2, [r5, #0]
 801044e:	461a      	mov	r2, r3
 8010450:	f7f3 fa9e 	bl	8003990 <_read>
 8010454:	1c43      	adds	r3, r0, #1
 8010456:	d102      	bne.n	801045e <_read_r+0x1e>
 8010458:	682b      	ldr	r3, [r5, #0]
 801045a:	b103      	cbz	r3, 801045e <_read_r+0x1e>
 801045c:	6023      	str	r3, [r4, #0]
 801045e:	bd38      	pop	{r3, r4, r5, pc}
 8010460:	20005aac 	.word	0x20005aac

08010464 <__assert_func>:
 8010464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010466:	4614      	mov	r4, r2
 8010468:	461a      	mov	r2, r3
 801046a:	4b09      	ldr	r3, [pc, #36]	; (8010490 <__assert_func+0x2c>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	4605      	mov	r5, r0
 8010470:	68d8      	ldr	r0, [r3, #12]
 8010472:	b14c      	cbz	r4, 8010488 <__assert_func+0x24>
 8010474:	4b07      	ldr	r3, [pc, #28]	; (8010494 <__assert_func+0x30>)
 8010476:	9100      	str	r1, [sp, #0]
 8010478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801047c:	4906      	ldr	r1, [pc, #24]	; (8010498 <__assert_func+0x34>)
 801047e:	462b      	mov	r3, r5
 8010480:	f000 f80e 	bl	80104a0 <fiprintf>
 8010484:	f000 f85f 	bl	8010546 <abort>
 8010488:	4b04      	ldr	r3, [pc, #16]	; (801049c <__assert_func+0x38>)
 801048a:	461c      	mov	r4, r3
 801048c:	e7f3      	b.n	8010476 <__assert_func+0x12>
 801048e:	bf00      	nop
 8010490:	200000a0 	.word	0x200000a0
 8010494:	0801244d 	.word	0x0801244d
 8010498:	0801245a 	.word	0x0801245a
 801049c:	08012488 	.word	0x08012488

080104a0 <fiprintf>:
 80104a0:	b40e      	push	{r1, r2, r3}
 80104a2:	b503      	push	{r0, r1, lr}
 80104a4:	4601      	mov	r1, r0
 80104a6:	ab03      	add	r3, sp, #12
 80104a8:	4805      	ldr	r0, [pc, #20]	; (80104c0 <fiprintf+0x20>)
 80104aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80104ae:	6800      	ldr	r0, [r0, #0]
 80104b0:	9301      	str	r3, [sp, #4]
 80104b2:	f7ff fe95 	bl	80101e0 <_vfiprintf_r>
 80104b6:	b002      	add	sp, #8
 80104b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80104bc:	b003      	add	sp, #12
 80104be:	4770      	bx	lr
 80104c0:	200000a0 	.word	0x200000a0

080104c4 <_fstat_r>:
 80104c4:	b538      	push	{r3, r4, r5, lr}
 80104c6:	4d07      	ldr	r5, [pc, #28]	; (80104e4 <_fstat_r+0x20>)
 80104c8:	2300      	movs	r3, #0
 80104ca:	4604      	mov	r4, r0
 80104cc:	4608      	mov	r0, r1
 80104ce:	4611      	mov	r1, r2
 80104d0:	602b      	str	r3, [r5, #0]
 80104d2:	f7f3 fa86 	bl	80039e2 <_fstat>
 80104d6:	1c43      	adds	r3, r0, #1
 80104d8:	d102      	bne.n	80104e0 <_fstat_r+0x1c>
 80104da:	682b      	ldr	r3, [r5, #0]
 80104dc:	b103      	cbz	r3, 80104e0 <_fstat_r+0x1c>
 80104de:	6023      	str	r3, [r4, #0]
 80104e0:	bd38      	pop	{r3, r4, r5, pc}
 80104e2:	bf00      	nop
 80104e4:	20005aac 	.word	0x20005aac

080104e8 <_isatty_r>:
 80104e8:	b538      	push	{r3, r4, r5, lr}
 80104ea:	4d06      	ldr	r5, [pc, #24]	; (8010504 <_isatty_r+0x1c>)
 80104ec:	2300      	movs	r3, #0
 80104ee:	4604      	mov	r4, r0
 80104f0:	4608      	mov	r0, r1
 80104f2:	602b      	str	r3, [r5, #0]
 80104f4:	f7f3 fa85 	bl	8003a02 <_isatty>
 80104f8:	1c43      	adds	r3, r0, #1
 80104fa:	d102      	bne.n	8010502 <_isatty_r+0x1a>
 80104fc:	682b      	ldr	r3, [r5, #0]
 80104fe:	b103      	cbz	r3, 8010502 <_isatty_r+0x1a>
 8010500:	6023      	str	r3, [r4, #0]
 8010502:	bd38      	pop	{r3, r4, r5, pc}
 8010504:	20005aac 	.word	0x20005aac

08010508 <__ascii_mbtowc>:
 8010508:	b082      	sub	sp, #8
 801050a:	b901      	cbnz	r1, 801050e <__ascii_mbtowc+0x6>
 801050c:	a901      	add	r1, sp, #4
 801050e:	b142      	cbz	r2, 8010522 <__ascii_mbtowc+0x1a>
 8010510:	b14b      	cbz	r3, 8010526 <__ascii_mbtowc+0x1e>
 8010512:	7813      	ldrb	r3, [r2, #0]
 8010514:	600b      	str	r3, [r1, #0]
 8010516:	7812      	ldrb	r2, [r2, #0]
 8010518:	1e10      	subs	r0, r2, #0
 801051a:	bf18      	it	ne
 801051c:	2001      	movne	r0, #1
 801051e:	b002      	add	sp, #8
 8010520:	4770      	bx	lr
 8010522:	4610      	mov	r0, r2
 8010524:	e7fb      	b.n	801051e <__ascii_mbtowc+0x16>
 8010526:	f06f 0001 	mvn.w	r0, #1
 801052a:	e7f8      	b.n	801051e <__ascii_mbtowc+0x16>

0801052c <__ascii_wctomb>:
 801052c:	b149      	cbz	r1, 8010542 <__ascii_wctomb+0x16>
 801052e:	2aff      	cmp	r2, #255	; 0xff
 8010530:	bf85      	ittet	hi
 8010532:	238a      	movhi	r3, #138	; 0x8a
 8010534:	6003      	strhi	r3, [r0, #0]
 8010536:	700a      	strbls	r2, [r1, #0]
 8010538:	f04f 30ff 	movhi.w	r0, #4294967295
 801053c:	bf98      	it	ls
 801053e:	2001      	movls	r0, #1
 8010540:	4770      	bx	lr
 8010542:	4608      	mov	r0, r1
 8010544:	4770      	bx	lr

08010546 <abort>:
 8010546:	b508      	push	{r3, lr}
 8010548:	2006      	movs	r0, #6
 801054a:	f000 f82b 	bl	80105a4 <raise>
 801054e:	2001      	movs	r0, #1
 8010550:	f7f3 fa14 	bl	800397c <_exit>

08010554 <_raise_r>:
 8010554:	291f      	cmp	r1, #31
 8010556:	b538      	push	{r3, r4, r5, lr}
 8010558:	4604      	mov	r4, r0
 801055a:	460d      	mov	r5, r1
 801055c:	d904      	bls.n	8010568 <_raise_r+0x14>
 801055e:	2316      	movs	r3, #22
 8010560:	6003      	str	r3, [r0, #0]
 8010562:	f04f 30ff 	mov.w	r0, #4294967295
 8010566:	bd38      	pop	{r3, r4, r5, pc}
 8010568:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801056a:	b112      	cbz	r2, 8010572 <_raise_r+0x1e>
 801056c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010570:	b94b      	cbnz	r3, 8010586 <_raise_r+0x32>
 8010572:	4620      	mov	r0, r4
 8010574:	f000 f830 	bl	80105d8 <_getpid_r>
 8010578:	462a      	mov	r2, r5
 801057a:	4601      	mov	r1, r0
 801057c:	4620      	mov	r0, r4
 801057e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010582:	f000 b817 	b.w	80105b4 <_kill_r>
 8010586:	2b01      	cmp	r3, #1
 8010588:	d00a      	beq.n	80105a0 <_raise_r+0x4c>
 801058a:	1c59      	adds	r1, r3, #1
 801058c:	d103      	bne.n	8010596 <_raise_r+0x42>
 801058e:	2316      	movs	r3, #22
 8010590:	6003      	str	r3, [r0, #0]
 8010592:	2001      	movs	r0, #1
 8010594:	e7e7      	b.n	8010566 <_raise_r+0x12>
 8010596:	2400      	movs	r4, #0
 8010598:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801059c:	4628      	mov	r0, r5
 801059e:	4798      	blx	r3
 80105a0:	2000      	movs	r0, #0
 80105a2:	e7e0      	b.n	8010566 <_raise_r+0x12>

080105a4 <raise>:
 80105a4:	4b02      	ldr	r3, [pc, #8]	; (80105b0 <raise+0xc>)
 80105a6:	4601      	mov	r1, r0
 80105a8:	6818      	ldr	r0, [r3, #0]
 80105aa:	f7ff bfd3 	b.w	8010554 <_raise_r>
 80105ae:	bf00      	nop
 80105b0:	200000a0 	.word	0x200000a0

080105b4 <_kill_r>:
 80105b4:	b538      	push	{r3, r4, r5, lr}
 80105b6:	4d07      	ldr	r5, [pc, #28]	; (80105d4 <_kill_r+0x20>)
 80105b8:	2300      	movs	r3, #0
 80105ba:	4604      	mov	r4, r0
 80105bc:	4608      	mov	r0, r1
 80105be:	4611      	mov	r1, r2
 80105c0:	602b      	str	r3, [r5, #0]
 80105c2:	f7f3 f9cb 	bl	800395c <_kill>
 80105c6:	1c43      	adds	r3, r0, #1
 80105c8:	d102      	bne.n	80105d0 <_kill_r+0x1c>
 80105ca:	682b      	ldr	r3, [r5, #0]
 80105cc:	b103      	cbz	r3, 80105d0 <_kill_r+0x1c>
 80105ce:	6023      	str	r3, [r4, #0]
 80105d0:	bd38      	pop	{r3, r4, r5, pc}
 80105d2:	bf00      	nop
 80105d4:	20005aac 	.word	0x20005aac

080105d8 <_getpid_r>:
 80105d8:	f7f3 b9b8 	b.w	800394c <_getpid>
 80105dc:	0000      	movs	r0, r0
	...

080105e0 <cos>:
 80105e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105e2:	ec53 2b10 	vmov	r2, r3, d0
 80105e6:	4826      	ldr	r0, [pc, #152]	; (8010680 <cos+0xa0>)
 80105e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80105ec:	4281      	cmp	r1, r0
 80105ee:	dc06      	bgt.n	80105fe <cos+0x1e>
 80105f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010678 <cos+0x98>
 80105f4:	b005      	add	sp, #20
 80105f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80105fa:	f000 bb79 	b.w	8010cf0 <__kernel_cos>
 80105fe:	4821      	ldr	r0, [pc, #132]	; (8010684 <cos+0xa4>)
 8010600:	4281      	cmp	r1, r0
 8010602:	dd09      	ble.n	8010618 <cos+0x38>
 8010604:	ee10 0a10 	vmov	r0, s0
 8010608:	4619      	mov	r1, r3
 801060a:	f7ef fe3d 	bl	8000288 <__aeabi_dsub>
 801060e:	ec41 0b10 	vmov	d0, r0, r1
 8010612:	b005      	add	sp, #20
 8010614:	f85d fb04 	ldr.w	pc, [sp], #4
 8010618:	4668      	mov	r0, sp
 801061a:	f000 f95d 	bl	80108d8 <__ieee754_rem_pio2>
 801061e:	f000 0003 	and.w	r0, r0, #3
 8010622:	2801      	cmp	r0, #1
 8010624:	d00b      	beq.n	801063e <cos+0x5e>
 8010626:	2802      	cmp	r0, #2
 8010628:	d016      	beq.n	8010658 <cos+0x78>
 801062a:	b9e0      	cbnz	r0, 8010666 <cos+0x86>
 801062c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010630:	ed9d 0b00 	vldr	d0, [sp]
 8010634:	f000 fb5c 	bl	8010cf0 <__kernel_cos>
 8010638:	ec51 0b10 	vmov	r0, r1, d0
 801063c:	e7e7      	b.n	801060e <cos+0x2e>
 801063e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010642:	ed9d 0b00 	vldr	d0, [sp]
 8010646:	f000 ff6b 	bl	8011520 <__kernel_sin>
 801064a:	ec53 2b10 	vmov	r2, r3, d0
 801064e:	ee10 0a10 	vmov	r0, s0
 8010652:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010656:	e7da      	b.n	801060e <cos+0x2e>
 8010658:	ed9d 1b02 	vldr	d1, [sp, #8]
 801065c:	ed9d 0b00 	vldr	d0, [sp]
 8010660:	f000 fb46 	bl	8010cf0 <__kernel_cos>
 8010664:	e7f1      	b.n	801064a <cos+0x6a>
 8010666:	ed9d 1b02 	vldr	d1, [sp, #8]
 801066a:	ed9d 0b00 	vldr	d0, [sp]
 801066e:	2001      	movs	r0, #1
 8010670:	f000 ff56 	bl	8011520 <__kernel_sin>
 8010674:	e7e0      	b.n	8010638 <cos+0x58>
 8010676:	bf00      	nop
	...
 8010680:	3fe921fb 	.word	0x3fe921fb
 8010684:	7fefffff 	.word	0x7fefffff

08010688 <sin>:
 8010688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801068a:	ec53 2b10 	vmov	r2, r3, d0
 801068e:	4828      	ldr	r0, [pc, #160]	; (8010730 <sin+0xa8>)
 8010690:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010694:	4281      	cmp	r1, r0
 8010696:	dc07      	bgt.n	80106a8 <sin+0x20>
 8010698:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010728 <sin+0xa0>
 801069c:	2000      	movs	r0, #0
 801069e:	b005      	add	sp, #20
 80106a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80106a4:	f000 bf3c 	b.w	8011520 <__kernel_sin>
 80106a8:	4822      	ldr	r0, [pc, #136]	; (8010734 <sin+0xac>)
 80106aa:	4281      	cmp	r1, r0
 80106ac:	dd09      	ble.n	80106c2 <sin+0x3a>
 80106ae:	ee10 0a10 	vmov	r0, s0
 80106b2:	4619      	mov	r1, r3
 80106b4:	f7ef fde8 	bl	8000288 <__aeabi_dsub>
 80106b8:	ec41 0b10 	vmov	d0, r0, r1
 80106bc:	b005      	add	sp, #20
 80106be:	f85d fb04 	ldr.w	pc, [sp], #4
 80106c2:	4668      	mov	r0, sp
 80106c4:	f000 f908 	bl	80108d8 <__ieee754_rem_pio2>
 80106c8:	f000 0003 	and.w	r0, r0, #3
 80106cc:	2801      	cmp	r0, #1
 80106ce:	d00c      	beq.n	80106ea <sin+0x62>
 80106d0:	2802      	cmp	r0, #2
 80106d2:	d011      	beq.n	80106f8 <sin+0x70>
 80106d4:	b9f0      	cbnz	r0, 8010714 <sin+0x8c>
 80106d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106da:	ed9d 0b00 	vldr	d0, [sp]
 80106de:	2001      	movs	r0, #1
 80106e0:	f000 ff1e 	bl	8011520 <__kernel_sin>
 80106e4:	ec51 0b10 	vmov	r0, r1, d0
 80106e8:	e7e6      	b.n	80106b8 <sin+0x30>
 80106ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106ee:	ed9d 0b00 	vldr	d0, [sp]
 80106f2:	f000 fafd 	bl	8010cf0 <__kernel_cos>
 80106f6:	e7f5      	b.n	80106e4 <sin+0x5c>
 80106f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106fc:	ed9d 0b00 	vldr	d0, [sp]
 8010700:	2001      	movs	r0, #1
 8010702:	f000 ff0d 	bl	8011520 <__kernel_sin>
 8010706:	ec53 2b10 	vmov	r2, r3, d0
 801070a:	ee10 0a10 	vmov	r0, s0
 801070e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010712:	e7d1      	b.n	80106b8 <sin+0x30>
 8010714:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010718:	ed9d 0b00 	vldr	d0, [sp]
 801071c:	f000 fae8 	bl	8010cf0 <__kernel_cos>
 8010720:	e7f1      	b.n	8010706 <sin+0x7e>
 8010722:	bf00      	nop
 8010724:	f3af 8000 	nop.w
	...
 8010730:	3fe921fb 	.word	0x3fe921fb
 8010734:	7fefffff 	.word	0x7fefffff

08010738 <atan2>:
 8010738:	f000 b802 	b.w	8010740 <__ieee754_atan2>
 801073c:	0000      	movs	r0, r0
	...

08010740 <__ieee754_atan2>:
 8010740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010744:	ec57 6b11 	vmov	r6, r7, d1
 8010748:	4273      	negs	r3, r6
 801074a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80108d0 <__ieee754_atan2+0x190>
 801074e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010752:	4333      	orrs	r3, r6
 8010754:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010758:	4573      	cmp	r3, lr
 801075a:	ec51 0b10 	vmov	r0, r1, d0
 801075e:	ee11 8a10 	vmov	r8, s2
 8010762:	d80a      	bhi.n	801077a <__ieee754_atan2+0x3a>
 8010764:	4244      	negs	r4, r0
 8010766:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801076a:	4304      	orrs	r4, r0
 801076c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010770:	4574      	cmp	r4, lr
 8010772:	ee10 9a10 	vmov	r9, s0
 8010776:	468c      	mov	ip, r1
 8010778:	d907      	bls.n	801078a <__ieee754_atan2+0x4a>
 801077a:	4632      	mov	r2, r6
 801077c:	463b      	mov	r3, r7
 801077e:	f7ef fd85 	bl	800028c <__adddf3>
 8010782:	ec41 0b10 	vmov	d0, r0, r1
 8010786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801078a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801078e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010792:	4334      	orrs	r4, r6
 8010794:	d103      	bne.n	801079e <__ieee754_atan2+0x5e>
 8010796:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801079a:	f000 bf81 	b.w	80116a0 <atan>
 801079e:	17bc      	asrs	r4, r7, #30
 80107a0:	f004 0402 	and.w	r4, r4, #2
 80107a4:	ea53 0909 	orrs.w	r9, r3, r9
 80107a8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80107ac:	d107      	bne.n	80107be <__ieee754_atan2+0x7e>
 80107ae:	2c02      	cmp	r4, #2
 80107b0:	d060      	beq.n	8010874 <__ieee754_atan2+0x134>
 80107b2:	2c03      	cmp	r4, #3
 80107b4:	d1e5      	bne.n	8010782 <__ieee754_atan2+0x42>
 80107b6:	a142      	add	r1, pc, #264	; (adr r1, 80108c0 <__ieee754_atan2+0x180>)
 80107b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107bc:	e7e1      	b.n	8010782 <__ieee754_atan2+0x42>
 80107be:	ea52 0808 	orrs.w	r8, r2, r8
 80107c2:	d106      	bne.n	80107d2 <__ieee754_atan2+0x92>
 80107c4:	f1bc 0f00 	cmp.w	ip, #0
 80107c8:	da5f      	bge.n	801088a <__ieee754_atan2+0x14a>
 80107ca:	a13f      	add	r1, pc, #252	; (adr r1, 80108c8 <__ieee754_atan2+0x188>)
 80107cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107d0:	e7d7      	b.n	8010782 <__ieee754_atan2+0x42>
 80107d2:	4572      	cmp	r2, lr
 80107d4:	d10f      	bne.n	80107f6 <__ieee754_atan2+0xb6>
 80107d6:	4293      	cmp	r3, r2
 80107d8:	f104 34ff 	add.w	r4, r4, #4294967295
 80107dc:	d107      	bne.n	80107ee <__ieee754_atan2+0xae>
 80107de:	2c02      	cmp	r4, #2
 80107e0:	d84c      	bhi.n	801087c <__ieee754_atan2+0x13c>
 80107e2:	4b35      	ldr	r3, [pc, #212]	; (80108b8 <__ieee754_atan2+0x178>)
 80107e4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80107e8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80107ec:	e7c9      	b.n	8010782 <__ieee754_atan2+0x42>
 80107ee:	2c02      	cmp	r4, #2
 80107f0:	d848      	bhi.n	8010884 <__ieee754_atan2+0x144>
 80107f2:	4b32      	ldr	r3, [pc, #200]	; (80108bc <__ieee754_atan2+0x17c>)
 80107f4:	e7f6      	b.n	80107e4 <__ieee754_atan2+0xa4>
 80107f6:	4573      	cmp	r3, lr
 80107f8:	d0e4      	beq.n	80107c4 <__ieee754_atan2+0x84>
 80107fa:	1a9b      	subs	r3, r3, r2
 80107fc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010800:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010804:	da1e      	bge.n	8010844 <__ieee754_atan2+0x104>
 8010806:	2f00      	cmp	r7, #0
 8010808:	da01      	bge.n	801080e <__ieee754_atan2+0xce>
 801080a:	323c      	adds	r2, #60	; 0x3c
 801080c:	db1e      	blt.n	801084c <__ieee754_atan2+0x10c>
 801080e:	4632      	mov	r2, r6
 8010810:	463b      	mov	r3, r7
 8010812:	f7f0 f81b 	bl	800084c <__aeabi_ddiv>
 8010816:	ec41 0b10 	vmov	d0, r0, r1
 801081a:	f001 f8e1 	bl	80119e0 <fabs>
 801081e:	f000 ff3f 	bl	80116a0 <atan>
 8010822:	ec51 0b10 	vmov	r0, r1, d0
 8010826:	2c01      	cmp	r4, #1
 8010828:	d013      	beq.n	8010852 <__ieee754_atan2+0x112>
 801082a:	2c02      	cmp	r4, #2
 801082c:	d015      	beq.n	801085a <__ieee754_atan2+0x11a>
 801082e:	2c00      	cmp	r4, #0
 8010830:	d0a7      	beq.n	8010782 <__ieee754_atan2+0x42>
 8010832:	a319      	add	r3, pc, #100	; (adr r3, 8010898 <__ieee754_atan2+0x158>)
 8010834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010838:	f7ef fd26 	bl	8000288 <__aeabi_dsub>
 801083c:	a318      	add	r3, pc, #96	; (adr r3, 80108a0 <__ieee754_atan2+0x160>)
 801083e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010842:	e014      	b.n	801086e <__ieee754_atan2+0x12e>
 8010844:	a118      	add	r1, pc, #96	; (adr r1, 80108a8 <__ieee754_atan2+0x168>)
 8010846:	e9d1 0100 	ldrd	r0, r1, [r1]
 801084a:	e7ec      	b.n	8010826 <__ieee754_atan2+0xe6>
 801084c:	2000      	movs	r0, #0
 801084e:	2100      	movs	r1, #0
 8010850:	e7e9      	b.n	8010826 <__ieee754_atan2+0xe6>
 8010852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010856:	4619      	mov	r1, r3
 8010858:	e793      	b.n	8010782 <__ieee754_atan2+0x42>
 801085a:	a30f      	add	r3, pc, #60	; (adr r3, 8010898 <__ieee754_atan2+0x158>)
 801085c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010860:	f7ef fd12 	bl	8000288 <__aeabi_dsub>
 8010864:	4602      	mov	r2, r0
 8010866:	460b      	mov	r3, r1
 8010868:	a10d      	add	r1, pc, #52	; (adr r1, 80108a0 <__ieee754_atan2+0x160>)
 801086a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801086e:	f7ef fd0b 	bl	8000288 <__aeabi_dsub>
 8010872:	e786      	b.n	8010782 <__ieee754_atan2+0x42>
 8010874:	a10a      	add	r1, pc, #40	; (adr r1, 80108a0 <__ieee754_atan2+0x160>)
 8010876:	e9d1 0100 	ldrd	r0, r1, [r1]
 801087a:	e782      	b.n	8010782 <__ieee754_atan2+0x42>
 801087c:	a10c      	add	r1, pc, #48	; (adr r1, 80108b0 <__ieee754_atan2+0x170>)
 801087e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010882:	e77e      	b.n	8010782 <__ieee754_atan2+0x42>
 8010884:	2000      	movs	r0, #0
 8010886:	2100      	movs	r1, #0
 8010888:	e77b      	b.n	8010782 <__ieee754_atan2+0x42>
 801088a:	a107      	add	r1, pc, #28	; (adr r1, 80108a8 <__ieee754_atan2+0x168>)
 801088c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010890:	e777      	b.n	8010782 <__ieee754_atan2+0x42>
 8010892:	bf00      	nop
 8010894:	f3af 8000 	nop.w
 8010898:	33145c07 	.word	0x33145c07
 801089c:	3ca1a626 	.word	0x3ca1a626
 80108a0:	54442d18 	.word	0x54442d18
 80108a4:	400921fb 	.word	0x400921fb
 80108a8:	54442d18 	.word	0x54442d18
 80108ac:	3ff921fb 	.word	0x3ff921fb
 80108b0:	54442d18 	.word	0x54442d18
 80108b4:	3fe921fb 	.word	0x3fe921fb
 80108b8:	08012598 	.word	0x08012598
 80108bc:	080125b0 	.word	0x080125b0
 80108c0:	54442d18 	.word	0x54442d18
 80108c4:	c00921fb 	.word	0xc00921fb
 80108c8:	54442d18 	.word	0x54442d18
 80108cc:	bff921fb 	.word	0xbff921fb
 80108d0:	7ff00000 	.word	0x7ff00000
 80108d4:	00000000 	.word	0x00000000

080108d8 <__ieee754_rem_pio2>:
 80108d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108dc:	ed2d 8b02 	vpush	{d8}
 80108e0:	ec55 4b10 	vmov	r4, r5, d0
 80108e4:	4bca      	ldr	r3, [pc, #808]	; (8010c10 <__ieee754_rem_pio2+0x338>)
 80108e6:	b08b      	sub	sp, #44	; 0x2c
 80108e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80108ec:	4598      	cmp	r8, r3
 80108ee:	4682      	mov	sl, r0
 80108f0:	9502      	str	r5, [sp, #8]
 80108f2:	dc08      	bgt.n	8010906 <__ieee754_rem_pio2+0x2e>
 80108f4:	2200      	movs	r2, #0
 80108f6:	2300      	movs	r3, #0
 80108f8:	ed80 0b00 	vstr	d0, [r0]
 80108fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010900:	f04f 0b00 	mov.w	fp, #0
 8010904:	e028      	b.n	8010958 <__ieee754_rem_pio2+0x80>
 8010906:	4bc3      	ldr	r3, [pc, #780]	; (8010c14 <__ieee754_rem_pio2+0x33c>)
 8010908:	4598      	cmp	r8, r3
 801090a:	dc78      	bgt.n	80109fe <__ieee754_rem_pio2+0x126>
 801090c:	9b02      	ldr	r3, [sp, #8]
 801090e:	4ec2      	ldr	r6, [pc, #776]	; (8010c18 <__ieee754_rem_pio2+0x340>)
 8010910:	2b00      	cmp	r3, #0
 8010912:	ee10 0a10 	vmov	r0, s0
 8010916:	a3b0      	add	r3, pc, #704	; (adr r3, 8010bd8 <__ieee754_rem_pio2+0x300>)
 8010918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091c:	4629      	mov	r1, r5
 801091e:	dd39      	ble.n	8010994 <__ieee754_rem_pio2+0xbc>
 8010920:	f7ef fcb2 	bl	8000288 <__aeabi_dsub>
 8010924:	45b0      	cmp	r8, r6
 8010926:	4604      	mov	r4, r0
 8010928:	460d      	mov	r5, r1
 801092a:	d01b      	beq.n	8010964 <__ieee754_rem_pio2+0x8c>
 801092c:	a3ac      	add	r3, pc, #688	; (adr r3, 8010be0 <__ieee754_rem_pio2+0x308>)
 801092e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010932:	f7ef fca9 	bl	8000288 <__aeabi_dsub>
 8010936:	4602      	mov	r2, r0
 8010938:	460b      	mov	r3, r1
 801093a:	e9ca 2300 	strd	r2, r3, [sl]
 801093e:	4620      	mov	r0, r4
 8010940:	4629      	mov	r1, r5
 8010942:	f7ef fca1 	bl	8000288 <__aeabi_dsub>
 8010946:	a3a6      	add	r3, pc, #664	; (adr r3, 8010be0 <__ieee754_rem_pio2+0x308>)
 8010948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094c:	f7ef fc9c 	bl	8000288 <__aeabi_dsub>
 8010950:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010954:	f04f 0b01 	mov.w	fp, #1
 8010958:	4658      	mov	r0, fp
 801095a:	b00b      	add	sp, #44	; 0x2c
 801095c:	ecbd 8b02 	vpop	{d8}
 8010960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010964:	a3a0      	add	r3, pc, #640	; (adr r3, 8010be8 <__ieee754_rem_pio2+0x310>)
 8010966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801096a:	f7ef fc8d 	bl	8000288 <__aeabi_dsub>
 801096e:	a3a0      	add	r3, pc, #640	; (adr r3, 8010bf0 <__ieee754_rem_pio2+0x318>)
 8010970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010974:	4604      	mov	r4, r0
 8010976:	460d      	mov	r5, r1
 8010978:	f7ef fc86 	bl	8000288 <__aeabi_dsub>
 801097c:	4602      	mov	r2, r0
 801097e:	460b      	mov	r3, r1
 8010980:	e9ca 2300 	strd	r2, r3, [sl]
 8010984:	4620      	mov	r0, r4
 8010986:	4629      	mov	r1, r5
 8010988:	f7ef fc7e 	bl	8000288 <__aeabi_dsub>
 801098c:	a398      	add	r3, pc, #608	; (adr r3, 8010bf0 <__ieee754_rem_pio2+0x318>)
 801098e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010992:	e7db      	b.n	801094c <__ieee754_rem_pio2+0x74>
 8010994:	f7ef fc7a 	bl	800028c <__adddf3>
 8010998:	45b0      	cmp	r8, r6
 801099a:	4604      	mov	r4, r0
 801099c:	460d      	mov	r5, r1
 801099e:	d016      	beq.n	80109ce <__ieee754_rem_pio2+0xf6>
 80109a0:	a38f      	add	r3, pc, #572	; (adr r3, 8010be0 <__ieee754_rem_pio2+0x308>)
 80109a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a6:	f7ef fc71 	bl	800028c <__adddf3>
 80109aa:	4602      	mov	r2, r0
 80109ac:	460b      	mov	r3, r1
 80109ae:	e9ca 2300 	strd	r2, r3, [sl]
 80109b2:	4620      	mov	r0, r4
 80109b4:	4629      	mov	r1, r5
 80109b6:	f7ef fc67 	bl	8000288 <__aeabi_dsub>
 80109ba:	a389      	add	r3, pc, #548	; (adr r3, 8010be0 <__ieee754_rem_pio2+0x308>)
 80109bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c0:	f7ef fc64 	bl	800028c <__adddf3>
 80109c4:	f04f 3bff 	mov.w	fp, #4294967295
 80109c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80109cc:	e7c4      	b.n	8010958 <__ieee754_rem_pio2+0x80>
 80109ce:	a386      	add	r3, pc, #536	; (adr r3, 8010be8 <__ieee754_rem_pio2+0x310>)
 80109d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d4:	f7ef fc5a 	bl	800028c <__adddf3>
 80109d8:	a385      	add	r3, pc, #532	; (adr r3, 8010bf0 <__ieee754_rem_pio2+0x318>)
 80109da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109de:	4604      	mov	r4, r0
 80109e0:	460d      	mov	r5, r1
 80109e2:	f7ef fc53 	bl	800028c <__adddf3>
 80109e6:	4602      	mov	r2, r0
 80109e8:	460b      	mov	r3, r1
 80109ea:	e9ca 2300 	strd	r2, r3, [sl]
 80109ee:	4620      	mov	r0, r4
 80109f0:	4629      	mov	r1, r5
 80109f2:	f7ef fc49 	bl	8000288 <__aeabi_dsub>
 80109f6:	a37e      	add	r3, pc, #504	; (adr r3, 8010bf0 <__ieee754_rem_pio2+0x318>)
 80109f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109fc:	e7e0      	b.n	80109c0 <__ieee754_rem_pio2+0xe8>
 80109fe:	4b87      	ldr	r3, [pc, #540]	; (8010c1c <__ieee754_rem_pio2+0x344>)
 8010a00:	4598      	cmp	r8, r3
 8010a02:	f300 80d9 	bgt.w	8010bb8 <__ieee754_rem_pio2+0x2e0>
 8010a06:	f000 ffeb 	bl	80119e0 <fabs>
 8010a0a:	ec55 4b10 	vmov	r4, r5, d0
 8010a0e:	ee10 0a10 	vmov	r0, s0
 8010a12:	a379      	add	r3, pc, #484	; (adr r3, 8010bf8 <__ieee754_rem_pio2+0x320>)
 8010a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a18:	4629      	mov	r1, r5
 8010a1a:	f7ef fded 	bl	80005f8 <__aeabi_dmul>
 8010a1e:	4b80      	ldr	r3, [pc, #512]	; (8010c20 <__ieee754_rem_pio2+0x348>)
 8010a20:	2200      	movs	r2, #0
 8010a22:	f7ef fc33 	bl	800028c <__adddf3>
 8010a26:	f7f0 f897 	bl	8000b58 <__aeabi_d2iz>
 8010a2a:	4683      	mov	fp, r0
 8010a2c:	f7ef fd7a 	bl	8000524 <__aeabi_i2d>
 8010a30:	4602      	mov	r2, r0
 8010a32:	460b      	mov	r3, r1
 8010a34:	ec43 2b18 	vmov	d8, r2, r3
 8010a38:	a367      	add	r3, pc, #412	; (adr r3, 8010bd8 <__ieee754_rem_pio2+0x300>)
 8010a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a3e:	f7ef fddb 	bl	80005f8 <__aeabi_dmul>
 8010a42:	4602      	mov	r2, r0
 8010a44:	460b      	mov	r3, r1
 8010a46:	4620      	mov	r0, r4
 8010a48:	4629      	mov	r1, r5
 8010a4a:	f7ef fc1d 	bl	8000288 <__aeabi_dsub>
 8010a4e:	a364      	add	r3, pc, #400	; (adr r3, 8010be0 <__ieee754_rem_pio2+0x308>)
 8010a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a54:	4606      	mov	r6, r0
 8010a56:	460f      	mov	r7, r1
 8010a58:	ec51 0b18 	vmov	r0, r1, d8
 8010a5c:	f7ef fdcc 	bl	80005f8 <__aeabi_dmul>
 8010a60:	f1bb 0f1f 	cmp.w	fp, #31
 8010a64:	4604      	mov	r4, r0
 8010a66:	460d      	mov	r5, r1
 8010a68:	dc0d      	bgt.n	8010a86 <__ieee754_rem_pio2+0x1ae>
 8010a6a:	4b6e      	ldr	r3, [pc, #440]	; (8010c24 <__ieee754_rem_pio2+0x34c>)
 8010a6c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a74:	4543      	cmp	r3, r8
 8010a76:	d006      	beq.n	8010a86 <__ieee754_rem_pio2+0x1ae>
 8010a78:	4622      	mov	r2, r4
 8010a7a:	462b      	mov	r3, r5
 8010a7c:	4630      	mov	r0, r6
 8010a7e:	4639      	mov	r1, r7
 8010a80:	f7ef fc02 	bl	8000288 <__aeabi_dsub>
 8010a84:	e00f      	b.n	8010aa6 <__ieee754_rem_pio2+0x1ce>
 8010a86:	462b      	mov	r3, r5
 8010a88:	4622      	mov	r2, r4
 8010a8a:	4630      	mov	r0, r6
 8010a8c:	4639      	mov	r1, r7
 8010a8e:	f7ef fbfb 	bl	8000288 <__aeabi_dsub>
 8010a92:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010a96:	9303      	str	r3, [sp, #12]
 8010a98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010a9c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8010aa0:	f1b8 0f10 	cmp.w	r8, #16
 8010aa4:	dc02      	bgt.n	8010aac <__ieee754_rem_pio2+0x1d4>
 8010aa6:	e9ca 0100 	strd	r0, r1, [sl]
 8010aaa:	e039      	b.n	8010b20 <__ieee754_rem_pio2+0x248>
 8010aac:	a34e      	add	r3, pc, #312	; (adr r3, 8010be8 <__ieee754_rem_pio2+0x310>)
 8010aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab2:	ec51 0b18 	vmov	r0, r1, d8
 8010ab6:	f7ef fd9f 	bl	80005f8 <__aeabi_dmul>
 8010aba:	4604      	mov	r4, r0
 8010abc:	460d      	mov	r5, r1
 8010abe:	4602      	mov	r2, r0
 8010ac0:	460b      	mov	r3, r1
 8010ac2:	4630      	mov	r0, r6
 8010ac4:	4639      	mov	r1, r7
 8010ac6:	f7ef fbdf 	bl	8000288 <__aeabi_dsub>
 8010aca:	4602      	mov	r2, r0
 8010acc:	460b      	mov	r3, r1
 8010ace:	4680      	mov	r8, r0
 8010ad0:	4689      	mov	r9, r1
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	4639      	mov	r1, r7
 8010ad6:	f7ef fbd7 	bl	8000288 <__aeabi_dsub>
 8010ada:	4622      	mov	r2, r4
 8010adc:	462b      	mov	r3, r5
 8010ade:	f7ef fbd3 	bl	8000288 <__aeabi_dsub>
 8010ae2:	a343      	add	r3, pc, #268	; (adr r3, 8010bf0 <__ieee754_rem_pio2+0x318>)
 8010ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ae8:	4604      	mov	r4, r0
 8010aea:	460d      	mov	r5, r1
 8010aec:	ec51 0b18 	vmov	r0, r1, d8
 8010af0:	f7ef fd82 	bl	80005f8 <__aeabi_dmul>
 8010af4:	4622      	mov	r2, r4
 8010af6:	462b      	mov	r3, r5
 8010af8:	f7ef fbc6 	bl	8000288 <__aeabi_dsub>
 8010afc:	4602      	mov	r2, r0
 8010afe:	460b      	mov	r3, r1
 8010b00:	4604      	mov	r4, r0
 8010b02:	460d      	mov	r5, r1
 8010b04:	4640      	mov	r0, r8
 8010b06:	4649      	mov	r1, r9
 8010b08:	f7ef fbbe 	bl	8000288 <__aeabi_dsub>
 8010b0c:	9a03      	ldr	r2, [sp, #12]
 8010b0e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010b12:	1ad3      	subs	r3, r2, r3
 8010b14:	2b31      	cmp	r3, #49	; 0x31
 8010b16:	dc24      	bgt.n	8010b62 <__ieee754_rem_pio2+0x28a>
 8010b18:	e9ca 0100 	strd	r0, r1, [sl]
 8010b1c:	4646      	mov	r6, r8
 8010b1e:	464f      	mov	r7, r9
 8010b20:	e9da 8900 	ldrd	r8, r9, [sl]
 8010b24:	4630      	mov	r0, r6
 8010b26:	4642      	mov	r2, r8
 8010b28:	464b      	mov	r3, r9
 8010b2a:	4639      	mov	r1, r7
 8010b2c:	f7ef fbac 	bl	8000288 <__aeabi_dsub>
 8010b30:	462b      	mov	r3, r5
 8010b32:	4622      	mov	r2, r4
 8010b34:	f7ef fba8 	bl	8000288 <__aeabi_dsub>
 8010b38:	9b02      	ldr	r3, [sp, #8]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010b40:	f6bf af0a 	bge.w	8010958 <__ieee754_rem_pio2+0x80>
 8010b44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010b48:	f8ca 3004 	str.w	r3, [sl, #4]
 8010b4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b50:	f8ca 8000 	str.w	r8, [sl]
 8010b54:	f8ca 0008 	str.w	r0, [sl, #8]
 8010b58:	f8ca 300c 	str.w	r3, [sl, #12]
 8010b5c:	f1cb 0b00 	rsb	fp, fp, #0
 8010b60:	e6fa      	b.n	8010958 <__ieee754_rem_pio2+0x80>
 8010b62:	a327      	add	r3, pc, #156	; (adr r3, 8010c00 <__ieee754_rem_pio2+0x328>)
 8010b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b68:	ec51 0b18 	vmov	r0, r1, d8
 8010b6c:	f7ef fd44 	bl	80005f8 <__aeabi_dmul>
 8010b70:	4604      	mov	r4, r0
 8010b72:	460d      	mov	r5, r1
 8010b74:	4602      	mov	r2, r0
 8010b76:	460b      	mov	r3, r1
 8010b78:	4640      	mov	r0, r8
 8010b7a:	4649      	mov	r1, r9
 8010b7c:	f7ef fb84 	bl	8000288 <__aeabi_dsub>
 8010b80:	4602      	mov	r2, r0
 8010b82:	460b      	mov	r3, r1
 8010b84:	4606      	mov	r6, r0
 8010b86:	460f      	mov	r7, r1
 8010b88:	4640      	mov	r0, r8
 8010b8a:	4649      	mov	r1, r9
 8010b8c:	f7ef fb7c 	bl	8000288 <__aeabi_dsub>
 8010b90:	4622      	mov	r2, r4
 8010b92:	462b      	mov	r3, r5
 8010b94:	f7ef fb78 	bl	8000288 <__aeabi_dsub>
 8010b98:	a31b      	add	r3, pc, #108	; (adr r3, 8010c08 <__ieee754_rem_pio2+0x330>)
 8010b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b9e:	4604      	mov	r4, r0
 8010ba0:	460d      	mov	r5, r1
 8010ba2:	ec51 0b18 	vmov	r0, r1, d8
 8010ba6:	f7ef fd27 	bl	80005f8 <__aeabi_dmul>
 8010baa:	4622      	mov	r2, r4
 8010bac:	462b      	mov	r3, r5
 8010bae:	f7ef fb6b 	bl	8000288 <__aeabi_dsub>
 8010bb2:	4604      	mov	r4, r0
 8010bb4:	460d      	mov	r5, r1
 8010bb6:	e75f      	b.n	8010a78 <__ieee754_rem_pio2+0x1a0>
 8010bb8:	4b1b      	ldr	r3, [pc, #108]	; (8010c28 <__ieee754_rem_pio2+0x350>)
 8010bba:	4598      	cmp	r8, r3
 8010bbc:	dd36      	ble.n	8010c2c <__ieee754_rem_pio2+0x354>
 8010bbe:	ee10 2a10 	vmov	r2, s0
 8010bc2:	462b      	mov	r3, r5
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	4629      	mov	r1, r5
 8010bc8:	f7ef fb5e 	bl	8000288 <__aeabi_dsub>
 8010bcc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010bd0:	e9ca 0100 	strd	r0, r1, [sl]
 8010bd4:	e694      	b.n	8010900 <__ieee754_rem_pio2+0x28>
 8010bd6:	bf00      	nop
 8010bd8:	54400000 	.word	0x54400000
 8010bdc:	3ff921fb 	.word	0x3ff921fb
 8010be0:	1a626331 	.word	0x1a626331
 8010be4:	3dd0b461 	.word	0x3dd0b461
 8010be8:	1a600000 	.word	0x1a600000
 8010bec:	3dd0b461 	.word	0x3dd0b461
 8010bf0:	2e037073 	.word	0x2e037073
 8010bf4:	3ba3198a 	.word	0x3ba3198a
 8010bf8:	6dc9c883 	.word	0x6dc9c883
 8010bfc:	3fe45f30 	.word	0x3fe45f30
 8010c00:	2e000000 	.word	0x2e000000
 8010c04:	3ba3198a 	.word	0x3ba3198a
 8010c08:	252049c1 	.word	0x252049c1
 8010c0c:	397b839a 	.word	0x397b839a
 8010c10:	3fe921fb 	.word	0x3fe921fb
 8010c14:	4002d97b 	.word	0x4002d97b
 8010c18:	3ff921fb 	.word	0x3ff921fb
 8010c1c:	413921fb 	.word	0x413921fb
 8010c20:	3fe00000 	.word	0x3fe00000
 8010c24:	080125c8 	.word	0x080125c8
 8010c28:	7fefffff 	.word	0x7fefffff
 8010c2c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8010c30:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8010c34:	ee10 0a10 	vmov	r0, s0
 8010c38:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8010c3c:	ee10 6a10 	vmov	r6, s0
 8010c40:	460f      	mov	r7, r1
 8010c42:	f7ef ff89 	bl	8000b58 <__aeabi_d2iz>
 8010c46:	f7ef fc6d 	bl	8000524 <__aeabi_i2d>
 8010c4a:	4602      	mov	r2, r0
 8010c4c:	460b      	mov	r3, r1
 8010c4e:	4630      	mov	r0, r6
 8010c50:	4639      	mov	r1, r7
 8010c52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010c56:	f7ef fb17 	bl	8000288 <__aeabi_dsub>
 8010c5a:	4b23      	ldr	r3, [pc, #140]	; (8010ce8 <__ieee754_rem_pio2+0x410>)
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	f7ef fccb 	bl	80005f8 <__aeabi_dmul>
 8010c62:	460f      	mov	r7, r1
 8010c64:	4606      	mov	r6, r0
 8010c66:	f7ef ff77 	bl	8000b58 <__aeabi_d2iz>
 8010c6a:	f7ef fc5b 	bl	8000524 <__aeabi_i2d>
 8010c6e:	4602      	mov	r2, r0
 8010c70:	460b      	mov	r3, r1
 8010c72:	4630      	mov	r0, r6
 8010c74:	4639      	mov	r1, r7
 8010c76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010c7a:	f7ef fb05 	bl	8000288 <__aeabi_dsub>
 8010c7e:	4b1a      	ldr	r3, [pc, #104]	; (8010ce8 <__ieee754_rem_pio2+0x410>)
 8010c80:	2200      	movs	r2, #0
 8010c82:	f7ef fcb9 	bl	80005f8 <__aeabi_dmul>
 8010c86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010c8a:	ad04      	add	r5, sp, #16
 8010c8c:	f04f 0803 	mov.w	r8, #3
 8010c90:	46a9      	mov	r9, r5
 8010c92:	2600      	movs	r6, #0
 8010c94:	2700      	movs	r7, #0
 8010c96:	4632      	mov	r2, r6
 8010c98:	463b      	mov	r3, r7
 8010c9a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8010c9e:	46c3      	mov	fp, r8
 8010ca0:	3d08      	subs	r5, #8
 8010ca2:	f108 38ff 	add.w	r8, r8, #4294967295
 8010ca6:	f7ef ff0f 	bl	8000ac8 <__aeabi_dcmpeq>
 8010caa:	2800      	cmp	r0, #0
 8010cac:	d1f3      	bne.n	8010c96 <__ieee754_rem_pio2+0x3be>
 8010cae:	4b0f      	ldr	r3, [pc, #60]	; (8010cec <__ieee754_rem_pio2+0x414>)
 8010cb0:	9301      	str	r3, [sp, #4]
 8010cb2:	2302      	movs	r3, #2
 8010cb4:	9300      	str	r3, [sp, #0]
 8010cb6:	4622      	mov	r2, r4
 8010cb8:	465b      	mov	r3, fp
 8010cba:	4651      	mov	r1, sl
 8010cbc:	4648      	mov	r0, r9
 8010cbe:	f000 f8df 	bl	8010e80 <__kernel_rem_pio2>
 8010cc2:	9b02      	ldr	r3, [sp, #8]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	4683      	mov	fp, r0
 8010cc8:	f6bf ae46 	bge.w	8010958 <__ieee754_rem_pio2+0x80>
 8010ccc:	e9da 2100 	ldrd	r2, r1, [sl]
 8010cd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010cd4:	e9ca 2300 	strd	r2, r3, [sl]
 8010cd8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010cdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ce0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010ce4:	e73a      	b.n	8010b5c <__ieee754_rem_pio2+0x284>
 8010ce6:	bf00      	nop
 8010ce8:	41700000 	.word	0x41700000
 8010cec:	08012648 	.word	0x08012648

08010cf0 <__kernel_cos>:
 8010cf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf4:	ec57 6b10 	vmov	r6, r7, d0
 8010cf8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010cfc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010d00:	ed8d 1b00 	vstr	d1, [sp]
 8010d04:	da07      	bge.n	8010d16 <__kernel_cos+0x26>
 8010d06:	ee10 0a10 	vmov	r0, s0
 8010d0a:	4639      	mov	r1, r7
 8010d0c:	f7ef ff24 	bl	8000b58 <__aeabi_d2iz>
 8010d10:	2800      	cmp	r0, #0
 8010d12:	f000 8088 	beq.w	8010e26 <__kernel_cos+0x136>
 8010d16:	4632      	mov	r2, r6
 8010d18:	463b      	mov	r3, r7
 8010d1a:	4630      	mov	r0, r6
 8010d1c:	4639      	mov	r1, r7
 8010d1e:	f7ef fc6b 	bl	80005f8 <__aeabi_dmul>
 8010d22:	4b51      	ldr	r3, [pc, #324]	; (8010e68 <__kernel_cos+0x178>)
 8010d24:	2200      	movs	r2, #0
 8010d26:	4604      	mov	r4, r0
 8010d28:	460d      	mov	r5, r1
 8010d2a:	f7ef fc65 	bl	80005f8 <__aeabi_dmul>
 8010d2e:	a340      	add	r3, pc, #256	; (adr r3, 8010e30 <__kernel_cos+0x140>)
 8010d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d34:	4682      	mov	sl, r0
 8010d36:	468b      	mov	fp, r1
 8010d38:	4620      	mov	r0, r4
 8010d3a:	4629      	mov	r1, r5
 8010d3c:	f7ef fc5c 	bl	80005f8 <__aeabi_dmul>
 8010d40:	a33d      	add	r3, pc, #244	; (adr r3, 8010e38 <__kernel_cos+0x148>)
 8010d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d46:	f7ef faa1 	bl	800028c <__adddf3>
 8010d4a:	4622      	mov	r2, r4
 8010d4c:	462b      	mov	r3, r5
 8010d4e:	f7ef fc53 	bl	80005f8 <__aeabi_dmul>
 8010d52:	a33b      	add	r3, pc, #236	; (adr r3, 8010e40 <__kernel_cos+0x150>)
 8010d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d58:	f7ef fa96 	bl	8000288 <__aeabi_dsub>
 8010d5c:	4622      	mov	r2, r4
 8010d5e:	462b      	mov	r3, r5
 8010d60:	f7ef fc4a 	bl	80005f8 <__aeabi_dmul>
 8010d64:	a338      	add	r3, pc, #224	; (adr r3, 8010e48 <__kernel_cos+0x158>)
 8010d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6a:	f7ef fa8f 	bl	800028c <__adddf3>
 8010d6e:	4622      	mov	r2, r4
 8010d70:	462b      	mov	r3, r5
 8010d72:	f7ef fc41 	bl	80005f8 <__aeabi_dmul>
 8010d76:	a336      	add	r3, pc, #216	; (adr r3, 8010e50 <__kernel_cos+0x160>)
 8010d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d7c:	f7ef fa84 	bl	8000288 <__aeabi_dsub>
 8010d80:	4622      	mov	r2, r4
 8010d82:	462b      	mov	r3, r5
 8010d84:	f7ef fc38 	bl	80005f8 <__aeabi_dmul>
 8010d88:	a333      	add	r3, pc, #204	; (adr r3, 8010e58 <__kernel_cos+0x168>)
 8010d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8e:	f7ef fa7d 	bl	800028c <__adddf3>
 8010d92:	4622      	mov	r2, r4
 8010d94:	462b      	mov	r3, r5
 8010d96:	f7ef fc2f 	bl	80005f8 <__aeabi_dmul>
 8010d9a:	4622      	mov	r2, r4
 8010d9c:	462b      	mov	r3, r5
 8010d9e:	f7ef fc2b 	bl	80005f8 <__aeabi_dmul>
 8010da2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010da6:	4604      	mov	r4, r0
 8010da8:	460d      	mov	r5, r1
 8010daa:	4630      	mov	r0, r6
 8010dac:	4639      	mov	r1, r7
 8010dae:	f7ef fc23 	bl	80005f8 <__aeabi_dmul>
 8010db2:	460b      	mov	r3, r1
 8010db4:	4602      	mov	r2, r0
 8010db6:	4629      	mov	r1, r5
 8010db8:	4620      	mov	r0, r4
 8010dba:	f7ef fa65 	bl	8000288 <__aeabi_dsub>
 8010dbe:	4b2b      	ldr	r3, [pc, #172]	; (8010e6c <__kernel_cos+0x17c>)
 8010dc0:	4598      	cmp	r8, r3
 8010dc2:	4606      	mov	r6, r0
 8010dc4:	460f      	mov	r7, r1
 8010dc6:	dc10      	bgt.n	8010dea <__kernel_cos+0xfa>
 8010dc8:	4602      	mov	r2, r0
 8010dca:	460b      	mov	r3, r1
 8010dcc:	4650      	mov	r0, sl
 8010dce:	4659      	mov	r1, fp
 8010dd0:	f7ef fa5a 	bl	8000288 <__aeabi_dsub>
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	4926      	ldr	r1, [pc, #152]	; (8010e70 <__kernel_cos+0x180>)
 8010dd8:	4602      	mov	r2, r0
 8010dda:	2000      	movs	r0, #0
 8010ddc:	f7ef fa54 	bl	8000288 <__aeabi_dsub>
 8010de0:	ec41 0b10 	vmov	d0, r0, r1
 8010de4:	b003      	add	sp, #12
 8010de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dea:	4b22      	ldr	r3, [pc, #136]	; (8010e74 <__kernel_cos+0x184>)
 8010dec:	4920      	ldr	r1, [pc, #128]	; (8010e70 <__kernel_cos+0x180>)
 8010dee:	4598      	cmp	r8, r3
 8010df0:	bfcc      	ite	gt
 8010df2:	4d21      	ldrgt	r5, [pc, #132]	; (8010e78 <__kernel_cos+0x188>)
 8010df4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010df8:	2400      	movs	r4, #0
 8010dfa:	4622      	mov	r2, r4
 8010dfc:	462b      	mov	r3, r5
 8010dfe:	2000      	movs	r0, #0
 8010e00:	f7ef fa42 	bl	8000288 <__aeabi_dsub>
 8010e04:	4622      	mov	r2, r4
 8010e06:	4680      	mov	r8, r0
 8010e08:	4689      	mov	r9, r1
 8010e0a:	462b      	mov	r3, r5
 8010e0c:	4650      	mov	r0, sl
 8010e0e:	4659      	mov	r1, fp
 8010e10:	f7ef fa3a 	bl	8000288 <__aeabi_dsub>
 8010e14:	4632      	mov	r2, r6
 8010e16:	463b      	mov	r3, r7
 8010e18:	f7ef fa36 	bl	8000288 <__aeabi_dsub>
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	460b      	mov	r3, r1
 8010e20:	4640      	mov	r0, r8
 8010e22:	4649      	mov	r1, r9
 8010e24:	e7da      	b.n	8010ddc <__kernel_cos+0xec>
 8010e26:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010e60 <__kernel_cos+0x170>
 8010e2a:	e7db      	b.n	8010de4 <__kernel_cos+0xf4>
 8010e2c:	f3af 8000 	nop.w
 8010e30:	be8838d4 	.word	0xbe8838d4
 8010e34:	bda8fae9 	.word	0xbda8fae9
 8010e38:	bdb4b1c4 	.word	0xbdb4b1c4
 8010e3c:	3e21ee9e 	.word	0x3e21ee9e
 8010e40:	809c52ad 	.word	0x809c52ad
 8010e44:	3e927e4f 	.word	0x3e927e4f
 8010e48:	19cb1590 	.word	0x19cb1590
 8010e4c:	3efa01a0 	.word	0x3efa01a0
 8010e50:	16c15177 	.word	0x16c15177
 8010e54:	3f56c16c 	.word	0x3f56c16c
 8010e58:	5555554c 	.word	0x5555554c
 8010e5c:	3fa55555 	.word	0x3fa55555
 8010e60:	00000000 	.word	0x00000000
 8010e64:	3ff00000 	.word	0x3ff00000
 8010e68:	3fe00000 	.word	0x3fe00000
 8010e6c:	3fd33332 	.word	0x3fd33332
 8010e70:	3ff00000 	.word	0x3ff00000
 8010e74:	3fe90000 	.word	0x3fe90000
 8010e78:	3fd20000 	.word	0x3fd20000
 8010e7c:	00000000 	.word	0x00000000

08010e80 <__kernel_rem_pio2>:
 8010e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e84:	ed2d 8b02 	vpush	{d8}
 8010e88:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8010e8c:	f112 0f14 	cmn.w	r2, #20
 8010e90:	9308      	str	r3, [sp, #32]
 8010e92:	9101      	str	r1, [sp, #4]
 8010e94:	4bc4      	ldr	r3, [pc, #784]	; (80111a8 <__kernel_rem_pio2+0x328>)
 8010e96:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8010e98:	900b      	str	r0, [sp, #44]	; 0x2c
 8010e9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e9e:	9302      	str	r3, [sp, #8]
 8010ea0:	9b08      	ldr	r3, [sp, #32]
 8010ea2:	f103 33ff 	add.w	r3, r3, #4294967295
 8010ea6:	bfa8      	it	ge
 8010ea8:	1ed4      	subge	r4, r2, #3
 8010eaa:	9306      	str	r3, [sp, #24]
 8010eac:	bfb2      	itee	lt
 8010eae:	2400      	movlt	r4, #0
 8010eb0:	2318      	movge	r3, #24
 8010eb2:	fb94 f4f3 	sdivge	r4, r4, r3
 8010eb6:	f06f 0317 	mvn.w	r3, #23
 8010eba:	fb04 3303 	mla	r3, r4, r3, r3
 8010ebe:	eb03 0a02 	add.w	sl, r3, r2
 8010ec2:	9b02      	ldr	r3, [sp, #8]
 8010ec4:	9a06      	ldr	r2, [sp, #24]
 8010ec6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8011198 <__kernel_rem_pio2+0x318>
 8010eca:	eb03 0802 	add.w	r8, r3, r2
 8010ece:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010ed0:	1aa7      	subs	r7, r4, r2
 8010ed2:	ae22      	add	r6, sp, #136	; 0x88
 8010ed4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010ed8:	2500      	movs	r5, #0
 8010eda:	4545      	cmp	r5, r8
 8010edc:	dd13      	ble.n	8010f06 <__kernel_rem_pio2+0x86>
 8010ede:	9b08      	ldr	r3, [sp, #32]
 8010ee0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8011198 <__kernel_rem_pio2+0x318>
 8010ee4:	aa22      	add	r2, sp, #136	; 0x88
 8010ee6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010eea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8010eee:	f04f 0800 	mov.w	r8, #0
 8010ef2:	9b02      	ldr	r3, [sp, #8]
 8010ef4:	4598      	cmp	r8, r3
 8010ef6:	dc2f      	bgt.n	8010f58 <__kernel_rem_pio2+0xd8>
 8010ef8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010efc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8010f00:	462f      	mov	r7, r5
 8010f02:	2600      	movs	r6, #0
 8010f04:	e01b      	b.n	8010f3e <__kernel_rem_pio2+0xbe>
 8010f06:	42ef      	cmn	r7, r5
 8010f08:	d407      	bmi.n	8010f1a <__kernel_rem_pio2+0x9a>
 8010f0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010f0e:	f7ef fb09 	bl	8000524 <__aeabi_i2d>
 8010f12:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010f16:	3501      	adds	r5, #1
 8010f18:	e7df      	b.n	8010eda <__kernel_rem_pio2+0x5a>
 8010f1a:	ec51 0b18 	vmov	r0, r1, d8
 8010f1e:	e7f8      	b.n	8010f12 <__kernel_rem_pio2+0x92>
 8010f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f24:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010f28:	f7ef fb66 	bl	80005f8 <__aeabi_dmul>
 8010f2c:	4602      	mov	r2, r0
 8010f2e:	460b      	mov	r3, r1
 8010f30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f34:	f7ef f9aa 	bl	800028c <__adddf3>
 8010f38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010f3c:	3601      	adds	r6, #1
 8010f3e:	9b06      	ldr	r3, [sp, #24]
 8010f40:	429e      	cmp	r6, r3
 8010f42:	f1a7 0708 	sub.w	r7, r7, #8
 8010f46:	ddeb      	ble.n	8010f20 <__kernel_rem_pio2+0xa0>
 8010f48:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010f4c:	f108 0801 	add.w	r8, r8, #1
 8010f50:	ecab 7b02 	vstmia	fp!, {d7}
 8010f54:	3508      	adds	r5, #8
 8010f56:	e7cc      	b.n	8010ef2 <__kernel_rem_pio2+0x72>
 8010f58:	9b02      	ldr	r3, [sp, #8]
 8010f5a:	aa0e      	add	r2, sp, #56	; 0x38
 8010f5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010f60:	930d      	str	r3, [sp, #52]	; 0x34
 8010f62:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010f64:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010f68:	9c02      	ldr	r4, [sp, #8]
 8010f6a:	930c      	str	r3, [sp, #48]	; 0x30
 8010f6c:	00e3      	lsls	r3, r4, #3
 8010f6e:	930a      	str	r3, [sp, #40]	; 0x28
 8010f70:	ab9a      	add	r3, sp, #616	; 0x268
 8010f72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010f76:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010f7a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8010f7e:	ab72      	add	r3, sp, #456	; 0x1c8
 8010f80:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8010f84:	46c3      	mov	fp, r8
 8010f86:	46a1      	mov	r9, r4
 8010f88:	f1b9 0f00 	cmp.w	r9, #0
 8010f8c:	f1a5 0508 	sub.w	r5, r5, #8
 8010f90:	dc77      	bgt.n	8011082 <__kernel_rem_pio2+0x202>
 8010f92:	ec47 6b10 	vmov	d0, r6, r7
 8010f96:	4650      	mov	r0, sl
 8010f98:	f000 fdae 	bl	8011af8 <scalbn>
 8010f9c:	ec57 6b10 	vmov	r6, r7, d0
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010fa6:	ee10 0a10 	vmov	r0, s0
 8010faa:	4639      	mov	r1, r7
 8010fac:	f7ef fb24 	bl	80005f8 <__aeabi_dmul>
 8010fb0:	ec41 0b10 	vmov	d0, r0, r1
 8010fb4:	f000 fd20 	bl	80119f8 <floor>
 8010fb8:	4b7c      	ldr	r3, [pc, #496]	; (80111ac <__kernel_rem_pio2+0x32c>)
 8010fba:	ec51 0b10 	vmov	r0, r1, d0
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	f7ef fb1a 	bl	80005f8 <__aeabi_dmul>
 8010fc4:	4602      	mov	r2, r0
 8010fc6:	460b      	mov	r3, r1
 8010fc8:	4630      	mov	r0, r6
 8010fca:	4639      	mov	r1, r7
 8010fcc:	f7ef f95c 	bl	8000288 <__aeabi_dsub>
 8010fd0:	460f      	mov	r7, r1
 8010fd2:	4606      	mov	r6, r0
 8010fd4:	f7ef fdc0 	bl	8000b58 <__aeabi_d2iz>
 8010fd8:	9004      	str	r0, [sp, #16]
 8010fda:	f7ef faa3 	bl	8000524 <__aeabi_i2d>
 8010fde:	4602      	mov	r2, r0
 8010fe0:	460b      	mov	r3, r1
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	4639      	mov	r1, r7
 8010fe6:	f7ef f94f 	bl	8000288 <__aeabi_dsub>
 8010fea:	f1ba 0f00 	cmp.w	sl, #0
 8010fee:	4606      	mov	r6, r0
 8010ff0:	460f      	mov	r7, r1
 8010ff2:	dd6d      	ble.n	80110d0 <__kernel_rem_pio2+0x250>
 8010ff4:	1e62      	subs	r2, r4, #1
 8010ff6:	ab0e      	add	r3, sp, #56	; 0x38
 8010ff8:	9d04      	ldr	r5, [sp, #16]
 8010ffa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010ffe:	f1ca 0118 	rsb	r1, sl, #24
 8011002:	fa40 f301 	asr.w	r3, r0, r1
 8011006:	441d      	add	r5, r3
 8011008:	408b      	lsls	r3, r1
 801100a:	1ac0      	subs	r0, r0, r3
 801100c:	ab0e      	add	r3, sp, #56	; 0x38
 801100e:	9504      	str	r5, [sp, #16]
 8011010:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011014:	f1ca 0317 	rsb	r3, sl, #23
 8011018:	fa40 fb03 	asr.w	fp, r0, r3
 801101c:	f1bb 0f00 	cmp.w	fp, #0
 8011020:	dd65      	ble.n	80110ee <__kernel_rem_pio2+0x26e>
 8011022:	9b04      	ldr	r3, [sp, #16]
 8011024:	2200      	movs	r2, #0
 8011026:	3301      	adds	r3, #1
 8011028:	9304      	str	r3, [sp, #16]
 801102a:	4615      	mov	r5, r2
 801102c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011030:	4294      	cmp	r4, r2
 8011032:	f300 809c 	bgt.w	801116e <__kernel_rem_pio2+0x2ee>
 8011036:	f1ba 0f00 	cmp.w	sl, #0
 801103a:	dd07      	ble.n	801104c <__kernel_rem_pio2+0x1cc>
 801103c:	f1ba 0f01 	cmp.w	sl, #1
 8011040:	f000 80c0 	beq.w	80111c4 <__kernel_rem_pio2+0x344>
 8011044:	f1ba 0f02 	cmp.w	sl, #2
 8011048:	f000 80c6 	beq.w	80111d8 <__kernel_rem_pio2+0x358>
 801104c:	f1bb 0f02 	cmp.w	fp, #2
 8011050:	d14d      	bne.n	80110ee <__kernel_rem_pio2+0x26e>
 8011052:	4632      	mov	r2, r6
 8011054:	463b      	mov	r3, r7
 8011056:	4956      	ldr	r1, [pc, #344]	; (80111b0 <__kernel_rem_pio2+0x330>)
 8011058:	2000      	movs	r0, #0
 801105a:	f7ef f915 	bl	8000288 <__aeabi_dsub>
 801105e:	4606      	mov	r6, r0
 8011060:	460f      	mov	r7, r1
 8011062:	2d00      	cmp	r5, #0
 8011064:	d043      	beq.n	80110ee <__kernel_rem_pio2+0x26e>
 8011066:	4650      	mov	r0, sl
 8011068:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80111a0 <__kernel_rem_pio2+0x320>
 801106c:	f000 fd44 	bl	8011af8 <scalbn>
 8011070:	4630      	mov	r0, r6
 8011072:	4639      	mov	r1, r7
 8011074:	ec53 2b10 	vmov	r2, r3, d0
 8011078:	f7ef f906 	bl	8000288 <__aeabi_dsub>
 801107c:	4606      	mov	r6, r0
 801107e:	460f      	mov	r7, r1
 8011080:	e035      	b.n	80110ee <__kernel_rem_pio2+0x26e>
 8011082:	4b4c      	ldr	r3, [pc, #304]	; (80111b4 <__kernel_rem_pio2+0x334>)
 8011084:	2200      	movs	r2, #0
 8011086:	4630      	mov	r0, r6
 8011088:	4639      	mov	r1, r7
 801108a:	f7ef fab5 	bl	80005f8 <__aeabi_dmul>
 801108e:	f7ef fd63 	bl	8000b58 <__aeabi_d2iz>
 8011092:	f7ef fa47 	bl	8000524 <__aeabi_i2d>
 8011096:	4602      	mov	r2, r0
 8011098:	460b      	mov	r3, r1
 801109a:	ec43 2b18 	vmov	d8, r2, r3
 801109e:	4b46      	ldr	r3, [pc, #280]	; (80111b8 <__kernel_rem_pio2+0x338>)
 80110a0:	2200      	movs	r2, #0
 80110a2:	f7ef faa9 	bl	80005f8 <__aeabi_dmul>
 80110a6:	4602      	mov	r2, r0
 80110a8:	460b      	mov	r3, r1
 80110aa:	4630      	mov	r0, r6
 80110ac:	4639      	mov	r1, r7
 80110ae:	f7ef f8eb 	bl	8000288 <__aeabi_dsub>
 80110b2:	f7ef fd51 	bl	8000b58 <__aeabi_d2iz>
 80110b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80110ba:	f84b 0b04 	str.w	r0, [fp], #4
 80110be:	ec51 0b18 	vmov	r0, r1, d8
 80110c2:	f7ef f8e3 	bl	800028c <__adddf3>
 80110c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80110ca:	4606      	mov	r6, r0
 80110cc:	460f      	mov	r7, r1
 80110ce:	e75b      	b.n	8010f88 <__kernel_rem_pio2+0x108>
 80110d0:	d106      	bne.n	80110e0 <__kernel_rem_pio2+0x260>
 80110d2:	1e63      	subs	r3, r4, #1
 80110d4:	aa0e      	add	r2, sp, #56	; 0x38
 80110d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80110da:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80110de:	e79d      	b.n	801101c <__kernel_rem_pio2+0x19c>
 80110e0:	4b36      	ldr	r3, [pc, #216]	; (80111bc <__kernel_rem_pio2+0x33c>)
 80110e2:	2200      	movs	r2, #0
 80110e4:	f7ef fd0e 	bl	8000b04 <__aeabi_dcmpge>
 80110e8:	2800      	cmp	r0, #0
 80110ea:	d13d      	bne.n	8011168 <__kernel_rem_pio2+0x2e8>
 80110ec:	4683      	mov	fp, r0
 80110ee:	2200      	movs	r2, #0
 80110f0:	2300      	movs	r3, #0
 80110f2:	4630      	mov	r0, r6
 80110f4:	4639      	mov	r1, r7
 80110f6:	f7ef fce7 	bl	8000ac8 <__aeabi_dcmpeq>
 80110fa:	2800      	cmp	r0, #0
 80110fc:	f000 80c0 	beq.w	8011280 <__kernel_rem_pio2+0x400>
 8011100:	1e65      	subs	r5, r4, #1
 8011102:	462b      	mov	r3, r5
 8011104:	2200      	movs	r2, #0
 8011106:	9902      	ldr	r1, [sp, #8]
 8011108:	428b      	cmp	r3, r1
 801110a:	da6c      	bge.n	80111e6 <__kernel_rem_pio2+0x366>
 801110c:	2a00      	cmp	r2, #0
 801110e:	f000 8089 	beq.w	8011224 <__kernel_rem_pio2+0x3a4>
 8011112:	ab0e      	add	r3, sp, #56	; 0x38
 8011114:	f1aa 0a18 	sub.w	sl, sl, #24
 8011118:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801111c:	2b00      	cmp	r3, #0
 801111e:	f000 80ad 	beq.w	801127c <__kernel_rem_pio2+0x3fc>
 8011122:	4650      	mov	r0, sl
 8011124:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80111a0 <__kernel_rem_pio2+0x320>
 8011128:	f000 fce6 	bl	8011af8 <scalbn>
 801112c:	ab9a      	add	r3, sp, #616	; 0x268
 801112e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011132:	ec57 6b10 	vmov	r6, r7, d0
 8011136:	00ec      	lsls	r4, r5, #3
 8011138:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801113c:	46aa      	mov	sl, r5
 801113e:	f1ba 0f00 	cmp.w	sl, #0
 8011142:	f280 80d6 	bge.w	80112f2 <__kernel_rem_pio2+0x472>
 8011146:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8011198 <__kernel_rem_pio2+0x318>
 801114a:	462e      	mov	r6, r5
 801114c:	2e00      	cmp	r6, #0
 801114e:	f2c0 8104 	blt.w	801135a <__kernel_rem_pio2+0x4da>
 8011152:	ab72      	add	r3, sp, #456	; 0x1c8
 8011154:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011158:	f8df a064 	ldr.w	sl, [pc, #100]	; 80111c0 <__kernel_rem_pio2+0x340>
 801115c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8011160:	f04f 0800 	mov.w	r8, #0
 8011164:	1baf      	subs	r7, r5, r6
 8011166:	e0ea      	b.n	801133e <__kernel_rem_pio2+0x4be>
 8011168:	f04f 0b02 	mov.w	fp, #2
 801116c:	e759      	b.n	8011022 <__kernel_rem_pio2+0x1a2>
 801116e:	f8d8 3000 	ldr.w	r3, [r8]
 8011172:	b955      	cbnz	r5, 801118a <__kernel_rem_pio2+0x30a>
 8011174:	b123      	cbz	r3, 8011180 <__kernel_rem_pio2+0x300>
 8011176:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801117a:	f8c8 3000 	str.w	r3, [r8]
 801117e:	2301      	movs	r3, #1
 8011180:	3201      	adds	r2, #1
 8011182:	f108 0804 	add.w	r8, r8, #4
 8011186:	461d      	mov	r5, r3
 8011188:	e752      	b.n	8011030 <__kernel_rem_pio2+0x1b0>
 801118a:	1acb      	subs	r3, r1, r3
 801118c:	f8c8 3000 	str.w	r3, [r8]
 8011190:	462b      	mov	r3, r5
 8011192:	e7f5      	b.n	8011180 <__kernel_rem_pio2+0x300>
 8011194:	f3af 8000 	nop.w
	...
 80111a4:	3ff00000 	.word	0x3ff00000
 80111a8:	08012790 	.word	0x08012790
 80111ac:	40200000 	.word	0x40200000
 80111b0:	3ff00000 	.word	0x3ff00000
 80111b4:	3e700000 	.word	0x3e700000
 80111b8:	41700000 	.word	0x41700000
 80111bc:	3fe00000 	.word	0x3fe00000
 80111c0:	08012750 	.word	0x08012750
 80111c4:	1e62      	subs	r2, r4, #1
 80111c6:	ab0e      	add	r3, sp, #56	; 0x38
 80111c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80111d0:	a90e      	add	r1, sp, #56	; 0x38
 80111d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80111d6:	e739      	b.n	801104c <__kernel_rem_pio2+0x1cc>
 80111d8:	1e62      	subs	r2, r4, #1
 80111da:	ab0e      	add	r3, sp, #56	; 0x38
 80111dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80111e4:	e7f4      	b.n	80111d0 <__kernel_rem_pio2+0x350>
 80111e6:	a90e      	add	r1, sp, #56	; 0x38
 80111e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80111ec:	3b01      	subs	r3, #1
 80111ee:	430a      	orrs	r2, r1
 80111f0:	e789      	b.n	8011106 <__kernel_rem_pio2+0x286>
 80111f2:	3301      	adds	r3, #1
 80111f4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80111f8:	2900      	cmp	r1, #0
 80111fa:	d0fa      	beq.n	80111f2 <__kernel_rem_pio2+0x372>
 80111fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111fe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8011202:	446a      	add	r2, sp
 8011204:	3a98      	subs	r2, #152	; 0x98
 8011206:	920a      	str	r2, [sp, #40]	; 0x28
 8011208:	9a08      	ldr	r2, [sp, #32]
 801120a:	18e3      	adds	r3, r4, r3
 801120c:	18a5      	adds	r5, r4, r2
 801120e:	aa22      	add	r2, sp, #136	; 0x88
 8011210:	f104 0801 	add.w	r8, r4, #1
 8011214:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011218:	9304      	str	r3, [sp, #16]
 801121a:	9b04      	ldr	r3, [sp, #16]
 801121c:	4543      	cmp	r3, r8
 801121e:	da04      	bge.n	801122a <__kernel_rem_pio2+0x3aa>
 8011220:	461c      	mov	r4, r3
 8011222:	e6a3      	b.n	8010f6c <__kernel_rem_pio2+0xec>
 8011224:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011226:	2301      	movs	r3, #1
 8011228:	e7e4      	b.n	80111f4 <__kernel_rem_pio2+0x374>
 801122a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801122c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011230:	f7ef f978 	bl	8000524 <__aeabi_i2d>
 8011234:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801123a:	46ab      	mov	fp, r5
 801123c:	461c      	mov	r4, r3
 801123e:	f04f 0900 	mov.w	r9, #0
 8011242:	2600      	movs	r6, #0
 8011244:	2700      	movs	r7, #0
 8011246:	9b06      	ldr	r3, [sp, #24]
 8011248:	4599      	cmp	r9, r3
 801124a:	dd06      	ble.n	801125a <__kernel_rem_pio2+0x3da>
 801124c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801124e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011252:	f108 0801 	add.w	r8, r8, #1
 8011256:	930a      	str	r3, [sp, #40]	; 0x28
 8011258:	e7df      	b.n	801121a <__kernel_rem_pio2+0x39a>
 801125a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801125e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011262:	f7ef f9c9 	bl	80005f8 <__aeabi_dmul>
 8011266:	4602      	mov	r2, r0
 8011268:	460b      	mov	r3, r1
 801126a:	4630      	mov	r0, r6
 801126c:	4639      	mov	r1, r7
 801126e:	f7ef f80d 	bl	800028c <__adddf3>
 8011272:	f109 0901 	add.w	r9, r9, #1
 8011276:	4606      	mov	r6, r0
 8011278:	460f      	mov	r7, r1
 801127a:	e7e4      	b.n	8011246 <__kernel_rem_pio2+0x3c6>
 801127c:	3d01      	subs	r5, #1
 801127e:	e748      	b.n	8011112 <__kernel_rem_pio2+0x292>
 8011280:	ec47 6b10 	vmov	d0, r6, r7
 8011284:	f1ca 0000 	rsb	r0, sl, #0
 8011288:	f000 fc36 	bl	8011af8 <scalbn>
 801128c:	ec57 6b10 	vmov	r6, r7, d0
 8011290:	4ba0      	ldr	r3, [pc, #640]	; (8011514 <__kernel_rem_pio2+0x694>)
 8011292:	ee10 0a10 	vmov	r0, s0
 8011296:	2200      	movs	r2, #0
 8011298:	4639      	mov	r1, r7
 801129a:	f7ef fc33 	bl	8000b04 <__aeabi_dcmpge>
 801129e:	b1f8      	cbz	r0, 80112e0 <__kernel_rem_pio2+0x460>
 80112a0:	4b9d      	ldr	r3, [pc, #628]	; (8011518 <__kernel_rem_pio2+0x698>)
 80112a2:	2200      	movs	r2, #0
 80112a4:	4630      	mov	r0, r6
 80112a6:	4639      	mov	r1, r7
 80112a8:	f7ef f9a6 	bl	80005f8 <__aeabi_dmul>
 80112ac:	f7ef fc54 	bl	8000b58 <__aeabi_d2iz>
 80112b0:	4680      	mov	r8, r0
 80112b2:	f7ef f937 	bl	8000524 <__aeabi_i2d>
 80112b6:	4b97      	ldr	r3, [pc, #604]	; (8011514 <__kernel_rem_pio2+0x694>)
 80112b8:	2200      	movs	r2, #0
 80112ba:	f7ef f99d 	bl	80005f8 <__aeabi_dmul>
 80112be:	460b      	mov	r3, r1
 80112c0:	4602      	mov	r2, r0
 80112c2:	4639      	mov	r1, r7
 80112c4:	4630      	mov	r0, r6
 80112c6:	f7ee ffdf 	bl	8000288 <__aeabi_dsub>
 80112ca:	f7ef fc45 	bl	8000b58 <__aeabi_d2iz>
 80112ce:	1c65      	adds	r5, r4, #1
 80112d0:	ab0e      	add	r3, sp, #56	; 0x38
 80112d2:	f10a 0a18 	add.w	sl, sl, #24
 80112d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80112da:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80112de:	e720      	b.n	8011122 <__kernel_rem_pio2+0x2a2>
 80112e0:	4630      	mov	r0, r6
 80112e2:	4639      	mov	r1, r7
 80112e4:	f7ef fc38 	bl	8000b58 <__aeabi_d2iz>
 80112e8:	ab0e      	add	r3, sp, #56	; 0x38
 80112ea:	4625      	mov	r5, r4
 80112ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80112f0:	e717      	b.n	8011122 <__kernel_rem_pio2+0x2a2>
 80112f2:	ab0e      	add	r3, sp, #56	; 0x38
 80112f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80112f8:	f7ef f914 	bl	8000524 <__aeabi_i2d>
 80112fc:	4632      	mov	r2, r6
 80112fe:	463b      	mov	r3, r7
 8011300:	f7ef f97a 	bl	80005f8 <__aeabi_dmul>
 8011304:	4b84      	ldr	r3, [pc, #528]	; (8011518 <__kernel_rem_pio2+0x698>)
 8011306:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801130a:	2200      	movs	r2, #0
 801130c:	4630      	mov	r0, r6
 801130e:	4639      	mov	r1, r7
 8011310:	f7ef f972 	bl	80005f8 <__aeabi_dmul>
 8011314:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011318:	4606      	mov	r6, r0
 801131a:	460f      	mov	r7, r1
 801131c:	e70f      	b.n	801113e <__kernel_rem_pio2+0x2be>
 801131e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8011322:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8011326:	f7ef f967 	bl	80005f8 <__aeabi_dmul>
 801132a:	4602      	mov	r2, r0
 801132c:	460b      	mov	r3, r1
 801132e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011332:	f7ee ffab 	bl	800028c <__adddf3>
 8011336:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801133a:	f108 0801 	add.w	r8, r8, #1
 801133e:	9b02      	ldr	r3, [sp, #8]
 8011340:	4598      	cmp	r8, r3
 8011342:	dc01      	bgt.n	8011348 <__kernel_rem_pio2+0x4c8>
 8011344:	45b8      	cmp	r8, r7
 8011346:	ddea      	ble.n	801131e <__kernel_rem_pio2+0x49e>
 8011348:	ed9d 7b06 	vldr	d7, [sp, #24]
 801134c:	ab4a      	add	r3, sp, #296	; 0x128
 801134e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011352:	ed87 7b00 	vstr	d7, [r7]
 8011356:	3e01      	subs	r6, #1
 8011358:	e6f8      	b.n	801114c <__kernel_rem_pio2+0x2cc>
 801135a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801135c:	2b02      	cmp	r3, #2
 801135e:	dc0b      	bgt.n	8011378 <__kernel_rem_pio2+0x4f8>
 8011360:	2b00      	cmp	r3, #0
 8011362:	dc35      	bgt.n	80113d0 <__kernel_rem_pio2+0x550>
 8011364:	d059      	beq.n	801141a <__kernel_rem_pio2+0x59a>
 8011366:	9b04      	ldr	r3, [sp, #16]
 8011368:	f003 0007 	and.w	r0, r3, #7
 801136c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011370:	ecbd 8b02 	vpop	{d8}
 8011374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011378:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801137a:	2b03      	cmp	r3, #3
 801137c:	d1f3      	bne.n	8011366 <__kernel_rem_pio2+0x4e6>
 801137e:	ab4a      	add	r3, sp, #296	; 0x128
 8011380:	4423      	add	r3, r4
 8011382:	9306      	str	r3, [sp, #24]
 8011384:	461c      	mov	r4, r3
 8011386:	469a      	mov	sl, r3
 8011388:	9502      	str	r5, [sp, #8]
 801138a:	9b02      	ldr	r3, [sp, #8]
 801138c:	2b00      	cmp	r3, #0
 801138e:	f1aa 0a08 	sub.w	sl, sl, #8
 8011392:	dc6b      	bgt.n	801146c <__kernel_rem_pio2+0x5ec>
 8011394:	46aa      	mov	sl, r5
 8011396:	f1ba 0f01 	cmp.w	sl, #1
 801139a:	f1a4 0408 	sub.w	r4, r4, #8
 801139e:	f300 8085 	bgt.w	80114ac <__kernel_rem_pio2+0x62c>
 80113a2:	9c06      	ldr	r4, [sp, #24]
 80113a4:	2000      	movs	r0, #0
 80113a6:	3408      	adds	r4, #8
 80113a8:	2100      	movs	r1, #0
 80113aa:	2d01      	cmp	r5, #1
 80113ac:	f300 809d 	bgt.w	80114ea <__kernel_rem_pio2+0x66a>
 80113b0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80113b4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80113b8:	f1bb 0f00 	cmp.w	fp, #0
 80113bc:	f040 809b 	bne.w	80114f6 <__kernel_rem_pio2+0x676>
 80113c0:	9b01      	ldr	r3, [sp, #4]
 80113c2:	e9c3 5600 	strd	r5, r6, [r3]
 80113c6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80113ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80113ce:	e7ca      	b.n	8011366 <__kernel_rem_pio2+0x4e6>
 80113d0:	3408      	adds	r4, #8
 80113d2:	ab4a      	add	r3, sp, #296	; 0x128
 80113d4:	441c      	add	r4, r3
 80113d6:	462e      	mov	r6, r5
 80113d8:	2000      	movs	r0, #0
 80113da:	2100      	movs	r1, #0
 80113dc:	2e00      	cmp	r6, #0
 80113de:	da36      	bge.n	801144e <__kernel_rem_pio2+0x5ce>
 80113e0:	f1bb 0f00 	cmp.w	fp, #0
 80113e4:	d039      	beq.n	801145a <__kernel_rem_pio2+0x5da>
 80113e6:	4602      	mov	r2, r0
 80113e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80113ec:	9c01      	ldr	r4, [sp, #4]
 80113ee:	e9c4 2300 	strd	r2, r3, [r4]
 80113f2:	4602      	mov	r2, r0
 80113f4:	460b      	mov	r3, r1
 80113f6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80113fa:	f7ee ff45 	bl	8000288 <__aeabi_dsub>
 80113fe:	ae4c      	add	r6, sp, #304	; 0x130
 8011400:	2401      	movs	r4, #1
 8011402:	42a5      	cmp	r5, r4
 8011404:	da2c      	bge.n	8011460 <__kernel_rem_pio2+0x5e0>
 8011406:	f1bb 0f00 	cmp.w	fp, #0
 801140a:	d002      	beq.n	8011412 <__kernel_rem_pio2+0x592>
 801140c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011410:	4619      	mov	r1, r3
 8011412:	9b01      	ldr	r3, [sp, #4]
 8011414:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011418:	e7a5      	b.n	8011366 <__kernel_rem_pio2+0x4e6>
 801141a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801141e:	eb0d 0403 	add.w	r4, sp, r3
 8011422:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011426:	2000      	movs	r0, #0
 8011428:	2100      	movs	r1, #0
 801142a:	2d00      	cmp	r5, #0
 801142c:	da09      	bge.n	8011442 <__kernel_rem_pio2+0x5c2>
 801142e:	f1bb 0f00 	cmp.w	fp, #0
 8011432:	d002      	beq.n	801143a <__kernel_rem_pio2+0x5ba>
 8011434:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011438:	4619      	mov	r1, r3
 801143a:	9b01      	ldr	r3, [sp, #4]
 801143c:	e9c3 0100 	strd	r0, r1, [r3]
 8011440:	e791      	b.n	8011366 <__kernel_rem_pio2+0x4e6>
 8011442:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011446:	f7ee ff21 	bl	800028c <__adddf3>
 801144a:	3d01      	subs	r5, #1
 801144c:	e7ed      	b.n	801142a <__kernel_rem_pio2+0x5aa>
 801144e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011452:	f7ee ff1b 	bl	800028c <__adddf3>
 8011456:	3e01      	subs	r6, #1
 8011458:	e7c0      	b.n	80113dc <__kernel_rem_pio2+0x55c>
 801145a:	4602      	mov	r2, r0
 801145c:	460b      	mov	r3, r1
 801145e:	e7c5      	b.n	80113ec <__kernel_rem_pio2+0x56c>
 8011460:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011464:	f7ee ff12 	bl	800028c <__adddf3>
 8011468:	3401      	adds	r4, #1
 801146a:	e7ca      	b.n	8011402 <__kernel_rem_pio2+0x582>
 801146c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011470:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011474:	9b02      	ldr	r3, [sp, #8]
 8011476:	3b01      	subs	r3, #1
 8011478:	9302      	str	r3, [sp, #8]
 801147a:	4632      	mov	r2, r6
 801147c:	463b      	mov	r3, r7
 801147e:	4640      	mov	r0, r8
 8011480:	4649      	mov	r1, r9
 8011482:	f7ee ff03 	bl	800028c <__adddf3>
 8011486:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801148a:	4602      	mov	r2, r0
 801148c:	460b      	mov	r3, r1
 801148e:	4640      	mov	r0, r8
 8011490:	4649      	mov	r1, r9
 8011492:	f7ee fef9 	bl	8000288 <__aeabi_dsub>
 8011496:	4632      	mov	r2, r6
 8011498:	463b      	mov	r3, r7
 801149a:	f7ee fef7 	bl	800028c <__adddf3>
 801149e:	ed9d 7b08 	vldr	d7, [sp, #32]
 80114a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80114a6:	ed8a 7b00 	vstr	d7, [sl]
 80114aa:	e76e      	b.n	801138a <__kernel_rem_pio2+0x50a>
 80114ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 80114b0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80114b4:	4640      	mov	r0, r8
 80114b6:	4632      	mov	r2, r6
 80114b8:	463b      	mov	r3, r7
 80114ba:	4649      	mov	r1, r9
 80114bc:	f7ee fee6 	bl	800028c <__adddf3>
 80114c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114c4:	4602      	mov	r2, r0
 80114c6:	460b      	mov	r3, r1
 80114c8:	4640      	mov	r0, r8
 80114ca:	4649      	mov	r1, r9
 80114cc:	f7ee fedc 	bl	8000288 <__aeabi_dsub>
 80114d0:	4632      	mov	r2, r6
 80114d2:	463b      	mov	r3, r7
 80114d4:	f7ee feda 	bl	800028c <__adddf3>
 80114d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80114dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80114e0:	ed84 7b00 	vstr	d7, [r4]
 80114e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80114e8:	e755      	b.n	8011396 <__kernel_rem_pio2+0x516>
 80114ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80114ee:	f7ee fecd 	bl	800028c <__adddf3>
 80114f2:	3d01      	subs	r5, #1
 80114f4:	e759      	b.n	80113aa <__kernel_rem_pio2+0x52a>
 80114f6:	9b01      	ldr	r3, [sp, #4]
 80114f8:	9a01      	ldr	r2, [sp, #4]
 80114fa:	601d      	str	r5, [r3, #0]
 80114fc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011500:	605c      	str	r4, [r3, #4]
 8011502:	609f      	str	r7, [r3, #8]
 8011504:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011508:	60d3      	str	r3, [r2, #12]
 801150a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801150e:	6110      	str	r0, [r2, #16]
 8011510:	6153      	str	r3, [r2, #20]
 8011512:	e728      	b.n	8011366 <__kernel_rem_pio2+0x4e6>
 8011514:	41700000 	.word	0x41700000
 8011518:	3e700000 	.word	0x3e700000
 801151c:	00000000 	.word	0x00000000

08011520 <__kernel_sin>:
 8011520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011524:	ed2d 8b04 	vpush	{d8-d9}
 8011528:	eeb0 8a41 	vmov.f32	s16, s2
 801152c:	eef0 8a61 	vmov.f32	s17, s3
 8011530:	ec55 4b10 	vmov	r4, r5, d0
 8011534:	b083      	sub	sp, #12
 8011536:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801153a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801153e:	9001      	str	r0, [sp, #4]
 8011540:	da06      	bge.n	8011550 <__kernel_sin+0x30>
 8011542:	ee10 0a10 	vmov	r0, s0
 8011546:	4629      	mov	r1, r5
 8011548:	f7ef fb06 	bl	8000b58 <__aeabi_d2iz>
 801154c:	2800      	cmp	r0, #0
 801154e:	d051      	beq.n	80115f4 <__kernel_sin+0xd4>
 8011550:	4622      	mov	r2, r4
 8011552:	462b      	mov	r3, r5
 8011554:	4620      	mov	r0, r4
 8011556:	4629      	mov	r1, r5
 8011558:	f7ef f84e 	bl	80005f8 <__aeabi_dmul>
 801155c:	4682      	mov	sl, r0
 801155e:	468b      	mov	fp, r1
 8011560:	4602      	mov	r2, r0
 8011562:	460b      	mov	r3, r1
 8011564:	4620      	mov	r0, r4
 8011566:	4629      	mov	r1, r5
 8011568:	f7ef f846 	bl	80005f8 <__aeabi_dmul>
 801156c:	a341      	add	r3, pc, #260	; (adr r3, 8011674 <__kernel_sin+0x154>)
 801156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011572:	4680      	mov	r8, r0
 8011574:	4689      	mov	r9, r1
 8011576:	4650      	mov	r0, sl
 8011578:	4659      	mov	r1, fp
 801157a:	f7ef f83d 	bl	80005f8 <__aeabi_dmul>
 801157e:	a33f      	add	r3, pc, #252	; (adr r3, 801167c <__kernel_sin+0x15c>)
 8011580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011584:	f7ee fe80 	bl	8000288 <__aeabi_dsub>
 8011588:	4652      	mov	r2, sl
 801158a:	465b      	mov	r3, fp
 801158c:	f7ef f834 	bl	80005f8 <__aeabi_dmul>
 8011590:	a33c      	add	r3, pc, #240	; (adr r3, 8011684 <__kernel_sin+0x164>)
 8011592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011596:	f7ee fe79 	bl	800028c <__adddf3>
 801159a:	4652      	mov	r2, sl
 801159c:	465b      	mov	r3, fp
 801159e:	f7ef f82b 	bl	80005f8 <__aeabi_dmul>
 80115a2:	a33a      	add	r3, pc, #232	; (adr r3, 801168c <__kernel_sin+0x16c>)
 80115a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115a8:	f7ee fe6e 	bl	8000288 <__aeabi_dsub>
 80115ac:	4652      	mov	r2, sl
 80115ae:	465b      	mov	r3, fp
 80115b0:	f7ef f822 	bl	80005f8 <__aeabi_dmul>
 80115b4:	a337      	add	r3, pc, #220	; (adr r3, 8011694 <__kernel_sin+0x174>)
 80115b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ba:	f7ee fe67 	bl	800028c <__adddf3>
 80115be:	9b01      	ldr	r3, [sp, #4]
 80115c0:	4606      	mov	r6, r0
 80115c2:	460f      	mov	r7, r1
 80115c4:	b9eb      	cbnz	r3, 8011602 <__kernel_sin+0xe2>
 80115c6:	4602      	mov	r2, r0
 80115c8:	460b      	mov	r3, r1
 80115ca:	4650      	mov	r0, sl
 80115cc:	4659      	mov	r1, fp
 80115ce:	f7ef f813 	bl	80005f8 <__aeabi_dmul>
 80115d2:	a325      	add	r3, pc, #148	; (adr r3, 8011668 <__kernel_sin+0x148>)
 80115d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d8:	f7ee fe56 	bl	8000288 <__aeabi_dsub>
 80115dc:	4642      	mov	r2, r8
 80115de:	464b      	mov	r3, r9
 80115e0:	f7ef f80a 	bl	80005f8 <__aeabi_dmul>
 80115e4:	4602      	mov	r2, r0
 80115e6:	460b      	mov	r3, r1
 80115e8:	4620      	mov	r0, r4
 80115ea:	4629      	mov	r1, r5
 80115ec:	f7ee fe4e 	bl	800028c <__adddf3>
 80115f0:	4604      	mov	r4, r0
 80115f2:	460d      	mov	r5, r1
 80115f4:	ec45 4b10 	vmov	d0, r4, r5
 80115f8:	b003      	add	sp, #12
 80115fa:	ecbd 8b04 	vpop	{d8-d9}
 80115fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011602:	4b1b      	ldr	r3, [pc, #108]	; (8011670 <__kernel_sin+0x150>)
 8011604:	ec51 0b18 	vmov	r0, r1, d8
 8011608:	2200      	movs	r2, #0
 801160a:	f7ee fff5 	bl	80005f8 <__aeabi_dmul>
 801160e:	4632      	mov	r2, r6
 8011610:	ec41 0b19 	vmov	d9, r0, r1
 8011614:	463b      	mov	r3, r7
 8011616:	4640      	mov	r0, r8
 8011618:	4649      	mov	r1, r9
 801161a:	f7ee ffed 	bl	80005f8 <__aeabi_dmul>
 801161e:	4602      	mov	r2, r0
 8011620:	460b      	mov	r3, r1
 8011622:	ec51 0b19 	vmov	r0, r1, d9
 8011626:	f7ee fe2f 	bl	8000288 <__aeabi_dsub>
 801162a:	4652      	mov	r2, sl
 801162c:	465b      	mov	r3, fp
 801162e:	f7ee ffe3 	bl	80005f8 <__aeabi_dmul>
 8011632:	ec53 2b18 	vmov	r2, r3, d8
 8011636:	f7ee fe27 	bl	8000288 <__aeabi_dsub>
 801163a:	a30b      	add	r3, pc, #44	; (adr r3, 8011668 <__kernel_sin+0x148>)
 801163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011640:	4606      	mov	r6, r0
 8011642:	460f      	mov	r7, r1
 8011644:	4640      	mov	r0, r8
 8011646:	4649      	mov	r1, r9
 8011648:	f7ee ffd6 	bl	80005f8 <__aeabi_dmul>
 801164c:	4602      	mov	r2, r0
 801164e:	460b      	mov	r3, r1
 8011650:	4630      	mov	r0, r6
 8011652:	4639      	mov	r1, r7
 8011654:	f7ee fe1a 	bl	800028c <__adddf3>
 8011658:	4602      	mov	r2, r0
 801165a:	460b      	mov	r3, r1
 801165c:	4620      	mov	r0, r4
 801165e:	4629      	mov	r1, r5
 8011660:	f7ee fe12 	bl	8000288 <__aeabi_dsub>
 8011664:	e7c4      	b.n	80115f0 <__kernel_sin+0xd0>
 8011666:	bf00      	nop
 8011668:	55555549 	.word	0x55555549
 801166c:	3fc55555 	.word	0x3fc55555
 8011670:	3fe00000 	.word	0x3fe00000
 8011674:	5acfd57c 	.word	0x5acfd57c
 8011678:	3de5d93a 	.word	0x3de5d93a
 801167c:	8a2b9ceb 	.word	0x8a2b9ceb
 8011680:	3e5ae5e6 	.word	0x3e5ae5e6
 8011684:	57b1fe7d 	.word	0x57b1fe7d
 8011688:	3ec71de3 	.word	0x3ec71de3
 801168c:	19c161d5 	.word	0x19c161d5
 8011690:	3f2a01a0 	.word	0x3f2a01a0
 8011694:	1110f8a6 	.word	0x1110f8a6
 8011698:	3f811111 	.word	0x3f811111
 801169c:	00000000 	.word	0x00000000

080116a0 <atan>:
 80116a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a4:	ec55 4b10 	vmov	r4, r5, d0
 80116a8:	4bc3      	ldr	r3, [pc, #780]	; (80119b8 <atan+0x318>)
 80116aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80116ae:	429e      	cmp	r6, r3
 80116b0:	46ab      	mov	fp, r5
 80116b2:	dd18      	ble.n	80116e6 <atan+0x46>
 80116b4:	4bc1      	ldr	r3, [pc, #772]	; (80119bc <atan+0x31c>)
 80116b6:	429e      	cmp	r6, r3
 80116b8:	dc01      	bgt.n	80116be <atan+0x1e>
 80116ba:	d109      	bne.n	80116d0 <atan+0x30>
 80116bc:	b144      	cbz	r4, 80116d0 <atan+0x30>
 80116be:	4622      	mov	r2, r4
 80116c0:	462b      	mov	r3, r5
 80116c2:	4620      	mov	r0, r4
 80116c4:	4629      	mov	r1, r5
 80116c6:	f7ee fde1 	bl	800028c <__adddf3>
 80116ca:	4604      	mov	r4, r0
 80116cc:	460d      	mov	r5, r1
 80116ce:	e006      	b.n	80116de <atan+0x3e>
 80116d0:	f1bb 0f00 	cmp.w	fp, #0
 80116d4:	f300 8131 	bgt.w	801193a <atan+0x29a>
 80116d8:	a59b      	add	r5, pc, #620	; (adr r5, 8011948 <atan+0x2a8>)
 80116da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80116de:	ec45 4b10 	vmov	d0, r4, r5
 80116e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116e6:	4bb6      	ldr	r3, [pc, #728]	; (80119c0 <atan+0x320>)
 80116e8:	429e      	cmp	r6, r3
 80116ea:	dc14      	bgt.n	8011716 <atan+0x76>
 80116ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80116f0:	429e      	cmp	r6, r3
 80116f2:	dc0d      	bgt.n	8011710 <atan+0x70>
 80116f4:	a396      	add	r3, pc, #600	; (adr r3, 8011950 <atan+0x2b0>)
 80116f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116fa:	ee10 0a10 	vmov	r0, s0
 80116fe:	4629      	mov	r1, r5
 8011700:	f7ee fdc4 	bl	800028c <__adddf3>
 8011704:	4baf      	ldr	r3, [pc, #700]	; (80119c4 <atan+0x324>)
 8011706:	2200      	movs	r2, #0
 8011708:	f7ef fa06 	bl	8000b18 <__aeabi_dcmpgt>
 801170c:	2800      	cmp	r0, #0
 801170e:	d1e6      	bne.n	80116de <atan+0x3e>
 8011710:	f04f 3aff 	mov.w	sl, #4294967295
 8011714:	e02b      	b.n	801176e <atan+0xce>
 8011716:	f000 f963 	bl	80119e0 <fabs>
 801171a:	4bab      	ldr	r3, [pc, #684]	; (80119c8 <atan+0x328>)
 801171c:	429e      	cmp	r6, r3
 801171e:	ec55 4b10 	vmov	r4, r5, d0
 8011722:	f300 80bf 	bgt.w	80118a4 <atan+0x204>
 8011726:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801172a:	429e      	cmp	r6, r3
 801172c:	f300 80a0 	bgt.w	8011870 <atan+0x1d0>
 8011730:	ee10 2a10 	vmov	r2, s0
 8011734:	ee10 0a10 	vmov	r0, s0
 8011738:	462b      	mov	r3, r5
 801173a:	4629      	mov	r1, r5
 801173c:	f7ee fda6 	bl	800028c <__adddf3>
 8011740:	4ba0      	ldr	r3, [pc, #640]	; (80119c4 <atan+0x324>)
 8011742:	2200      	movs	r2, #0
 8011744:	f7ee fda0 	bl	8000288 <__aeabi_dsub>
 8011748:	2200      	movs	r2, #0
 801174a:	4606      	mov	r6, r0
 801174c:	460f      	mov	r7, r1
 801174e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011752:	4620      	mov	r0, r4
 8011754:	4629      	mov	r1, r5
 8011756:	f7ee fd99 	bl	800028c <__adddf3>
 801175a:	4602      	mov	r2, r0
 801175c:	460b      	mov	r3, r1
 801175e:	4630      	mov	r0, r6
 8011760:	4639      	mov	r1, r7
 8011762:	f7ef f873 	bl	800084c <__aeabi_ddiv>
 8011766:	f04f 0a00 	mov.w	sl, #0
 801176a:	4604      	mov	r4, r0
 801176c:	460d      	mov	r5, r1
 801176e:	4622      	mov	r2, r4
 8011770:	462b      	mov	r3, r5
 8011772:	4620      	mov	r0, r4
 8011774:	4629      	mov	r1, r5
 8011776:	f7ee ff3f 	bl	80005f8 <__aeabi_dmul>
 801177a:	4602      	mov	r2, r0
 801177c:	460b      	mov	r3, r1
 801177e:	4680      	mov	r8, r0
 8011780:	4689      	mov	r9, r1
 8011782:	f7ee ff39 	bl	80005f8 <__aeabi_dmul>
 8011786:	a374      	add	r3, pc, #464	; (adr r3, 8011958 <atan+0x2b8>)
 8011788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178c:	4606      	mov	r6, r0
 801178e:	460f      	mov	r7, r1
 8011790:	f7ee ff32 	bl	80005f8 <__aeabi_dmul>
 8011794:	a372      	add	r3, pc, #456	; (adr r3, 8011960 <atan+0x2c0>)
 8011796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179a:	f7ee fd77 	bl	800028c <__adddf3>
 801179e:	4632      	mov	r2, r6
 80117a0:	463b      	mov	r3, r7
 80117a2:	f7ee ff29 	bl	80005f8 <__aeabi_dmul>
 80117a6:	a370      	add	r3, pc, #448	; (adr r3, 8011968 <atan+0x2c8>)
 80117a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ac:	f7ee fd6e 	bl	800028c <__adddf3>
 80117b0:	4632      	mov	r2, r6
 80117b2:	463b      	mov	r3, r7
 80117b4:	f7ee ff20 	bl	80005f8 <__aeabi_dmul>
 80117b8:	a36d      	add	r3, pc, #436	; (adr r3, 8011970 <atan+0x2d0>)
 80117ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117be:	f7ee fd65 	bl	800028c <__adddf3>
 80117c2:	4632      	mov	r2, r6
 80117c4:	463b      	mov	r3, r7
 80117c6:	f7ee ff17 	bl	80005f8 <__aeabi_dmul>
 80117ca:	a36b      	add	r3, pc, #428	; (adr r3, 8011978 <atan+0x2d8>)
 80117cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d0:	f7ee fd5c 	bl	800028c <__adddf3>
 80117d4:	4632      	mov	r2, r6
 80117d6:	463b      	mov	r3, r7
 80117d8:	f7ee ff0e 	bl	80005f8 <__aeabi_dmul>
 80117dc:	a368      	add	r3, pc, #416	; (adr r3, 8011980 <atan+0x2e0>)
 80117de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e2:	f7ee fd53 	bl	800028c <__adddf3>
 80117e6:	4642      	mov	r2, r8
 80117e8:	464b      	mov	r3, r9
 80117ea:	f7ee ff05 	bl	80005f8 <__aeabi_dmul>
 80117ee:	a366      	add	r3, pc, #408	; (adr r3, 8011988 <atan+0x2e8>)
 80117f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f4:	4680      	mov	r8, r0
 80117f6:	4689      	mov	r9, r1
 80117f8:	4630      	mov	r0, r6
 80117fa:	4639      	mov	r1, r7
 80117fc:	f7ee fefc 	bl	80005f8 <__aeabi_dmul>
 8011800:	a363      	add	r3, pc, #396	; (adr r3, 8011990 <atan+0x2f0>)
 8011802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011806:	f7ee fd3f 	bl	8000288 <__aeabi_dsub>
 801180a:	4632      	mov	r2, r6
 801180c:	463b      	mov	r3, r7
 801180e:	f7ee fef3 	bl	80005f8 <__aeabi_dmul>
 8011812:	a361      	add	r3, pc, #388	; (adr r3, 8011998 <atan+0x2f8>)
 8011814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011818:	f7ee fd36 	bl	8000288 <__aeabi_dsub>
 801181c:	4632      	mov	r2, r6
 801181e:	463b      	mov	r3, r7
 8011820:	f7ee feea 	bl	80005f8 <__aeabi_dmul>
 8011824:	a35e      	add	r3, pc, #376	; (adr r3, 80119a0 <atan+0x300>)
 8011826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801182a:	f7ee fd2d 	bl	8000288 <__aeabi_dsub>
 801182e:	4632      	mov	r2, r6
 8011830:	463b      	mov	r3, r7
 8011832:	f7ee fee1 	bl	80005f8 <__aeabi_dmul>
 8011836:	a35c      	add	r3, pc, #368	; (adr r3, 80119a8 <atan+0x308>)
 8011838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801183c:	f7ee fd24 	bl	8000288 <__aeabi_dsub>
 8011840:	4632      	mov	r2, r6
 8011842:	463b      	mov	r3, r7
 8011844:	f7ee fed8 	bl	80005f8 <__aeabi_dmul>
 8011848:	4602      	mov	r2, r0
 801184a:	460b      	mov	r3, r1
 801184c:	4640      	mov	r0, r8
 801184e:	4649      	mov	r1, r9
 8011850:	f7ee fd1c 	bl	800028c <__adddf3>
 8011854:	4622      	mov	r2, r4
 8011856:	462b      	mov	r3, r5
 8011858:	f7ee fece 	bl	80005f8 <__aeabi_dmul>
 801185c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011860:	4602      	mov	r2, r0
 8011862:	460b      	mov	r3, r1
 8011864:	d14b      	bne.n	80118fe <atan+0x25e>
 8011866:	4620      	mov	r0, r4
 8011868:	4629      	mov	r1, r5
 801186a:	f7ee fd0d 	bl	8000288 <__aeabi_dsub>
 801186e:	e72c      	b.n	80116ca <atan+0x2a>
 8011870:	ee10 0a10 	vmov	r0, s0
 8011874:	4b53      	ldr	r3, [pc, #332]	; (80119c4 <atan+0x324>)
 8011876:	2200      	movs	r2, #0
 8011878:	4629      	mov	r1, r5
 801187a:	f7ee fd05 	bl	8000288 <__aeabi_dsub>
 801187e:	4b51      	ldr	r3, [pc, #324]	; (80119c4 <atan+0x324>)
 8011880:	4606      	mov	r6, r0
 8011882:	460f      	mov	r7, r1
 8011884:	2200      	movs	r2, #0
 8011886:	4620      	mov	r0, r4
 8011888:	4629      	mov	r1, r5
 801188a:	f7ee fcff 	bl	800028c <__adddf3>
 801188e:	4602      	mov	r2, r0
 8011890:	460b      	mov	r3, r1
 8011892:	4630      	mov	r0, r6
 8011894:	4639      	mov	r1, r7
 8011896:	f7ee ffd9 	bl	800084c <__aeabi_ddiv>
 801189a:	f04f 0a01 	mov.w	sl, #1
 801189e:	4604      	mov	r4, r0
 80118a0:	460d      	mov	r5, r1
 80118a2:	e764      	b.n	801176e <atan+0xce>
 80118a4:	4b49      	ldr	r3, [pc, #292]	; (80119cc <atan+0x32c>)
 80118a6:	429e      	cmp	r6, r3
 80118a8:	da1d      	bge.n	80118e6 <atan+0x246>
 80118aa:	ee10 0a10 	vmov	r0, s0
 80118ae:	4b48      	ldr	r3, [pc, #288]	; (80119d0 <atan+0x330>)
 80118b0:	2200      	movs	r2, #0
 80118b2:	4629      	mov	r1, r5
 80118b4:	f7ee fce8 	bl	8000288 <__aeabi_dsub>
 80118b8:	4b45      	ldr	r3, [pc, #276]	; (80119d0 <atan+0x330>)
 80118ba:	4606      	mov	r6, r0
 80118bc:	460f      	mov	r7, r1
 80118be:	2200      	movs	r2, #0
 80118c0:	4620      	mov	r0, r4
 80118c2:	4629      	mov	r1, r5
 80118c4:	f7ee fe98 	bl	80005f8 <__aeabi_dmul>
 80118c8:	4b3e      	ldr	r3, [pc, #248]	; (80119c4 <atan+0x324>)
 80118ca:	2200      	movs	r2, #0
 80118cc:	f7ee fcde 	bl	800028c <__adddf3>
 80118d0:	4602      	mov	r2, r0
 80118d2:	460b      	mov	r3, r1
 80118d4:	4630      	mov	r0, r6
 80118d6:	4639      	mov	r1, r7
 80118d8:	f7ee ffb8 	bl	800084c <__aeabi_ddiv>
 80118dc:	f04f 0a02 	mov.w	sl, #2
 80118e0:	4604      	mov	r4, r0
 80118e2:	460d      	mov	r5, r1
 80118e4:	e743      	b.n	801176e <atan+0xce>
 80118e6:	462b      	mov	r3, r5
 80118e8:	ee10 2a10 	vmov	r2, s0
 80118ec:	4939      	ldr	r1, [pc, #228]	; (80119d4 <atan+0x334>)
 80118ee:	2000      	movs	r0, #0
 80118f0:	f7ee ffac 	bl	800084c <__aeabi_ddiv>
 80118f4:	f04f 0a03 	mov.w	sl, #3
 80118f8:	4604      	mov	r4, r0
 80118fa:	460d      	mov	r5, r1
 80118fc:	e737      	b.n	801176e <atan+0xce>
 80118fe:	4b36      	ldr	r3, [pc, #216]	; (80119d8 <atan+0x338>)
 8011900:	4e36      	ldr	r6, [pc, #216]	; (80119dc <atan+0x33c>)
 8011902:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8011906:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801190a:	e9da 2300 	ldrd	r2, r3, [sl]
 801190e:	f7ee fcbb 	bl	8000288 <__aeabi_dsub>
 8011912:	4622      	mov	r2, r4
 8011914:	462b      	mov	r3, r5
 8011916:	f7ee fcb7 	bl	8000288 <__aeabi_dsub>
 801191a:	4602      	mov	r2, r0
 801191c:	460b      	mov	r3, r1
 801191e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011922:	f7ee fcb1 	bl	8000288 <__aeabi_dsub>
 8011926:	f1bb 0f00 	cmp.w	fp, #0
 801192a:	4604      	mov	r4, r0
 801192c:	460d      	mov	r5, r1
 801192e:	f6bf aed6 	bge.w	80116de <atan+0x3e>
 8011932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011936:	461d      	mov	r5, r3
 8011938:	e6d1      	b.n	80116de <atan+0x3e>
 801193a:	a51d      	add	r5, pc, #116	; (adr r5, 80119b0 <atan+0x310>)
 801193c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011940:	e6cd      	b.n	80116de <atan+0x3e>
 8011942:	bf00      	nop
 8011944:	f3af 8000 	nop.w
 8011948:	54442d18 	.word	0x54442d18
 801194c:	bff921fb 	.word	0xbff921fb
 8011950:	8800759c 	.word	0x8800759c
 8011954:	7e37e43c 	.word	0x7e37e43c
 8011958:	e322da11 	.word	0xe322da11
 801195c:	3f90ad3a 	.word	0x3f90ad3a
 8011960:	24760deb 	.word	0x24760deb
 8011964:	3fa97b4b 	.word	0x3fa97b4b
 8011968:	a0d03d51 	.word	0xa0d03d51
 801196c:	3fb10d66 	.word	0x3fb10d66
 8011970:	c54c206e 	.word	0xc54c206e
 8011974:	3fb745cd 	.word	0x3fb745cd
 8011978:	920083ff 	.word	0x920083ff
 801197c:	3fc24924 	.word	0x3fc24924
 8011980:	5555550d 	.word	0x5555550d
 8011984:	3fd55555 	.word	0x3fd55555
 8011988:	2c6a6c2f 	.word	0x2c6a6c2f
 801198c:	bfa2b444 	.word	0xbfa2b444
 8011990:	52defd9a 	.word	0x52defd9a
 8011994:	3fadde2d 	.word	0x3fadde2d
 8011998:	af749a6d 	.word	0xaf749a6d
 801199c:	3fb3b0f2 	.word	0x3fb3b0f2
 80119a0:	fe231671 	.word	0xfe231671
 80119a4:	3fbc71c6 	.word	0x3fbc71c6
 80119a8:	9998ebc4 	.word	0x9998ebc4
 80119ac:	3fc99999 	.word	0x3fc99999
 80119b0:	54442d18 	.word	0x54442d18
 80119b4:	3ff921fb 	.word	0x3ff921fb
 80119b8:	440fffff 	.word	0x440fffff
 80119bc:	7ff00000 	.word	0x7ff00000
 80119c0:	3fdbffff 	.word	0x3fdbffff
 80119c4:	3ff00000 	.word	0x3ff00000
 80119c8:	3ff2ffff 	.word	0x3ff2ffff
 80119cc:	40038000 	.word	0x40038000
 80119d0:	3ff80000 	.word	0x3ff80000
 80119d4:	bff00000 	.word	0xbff00000
 80119d8:	080127c0 	.word	0x080127c0
 80119dc:	080127a0 	.word	0x080127a0

080119e0 <fabs>:
 80119e0:	ec51 0b10 	vmov	r0, r1, d0
 80119e4:	ee10 2a10 	vmov	r2, s0
 80119e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80119ec:	ec43 2b10 	vmov	d0, r2, r3
 80119f0:	4770      	bx	lr
 80119f2:	0000      	movs	r0, r0
 80119f4:	0000      	movs	r0, r0
	...

080119f8 <floor>:
 80119f8:	ec51 0b10 	vmov	r0, r1, d0
 80119fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011a04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011a08:	2e13      	cmp	r6, #19
 8011a0a:	ee10 5a10 	vmov	r5, s0
 8011a0e:	ee10 8a10 	vmov	r8, s0
 8011a12:	460c      	mov	r4, r1
 8011a14:	dc32      	bgt.n	8011a7c <floor+0x84>
 8011a16:	2e00      	cmp	r6, #0
 8011a18:	da14      	bge.n	8011a44 <floor+0x4c>
 8011a1a:	a333      	add	r3, pc, #204	; (adr r3, 8011ae8 <floor+0xf0>)
 8011a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a20:	f7ee fc34 	bl	800028c <__adddf3>
 8011a24:	2200      	movs	r2, #0
 8011a26:	2300      	movs	r3, #0
 8011a28:	f7ef f876 	bl	8000b18 <__aeabi_dcmpgt>
 8011a2c:	b138      	cbz	r0, 8011a3e <floor+0x46>
 8011a2e:	2c00      	cmp	r4, #0
 8011a30:	da57      	bge.n	8011ae2 <floor+0xea>
 8011a32:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011a36:	431d      	orrs	r5, r3
 8011a38:	d001      	beq.n	8011a3e <floor+0x46>
 8011a3a:	4c2d      	ldr	r4, [pc, #180]	; (8011af0 <floor+0xf8>)
 8011a3c:	2500      	movs	r5, #0
 8011a3e:	4621      	mov	r1, r4
 8011a40:	4628      	mov	r0, r5
 8011a42:	e025      	b.n	8011a90 <floor+0x98>
 8011a44:	4f2b      	ldr	r7, [pc, #172]	; (8011af4 <floor+0xfc>)
 8011a46:	4137      	asrs	r7, r6
 8011a48:	ea01 0307 	and.w	r3, r1, r7
 8011a4c:	4303      	orrs	r3, r0
 8011a4e:	d01f      	beq.n	8011a90 <floor+0x98>
 8011a50:	a325      	add	r3, pc, #148	; (adr r3, 8011ae8 <floor+0xf0>)
 8011a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a56:	f7ee fc19 	bl	800028c <__adddf3>
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	f7ef f85b 	bl	8000b18 <__aeabi_dcmpgt>
 8011a62:	2800      	cmp	r0, #0
 8011a64:	d0eb      	beq.n	8011a3e <floor+0x46>
 8011a66:	2c00      	cmp	r4, #0
 8011a68:	bfbe      	ittt	lt
 8011a6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011a6e:	fa43 f606 	asrlt.w	r6, r3, r6
 8011a72:	19a4      	addlt	r4, r4, r6
 8011a74:	ea24 0407 	bic.w	r4, r4, r7
 8011a78:	2500      	movs	r5, #0
 8011a7a:	e7e0      	b.n	8011a3e <floor+0x46>
 8011a7c:	2e33      	cmp	r6, #51	; 0x33
 8011a7e:	dd0b      	ble.n	8011a98 <floor+0xa0>
 8011a80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011a84:	d104      	bne.n	8011a90 <floor+0x98>
 8011a86:	ee10 2a10 	vmov	r2, s0
 8011a8a:	460b      	mov	r3, r1
 8011a8c:	f7ee fbfe 	bl	800028c <__adddf3>
 8011a90:	ec41 0b10 	vmov	d0, r0, r1
 8011a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a98:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8011aa0:	fa23 f707 	lsr.w	r7, r3, r7
 8011aa4:	4207      	tst	r7, r0
 8011aa6:	d0f3      	beq.n	8011a90 <floor+0x98>
 8011aa8:	a30f      	add	r3, pc, #60	; (adr r3, 8011ae8 <floor+0xf0>)
 8011aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aae:	f7ee fbed 	bl	800028c <__adddf3>
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	f7ef f82f 	bl	8000b18 <__aeabi_dcmpgt>
 8011aba:	2800      	cmp	r0, #0
 8011abc:	d0bf      	beq.n	8011a3e <floor+0x46>
 8011abe:	2c00      	cmp	r4, #0
 8011ac0:	da02      	bge.n	8011ac8 <floor+0xd0>
 8011ac2:	2e14      	cmp	r6, #20
 8011ac4:	d103      	bne.n	8011ace <floor+0xd6>
 8011ac6:	3401      	adds	r4, #1
 8011ac8:	ea25 0507 	bic.w	r5, r5, r7
 8011acc:	e7b7      	b.n	8011a3e <floor+0x46>
 8011ace:	2301      	movs	r3, #1
 8011ad0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011ad4:	fa03 f606 	lsl.w	r6, r3, r6
 8011ad8:	4435      	add	r5, r6
 8011ada:	4545      	cmp	r5, r8
 8011adc:	bf38      	it	cc
 8011ade:	18e4      	addcc	r4, r4, r3
 8011ae0:	e7f2      	b.n	8011ac8 <floor+0xd0>
 8011ae2:	2500      	movs	r5, #0
 8011ae4:	462c      	mov	r4, r5
 8011ae6:	e7aa      	b.n	8011a3e <floor+0x46>
 8011ae8:	8800759c 	.word	0x8800759c
 8011aec:	7e37e43c 	.word	0x7e37e43c
 8011af0:	bff00000 	.word	0xbff00000
 8011af4:	000fffff 	.word	0x000fffff

08011af8 <scalbn>:
 8011af8:	b570      	push	{r4, r5, r6, lr}
 8011afa:	ec55 4b10 	vmov	r4, r5, d0
 8011afe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011b02:	4606      	mov	r6, r0
 8011b04:	462b      	mov	r3, r5
 8011b06:	b99a      	cbnz	r2, 8011b30 <scalbn+0x38>
 8011b08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011b0c:	4323      	orrs	r3, r4
 8011b0e:	d036      	beq.n	8011b7e <scalbn+0x86>
 8011b10:	4b39      	ldr	r3, [pc, #228]	; (8011bf8 <scalbn+0x100>)
 8011b12:	4629      	mov	r1, r5
 8011b14:	ee10 0a10 	vmov	r0, s0
 8011b18:	2200      	movs	r2, #0
 8011b1a:	f7ee fd6d 	bl	80005f8 <__aeabi_dmul>
 8011b1e:	4b37      	ldr	r3, [pc, #220]	; (8011bfc <scalbn+0x104>)
 8011b20:	429e      	cmp	r6, r3
 8011b22:	4604      	mov	r4, r0
 8011b24:	460d      	mov	r5, r1
 8011b26:	da10      	bge.n	8011b4a <scalbn+0x52>
 8011b28:	a32b      	add	r3, pc, #172	; (adr r3, 8011bd8 <scalbn+0xe0>)
 8011b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b2e:	e03a      	b.n	8011ba6 <scalbn+0xae>
 8011b30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011b34:	428a      	cmp	r2, r1
 8011b36:	d10c      	bne.n	8011b52 <scalbn+0x5a>
 8011b38:	ee10 2a10 	vmov	r2, s0
 8011b3c:	4620      	mov	r0, r4
 8011b3e:	4629      	mov	r1, r5
 8011b40:	f7ee fba4 	bl	800028c <__adddf3>
 8011b44:	4604      	mov	r4, r0
 8011b46:	460d      	mov	r5, r1
 8011b48:	e019      	b.n	8011b7e <scalbn+0x86>
 8011b4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011b4e:	460b      	mov	r3, r1
 8011b50:	3a36      	subs	r2, #54	; 0x36
 8011b52:	4432      	add	r2, r6
 8011b54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011b58:	428a      	cmp	r2, r1
 8011b5a:	dd08      	ble.n	8011b6e <scalbn+0x76>
 8011b5c:	2d00      	cmp	r5, #0
 8011b5e:	a120      	add	r1, pc, #128	; (adr r1, 8011be0 <scalbn+0xe8>)
 8011b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b64:	da1c      	bge.n	8011ba0 <scalbn+0xa8>
 8011b66:	a120      	add	r1, pc, #128	; (adr r1, 8011be8 <scalbn+0xf0>)
 8011b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b6c:	e018      	b.n	8011ba0 <scalbn+0xa8>
 8011b6e:	2a00      	cmp	r2, #0
 8011b70:	dd08      	ble.n	8011b84 <scalbn+0x8c>
 8011b72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011b76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011b7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011b7e:	ec45 4b10 	vmov	d0, r4, r5
 8011b82:	bd70      	pop	{r4, r5, r6, pc}
 8011b84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011b88:	da19      	bge.n	8011bbe <scalbn+0xc6>
 8011b8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011b8e:	429e      	cmp	r6, r3
 8011b90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011b94:	dd0a      	ble.n	8011bac <scalbn+0xb4>
 8011b96:	a112      	add	r1, pc, #72	; (adr r1, 8011be0 <scalbn+0xe8>)
 8011b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d1e2      	bne.n	8011b66 <scalbn+0x6e>
 8011ba0:	a30f      	add	r3, pc, #60	; (adr r3, 8011be0 <scalbn+0xe8>)
 8011ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba6:	f7ee fd27 	bl	80005f8 <__aeabi_dmul>
 8011baa:	e7cb      	b.n	8011b44 <scalbn+0x4c>
 8011bac:	a10a      	add	r1, pc, #40	; (adr r1, 8011bd8 <scalbn+0xe0>)
 8011bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d0b8      	beq.n	8011b28 <scalbn+0x30>
 8011bb6:	a10e      	add	r1, pc, #56	; (adr r1, 8011bf0 <scalbn+0xf8>)
 8011bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bbc:	e7b4      	b.n	8011b28 <scalbn+0x30>
 8011bbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011bc2:	3236      	adds	r2, #54	; 0x36
 8011bc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011bc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011bcc:	4620      	mov	r0, r4
 8011bce:	4b0c      	ldr	r3, [pc, #48]	; (8011c00 <scalbn+0x108>)
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	e7e8      	b.n	8011ba6 <scalbn+0xae>
 8011bd4:	f3af 8000 	nop.w
 8011bd8:	c2f8f359 	.word	0xc2f8f359
 8011bdc:	01a56e1f 	.word	0x01a56e1f
 8011be0:	8800759c 	.word	0x8800759c
 8011be4:	7e37e43c 	.word	0x7e37e43c
 8011be8:	8800759c 	.word	0x8800759c
 8011bec:	fe37e43c 	.word	0xfe37e43c
 8011bf0:	c2f8f359 	.word	0xc2f8f359
 8011bf4:	81a56e1f 	.word	0x81a56e1f
 8011bf8:	43500000 	.word	0x43500000
 8011bfc:	ffff3cb0 	.word	0xffff3cb0
 8011c00:	3c900000 	.word	0x3c900000

08011c04 <_init>:
 8011c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c06:	bf00      	nop
 8011c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c0a:	bc08      	pop	{r3}
 8011c0c:	469e      	mov	lr, r3
 8011c0e:	4770      	bx	lr

08011c10 <_fini>:
 8011c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c12:	bf00      	nop
 8011c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c16:	bc08      	pop	{r3}
 8011c18:	469e      	mov	lr, r3
 8011c1a:	4770      	bx	lr
